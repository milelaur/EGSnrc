%C80
"#############################################################################"
"                                                                             "
"  EGSnrc BEAMnrc component module: stacked planes                            "
"  Copyright (C) 2015 National Research Council Canada                        "
"                                                                             "
"  This file is part of EGSnrc.                                               "
"                                                                             "
"  EGSnrc is free software: you can redistribute it and/or modify it under    "
"  the terms of the GNU Affero General Public License as published by the     "
"  Free Software Foundation, either version 3 of the License, or (at your     "
"  option) any later version.                                                 "
"                                                                             "
"  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY  "
"  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  "
"  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for   "
"  more details.                                                              "
"                                                                             "
"  You should have received a copy of the GNU Affero General Public License   "
"  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.             "
"                                                                             "
"#############################################################################"
"                                                                             "
"  Author:          Blake Walters, 1995                                       "
"                                                                             "
"  Contributors:    Dave Rogers                                               "
"                   Geoff Zhang                                               "
"                   Iwan Kawrakow                                             "
"                                                                             "
"#############################################################################"
"                                                                             "
"  This code originally evolved from the SLAB component module written by     "
"  Dave Rogers and Bruce Faddegon, starting in 1991, and subsequently edited  "
"  by George Ding.                                                            "
"                                                                             "
"  The contributors named above are only those who could be identified from   "
"  this file's revision history.                                              "
"                                                                             "
"  This code was originally part of the BEAM code system for Monte Carlo      "
"  simulation of radiotherapy treatments units. It was developed at the       "
"  National Research Council of Canada as part of the OMEGA collaborative     "
"  research project with the University of Wisconsin. The system was          "
"  originally described in:                                                   "
"                                                                             "
"  BEAM: A Monte Carlo code to simulate radiotherapy treatment units,         "
"  DWO Rogers, BA Faddegon, GX Ding, C-M Ma, J Wei and TR Mackie,             "
"  Medical Physics 22, 503-524 (1995).                                        "
"                                                                             "
"  BEAM User Manual                                                           "
"  DWO Rogers, C-M Ma, B Walters, GX Ding, D Sheikh-Bagheri and G Zhang,      "
"  NRC Report PIRS-509A (rev D)                                               "
"                                                                             "
"  As well as the authors of this paper and report, Joanne Treurniet of NRC   "
"  made significant contributions to the code system, in particular the GUIs  "
"  and EGS_Windows. Mark Holmes, Brian Geiser and Paul Reckwerdt of Wisconsin "
"  played important roles in the overall OMEGA project within which the BEAM  "
"  code system was developed.                                                 "
"                                                                             "
"  There have been major upgrades in the BEAM code starting in 2000 which     "
"  have been heavily supported by Iwan Kawrakow, most notably: the port to    "
"  EGSnrc, the inclusion of history-by-history statistics and the development "
"  of the directional bremsstrahlung splitting variance reduction technique.  "
"                                                                             "
"#############################################################################"


"*******************************************************************************
"
"                             ***********             ""toc:
"                             *         *             ""toc:
"                             *  SLABS  *             ""toc:
"                             *         *             ""toc:
"                             ***********             ""toc:
"
"   History of modifications given by sccs
"
"*******************************************************************************
"*******************************************************************************
"
"                               PURPOSE
"                               *******
"   Component module for BEAM.  Multiple planes of arbitrary thickness and
"   material.
"
"*******************************************************************************
"
"                          GENERAL DESCRIPTION
"                          *******************
"
"   This set of routines is used in conjunction with BEAM.MORTRAN to simulate
"   one component module of a clinical linear accelerator:  a set of 2 or more
"   slabs infinite in x & y.
"
"   This component module can be added to the simulation by including these
"   routines in the MORTRAN file BEAM_CM.MORTRAN and including the MORTRAN
"   replacement macros associated with this component module in the file
"   BEAM_COMMON.MORTRAN.  The order of the component modules in either of
"   these files is unimportant.  To explicitly include this component module in
"   the simulation it must be included in the $CM_LIST replacement statement.
"   The component modules in this list are stacked sequentially for the
"   simulation, one on top of the other, and must not overlap.
;
%E   " SLABS_cm.mortran - start of geometry description
"I>
"I> Geometry of Target (SLABS):             ""toc:
"I> ******************
"I>
"I>                     |        |          |        |                |
"I>                     |        |          |        |                |
"I>                     |        |          |        |                |
"I>                     |        |          |        |                |
"I>                     |        |          |        |                |
"I> -------->    IR=    | IR=1   |  IR=2    | ...... |  IR=N_SLABS    |
"I>    beam   N_SLABS+1 |        |          |        |                |
"I> direction  (airgap) |        |          |        |                |
"I>                     |        |          |        |                |
"I>                     |        |          |        |                |
"I>                     |        |          |        |                |
"I>
"I>   IR is the region number within the CM.  There are N_SLABS(+1) local
"I>   regions. The first region is the slab furthest upstream.  If there
"I>   is an airgap at the front (top) then it is the last region,
"I>   otherwise the last region is the slab furthest downstream.
"I>
"I>
"I>            -----------------------------------------------
"I>            |          Region        | Description        |
"I>            |------------------------|--------------------|
"I>            |  absolute    | local   |                    |
"I>            |--------------|---------|                    |
"I>            |IRSTART_SLABS | IR_SLABS| slab infinite x, y |
"I>            |  +IR_SLABS-1 |         |                    |
"I>            -----------------------------------------------
"I>
" Subroutines:
" ************
"                      INPUT_Target
"                      ISUMRY_Target
"                      HOWFAR_Target
"                      WHERE_AM_I_Target
"
"       Called from BEAM's subroutines:
"                      INPUT
"                      ISUMRY
"                      HOWFAR
"
"       Subroutines called:
"                      WHERE_AM_I (a BEAM subroutine)
"
"*******************************************************************************
"
"                             RESTRICTIONS ON USE/BUGS             ""toc:
"                             ************************
"
"         As structured, one cannot assign IREGION_TO_BIT or DOSE_ZONE values
"         to the air gap region if it exists.
"
"        in EGS_WINDOWS file, a disk instead of square is output
"
"*******************************************************************************
"
;
"*******************************************************************************
"**************************  DESCRIPTION OF VARIABLES  *************************
"*******************************************************************************
"
"
"                                OTHER VARIABLES
"                                ***************
"
"  Refer to the section on type declarations for each subroutine. The following
"  section describes the variables input from unit 5.  These variables define
"  the parameters of each simulation.
"
"*******************************************************************************
"
"                               INPUT FROM UNIT 5              ""toc:
"                               *****************             ""toc:
"
"I>
"I>  CARDS CM_Target  (SLABS)
"I>  **************
"I>
"I>  -1  dummy line (filled with ****)  read in main
"I>
"I>   0  RMAX_CM(ICM_Target)       outer boundary for CM - 1/2 side of
"I>                                square(read in main)
"I>
"I>   1  TITLE_Target (60A1):  Title of CM.
"I>
"I>   2  N_Target (I5):  Number of planar slabs in CM = # regions in CM,
"I>                      excludes any air gap needed.
"I>
"I>   3  ZMIN_Target (F15.0):  Distance from front of first slab to reference
"I>                            plane  (Z=0).
"I>
"I>   4  Parameters of each slab from front to back (increasing Z).  One pair of
"I>      cards (4a and 4b) for each of the slabs.
"I>
"I>      4a   ZTHICK_Target, ECUT, PCUT, DOSE_ZONE, IREGION_TO_BIT, ESAVEIN
"I>                           (3F15.0,2I5,F15.0):
"I>
"I>              ZTHICK_Target:   slab thickness.
"I>              ECUT, PCUT:      Cutoff energies-defaults are ECUTIN,PCUTIN
"I>              DOSE_ZONE:       Dose zone to score dose - 0 if not scored
"I>              IREGION_TO_BIT:  map this region to this bit number in LATCH
"I>              ESAVEIN:         Value of ESAVE for this region if range
"I>                               rejection on. Default is ESAVE_GLOBAL.
"I>
"I>      4b   MED_IN (24A1):  Medium of the planar slab, used to set MED_INDEX.
"I>
"I>   Example
"I>   *******
"I>
"I>  The following set of cards defines a 1 cm thick slab of air sandwiched
"I>  between two 0.1 cm thick slabs of tungsten.  The front slab is at
"I>  Z=7.32 cm. Electrons will be followed in the slabs down to kinetic energies
"I>  of 10 keV (total energies of 0.521 MeV) and photons will be followed down
"I>  to energies of 1 keV.  The dose deposited in the air will be scored and
"I>  added to the dose from the other regions in dose zone 1, and the
"I>  dose deposited in both tungsten slabs will be scored and added to the dose
"I>  from the other regions in dose zone 2.  Particles interacting in
"I>  the first slab will be associated with BIT 1 in LATCH.  In all slabs,
"I>  ESAVEIN=0, thus ESAVE in each slab will default to ESAVE_GLOBAL.
"I>
"I>  10.0,                         RMAX_CM
"I>  Multiple slabs: 0.1cm W-1cm air-0.1cm W, ECUT=0.521, PCUT=0.001
"I>  3,                            N_SLABS
"I>  7.32,                         ZMIN_SLABS
"I>  0.1, 0.521, 0.001, 2,1,0.0,   ZTHICK_SLABS etc
"I>  W521ICRU
"I>  1., 0.521, 0.001, 1,0,0.0
"I>  AIR521ICRU
"I>  0.1, 0.521, 0.001, 2,0,0.0
"I>  W521ICRU
"
"
%E   "Start of subroutine INPUT_Target"
"*******************************************************************************
"
"                           Subroutine INPUT_SLABS
"                           **********************
"
"  A CM input subroutine for a series of 1 or more slabs infinite in x & y.
"
"  It must fill all parameters in COMMON/CMs/ associated with this CM.
"
"  Routine prints error messages on unit 6 for
"      format error on input
"      end of file hit
"      error in logic of input file
"
"  The format of the input is presented in the section `INPUT FROM UNIT 5' in
"  the above documentation.
"
"*******************************************************************************

;SUBROUTINE INPUT_Target;


;IMPLICIT NONE;
;COMIN/ BOUNDS,CMs,CM_Target,GEOM,IO_INFO,MEDIA,MISC,SCORE,USER,EGS-IO/;
"T>
"T>*********************************
"T>TYPE DECLARATIONS FOR INPUT_SLABS
"T>*********************************
"T>
$REAL ZMIN_Target,                   "T>minimum Z for this CM
      ESAVEIN;                       "T>ESAVE value read in for each region

INTEGER I,J,                         "T>DO loop indeces
        IRA,                         "T>Absolute region number
        MED_FLAG,                    "T>flag for media-sort macro $MED_INPUT
        MED_INDEX,                   "T>medium index,set(post)sort $MED_INPUT
        NDO;                         "T>loop index
"
"  initialize parameters
"  =====================
"
ICM_Target = ICM;                   "CM index for this component module
                                    "Note ICM_Target not needed here since
                                    "ICM is set, but it is not set when
                                    "other routines called.
IRSTART_Target = IR_start_CM(ICM_Target); "Index of first region in this CM,
                                    "set by previous CM or in MAIN if ICM=1
IERR_GEOM(ICM_Target) = 0;          "Geometry-checking flag, 0 if no errors
"
"establish CM boundary as a square (was cylinder prior to April 13,1994)
RMAX_CM_FLAG(ICM_Target) = 2;       "put a square boundary about CM
"
OUTPUT;(/' Target (SLABS)');
OUTPUT RMAX_CM(ICM); (' This component is a set of planar slabs'/
  '      Outer boundary is a square with |x| & |y| <',F10.2,' cm');
IF(ICM_Target = 1)[
   OUTPUT Z_min_CM(ICM_Target);
   (' This is first component -- starts at ',F11.4,' cm from reference plane');]
ELSE
   [OUTPUT Z_min_CM(ICM_Target);(' Previous CM ends at:',F12.5,' cm');]
OUTPUT;(' TITLE: ',$);
;MINPUT (Target) TITLE_Target;(60A1);
               "MINPUT is a replacement macro with EOF and
               "ERR branching to :EOF_{P1}: and :ERR_{P1}:
OUTPUT TITLE_Target;(' ',60A1);
"
"   get information for each slab
"   =============================
"
"
"Get maximum number of slabs (and regions) permitted
OUTPUT $MAX_N_Target; (' NUMBER OF SLABS (MINIMUM 1, MAXIMUM',I3,'): ',$);
;MINPUT (Target) N_Target; (I5);
OUTPUT N_Target; (I5);
IF(N_Target < 1)[
         N_Target=1;
         OUTPUT ICM_Target;
          (//'***ERROR IN CM ',I4,' (SLABS):'/
             '# of slabs < 1'/
             '# of slabs set to 1 for now.'//);
         IERR_GEOM(ICM_Target)=IERR_GEOM(ICM_Target)+1;
]
ELSEIF (N_Target > $MAX_N_Target)[
               N_Target=$MAX_N_Target;
               OUTPUT ICM_Target, N_Target;
               (//'***ERROR IN CM ',I4,' (SLABS):'/
                  '# of slabs > max. allowed'/
                  '# of slabs reduced to ',I4,' for now'//);
               IERR_GEOM(ICM_Target)=IERR_GEOM(ICM_Target)+1;
]

" get distance from reference plane, z=0"
"
OUTPUT;
 (' DISTANCE FROM FRONT OF SLABS (excluding air gap) TO REF PLANE (z=0): ',$);
;MINPUT (Target) ZMIN_Target;(F15.0);
OUTPUT ZMIN_Target;(F10.5);
IF(ZMIN_Target < Z_min_CM(ICM_Target))["have overlapped two CMs"
   IF(ICM_Target = 1)["first CM is special case"
     "Z_min_CM(1) is very front of accelerator, including air, input in main"
     OUTPUT ICM_Target, ZMIN_Target,Z_min_CM(ICM_Target);
      (//' ***WARNING IN CM ',I4,' (Target):'/
       ' Z_min_CM(1) (=front of the accelerator) is past front of first slab'/
       ' Z_min_CM(1) reset to value just input =',F8.5,' cm'/
       ' from ',F8.5,' cm'//);
     WRITE(IOUTLIST,:label1:) ICM_Target, ZMIN_Target,
                              Z_min_CM(ICM_Target);
          :label1: FORMAT(//' ***WARNING IN CM ',I4,' (Target):'/
  ' Z_min_CM(1) (=front of the accelerator) is past front of first slab'/
  ' Z_min_CM(1) reset to value just input =',F8.5,' cm'/
  ' from ',F8.5,' cm'//);
     Z_min_CM(ICM_Target) = ZMIN_Target;
   ]
   ELSE[
     OUTPUT ICM_Target;
       (//'***ERROR IN CM ',I4,' (Target):'/
          'Overlaps with previous CM.'//);
     IERR_GEOM(ICM_Target)=IERR_GEOM(ICM_Target)+1;
   ]
]

"loop over slabs
"
IRA = IRSTART_Target-1; "absolute region number
DO IR_Target=1,N_Target [
   "loop through local region number to get slab information"
   IRA = IRA+1;
   "get thickness, cutoff energies, and dose scoring zone"
   "
   OUTPUT IR_Target;(//' Inputs for slab # ',I5);
   OUTPUT; (' SLAB THICKNESS(cm), ECUT, PCUT,',
         ' DOSE ZONE(0=>DONT SCORE), IREGION_TO_BIT,ESAVE'/' :',$);
   ;MINPUT (Target)
      ZTHICK_Target(IR_Target),ECUT(IRA),PCUT(IRA),
      DOSE_ZONE(IRA),IREGION_TO_BIT(IRA),ESAVEIN;
      (3F15.0,2I5,F15.0);
   IF (ECUT(IRA) < ECUTIN) ECUT(IRA)=ECUTIN;
   IF (PCUT(IRA) < PCUTIN) PCUT(IRA)=PCUTIN;
   IF (ESAVEIN > 0.511) [ESAVE(IRA) = ESAVEIN;]
   ELSE [ESAVE(IRA)=ESAVE_GLOBAL;]
   "Particles with total energies < ESAVE are considered for range rejection"
   "if range rejection is on.  Default is ESAVE_GLOBAL but values are set"
   "back to zero in main if range rejection is off"
   ;OUTPUT
      ZTHICK_Target(IR_Target),ECUT(IRA),PCUT(IRA),
      DOSE_ZONE(IRA),IREGION_TO_BIT(IRA), ESAVE(IRA);
      (3F11.5,I9,I20,F11.5);
   IF(ZTHICK_Target(IR_Target)<0.0)[
      OUTPUT ICM_Target, IR_Target;
       (//'***ERROR IN CM ',I4,' (SLABS):'/
          'ZTHICK(',I4,') < 0.0'//);
      IERR_GEOM(ICM_Target)=IERR_GEOM(ICM_Target)+1;
   ]
   "get material for this slab and determine material number for this region"

   OUTPUT;(' SLAB ',$);
   ;$MED_INPUT(Target); " inputs character array MED_IN from unit 5, loops
      "through array MEDIA(24,I) to check if medium was previously input.
      "If so, sets MED_INDEX to index of previous medium.  If not,
      "increments NMED and sets MED_INDEX to NMED.
   MED(IRA) = MED_INDEX; " medium of the planar slab
] "end of loop over IR_Target"
"
"  parameter definition
"  ====================
"
"fill arrays of distance from reference plane (z=0) to front and back of slabs
ZFRONT_Target(1) = ZMIN_Target;
IF (N_Target > 1) [
   DO IR_Target=1,N_Target-1 ["loop through local region number"
      ZBACK_Target(IR_Target) = ZFRONT_Target(IR_Target) +
                            ZTHICK_Target(IR_Target);
      ZFRONT_Target(IR_Target+1) = ZBACK_Target(IR_Target);
   ] "end of loop over IR_Target"
]
ZBACK_Target(N_Target) = ZFRONT_Target(N_Target) +
                             ZTHICK_Target(N_Target);
"
"establish start of next CM
Z_min_CM(ICM_Target+1) = ZBACK_Target(N_Target);
"
"  set up air gap to previous CM, if present
"  =========================================
"
"  The air gap has the highest region number in the CM, even though it is at
"  the top of the component module.  This is to allow the assignment of region
"  numbers on input of the parameters of each local region (mainly to assign the
"  medium number of the region).  The air gap is then assigned after all of the
"  CM parameters have been input.
"
Z_gap_THICK(ICM_Target) = ZMIN_Target-Z_min_CM(ICM_Target);

IF (Z_gap_THICK(ICM_Target) < $MIN_GAP) ["$MIN_GAP is defined in  main"
   Z_gap_THICK(ICM_Target) = 0.;
   ZFRONT_Target(1)=Z_min_CM(ICM_Target);
   N_GAP_Target = 0; "no air gap for this CM
]
ELSE [
   N_GAP_Target = 1; "this CM has an air gap
   IRA = IRSTART_Target+N_Target; "absolute region number of air gap
   MED(IRA) = AIR_INDEX; "medium is air, vacuum or whatever assigned
   ESAVE(IRA)=ESAVE_GLOBAL; "Particles with total energies below ESAVE are
                            "considered for range rejection
   ECUT(IRA) = ECUTIN;
   PCUT(IRA) = PCUTIN;
   ZFRONT_Target(N_Target+1) = Z_min_CM(ICM_Target);
   "only for output listing
]
"  set up region numbers
"  =====================
"
"  This CM has N_Target+N_GAP_Target regions, plates infinite in x & y, with
"  an air gap at the front, if present. Slabs are numbered in sequence starting
"  from the furthest upstream slab to the last downstream slab, followed by the
"  air gap, if present.
"
IREND_Target = IRSTART_Target+N_Target+N_GAP_Target-1;
               "Index of last region
NREG = NREG+N_Target+N_GAP_Target;  "Total of regions in full geometry up
                                    "to and including this CM
                                    "NREG is in comin GEOM
IF (NREG <= $MXREG) ["have not exceeded maximum region number
      "Index of first region in next CM:"
      IR_start_CM(ICM_Target+1) = IREND_Target+1;
]
ELSE [
      OUTPUT ICM_Target,NREG,$MXREG;
      (//'***ERROR IN CM ',I4,' (SLABS):'/
         I4,' regions requested, only', I4,' available'/
         '    Change $MXREG in beam_user_macros.mortran'//);
      IERR_GEOM(ICM_Target)=IERR_GEOM(ICM_Target)+1;
]
"
"  establish dose-scoring zones and range rejection parameters for each region
"  ===========================================================================
"
"Note air gap cannot be a dose scoring region as presently set up.
IRA = IRSTART_Target-1; "absolute region number
DO IR_Target=1,N_Target ["loop over local region number
   IRA = IRA+1;

   "dose-scoring zones
   "
   NDOSE_ZONE = MAX(DOSE_ZONE(IRA),NDOSE_ZONE); "Number of dose zones
   MAX_BIT = MAX(IREGION_TO_BIT(IRA),MAX_BIT); " current maxmum number
] "end of loop over IR_Target

"set up minimum thicknesses which in this case are just the last 5"
"slabs"
"If we ever need more than 5 slabs, we should extend this or do
"something fancy like group similar materials"

NDO = MIN(5,N_Target); "consider at most 5 slabs of material"
                       "air gap handled below"
                       "limit of 5 not essential here, but needed in helpful"
                       "in other cases"
"OUTPUT NDO;(' For automated range rejection consider',I3,' slabs of material');
DO IR_Target = N_Target, N_Target-NDO+1, -1 [
   IRA = IR_Target + IRSTART_Target-1;   "absolute region"
   Z_min_thick(ICM,N_Target+1 - IR_Target) = ZTHICK_Target(IR_Target);
   "MED_min_thick is in COMIN CMs"
   MED_min_thick(ICM,N_Target+1 - IR_Target) = MED(IRA);
   "OUTPUT IR_Target,IRA,ICM, N_Target+1-IR_Target,
      "Z_min_thick(ICM,N_Target+1-IR_Target),
      "ICM,N_Target+1 - IR_Target,
      "MED_min_thick(ICM,N_Target+1 - IR_Target);
      "(' IR_Target,IRA=',I2,',',I3,' Z_min_thick(',2I2,')=',F10.3,
      "'  MED_min_thick(',2I3,')=',I2   );
]
IF(NDO < 5)[  "some not used - include air gap if there is one"
    IF(N_GAP_Target = 1)["There is an air gap"
       Z_min_thick(ICM,NDO+1) = Z_gap_thick(ICM_Target);
       MED_min_thick(ICM,NDO+1) = 1; "AIR is 1"
       OUTPUT ICM,NDO+1,Z_min_thick(ICM,NDO+1),ICM,NDO+1,
                 MED_min_thick(ICM,NDO+1);
       (' Front air gap',T20,' Z_min_thick(',I2,',',I2,')=',F10.3,
                 '  MED_min_thick(',I2,',',I2,')=',I5   );
       NDO = NDO +1;
    ]"end of loop if there is an air gap"
    IF(NDO < 5 )["check in case incremented by air gap"
       DO I = NDO+1,5["zero remaining, unused values"
         Z_min_thick(ICM,I) = 0.0;
         MED_min_thick(ICM,I) = 0;
       ]"end of do loop on I"
    ]"end second NDO < 5 case"
]"end NDO < 5 case"
"
"   return from INPUT_SLABS
"   =======================
RETURN;

"   error messages
"   ==============
"
:EOF_Target:
;OUTPUT ICM;
(//' *** ERROR in Target *** unexpected end of file reading input for CM',I3);
STOP;

:ERROR_Target:
;OUTPUT ICM;(//' *** ERROR  in Target *** format error on input for CM',I3);
STOP; END;
"End of INPUT_Target"

%E   "start of subroutine ISUMRY_Target"
"*******************************************************************************
"
"                          Subroutine ISUMRY_SLABS
"                          ***********************
"
" Summarize input, write graphics file for EGS_Windows, and set parameters that
" require medium information obtained from HATCH call.
"
"*******************************************************************************

;SUBROUTINE ISUMRY_Target;


;IMPLICIT NONE;
;COMIN/BOUNDS,CMs,CM_Target,GEOM,IO_INFO,MEDIA,MISC,SCORE,UPHIOT,USER/;
"T>
"T>**********************************
"T>TYPE DECLARATIONS FOR ISUMRY_SLABS
"T>**********************************
"T>
INTEGER
   ICOLOUR,   "T>colour of CM for EGS_Windows
   IDD,       "T>index of dose scoring zone
   IRA,       "T>absolute region number
   J;         "T>DO loop index
"
"   Mass of dose zone
"   =================
"Need to calculate mass of dose zone here,after call to HATCH, where the region
"density is set if it was allowed to default in INPUT_Target.
"
IRA = IRSTART_Target-1; "absolute region number
DO IR_Target=1,N_Target+N_GAP_Target ["loop over local region number
   IRA = IRA+1;
   IF(DOSE_ZONE(IRA).NE.0) ["this is a dose zone"
      IDD=DOSE_ZONE(IRA);
      "add mass of square region to any previous mass in dose region"
      AMASS(IDD)=AMASS(IDD) + RHOR(IRA)* (ZBACK_Target(IR_Target)
                 - ZFRONT_Target(IR_Target))*4*(RMAX_CM2(ICM_Target));
      "note RHOR is the density which defaults to that from PEGS4 in HATCH
      "but could be set to any value prior to call to hatch
   ]
] "end of loop over IR_Target"

"   Summarize geometrical information for this component module in listing file
"   ===========================================================================
"
"Output to list file changed to make it more clear--B Walters 18/08/94"

WRITE(IOUTLIST,110) ICM_Target,TITLE_Target;
WRITE(IOUTLIST,120) Z_min_CM(ICM_Target),RMAX_CM(ICM_Target);
WRITE(IOUTLIST,122);
IF(N_GAP_Target~=0)[
   WRITE(IOUTLIST,124) 'airgap',Z_min_CM(ICM_Target),
                       ZFRONT_Target(1)-Z_min_CM(ICM_Target);
]
DO IR_Target=1,N_Target[
   WRITE(IOUTLIST,123) IR_Target,ZFRONT_Target(IR_Target),
                       ZTHICK_Target(IR_Target);
]
WRITE(IOUTLIST,130);
IRA = IRSTART_Target-1;

DO IR_Target=1,N_Target + N_GAP_Target [
   IRA = IRA+1;
   IF(IR_Target<=N_Target)[
      IF (MED(IRA)=0) ["Medium is vacuum"
         WRITE(IOUTLIST,140)
         IR_Target,IR_Target,'slab',ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),
         IREGION_TO_BIT(IRA),'V','a','c','u','u','m';
      ]
      ELSE ["Medium is not vacuum"
         WRITE(IOUTLIST,140)
         IR_Target,IR_Target,'slab',ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),IREGION_TO_BIT(IRA),
         (MEDIA(J,MED(IRA)),J=1,9);
      ]
   ]
   ELSE[
      IF (MED(IRA)=0) ["Medium is vacuum"
         WRITE(IOUTLIST,142)
         IR_Target,'NA','airgap',ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),
         IREGION_TO_BIT(IRA),'V','a','c','u','u','m';
      ]
      ELSE ["Medium is not vacuum"
         WRITE(IOUTLIST,142)
         IR_Target,'NA','airgap',ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),IREGION_TO_BIT(IRA),
         (MEDIA(J,MED(IRA)),J=1,9);
      ]
    WRITE(IOUTLIST,141)'at top';
    ]
]"end loop on IR_Target"


110 FORMAT(///1x,79('-')/
 '  Component module',I3,' is one or more planar slabs  ',
 '(SLABS)'
           /1x,79('-')
           //T5,'Title: ',68A1);
120 FORMAT(/T2,'Target geometry parameters:',
           /T2,'-----------------------------',
           /T2,'Distance of front of CM from reference plane = ',
           F15.5,' cm',
           /T2,'Half-width of outer boundary of CM = ',F15.5,' cm');
122 FORMAT(/T2,
'slab #    Z front    thickness',
/T2,
'           face               ',
/T2,
'           (cm)        (cm)   ');
123 FORMAT(T2,I4,F12.3,F11.3);
124 FORMAT(T2,A6,F10.3,F11.3);
130 FORMAT(/T2,'Target region parameters:',
           /T2,'---------------------------',
           /T2,'local  slab #  location  electron  photon',
           '  range-rejection  dose  bit  medium'
           /T2,'region                    cutoff   cutoff',
           '   level     max   zone  set'
           /T2,'                           (MeV)    (MeV)',
           '   (MeV)    (MeV)');

140 FORMAT(T2,I3,I7,5X,A7,F10.3,F9.3,F8.3,F9.3,I5,I5,2X,9A1);
141 FORMAT(T17,A7);
142 FORMAT(T2,I3,5X,A2,5X,A7,F10.3,F9.3,F8.3,F9.3,I5,I5,2X,9A1);



"   Output representation of this component module to file for EGS_Windows
"   ======================================================================
"
IF (IWATCH = 4 | IZLAST = 2) ["Graphics file requested"
   ICOLOUR = MOD(ICM_Target,4)+1; "select ICOLOUR = 1, 2, or 3, colour of CM"
   DO IR_Target=1,N_Target ["Loop over local region number"
      WRITE(IOUTGEOM,200) ICOLOUR,'DISK',0.,0.,
                       ZFRONT_Target(IR_Target),RMAX_CM(ICM_Target);
      "NOTE *** it was a disk but it is a square now!"
   ]
   WRITE(IOUTGEOM,200) ICOLOUR,'DISK',0.,0.,
                       ZBACK_Target(N_Target),RMAX_CM(ICM_Target);
   200 FORMAT(' ',I1,A4,10(F7.2,','));
] "End of graphics output"
"
;RETURN;END;
"SLABS_cm.mortran end of ISUMRY_Target"

%E   "start of subroutine HOWFAR_Target"
"*******************************************************************************
"************************** Component Module SLABS *****************************
"*******************************************************************************
"
"                          Subroutine HOWFAR_SLABS
"                          ***********************
"
" HOWFAR routine for stacked planar media.
"
" Determine if current region number is within component module SLABS, and if so
" evaluate DIST, distance to region boundary along current trajectory.  USTEP
" must not exceed DIST.
"
"   There are N_SLABS local regions + an air gap (if present):
"
"     local               absolute                  description
"   ---------  ----------------------------------  -------------
"   IR_SLABS   IR_start_CM(ICM_SLABS)+IR_SLABS-1   slab IR_SLABS
"   N_SLABS+1  IR_start_CM(ICM_SLABS)+N_SLABS      air gap
"
"       Geometrical co-ordinates, as set in INPUT_SLABS are:
"       ZFRONT_SLABS(IR_SLABS)     front of slab IR_SLABS (upstream surface)
"       ZBACK_SLABS(IR_SLABS)      back of slab IR_SLABS (downstream surface)
"
"*******************************************************************************

;SUBROUTINE HOWFAR_Target;


;IMPLICIT NONE;
;COMIN/ CMs,CM_Target,EPCONT,STACK,EGS-IO/;
"T>
"T>**********************************
"T>TYPE DECLARATIONS FOR HOWFAR_SLABS
"T>**********************************
"T>
INTEGER
   IRL;         "T>local region number (absolute), required by HOWNEAR macro
$REAL
   DIST,        "T>distance to region boundary along current particle trajectory
   DMIN_Target, "T>minimum distance to boundaries checked thus far
   ZNEAR;       "T>distance to nearest boundary

IRL = IR(NP);   "local region number (absolute)

" Set DNEAR
" *********
" This replacement macros sets DMIN_Target as well as defining IR_Target
;
Target_CM_HOWNEAR(DMIN_Target);
DNEAR(NP) = DMIN_Target;
;
" Boundary-crossing check
" ***********************
" Determine if current region number is within component module SLABS,
"  and if so evaluate DIST, distance to region boundary along current
" trajectory.  USTEP must not exceed DIST.
"
IF (IR_Target>0 & IR_Target<N_Target+1) [
   "particle in this CM (not in air gap)"
   IF (W(NP)>0.0) ["particle going forward"
      "calculate distance to back boundary"
      ZNEAR = ZBACK_Target(IR_Target)-Z(NP);
      DIST = ZNEAR/W(NP);
      IF (DIST < 0.) [DIST=0.;]
      "Above check was put in to handle the case where the distance"
      "to interaction is ~ the distance to the"
      "back of the SLABS CM.  In this case, particles initiated"
      "by the interaction may actually have Z values that put them"
      "in the next CM, but because the WHERE_AM_I for the next"
      "CM has not been called yet, HOWFAR for SLABS is used, and a"
      "negative USTEP results.  Note that this unusual case has"
      "only been observed to occur between SLABS and CONS3R CMs"
      "when incident particles are photons, SLABS is the target, and"
      "CONS3R is the primary collimator immediately below the target"
      "18/12/95"
      IF(DIST=0. & IR_Target=N_Target)[DIST=1.E-16;]
      "Above gives DIST a very small positive value in case of leaving CM"
      "When collecting phase space immediately below a thin (0.01 cm) layer of"
      "Mylar in a beam, there was a high probability of the calculated"
      "value of USTEP (ie unmodified by HOWFAR) actually putting the particle"
      "right on the back of the mylar layer.  When it came to the next step,"
      "the calculated value of DIST was 0, which meant USTEP was set to 0,"
      "and, as a result, AUSGAB was not called on leaving the CM."
      IF(DIST <= USTEP ) ["particle to be moved to region boundary
         USTEP = DIST;
         IF (IR_Target<N_Target) ["particle will remain in CM"
            IRNEW = IR(NP)+1; "new region number"
         ]
         ELSE ["particle will enter downstream CM"
            CALL WHERE_AM_I(ICM_Target,1); "get IRNEW, ICMNEW"
         ]
      ]
   ]" end of forward going block"
   ELSEIF (W(NP)<0.0) ["particle going backwards"
      "calculate distance to front boundary"
      ZNEAR = Z(NP)-ZFRONT_Target(IR_Target);
      DIST = -ZNEAR/W(NP); "Direction cosine is negative"
      IF (DIST < 0.) [DIST=0.;] "see reason above"
      IF (DIST=0. & N_GAP_Target=0 & IR_Target=1)[ DIST=1.E-16;]
      IF(DIST <= USTEP) [
         USTEP = DIST;
         IF (IR_Target>1) ["particle will remain in CM"
            IRNEW = IR(NP)-1; "new region number"
         ]
         ELSEIF (IR_Target=1 & N_GAP_Target=1) ["particle entering air gap"
            IRNEW = IREND_Target; "new region number"
         ]
         ELSE ["particle will enter upstream CM"
            CALL WHERE_AM_I(ICM_Target,-1); "get IRNEW, ICMNEW"
         ]
      ]
   ]" end of backward going block"
   "if W(NP)=0.0, never hit boundary, need not reset USTEP"
]"end of CM regions"

"   in air gap at top of CM
"   =======================
"
ELSEIF (IR_Target=N_Target+1 & N_GAP_Target=1) ["particle in air gap"
   IF (W(NP)>0.0) ["particle going forward"
      "calculate distance to back boundary"
      ZNEAR = ZFRONT_Target(1)-Z(NP);
      DIST = ZNEAR/W(NP);
      IF (DIST < 0.) [DIST=0.;] "See reason above"
      IF(DIST <= USTEP ) ["particle will enter first slab, this CM
         USTEP = DIST;
         IRNEW = IRSTART_Target; "new region number"
      ]
   ]" end of forward going block"
   ELSEIF (W(NP)<0.0 ) ["particle going backwards"
      "calculate distance to front boundary"
      ZNEAR = Z(NP)-Z_min_CM(ICM_Target);
      DIST = -ZNEAR/W(NP); "Direction cosine is negative"
      IF (DIST <= 0.) [DIST=1.E-16;] "See reason above"
                                     "Always set to small +ve value since"
                                     "we are definitely leaving through top"
      IF(DIST <= USTEP) ["particle will enter upstream CM"
         USTEP = DIST;
         CALL WHERE_AM_I(ICM_Target,-1); "get IRNEW, ICMNEW"
      ]
   ]" end of backward going block"
   "if W(NP)=0.0, never hit boundary, need not reset USTEP"
]"end of air-gap region"

"   outside of CM, something is wrong
"   =================================
"
ELSE ["something is wrong"
   OUTPUT IR(NP)-IRSTART_Target+1, IR(NP), ICM_Target,
      IR_start_CM(ICM_Target); (//' ************'//' HOWFAR_Target error'/
      '    Region, local, absolute =',2I5/
      '    CM number=',I5,' start region =',I5/' *********'//);
   STOP;
] "end of IF statement"
RETURN; END; "End of subroutine HOWFAR_SLABS"

%E   "start of subroutine WHERE_AM_I_Target"
"*******************************************************************************
"
"                          Subroutine WHERE_AM_I_SLABS
"                          ***************************
"
" WHERE_AM_I routine for stacked planar slabs.
"
" WHERE_AM_I_Target determines the new region number when a particle traverses
" a component module boundary.  The scheme is as follows:
"
"      Whenever a particle is to be transported to a component module
"      boundary in HOWFAR, the subroutine WHERE_AM_I is called.  The
"      current component module and particle direction (backwards or
"      forwards) are transferred to WHERE_AM_I in the CALL statement.
"      WHERE_AM_I determines which component module the particle is
"      about to enter and calls the WHERE_AM_I_Target subroutine for
"      that component module, transferring the particle direction.
"      The region number that the particle is about to enter is
"      determined in WHERE_AM_I_Target from the knowledge of which
"      surface the particle is entering through (front if IDIR=1,
"      back if IDIR=-1) and the (X,Y) coordinates of the particle.
"      The current particle being transported is NP (in /STACK/).
"
"*******************************************************************************

;SUBROUTINE WHERE_AM_I_Target(IDIR);


;IMPLICIT NONE;
;COMIN/CM_Target,EPCONT,STACK/; "/STACK/would be needed for more complicated
                       "geometries.
"T>
"T>**************************************
"T>TYPE DECLARATIONS FOR WHERE_AM_I_SLABS
"T>**************************************
"T>
INTEGER IDIR,I;  "T>direction of particle, +1=forward, -1=backward

IF (IDIR=1) ["particle entering this CM through front face (upstream)
   IF (N_GAP_Target=0) ["no air gap this CM"
      IRNEW = IRSTART_Target;
   ]
   ELSE ["this CM has an air gap at the front
      IRNEW = IREND_Target;
   ]
]
ELSEIF(IDIR=2) ["particle starting within CM"
   IF(N_GAP_Target=1 & Z(NP)< ZFRONT_Target(1))[
      IRNEW = IREND_Target;
   ]
   ELSE[
     IRNEW=IRSTART_Target+N_Target-1;
     DO I=1,N_Target[
      IF(Z(NP)<ZFRONT_Target(I)+ZTHICK_Target(I))[
          IRNEW=IRSTART_Target+I-1;
          EXIT;
      ]
     ]
   ]
]
ELSE ["particle entering this CM through back face (downstream)
   IRNEW = IRSTART_Target+N_Target-1;
]
RETURN;
END; "End of subroutine WHERE_AM_I_SLABS"

%E  "start of subroutine HOWNEAR_Target"
"*****************************************************************************
"
"                        Subroutine HOWNEAR_Target
"                        *************************
"
" Returns min. distance to nearest region boundary.  Used to be a macro, but
" now the the macro calls this subroutine.
"
"*****************************************************************************

;SUBROUTINE HOWNEAR_Target(DIST);

$IMPLICIT-NONE;

COMIN/CM_Target,STACK,CMs/;

$REAL DIST; "T> min. distance to nearest region boundary

IR_Target = IR(NP)-IRSTART_Target+1;
IF(IR_Target=N_Target+1 & N_GAP_Target=1)["particle is in air gap"
   DIST=MIN(Z(NP)-Z_min_CM(ICM_Target),ZFRONT_Target(1)-Z(NP));
]
ELSE["particle is in one of the layers"
   DIST=MIN(Z(NP)-ZFRONT_Target(IR_Target),
       ZBACK_Target(IR_Target)-Z(NP));
]
RETURN;
END; "End of subroutine HOWNEAR_Target"
"******************************************************************************
"End of SLABS_cm.mortran"
%C80
"#############################################################################"
"                                                                             "
"  EGSnrc BEAMnrc component module: photon flattening filter                  "
"  Copyright (C) 2015 National Research Council Canada                        "
"                                                                             "
"  This file is part of EGSnrc.                                               "
"                                                                             "
"  EGSnrc is free software: you can redistribute it and/or modify it under    "
"  the terms of the GNU Affero General Public License as published by the     "
"  Free Software Foundation, either version 3 of the License, or (at your     "
"  option) any later version.                                                 "
"                                                                             "
"  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY  "
"  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  "
"  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for   "
"  more details.                                                              "
"                                                                             "
"  You should have received a copy of the GNU Affero General Public License   "
"  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.             "
"                                                                             "
"#############################################################################"
"                                                                             "
"  Author:          Blake Walters, 1995                                       "
"                                                                             "
"  Contributors:    Dave Rogers                                               "
"                   Iwan Kawrakow                                             "
"                                                                             "
"#############################################################################"
"                                                                             "
"  This code originally evolved from the FFILTER component module written by  "
"  George Ding, starting in 1992.                                             "
"                                                                             "
"  The contributors named above are only those who could be identified from   "
"  this file's revision history.                                              "
"                                                                             "
"  This code was originally part of the BEAM code system for Monte Carlo      "
"  simulation of radiotherapy treatments units. It was developed at the       "
"  National Research Council of Canada as part of the OMEGA collaborative     "
"  research project with the University of Wisconsin. The system was          "
"  originally described in:                                                   "
"                                                                             "
"  BEAM: A Monte Carlo code to simulate radiotherapy treatment units,         "
"  DWO Rogers, BA Faddegon, GX Ding, C-M Ma, J Wei and TR Mackie,             "
"  Medical Physics 22, 503-524 (1995).                                        "
"                                                                             "
"  BEAM User Manual                                                           "
"  DWO Rogers, C-M Ma, B Walters, GX Ding, D Sheikh-Bagheri and G Zhang,      "
"  NRC Report PIRS-509A (rev D)                                               "
"                                                                             "
"  As well as the authors of this paper and report, Joanne Treurniet of NRC   "
"  made significant contributions to the code system, in particular the GUIs  "
"  and EGS_Windows. Mark Holmes, Brian Geiser and Paul Reckwerdt of Wisconsin "
"  played important roles in the overall OMEGA project within which the BEAM  "
"  code system was developed.                                                 "
"                                                                             "
"  There have been major upgrades in the BEAM code starting in 2000 which     "
"  have been heavily supported by Iwan Kawrakow, most notably: the port to    "
"  EGSnrc, the inclusion of history-by-history statistics and the development "
"  of the directional bremsstrahlung splitting variance reduction technique.  "
"                                                                             "
"#############################################################################"


"*******************************************************************************
"
"                             ************            ""toc:
"                             *          *            ""toc:
"                             * FLATFILT *            ""toc:
"                             *          *            ""toc:
"                             ************            ""toc:
"
"                               PURPOSE
"                               *******
"   Component module for BEAM.  Photon flattering filter (filter geormetry for
"   arbitrary shape and material).
"
"*******************************************************************************
"
"                          GENERAL DESCRIPTION
"                          *******************
"
"   This set of routines is used in conjunction with BEAM.MORTRAN to simulate
"   one component module of a clinical linear accelerator: primary collimator
"
"I>
"I> Geometry of FLATFILT:
"I> ********************
"I>                     |
"I>                     |  beam direction (central axis)
"I>                     |
"I>                    \|/
"I>
"I>       --------------------------------------------------------------------
"I>           Air gap IR = Sum(J=1,ISCM_NO)[ISSCM_NO(J) +1] +1 if exists
"I>       --------------------------------------------------------------------
"I>                 /       \         |               |
"I>       ...      / IR = 1  \ IR = 2 |   IR = ...    | IR=ISSCM_NO(1)+1
"I>               /           \       |               |
"I>              /             \      |               |
"I>       ---------------------------------------------------------------------
"I>               \  ....     /      \
"I>       ...      \         /   .... \    IR=Sum(J=1,ISCM_NO)[ISSCM_NO(J) +1]
"I>                 \       /          \
"I>      ----------------------------------------------------------------------

"I>
"I>
"I>  IR is the region number within the CM.
"I>
"I>
"I>            ------------------------------------------------------
"I>            |          Region              |    Description      |
"I>            |------------------------------|---------------------|
"I>            |  absolute      | local       |                     |
"I>            |----------------|-------------|                     |
"I>            |                |             |                     |
"I>            |IRSTART_FLATFILT| IR_FLATFILT |  as shown in above  |
"I>            |  +IR_FLATFILT-1|             |                     |
"I>            |                |             |                     |
"I>            |                |             |                     |
"I>            ------------------------------------------------------
"I>
" Subroutines:
" ************
"                      INPUT_$flatfilt
"                      ISUMRY_$flatfilt
"                      HOWFAR_$flatfilt
"                      WHERE_AM_I_$flatfilt
"
"       Called from BEAM's subroutines:
"                      INPUT
"                      ISUMRY
"                      HOWFAR
"
"       Subroutines called:
"                      WHERE_AM_I (a BEAM subroutine)
"
"*******************************************************************************
"
"                             RESTRICTIONS ON USE/KNOWN BUGS
"                             ******************************
;
"*******************************************************************************
"**************************  DESCRIPTION OF VARIABLES  *************************
"*******************************************************************************
"
"                               INPUT FROM UNIT 5          ""toc:
"                               *****************
"
"I>
"I>  CARDS CM_FF
"I>  ******************
"I>
"I>  -1  Dummy line to indicate start of CM.
"I>
"I>   0  RMAX_CM(ICM_FF) (F10.0): Radius of outer boundary of CM (cm).
"I>
"I>   1  TITLE_FF (60A1):  Title of CM.
"I>
"I>   2  ZMIN_FF (F10.0):  Distance from front of CM (front of
"I>       the first layer) to reference plane (Z=0),
"I>       not including air gap.
"I>
"I>   3  ISCM_NO_FF (I5): Number of layers.
"I>
"I>   Repeat 4-6 for I=1,ISCM_NO_FF
"I>
"I>   4  ISSCM_NO_FF(I), ZTHICK_FF(I)  (I5,F15.0):
"I>
"I>             ISSCM_NO_FF(I): # cones in layer I(ex outer region).
"I>             ZTHICK_FF(I):   Thickness of layer I.
"I>
"I>   Repeat 5 for J=1,ISSCM_NO_FF(I) all on one line in order
"I>   of increasing cone radius.
"I>
"I>   5  RTOP_FF(I,J) (F15.0):
"I>             Top radius of cone J in layer I.
"I>             Note restriction: RTOP_FF(I,J+1)>RTOP_FF(I,J)
"I>
"I>   Repeat 6 for J=1,ISSCM_NO_FF(I) all on one line in order
"I>   of increasing cone radius.
"I>
"I>   6  RBOT_FF(I,J) (F15.0):
"I>             Bottom radius of cone J in layer I.
"I>             Note restriction: RBOT_FF(I,J+1)>RBOT_FF(I,J)
"I>
"I>   Repeat 7 and 8 for J=1,ISSCM_NO_FF(I)+1 for every layer I.
"I>   When J=ISSCM_NO_FF(I)+1, you are specifying ECUT, PCUT,
"I>   MED_IN, etc. for the region between the outermost cone and RMAX_CM
"I>   in layer I.
"I>
"I>   7  ECUT, PCUT, DOSE_ZONE, IREGION_TO_BIT  (2F15.0,2I5):
"I>
"I>          ECUT, PCUT:  Cutoff energies for electrons and photons
"I>                       in cone J.
"I>          DOSE_ZONE:   Dose scoring flag for cone J.
"I>       IREGION_TO_BIT: Bit setting for region defined by cone J.
"I>
"I>   8  MED_IN (24A1):  Medium of cone J
"I>                      used to set MED_INDEX.
"I>
"I>   Example
"I>   *******
"I>
"I>  The following example describes a FLATFILT with 2 layers.  The
"I>  RMAX of this FLATFILT is 2cm.  There is no air gap between the
"I>  first layer and the top of the CM.
"I>
"I>  The first layer is 0.3 cm thick and comprises a convex cone made
"I>  of H2O within a concave cone made of PB.  The convex H2O cone has
"I>  a top radius of 0.0cm and a bottom radius of 1.0cm.  The concave PB
"I>  cone has a top radius of 1.5cm and a bottom radius of 1.1cm.
"I>  The region between the outer, concave cone and RMAX_CM is AIR.
"I>  The second layer is also 0.3 cm thick and comprises a single
"I>  cylinder of H2O having radius 1cm (ie top radius=bottom
"I>  radius=1cm).  The region between the outer boundary of this
"I>  cylinder and RMAX_CM (an annular region) is AIR.
"I>
"I>  The dose to the AIR regions is scored in dose zone 1.  The dose
"I>  to H2O regions (the convex cone in the first layer and the cylinder
"I>  in the second layer) is scored in zone 2.  And the dose to PB
"I>  (the concave cone in the first layer) is scored in zone 3.
"I>  ECUT and PCUT for all regions are 0.521 MeV and 0.01 MeV
"I>  respectively.
"I>
"I>  2.00000,               RMAX_CM
"I>  flatfilt
"I>  0.0,                   ZMIN of first layer
"I>  2,                     no. of layers
"I>  2,  0.30,              no. of cones in first layer and thickness
"I>  0.0,1.5,               top radii of cones
"I>  1.0,1.1,               bottom radii of cones
"I>  1, 0.3                 no. of cones in second layer and thickness
"I>  1.0                    top radius of cone
"I>  1.0                    bottom radius of cone
"I>  0.521, 0.01, 2, 0,     ECUT, PCUT, DOSE_ZONE, IREGION_TO_BIT
"I>  H2O                    MEDIUM -- for layer 1, cone 1
"I>  0.521, 0.01, 3, 0
"I>  PB                            -- for layer 1, cone 2
"I>  0.521, 0.01, 1, 0
"I>  AIR                           -- for region between cone 2 and RMAX
"I>  0.521, 0.01, 2, 0
"I>  H2O                           -- for layer 2, cone 1
"I>  0.521, 0.01, 1, 0
"I>  AIR                           -- for region between cone 1 and RMAX
"
;
"*******************************************************************************
"*******************************  ERROR CONDITIONS  ****************************
"*******************************************************************************
"
"                              SIMULATION PARAMETERS
"                              *********************
"
" Geometry checks:
" ****************
"
"   1)  Overlapping component modules
"

%E "Start of HOWFAR_FF"
"*******************************************************************************
"
"                          Subroutine HOWFAR_FLATFILT
"                          ***********************
"
" HOWFAR routine for stacked planar media.
"
" Determine if current region number is within component module FLAT, and if so
" evaluate DIST, distance to region boundary along current trajectory.  USTEP
" must not exceed DIST.
"
"   There are N_FLATFILT local regions + an air gap (if present):
"
"     local               absolute                       description
"  ----------  -------------------------------------   -----------------------
"  IR_FLATFILT  IR_start_CM(ICM_FLATFILT)+IR_FLATFILT-1  excluding front air gap
"  ----------  -------------------------------------   -----------------------
"   Geometrical co-ordinates, as set in INPUT_FLATFILT are:
"
"   ZFRONT_FLATFILT     front of CM (upstream surface, air region)
"   ZMIN_FLATFILT       front of filter
"   ZBACK_FLATFILT      back of filter
"   RBOT_FLATFILT       radius of last cylinder (largest)
"
"******************************************************************************
;SUBROUTINE HOWFAR_FF;


;IMPLICIT NONE;
;COMIN/CMs,CM_FF,EPCONT,STACK,USER,EGS-IO/;
"T>
"T>**********************************
"T>TYPE DECLARATIONS FOR HOWFAR_FLATFILT
"T>**********************************
"T>
INTEGER
   IRL,         "T> absolute region number
   IRNEW_FF,"T>tentative new region number within CM (absolute)
   I,II,        "T> tmp loop index
   I_inside,I_outside; "T> error indices for particles in the wrong cone

$REAL
   DIST,           "T>dist to region boundary along current particle trajectory
   DIST_CIN,       "T>dist to cone boundary along current particle trajectory
   DIST_COU,       "T>dist to cone boundary along current particle trajectory
   XF_FF,   "T>temperary variable
   YF_FF,   "T>temperary variable
   SQXY_FF,
   DIST_PLANE;       "T>stores DIST to a plane when W>0
$REAL             "local tem variables
   ALO_FF,
   BLO_FF,
   AUP_FF,
   CUP_FF,
   TQ_FF,
   BUP_FF,
   DUP_FF,
   T1_FF,
   T2_FF;
;
$REAL one;
parameter (one = 1);

DATA I_inside,I_outside/0,0/;
SAVE I_inside;
SAVE I_outside;
" Determine local region number
" *****************************
IRL=IR(NP);

;FF_CHECK_OUTSIDE;

" Set DNEAR
" *********
" This replacement macros sets DMIN_FF as well as defining IR_FF

;FF_CM_HOWNEAR(DNEAR(NP));

" Boundary-crossing check
" ***********************
"
" Determine if current region number is within component module, and if so
" evaluate DIST, distance to region boundary along current trajectory.  USTEP
" must not exceed DIST.
;
IF(IR_FF <= N_FF) [   "inside filter"
   IF(W(NP) > 0)[ " when w > 0.0"
      DIST = (ZMAX_FF(ISCM_FF)
              - Z(NP))/W(NP);
      DIST_PLANE=DIST;
      IF(DIST < 0.)[DIST=0.;]
      IF(DIST=0. & ISCM_FF=ISCM_NO_FF)[DIST=1.E-16;]
      FF_GET_SQXY(DIST,SQXY_FF);
      IF(ISCM_FF < ISCM_NO_FF)[
         DO II = 1, ISSCM_NO_FF(ISCM_FF+1) [
            IF(SQXY_FF <=
               RTOP_FF(ISCM_FF+1,II)**2)[
               IRNEW_FF = IRSTART_FF
                       + IR_FF - IISSC_FF
                       + ISSCM_NO_FF(ISCM_FF) + II;
               EXIT;
            ]
            ELSEIF(SQXY_FF >
               RTOP_FF(ISCM_FF+1,
               ISSCM_NO_FF(ISCM_FF+1))**2)[
               IRNEW_FF  =
                        IRSTART_FF + IR_FF
                       - IISSC_FF + 1
                       + ISSCM_NO_FF(ISCM_FF)
                       + ISSCM_NO_FF(ISCM_FF+1);
            ]
         ]
      ]
      ELSEIF(ISCM_FF = ISCM_NO_FF)[
         IRNEW_FF = 1;
      ]
      IF(IISSC_FF > 1)[
         FF_GET_DICO_OU(ISCM_FF,IISSC_FF);
      ]
      IF(IISSC_FF <= ISSCM_NO_FF(ISCM_FF))[
         FF_GET_DICO_IN(ISCM_FF,IISSC_FF);
      ]
      IF(DIST <= USTEP) ["particle to be moved to region boundary
         USTEP = DIST;
         IF(IRNEW_FF = 1 )[ "leaving CM through back"
            CALL WHERE_AM_I(ICM_FF,1);
         ]
         ELSE [ "still in CM, entering another region
            IRNEW = IRNEW_FF; "new region number"
         ]
         IF(DIST=DIST_PLANE & IBRSPL=2 & ICM_DBS=ICM_FF &
            ISCM_FF+1=ZPLANE_DBS & IQ(NP)~=0 & IPHAT(NP)=NBRSPL)[
             "electron is about to hit splitting plane and is fat"
             IAUSFL(6)=1; "to call ausgab after step"
             ESPLIT_DBS=1; "to do electron splitting"
         ]
      ]
   ]
   ELSEIF(W(NP) < 0)[  "when w < 0.0
      DIST = (ZMIN_FF(ISCM_FF)
              - Z(NP))/W(NP);
      IF(DIST < 0.)[DIST=0.;]
      IF(DIST=0. & ISCM_FF=1 & N_GAP_FF=0)[DIST=1.E-16;]
     ;FF_CHECH_DIST1;

      FF_GET_SQXY(DIST,SQXY_FF);
      IF(ISCM_FF > 1)[
         DO II = 1, ISSCM_NO_FF(ISCM_FF-1) [
            IF(SQXY_FF <=
               RBOT_FF(ISCM_FF-1,II)**2)[
               IRNEW_FF  = IRSTART_FF
                       + IR_FF - 2- IISSC_FF
                       - ISSCM_NO_FF(ISCM_FF-1) + II;
               EXIT;
            ]
            ELSEIF(SQXY_FF >
               RBOT_FF(ISCM_FF-1,
               ISSCM_NO_FF(ISCM_FF-1))**2)[
               IRNEW_FF = IRSTART_FF
                       + IR_FF - 1 - IISSC_FF;
            ]
         ]
      ]
      ELSEIF(ISCM_FF = 1 & N_GAP_FF ~= 0)[
         IRNEW_FF = IREND_FF;
      ]
      ELSEIF(ISCM_FF = 1 & N_GAP_FF = 0)[
         IRNEW_FF = 1;
      ]
      IF(IISSC_FF > 1)[
         FF_GET_DICO_OU_WLTZ(ISCM_FF,IISSC_FF);
        ;FF_CHECH_DIST2;
      ]
      IF(IISSC_FF <= ISSCM_NO_FF(ISCM_FF))[
         FF_GET_DICO_IN(ISCM_FF,IISSC_FF);
        ;FF_CHECH_DIST3;
      ]
      IF(DIST <= USTEP) ["particle to be moved to region boundary
         USTEP = DIST;
         IF(IRNEW_FF = 1 )[ "leaving CM through front"
            CALL WHERE_AM_I(ICM_FF,-1);
         ]
         ELSE [ "still in CM, entering another region
            IRNEW = IRNEW_FF; "new region number"
         ]
      ]
   ]
   ELSE[  "when w = 0.0"
      DIST = 1E10;
      IF(IISSC_FF > 1 &
         U(NP)*X(NP) + V(NP)*Y(NP) < 0.0)[
         FF_GET_DICO_OU(ISCM_FF,IISSC_FF);
         IRNEW_FF = IR(NP) - 1;
      ]
      ELSEIF(IISSC_FF <= ISSCM_NO_FF(ISCM_FF) &
         U(NP)*X(NP) + V(NP)*Y(NP) > 0.0) [
         FF_GET_DICO_IN(ISCM_FF,IISSC_FF);
         IRNEW_FF = IR(NP) + 1;
      ]
      IF(DIST <= USTEP) ["particle to be moved to region boundary
         USTEP = DIST;
         IRNEW = IRNEW_FF; "new region number"
      ]
   ]
]


ELSEIF(IR_FF = N_FF + 1) [   "in front air gap
   IF(W(NP) > 0.0) ["particle going forward"
      DIST = (ZMIN_FF(1)
                - Z(NP))/W(NP); "distance to front of SCM
      IF(DIST < 0.)[DIST=0.;]
      DO I = 1, ISSCM_NO_FF(1)[
         IF((X(NP)+DIST*U(NP))**2 + (Y(NP)+DIST*V(NP))**2 <=
            RTOP_FF(1,I)**2)[
            IRNEW_FF = IRSTART_FF + I -1;
            EXIT;
         ]
         ELSEIF( (X(NP)+DIST*U(NP))**2 + (Y(NP)+DIST*V(NP))**2 >
            RTOP_FF(1,ISSCM_NO_FF(1))**2 )[
            IRNEW_FF = IRSTART_FF +
                              ISSCM_NO_FF(1);
         ]
      ]
   ] "end of particle going forward
   ELSEIF(W(NP) < 0.0) ["particle going backward"
      DIST = (ZFRONT_FF
              - Z(NP))/W(NP); "distance to front of CM
      IF(DIST <= 0.)[DIST=1.e-16;]
      IRNEW_FF = 1;
   ]" end of going backward"
   ELSE[DIST = 1E10;]

   IF(DIST <= USTEP) ["particle to be moved to region boundary
      USTEP = DIST;
      IF(IRNEW_FF = 1 )[ "leaving CM through front"
         CALL WHERE_AM_I(ICM_FF,-1);
      ]
      ELSE [ "still in CM, entering another region
         IRNEW = IRNEW_FF; "new region number"
      ]
      IF(W(NP)>0.0 & IBRSPL=2 & ICM_DBS=ICM_FF &
            ZPLANE_DBS=1 & IQ(NP)~=0 & IPHAT(NP)=NBRSPL)[
             "electron is about to hit splitting plane and is fat"
             IAUSFL(6)=1; "to call ausgab after step"
             ESPLIT_DBS=1; "to do electron splitting"
      ]
   ]
] " end of region of air gap
ELSE[
   IDISC = 1;
   IRNEW = 1;
   OUTPUT IR_FF, Z(NP), SQRT(X(NP)**2+Y(NP)**2);
          (' some thing is wrong IR_FF, Z ',I5,4F10.4);
]
"   outside of CM, something is wrong
"   =================================
;
;FF_NEGTIVE_USTEP;
RETURN;
END; "End of subroutine HOWFAR_FF"

%E "Start of WHERE_AM_I_FF"
"*******************************************************************************
"
"                          Subroutine WHERE_AM_I_FLATFILT
"                          ***************************
"
" WHERE_AM_I routine for a stacked right cylinder slabs.
"
" WHERE_AM_I_$flatfilt determines the new region # when a particle traverses
" a component module boundary.  The scheme is as follows:
"
"      Whenever a particle is to be transported to a component module
"      boundary in HOWFAR, the subroutine WHERE_AM_I is called.  The
"      current component module and particle direction (backwards or
"      forwards) are transferred to WHERE_AM_I in the CALL statement.
"      WHERE_AM_I determines which component module the particle is
"      about to enter and calls the WHERE_AM_I_$flatfilt subroutine for
"      that component module, transferring the particle direction.
"      The region number that the particle is about to enter is
"      determined in WHERE_AM_I_$flatfilt from the knowledge of which
"      surface the particle is entering through (front if IDIR=1,
"      back if IDIR=-1) and the (X,Y) coordinates of the particle.
"      The current particle being transported is NP (in /STACK/).
"
"*******************************************************************************


REPLACE {$CHECK_FRONT_FF;} WITH {;
   IF(ABS(Z(NP)+USTEP*W(NP) - ZFRONT_FF) > $BDY_TOL)[
       OUTPUT Z(NP), Z(NP)+USTEP*W(NP),ZFRONT_FF,W(NP),USTEP;
          ( ' in front of CM - cons z, z+d*w, zf,w ustep = ', /5F16.8);
   ]
}
REPLACE {$CHECK_BACK_FF;} WITH {;
   IF(ABS(Z(NP)+USTEP*W(NP) - ZMAX_FF(ISCM_NO_FF)) > $BDY_TOL)[
       OUTPUT Z(NP), Z(NP)+USTEP*W(NP),ZMAX_FF(ISCM_NO_FF),
           W(NP),USTEP;
          ( ' in back of CM - cons z, z+d*w =, zmax, w ,ustep ', /5F16.8);
   ]

}
;SUBROUTINE WHERE_AM_I_FF(IDIR);


;IMPLICIT NONE;

;COMIN/CM_FF,EPCONT,STACK,USER/;
"T>
"T>**************************************
"T>TYPE DECLARATIONS FOR WHERE_AM_I_FLATFILT
"T>**** **********************************
"T>
INTEGER IDIR;      "T>direction of particle, +1=forward, -1=backward
INTEGER I,II,         "T>loop indices
        TEMPIR;       "T>keeps track of local region numbers in a loop
$REAL XBDY_FF,YBDY_FF,RBDY2_FF;

XBDY_FF = X(NP) + U(NP)*USTEP;
YBDY_FF = Y(NP) + V(NP)*USTEP;
RBDY2_FF = XBDY_FF*XBDY_FF
                + YBDY_FF*YBDY_FF;
IF(IRSTART_FF = 2 & IDIR = 1)[ " this is first CM and from front
   RBDY2_FF = X(NP)**2 + Y(NP)**2;
]
IF (IDIR=1) ["particle entering this CM through front face
   IF(N_GAP_FF = 0) ["no air gap this CM"
      IRNEW = IRSTART_FF;
      DO I = ISSCM_NO_FF(1),1,-1[
            IF(RBDY2_FF > RTOP_FF(1,I)**2)[
               IRNEW = IRSTART_FF + I;
               EXIT;
            ]
      ]
      IF(IBRSPL=2 & ICM_DBS=ICM_FF &
            ZPLANE_DBS=1 & IQ(NP)~=0 & IPHAT(NP)=NBRSPL)[
             "electron is about to hit splitting plane and is fat"
             IAUSFL(6)=1; "to call ausgab after step"
             ESPLIT_DBS=1; "to do electron splitting"
     ]
   ]
   ELSE ["this CM has an air gap at the front
      IRNEW = IREND_FF;
   ]
]
ELSEIF(IDIR=-1) ["particle entering this CM through back face (downstream)
  IRNEW= IRSTART_FF+ N_FF -1
         - ISSCM_NO_FF(ISCM_NO_FF);
  DO I = ISSCM_NO_FF(ISCM_NO_FF),1,-1[
        IF(RBDY2_FF > RBOT_FF(ISCM_NO_FF,I)**2)[
             IRNEW = IRSTART_FF+ N_FF -1
                     - ISSCM_NO_FF(ISCM_NO_FF) + I;
             EXIT;
        ]
  ]
]
ELSEIF(IDIR=2)["particle originating within the CM (source 3)
  IF(Z(NP)<ZMIN_FF(1))["in front air gap
     IRNEW = IREND_FF;
  ]
  ELSE["somewhere within the flatfilt
     TEMPIR=0;
     DO I=1,ISCM_NO_FF[
        IF(Z(NP) >= ZMIN_FF(I) & Z(NP) <= ZMAX_FF(I))[
           DO II=1,ISSCM_NO_FF(I)+1[
              IF(II<ISSCM_NO_FF(I)+1)[
                IF(SQRT(X(NP)**2+Y(NP)**2) <=
                   Z(NP)*(RBOT_FF(I,II)-RTOP_FF(I,II))/
                       (ZMAX_FF(I)-ZMIN_FF(I)) +
                   RTOP_FF(I,II) - ZMIN_FF(I)*
                       (RBOT_FF(I,II)-RTOP_FF(I,II))/
                       (ZMAX_FF(I)-ZMIN_FF(I)))[
                     IRNEW=IRSTART_FF + TEMPIR +
                           II -1;
                     EXIT;
                ]
              ]
              ELSE[
                IRNEW=IRSTART_FF + TEMPIR +
                      II -1;
                EXIT;
              ]
           ]
        ]
        ELSE[
           TEMPIR=TEMPIR+ISSCM_NO_FF(I)+1;
        ]
     ]
  ]
]
RETURN;
END; "End of subroutine WHERE_AM_I_FF"

%E "Start of INPUT_FF"
"*******************************************************************************
"
"                           Subroutine INPUT_FLATFILT
"                           **********************
"
"  A CM input subroutine for a series of 2 or more semi-infinite slabs.
"
"  It must fill all parameters in COMMON/CMs/ associated with this CM.
"
"  Routine prints error messages on unit 6 for
"      format error on input
"      end of file hit
"      error in logic of input file
"
"  The format of the input is presented in the section `INPUT FROM UNIT 5' in
"  the above documentation.
"
"*******************************************************************************

;SUBROUTINE INPUT_FF;


;IMPLICIT NONE;

;COMIN/ BOUNDS,CMs,CM_FF,GEOM,IO_INFO,MEDIA,MISC,SCORE,USER,EGS-IO/;
"T>
"T>*********************************
"T>TYPE DECLARATIONS FOR INPUT_FLATFILT
"T>*********************************
"T>

$REAL ZTHICK_FF($MAX_N_SC_FF),  "T>thickness of the filter
      BDYTOL,               "T>may set differ from $BDY_TOL
      AIRGAPMIN_FF;  "T>minimum air gap in front and back of CM

INTEGER I,II,III,J,         "T>DO loop indeces
        IRA,                "T>Absolute region number
        MED_FLAG,           "T>flag used by media-sort macro $MED_INPUT
        MED_INDEX;          "T>medium index, set after med sort by $MED_INPUT

"  initialize parameters
"  =====================
"
ICM_FF = ICM;      "CM index for this component module
IRSTART_FF = IR_start_CM(ICM_FF);
            "Index of first region in this CM,
                "set by previous CM or in MAIN if ICM=1
IERR_GEOM(ICM_FF) = 0; "Geometry-checking flag, 0 if no error detected
AIRGAPMIN_FF = 0.1; "set a minimum 0.1 cm air gap at front of CM

"
"  get the title line
"  ==================
"
OUTPUT;(/' Next component is a set of conical  slabs'/
' TITLE: ',$);
;MINPUT (FF) TITLE_FF;(60A1);
                       ";MINPUT is a replacement macro with EOF and
                       "ERR branching to :EOF_{P1}: and :ERR_{P1}:
OUTPUT TITLE_FF;(' ',60A1);
                        "OUTPUT is a replacement macro which writes to
                        "unit 5.  Used here for echo of user input
"
" get distance from reference plane, z=0"
"   =============================
OUTPUT; (' Z at which FLATFILT (excluding air gap) starts (cm) ',$);
;MINPUT (FF) ZMIN_FF(1);(F10.0);
OUTPUT ZMIN_FF(1);(F15.5);
IF(Z_min_CM(ICM_FF)>ZMIN_FF(1))[
   IF(ICM_FF=1)[
      OUTPUT ICM_FF, ZMIN_FF(1),
       Z_min_CM(ICM_FF);
       (//' ***WARNING IN CM ',I4,' (FLATFILT):'/
          ' Z_min_CM(1) > Z of first layer'/
          ' Z_min_CM(1) reset to ',F8.5,' cm from ',F8.5,' cm'//);
      WRITE(IOUTLIST,100)ICM_FF, ZMIN_FF(1),
       Z_min_CM(ICM_FF);
      100 FORMAT(//' ***WARNING IN CM ',I4,' (FLATFILT):'/
          ' Z_min_CM(1) > Z of first layer'/
          ' Z_min_CM(1) reset to ',F8.5,' cm from ',F8.5,' cm'//);
      Z_min_CM(ICM_FF)=ZMIN_FF(1);
   ]
   ELSE[
      OUTPUT ICM_FF;
        (//'***ERROR IN CM ',I4,' (FLATFILT):'/
           'Overlaps with previous CM'//);
      IERR_GEOM(ICM_FF)=IERR_GEOM(ICM_FF)+1;
   ]
]

ISCM_NO_FF = $MAX_N_FF;
            "Maximum number of slab cone permitted
OUTPUT ISCM_NO_FF;
   (' Number of layers (MINIMUM 1, MAXIMUM',I2,'): ',$);
;MINPUT (FF) ISCM_NO_FF; (I5);
OUTPUT ISCM_NO_FF; (I5);
IF(ISCM_NO_FF > $MAX_N_FF)[
   OUTPUT ICM_FF, $MAX_N_FF;
      (//'***ERROR IN CM ',I4,' (FLATFILT):'/
         '# of layers > max. layers allowed.'/
         '# of layers reduced to ',I4,' for now.'//);
   ISCM_NO_FF=$MAX_N_FF;
   IERR_GEOM(ICM_FF)=IERR_GEOM(ICM_FF)+1;
]
ELSEIF(ISCM_NO_FF<1)[
   ISCM_NO_FF=1;
   OUTPUT ICM_FF;
      (//'***ERROR IN CM ',I4,' (FLATFILT):'/
         '# of layers < 1'/
         '# of layers reset to 1 for now.'//);
   IERR_GEOM(ICM_FF)=IERR_GEOM(ICM_FF)+1;
]

"   get  each layer's geometry information
"   =================================
DO I = 1, ISCM_NO_FF[
   ISSCM_NO_FF(I) = $MAX_N_SC_FF;
   OUTPUT I;(//' For layer ',I5,' :');
   OUTPUT I,ISSCM_NO_FF(I);
    (/' Number of coaxial cones in layer',I5,' (Min 1, Max',I2,')',/,
     ' and thickness of this layer: ',$);
   ;MINPUT (FF) ISSCM_NO_FF(I),ZTHICK_FF(I); (I5,F15.0);
   IF(ZTHICK_FF(I) = 0.0)[ZTHICK_FF(I) = 2*$BDY_TOL;]
   OUTPUT ISSCM_NO_FF(I),ZTHICK_FF(I); (I5,F15.5);
   IF(ISSCM_NO_FF(I) > $MAX_N_SC_FF)[
      OUTPUT ICM_FF,I, $MAX_N_SC_FF;
         (//'***ERROR IN CM ',I4,' (FLATFILT):'/
            '# of cones in layer ',I4,' > max. allowed.'/
            '# of cones reduced to ',I4,' for now.'//);
      ISSCM_NO_FF(I)=$MAX_N_SC_FF;
      IERR_GEOM(ICM_FF)=IERR_GEOM(ICM_FF)+1;
   ]
   ELSEIF(ISSCM_NO_FF(I)<1)[
      ISSCM_NO_FF(I)=1;
      OUTPUT ICM_FF,I;
         (//'***ERROR IN CM ',I4,' (FLATFILT):'/
            '# of cones in layer ',I4,' < 1'/
            '# of cones set to 1 for now.'//);
      IERR_GEOM(ICM_FF)=IERR_GEOM(ICM_FF)+1;
   ]
   IF(ZTHICK_FF(I) < 0.0)[
      OUTPUT ICM_FF,I;
          (//'***ERROR IN CM ',I4,' (FLATFILT):'/
             'ZTHICK(',I4,') < 0.0'//);
      IERR_GEOM(ICM_FF)=IERR_GEOM(ICM_FF)+1;
   ]
    OUTPUT I;(/' input top radii of cones in layer',I5,
         /' (on one line in order of increasing radius)'/': ',$);
   ;MINPUT (FF) (RTOP_FF(I,J), J=1,ISSCM_NO_FF(I));
        ($MAX_N_SC_FF F15.0);
    OUTPUT (RTOP_FF(I,J), J=1,ISSCM_NO_FF(I));
          ($MAX_N_SC_FF F15.5);
    IF(RTOP_FF(I,1) = 0.0)[RTOP_FF(I,1) = 3*$BDY_TOL;]
    ELSEIF(RTOP_FF(I,1) < 0.0)[
       OUTPUT ICM_FF,I;
          (//'***ERROR IN CM ',I4,' (FLATFILT):'/
             'RTOP(',I4,',1) < 0.0'//);
       IERR_GEOM(ICM_FF)=IERR_GEOM(ICM_FF)+1;
    ]
    ELSEIF(RTOP_FF(I,1) > RMAX_CM(ICM_FF))[
        OUTPUT ICM_FF, I;
          (//'***WARNING IN CM ',I4,' (FLATFILT):'/
             'RTOP(',I4,',1) > RMAX_CM'//);
        WRITE(IOUTLIST,'(//''***WARNING IN CM '',I4,'' (FLATFILT):''/
             ''RTOP('',I4,'',1) > RMAX_CM''//)')
             ICM_FF, I;
    ]
    DO II = 2, ISSCM_NO_FF(I)[
       IF(RTOP_FF(I,II)<0.0)[
          OUTPUT ICM_FF,I,II;
           (//'***ERROR IN CM ',I4,' (FLATFILT):'/
              'RTOP(',I4,',',I4,') < 0.0'//);
          IERR_GEOM(ICM_FF)=IERR_GEOM(ICM_FF)+1;
       ]
       ELSEIF(RTOP_FF(I,II) < RTOP_FF(I,II-1))[
          OUTPUT ICM_FF, I, II, I, II-1;
            (//'***ERROR IN CM ',I4,' (FLATFILT):'/
               'RTOP(',I4,',',I4,') < RTOP(',I4,',',I4,')'//);
          IERR_GEOM(ICM_FF)=IERR_GEOM(ICM_FF)+1;
       ]
       IF( RTOP_FF(I,II) > RMAX_CM(ICM_FF))[
          OUTPUT ICM_FF, I, II;
            (//'***WARNING IN CM ',I4,' (FLATFILT):'/
               'RTOP(',I4,',',I4,') > RMAX_CM'//);
      WRITE(IOUTLIST,'(//''***WARNING IN CM '',I4,'' (FLATFILT):''/
               ''RTOP('',I4,'','',I4,'') > RMAX_CM''//)')
                ICM_FF, I, II;
       ]
    ]
    IF(RTOP_FF(I,ISSCM_NO_FF(I))<=RMAX_CM(ICM_FF))[
         RTOP_FF(I,ISSCM_NO_FF(I)+1)=
           RMAX_CM(ICM_FF);
    ]
    OUTPUT I;(/' input bottom radii of cones in layer',I5,/
  ' (on one line in order of increasing radius--Note that'/
  ' cones in one layer cannot cross)'/' :',$);
   ;MINPUT (FF) (RBOT_FF(I,J), J=1,ISSCM_NO_FF(I));
        ($MAX_N_SC_FF F15.0);
    OUTPUT (RBOT_FF(I,J), J=1,ISSCM_NO_FF(I));
          ($MAX_N_SC_FF F15.5);
    IF(RBOT_FF(I,1) = 0.0)[RBOT_FF(I,1) = 3*$BDY_TOL;]
    ELSEIF(RBOT_FF(I,1) < 0.0)[
       OUTPUT ICM_FF,I;
          (//'***ERROR IN CM ',I4,' (FLATFILT):'/
             'RBOT(',I4,',1) < 0.0'//);
       IERR_GEOM(ICM_FF)=IERR_GEOM(ICM_FF)+1;
    ]
    ELSEIF(RBOT_FF(I,1) > RMAX_CM(ICM_FF))[
        OUTPUT ICM_FF, I;
          (//'***WARNING IN CM ',I4,' (FLATFILT):'/
             'RBOT(',I4,',1) > RMAX_CM'//);
        WRITE(IOUTLIST,'(//''***WARNING IN CM '',I4,'' (FLATFILT):''/
             ''RBOT('',I4,'',1) > RMAX_CM''//)')
             ICM_FF, I;
    ]
    DO II = 2, ISSCM_NO_FF(I)[
       IF(RBOT_FF(I,II) < 0.0)[
          OUTPUT ICM_FF, I, II;
           (//'***ERROR IN CM ',I4,' (FLATFILT):'/
              'RBOT(',I4,',',I4,') < 0.0'//);
          IERR_GEOM(ICM_FF)=IERR_GEOM(ICM_FF)+1;
       ]
       ELSEIF(  RBOT_FF(I,II) < RBOT_FF(I,II-1))[
          OUTPUT ICM_FF, I, II, I, II-1;
            (//'***ERROR IN CM ',I4,' (FLATFILT):'/
               'RBOT(',I4,',',I4,') < RBOT(',I4,',',I4,')'//);
          IERR_GEOM(ICM_FF)=IERR_GEOM(ICM_FF)+1;
       ]
       IF( RBOT_FF(I,II) > RMAX_CM(ICM_FF))[
          OUTPUT ICM_FF, I, II;
            (//'***WARNING IN CM ',I4,' (FLATFILT):'/
               'RBOT(',I4,',',I4,') > RMAX_CM'//);
      WRITE(IOUTLIST,'(//''***WARNING IN CM '',I4,'' (FLATFILT):''/
               ''RBOT('',I4,'','',I4,'') > RMAX_CM''//)')
               ICM_FF, I, II;
       ]
    ]
    IF(RBOT_FF(I,ISSCM_NO_FF(I))<=RMAX_CM(ICM_FF))[
         RBOT_FF(I,ISSCM_NO_FF(I)+1)=
           RMAX_CM(ICM_FF);
    ]
]


N_FF = 0;
DO I = 1, ISCM_NO_FF[
   N_FF = N_FF + ISSCM_NO_FF(I) + 1;
] "Number of regions in this CM (excluding air gap)
"

"   get ECUT, PCUT, dose scoring zone, and material in each region
"   ===============================================================
OUTPUT;(///' Inputs for ECUT, PCUT, dose zones, media ...');
IRA = IRSTART_FF-1;
IR_FF=0;
DO II = 1, ISCM_NO_FF[
   OUTPUT II;(//' For layer',I5,' :');
   DO III = 1, ISSCM_NO_FF(II)+1[
      IR_FF=IR_FF+1;
      IRA = IRA+1;
      IF(III<=ISSCM_NO_FF(II))[
         OUTPUT III;(/' For cone',I5,' :');
         IF(ISSCM_NO_FF(II)>1 & III=1)[
           OUTPUT;(' (innermost cone)');
         ]
         ELSEIF(ISSCM_NO_FF(II)>1 & III=ISSCM_NO_FF(II))[
           OUTPUT;(' (outermost cone)');
         ]
      ]
      ELSEIF(III=ISSCM_NO_FF(II)+1)[
         OUTPUT;(/' For region between outermost cone and RMAX_CM :');
      ]
      ;OUTPUT;(' ECUT, PCUT (MeV),',
             ' DOSE ZONE (0=DO NOT SCORE DOSE), IREGION_TO_BIT: '/,$);
      ;MINPUT (FF)
      ECUT(IRA),PCUT(IRA),DOSE_ZONE(IRA),IREGION_TO_BIT(IRA);
      (2F15.0,2I5);
      IF(ECUT(IRA) < ECUTIN)[ECUT(IRA)=ECUTIN;]
      IF(PCUT(IRA) < PCUTIN)[PCUT(IRA)=PCUTIN;]
   ;OUTPUT ECUT(IRA),PCUT(IRA),DOSE_ZONE(IRA),IREGION_TO_BIT(IRA);
      (2F15.5,2I5);
      OUTPUT;(' material ',$);
   ;$MED_INPUT(FF); " inputs character array MED_IN from unit 5, loops
  "through array MEDIA(24,I) to check if medium was previously input.
  "If so, sets MED_INDEX to index of previous medium.  If not,
  "increments NMED and sets MED_INDEX to NMED.
   MED(IRA) = MED_INDEX; " medium of the planar slab
   ]
]"end of loop over regions"

"
"  parameter definition
"  ====================
"
"fill arrays of distance from reference plane (z=0) to front and back of slabs
"
" define the filter geometry here:

BDYTOL= $BDY_TOL;
ZMAX_FF(1) = ZMIN_FF(1) + ZTHICK_FF(1);
DO I = 2, ISCM_NO_FF[
   ZMIN_FF(I) = ZMIN_FF(I-1) + ZTHICK_FF(I-1);
   ZMAX_FF(I) = ZMIN_FF(I) + ZTHICK_FF(I);
]

IF(ICM_FF=ICM_DBS)[
    IF(ZPLANE_DBS > ISCM_NO_FF+1)[
      OUTPUT ZPLANE_DBS,ISCM_NO_FF+1;
  (/' ****DBS WARNING in FF****'/
  ' Plane chosen for electron splitting in DBS was ',I4,/
  ' This is > than the no. of planes in this FLATFILT geometry.'/
  ' Splitting plane will be reset to the bottom plane no.'/
  ' in this FLATFILT ( ',I4,').'/);
      WRITE(IOUTLIST,101) ZPLANE_DBS,ISCM_NO_FF+1;
  101 FORMAT(/' ****DBS WARNING in FF****'/
  ' Plane chosen for electron splitting in DBS was ',I4,/
  ' This is > than the no. of planes in this FLATFILT geometry.'/
  ' Splitting plane will be reset to the bottom plane no.'/
  ' in this FLATFILT ( ',I4,').'/);
      ZPLANE_DBS=ISCM_NO_FF+1;
    ]
    OUTPUT NBRSPL,ZPLANE_DBS;
  (/' DBS in FF:'/
    '   Electron splitting no.        = ',I12,/
    '   Electron splitting plane no.  = ',I12);
  IF(ZPLANE_DBS=1)[
    ZPOSN_DBS=ZMIN_FF(1);
  ]
  ELSE[
    ZPOSN_DBS=ZMAX_FF(ZPLANE_DBS-1);
  ]
  OUTPUT ZPOSN_DBS;
   ('   Z position of splitting plane = ',F10.5,' cm'/);
  IF(IRAD_DBS=1)[
    OUTPUT;(' Split electrons will be distributed with radial symmetry about'/
            ' the beam axis in this plane.'/);
  ]
  OUTPUT ZRR_DBS;
  (/'   Reminder: Z position of russian roulette plane = ',F10.5,' cm'/);
]

"establish top of first CM
"
ZFRONT_FF = Z_min_CM(ICM_FF);

"
"establish start of next CM
"
Z_min_CM(ICM_FF+1) = ZMAX_FF(ISCM_NO_FF);

"
"  set up air gap to previous CM, if present
"  =========================================
"
"  The air gap has the highest region number in the CM, even though it is at
"  the top of the component module.  This is to allow the assignment of region
"  numbers on input of the parameters of each local region (mainly to assign the
"  medium number of the region).  The air gap is then assigned after all of the
"  CM parameters have been input.
"
"note that if this is the first CM (ICM_$flatfilt=1) then the gap thickness
"Z_gap_THICK(ICM_$flatfilt) = 0, which is used as a flag for no air gap

Z_gap_THICK(ICM_FF) = ZMIN_FF(1) - Z_min_CM(ICM_FF);
IF(Z_gap_THICK(ICM_FF) < $MIN_GAP)[
   Z_gap_THICK(ICM_FF) = 0.;
   N_GAP_FF = 0; "no air gap for this CM
   ZMIN_FF(1) = Z_min_CM(ICM_FF);
]
ELSE[
   N_GAP_FF = 1; "this CM has an air gap
   IRA = IRSTART_FF + N_FF; "absolute region number of air gap
   MED(IRA) = AIR_INDEX; "medium is air
   ECUT(IRA) = ECUTIN;
   PCUT(IRA)=PCUTIN;
   ESAVE(IRA)=ESAVE_GLOBAL;
   ECUTRR(IRA)=ECUT(IRA);
]

"
"  set up region numbers
"  =====================
"
"  This CM has N_FLATFILT+N_GAP_$flatfilt regions
"
;
IREND_FF = IRSTART_FF + N_FF+ N_GAP_FF - 1;
                            "Index of last region
NREG = NREG + N_FF + N_GAP_FF;
                      "Total number of regions in full geometry up
                                "to and including this CM
IF (NREG <= $MXREG) ["have not exceeded maximum region number
      "Index of first region in next CM:"
      IR_start_CM(ICM_FF+1) = IREND_FF+1;
]
ELSE [
      OUTPUT ICM_FF,NREG,$MXREG;
      (//'***ERROR IN CM ',I4,' (FLATFILT):'/
         I4,' regions requested, only ',I4,' available'//);
      IERR_GEOM(ICM_FF)=IERR_GEOM(ICM_FF)+1;
]

"
"  establish CM boundary
"  =====================
"
RMAX_CM_FLAG(ICM_FF) = 1; "put a cylindrical boundary about CM

"
"  establish dose scoring zones and latch bit setting
"  ==================================================
"
IRA = IRSTART_FF-1; "absolute region number"
DO IR_FF=1, N_FF ["loop over local region number
   IRA = IRA+1;
   "dose-scoring zones
   NDOSE_ZONE = MAX(DOSE_ZONE(IRA),NDOSE_ZONE); "Number of dose zones
   MAX_BIT = MAX(IREGION_TO_BIT(IRA),MAX_BIT); " current maxmum
   "charged particle range rejection parameters
   ESAVE(IRA)=ESAVE_GLOBAL; "Particles with total energies below ESAVE are
                            "considered for range rejection
   ECUTRR(IRA)=ECUT(IRA); "Minimum energy on exit from region
   E_min_out(ICM_FF)=ECUT(IRA); "Minimum energy on exit from CM
] "end of loop over IR_FF

"   return from INPUT_FLATFILT
"   =======================
"
RETURN;

"   error messages
"   ==============
"
:EOF_FF:
;OUTPUT ICM;(//' *** ERROR *** unexpected end of file reading input for CM',I3);
STOP;

:ERROR_FF:
;OUTPUT ICM;(//' *** ERROR *** format error on input for CM',I3);
STOP;
END;  "End of INPUT_FF"

%E "Start of ISUMRY_FF"
"*******************************************************************************
"
"                          Subroutine ISUMRY_FLATFILT
"                          ***********************
"
" Summarize input, write graphics file for EGS_Windows, and set parameters that
" require medium information obtained from HATCH call.
"
"*******************************************************************************

;SUBROUTINE ISUMRY_FF;


;IMPLICIT NONE;

;COMIN/ BOUNDS,CMs,CM_FF,GEOM,IO_INFO,MEDIA,MISC,SCORE,UPHIOT,USER/;
"T>
"T>**********************************
"T>TYPE DECLARATIONS FOR ISUMRY_FLATFILT
"T>**********************************
"T>
INTEGER
   ICOLOUR,       "T>colour of CM for EGS_Windows
   IRA,           "T>absolute region number
   I,J,K,L,II;    "T>DO loop index

$REAL VOL_FF($MAX_N_SC_FF,$MAX_N_SC_FF),
      VOLUME_FF($MAX_N_SC_FF*$MAX_N_SC_FF),
                                                           "T> region volume
      R1, R2, H;
"   Mass of dose zone
"   =================
"
"Need to calculate mass of dose zone here, after call to HATCH, where the region
"density is set if it was allowed to default in INPUT_$flatfilt.
"
II = 0;
DO I = 1,ISCM_NO_FF[
   K = 0;
   DO J = 1,ISSCM_NO_FF(I) + 1[
      K = K + 1;
      IF(J<=ISSCM_NO_FF(I))[
         R1 = RTOP_FF(I,J);
         R2 = RBOT_FF(I,J);
      ]
      ELSE[
         R1 = RMAX_CM(ICM_FF);
         R2 = RMAX_CM(ICM_FF);
      ]
      H = ZMAX_FF(I) - ZMIN_FF(I);
      VOL_FF(I,J) = 3.1415926/3.0*H*(R1**2 + R2**2 + R1*R2);
      II= II + 1;
      IF(K > 1)[
         DO L = 1, K - 1[
            VOL_FF(I,J) =
            VOL_FF(I,J) - VOL_FF(I,L);
         ]
      ]
      VOLUME_FF(II) = VOL_FF(I,J);
   ]
]

IRA = IRSTART_FF - 1; "absolute region number
DO IR_FF = 1,N_FF ["loop over local region number
   IRA = IRA+1;
   IF(DOSE_ZONE(IRA) ~= 0) ["this is a dose zone"
      ID=DOSE_ZONE(IRA);
      AMASS(ID) = AMASS(ID)+VOLUME_FF(IR_FF)*RHOR(IRA);
   ]
] "end of loop over IR_FF"

"   Summarize geometrical information for this component module in listing file
"   ===========================================================================
"

WRITE(IOUTLIST,110) ICM_FF,TITLE_FF;
WRITE(IOUTLIST,120) Z_min_CM(ICM_FF),RMAX_CM(ICM_FF);

WRITE(IOUTLIST,122);
DO I = 1, ISCM_NO_FF[
   DO II = 1 , ISSCM_NO_FF(I)[
      IF(II=1)[
        WRITE(IOUTLIST,123)I,ZMIN_FF(I),ZMAX_FF(I)-
                           ZMIN_FF(I),
                           II,RTOP_FF(I,II),
                           RBOT_FF(I,II);
      ]
      ELSE[
        WRITE(IOUTLIST,124)II,RTOP_FF(I,II),
                           RBOT_FF(I,II);
      ]
   ]
]
WRITE(IOUTLIST,130);
IRA = IRSTART_FF - 1;
DO I = 1, ISCM_NO_FF[
   DO II = 1 , ISSCM_NO_FF(I) + 1[
      IRA = IRA + 1;
      IR_FF = IRA - IRSTART_FF + 1;
      IF(II<=ISSCM_NO_FF(I))[
          IF(MED(IRA)=0) ["Medium is vacuum"
              WRITE(IOUTLIST,140) IR_FF,I,II,'cone',
                     ECUT(IRA),PCUT(IRA), ECUTRR(IRA),ESAVE(IRA),
                     DOSE_ZONE(IRA),IREGION_TO_BIT(IRA),
                     'V','a','c','u','u','m';
          ]
          ELSE ["Medium is not vacuum"
              WRITE(IOUTLIST,140) IR_FF,I,II,'cone',
                             ECUT(IRA),PCUT(IRA),ECUTRR(IRA),ESAVE(IRA),
                             DOSE_ZONE(IRA),IREGION_TO_BIT(IRA),
                             (MEDIA(J,MED(IRA)),J=1,9);
          ]
      ]
      ELSEIF(II=ISSCM_NO_FF(I) + 1)[
          IF(MED(IRA)=0) ["Medium is vacuum"
              WRITE(IOUTLIST,141) IR_FF,I,'NA','between',
                     ECUT(IRA),PCUT(IRA), ECUTRR(IRA),ESAVE(IRA),
                     DOSE_ZONE(IRA),IREGION_TO_BIT(IRA),
                     'V','a','c','u','u','m';
          ]
          ELSE ["Medium is not vacuum"
              WRITE(IOUTLIST,141) IR_FF,I,'NA','between',
                             ECUT(IRA),PCUT(IRA),ECUTRR(IRA),ESAVE(IRA),
                             DOSE_ZONE(IRA),IREGION_TO_BIT(IRA),
                             (MEDIA(J,MED(IRA)),J=1,9);
          ]
          WRITE(IOUTLIST,142)'outer';
          WRITE(IOUTLIST,142)'cone and';
          WRITE(IOUTLIST,142)'RMAX_CM';
      ]
    ]
    WRITE(IOUTLIST,142)' ';
]
IF(N_GAP_FF ~= 0 )[
   IRA = IRSTART_FF + N_FF;
   WRITE(IOUTLIST,143) N_FF+N_GAP_FF,'NA','NA','airgap',
       ECUT(IRA),PCUT(IRA),ECUTRR(IRA),ESAVE(IRA),
       DOSE_ZONE(IRA),IREGION_TO_BIT(IRA),(MEDIA(J,MED(IRA)),J=1,9);
   WRITE(IOUTLIST,142)'at top';
]


110 FORMAT(///' Component module',I3,' is FLATFILT'
           /'  --------------------------------------'
           //T5,'Title: ',68A1);
120 FORMAT(/T2,'FF geometry parameters:',
           /T2,'-----------------------------',
           /T2,'Distance of front of CM from reference plane = ',
           F15.5,' cm',
           /T2,'Radius of outer boundary of CM = ',F15.5,' cm');
122 FORMAT
(/T2,'layer  Z front  thickness  cone  top radius  bottom radius',
 /T2,'  #     face                #',
 /T2,'        (cm)       (cm)            (cm)          (cm)');
123 FORMAT(T2,I3,F9.3,F11.3,I6,F11.3,F14.3);
124 FORMAT(T25,I6,F11.3,F14.3);
130 FORMAT(/T2,'FF region parameters:',
           /T2,'---------------------------',
           /T2,'local  layer  cone  loc.  electron  photon',
           '  range  rejection  dose  bit  medium'
           /T2,'region                     cutoff   cutoff',
           '  level   maximum   zone  set'
           /T2,'                           (MeV)     (MeV)',
           '  (MeV)    (MeV)');
140 FORMAT(T2,I3,I7,I6,A9,F8.3,F9.3,F7.3,F10.3,I5,I4,2x,9A1);
141 FORMAT(T2,I3,I7,A6,A9,F8.3,F9.3,F7.3,F10.3,I5,I4,2x,9A1);
142 FORMAT(T18,A9);
143 FORMAT(T2,I3,A7,A6,A9,F8.3,F9.3,F7.3,F10.3,I5,I4,2x,9A1);



"   Output representation of this component module to file for EGS_Windows
"   ======================================================================
"
IF(IWATCH = 4 | IZLAST = 2) [  "Creat a graphics file "
   ICOLOUR=4;
"   WRITE(IOUTGEOM,201) ICOLOUR,'DISK',0.0,0.0,ZMIN_FF,RTOP_FF;
   "filter geometry"
   DO I = 1, ISCM_NO_FF[
      DO J = 1, ISSCM_NO_FF(I)[
         WRITE(IOUTGEOM,201)ICOLOUR,'CYLZ',ZMIN_FF(I),
                      RTOP_FF(I,J),ZMAX_FF(I),
                      RBOT_FF(I,J),0.0,0.0;
      ]
   ]
]"End of graphics output"
201   FORMAT(' ',I1,A4,10(F7.2,','));
;RETURN;
END; "End of subroutine ISUMRY_FF"

%E "Start of HOWNEAR_FF"
"******************************************************************************
"
"                          Subroutine HOWNEAR_FF
"                          ***********************
"
" Returns min. distance to nearest region boundary.
" Used to be a macro.
"
"*******************************************************************************
;SUBROUTINE HOWNEAR_FF(DIST);


$IMPLICIT-NONE;

COMIN/CM_FF,STACK/;

$REAL DIST, "T> min. distance to nearest region boundary
      DNER_Z,DNER_IN,DNER_OU,  "T> temp. distance variables
      tmp1,tmp2,tmp3,tmp4,tmp5, "T> temp. distance variables
      ALO_FF,  "T> part of equation of line describing cone bdy
      BLO_FF;  "T> part of equation of line describing cone bdy

$INTEGER I1,I,II; "T> looping indices

IR_FF = IR(NP) - IRSTART_FF + 1;
I1 = 0;
DO I = 1, ISCM_NO_FF [
    DO II= 1, ISSCM_NO_FF(I)+1 [
       I1=I1+1;
       IF(I1=IR_FF)[
         ISCM_FF=I;
         IISSC_FF=II;
         EXIT;
       ]
    ]
    IF(I1=IR_FF)[
       EXIT;
    ]
]
IF(IR_FF<=N_FF)[
   DNER_OU = 1E20;
   DNER_IN = 1E20;
   DNER_Z = MIN(ZMAX_FF(ISCM_FF) - Z(NP),
                Z(NP) - ZMIN_FF(ISCM_FF) );
   IF(IISSC_FF <= ISSCM_NO_FF(ISCM_FF))[
     tmp1 = ZMAX_FF(ISCM_FF)
       - ZMIN_FF(ISCM_FF);
     tmp2 = ABS(RTOP_FF(ISCM_FF,IISSC_FF)
        - RBOT_FF(ISCM_FF,IISSC_FF));
     tmp3 = tmp1/SQRT(tmp1**2+tmp2**2);
     tmp4 = SQRT(X(NP)**2 + Y(NP)**2);
     ALO_FF = (RBOT_FF(ISCM_FF,IISSC_FF)
                  - RTOP_FF(ISCM_FF,IISSC_FF))/
                    (ZMAX_FF(ISCM_FF)
                  - ZMIN_FF(ISCM_FF));
     BLO_FF = RTOP_FF(ISCM_FF,IISSC_FF)
                 - ZMIN_FF(ISCM_FF)*ALO_FF;
     tmp5 = ALO_FF * Z(NP) + BLO_FF;
     DNER_OU =  (tmp5 - tmp4) * tmp3;
   ]
   IF(IISSC_FF > 1 )[
      tmp1 = ZMAX_FF(ISCM_FF)
            - ZMIN_FF(ISCM_FF);
      tmp2 = ABS(RTOP_FF(ISCM_FF,IISSC_FF-1)
            - RBOT_FF(ISCM_FF,IISSC_FF-1));
      tmp3 = tmp1/SQRT(tmp1**2+tmp2**2);
      tmp4 = SQRT(X(NP)**2 + Y(NP)**2);
      ALO_FF = (RBOT_FF(ISCM_FF,IISSC_FF-1)
               - RTOP_FF(ISCM_FF,IISSC_FF-1))/
                (ZMAX_FF(ISCM_FF)
               - ZMIN_FF(ISCM_FF));
      BLO_FF = RTOP_FF(ISCM_FF,IISSC_FF-1)
               - ZMIN_FF(ISCM_FF)*ALO_FF;
      tmp5 = ALO_FF * Z(NP) + BLO_FF;
      DNER_IN =  (tmp4 - tmp5) * tmp3;
   ]
   DIST = MIN(DNER_IN,DNER_OU,DNER_Z);
]
ELSEIF(IR_FF=N_FF+1)[
  DIST=MIN(Z(NP)-ZFRONT_FF,ZMIN_FF(1)-Z(NP));
]
RETURN;
END;"End of subroutine HOWNEAR_FF

"*******************************************************************************
"End of FLATFILT_cm.mortran"
%C80
"#############################################################################"
"                                                                             "
"  EGSnrc BEAMnrc component module: parallel plate monitor chamber            "
"  Copyright (C) 2015 National Research Council Canada                        "
"                                                                             "
"  This file is part of EGSnrc.                                               "
"                                                                             "
"  EGSnrc is free software: you can redistribute it and/or modify it under    "
"  the terms of the GNU Affero General Public License as published by the     "
"  Free Software Foundation, either version 3 of the License, or (at your     "
"  option) any later version.                                                 "
"                                                                             "
"  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY  "
"  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  "
"  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for   "
"  more details.                                                              "
"                                                                             "
"  You should have received a copy of the GNU Affero General Public License   "
"  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.             "
"                                                                             "
"#############################################################################"
"                                                                             "
"  Author:          Blake Walters, 1995                                       "
"                                                                             "
"  Contributors:    Charlie Ma                                                "
"                   Dave Rogers                                               "
"                   Iwan Kawrakow                                             "
"                   Ernesto Mainegra-Hing                                     "
"                                                                             "
"#############################################################################"
"                                                                             "
"  This code originally evolved from the IONCHAM component module written by  "
"  Jiansu Wei, starting in 1992.                                              "
"                                                                             "
"  The contributors named above are only those who could be identified from   "
"  this file's revision history.                                              "
"                                                                             "
"  This code was originally part of the BEAM code system for Monte Carlo      "
"  simulation of radiotherapy treatments units. It was developed at the       "
"  National Research Council of Canada as part of the OMEGA collaborative     "
"  research project with the University of Wisconsin. The system was          "
"  originally described in:                                                   "
"                                                                             "
"  BEAM: A Monte Carlo code to simulate radiotherapy treatment units,         "
"  DWO Rogers, BA Faddegon, GX Ding, C-M Ma, J Wei and TR Mackie,             "
"  Medical Physics 22, 503-524 (1995).                                        "
"                                                                             "
"  BEAM User Manual                                                           "
"  DWO Rogers, C-M Ma, B Walters, GX Ding, D Sheikh-Bagheri and G Zhang,      "
"  NRC Report PIRS-509A (rev D)                                               "
"                                                                             "
"  As well as the authors of this paper and report, Joanne Treurniet of NRC   "
"  made significant contributions to the code system, in particular the GUIs  "
"  and EGS_Windows. Mark Holmes, Brian Geiser and Paul Reckwerdt of Wisconsin "
"  played important roles in the overall OMEGA project within which the BEAM  "
"  code system was developed.                                                 "
"                                                                             "
"  There have been major upgrades in the BEAM code starting in 2000 which     "
"  have been heavily supported by Iwan Kawrakow, most notably: the port to    "
"  EGSnrc, the inclusion of history-by-history statistics and the development "
"  of the directional bremsstrahlung splitting variance reduction technique.  "
"                                                                             "
"#############################################################################"


%Q1
%C80
!INDENT F4;
!INDENT M4;
;
"
"*******************************************************************************
"*******************************************************************************
"
"                             *************       ""toc:
"                             *           *       ""toc:
"                             *  CHAMBER  *       ""toc:
"                             *           *       ""toc:
"                             *************       ""toc:
"
"
"   History of modifications given by sccs.
"
"*******************************************************************************
"*******************************************************************************
"
"                               PURPOSE
"                               *******
"
"   Component module for BEAM.  Parallel plate monitor chamber in the      "
"   container with top and bottom layers of arbitrary thickness and        "
"   material.                                                              "
"
"*******************************************************************************
"
"                          GENERAL DESCRIPTION
"                          *******************
"
"   This set of routines is used in conjunction with BEAM.MORTRAN to simulate
"   one component module of a clinical linear accelerator:  a cylindrical
"   planar geometry for monitoring chamber.
"
"I>
"I> Geometry of Chamber (CHAMBER):             ""toc:
"I> *****************************
"I>                        top part,    # of layers: n_top_$chamber
"I>                --------|-----------------------------|--------
"I>                -------------|-----------------|---------------
"I>                -----------------------------------------------
"I>                 |     |    |--------------------|    |     |
"I>                 |     |    |--------------------|    |     |
"I>                 |     |    |--------------------|    |     |
"I>                 |     |wall|--------------------|    |     |
"I>                 |     |    |         .          |    |  # of layers:
"I>     container   |     |    |         .          |    |   n_chm_$chamber
"I>       wall      |     |    |         .          |    |     |
"I>                 | gap |    |         .          |    |     |
"I>                 |     |    |chamber central part|    |     |
"I>                 |     |    |--------------------|    |     |
"I>                 |     |    |--------------------|    |     |
"I>                 |     |    |--------------------|    |     |
"I>                 |     |    |____________________|    |     |
"I>                --------|----------------------------|-----------
"I>                ----------|------------------------|-------------
"I>                ------|--------------------------------|---------
"I>                        bottom part, # of layers: n_bot_$chamber
"I>
"I>
"I>   IR is the region number within the CM.  There are three parts
"I>   shown above. There are N_Chamber (>1) local regions.
"I>
"I>
"I>            ----------------------------------------------------
"I>            | top part:  n_top_$chamber layers.                |
"I>            |            # region: n_top_$chamber x 2          |
"I>            ----------------------------------------------------
"I>            | cham part: n_chm_$chamber layers.                |
"I>            |            # region: n_chm_$chamber + 3          |
"I>            ----------------------------------------------------
"I>            | bottom part: n_bot_$chamber layers               |
"I>            |            # region: n_bot_$chamber x 2          |
"I>            |--------------------------------------------------|
"I>            | total # regions: N_$chamberber = n_chm_$chamber+3|
"I>            |                  +2n_top_$chamber                |
"I>            |                  +2n_bot_$chamber                |
"I>            ----------------------------------------------------
;
"I>            -------------------------------------------------
"I>            | abs region # setting:                         |
"I>            |     first: main cham part begins              |
"I>            |            with irstart_$chamber,             |
"I>            |            ends with irstart_$chamber+        |
"I>            |            n_chm_$chamber-1                   |
"I>            |            +3(side wall+gap+ container wall)  |
"I>            |     second: top layers begins                 |
"I>            |            with the end of cham part+1        |
"I>            |            ends with the end of cham part     |
"I>            |            + 2n_top_$chamber-1                |
"I>            |     third: bottom layers with                 |
"I>            |            the end of top part +1             |
"I>            |            ends with the end of top part      |
"I>            |            + 2n_bot_$chamber-1                |
"I>            |     air gap: irend_$chamber=irstart_$chamber+ |
"I>            |            n_cham_$chamber +3                 |
"I>            |            +2n_top_$chamber                   |
"I>            |            +2n_bot_$chamber                   |
"I>            -------------------------------------------------
"I>
" Subroutines:
" ************
"                      INPUT_Chamber
"                      ISUMRY_Chamber
"                      HOWFAR_Chamber
"                      WHERE_AM_I_Chamber
"
"       Called from BEAM's subroutines:
"                      INPUT
"                      ISUMRY
"                      HOWFAR
"
"       Subroutines called:
"                      WHERE_AM_I (a BEAM subroutine)
"
"*******************************************************************************
"
"                             RESTRICTIONS ON USE/BUGS       ""toc:
"                             ************************
"
"*******************************************************************************
"**************************  DESCRIPTION OF VARIABLES  *************************
"*******************************************************************************
"
"                             COMMON BLOCK VARIABLES
"                             **********************
"
"  Refer to the replacement macros in BEAM.MORTRAN and BEAM_COMMON.MORTRAN
"  which define the common block variables.
"
"*******************************************************************************
"
"                                OTHER VARIABLES
"                                ***************
"
"  Refer to the section on type declarations for each subroutine. The following
"  section describes the variables input from unit 5.  These variables define
"  the parameters of each simulation.
"
;
"*******************************************************************************
"
"                               INPUT FROM UNIT 5             ""toc:
"                               *****************             ""toc:
"
"I>
"I>  CARDS CM_Chamber
"I>  ****************
"I>
"I>  -1  Dummy line to indicate start of CM.
"I>
"I>   0  RMAX_CM(ICM_Chamber):( F10.0):   Maximum radius of component module
"I>
"I>   1  TITLE_Chamber (60A1):  Title of CM.
"I>
"I>   2  ZMIN_Chamber (F15.0): Distance from front surface of 1st cylinder to
"I>                             reference plane (Z=0). Excludes any air gap.
"I>
"I>   3  N_TOP_Chamber, N_CHM_Chamber, N_BOT_Chamber (3I5)
"I>
"I>        N_TOP_Chamber:   Number of layers in top part (>= 0).
"I>        N_CHM_Chamber:   Number of layers in chamber itself (> 0 to input
"I>                          chamber layers individually or if ALL layers have
"I>                          the same thickness and medium; < 0 to
"I>                          input -N_CHM_Chamber groups of layers where
"I>                          layers in each group have the same thickness and
"I>                          ALL layers have the same MED).
"I>        N_BOT_Chamber:   Number of layers in bottom part (>= 0).
;
"I>   ==========================================================================
"I>   4  Inputs for the top part (If N_TOP_Chamber >0):
"I>   ==========================================================================
"I>
"I>    If all layers in this part are identical, then in line (a) include
"I>    NFLAG=N_TOP_Chamber, otherwise repeat (a) to (e) for each of the
"I>    layers.
"I>
"I>     a) ZTHICK, RCYS_Chamber , NFLAG (2F15.0,I5)
"I>           ZTHICK (F15.0):        Thickness of each layer in top part
"I>           RCYS_Chamber (F15.0): Radius of inner cylinders in each layer
"I>           N_TOP_Chamber (I5):   Number of layers in top part
"I>
"I>     b) ECUT,PCUT,DOSE_ZONE,IREGION_TO_BIT for inner cylinders
"I>                                           (2F15.0,2I5,1-line):
"I>         ECUT, PCUT: Cutoff energies for electrons and photons.
"I>         DOSE_ZONE:  Dose scoring region for this region, 0=>no dose scored.
"I>         IREGION_TO_BIT :  Bit # in LATCH designated to this region
"I>
"I>     c) MED_IN (24A1):  Medium of inner cylinder (used for MED_INDEX)
"I>
"I>     d) ECUT,PCUT,DOSE_ZONE,IREGION_TO_BIT for outer annuli
"I>                                           (2F15.0,2I5,1-line):
"I>
"I>     e) MED_IN (24A1):  Medium for outer annuli (used for MED_INDEX)
"I>
;
"I>   =========================================================================
"I>   5  Inputs for the chamber/phantom part:
"I>   =========================================================================
"I>
"I>    The chamber/phantom part has a central part of potentially many layers
"I>    which may have different media and dimensions.  Outside this there
"I>    are 3 cylindrical shells, called the chamber wall, gap, and container
"I>    wall.  Each is a single material running the entire Z-span of the
"I>    central part.
"I>
"I>   5.1) RCYS_Chamber(1,1), RCYS_Chamber(1,2), RCYS_Chamber(1,3) (3F15.0)
"I>          RCYS_Chamber (1,1): Inner r of chamber wall=outer r central region
"I>          RCYS_Chamber (1,2): Outer r of chamber wall=inner r of gap
"I>          RCYS_Chamber (1,3): Inner r of container wall=outer r of gap
"I>
"I>
"I>   5.2) If N_CHM_Chamber>0: If all layers in this part are identical, then
"I>           in line (a) include NFLAG=N_CHM_Chamber and input (b) once for
"I>           all layers, otherwise repeat (a) to (c) for each of the layers.
"I>        If N_CHM_Chamber<0: Repeat (a) once for each of the
"I>           -N_CHM_Chamber groups of layers of equal thickness. In this case,
"I>           NFLAG is the number of layers in the group.   Then input (b) once
"I>           for all layers.
"I>
"I>     a) ZTHICK, NFLAG  (F15.0,I5)
"I>           ZTHICK:    Thickness of each layer in chamber part
"I>                      (N_CHM_Chamber>0) or of each layer in this particular
"I>                      group of layers (N_CHM_Chamber<0)
"I>           NFLAG:     Number of layers in chamber IF all same
"I>                      (N_CHM_Chamber>0) or number of layers in the group
"I>                      (N_CHM_Chamber<0)
"I>
"I>     b) ECUT,PCUT,DOSE_ZONE,IREGION_TO_BIT for chamber layers
"I>                                                (2F15.0,2I5,one line):
"I>           ECUT, PCUT: Cutoff energies for electrons and photons.
"I>           DOSE_ZONE:  if all layers are of equal thickness or there are
"I>                       groups of layers of equal thickness (ie
"I>                       NFLAG=N_CHM_Chamber or N_CHM_Chamber<0) then, if
"I>                       DOSE_ZONE>0 the dose is scored in regions
"I>                       DOSE_ZONE, DOSE_ZONE+1,.., DOSE_ZONE+N_CHM_Chamber-1
"I>                       ie, a sequence of dose scoring zones are set up
"I>                       automatically for all layers.
"I>                       For single region at a time
"I>                       Dose scoring region for this region,0=>no dose scored.
"I>           IREGION_TO_BIT :  Bit # in LATCH designated to this region
"I>
"I>     c) MED_IN (24A1):  Medium of chamber layers (used to set MED_INDEX)
"I>
"I>
"I>     5.3) Inputs for the chamber wall:
"I>     ---------------------------------
"I>
"I>     a) ECUT, PCUT, DOSE_ZONE, IREGION_TO_BIT, (2F15.0,2I5):
"I>           ECUT, PCUT: Cutoff energies for electrons and photons.
"I>           DOSE_ZONE:  Dose scoring region for this region,0=>no dose scored.
"I>           IREGION_TO_BIT:  Bit # in LATCH designated to this region
"I>
"I>     b) MED_IN (24A1):  Medium of chamber wall (used to set MED_INDEX)
"I>
"I>     5.4) Inputs for the gap between chamber wall and container wall:
"I>     ----------------------------------------------------------------
"I>
"I>     a) ECUT, PCUT, DOSE_ZONE, IREGION_TO_BIT, (2F15.0,2I5):
"I>
"I>     b) MED_IN (24A1):  Medium of gap (used to set MED_INDEX)
"I>
"I>
"I>     5.5) Inputs for the container wall:
"I>     -------------------------------------------
"I>
"I>     a) ECUT, PCUT, DOSE_ZONE, IREGION_TO_BIT, (2F15.0,2I5):
"I>
"I>     b) MED_IN (24A1):  Medium of container wall (used to set MED_INDEX)
;
"I>   =====================================================================
"I>   6  Inputs for the bottom part (If N_BOT_Chamber >0):
"I>   =====================================================================
"I>
"I>    5.6) If all layers in this part are identical, then in line (a) include
"I>         NFLAG=N_BOT_Chamber, otherwise repeat (a) to (e) for each of the
"I>         layers.
"I>
"I>     a) ZTHICK, RCYS_Chamber , NFLAG (2F15.0,I5)
"I>          ZTHICK:           Thickness of each layer in bottom part
"I>          RCYS_Chamber:    Radius of inner cylinders in bottom part
"I           NFLAG:            Number of layers in bottom part IF all same
"I>
"I>     b) ECUT,PCUT,DOSE_ZONE,IREGION_TO_BIT for inner cylinders
"I>                                             (2F15.0,2I5,1-line):
"I>          ECUT, PCUT:  Cutoff energies for electrons and photons.
"I>          DOSE_ZONE:   Dose scoring flag, 0=>do not score dose.
"I>          IREGION_TO_BIT :  Bit # in LATCH designated to this region
"I>
"I>     c) MED_IN (24A1):  Medium of inner cylinders (used for MED_INDEX)
"I>
"I>     d) ECUT,PCUT,DOSE_ZONE,IREGION_TO_BIT for outer annuli
"I>                                            (2F15.0,2I5,1-line):
"I>     e) MED_IN (24A1):  Medium of outer annuli (used for MED_INDEX)
"I>
"I>   ====================================================================
"I>   7  Inputs for range rejection options:
"I>   ====================================================================
"I>
"I>       MRNGE (I5)         0 or 1
"I>
"I>          MRNGE     : = 1 to estimate thickness of the CHAMBER for
"I>                        ECUTRR calculations in automated range rejection
"I>                        (IREJCT_GLOBAL=1) (crude approx for 5 layers)
"I>                      = 0 no ECUTRR calculation--range rejection will
"I>                        still be done on a region-by-region basis
"I>
"I>            Note that MRNGE only has an effect if automated range
"I>            rejection is on (IREJCT_GLOBAL=1).
"I>
"I>   Example
"I>   *******
"I>
"I>  The following set of cards defines a chamber with 2 top layers, 3 chamber
"I>  layers, and 2 bottom layers.
"I>  The chamber wall is AL & the chamber container is CU. The detecting
"I>  material is air.
"I>  The air cavities are assigned as dose region 1 and the rest as region 2.
"I>
"I>  10.5; radius of CM
"I>  Chamber with 2 top layers, 3 chamber layers, 2 bottom layers
"I>  10.0; distance from front surface of the CM to the reference plane (z=0)
"I>  2,3,2;                   2 top layers, 3 chamber layers, 2 bottom layers
"I>  0.1,5.0,0;          first layer in the top part, 0.1cm thick, IR=5cm
"I>  0.521,0.010,2,2;  dose region # = 2
"I>  CU             ;  medium
"I>  0.521,0.010,2,2;
"I>  CU
"I>  0.2,5.0,0;          second layer is 0.2 cm thick, radius = 5.0 cm
"I>  0.521,0.010,2,2;  for inner cylinder (dose region # = 2)
"I>  AL
"I>  0.521,0.010,2,2;  for outer annulus
"I>  AL
"I>  5.0,5.2,10.0;     IR & OR of chamber wall, IR of container
"I>  0.2;              thickness of the first layer (air) in chamber part
"I>  0.521,0.010,1,2;  dose region # = 1
"I>  AIR
"I>  0.1;              thickness of the second layer (AL) in chamber part
"I>  0.521,0.010,2,2;  dose region # = 2
"I>  AL
"I>  0.2;              thickness of the third layer (air) in chamber part
"I>  0.521,0.010,1,2;  dose region # = 1
"I>  AIR
"I>  0.521,0.010,2,2;  chamber wall (dose region # = 2)
"I>  AL
"I>  0.521,0.010,2,2;  air gap betweem chamber wall and container wall
"I>  AIR
"I>  0.521,0.010,2,2;  chamber container
"I>  CU
"I>  0.1,5.0,2;        2 layers in bot. part have = thickness, IR
"I>  0.521,0.010,2,2;  for inner cylinders
"I>  AL
"I>  0.521,0.010,2,2;  for outer annuli
"I>  AL
"I>  0;                do not calculate ECUTRR
"I>
;
"*******************************************************************************
"*******************************  ERROR CONDITIONS  ****************************
"*******************************************************************************
"
"                              SIMULATION PARAMETERS
"                              *********************
"
" Geometry checks:
" ****************
"
"   1)  Overlapping component modules
"
"*******************************************************************************

%E     "start of subroutine HOWFAR_Chamber"
"******************************************************************************
"************************** Component Module CHAMBER***************************
"******************************************************************************
"
"                          Subroutine HOWFAR_Chamber
"                          ***********************
"
" HOWFAR routine for stacked planar media.
"
" Determine if current region number is within CHAMBER, and if so evaluate
" DIST, the distance to the region boundary along current trajectory.  USTEP
" must not exceed DIST.
"
"   There are N_Chamber local regions + an air gap (if present):
"
"     local               absolute                       description
"----------  -------------------------------------   -----------------------
"IR_Chamber  IR_start_CM(ICM_Chamber)+IR_Chamber-1 excluding front air gap
"----------  -------------------------------------   -----------------------
"   Geometrical co-ordinates, as set in INPUT_Chamber are:
"
"   ZFRONT_Chamber     front of CM (upstream surface, air region)
"   ZMIN_Chamber       front of first cylinder
"   ZMAX_Chamber       back of last cylinder
"   RMAX_Chamber       radius of last cylinder (largest)
"
"******************************************************************************

;SUBROUTINE HOWFAR_Chamber;


"V>$GEO_SHIFT_1_(#)
"V>=============
"V>{p1} the value to compare with ustep
"V> if {p1}+1.0e-5 < ustep shift it, otherwise no shift
;
REPLACE {$GEO_SHIFT_1_(#)} WITH
{; IF({P1}+1.0E-5< USTEP) [{P1}={P1}+1.0E-5;]  }


"V>$GEO_SHIFT_2_(#,#)
"V>=============
"V>{p1} the value to compare with {P2}
"V> if {p1}+1.0e-5 < {P2} shift it, otherwise no shift
;
REPLACE {$GEO_SHIFT_2_(#,#)} WITH
{; IF({P1}+1.0E-5< {P2}) [{P1}={P1}+1.0E-5;]  }

;IMPLICIT NONE;

;COMIN/
   CMs,CM_Chamber,EPCONT,STACK,EGS-IO/;

"T>
"T>**********************************
"T>TYPE DECLARATIONS FOR HOWFAR_Chamber
"T>**********************************
"T>

INTEGER
   IRL,            "T>local region number (absolute), required by HOWNEAR macro
   I, IIR, JDEBUG,
   LAYER,
   IU_D;           "T>to indicate the relations between ustep and dist

$REAL
   DIST,          "T>furthest dist to z boundary along current trajectory
   RF2_Chamber,  "T>temporary variable
   DMIN_Chamber, "T>minimum distance to boundaries checked thus far
   R0SQ,          "T>temporary init position of the particle in x-y plane
   CRITERIOR_IR,ZNP,
   STEP_UNIT, CUT_COE, CUTCOE_Chamber, SHIFT_COUNT_Chamber;
;

" Determine local region number
" *****************************
ZNP=Z(NP);
IRL = IR(NP); "local region number (absolute)
JDEBUG=JDEBUG+1;
IR_Chamber = IRL - IRSTART_Chamber + 1;   "local region number( relative )

" Set DNEAR
" *********
" This replacement macros sets DMIN_Chamber as well as defining IR_Chamber
;
Chamber_CM_HOWNEAR(DMIN_Chamber);
DNEAR(NP) = DMIN_Chamber;
;

" CALC. THE LAYER # "
IF( IR_Chamber<=N_CHM_Chamber ) [ LAYER=IR_Chamber; ]
ELSEIF(IR_Chamber<=N_CHM_Chamber+3 ) [ LAYER=1; ]
ELSE[
   LAYER=N_CHM_Chamber+
         (IR_Chamber-N_CHM_Chamber-3+1)/2;
]
" this will be used only for the top and bottom parts "


" Boundary-crossing check
" ***********************
"
" Determine if current region number is within component module,if so
" evaluate DIST, distance to region boundary along current trajectory.  USTEP
" must not exceed DIST.
;
R0SQ=X(NP)**2+Y(NP)**2;
CUT_COE=0.0;

" the following block double check:
"=================================
"      1. the particle is out of the CM oe regions in z direction
"      2.                        the regions in r directions
"     if so reset the ir #, and print out the warning message.
"comment: this block is not time consumming, can be kept in the final version
"=======
"
"  now do the air gap if existed.
"=====================================

IF(N_GAP_Chamber=1 & IRL=IREND_Chamber )["check the air gap first"
   IF(W(NP)>0.0)["particle going forward"
      DIST = (ZMIN_Chamber - Z(NP))/W(NP); "distance to front of CM"
      IF(DIST>USTEP) [ STEP_UNIT=USTEP; IU_D=0; ]
      ELSE [ STEP_UNIT=DIST; IU_D=1; ]
      IF(DIST <= 0.0)[ " particle was out of the air gap"
          USTEP=0.0;
          IF(N_TOP_Chamber=0)[" no top layer above the chamber"
              IF(R0SQ<RCYS2_Chamber(1,1))[IRNEW =IRSTART_Chamber;]
              ELSEIF(R0SQ<RCYS2_Chamber(1,2))
                 [IRNEW =IRSTART_Chamber+N_CHM_Chamber;]
              ELSEIF( R0SQ<RCYS2_Chamber(1,3) )
                 [IRNEW =IRSTART_Chamber+N_CHM_Chamber+1;]
              ELSE[ IRNEW =IRSTART_Chamber+N_CHM_Chamber+2;]
           ]
           ELSE[        " has top layer above the chamber"
               IF( R0SQ<RCYS2_Chamber(N_CHM_Chamber+1,1) )
                  [ IRNEW =IRSTART_Chamber+N_CHM_Chamber+3;]
               ELSE[IRNEW =IRSTART_Chamber+N_CHM_Chamber+4;]
           ]
           RETURN;
       ] "end of the double check if a particle is out of the AIR GAP"

      "  do the howfar job for the air gap  "
      "====================================="
       ELSE[
           IF( IU_D=0 )[RETURN; ] " no cut, ustep admmited"
           ELSE[ " iu_d=1, cut the ustep to dist "
               ;$GEO_SHIFT_1_(STEP_UNIT);
               USTEP=STEP_UNIT;
               RF2_Chamber= (X(NP)+USTEP*U(NP))**2
                        +(Y(NP)+USTEP*V(NP))**2;
               IF(N_TOP_Chamber=0)[  " no top layer above the chamber"
                  IF( RF2_Chamber<RCYS2_Chamber(1,1) )
                    [IRNEW =IRSTART_Chamber;]
                  ELSEIF( RF2_Chamber<RCYS2_Chamber(1,2) )
                    [IRNEW =IRSTART_Chamber+N_CHM_Chamber;]
                  ELSEIF( RF2_Chamber<RCYS2_Chamber(1,3) )
                    [IRNEW =IRSTART_Chamber+1+N_CHM_Chamber;]
                  ELSE[ IRNEW =IRSTART_Chamber+2+N_CHM_Chamber;]
               ]
               ELSE[ " has top layer above the chamber"
                  IF( RF2_Chamber<RCYS2_Chamber(N_CHM_Chamber+1,1) )
                    [ IRNEW =IRSTART_Chamber+N_CHM_Chamber+3;]
                  ELSE[IRNEW =IRSTART_Chamber+N_CHM_Chamber+4;]
               ]
               RETURN;
           ]  " end of the cut case"
       ]"  end of the howfar for this case"
   ]   " end of the w>0 case

   ELSEIF(W(NP)<0.0)[ " particle going backward"
      DIST = (ZFRONT_Chamber - Z(NP))/W(NP); "distance to front of CM"
      IF(DIST>USTEP) [ STEP_UNIT=USTEP; IU_D=0; ]
      ELSE [ STEP_UNIT=DIST; IU_D=1; ]
      IF(DIST <= 0.0)[
          USTEP=1.E-16; "make sure ausgab is called when leaving CM"
          CALL WHERE_AM_I(ICM_Chamber,-1);
          RETURN;
      ] " end of the double check if a particle is out of the CM"
      ELSE[ " do the howfar job"
          IF( IU_D=0 ) [ RETURN; ]   " no cut, ustep admmited"
          ELSE[  " iu_d=1, cut the ustep to dist "
              ;$GEO_SHIFT_1_(STEP_UNIT);
              USTEP=STEP_UNIT;
              CALL WHERE_AM_I(ICM_Chamber,-1);
              RETURN;
          ]  " end of the howfar job for this case "

      ]    " end of the howfar job for this case"
   ]  " end of the w<0 case "
   ELSE[ RETURN;]  " for the w=0.0 case "
]    " end of the air gap case "

" now do the central part of the ion chamber "
"==========================================="

ELSEIF(IR_Chamber<=N_CHM_Chamber)  [" inside the inner chamber layers"
   IF(W(NP) > 0.0) [  "particle going forward"
      DIST = (Z_Chamber(IR_Chamber+1) - Z(NP))/W(NP);
      "distance to back of CM"
      IF(DIST>USTEP) [ STEP_UNIT=USTEP; IU_D=0; ]
      ELSE [ STEP_UNIT=DIST; IU_D=1; ]
      IF(DIST <=0.0)[
          USTEP=0.0;
          IF(IR_Chamber=N_CHM_Chamber & N_BOT_Chamber=0 )[
             " last layer of the cham"
             USTEP=1.E-16;
             CALL WHERE_AM_I(ICM_Chamber,1);
          ]" and last layer of CM  "
          ELSEIF( IR_Chamber=N_CHM_Chamber )[
             " last layer of chamb, not for CM   "
             " particle will go into the first layer of the bottom part  "
             IF(R0SQ< RCYS2_Chamber(N_CHM_Chamber+N_TOP_Chamber+1,1))[
                 " the first layer of the bottom part"
                 IRNEW=IRSTART_Chamber+N_CHM_Chamber+3+2*N_TOP_Chamber;
             ]
             ELSE[
                IRNEW=IRSTART_Chamber+N_CHM_Chamber+3+2*N_TOP_Chamber+1;
             ]
          ]
          ELSE[  IRNEW = IR(NP)+1;]
          RETURN;
      ]
      " end of the double check if a particle is out of the CM in z direct "

      " now check the r direction "
      "==========================="

      CRITERIOR_IR=R0SQ-RCYS2_Chamber(1,1);
      " all the inner layers have the same radius"
      IF(CRITERIOR_IR>0.0)[" out of the r1 "
          USTEP=MIN( USTEP, SHIFT_COUNT_Chamber(IR_Chamber) );
          IRNEW=IRSTART_Chamber+N_CHM_Chamber;" go into the side wall "
          RETURN;
      ]   " end of the   r direction error block "

      "  now do the howfar job  "
      "========================="
      RF2_Chamber=(X(NP)+STEP_UNIT*U(NP))**2
                        +(Y(NP)+STEP_UNIT*V(NP))**2;
      IF(RF2_Chamber > RCYS2_Chamber(1,1))
        [CUT_COE=CUTCOE_Chamber( R0SQ, RCYS2_Chamber(1,1) ); ]
      IF((CUT_COE>0.0&CUT_COE<STEP_UNIT)|(CUT_COE=STEP_UNIT&IU_D=0))[
          " hits the side wall of the chamber "
          ;$GEO_SHIFT_2_(CUT_COE, STEP_UNIT);
          USTEP=CUT_COE;
          IRNEW=IRSTART_Chamber+N_CHM_Chamber;
          RETURN;
      ]
      ELSEIF(IU_D=1)[ " hits the bottom of this layer"
          ;$GEO_SHIFT_1_(STEP_UNIT);
          USTEP=STEP_UNIT;
          IF(IR_Chamber=N_CHM_Chamber & N_BOT_Chamber=0 )[
              " last layer of the cham"
              CALL WHERE_AM_I(ICM_Chamber,1); ]" and last layer of CM  "
          ELSEIF( IR_Chamber=N_CHM_Chamber )[
              "last layer of chamb, not for CM"
              " particle will go into the first layer of the bottom part  "
              RF2_Chamber= (X(NP)+USTEP*U(NP))**2
                        +(Y(NP)+USTEP*V(NP))**2;
              IF(RF2_Chamber<RCYS2_Chamber(N_CHM_Chamber+
                         N_TOP_Chamber+1,1))
              [IRNEW=IRSTART_Chamber+N_CHM_Chamber+3+2*N_TOP_Chamber;]
              ELSE[IRNEW=IRSTART_Chamber+
                   N_CHM_Chamber+3+2*N_TOP_Chamber+1;]
          ]
          ELSE[IRNEW = IR(NP)+1;]
          RETURN;
       ]    " end of the case with  ustep cutoff in z direction "
       ELSE [ RETURN; " no cut off at all "  ]
   ] " end of the w>0 case "

   ELSEIF(W(NP)< 0.0)["particle going backward"
      DIST = (Z_Chamber(IR_Chamber) - Z(NP))/W(NP);
      "distance to back layer, the 0th index is ok "
      IF(DIST>USTEP) [ STEP_UNIT=USTEP; IU_D=0; ]
      ELSE [ STEP_UNIT=DIST; IU_D=1; ]
      IF(DIST <= 0.0)[" particle was out of this layer in z direction"
          USTEP=0.0;
          IF(IR_Chamber=1 & N_TOP_Chamber=0 )[ " top of CM, no top part "
              IF(N_GAP_Chamber = 1)[ IRNEW =IREND_Chamber;]
              " has air gap"
              ELSE [ USTEP=1.E-16; CALL WHERE_AM_I(ICM_Chamber,-1); ]
                                              " no air gap "
          ]
          ELSEIF(IR_Chamber=1)[
             " top of the chamb, not the top of the CM"
             " particle will go into the top part from below"
             IF(R0SQ<RCYS2_Chamber(N_CHM_Chamber+N_TOP_Chamber,1))[
                 " the last layer of the top part "
                 IRNEW=IRSTART_Chamber+
                      N_CHM_Chamber+3+2*(N_TOP_Chamber-1);
             ]
             ELSE[IRNEW=IRSTART_Chamber+N_CHM_Chamber+3+
                   2*(N_TOP_Chamber-1)+1;
             ]
          ]
          ELSE[  IRNEW = IR(NP)-1;]" layer # decreases by one in the chamb"
          RETURN;
      ]
      " end of the double check if a particle is out of the main cham in z"

      " now check the r direction "
      "==========================="
      CRITERIOR_IR=R0SQ-RCYS2_Chamber(1,1);
      IF(CRITERIOR_IR>0.0)[" out of the region in r direction  "
          USTEP=MIN( USTEP, SHIFT_COUNT_Chamber(IR_Chamber) );
          IRNEW=IRSTART_Chamber+N_CHM_Chamber;" go into the side wall "
          RETURN;
      ]   " end of the   r direction error block "

      "  now do the howfar job  "
      "========================="
      RF2_Chamber=(X(NP)+STEP_UNIT*U(NP))**2
                        +(Y(NP)+STEP_UNIT*V(NP))**2;
      IF( RF2_Chamber > RCYS2_Chamber(1,1) )
        [CUT_COE=CUTCOE_Chamber( R0SQ, RCYS2_Chamber(1,1) ); ]
      IF( ( CUT_COE>0.0 & CUT_COE < STEP_UNIT )
         |( CUT_COE=STEP_UNIT & IU_D=0 ) )[
          ;$GEO_SHIFT_2_(CUT_COE, STEP_UNIT);
          USTEP=CUT_COE;
          IRNEW=IRSTART_Chamber+N_CHM_Chamber;
          RETURN;
      ]
      ELSEIF(IU_D=1)[" hits the TOP of this layer"
        ;$GEO_SHIFT_1_(STEP_UNIT);
         USTEP=STEP_UNIT;
         IF(IR_Chamber=1 & N_TOP_Chamber=0 & N_GAP_Chamber=0 )
           [ CALL WHERE_AM_I(ICM_Chamber,-1); ]  " and first layer of CM  "
         ELSEIF(IR_Chamber=1 & N_TOP_Chamber=0)
           [ IRNEW=IREND_Chamber;]
         ELSEIF( IR_Chamber=1 )[ " first layer of chamb, not for CM "
            RF2_Chamber= (X(NP)+USTEP*U(NP))*(X(NP)+USTEP*U(NP))
                +(Y(NP)+USTEP*V(NP))*(Y(NP)+USTEP*V(NP));
            IF(RF2_Chamber<RCYS2_Chamber(N_CHM_Chamber+N_TOP_Chamber,1))
            [IRNEW=IRSTART_Chamber+N_CHM_Chamber+3+2*(N_TOP_Chamber-1);]
            ELSE[IRNEW=IRSTART_Chamber+N_CHM_Chamber+3+
                2*(N_TOP_Chamber-1)+1;
            ]
         ]
         ELSE[IRNEW = IR(NP)-1;]
         RETURN;
      ]    " end of the case with  ustep cutoff in z direction "
      ELSE [ RETURN; ]       " no cut off at all "
   ]   " end of the w<0.0 case"

   ELSE[ " W=0 CASE "
       CUT_COE=CUTCOE_Chamber( R0SQ, RCYS2_Chamber(1,1) );
       IF( CUT_COE>0.0 & CUT_COE<=USTEP ) [
           ;$GEO_SHIFT_1_(CUT_COE);
           USTEP=CUT_COE;
           IRNEW=IRSTART_Chamber+N_CHM_Chamber;
       ]
       RETURN;
   ]   " end of the w=0 case "
]     " end of the central chamber layer part "
      "=============================="

ELSEIF(IR_Chamber<=N_CHM_Chamber+3) [
   " in the side wall or side gap or container wall"
   IIR=IR_Chamber-N_CHM_Chamber;
   " iir = 1, wall; 2, side gap; 3 container wall "
   IF(W(NP) > 0.0)["particle going forward"
      DIST = (Z_Chamber(N_CHM_Chamber+1) - Z(NP))/W(NP);
        "distance to back of cham"
      IF(DIST>USTEP) [ STEP_UNIT=USTEP; IU_D=0; ]
      ELSE [ STEP_UNIT=DIST; IU_D=1; ]
      IF(DIST <=0.0)[      " out of this layer in z direction "
          USTEP=0.0;
          IF( N_BOT_Chamber=0 )[   " no bottom part "
              USTEP=1.E-16;
              CALL WHERE_AM_I(ICM_Chamber,1);
          ]
          ELSE[                    " has bottom part "
              IF(R0SQ< RCYS2_Chamber(N_CHM_Chamber+N_TOP_Chamber+1,1))[
                  " the first layer of the bottom "
                  IRNEW=IRSTART_Chamber+N_CHM_Chamber+3+2*N_TOP_Chamber;
              ]
              ELSE[ IRNEW=IRSTART_Chamber+N_CHM_Chamber+3+
                          2*N_TOP_Chamber+1;
              ]
          ]
          RETURN;
      ]
      " end of the double check if a particle is out of the wall in z direct

      " now check the r direction "
      "==========================="
      CRITERIOR_IR=R0SQ-RCYS2_Chamber(1,IIR);
      IF(CRITERIOR_IR<0.0)[" out of the region in r dir towards to center"
          USTEP=MIN(USTEP, SHIFT_COUNT_Chamber(IR_Chamber));
          IF(IIR=1)[
              " figure out the layer # the particle will go into."
              DO I=1, N_CHM_Chamber[
                 IF( Z(NP)<Z_Chamber(I+1) ) [ EXIT; ]
              ]
              I=MIN(I, N_CHM_Chamber);  " to avoid i > n_chm_$chamber "
              IRNEW=IRSTART_Chamber+I-1;
          ]
          ELSE[ IRNEW = IRL-1; ]
          RETURN;
      ]      " end of the  out to in check "
      IF( IIR~=3)[" when iir =3, no need to check the outer "
          CRITERIOR_IR=R0SQ-RCYS2_Chamber(1,IIR+1);
          IF(CRITERIOR_IR>0.0)[  " out side the outer radius "
              USTEP=MIN( USTEP, SHIFT_COUNT_Chamber(IR_Chamber) );
              IRNEW=IRL+1;
              RETURN;
          ]       " end of the warnning message block.
      ]        " end of the outer radius check
      " end of the r direction error block "

      " do the howfar job for this case "
      "================================="
      " first do the inner r "
      CUT_COE=CUTCOE_Chamber(R0SQ, RCYS2_Chamber(1,IIR));
      IF( ( CUT_COE>0.0 & CUT_COE < STEP_UNIT )
         |( CUT_COE=STEP_UNIT & IU_D=0 ) )[  " hits the inner wall"
          ;$GEO_SHIFT_2_(CUT_COE, STEP_UNIT);
          USTEP=CUT_COE;
          IF(IIR=1)[ " figure out the layer # the particle will go into."
             DO I=1, N_CHM_Chamber[
                IF( Z(NP)+USTEP*W(NP)<Z_Chamber(I+1) ) [ EXIT; ]
             ]
             I=MIN(I, N_CHM_Chamber);  " to avoid i > n_chm_$chamber "
             IRNEW = IRSTART_Chamber+I-1;
          ]
          ELSE[ IRNEW=IRL-1;]
          RETURN;
      ]
      IF(CUT_COE<=0.0 & IIR~=3)[   " IT IS NECESSARY TO DO OUTER CSAE"
          CUT_COE=CUTCOE_Chamber(R0SQ, RCYS2_Chamber(1,IIR+1));
          IF( ( CUT_COE>0.0 & CUT_COE < STEP_UNIT )
             |( CUT_COE=STEP_UNIT & IU_D=0 ) ) [  " hits the outer wall"
             ;$GEO_SHIFT_2_(CUT_COE, STEP_UNIT);
             USTEP=CUT_COE;
             IRNEW=IR(NP)+1;
             RETURN;
          ]
      ]     " not hits the side wall at all"

     " now check to see whether hitting the bottom  "

      IF(IU_D=1)[         " hits the bottom of this layer"
          ;$GEO_SHIFT_1_(STEP_UNIT);
          USTEP=STEP_UNIT;
          " last layer of the CM, no bottom part"
          IF(N_BOT_Chamber=0 )[ CALL WHERE_AM_I(ICM_Chamber,1); ]
          ELSE[" particle will go into the first layer of the bottom part"
              RF2_Chamber= (X(NP)+USTEP*U(NP))**2
                        +(Y(NP)+USTEP*V(NP))**2;
              " the first layer of the bottom part "
              IF( RF2_Chamber< RCYS2_Chamber(N_CHM_Chamber+
                           N_TOP_Chamber+1,1) )
              [ IRNEW=IRSTART_Chamber+N_CHM_Chamber+3+2*N_TOP_Chamber; ]
              ELSE[ IRNEW=IRSTART_Chamber+N_CHM_Chamber+3+
                  2*N_TOP_Chamber+1;
              ]
          ]
          RETURN;
      ]    " end of the case with  ustep cutoff in z direction "
      ELSE [ RETURN; ]       " no cut off at all "

   ]   " end of the w> 0.0 case "

   " now do the w<0.0 case "
   "======================="
   ELSEIF(W(NP) < 0.0)["particle going backward"
      DIST = (Z_Chamber("0"1) - Z(NP))/W(NP); "distance to back layer "
      IF(DIST>USTEP) [ STEP_UNIT=USTEP; IU_D=0; ]
      ELSE [ STEP_UNIT=DIST; IU_D=1; ]
      IF(DIST <= 0.0)[ " out of the region in z direction "
          USTEP=0.0;
          IF(N_TOP_Chamber=0 )[
              IF(N_GAP_Chamber = 1)[ IRNEW =IREND_Chamber;]
              ELSE [ USTEP=1.E-16; CALL WHERE_AM_I(ICM_Chamber,-1); ]
          ]
          ELSE[         " the last layer of the top part"
             IF(R0SQ<RCYS2_Chamber(N_CHM_Chamber+N_TOP_Chamber,1) )
             [IRNEW=IRSTART_Chamber+N_CHM_Chamber+3+2*(N_TOP_Chamber-1);]
             ELSE[ IRNEW=IRSTART_Chamber+N_CHM_Chamber+3+
                      2*(N_TOP_Chamber-1)+1;]
          ]
          RETURN;
      ] "end of the double check if a particle is out of the region"
            " in z direction"

      " now check the r direction to see if the region # is right or not"
      "================================================================"
      CRITERIOR_IR=R0SQ-RCYS2_Chamber(1,IIR);
      IF(CRITERIOR_IR<0.0)[" out of the region in r dir TOWARDS center  "
          USTEP=MIN( USTEP, SHIFT_COUNT_Chamber(IR_Chamber) );
          IF(IIR=1)[ "figure out the layer # the particle will go into."
             DO I=1, N_CHM_Chamber[IF(Z(NP)<Z_Chamber(I+1))[EXIT;]]
             I=MIN(I, N_CHM_Chamber);  " to avoid i > n_chm_$chamber "
             IRNEW=IRSTART_Chamber +I-1;
          ]
          ELSE[ IRNEW=IRL-1;  ]
          RETURN;
      ]  " end of the check for the inner radius case "
      IF( IIR~=3) [ " when iir =3, no need to check the outer "
          CRITERIOR_IR=R0SQ-RCYS2_Chamber(1,IIR+1);
          IF(CRITERIOR_IR>0.0)[  " out side the outer radius "
              USTEP=MIN(USTEP,SHIFT_COUNT_Chamber(IR_Chamber));
              IRNEW=IRL+1;
              RETURN;
          ]       " end of the warning message block.
      ]        " end of the outer radius check
      " end of the   r direction error block "

      " do the howfar job for this case "
      "=====================================
      CUT_COE=CUTCOE_Chamber(R0SQ, RCYS2_Chamber(1,IIR));
      IF( ( CUT_COE>0.0 & CUT_COE < STEP_UNIT )
         |( CUT_COE=STEP_UNIT & IU_D=0 ) )[  " hits the inner wall"
         ; $GEO_SHIFT_2_(CUT_COE, STEP_UNIT);
          USTEP=CUT_COE;
          IF(IIR=1)[ "figure out the layer # the particle will go into."
             DO I=1, N_CHM_Chamber[
                 IF( Z(NP)+USTEP*W(NP)<Z_Chamber(I+1) ) [ EXIT; ]
             ]
             I=MIN(I, N_CHM_Chamber);  " to avoid i > n_chm_$chamber "
             IRNEW=IRSTART_Chamber+I-1;
          ]
          ELSE[ IRNEW=IRL-1; ]
          RETURN;
      ]
      IF(CUT_COE<=0.0 & IIR~=3)[   " IT IS NECESSARY TO DO OUTER CSAE"
          CUT_COE=CUTCOE_Chamber( R0SQ, RCYS2_Chamber(1,IIR+1));
          IF( ( CUT_COE>0.0 & CUT_COE < STEP_UNIT )
             |( CUT_COE=STEP_UNIT & IU_D=0 ) )[   " hits the outer wall"
             ;$GEO_SHIFT_2_(CUT_COE, STEP_UNIT);
             USTEP=CUT_COE;
             IRNEW=IRL+1;
             RETURN;
          ]
      ]     " not hits the side wall at all"

      " now check to see whether hitting the bottom  "
      "=============================================="
      IF(IU_D=1)[         " hits the TOP of this layer"
          ;$GEO_SHIFT_1_(STEP_UNIT);
          USTEP=STEP_UNIT;
          IF(N_TOP_Chamber=0 )[ " the first layer of the CM, no top part "
             IF(N_GAP_Chamber=0)[ CALL WHERE_AM_I(ICM_Chamber,-1); ]
              " no air gap "
             ELSE[ IRNEW=IREND_Chamber; ]
          ]
          ELSE[ " particle will go into the last layer of the top part  "
            RF2_Chamber= (X(NP)+USTEP*U(NP))**2
                        +(Y(NP)+USTEP*V(NP))**2;
            IF(RF2_Chamber<RCYS2_Chamber(N_CHM_Chamber+N_TOP_Chamber,1))
              [IRNEW=IRSTART_Chamber+N_CHM_Chamber+3+
                      2*(N_TOP_Chamber-1); ]
            ELSE[IRNEW=IRSTART_Chamber+N_CHM_Chamber+3+
                      2*(N_TOP_Chamber-1)+1; ]
          ]
          RETURN;
      ]    " end of the case with  ustep cutoff in z direction "
      ELSE [ RETURN; ]       " no cut off at all "
   ]        " end of the w<0.0 case "

   ELSE[ "  w=0 case "
      CUT_COE=CUTCOE_Chamber( R0SQ, RCYS2_Chamber(1,IIR));"inner wall first"
      IF(  CUT_COE>0.0 & CUT_COE <= USTEP )[  " hits the inner wall"
          ;$GEO_SHIFT_1_(CUT_COE);
          USTEP=CUT_COE;
          IF(IIR=1)[
             DO I=1, N_CHM_Chamber
             " figure out the layer # the particle will go into."
               [ IF( Z(NP)+USTEP*W(NP)<Z_Chamber(I+1) ) [ EXIT; ] ]
             I=MIN(I, N_CHM_Chamber);  " to avoid i > n_chm_$chamber "
             IRNEW=IRSTART_Chamber+I-1;
          ]
          ELSE[ IRNEW=IRL-1; ]
      ]
      IF(CUT_COE<=0.0 & IIR~=3)[ " IT IS NECESSARY TO DO OUTER CSAE"
          CUT_COE=CUTCOE_Chamber( R0SQ, RCYS2_Chamber(1,IIR+1));
          IF(  CUT_COE>0.0 & CUT_COE <= USTEP )[   " hits the outer wall"
             ;$GEO_SHIFT_1_(CUT_COE);
             USTEP=CUT_COE;
             IRNEW=IRL+1;
          ]
      ]
      RETURN;     " not hits the side wall at all"
   ]   " end of the w=0 case "
]      " end of the side of the ionchamber part"

" now do the top part of this CM "
"================================"
ELSEIF(IR_Chamber<=N_CHM_Chamber+3+2*N_TOP_Chamber )[ " top layers "
   IIR=IR_Chamber-(N_CHM_Chamber+3);
   IIR=MOD(IIR, 2);" iir=1, inside region, =0, outside region "
   IF(W(NP) > 0.0)   ["particle going forward"
      DIST = (Z_Chamber(LAYER+1) - Z(NP))/W(NP); "distance to back of CM"
      IF(DIST>USTEP) [ STEP_UNIT=USTEP; IU_D=0; ]
      ELSE [ STEP_UNIT=DIST; IU_D=1; ]
      IF(DIST <=0.0)[
          USTEP=0.0;
          IF(LAYER=N_CHM_Chamber+N_TOP_Chamber )["the end of the top layer"
              IF( R0SQ<RCYS2_Chamber(1,1) ) [  IRNEW =IRSTART_Chamber;]
              ELSEIF( R0SQ<RCYS2_Chamber(1,2) )
                [IRNEW =IRSTART_Chamber+N_CHM_Chamber;]
              ELSEIF( R0SQ<RCYS2_Chamber(1,3) )
                [IRNEW =IRSTART_Chamber+N_CHM_Chamber+1;]
              ELSE[ IRNEW =IRSTART_Chamber+N_CHM_Chamber+2;]
          ]
          ELSE[
              IF( R0SQ< RCYS2_Chamber(LAYER+1,1) )[
                 IRNEW=IRSTART_Chamber+N_CHM_Chamber+3
                       +2*(LAYER-N_CHM_Chamber);
              ]
              ELSE[
                 IRNEW=IRSTART_Chamber+N_CHM_Chamber+3
                      +2*(LAYER-N_CHM_Chamber)+1;
              ]
          ]
          RETURN;
      ]
      " end of the double check if a particle is out of the CM in z direction

      " now check the r direction "
      "============================"
      CRITERIOR_IR=R0SQ-RCYS2_Chamber(LAYER, 1);
      IF(CRITERIOR_IR>0.0 & IIR=1)[  " out OF the  r "
         USTEP=MIN( USTEP, SHIFT_COUNT_Chamber(IR_Chamber) );
         IRNEW=IRL+1;
         RETURN;
      ]
      ELSEIF(CRITERIOR_IR<0.0 & IIR=0)[  " inside the outer radius "
         USTEP=MIN( USTEP, SHIFT_COUNT_Chamber(IR_Chamber) );
         IRNEW=IRL-1;
         RETURN;
      ]      " end of the warnning message block."


      " do the howfar job for this case "
      "=====================================
      RF2_Chamber=(X(NP)+STEP_UNIT*U(NP))**2
                        +(Y(NP)+STEP_UNIT*V(NP))**2;
      IF( ( RF2_Chamber > RCYS2_Chamber(LAYER,1) & IIR=1 ) | IIR=0 )
        [CUT_COE=CUTCOE_Chamber( R0SQ, RCYS2_Chamber(LAYER,1)); ]
      IF( ( CUT_COE>0.0 & CUT_COE < STEP_UNIT )
         |( CUT_COE=STEP_UNIT & IU_D=0 ) )[" hits the inner wall"
          ;$GEO_SHIFT_2_(CUT_COE, STEP_UNIT);
          USTEP=CUT_COE;
          IF(IIR=1)[IRNEW=IRL+1; " from in to out "]
          ELSE[ IRNEW=IRL-1; ]
          RETURN;
      ]

      " now check to see whether hitting the bottom  "
      ELSEIF(IU_D=1) [" hits the bottom of this layer"
          ;$GEO_SHIFT_1_(STEP_UNIT);
          USTEP=STEP_UNIT;
          RF2_Chamber= (X(NP)+USTEP*U(NP))**2
                   +(Y(NP)+USTEP*V(NP))**2;
          IF(LAYER=N_CHM_Chamber+N_TOP_Chamber)[ " last layer of the top"
              " particle will go into the first layer of the chamber  "
              IF( RF2_Chamber< RCYS2_Chamber(1,1) )
                [ IRNEW=IRSTART_Chamber;]
              ELSEIF ( RF2_Chamber< RCYS2_Chamber(1,2) )
                [ IRNEW=IRSTART_Chamber+N_CHM_Chamber;]
              ELSEIF ( RF2_Chamber< RCYS2_Chamber(1,3) )
                [ IRNEW=IRSTART_Chamber+N_CHM_Chamber+1;]
              ELSE[ IRNEW=IRSTART_Chamber+N_CHM_Chamber+2; ]
          ]     " end of the last layer of the top case "
          ELSE[
              IF( RF2_Chamber< RCYS2_Chamber(LAYER+1,1) )[
                 IRNEW=IRSTART_Chamber+N_CHM_Chamber+3
                       +2*(LAYER-N_CHM_Chamber);
              ]
              ELSE [
                 IRNEW=IRSTART_Chamber+N_CHM_Chamber+3
                      +2*(LAYER-N_CHM_Chamber)+1;
              ]
          ]
          RETURN;
      ]    " end of the case with  ustep cutoff in z direction "
      ELSE [ RETURN; ]       " no cut off at all "
   ]                   " end of the w> 0 case "

   " now do the w<0 case "
   "====================="

   ELSEIF(W(NP) < 0.0)[     "particle going backward"
      "  the top layer in the top part "
      IF(LAYER=N_CHM_Chamber+1)[ DIST=( ZMIN_Chamber-Z(NP) )/W(NP); ]
      ELSE [ DIST = (Z_Chamber(LAYER) - Z(NP))/W(NP); ]
      "distance to back layer "
      IF(DIST>USTEP) [ STEP_UNIT=USTEP; IU_D=0; ]
      ELSE [ STEP_UNIT=DIST; IU_D=1; ]
      IF(DIST <= 0.0) [
          USTEP=0.0;
          IF(LAYER=N_CHM_Chamber +1) [  " the first layer of the CM "
              IF(N_GAP_Chamber = 1)[ IRNEW =IREND_Chamber;]
              " has air gap "
              ELSE [ USTEP=1.E-16; CALL WHERE_AM_I(ICM_Chamber,-1); ]
                                            " no air gap "
          ]
          ELSE [
             IF(R0SQ<RCYS2_Chamber(LAYER-1,1) )[
                 IRNEW=IRSTART_Chamber+N_CHM_Chamber+3
                       +2*(LAYER-2-N_CHM_Chamber);
             ]
             ELSE[
                 IRNEW=IRSTART_Chamber+N_CHM_Chamber+3
                       +2*(LAYER-2-N_CHM_Chamber)+1;
             ]
          ]
          RETURN;
      ]
      "  end of the double check if a particle is out of the top layer in z"

      " now check the r direction "
      "============================"
      CRITERIOR_IR=R0SQ-RCYS2_Chamber(LAYER, 1);
      IF(CRITERIOR_IR>0.0 & IIR=1) [ "supposed to be in outside region"
         USTEP=MIN( USTEP, SHIFT_COUNT_Chamber(IR_Chamber) );
         IRNEW=IRL+1;
         RETURN;
      ]
      ELSEIF(CRITERIOR_IR<0.0 & IIR=0)["supposed to be in inside region"
         USTEP=MIN( USTEP, SHIFT_COUNT_Chamber(IR_Chamber) );
         IRNEW=IRL-1;
         RETURN;
      ]      " end of the warnning message block."

      " do the howfar job for this case "
      "=====================================
      RF2_Chamber=(X(NP)+STEP_UNIT*U(NP))**2
                        +(Y(NP)+STEP_UNIT*V(NP))**2;
      IF( ( RF2_Chamber > RCYS2_Chamber(LAYER,1) & IIR=1 ) | IIR=0 )
        [CUT_COE=CUTCOE_Chamber(R0SQ, RCYS2_Chamber(LAYER,1)); ]
      IF( ( CUT_COE>0.0 & CUT_COE < STEP_UNIT )
         |( CUT_COE=STEP_UNIT & IU_D=0 ) ) [" hits the side  wall"
          ;$GEO_SHIFT_2_(CUT_COE, STEP_UNIT);
          USTEP=CUT_COE;
          IF(IIR=1)  [  IRNEW=IRL+1; " from in to out "]
          ELSE[ IRNEW=IRL-1; ]
          RETURN;
      ]

      " now check to see whether hitting the top  "
      "==========================================="
      ELSEIF(IU_D=1) [" hits the bottom of this layer"
          ;$GEO_SHIFT_1_(STEP_UNIT);
          USTEP=STEP_UNIT;
          RF2_Chamber= (X(NP)+USTEP*U(NP))**2
                   +(Y(NP)+USTEP*V(NP))**2;
          IF(LAYER=N_CHM_Chamber+1) [ " the first layer of the top"
              " particle will go into the air gap or out of the CM  "
              IF( N_GAP_Chamber=1 ) [ IRNEW=IREND_Chamber;]
              ELSE[ CALL WHERE_AM_I(ICM_Chamber, -1); ]
          ]     " end of the last layer of the top case "
          ELSE[         " still inside the top part "
              IF( RF2_Chamber< RCYS2_Chamber(LAYER-1,1) )[
                 IRNEW=IRSTART_Chamber+N_CHM_Chamber+3
                       +2*(LAYER-N_CHM_Chamber-2);
              ]
              ELSE[
                 IRNEW=IRSTART_Chamber+N_CHM_Chamber+3
                      +2*(LAYER-N_CHM_Chamber-2)+1;
              ]
          ]
          RETURN;
      ]    " end of the case with  ustep cutoff in z direction "
      ELSE [ RETURN; ]       " no cut off at all "
  ]   " end of the w< 0.0 case "

  " now do  the w=0.0 case "
  "========================"
   ELSE [
      CUT_COE=CUTCOE_Chamber(R0SQ, RCYS2_Chamber(LAYER,1));
      IF(  CUT_COE>0.0 & CUT_COE <= USTEP )  [ " hits the  wall"
          ;$GEO_SHIFT_1_(CUT_COE);
          USTEP=CUT_COE;
          IF(IIR=1)[ IRNEW=IRL+1;]
          ELSE[ IRNEW=IRL-1; ]
      ]
      RETURN;
   ]    " end of the w=0.0 case "
]      " end of the top part "

" now do the bottom part "
"========================"
ELSEIF(IR_Chamber<=N_CHM_Chamber+3+2*N_TOP_Chamber+2*N_BOT_Chamber )[
   IIR=IR_Chamber-(N_CHM_Chamber+3);
   IIR=MOD(IIR, 2);      " iir=1, inside , iir=2, out side region "
   IF(W(NP) > 0.0)[        "particle going forward"
      DIST = (Z_Chamber(LAYER+1) - Z(NP))/W(NP); "distance to back of CM"
      IF(DIST>USTEP) [ STEP_UNIT=USTEP; IU_D=0; ]
      ELSE [ STEP_UNIT=DIST; IU_D=1; ]
      IF(DIST <=0.0) [
          USTEP=0.0;
          IF(LAYER=N_CHM_Chamber+N_TOP_Chamber+N_BOT_Chamber)
             [  USTEP=1.E-16; CALL WHERE_AM_I(ICM_Chamber, 1); ]
          " the end layer of the  bottom part and the CM"
          ELSE[
              IF( R0SQ< RCYS2_Chamber(LAYER+1,1) )[
                 IRNEW=IRSTART_Chamber+N_CHM_Chamber+3
                        +2*(LAYER-N_CHM_Chamber);
              ]
              ELSE[
                 IRNEW=IRSTART_Chamber+N_CHM_Chamber+3
                        +2*(LAYER-N_CHM_Chamber)+1;
              ]
          ]
          RETURN;
      ]
      " end of the double check if a particle is out of region in z direction"

      " now check the r direction "
      "============================="
      CRITERIOR_IR=R0SQ-RCYS2_Chamber(LAYER, 1);
      IF(CRITERIOR_IR>0.0 & IIR=1)["supposed to be in the outer region"
         USTEP=MIN( USTEP, SHIFT_COUNT_Chamber(IR_Chamber) );
         IRNEW=IRL+1;
         RETURN;
      ]
      ELSEIF(CRITERIOR_IR<0.0 & IIR=0)["supposed to be in inside region"
         USTEP=MIN( USTEP, SHIFT_COUNT_Chamber(IR_Chamber) );
         IRNEW=IRL-1;
         RETURN;
      ]      " end of the warnning message block."

      " do the howfar job for this case "
      "=====================================
      RF2_Chamber=(X(NP)+STEP_UNIT*U(NP))**2
                        +(Y(NP)+STEP_UNIT*V(NP))**2;
      IF( ( RF2_Chamber > RCYS2_Chamber(LAYER,1) & IIR=1 ) | IIR=0 )
        [ CUT_COE=CUTCOE_Chamber( R0SQ, RCYS2_Chamber(LAYER,1)); ]
      IF( ( CUT_COE>0.0 & CUT_COE < STEP_UNIT )
         |( CUT_COE=STEP_UNIT & IU_D=0 ) )[" hits the side wall"
          ;$GEO_SHIFT_2_(CUT_COE, STEP_UNIT);
          USTEP=CUT_COE;
          IF(IIR=1)[  IRNEW=IRL+1; " from in to out "]
          ELSE[ IRNEW=IRL-1; ]
          RETURN;
      ]    " end of the hitting the side wall case "

      " now check to see whether hitting the bottom  "
      "=============================================="
      ELSEIF(IU_D=1) [        " hits the bottom of this layer"
          ;$GEO_SHIFT_1_(STEP_UNIT);
          USTEP=STEP_UNIT;
          RF2_Chamber= (X(NP)+USTEP*U(NP))**2
                   +(Y(NP)+USTEP*V(NP))**2;
          IF(LAYER=N_CHM_Chamber+N_TOP_Chamber+N_BOT_Chamber )
             [  CALL WHERE_AM_I(ICM_Chamber, 1) ; ]
          "last layer of the CM"
          ELSE [
              IF( RF2_Chamber< RCYS2_Chamber(LAYER+1,1) ) [
                 IRNEW=IRSTART_Chamber+N_CHM_Chamber+3
                       +2*(LAYER-N_CHM_Chamber);
              ]
              ELSE[
                 IRNEW=IRSTART_Chamber+N_CHM_Chamber+3
                      +2*(LAYER-N_CHM_Chamber)+1;
              ]
          ]
          RETURN;
      ]    " end of the case with  ustep cutoff in z direction "
      ELSE [ RETURN; ]       " no cut off at all "
   ]   " end of the w>0.0 case "
       "========================"

   ELSEIF(W(NP) < 0.0)[       "particle going backward"
      IF(LAYER=N_CHM_Chamber+N_TOP_Chamber+1)
        [ DIST=( Z_Chamber(N_CHM_Chamber+1)-Z(NP) )/W(NP); ]
      "  the top layer in the bottom part "
      ELSE [ DIST = (Z_Chamber(LAYER-1+1) - Z(NP))/W(NP); ]
            "distance to back layer "
      IF(DIST>USTEP) [ STEP_UNIT=USTEP; IU_D=0; ]
      ELSE [ STEP_UNIT=DIST; IU_D=1; ]
      IF(DIST <= 0.0)[
          USTEP=0.0;
          IF( LAYER=N_CHM_Chamber+N_TOP_Chamber+1 ) [
              " the first layer of the bottom "
              IF( R0SQ<RCYS2_Chamber(1,1) )
                [  IRNEW =IRSTART_Chamber+N_CHM_Chamber-1;]
              " the last layer of the cham"
              ELSEIF( R0SQ<RCYS2_Chamber(1,2) )
                [IRNEW =IRSTART_Chamber+N_CHM_Chamber;]
              " the side wall region"
              ELSEIF( R0SQ<RCYS2_Chamber(1,3) )
                [IRNEW =IRSTART_Chamber+N_CHM_Chamber+1;]
              " the side gap region "
              ELSE[ IRNEW =IRSTART_Chamber+N_CHM_Chamber+2;]
              " outtest container region "
          ]
          ELSE[
             IF(R0SQ<RCYS2_Chamber(LAYER-1,1) )[
                 IRNEW=IRSTART_Chamber+N_CHM_Chamber+3
                       +2*(LAYER-2-N_CHM_Chamber);
             ]
             ELSE [
                 IRNEW=IRSTART_Chamber+N_CHM_Chamber+3
                       +2*(LAYER-2-N_CHM_Chamber)+1;
             ]
          ]
          RETURN;
      ] "end of the double check if a particle is out of the region in z"

      " now check the r direction "
      "============================"
      CRITERIOR_IR=R0SQ-RCYS2_Chamber(LAYER, 1);
      IF(CRITERIOR_IR>0.0 & IIR=1)  [" supposed to be outside  "
         USTEP=MIN( USTEP, SHIFT_COUNT_Chamber(IR_Chamber) );
         IRNEW=IRL+1;
         RETURN;
      ]
      ELSEIF(CRITERIOR_IR<0.0 & IIR=0) [ " supposed to be inside "
         USTEP=MIN( USTEP, SHIFT_COUNT_Chamber(IR_Chamber) );
         IRNEW=IRL-1;
         RETURN;
      ]      " end of the warnning message block."

      " do the howfar job for this case "
      "=====================================
      RF2_Chamber=(X(NP)+STEP_UNIT*U(NP))**2
                        +(Y(NP)+STEP_UNIT*V(NP))**2;
      IF( ( RF2_Chamber > RCYS2_Chamber(LAYER,1) & IIR=1 ) | IIR=0 )
        [CUT_COE=CUTCOE_Chamber( R0SQ, RCYS2_Chamber(LAYER,1)); ]
      IF( ( CUT_COE>0.0 & CUT_COE < STEP_UNIT )
         |( CUT_COE=STEP_UNIT & IU_D=0 ) ) [ " hits the inner wall"
          ;$GEO_SHIFT_2_(CUT_COE, STEP_UNIT);
          USTEP=CUT_COE;
          IF(IIR=1)[  IRNEW=IRL+1; " from in to out "]
          ELSE[ IRNEW=IRL-1; ]
          RETURN;
      ]

      " now check to see whether hitting the top  "
      ELSEIF(IU_D=1) [ " hits the bottom of this layer"
          ;$GEO_SHIFT_1_(STEP_UNIT);
          USTEP=STEP_UNIT;
          RF2_Chamber= (X(NP)+USTEP*U(NP))**2
                   +(Y(NP)+USTEP*V(NP))**2;
          IF(LAYER=N_CHM_Chamber+N_TOP_Chamber+1)[
              " the first layer of the bottom"
              " particle will go into the chamber   "
              IF( RF2_Chamber<RCYS2_Chamber(1,1) )
                [IRNEW =IRSTART_Chamber+N_CHM_Chamber-1;]
              "the last layer of the cham"
              ELSEIF( RF2_Chamber<RCYS2_Chamber(1,2) )
                [IRNEW =IRSTART_Chamber+N_CHM_Chamber;]
               " the side wall region"
              ELSEIF( RF2_Chamber<RCYS2_Chamber(1,3) )
                [IRNEW =IRSTART_Chamber+N_CHM_Chamber+1;]
              " the side gap region "
              ELSE[ IRNEW =IRSTART_Chamber+N_CHM_Chamber+2;]
              "outtest container region "
          ]     " end of the last layer of the bottom case "
          ELSE[  " still inside the bottom part "
              IF( RF2_Chamber< RCYS2_Chamber(LAYER-1,1))[
                 IRNEW=IRSTART_Chamber+N_CHM_Chamber+3
                       +2*(LAYER-N_CHM_Chamber-2);
              ]
              ELSE[
                 IRNEW=IRSTART_Chamber+N_CHM_Chamber+3
                      +2*(LAYER-N_CHM_Chamber-2)+1;
              ]
          ]
          RETURN;
      ]    " end of the case with  ustep cutoff in z direction "
      ELSE [ RETURN; ]       " no cut off at all "
   ]   " end of the w< 0.0 case "

   ELSE[ " now do  the w=0.0 case "
         "========================"
      CUT_COE=CUTCOE_Chamber( R0SQ, RCYS2_Chamber(LAYER,1));
      IF(  CUT_COE>0.0 & CUT_COE <= USTEP )  [" hits the  wall"
         ; $GEO_SHIFT_1_(CUT_COE);
          USTEP=CUT_COE;
          IF(IIR=1)
            [ IRNEW=IRL+1;]
          ELSE[ IRNEW=IRL-1; ]
      ]
      RETURN;
   ]    " end of the w=0.0 case "

]   " end of the bottom part "
       "======================="



"   outside of CM, something is wrong
"   =================================
"
ELSE ["something is wrong"
   OUTPUT IR(NP)-IRSTART_Chamber+1,IR(NP),ICM_Chamber,
          IR_start_CM(ICM_Chamber);
      (//' ************'//' HOWFAR-CHAMBER error'/
         '    Region, local, absolute =',2I5/
         '    CM number=',I5,' start region =',I5/
         ' *********'//);
   STOP;
] "end of IF statement"
;
"   end of HOWFAR_Chamber
"   ===================
"
END; "End of subroutine HOWFAR_Chamber"

%E "Start of miscellaneous functions and subroutines"

;$REAL FUNCTION SHIFT_COUNT_Chamber(IDUMP);
"This function is used in finding the correct region. If a particle is
"in a wrong region we change the region # and shift the particle by 1.0E-5.
"If we still cannot find the correct region after 20 shifts we terminate the
"particle. If 10000 particles have been discarded we quit! However, one
"can carry on running this simulation using the BEAM re-start feature if he
"considers the effect of discarding these particles would be negligible
"for a large number of histories run.

;IMPLICIT NONE;

;COMIN/STACK, EPCONT,CM_Chamber,SCORE,EGS-IO/;

$LONG_INT IHSTRYOLD;
INTEGER IDUMP, COUNT1, COUNT;
$REAL XYZNEW,XYZOLD,xyzoldsave;
save xyzold,count1,count;
DATA count1,count/0,0/;
XYZNEW=X(NP)+Y(NP)+Z(NP);
IF( XYZNEW.NE.XYZOLD.OR.IHSTRY.NE.IHSTRYOLD)[ COUNT1=0;]
     " This fudge is used just to get around a numerical accuracy "
     " problem.  It is OK unless you receive the error message in "
     " the next if statement a lot of times.  "
     " IHSTRY check added to protect against incrementing COUNT1"
     " when phase space source is incident right on boundary of"
     " chamber and particles are recycled"
ELSE[
    COUNT1=COUNT1+1;
    IF( COUNT1=20 ) [
        OUTPUT IDUMP,X(NP),Y(NP),X(NP)**2+Y(NP)**2,Z(NP),U(NP),
        V(NP),W(NP),E(NP),IQ(NP);
        (/' WARNING FROM CHAMBER REGION ', I5,': TAKEN USTEP = 1.0E-5 ',
         ' FOR 20 TIMES, STILL CANNOT FIND ITS REGION'/
         ' THE PARTICLE HAS BEEN DISCARDED.'/
         ' OUTPUT: x,y,r**2,z,u,v,w,E,IQ '/
        8F11.6,I3);
        IDISC=1;COUNT1=0;
        SHIFT_COUNT_Chamber=0.0;
        COUNT=COUNT+1;
        IF( COUNT >10000 )[
          OUTPUT;(//' ChAMBER: 10000 PARTICLES HAVE BEEN DISCARDED DUE TO'/
                     ' WRONG REGION #/BOUNDARY CROSSING ERROR. STOP!!!'//);
          STOP;
        ]
    ]
]
XYZOLD=XYZNEW;
IHSTRYOLD=IHSTRY;

SHIFT_COUNT_Chamber=1.0E-5;

RETURN;
END;

"******************************************************************

SUBROUTINE WARN_MES_Chamber(IDUMP, DUMP1, DUMP2);
IMPLICIT NONE;
COMIN/EGS-IO/;
INTEGER IDUMP, COUNT;
$REAL DUMP1, DUMP2;

    OUTPUT IDUMP, DUMP1, DUMP2; (/' WARNING MESSAGE: ' , I5, 2F15.8);
    COUNT=COUNT+1;
RETURN;
END;

"******************************************************************
;

$REAL FUNCTION CUTCOE_Chamber( DUMP1, DUMP2 );
IMPLICIT NONE;

$REAL  DUMP1, DUMP2;
;COMIN/STACK, CM_Chamber/;

$REAL A, B, B2, C, TEMP, CUT_COE1, CUT_COE2,one;
parameter (one=1);

A=U(NP)**2+V(NP)**2;
B=X(NP)*U(NP)+Y(NP)*V(NP);
B2=B**2;
C=DUMP1-DUMP2;
IF(A=0.0)[
     IF(B~=0.0)[CUTCOE_Chamber=-0.5*C/B;]
     ELSE[ CUTCOE_Chamber=-1.0E5; ]
]
ELSE[
    TEMP=B2-A*C;
    IF(TEMP>=0.0)[
       TEMP=-(B+SIGN(one,B)*SQRT(TEMP) );
       CUT_COE1=TEMP/A;
       CUT_COE2=C/TEMP;
       IF( CUT_COE1>0.0 & CUT_COE2>0.0)
       [CUTCOE_Chamber=MIN(CUT_COE1,CUT_COE2); ]
       ELSE[ CUTCOE_Chamber=MAX(CUT_COE1,CUT_COE2); ]
    ]
    ELSE [ CUTCOE_Chamber=-1.0E5; ]
]

RETURN;
END; "End of miscellaneous subroutines and functions"

%E    "Start of subroutine WHERE_AM_I_Chamber"
"******************************************************************************

"******************************************************************************
"
"                          Subroutine WHERE_AM_I_Chamber
"                          ***************************
"
" WHERE_AM_I routine for a stacked right cylinder slabs.
"
" WHERE_AM_I_Chamber determines the new region # when a particle traverses
" a component module boundary.  The scheme is as follows:
"
"      Whenever a particle is to be transported to a component module
"      boundary in HOWFAR, the subroutine WHERE_AM_I is called.  The
"      current component module and particle direction (backwards or
"      forwards) are transferred to WHERE_AM_I in the CALL statement.
"      WHERE_AM_I determines which component module the particle is
"      about to enter and calls the WHERE_AM_I_Chamber subroutine for
"      that component module, transferring the particle direction.
"      The region number that the particle is about to enter is
"      determined in WHERE_AM_I_Chamber from the knowledge of which
"      surface the particle is entering through (front if IDIR=1,
"      back if IDIR=-1) and the (X,Y) coordinates of the particle.
"      The current particle being transported is NP (in /STACK/).
"
"******************************************************************************

;SUBROUTINE WHERE_AM_I_Chamber(IDIR);


;IMPLICIT NONE;

;COMIN/CMs,CM_Chamber,EPCONT,STACK/;

"T>
"T>**************************************
"T>TYPE DECLARATIONS FOR WHERE_AM_I_Chamber
"T>**************************************
"T>

INTEGER IDIR;  "T>direction of particle, +1=forward, -1=backward
$REAL XBDY_Chamber,YBDY_Chamber,RBDY2_Chamber;
XBDY_Chamber = X(NP) + U(NP)*USTEP;
YBDY_Chamber = Y(NP) + V(NP)*USTEP;
RBDY2_Chamber = XBDY_Chamber*XBDY_Chamber + YBDY_Chamber*YBDY_Chamber;
IF((IRSTART_Chamber = 2) & (IDIR =1))    " this is first CM and from front
  [ RBDY2_Chamber = X(NP)*X(NP) + Y(NP)*Y(NP); ]

IF (IDIR=1) ["particle entering this CM through front face (upstream)
   IF(N_GAP_Chamber = 0) [        "no air gap this CM"
      IF(N_TOP_Chamber=0)    [" no top layers above the ionchamber.
         IF(RBDY2_Chamber < RCYS2_Chamber(1,1))
           [ IRNEW = IRSTART_Chamber;   ]     " center
         ELSEIF(RBDY2_Chamber < RCYS2_Chamber(1, 2))
           [   IRNEW = IRSTART_Chamber + N_CHM_Chamber;]  " side wall
         ELSEIF(RBDY2_Chamber < RCYS2_Chamber(1, 3))
           [IRNEW = IRSTART_Chamber + N_CHM_Chamber+1; ]     " side gap
         ELSE[ IRNEW = IRSTART_Chamber +N_CHM_Chamber+2 ; ] " container wall
      ]
      ELSE["   has top layer."
         IF(RBDY2_Chamber < RCYS2_Chamber(N_CHM_Chamber+1,1))
           [ IRNEW = IRSTART_Chamber + N_CHM_Chamber +3; ]
         ELSE[ IRNEW = IRSTART_Chamber + N_CHM_Chamber +3 +1; ]
      ]
   ]
   ELSE [  IRNEW = IREND_Chamber; ]"this CM has an air gap at the front"
]  " end of idir=1 case
ELSE ["particle entering this CM through back face (downstream)
   IF( N_BOT_Chamber=0 )[ " no bottom layers below the chamber
      IF(RBDY2_Chamber < RCYS2_Chamber(1,1))
        [ IRNEW = IRSTART_Chamber-1+N_CHM_Chamber;   ]     " center
      ELSEIF(RBDY2_Chamber < RCYS2_Chamber(1, 2))
        [ IRNEW = IRSTART_Chamber+N_CHM_Chamber ;]  " side wall
      ELSEIF(RBDY2_Chamber < RCYS2_Chamber(1, 3))
        [IRNEW = IRSTART_Chamber +N_CHM_Chamber+ 1; ]     " side gap
      ELSE[ IRNEW = IRSTART_Chamber+N_CHM_Chamber + 2; ] " container wall
   ]
   ELSE["   has bottom layer.
      IF(RBDY2_Chamber
       < RCYS2_Chamber(N_CHM_Chamber+N_TOP_Chamber+N_BOT_Chamber,1))
        [ IRNEW = IREND_Chamber-N_GAP_Chamber-1; ]
      ELSE[ IRNEW =IREND_Chamber-N_GAP_Chamber; ]
   ]
]

RETURN;

END; "End of subroutine WHERE_AM_I_Chamber"

%E   "Start of subroutine INPUT_Chamber"
"*******************************************************************************
"
"                           Subroutine INPUT_Chamber
"                           **********************
"
"  A CM input subroutine for a cylindrical planar geometry.
"
"  It must fill all parameters in COMMON/CMs/ associated with this CM.
"
"  Routine prints error messages on unit 6 for
"      format error on input
"      end of file hit
"      error in logic of input file
"
"  The format of the input is presented in the section `INPUT FROM UNIT 5' in
"  the above documentation.
"
"*******************************************************************************

;SUBROUTINE INPUT_Chamber;


;IMPLICIT NONE;
;COMIN/ BOUNDS,CMs,CM_Chamber,GEOM,IO_INFO,MEDIA,MISC,SCORE,USER,EGS-IO/;
"T>
"T>*********************************
"T>TYPE DECLARATIONS FOR INPUT_Chamber
"T>*********************************
"T>

$REAL   ZTHICK_Chamber, "T>total thickness of CM
        ZTHICK,          "T>temp. variable used to store layer thicknesses
        THICK1, THICK2, THICK3, "T>temp. storage of total thicknesses
        Zminthick,       "T>used to calc. min thickness for range rejection
        RCYSTEMP($MAX_N_Chamber), "T>used for inputting top part
        ZTEMP($MAX_N_Chamber),    "T>used for inputting top part
        ECUTTEMP($MXREG),          "T>used for inputting top part
        PCUTTEMP($MXREG);          "T>used for inputting top part

INTEGER I,IM,J,JM, II, III,        "T>DO loop indeces
        MRNGE,          "T> local variable = 1 to enable ECUTRR calculation
                        "T> otherwise ECUTRR is not calculated
        IRA,            "T>Absolute region number
        MED_FLAG,       "T>flag used by media-sort macro $MED_INPUT
        MED_INDEX,      "T>medium index, set after medium sort by $MED_INPUT
        N_CHAM,         "T>used to keep track of number of layers in chamber
        DOSE_ZONETEMP($MXREG),  "T>used for inputting top part
        IREGION_TO_BITTEMP($MXREG), "T>used for inputting top part
        MEDTEMP($MXREG),          "T>used for inputting top part
        IRM;                      "T>used for inputting top part
"
"  initialize parameters
"  =====================
"
ICM_Chamber = ICM;     "CM index for this component module
IRSTART_Chamber = IR_start_CM(ICM_Chamber);
              "Index of first region in this CM,
              "set by previous CM or in MAIN if ICM=1
IERR_GEOM(ICM_Chamber) = 0; "Geometry-checking flag, 0 if no error detected

DO I=1,NDOSE_ZONE[ZPLOTCHM(I)=-1000.;"set default values"]

"
"  get the title line
"  ==================
"
OUTPUT;(/' Chamber  (CHAMBER)');
OUTPUT RMAX_CM(ICM);
     (/' This component is an ion chamber or for scoring dose components'/
       '       Outer boundary is a cylinder of radius',F10.4,' cm'
       //' TITLE: ',$);
;MINPUT (Chamber) TITLE_Chamber;(60A1);
OUTPUT TITLE_Chamber;(' ',60A1);

IF (ICM_Chamber = 1)[OUTPUT Z_min_CM(1);
   (' This is first component module -- starts at',F12.4,
                                          ' cm from ref plane(z=0)');
]
ELSE [OUTPUT Z_min_CM(ICM_Chamber);
   (' This CM, including air gap, starts at end of previous CM at', F10.5,
    ' cm');
]
"
" get distance from reference plane, z=0"
"   =============================
OUTPUT;
(/' Distance from front of Chamber(not air gap) to ref plane(z=0):',$);
;MINPUT (Chamber) ZMIN_Chamber;(F15.0);
OUTPUT ZMIN_Chamber;(F11.5);

IF(ZMIN_Chamber < Z_min_CM(ICM_Chamber))[
   IF(ICM_Chamber=1)[
      OUTPUT ICM_Chamber, ZMIN_Chamber,Z_min_CM(ICM_Chamber);
       (//' ***WARNING IN CM ',I4,' (CHAMBER):'/
          ' Z_min_CM(1) > distance to top of chamber'/
          ' Z_min_CM(1) reset to ',F8.5,' cm from ',F8.5,' cm '//);
          WRITE(IOUTLIST,100)
        ICM_Chamber, ZMIN_Chamber,Z_min_CM(ICM_Chamber);
     100 FORMAT(//' ***WARNING IN CM ',I4,' (CHAMBER):'/
          ' Z_min_CM(1) > distance to top of chamber'/
          ' Z_min_CM(1) reset to ',F8.5,' cm from ',F8.5,' cm '//);
       Z_min_CM(ICM_Chamber)=ZMIN_Chamber;
   ]
   ELSE[
     OUTPUT ICM_Chamber;
       (//'***ERROR IN CM ',I4,' (CHAMBER):'/
          'Overlaps with previous CM'//);
       IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
   ]
]
OUTPUT; (/' This module consists of 3 partS:',
         /'   1 --- top part, ',
         /'   2 --- main part: the chamber/phantom central part, ',
         /'   3 --- bottom part.');
OUTPUT $MAX_N_Chamber-1;
(/' Input the number of layers for each part: '/
' N-TOP (>=0), N-CHAM (>0 to input chamber layers individually or <0 to'/
' input -N-CHAM groups of layers), N-BOT (>=0) (N-TOP + total number of'/
' chamber layers + N-BOT <= ',I4,') on one line'/
' : ',$);
;MINPUT (Chamber) N_TOP_Chamber, N_CHM_Chamber, N_BOT_Chamber;(3I5);
OUTPUT N_TOP_Chamber, N_CHM_Chamber,  N_BOT_Chamber;(3I9);
IF(N_CHM_Chamber=0)[
   OUTPUT ICM_Chamber;
     (//'***ERROR IN CM ',I4,' (CHAMBER)'/
        'N-CHAM = 0'/
        'N-CHAM reset to 1 for now.'//);
   N_CHM_Chamber=1;
   IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
]
IF(N_TOP_Chamber < 0)[
   OUTPUT ICM_Chamber; (//'***ERROR IN CM ',I4,' (CHAMBER)'/
        'N-TOP < 0'/ 'N-TOP reset to 0 for now.'//);
   N_TOP_Chamber=0;
   IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
]
IF(N_BOT_Chamber < 0)[
   OUTPUT ICM_Chamber;
     (//'***ERROR IN CM ',I4,' (CHAMBER)'/
        'N-BOT < 0'/ 'N-BOT reset to 0 for now.'//);
   N_BOT_Chamber=0;
   IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
]
IF(N_CHM_Chamber>0 &
   N_CHM_Chamber+N_TOP_Chamber+N_BOT_Chamber > $MAX_N_Chamber-1)[
   N_BOT_Chamber=0;
   N_TOP_Chamber=0;
   N_CHM_Chamber=$MAX_N_Chamber-1;
   OUTPUT ICM_Chamber, $MAX_N_Chamber-1;
    (//'***ERROR IN CM ',I4,' (CHAMBER):'/
       'N-CHAM + N-TOP + N-BOT > max. # of layers allowed.'/
       'N-TOP set to 0, N-BOT set to 0, N-CHAM set to ',I4,' for now.'//);
   IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
]

IF(N_CHM_Chamber>0)[
   N_Chamber = N_CHM_Chamber+3+ 2*N_TOP_Chamber+2*N_BOT_Chamber;
]
"Number of regions in this CM (<50, excluding front air gap)"
"
"                  INPUT for TOP REGION
"                  ====================
"
IF(N_TOP_Chamber~=0)[
  OUTPUT N_TOP_Chamber;
  (/' Input thickness (ZTHICK) & inner radius (RCYL) for each of',
   ' the',I3,' layers'/' for the top part.'
  /' Note that the inner radius, RCYL divides each layer into 2',
  ' regions,'/
  ' an inner disc-shaped region and an outer annular region.',
  /' The outer boundary of the annular region is RMAX_CM.');
  OUTPUT;(/
  ' For layers of equal thickness, inner radius and medium, '/
  ' Input ZTHICK,RCYL & N-TOP, in one line)'/
  ' Otherwise, input ZTHICK & RCYL for each layer starting from 1ST',
  ' layer'/ ' : ',$);
  IM=1;"starting # for the top part"
  ;MINPUT (Chamber) ZTHICK, RCYSTEMP(IM),JM;(2F15.0,I5);
  OUTPUT ZTHICK, RCYSTEMP(IM),JM;(2F15.5,I5);
  IF(ZTHICK<0.0)[
     OUTPUT ICM_Chamber;
      (//'***ERROR IN CM ',I4,' (CHAMBER):'/
         'Thickness of layer 1 in top part < 0.0.'//);
     IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
  ]
  IF(RCYSTEMP(IM)<0.0)[
     OUTPUT ICM_Chamber;
      (//'***ERROR IN CM ',I4,' (CHAMBER):'/
         'RCYS of layer 1, top part < 0.0'//);
     IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
  ]
  ELSEIF(RCYSTEMP(IM) > RMAX_CM(ICM_Chamber))[
     OUTPUT ICM_Chamber;
      (//'***WARNING IN CM ',I4,' (CHAMBER):'/
         'RCYS of layer 1, top part > RMAX_CM'//);
     WRITE(IOUTLIST,'(//''***WARNING IN CM '',I4,
       '' (CHAMBER):''/ ''RCYS of layer 1, top part > RMAX_CM''//)')
        ICM_Chamber;
  ]
  ZTEMP(IM)=ZMIN_Chamber+ZTHICK;

  IF(JM = N_TOP_Chamber)["for equal thickness, radius and medium"
     IRM=1;
     OUTPUT N_TOP_Chamber;
     (/' All the',I5,' layers have the same thickness, inner radius'/);
     "1st (inner) region in the top part"
     OUTPUT;(' ECUT,PCUT,DOSE ZONE(0=>do not score dose)',
        ',IREGION_TO_BIT for inner regions'/' :',$);
     ;MINPUT (Chamber) ECUTTEMP(IRM),PCUTTEMP(IRM),DOSE_ZONETEMP(IRM),
        IREGION_TO_BITTEMP(IRM);
     (2F15.0,2I5);
     IF(ECUTTEMP(IRM) < ECUTIN)[ECUTTEMP(IRM)=ECUTIN;]
     IF(PCUTTEMP(IRM) < PCUTIN)[PCUTTEMP(IRM)=PCUTIN;]
     ;OUTPUT ECUTTEMP(IRM),PCUTTEMP(IRM), DOSE_ZONETEMP(IM),
        IREGION_TO_BITTEMP(IM); (2F10.4, I5,I15);
     OUTPUT;(/' For inner regions:',$);
     ;$MED_INPUT(Chamber); " inputs character array MED_IN from unit 5,
                            " loops
     "through array MEDIA(24,I) to check if medium was previously input.
     "If so, sets MED_INDEX to index of previous medium.  If not,
     "increments NMED and sets MED_INDEX to NMED.
     MEDTEMP(IRM) = MED_INDEX; " medium of the slab
     IF( DOSE_ZONETEMP(IRM) > $MAX_DOSE_ZONE )[
       ;OUTPUT ICM_Chamber, $MAX_DOSE_ZONE;
       (/'***ERROR IN CM ',I4,' (CHAMBER):'/
       'DOSE_ZONE # of inner cylinders in top part > $MAX_DOSE_ZONE.'/
       'DOSE_ZONE set to ',I4,' for now.'/
       'Probably need to change $MAX_DOSE_ZONE in beam_user_macros.mortran'//);
       DOSE_ZONETEMP(IRM)=$MAX_DOSE_ZONE;
       IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
     ]
     IRM = IRM+1;"for outer region of this layer"
     ;OUTPUT;(' ECUT,PCUT,DOSE ZONE(0=>do not score dose),IREGION_TO_BIT',
     ' for outer regions'/' :',$);
     ;MINPUT (Chamber) ECUTTEMP(IRM),PCUTTEMP(IRM),DOSE_ZONETEMP(IRM),
        IREGION_TO_BITTEMP(IRM); (2F15.0,2I5);
     IF(ECUTTEMP(IRM) < ECUTIN)[ECUTTEMP(IRM)=ECUTIN;]
     IF(PCUTTEMP(IRM) < PCUTIN)[PCUTTEMP(IRM)=PCUTIN;]
     ;OUTPUT ECUTTEMP(IRM),PCUTTEMP(IRM), DOSE_ZONETEMP(IRM),
        IREGION_TO_BITTEMP(IRM);(2F10.4, I5,I15);
     OUTPUT;(/' For outer regions:',$);
     ;$MED_INPUT(Chamber);
     MEDTEMP(IRM) = MED_INDEX;
     IF( DOSE_ZONETEMP(IRM) > $MAX_DOSE_ZONE )[
       ;OUTPUT ICM_Chamber, $MAX_DOSE_ZONE;
       (/'***ERROR IN CM ',I4,' (CHAMBER):'/
       'DOSE_ZONE # of annuli in top part > $MAX_DOSE_ZONE.'/
       'DOSE_ZONE set to ',I4,' for now.'/
       'Probably need to change $MAX_DOSE_ZONE in beam_user_macros.mortran'//);
       DOSE_ZONETEMP(IRM)=$MAX_DOSE_ZONE;
       IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
     ]
     DO IM=2,N_TOP_Chamber[
        ZTEMP(IM)=ZTEMP(IM-1)+ZTHICK;
        RCYSTEMP(IM)=RCYSTEMP(1);
        IRM = IRM+1;"for inner region of this layer"
        ECUTTEMP(IRM)=ECUTTEMP(1);
        PCUTTEMP(IRM)=PCUTTEMP(1);
        DOSE_ZONETEMP(IRM)=DOSE_ZONETEMP(1);
        IREGION_TO_BITTEMP(IRM)=IREGION_TO_BIT(1);
        MEDTEMP(IRM) = MED(1);
        IRM = IRM+1;"for outer region of this layer"
        ECUTTEMP(IRM)=ECUTTEMP(2);
        PCUTTEMP(IRM)=PCUTTEMP(2);
        DOSE_ZONETEMP(IRM)=DOSE_ZONETEMP(2);
        IREGION_TO_BITTEMP(IRM)=IREGION_TO_BIT(2);
        MEDTEMP(IRM) = MED(2);
     ]
  ]"end of equal thickness, radius and media inputs"

  ELSE["for different thicknesses, radii or media"
     IF(N_TOP_Chamber>1)[
        OUTPUT N_TOP_Chamber;
        (/' The',I5,' layers have different inner radii, thickness,',
         /' and/or media');
     ]
     OUTPUT 1;(/' For layer',I4,' in top part:');
     OUTPUT ZTHICK,RCYSTEMP(IM);
     (/' ZTHICK & RCYL =',2F15.5);
     IRM=1;
     OUTPUT;(' ECUT,PCUT,DOSE ZONE(0=>do not score dose)',
     ',IREGION_TO_BIT for inner region'/' :',$);
     ;MINPUT (Chamber) ECUTTEMP(IRM),PCUTTEMP(IRM),DOSE_ZONETEMP(IRM),
        IREGION_TO_BITTEMP(IRM); (2F15.0,2I5);
     IF(ECUTTEMP(IRM) < ECUTIN)[ECUTTEMP(IRM)=ECUTIN;]
     IF(PCUTTEMP(IRM) < PCUTIN)[PCUTTEMP(IRM)=PCUTIN;]
     ;OUTPUT ECUTTEMP(IRM),PCUTTEMP(IRM), DOSE_ZONETEMP(IRM),
        IREGION_TO_BITTEMP(IRM); (2F10.4, I5,I15);
     OUTPUT;(/' For inner region:',$);
     ;$MED_INPUT(Chamber);
     "inputs character array MED_IN from unit 5, loops
     "through array MEDIA(24,I) to check if medium was previously input.
     "If so, sets MED_INDEX to index of previous medium.  If not,
     "increments NMED and sets MED_INDEX to NMED.
     MEDTEMP(IRM) = MED_INDEX; " medium of the planar slab
     IF( DOSE_ZONETEMP(IRM) > $MAX_DOSE_ZONE )[
       ;OUTPUT ICM_Chamber, $MAX_DOSE_ZONE;
       (//'***ERROR IN CM ',I4,' (CHAMBER):'/
 'DOSE_ZONE # of inner cylinder in 1st layer, top part > $MAX_DOSE_ZONE.'/
 'DOSE_ZONE # set to ',I4,' for now.'/
    'Probably need to change $MAX_DOSE_ZONE in beam_user_macros.mortran'//);
       DOSE_ZONETEMP(IRM)=$MAX_DOSE_ZONE;
       IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
     ]
     IRM = IRM+1;"for outer region of this layer"
     ;OUTPUT;(' ECUT,PCUT,DOSE ZONE(0=>do not score dose),IREGION_TO_BIT',
     ' for outer region'/' :',$);
     ;MINPUT (Chamber) ECUTTEMP(IRM),PCUTTEMP(IRM),DOSE_ZONETEMP(IRM),
        IREGION_TO_BITTEMP(IRM); (2F15.0,2I5);
     IF(ECUTTEMP(IRM) < ECUTIN)[ECUTTEMP(IRM)=ECUTIN;]
     IF(PCUTTEMP(IRM) < PCUTIN)[PCUTTEMP(IRM)=PCUTIN;]
     ;OUTPUT ECUTTEMP(IRM),PCUTTEMP(IRM), DOSE_ZONETEMP(IRM),
        IREGION_TO_BITTEMP(IRM); (2F10.4, I5,I15);
     OUTPUT;(' For outer region:',$);
     ;$MED_INPUT(Chamber);
     MEDTEMP(IRM) = MED_INDEX;
     IF( DOSE_ZONETEMP(IRM) > $MAX_DOSE_ZONE )[
       ;OUTPUT ICM_Chamber, $MAX_DOSE_ZONE;
       (//'***ERROR IN CM ',I4,' (CHAMBER):'/
  'DOSE_ZONE # of outer annulus in 1st layer, top part > $MAX_DOSE_ZONE.'/
     'DOSE_ZONE # set to ',I4,' for now.'/
     'Probably need to change $MAX_DOSE_ZONE in beam_user_macros.mortran'//);
       DOSE_ZONETEMP(IRM)=$MAX_DOSE_ZONE;
       IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
     ]
     DO IM=2, N_TOP_Chamber[
        OUTPUT IM;
        (/' FOR LAYER',I4,' IN TOP PART:');
        OUTPUT;
        (/' ZTHICK & RCYL:',$);
        ;MINPUT (Chamber) ZTHICK, RCYSTEMP(IM);(2F15.0);
        OUTPUT ZTHICK, RCYSTEMP(IM);(2F15.5);
        IF( RCYSTEMP(IM)<0.0 )[
          OUTPUT ICM_Chamber, IM-N_CHM_Chamber;
           (//'***ERROR IN CM ',I4,' (CHAMBER):'/
              'Radius of inner cylinder in layer ',I4,' of top part < 0.0'//);
          IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
        ]
        ELSEIF(RCYSTEMP(IM) > RMAX_CM(ICM_Chamber))[
          OUTPUT ICM_Chamber, IM-N_CHM_Chamber;
           (//'***WARNING IN CM ',I4,' (CHAMBER):'/
          'Radius of inner cylinder in layer ',I4,' of top part > RMAX_CM'//);
         WRITE(IOUTLIST,'(//''***WARNING IN CM '',
         I4,'' (CHAMBER):''/
         ''Radius of inner cylinder in layer '',
         I4,'' of top part > RMAX_CM''//)')
         ICM_Chamber, IM-N_CHM_Chamber;
        ]
        IF(ZTHICK<0.0)[
           OUTPUT ICM_Chamber, IM-N_CHM_Chamber;
          (//'***ERROR IN CM ',I4,' (CHAMBER):'/
             'Thickness of layer ',I4,' in top part < 0.0'//);
           IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
        ]
        ZTEMP(IM)=ZTEMP(IM-1)+ZTHICK;
        OUTPUT ZTHICK, RCYSTEMP(IM);(2F15.5);
        IRM = IRM+1;"inner region of this layer"
        OUTPUT;(' ECUT,PCUT,DOSE ZONE(0=>do not score dose)',
                ',IREGION_TO_BIT for inner region'/' :',$);
        ;MINPUT (Chamber) ECUTTEMP(IRM),PCUTTEMP(IRM),DOSE_ZONETEMP(IRM),
                           IREGION_TO_BITTEMP(IRM); (2F15.0,2I5);
        IF(ECUTTEMP(IRM) < ECUTIN)[ECUTTEMP(IRM)=ECUTIN;]
        IF(PCUTTEMP(IRM) < PCUTIN)[PCUTTEMP(IRM)=PCUTIN;]
        ;OUTPUT ECUTTEMP(IRM),PCUTTEMP(IRM), DOSE_ZONETEMP(IRM),
                              IREGION_TO_BITTEMP(IRM); (2F10.4, I5,I15);
        OUTPUT;(/' For inner region:',$);
        ;$MED_INPUT(Chamber);
        MEDTEMP(IRM) = MED_INDEX; " medium of the planar slab
        IF( DOSE_ZONETEMP(IRM) > $MAX_DOSE_ZONE )[
           ;OUTPUT ICM_Chamber, IM,$MAX_DOSE_ZONE;
             (//'***ERROR IN CM ',I4,' (CHAMBER):'/
             'DOSE_ZONE # of inner cylinder in layer ',I4,
             ' of top part > $MAX_DOSE_ZONE.'/
             'DOSE_ZONE # set to ',I4,' for now.'/
     'Probably need to change $MAX_DOSE_ZONE in beamnrc_user_macros.mortran'//);
            DOSE_ZONETEMP(IRM)=$MAX_DOSE_ZONE;
            IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
        ]
        IRM = IRM+1;"for outer region of this layer"
        ;OUTPUT;(' ECUT,PCUT,DOSE ZONE(0=>do not score dose),IREGION_TO_BIT',
                 ' for outer region'/' :',$);
        ;MINPUT (Chamber) ECUTTEMP(IRM),PCUTTEMP(IRM),DOSE_ZONETEMP(IRM),
                          IREGION_TO_BITTEMP(IRM); (2F15.0,2I5);
        IF(ECUTTEMP(IRM) < ECUTIN)[ECUTTEMP(IRM)=ECUTIN;]
        IF(PCUTTEMP(IRM) < PCUTIN)[PCUTTEMP(IRM)=PCUTIN;]
        ;OUTPUT ECUTTEMP(IRM),PCUTTEMP(IRM), DOSE_ZONETEMP(IRM),
                IREGION_TO_BITTEMP(IRM); (2F10.4, I5,I15);
        OUTPUT;(' For outer region:',$);
        ;$MED_INPUT(Chamber);
        MEDTEMP(IRM) = MED_INDEX;
        IF( DOSE_ZONETEMP(IRM) > $MAX_DOSE_ZONE )[
           ;OUTPUT ICM_Chamber, IM,$MAX_DOSE_ZONE;
             (//'***ERROR IN CM ',I4,' (CHAMBER):'/
             'DOSE_ZONE # of outer annulus in layer ',I4,
             ' of top part > $MAX_DOSE_ZONE.'/
             'DOSE_ZONE # set to ',I4,' for now.'/
     'Probably need to change $MAX_DOSE_ZONE in beam_user_macros.mortran'//);
            DOSE_ZONETEMP(IRM)=$MAX_DOSE_ZONE;
            IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
        ]
     ]"end of the do loop"
  ]"end of non-equal thickness, etc"
  THICK2=ZTEMP(N_TOP_Chamber)-ZMIN_Chamber;
  "the overall thickness for the top part"
]
ELSE[THICK2=0.0;]

"
"                    INPUTS FOR THE Central CHAMBER PART
"                    ===================================
"
OUTPUT; (/'          INPUTS FOR THE Central CHAMBER PART');

OUTPUT; (/' INPUT THE INNER RADIUS OF THE CHAMBER WALL (R_INNER),'
  /' THE OUTER RADIUS OF THE CHAMBER WALL (R_WALL), AND THE OUTER RADIUS,'
  /' OF THE GAP BETWEEN THE CHAMBER WALL AND CONTAINER WALL (R_OUTER),'
  /' ALL ON ONE LINE.'/' : ',$);
;MINPUT (Chamber) RCYS_Chamber(1, 1), RCYS_Chamber(1, 2),
    RCYS_Chamber(1, 3);(3F15.0);
OUTPUT RCYS_Chamber(1, 1), RCYS_Chamber(1, 2),
   RCYS_Chamber(1, 3); (3F13.5);
OUTPUT;
(/' Note that R_OUTER also defines the inner radius of the container.'
/' The outer radius of the container is defined by RMAX_CM.');
IF(RCYS_Chamber(1,1)<0.0)[
   OUTPUT ICM_Chamber;
      (//'***ERROR IN CM ',I4,' (CHAMBER):'/
         'Inner radius of chamber wall < 0.0'//);
   IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
]
ELSEIF(RCYS_Chamber(1,1)>RMAX_CM(ICM_Chamber))[
   OUTPUT ICM_Chamber;
     (//'***WARNING IN CM ',I4,' (CHAMBER):'/
       'Inner radius of chamber wall > RMAX_CM'//);
   WRITE(IOUTLIST,'(//''***WARNING IN CM '',I4,'' (CHAMBER):''/
         ''Inner radius of chamber wall > RMAX_CM''//)')
         ICM_Chamber;
]
IF(RCYS_Chamber(1,2)<0.0)[
   OUTPUT ICM_Chamber;
      (//'***ERROR IN CM ',I4,' (CHAMBER):'/
         'Outer radius of chamber wall < 0.0'//);
   IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
]
ELSEIF(RCYS_Chamber(1,2)>RMAX_CM(ICM_Chamber))[
   OUTPUT ICM_Chamber;
     (//'***WARNING IN CM ',I4,' (CHAMBER):'/
       'Outer radius of chamber wall > RMAX_CM'//);
   WRITE(IOUTLIST,'(//''***WARNING IN CM '',I4,'' (CHAMBER):''/
         ''Outer radius of chamber wall > RMAX_CM''//)')
         ICM_Chamber;
]
IF(RCYS_Chamber(1,3)<0.0)[
   OUTPUT ICM_Chamber;
      (//'***ERROR IN CM ',I4,' (CHAMBER):'/
         'Inner radius of container wall < 0.0'//);
   IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
]
ELSEIF(RCYS_Chamber(1,3)>RMAX_CM(ICM_Chamber))[
   OUTPUT ICM_Chamber;
     (//'***WARNING IN CM ',I4,' (CHAMBER):'/
       'Inner radius of container wall > RMAX_CM'//);
   WRITE(IOUTLIST,'(//''***WARNING IN CM '',I4,'' (CHAMBER):''/
         ''Inner radius of container wall > RMAX_CM''//)')
         ICM_Chamber;
]
IF(RCYS_Chamber(1,2)<RCYS_Chamber(1,1))[
   OUTPUT ICM_Chamber;
      (//'***ERROR IN CM ',I4,' (CHAMBER):'/
         'Outer radius of chamber wall < inner radius of chamber wall'//);
   IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
]
IF(RCYS_Chamber(1,3)<RCYS_Chamber(1,1))[
   OUTPUT ICM_Chamber;
      (//'***ERROR IN CM ',I4,' (CHAMBER):'/
         'Inner radius of container wall < inner radius of chamber wall'//);
   IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
]
IF(RCYS_Chamber(1,3)<RCYS_Chamber(1,2))[
   OUTPUT ICM_Chamber;
      (//'***ERROR IN CM ',I4,' (CHAMBER):'/
         'Inner radius of container wall < outer radius of chamber wall'//);
   IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
]

RCYS2_Chamber(1,1)=RCYS_Chamber(1,1)**2;
RCYS2_Chamber(1,2)=RCYS_Chamber(1,2)**2;
RCYS2_Chamber(1,3)=RCYS_Chamber(1,3)**2;

Z_Chamber(1)=ZMIN_Chamber+THICK2;  " THE TOP Z COORD OF THE CHAMBER "

IF(N_CHM_Chamber<0)["inputting for a group of layers"
  OUTPUT -N_CHM_Chamber;
  (/' THIS CHAMBER HAS ',I4,' GROUPS OF LAYERS WITH EQUAL THICKNESS (ZTHICK).'/
    ' FOR EACH GROUP, INPUT ZTHICK,I (on one line), WHERE I IS THE NUMBER OF'/
    ' LAYERS IN THE GROUP'/' : ',$);
  N_CHAM=0;
  DO II=1,-N_CHM_Chamber[
    OUTPUT II; (/' FOR LAYER GROUP ',I4,' :');
    ;MINPUT (Chamber) ZTHICK,I;(F15.0,I5);
    OUTPUT ZTHICK,I;(F15.5,I5);
    IF(ZTHICK<0.0)[
      OUTPUT ICM_Chamber;
       (//'***ERROR IN CM ',I4,' (CHAMBER):'/
          'Layers in chamber part have thickness < 0.0'//);
      IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
    ]
    IF(I<=0)[
      OUTPUT ICM_Chamber;
       (//'***ERROR IN CM ',I4,' (CHAMBER):'/
          'Cannot have a group with <= 0 layers'//);
      IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
    ]
    N_CHAM=N_CHAM+I;
    IF(N_CHAM+N_TOP_Chamber+N_BOT_Chamber > $MAX_N_Chamber-1)[
       OUTPUT ICM_Chamber;
       (//'***ERROR IN CM ',I4,' (CHAMBER):'/
       'N-CHAM + N-TOP + N-BOT > max. # of layers allowed.'/);
       IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
    ]
    OUTPUT N_CHAM-I+1,N_CHAM,ZTHICK;
     (/' LAYERS ',I4,' - ',I4,' HAVE EQUAL THICKNESS OF',F15.5,' cm.'/);
    Z_Chamber(N_CHAM-I+2)=Z_Chamber(N_CHAM-I+1)+ZTHICK;
    DO IM=N_CHAM-I+2,N_CHAM[
      Z_Chamber(IM+1)=Z_Chamber(IM)+ZTHICK;
    ]
  ]"end of do loop to input thicknesses"
  IM=1;
  IRA = IRSTART_Chamber;"for the chamber part, one region per layer"
  N_CHM_Chamber=N_CHAM;
  N_Chamber = N_CHM_Chamber+3+ 2*N_TOP_Chamber+2*N_BOT_Chamber;
  OUTPUT N_CHM_Chamber;
   ;(' If a dose zone is input, it is the first of',I4,' in sequence');
   OUTPUT;(' ECUT,PCUT,INITIAL DOSE ZONE(0=>do not score dose),',
    ' IREGION_TO_BIT'/
    ' FOR ALL LAYERS: ',$);
   ;MINPUT (Chamber) ECUT(IRA),PCUT(IRA),DOSE_ZONE(IRA),IREGION_TO_BIT(IRA);
   (2F15.0,2I5);
   IF(ECUT(IRA) < ECUTIN)[ECUT(IRA)=ECUTIN;]
   IF(PCUT(IRA) < PCUTIN)[PCUT(IRA)=PCUTIN;]
   ;OUTPUT ECUT(IRA),PCUT(IRA), DOSE_ZONE(IRA),
      IREGION_TO_BIT(IRA);(2F10.4,I5,I15);
   OUTPUT;(' For all layers :',$);
   ;$MED_INPUT(Chamber);
   MED(IRA) = MED_INDEX; " medium of the planar slab
   IF( DOSE_ZONE(IRA) > $MAX_DOSE_ZONE )[
      ;OUTPUT ICM_Chamber,$MAX_DOSE_ZONE;
        (//'***ERROR IN CM ',I4,' (CHAMBER):'/
     'DOSE_ZONE # of layer 1 of chamber part > $MAX_DOSE_ZONE.'/
     'DOSE_ZONE # set to ',I4,' for now.'/
     'Probably need to change $MAX_DOSE_ZONE in beam_user_macros.mortran'//);
      DOSE_ZONE(IRA)=$MAX_DOSE_ZONE;
      IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
   ]
   ELSEIF(DOSE_ZONE(IRA).NE.0)[
      IPLOTFLAG=1;"set flag: CHAMBER is used for dose scoring"
      ZPLOTCHM(DOSE_ZONE(IRA))=Z_Chamber(IM);
      ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_Chamber(IM+1);
   ]
   DO IM=2, N_CHM_Chamber[
      IRA = IRA+1;
      ECUT(IRA)=ECUT(IRSTART_Chamber);
      PCUT(IRA)=PCUT(IRSTART_Chamber);
      DOSE_ZONE(IRA)=DOSE_ZONE(IRSTART_Chamber) + (IM-1);
      IF( DOSE_ZONE(IRA) > $MAX_DOSE_ZONE )[
         ;OUTPUT ICM_Chamber,IM,$MAX_DOSE_ZONE;
           (//'***ERROR IN CM ',I4,' (CHAMBER):'/
          'DOSE_ZONE # of layer ',I4,' of chamber part > $MAX_DOSE_ZONE.'/
          'DOSE_ZONE # set to ',I4,' for now.'/
   'Probably need to change $MAX_DOSE_ZONE in beam_user_macros.mortran'//);
                DOSE_ZONE(IRA)=$MAX_DOSE_ZONE;
          IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
      ]
      ELSEIF(DOSE_ZONE(IRA).NE.0)[
         IPLOTFLAG=1;"set flag: CHAMBER is used for dose scoring"
         ZPLOTCHM(DOSE_ZONE(IRA))=Z_Chamber(IM);
         ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_Chamber(IM+1);
      ]
      IREGION_TO_BIT(IRA)=IREGION_TO_BIT(IRSTART_Chamber);
      MED(IRA) = MED(IRSTART_Chamber);
   ]
]
ELSE[
  OUTPUT; (/' INPUT THICKNESS FOR EACH LAYER WITHIN THE CHAMBER'/
  ' FOR LAYERS OF EQUAL THICKNESS (ZTHICK) AND MEDIUM, '/
  ' INPUT ZTHICK,N-CHAM (in one line)'
  /' OTHERWISE, INPUT ZTHICK FOR EACH LAYER STARTING FROM 1ST LAYER'/' : ',$);
  ;MINPUT (Chamber) ZTHICK,I;(F15.0,I5);
  OUTPUT ZTHICK,I;(F15.5,I5);
  IF(I = N_CHM_Chamber)[
    IF(ZTHICK<0.0)[
       OUTPUT ICM_Chamber;
        (//'***ERROR IN CM ',I4,' (CHAMBER):'/
           'Layers in chamber part have thickness < 0.0'//);
       IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
    ]
    OUTPUT I,ZTHICK;
     (/' ALL THE ',I5,' LAYERS HAVE EQUAL THICKNESS OF',F15.5,' cm.'/);
    IRA = IRSTART_Chamber;"for the chamber part, one region per layer"
    IM=1;
    OUTPUT I;
     ;(' If a dose zone is input, it is the first of',I4,' in sequence');
    OUTPUT;(' ECUT,PCUT,INITIAL DOSE ZONE(0=>do not score dose),',
     ' IREGION_TO_BIT'/
     ' FOR THE LAYERS: ',$);
    ;MINPUT (Chamber) ECUT(IRA),PCUT(IRA),DOSE_ZONE(IRA),IREGION_TO_BIT(IRA);
    (2F15.0,2I5);
    IF(ECUT(IRA) < ECUTIN)[ECUT(IRA)=ECUTIN;]
    IF(PCUT(IRA) < PCUTIN)[PCUT(IRA)=PCUTIN;]
    ;OUTPUT ECUT(IRA),PCUT(IRA), DOSE_ZONE(IRA),
       IREGION_TO_BIT(IRA);(2F10.4,I5,I15);
    OUTPUT;(' For all layers :',$);
    ;$MED_INPUT(Chamber);
    MED(IRA) = MED_INDEX; " medium of the planar slab
    IF( DOSE_ZONE(IRA) > $MAX_DOSE_ZONE )[
       ;OUTPUT ICM_Chamber,$MAX_DOSE_ZONE;
         (//'***ERROR IN CM ',I4,' (CHAMBER):'/
      'DOSE_ZONE # of layer 1 of chamber part > $MAX_DOSE_ZONE.'/
      'DOSE_ZONE # set to ',I4,' for now.'/
      'Probably need to change $MAX_DOSE_ZONE in beam_user_macros.mortran'//);
       DOSE_ZONE(IRA)=$MAX_DOSE_ZONE;
       IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
    ]
    ELSEIF(DOSE_ZONE(IRA).NE.0)[
       IPLOTFLAG=1;"set flag: CHAMBER is used for dose scoring"
       ZPLOTCHM(DOSE_ZONE(IRA))=Z_Chamber(IM);
       ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_Chamber(IM+1);
    ]
    Z_Chamber(2)=Z_Chamber(1)+ZTHICK;
    DO IM=2, N_CHM_Chamber[
       Z_Chamber(IM+1)=Z_Chamber(IM)+ZTHICK;
       IRA = IRA+1;
       ECUT(IRA)=ECUT(IRSTART_Chamber);
       PCUT(IRA)=PCUT(IRSTART_Chamber);
       DOSE_ZONE(IRA)=DOSE_ZONE(IRSTART_Chamber) + (IM-1);
       IF( DOSE_ZONE(IRA) > $MAX_DOSE_ZONE )[
          ;OUTPUT ICM_Chamber,IM,$MAX_DOSE_ZONE;
            (//'***ERROR IN CM ',I4,' (CHAMBER):'/
           'DOSE_ZONE # of layer ',I4,' of chamber part > $MAX_DOSE_ZONE.'/
           'DOSE_ZONE # set to ',I4,' for now.'/
    'Probably need to change $MAX_DOSE_ZONE in beam_user_macros.mortran'//);
           DOSE_ZONE(IRA)=$MAX_DOSE_ZONE;
           IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
       ]
       ELSEIF(DOSE_ZONE(IRA).NE.0)[
          IPLOTFLAG=1;"set flag: CHAMBER is used for dose scoring"
          ZPLOTCHM(DOSE_ZONE(IRA))=Z_Chamber(IM);
          ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_Chamber(IM+1);
       ]
       IREGION_TO_BIT(IRA)=IREGION_TO_BIT(IRSTART_Chamber);
       MED(IRA) = MED(IRSTART_Chamber);
    ]
  ]
  ELSE[
    IF(N_CHM_Chamber>1)[
       OUTPUT N_CHM_Chamber;
       (/' THE',I4,' LAYERS HAVE DIFFERENT ZTHICK AND/OR MEDIA.');
    ]
    OUTPUT 1;
    (/' FOR LAYER',I4,' IN THE CHAMBER:');
    OUTPUT ZTHICK; (/' ZTHICK =',F15.5 );
    IF(ZTHICK<0.0)[
       OUTPUT ICM_Chamber;
         (//'***ERROR IN CM ',I4,' (CHAMBER):'/
            'Thickness of layer 1 in chamber part < 0.0'//);
       IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
    ]
    IRA = IRSTART_Chamber;"for the chamber part, one region per layer"
    IM=1;
    OUTPUT;(' ECUT,PCUT,DOSE ZONE(0=>do not score dose),IREGION_TO_BIT'/' :',$);
    ;MINPUT (Chamber) ECUT(IRA),PCUT(IRA),DOSE_ZONE(IRA),IREGION_TO_BIT(IRA);
    (2F15.0,2I5);
    IF(ECUT(IRA) < ECUTIN)[ECUT(IRA)=ECUTIN;]
    IF(PCUT(IRA) < PCUTIN)[PCUT(IRA)=PCUTIN;]
    ;OUTPUT ECUT(IRA),PCUT(IRA),
          DOSE_ZONE(IRA),IREGION_TO_BIT(IRA);(2F10.4,I5,I15);
    OUTPUT;(' For this layer :');
    ;$MED_INPUT(Chamber);
    MED(IRA) = MED_INDEX;
    IF( DOSE_ZONE(IRA) > $MAX_DOSE_ZONE )[
       ;OUTPUT ICM_Chamber,$MAX_DOSE_ZONE;
         (//'***ERROR IN CM ',I4,' (CHAMBER):'/
          'DOSE_ZONE # of layer 1 of chamber part > $MAX_DOSE_ZONE.'/
          'DOSE_ZONE # set to ',I4,' for now.'/
    'Probably need to change $MAX_DOSE_ZONE in beam_user_macros.mortran'//);
        DOSE_ZONE(IRA)=$MAX_DOSE_ZONE;
        IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
    ]
    ELSEIF(DOSE_ZONE(IRA).NE.0)[
       IPLOTFLAG=1;"set flag: CHAMBER is used for dose scoring"
       ZPLOTCHM(DOSE_ZONE(IRA))=Z_Chamber(IM);
       ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_Chamber(IM+1);
    ]
    Z_Chamber(2)=Z_Chamber(1)+ZTHICK;
    DO IM=2, N_CHM_Chamber[
       OUTPUT IM;
       (/' FOR LAYER',I4,' IN THE CHAMBER:');
       OUTPUT; (/' ZTHICK: ',$ );
       ;MINPUT (Chamber) ZTHICK;(F15.0);
       OUTPUT ZTHICK;(F15.5);
       IF(ZTHICK<0.0)[
          OUTPUT ICM_Chamber, IM;
           (//'***ERROR IN CM ',I4,' (CHAMBER):'/
            'Thickness of layer ',I4,' in chamber part < 0.0'//);
          IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
       ]
       Z_Chamber(IM+1)=Z_Chamber(IM)+ZTHICK;
       IRA = IRA+1;
       OUTPUT;(' ECUT,PCUT,DOSE ZONE(0=>do not score dose),IREGION_TO_BIT'/
               ':',$);
       ;MINPUT (Chamber)
        ECUT(IRA),PCUT(IRA),DOSE_ZONE(IRA),IREGION_TO_BIT(IRA);
       (2F15.0,2I5);
       IF(ECUT(IRA) < ECUTIN)[ECUT(IRA)=ECUTIN;]
       IF(PCUT(IRA) < PCUTIN)[PCUT(IRA)=PCUTIN;]
       ;OUTPUT ECUT(IRA),PCUT(IRA), DOSE_ZONE(IRA), IREGION_TO_BIT(IRA);
          (2F10.4,I5,I15);
       OUTPUT;(' For this layer :',$);
       ;$MED_INPUT(Chamber);
       MED(IRA) = MED_INDEX; " medium of the planar slab
       IF( DOSE_ZONE(IRA) > $MAX_DOSE_ZONE )[
         ;OUTPUT ICM_Chamber,IM,$MAX_DOSE_ZONE;
         (//'***ERROR IN CM ',I4,' (CHAMBER):'/
          'DOSE_ZONE # of layer ',I4,' of chamber part > $MAX_DOSE_ZONE.'/
          'DOSE_ZONE # set to ',I4,' for now.'/
     'Probably need to change $MAX_DOSE_ZONE in beam_user_macros.mortran'//);
          DOSE_ZONE(IRA)=$MAX_DOSE_ZONE;
          IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
       ]
       ELSEIF(DOSE_ZONE(IRA).NE.0)[
          IPLOTFLAG=1;"set flag: CHAMBER is used for dose scoring"
          ZPLOTCHM(DOSE_ZONE(IRA))=Z_Chamber(IM);
          ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_Chamber(IM+1);
       ]
    ]"end of do loop"
  ] "end of else"
]"end of else"

DO I=1, N_CHM_Chamber[
     RCYS_Chamber(I,1)=RCYS_Chamber(1,1);
     RCYS_Chamber(I,2)=RCYS_Chamber(1,2);
     RCYS_Chamber(I,3)=RCYS_Chamber(1,3);
     RCYS2_Chamber(I,1)=RCYS2_Chamber(1,1);
     RCYS2_Chamber(I,2)=RCYS2_Chamber(1,2);
     RCYS2_Chamber(I,3)=RCYS2_Chamber(1,3);
]



THICK1=Z_Chamber(N_CHM_Chamber+1)-Z_Chamber(1);
"the overall thickness for the monitor chamber part"

DO IR_Chamber = 1+N_CHM_Chamber, N_CHM_Chamber +3[
   "Parameters for chamber wall, gap and container wall regions"
   IRA = IRA+1;
   IF(IR_Chamber.EQ.1+N_CHM_Chamber)[
      OUTPUT;(/' FOR THE CHAMBER WALL:');
   ]
   ELSEIF(IR_Chamber.EQ.2+N_CHM_Chamber)[
      OUTPUT;(/' FOR THE GAP BETWEEN THE CHAMBER WALL AND THE'/
               'CONTAINER WALL:');
   ]
   ELSE[
      OUTPUT;(/' FOR THE CONTAINER WALL:');
   ]
   OUTPUT;(/' ECUT,PCUT, DOSE ZONE(0=>do not score dose),IREGION_TO_BIT'/
            ' : ',$);
   ;MINPUT (Chamber) ECUT(IRA),PCUT(IRA),DOSE_ZONE(IRA),
   IREGION_TO_BIT(IRA); (2F15.0,2I5);
   IF(ECUT(IRA) < ECUTIN)[ECUT(IRA)=ECUTIN;]
   IF(PCUT(IRA) < PCUTIN)[PCUT(IRA)=PCUTIN;]
   OUTPUT ECUT(IRA),PCUT(IRA),DOSE_ZONE(IRA),
     IREGION_TO_BIT(IRA); (2F10.4,I5,I15);
   OUTPUT;(' For this region: ',$);
   ;$MED_INPUT(Chamber);
   MED(IRA) = MED_INDEX;
   IF( DOSE_ZONE(IRA) > $MAX_DOSE_ZONE )[
     ;OUTPUT ICM_Chamber,$MAX_DOSE_ZONE;
        (//'***ERROR IN CM ',I4,' (CHAMBER):'/
 'DOSE_ZONE # chamber wall, gap, and/or container wall > $MAX_DOSE_ZONE.'/
      'DOSE_ZONE # set to ',I4,' for now.'/
  'Probably need to change $MAX_DOSE_ZONE in beam_user_macros.mortran'//);
     DOSE_ZONE(IRA)=$MAX_DOSE_ZONE;
     IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
   ]
   ELSEIF(DOSE_ZONE(IRA).NE.0)[
      IPLOTFLAG=1;"set flag: CHAMBER is used for dose scoring"
      ZPLOTCHM(DOSE_ZONE(IRA))=Z_Chamber(IM);
      ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_Chamber(IM+1);
   ]
]"end of chamber wall, gap and container wall inputs"

IRM=0;
DO I=1,N_TOP_Chamber[ "put here because we need to know N_CHM_Chamber"
  IM=N_CHM_Chamber+I;"starting # for the top part"
  RCYS_Chamber(IM, 1)=RCYSTEMP(I);
  RCYS2_Chamber(IM,1)=RCYS_Chamber(IM,1)**2;
  Z_Chamber(IM+1)=ZTEMP(I);
  IRA = IRA+1;
  IRM=IRM+1;
  IR_Chamber = IR_Chamber+1;
  ECUT(IRA)=ECUTTEMP(IRM);
  PCUT(IRA)=PCUTTEMP(IRM);
  DOSE_ZONE(IRA)=DOSE_ZONETEMP(IRM);
  IREGION_TO_BIT(IRA)=IREGION_TO_BITTEMP(IRM);
  MED(IRA)=MEDTEMP(IRM);
  IF(DOSE_ZONE(IRA).NE.0)[
        IPLOTFLAG=1;"set flag: CHAMBER is used for dose scoring"
        ZPLOTCHM(DOSE_ZONE(IRA))=Z_Chamber(IM);
        ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_Chamber(IM+1);
  ]
  IRA = IRA+1;"for outer region of this layer"
  IR_Chamber =IR_Chamber +1;
  IRM=IRM+1;
  ECUT(IRA)=ECUTTEMP(IRM);
  PCUT(IRA)=PCUTTEMP(IRM);
  DOSE_ZONE(IRA)=DOSE_ZONETEMP(IRM);
  IREGION_TO_BIT(IRA)=IREGION_TO_BITTEMP(IRM);
  MED(IRA)=MEDTEMP(IRM);
  IF(DOSE_ZONE(IRA).NE.0)[
        IPLOTFLAG=1;"set flag: CHAMBER is used for dose scoring"
        ZPLOTCHM(DOSE_ZONE(IRA))=Z_Chamber(IM);
        ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_Chamber(IM+1);
  ]
]

THICK3=0.;

IF(N_BOT_Chamber~=0)[
   OUTPUT N_BOT_Chamber;
   (/' INPUTS FOR THE BOTTOM PART (ALTOGETHER ',I4,' LAYERS):');
   OUTPUT;(/' SIMILAR TO THE TOP PART, EACH LAYER OF THE BOTTOM PART'/
   ' IS DIVIDED INTO AN INNER DISC-SHAPED REGION AND AN OUTER ANNULAR'/
   ' REGION BY THE INNER RADIUS, RCYL.'/
   ' FOR LAYERS OF EQUAL THICKNESS, INNER RADIUS & MEDIA,'/
   ' INPUT ZTHICK,RCYL & N-BOT (2F15.0,I5, in one line)'/
   ' OTHERWISE, INPUT ZTHICK & RCYL FOR EACH LAYER STARTING FROM 1ST',
   ' LAYER'/
   ' (2F15.0)',$);
   IM=N_CHM_Chamber+N_TOP_Chamber+1;"starting # for the bottom part"
   ;MINPUT (Chamber) ZTHICK, RCYS_Chamber(IM, 1),JM;(2F15.0,I5);
   OUTPUT ZTHICK, RCYS_Chamber(IM, 1),JM;(2F15.5,I5);
   IF(ZTHICK<0.0)[
     OUTPUT ICM_Chamber;
      (//'***ERROR IN CM ',I4,' (CHAMBER):'/
         'Thickness of layer 1 in bottom part < 0.0.'//);
     IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
   ]
   IF(RCYS_Chamber(IM, 1)<0.0)[
     OUTPUT ICM_Chamber;
      (//'***ERROR IN CM ',I4,' (CHAMBER):'/
         'RCYS of layer 1, bottom part < 0.0'//);
     IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
   ]
   ELSEIF(RCYS_Chamber(IM,1) > RMAX_CM(ICM_Chamber))[
     OUTPUT ICM_Chamber;
      (//'***WARNING IN CM ',I4,' (CHAMBER):'/
         'RCYS of layer 1, bottom part > RMAX_CM'//);
     WRITE(IOUTLIST,'(//''***WARNING IN CM '',I4,
       '' (CHAMBER):''/
       ''RCYS of layer 1, bottom part > RMAX_CM''//)')
        ICM_Chamber;
   ]
   RCYS2_Chamber(IM,1)=RCYS_Chamber(IM,1)**2;
   Z_Chamber(IM+1)=Z_Chamber(N_CHM_Chamber+1)+ZTHICK;

  IF(JM.EQ.N_BOT_Chamber)["for equal thickness and radius"
     IRA = IRSTART_Chamber+N_CHM_Chamber+3+2*N_TOP_Chamber;
     IR_Chamber = N_CHM_Chamber+3+2*N_TOP_Chamber+1;
     OUTPUT N_BOT_Chamber;
     (/' ALL THE',I5,' LAYERS HAVE THE SAME THICKNESS & RADIUS'/);
     OUTPUT ZTHICK, RCYS_Chamber(IM,1);
     (/' FOR ALL LAYERS, ZTHICK, RCYL = ',2F15.5);
     OUTPUT;(/
      ' ECUT,PCUT,DOSE ZONE(0=>do not score dose),IREGION_TO_BIT',/
      ' for inner regions'/
       ' : ',$);
     ;MINPUT (Chamber) ECUT(IRA),PCUT(IRA),DOSE_ZONE(IRA),
      IREGION_TO_BIT(IRA); (2F15.0,2I5);
      IF(ECUT(IRA) < ECUTIN)[ECUT(IRA)=ECUTIN;]
      IF(PCUT(IRA) < PCUTIN)[PCUT(IRA)=PCUTIN;]
      OUTPUT ECUT(IRA),PCUT(IRA), DOSE_ZONE(IRA),
      IREGION_TO_BIT(IRA);  (2F10.4,I5,I15);
      OUTPUT;(' For inner region :',$);
      ;$MED_INPUT(Chamber);
      MED(IRA) = MED_INDEX;
      IF( DOSE_ZONE(IRA) > $MAX_DOSE_ZONE )[
        ;OUTPUT ICM_Chamber, $MAX_DOSE_ZONE;
        (/'***ERROR IN CM ',I4,' (CHAMBER):'/
        'DOSE_ZONE # of inner cylinders in bottom part > $MAX_DOSE_ZONE.'/
        'DOSE_ZONE set to ',I4,' for now.'/
        'Probably need to change $MAX_DOSE_ZONE in beam_user_macros.mortran'//);
        DOSE_ZONE(IRA)=$MAX_DOSE_ZONE;
        IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
      ]
      ELSEIF(DOSE_ZONE(IRA).NE.0)[
         IPLOTFLAG=1;"set flag: CHAMBER is used for dose scoring"
         ZPLOTCHM(DOSE_ZONE(IRA))=Z_Chamber(IM);
         ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_Chamber(IM+1);
      ]
      IRA=IRA+1;
      IR_Chamber=IR_Chamber+1;
      ;OUTPUT;(' ECUT,PCUT,DOSE ZONE(0=>do not score dose),IREGION_TO_BIT',
      ' for outer regions'/' :',$);
      ;MINPUT (Chamber) ECUT(IRA),PCUT(IRA),DOSE_ZONE(IRA),
      IREGION_TO_BIT(IRA); (2F15.0,2I5);
      IF(ECUT(IRA) < ECUTIN)[ECUT(IRA)=ECUTIN;]
      IF(PCUT(IRA) < PCUTIN)[PCUT(IRA)=PCUTIN;]
      ;OUTPUT ECUT(IRA),PCUT(IRA), DOSE_ZONE(IRA),
      IREGION_TO_BIT(IRA);  (2F10.4,I5,I15);
      OUTPUT;(' For outer region :',$);
      ;$MED_INPUT(Chamber);
      MED(IRA) = MED_INDEX;
      IF( DOSE_ZONE(IRA) > $MAX_DOSE_ZONE )[
        ;OUTPUT ICM_Chamber, $MAX_DOSE_ZONE;
       (/'***ERROR IN CM ',I4,' (CHAMBER):'/
       'DOSE_ZONE # of annuli in bottom part > $MAX_DOSE_ZONE.'/
       'DOSE_ZONE set to ',I4,' for now.'/
       'Probably need to change $MAX_DOSE_ZONE in beam_user_macros.mortran'//);
        DOSE_ZONE(IRA)=$MAX_DOSE_ZONE;
        IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
      ]
      ELSEIF(DOSE_ZONE(IRA).NE.0)[
         IPLOTFLAG=1;"set flag: CHAMBER is used for dose scoring"
         ZPLOTCHM(DOSE_ZONE(IRA))=Z_Chamber(IM);
         ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_Chamber(IM+1);
      ]
      DO IM=N_CHM_Chamber+N_TOP_Chamber+2,
          N_CHM_Chamber+N_TOP_Chamber+N_BOT_Chamber[
        Z_Chamber(IM+1)=Z_Chamber(IM)+ZTHICK;
        RCYS2_Chamber(IM,1)=
        RCYS2_Chamber(N_CHM_Chamber+N_TOP_Chamber+1,1);
        IRA = IRA+1;"for inner region"
        ECUT(IRA)=ECUT(IRSTART_Chamber+N_CHM_Chamber+3+2*N_TOP_Chamber);
        PCUT(IRA)=PCUT(IRSTART_Chamber+N_CHM_Chamber+3+2*N_TOP_Chamber);
        DOSE_ZONE(IRA)=
             DOSE_ZONE(IRSTART_Chamber+N_CHM_Chamber+3+2*N_TOP_Chamber);
        IF(DOSE_ZONE(IRA).NE.0)[
           IPLOTFLAG=1;"set flag: CHAMBER is used for dose scoring"
           ZPLOTCHM(DOSE_ZONE(IRA))=Z_Chamber(IM);
           ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_Chamber(IM+1);
        ]
        MED(IRA)=MED(IRSTART_Chamber+N_CHM_Chamber+3+2*N_TOP_Chamber);
        IRA = IRA+1;"for outer region"
        ECUT(IRA)=ECUT(IRSTART_Chamber+N_CHM_Chamber+4+2*N_TOP_Chamber);
        PCUT(IRA)=PCUT(IRSTART_Chamber+N_CHM_Chamber+4+2*N_TOP_Chamber);
        DOSE_ZONE(IRA)=
           DOSE_ZONE(IRSTART_Chamber+N_CHM_Chamber+4+2*N_TOP_Chamber);
        IF(DOSE_ZONE(IRA).NE.0)[
           IPLOTFLAG=1;"set flag: CHAMBER is used for dose scoring"
           ZPLOTCHM(DOSE_ZONE(IRA))=Z_Chamber(IM);
           ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_Chamber(IM+1);
        ]
        MED(IRA)=MED(IRSTART_Chamber+N_CHM_Chamber+4+2*N_TOP_Chamber);
      ]
      THICK3=ZTHICK*FLOAT(N_BOT_Chamber);
  ]"end of equal thickness and radius input"
  ELSE["for different thicknesses, radii or media"
     IRA = IRSTART_Chamber+N_CHM_Chamber+3+2*N_TOP_Chamber;
     IR_Chamber = N_CHM_Chamber+3+2*N_TOP_Chamber+1;
     IF(N_BOT_Chamber>1)[ OUTPUT N_BOT_Chamber;
         (/' THE',I4, ' LAYERS IN THE BOTTOM PART HAVE DIFFERENT'/
            ' INNER RADII, THICKNESS, AND/OR MEDIA.');
     ]
     OUTPUT 1;(/' FOR LAYER',I4,' IN BOTTOM PART:');
     OUTPUT ZTHICK,RCYS_Chamber(IM, 1);
     (/' ZTHICK, RCYL =',2F15.5);
     THICK3=ZTHICK;
     OUTPUT;(/' ECUT,PCUT,DOSE ZONE(0=>do not score dose),'/
            ' IREGION_TO_BIT for inner region'/
            ' : ',$);
     ;MINPUT (Chamber) ECUT(IRA),PCUT(IRA),DOSE_ZONE(IRA),
      IREGION_TO_BIT(IRA); (2F15.0,2I5);
     IF(ECUT(IRA) < ECUTIN)[ECUT(IRA)=ECUTIN;]
     IF(PCUT(IRA) < PCUTIN)[PCUT(IRA)=PCUTIN;]
     ;OUTPUT ECUT(IRA),PCUT(IRA), DOSE_ZONE(IRA),
      IREGION_TO_BIT(IRA);  (2F10.4,I5,I15);
     OUTPUT;(' For inner region :',$);
     ;$MED_INPUT(Chamber);
     MED(IRA) = MED_INDEX;
     IF( DOSE_ZONE(IRA) > $MAX_DOSE_ZONE )[
       ;OUTPUT ICM_Chamber, $MAX_DOSE_ZONE;
       (//'***ERROR IN CM ',I4,' (CHAMBER):'/
  'DOSE_ZONE # of inner cylinder in 1st layer, bottom part > $MAX_DOSE_ZONE.'/
    'DOSE_ZONE # set to ',I4,' for now.'/
    'Probably need to change $MAX_DOSE_ZONE in beam_user_macros.mortran'//);
       DOSE_ZONE(IRA)=$MAX_DOSE_ZONE;
       IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
     ]
     ELSEIF(DOSE_ZONE(IRA).NE.0)[
         IPLOTFLAG=1;"set flag: CHAMBER is used for dose scoring"
         ZPLOTCHM(DOSE_ZONE(IRA))=Z_Chamber(IM);
         ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_Chamber(IM+1);
     ]
     IRA = IRA+1;"for outer region of this layer"
     IR_Chamber =IR_Chamber +1;
     ;OUTPUT;(' ECUT,PCUT,DOSE ZONE(0=>do not score dose),IREGION_TO_BIT',
     ' for outer region'/' :',$);
     ;MINPUT (Chamber) ECUT(IRA),PCUT(IRA),DOSE_ZONE(IRA),
      IREGION_TO_BIT(IRA); (2F15.0,2I5);
     IF(ECUT(IRA) < ECUTIN)[ECUT(IRA)=ECUTIN;]
     IF(PCUT(IRA) < PCUTIN)[PCUT(IRA)=PCUTIN;]
     ;OUTPUT ECUT(IRA),PCUT(IRA), DOSE_ZONE(IRA),
       IREGION_TO_BIT(IRA);  (2F10.4,I5,I15);
     OUTPUT;(' For outer region :',$);
     ;$MED_INPUT(Chamber);
     MED(IRA) = MED_INDEX;
     IF( DOSE_ZONE(IRA) > $MAX_DOSE_ZONE )[
       ;OUTPUT ICM_Chamber, $MAX_DOSE_ZONE;
       (//'***ERROR IN CM ',I4,' (CHAMBER):'/
  'DOSE_ZONE # of outer annulus in 1st layer, bottom part > $MAX_DOSE_ZONE.'/
        'DOSE_ZONE # set to ',I4,' for now.'/
     'Probably need to change $MAX_DOSE_ZONE in beam_user_macros.mortran'//);
       DOSE_ZONE(IRA)=$MAX_DOSE_ZONE;
       IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
     ]
     ELSEIF(DOSE_ZONE(IRA).NE.0)[
         IPLOTFLAG=1;"set flag: CHAMBER is used for dose scoring"
         ZPLOTCHM(DOSE_ZONE(IRA))=Z_Chamber(IM);
         ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_Chamber(IM+1);
     ]
     DO IM=N_CHM_Chamber+N_TOP_Chamber+2,
            N_CHM_Chamber+N_TOP_Chamber+ N_BOT_Chamber[
        OUTPUT IM-N_CHM_Chamber-N_TOP_Chamber;
        (/' FOR LAYER',I4,' OF THE BOTTOM PART:');
        OUTPUT;
        (/' INPUT ZTHICK & RADIUS:',$);
        ;MINPUT (Chamber) ZTHICK, RCYS_Chamber(IM, 1);(2F15.0);
        OUTPUT ZTHICK, RCYS_Chamber(IM, 1);(2F12.5);
        IF(ZTHICK<0.0)[
           OUTPUT ICM_Chamber, IM-N_CHM_Chamber-N_TOP_Chamber;
          (//'***ERROR IN CM ',I4,' (CHAMBER):'/
             'Thickness of layer ',I4,' in bottom part < 0.0'//);
           IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
        ]
        Z_Chamber(IM+1)=Z_Chamber(IM)+ZTHICK;THICK3=THICK3+ZTHICK;
        IF( RCYS_Chamber(IM,1)<0.0 )[
          OUTPUT ICM_Chamber, IM-N_CHM_Chamber-N_TOP_Chamber;
           (//'***ERROR IN CM ',I4,' (CHAMBER):'/
            'Radius of inner cylinder in layer ',I4,' of bottom part < 0.0'//);
          IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
        ]
        ELSEIF(RCYS_Chamber(IM,1) > RMAX_CM(ICM_Chamber))[
          OUTPUT ICM_Chamber, IM-N_CHM_Chamber-N_TOP_Chamber;
          (//'***WARNING IN CM ',I4,' (CHAMBER):'/
         'Radius of inner cylinder in layer ',I4,' of bottom part > RMAX_CM'//);
          WRITE(IOUTLIST,'(//''***WARNING IN CM '',
          I4,'' (CHAMBER):''/
          ''Radius of inner cylinder in layer '',
          I4,'' of bottom part > RMAX_CM''//)')
          ICM_Chamber, IM-N_CHM_Chamber-N_TOP_Chamber;
        ]
        RCYS2_Chamber(IM,1)=RCYS_Chamber(IM,1)**2;
        "note: each layer has 2 regions in this part"
        IRA = IRA+1;"for inner region of this layer"
        IR_Chamber =IR_Chamber +1;
        ;OUTPUT;(' ECUT,PCUT,DOSE ZONE(0=>do not score dose),',
        'IREGION_TO_BIT for inner region'/' :',$);
        ;MINPUT (Chamber) ECUT(IRA),PCUT(IRA),DOSE_ZONE(IRA),
           IREGION_TO_BIT(IRA); (2F15.0,2I5);
        IF(ECUT(IRA) < ECUTIN)[ECUT(IRA)=ECUTIN;]
        IF(PCUT(IRA) < PCUTIN)[PCUT(IRA)=PCUTIN;]
        ;OUTPUT ECUT(IRA),PCUT(IRA), DOSE_ZONE(IRA),
          IREGION_TO_BIT(IRA);  (2F10.4,I5,I15);
        OUTPUT;(' For inner region :',$);
        ;$MED_INPUT(Chamber);
        MED(IRA) = MED_INDEX;
        IF( DOSE_ZONE(IRA) > $MAX_DOSE_ZONE )[
       ;OUTPUT ICM_Chamber, IM-N_CHM_Chamber-N_TOP_Chamber,$MAX_DOSE_ZONE;
         (//'***ERROR IN CM ',I4,' (CHAMBER):'/
          'DOSE_ZONE # of inner cylinder in layer ',I4,
          ' of bottom part > $MAX_DOSE_ZONE.'/
          'DOSE_ZONE # set to ',I4,' for now.'/
  'Probably need to change $MAX_DOSE_ZONE in beam_user_macros.mortran'//);
            DOSE_ZONE(IRA)=$MAX_DOSE_ZONE;
            IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
        ]
        ELSEIF(DOSE_ZONE(IRA).NE.0)[
           IPLOTFLAG=1;"set flag: CHAMBER is used for dose scoring"
           ZPLOTCHM(DOSE_ZONE(IRA))=Z_Chamber(IM);
           ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_Chamber(IM+1);
        ]
        IRA = IRA+1;"for outer region of this layer"
        IR_Chamber =IR_Chamber +1;
        ;OUTPUT;(' ECUT,PCUT,DOSE ZONE(0=>do not score dose),',
        'IREGION_TO_BIT for outer region'/' :',$);
        ;MINPUT (Chamber) ECUT(IRA),PCUT(IRA),DOSE_ZONE(IRA),
           IREGION_TO_BIT(IRA); (2F15.0,2I5);
        IF(ECUT(IRA) < ECUTIN)[ECUT(IRA)=ECUTIN;]
        IF(PCUT(IRA) < PCUTIN)[PCUT(IRA)=PCUTIN;]
        ;OUTPUT ECUT(IRA),PCUT(IRA), DOSE_ZONE(IRA),
            IREGION_TO_BIT(IRA);  (2F10.4,I5,I15);
        OUTPUT;(' For outer region :',$);
        ;$MED_INPUT(Chamber);
        MED(IRA) = MED_INDEX;
        IF( DOSE_ZONE(IRA) > $MAX_DOSE_ZONE )[
       ;OUTPUT ICM_Chamber, IM-N_CHM_Chamber-N_TOP_Chamber,$MAX_DOSE_ZONE;
          (//'***ERROR IN CM ',I4,' (CHAMBER):'/
          'DOSE_ZONE # of outer annulus in layer ',I4,
          ' of bottom part > $MAX_DOSE_ZONE.'/
          'DOSE_ZONE # set to ',I4,' for now.'/
   'Probably need to change $MAX_DOSE_ZONE in beam_user_macros.mortran'//);
           DOSE_ZONE(IRA)=$MAX_DOSE_ZONE;
           IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
        ]
        ELSEIF(DOSE_ZONE(IRA).NE.0)[
           IPLOTFLAG=1;"set flag: CHAMBER is used for dose scoring"
           ZPLOTCHM(DOSE_ZONE(IRA))=Z_Chamber(IM);
           ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_Chamber(IM+1);
        ]
     ]"end of do loop"
  ]"end of non-equal thickness, etc."
]"end of bottom part"


ZTHICK_Chamber=THICK1+THICK2+THICK3;"total thickness of the component module"
ZMAX_Chamber=ZMIN_Chamber+ZTHICK_Chamber;
"
"  parameter definition
"  ====================
"
"establish the front surface of this CM, if it is the first module,
"Z_min_CM(1) will be given by the user in BEAM general inputs.

ZFRONT_Chamber = Z_min_CM(ICM_Chamber);
"
"establish start of next CM
"
Z_min_CM(ICM_Chamber+1) = ZMAX_Chamber;

"
"
"  set up the air gap, if present
"  =========================================
"
"  The air gap has the highest region number in the CM, even though it is at
"  the top of the component module.  This is to allow the assignment of region
"  numbers on input of the parameters of each local region (mainly to assign the
"  medium number of the region).  The air gap is then assigned after all of the
"  CM parameters have been input.
"
"note that if this is the first CM (ICM_$chamber=1) then the gap thickness
"Z_gap_THICK(ICM_$chamber) = ZMIN_Chamber - Z_min_CM(1),
"which is used as a flag whether there is an air gap.

Z_gap_THICK(ICM_Chamber) = ZMIN_Chamber - Z_min_CM(ICM_Chamber);

IF (Z_gap_THICK(ICM_Chamber) = 0.0)[
   Z_gap_THICK(ICM_Chamber) = 0.;
   N_GAP_Chamber = 0; "no air gap is needed for this CM
]
ELSE[
   N_GAP_Chamber = 1; "this CM has an air gap"
   OUTPUT Z_min_CM(ICM_Chamber),ZMIN_Chamber;
   (/' THERE WILL BE AN AIR GAP SET UP BETWEEN Z=',F8.4,' AND Z=',F8.4/);
   IRA = IRSTART_Chamber+N_Chamber; "absolute region number of air gap
   MED(IRA) = AIR_INDEX; "medium is air
   ECUT(IRA)=ECUTIN;
   PCUT(IRA)=PCUTIN;
   ESAVE(IRA)=ESAVE_GLOBAL;
   ECUTRR(IRA)=ECUT(IRA);
]

"
"  set up region numbers
"  =====================
"
"  This CM has N_Chamber+N_GAP_$chamber regions
"
;
IREND_Chamber = (IRSTART_Chamber -1) +N_Chamber+N_GAP_Chamber;
       "Index of last region"
NREG = NREG+N_Chamber+N_GAP_Chamber;
       "Total number of regions in full geometry up"
       "to and including this CM"
IF (NREG <= $MXREG)[
   IR_start_CM(ICM_Chamber+1) = IREND_Chamber+1;
   "It has not exceeded maximum region number. "
   "Index of first region in next CM:"
]
ELSE[
   OUTPUT ICM_Chamber,NREG,$MXREG;
   (//'***ERROR IN CM ',I4,' (CHAMBER):'/
      I4,' regions requested, only ',I4,' available'//);
   IERR_GEOM(ICM_Chamber)=IERR_GEOM(ICM_Chamber)+1;
]

"  Establish CM boundary
"  =====================
RMAX_CM_FLAG(ICM_Chamber) = 1; "put a boundary about CM"
"
"  Establish dose-scoring zones and bit setting for each region
"  ============================================================
"
IRA = IRSTART_Chamber-1; "absolute region number"
DO IR_Chamber=1,N_Chamber["loop over local region number
   IRA = IRA+1;
   "dose-scoring zones"
   NDOSE_ZONE = MAX(DOSE_ZONE(IRA),NDOSE_ZONE);"Number of dose zones"
   IF(NDOSE_ZONE>$MAX_DOSE_ZONE)[
      OUTPUT;(///' IN CHAMBER, NDOSE_ZONE OUT OF RANGE!!!'///);
      STOP;
   ]
   MAX_BIT = MAX(IREGION_TO_BIT(IRA),MAX_BIT); " current maxmum"
   "charged particle range rejection parameters"
   ESAVE(IRA)=ESAVE_GLOBAL; "Particles with total energies below ESAVE are"
                            "considered for range rejection"
   ECUTRR(IRA)=ECUT(IRA); "Minimum energy on exit from region"
   E_min_out(ICM_Chamber)=ECUT(IRA); "Minimum energy on exit from CM"
] "end of loop over IR_Chamber"

"Set up minimum thicknesses for range rejection purposes. In this case "
"we check the last 5 slabs. If we ever need more than 5 slabs, we should"
"extend this or do something fancy like group similar materials."
"Only do this for the central ion chamber part "

I=1; J=1;        " J is index for Z_min_thick , I for layer index "
LOOP[
   Z_min_thick(ICM,J)=0.0;     " init. "
   IRA = I + IRSTART_Chamber-1;   "absolute region"
   IF( MED(IRA)~=1) [" AIR WILL BE COUNTED AFTERWARDS "
       MED_min_thick(ICM, J)=MED(IRA);
       Z_min_thick(ICM,J) = Z_Chamber(I+1)-Z_Chamber(I);
       " first assignment "
   ]
   DO IR_Chamber=I+1, N_CHM_Chamber [
      "loop through all the layers, if same med added together"
       IRA = IR_Chamber + IRSTART_Chamber-1;   "absolute region"
       IF( MED(IRA)=MED_min_thick(ICM, J) )[
           Z_min_thick(ICM,J) =Z_min_thick(ICM,J)+
           (Z_Chamber(IR_Chamber+1)-Z_Chamber(IR_Chamber-1+1));
       ]
   ]     " end of the do loop "
   " now figure out where the next index I(layer) begins with "
   DO IR_Chamber=I+1, N_CHM_Chamber[
       IRA = IR_Chamber + IRSTART_Chamber-1;   "absolute region"
       III=0;
       DO II=J, 1, -1[
         IF(MED(IRA)~=MED_min_thick(ICM, II) & MED(IRA)~=1)[ III=III+1; ]
       ]
       IF( III=J )  " the next med is different from all the before "
         [ I=IR_Chamber; J=J+1; EXIT; ]   " keep the i as the next index "
                                         " J increases by one  "
   ]
]WHILE( I<=N_CHM_Chamber & J<=5 & IR_Chamber<=N_CHM_Chamber );

IF(J < 5  )[  "some not used"
    DO I=1, N_TOP_Chamber+N_BOT_Chamber[
       IRA = N_CHM_Chamber+3+2*(I-1)+1+IRSTART_Chamber-1;
       "absolute region"
       IF( RCYS_Chamber(N_CHM_Chamber+I, 1) >= RMAX_CM(ICM_Chamber)
          & MED(IRA)~=1 )[
           IF(J<5)[ J=J+1; ]
           ELSE[ EXIT; ]
           MED_min_thick(ICM, J)=MED(IRA);
           IF(I=1 & N_TOP_Chamber~=0 )[
              Z_min_thick(ICM,J) = (  Z_Chamber(I+N_CHM_Chamber+1)
                                       -ZMIN_Chamber);
           ]
           ELSEIF(I=N_TOP_Chamber+1)[
              Z_min_thick(ICM,J) = (  Z_Chamber(I+N_CHM_Chamber+1)
                                       -Z_Chamber(N_CHM_Chamber+1) );
           ]
           ELSE[
              Z_min_thick(ICM,J) = ( Z_Chamber(I+N_CHM_Chamber+1)
                                      -Z_Chamber(I-1+N_CHM_Chamber+1) );
           ]
       ]
    ]     " end of the do loop "
]

IF(J < 5)[  "some not used"
    Zminthick=0.0;
    DO I=1, J [  Zminthick=Zminthick+Z_min_thick(ICM, I); ]
    J=J+1;
    Z_min_thick(ICM, J)=ZTHICK_Chamber+Z_gap_thick(ICM_Chamber)-Zminthick;
    MED_min_thick(ICM,J) = AIR_INDEX; "AIR_INDEX is 0 or 1"
    DO I = J+1,5[
        Z_min_thick(ICM,I) = 0.0;
        MED_min_thick(ICM,I) = 0;
    ]"end of do loop on I"
]"end J < 5 case"

OUTPUT; (/' MRNGE: ENTER 1 to estimate thickness of Chamber for ECUTRR'/
          ' calculations in automated range rejection; otherwise, do'/
          ' not calculate ECUTRR',$);
;MINPUT (Chamber) MRNGE; (I5);
OUTPUT MRNGE;(I5);
OUTPUT; (' ');
IF(MRNGE~=1)[
    DO I=1, 5[Z_min_thick(ICM,I)=0.0; MED_min_thick(ICM,I)=0; ]
]
ELSE[
   OUTPUT; (/'          Z_min_thick ,     MED_min_thick  ');
   DO I=1, 5[
       IF( Z_min_thick(ICM,I)~=0.0 )[
          OUTPUT Z_min_thick(ICM,I), MED_min_thick(ICM,I);
          (10X, F8.4, 10X, I5);
       ]
   ]
]

"  return from INPUT_Chamber
"  =======================
"
RETURN;

"  error messages
"  ==============
"
:EOF_Chamber:
;OUTPUT ICM;
(//' *** ERROR *** unexpected end of file reading input for CM',I3);
STOP;

:ERROR_Chamber:
;OUTPUT ICM;(//' *** ERROR *** format error on input for CM',I3);
STOP;

"  end of INPUT_Chamber
"  ==================
"
END;  "End of INPUT_Chamber"

%E    "Start of subroutine ISUMRY_Chamber"
"*******************************************************************************
"
"                          Subroutine ISUMRY_Chamber
"                          ***********************
"
" Summarize input, write graphics file for EGS_Windows, and set parameters that
" require medium information obtained from HATCH call.
"
"*******************************************************************************

;SUBROUTINE ISUMRY_Chamber;


;IMPLICIT NONE;

;COMIN/
   BOUNDS,CMs,CM_Chamber,GEOM,IO_INFO,MEDIA,MISC,SCORE,UPHIOT,USER,EGS-IO/;

"T>
"T>**********************************
"T>TYPE DECLARATIONS FOR ISUMRY_Chamber
"T>**********************************
"T>

INTEGER
   ICOLOUR, "T>colour of CM for EGS_Windows
   IRA,     "T>absolute region number
   LAYER,
   I,J;     "T>DO loop index

$REAL  PIL,VOL_Chamber($MAX_N_Chamber);  "T>cylinder volume
"   Mass of dose zone
"   =================
"
"Need to calculate mass of dose zone here, after call to HATCH, where the region
"density is set if it was allowed to default in INPUT_$chamber.
PIL=4.0*ATAN(1.0);

I=0;
LOOP[
   I = I+1;
   IF( I<=N_CHM_Chamber ) [ LAYER=I; ]
   ELSEIF(I<=N_CHM_Chamber+3 ) [ LAYER=1; ]
   ELSE
     [LAYER=N_CHM_Chamber+(I-N_CHM_Chamber-3+1)/2;]
     " this will be used only for the top and bottom parts "
   IF(I<=N_CHM_Chamber)
   [
      VOL_Chamber(I)=PIL*RCYS2_Chamber(1,1)*(Z_Chamber(I+1)-
          Z_Chamber(I));
   ]
   ELSEIF( I=N_CHM_Chamber+1 )
   [
       VOL_Chamber(I)=PIL*(RCYS2_Chamber(1,2)-RCYS2_Chamber(1,1))
                   *(Z_Chamber(N_CHM_Chamber+1)-Z_Chamber(1));
   ]
   ELSEIF( I=N_CHM_Chamber+2 )
   [
       VOL_Chamber(I)=PIL*(RCYS2_Chamber(1,3)-RCYS2_Chamber(1,2))
                   *(Z_Chamber(N_CHM_Chamber+1)-Z_Chamber(1));
   ]
   ELSEIF( I=N_CHM_Chamber+3 )
   [
       VOL_Chamber(I)=PIL*( RMAX_CM(ICM_Chamber)*RMAX_CM(ICM_Chamber)
                   -RCYS2_Chamber(1,3))
                   *(Z_Chamber(N_CHM_Chamber+1)-Z_Chamber(1));
   ]
   ELSE
   [
       IF( (LAYER.EQ.N_CHM_Chamber+1) .AND. (N_TOP_Chamber.NE.0))
       [VOL_Chamber(I)=PIL*RCYS2_Chamber(LAYER,1)*(Z_Chamber(LAYER+1)
             -ZMIN_Chamber);]
       ELSEIF( LAYER=N_CHM_Chamber+N_TOP_Chamber+1 )
       [
           VOL_Chamber(I)=PIL*RCYS2_Chamber(LAYER,1)
                        *(Z_Chamber(LAYER+1)-Z_Chamber(N_CHM_Chamber+1));
       ]
       ELSE
       [VOL_Chamber(I)=PIL*RCYS2_Chamber(LAYER,1)*(Z_Chamber(LAYER+1)
                         -Z_Chamber(LAYER-1+1));
       ]
       I=I+1;
       IF( (LAYER.EQ.N_CHM_Chamber+1) .AND. (N_TOP_Chamber.NE.0))
       [
            VOL_Chamber(I)=PIL*( RMAX_CM(ICM_Chamber)*RMAX_CM(ICM_Chamber)
                              -RCYS2_Chamber(LAYER,1) )
                           *(Z_Chamber(LAYER+1)-ZMIN_Chamber);
       ]
       ELSEIF( LAYER=N_CHM_Chamber+N_TOP_Chamber+1 )
       [
            VOL_Chamber(I)=PIL*( RMAX_CM(ICM_Chamber)*RMAX_CM(ICM_Chamber)
                              -RCYS2_Chamber(LAYER,1) )
                       *(Z_Chamber(LAYER+1)-Z_Chamber(N_CHM_Chamber+1));
       ]
       ELSE
       [
            VOL_Chamber(I)=PIL*( RMAX_CM(ICM_Chamber)*RMAX_CM(ICM_Chamber)
                              -RCYS2_Chamber(LAYER,1) )
                       *(Z_Chamber(LAYER+1)-Z_Chamber(LAYER-1+1));
       ]
   ]
]UNTIL (I>=N_Chamber);

DO I = 1,N_Chamber
[ IF( VOL_Chamber(I) <=0.0 ) [
OUTPUT I;(/' LOCAL REGION',I4,' IN CHAMBER HAS ZERO VOLUME!'/);
"VOL_Chamber(I)=1.0;" ] ]

IRA = IRSTART_Chamber-1; "absolute region number
DO IR_Chamber=1,N_Chamber+N_GAP_Chamber ["loop over local region number
   IRA = IRA+1;
   IF(DOSE_ZONE(IRA).NE.0) ["this is a dose zone"
      ID=DOSE_ZONE(IRA);
      AMASS(ID)=AMASS(ID)+VOL_Chamber(IR_Chamber)*RHOR(IRA);
   ]
] "end of loop over IR_Chamber"

"   Summarize geometrical information for this component module in listing file
"   ===========================================================================
"
WRITE(IOUTLIST,110) ICM_Chamber,TITLE_Chamber;
WRITE(IOUTLIST,111) Z_min_CM(ICM_Chamber),RMAX_CM(ICM_Chamber);

"AIR GAP, IF PRESENT "
IF(N_GAP_Chamber~=0)[
   IRA=IRSTART_Chamber+N_Chamber;
   WRITE(IOUTLIST,1501);
   WRITE(IOUTLIST,1504)N_Chamber+1,
                       'NA',Z_min_CM(ICM_Chamber),ZMIN_Chamber-
                       Z_min_CM(ICM_Chamber),RMAX_CM(ICM_Chamber),
                       ECUT(IRA),PCUT(IRA),
                       ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),
                       (MEDIA(J,MED(IRA)),J=1,9);
   WRITE(IOUTLIST,1505);
]
" ION CHAMBER TOP PART "
IRA = IRSTART_Chamber-1+3+N_CHM_Chamber;
IF( N_TOP_Chamber~=0) [ WRITE(IOUTLIST,1204); ]
DO IR_Chamber=N_CHM_Chamber+1,N_CHM_Chamber+N_TOP_Chamber [
   IRA = IRA+1;
   I=(IR_Chamber-N_CHM_Chamber-1)*2+N_CHM_Chamber+3+1;
   IF( IR_Chamber=N_CHM_Chamber+1 ) [
      IF (MED(IRA)=0) ["Medium is vacuum"
         /ECUT(IRA),PCUT(IRA)/ = 0.0;  "avoids output overflows but not used"
         WRITE(IOUTLIST,1304) I,IR_Chamber-N_CHM_Chamber,
         ZMIN_Chamber,Z_Chamber(IR_Chamber+1)-ZMIN_Chamber,
         RCYS_Chamber(IR_Chamber,1), ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),'V','a','c','u','u','m';
      ]
      ELSE ["Medium is not vacuum"
         WRITE(IOUTLIST,1304)I,IR_Chamber-N_CHM_Chamber,
         ZMIN_Chamber,Z_Chamber(IR_Chamber+1)-ZMIN_Chamber,
         RCYS_Chamber(IR_Chamber,1), ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),
         (MEDIA(J,MED(IRA)),J=1,9);
      ]
   ]
   ELSE[
      IF (MED(IRA)=0) ["Medium is vacuum"
         /ECUT(IRA),PCUT(IRA)/ = 0.0;  "avoids output overflows but not used"
         WRITE(IOUTLIST,1304)I,IR_Chamber-N_CHM_Chamber,
         Z_Chamber(IR_Chamber),Z_Chamber(IR_Chamber+1)-
         Z_Chamber(IR_Chamber),
         RCYS_Chamber(IR_Chamber,1), ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),'V','a','c','u','u','m';
      ]
      ELSE ["Medium is not vacuum"
         WRITE(IOUTLIST,1304) I,IR_Chamber-N_CHM_Chamber,
         Z_Chamber(IR_Chamber),Z_Chamber(IR_Chamber+1)-
         Z_Chamber(IR_Chamber),
         RCYS_Chamber(IR_Chamber,1), ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),
         (MEDIA(J,MED(IRA)),J=1,9);
      ]
   ]

   IRA = IRA+1;
   I=I+1;
   IF( IR_Chamber=N_CHM_Chamber+1 ) [
     IF (MED(IRA)=0) ["Medium is vacuum"
         /ECUT(IRA),PCUT(IRA)/ = 0.0;  "avoids output overflows but not used"
         WRITE(IOUTLIST,1305) I,IR_Chamber-N_CHM_Chamber,
         ZMIN_Chamber,Z_Chamber(IR_Chamber+1)-
         ZMIN_Chamber,
         RCYS_Chamber(IR_Chamber,1), ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),'V','a','c','u','u','m';
     ]
     ELSE ["Medium is not vacuum"
         WRITE(IOUTLIST,1305) I,IR_Chamber-N_CHM_Chamber,
         ZMIN_Chamber,Z_Chamber(IR_Chamber+1)-
         ZMIN_Chamber,
         RCYS_Chamber(IR_Chamber,1), ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),
         (MEDIA(J,MED(IRA)),J=1,9);
     ]
   ]
   ELSE[
     IF (MED(IRA)=0) ["Medium is vacuum"
         /ECUT(IRA),PCUT(IRA)/ = 0.0;  "avoids output overflows but not used"
         WRITE(IOUTLIST,1305) I,IR_Chamber-N_CHM_Chamber,
         Z_Chamber(IR_Chamber),Z_Chamber(IR_Chamber+1)-
         Z_Chamber(IR_Chamber),
         RCYS_Chamber(IR_Chamber,1), ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),'V','a','c','u','u','m';
     ]
     ELSE ["Medium is not vacuum"
         WRITE(IOUTLIST,1305) I,IR_Chamber-N_CHM_Chamber,
         Z_Chamber(IR_Chamber),Z_Chamber(IR_Chamber+1)-
         Z_Chamber(IR_Chamber),
         RCYS_Chamber(IR_Chamber,1), ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),
         (MEDIA(J,MED(IRA)),J=1,9);
     ]
   ]
]

WRITE(IOUTLIST,120);
IRA = IRSTART_Chamber-1;"for chamber part"
DO IR_Chamber=1,N_CHM_Chamber [
   IRA = IRA+1;
   IF (MED(IRA)=0) ["Medium is vacuum"
      /ECUT(IRA),PCUT(IRA)/ = 0.0;  "avoids output overflows but not used"
      WRITE(IOUTLIST,130) IR_Chamber,IR_Chamber,'layer',
      Z_Chamber(IR_Chamber),
      Z_Chamber(IR_Chamber+1)-Z_Chamber(IR_Chamber),
      RCYS_Chamber(IR_Chamber,1), ECUT(IRA),PCUT(IRA),
      ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),'V','a','c','u','u','m';
   ]
   ELSE
   ["Medium is not vacuum"
      WRITE(IOUTLIST,130) IR_Chamber,IR_Chamber,'layer',
      Z_Chamber(IR_Chamber),
      Z_Chamber(IR_Chamber+1)-Z_Chamber(IR_Chamber),
      RCYS_Chamber(IR_Chamber,1), ECUT(IRA),PCUT(IRA),
      ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),
      (MEDIA(J,MED(IRA)),J=1,9);
   ]
]

" ion chamber side wall part "
IRA=IRA+1;
WRITE(IOUTLIST,1201);
IF (MED(IRA)=0) ["Medium is vacuum"
    /ECUT(IRA),PCUT(IRA)/ = 0.0;  "avoids output overflows but not used"
    WRITE(IOUTLIST,1301) IR_Chamber,'NA','entire',
         Z_Chamber(0+1),
         Z_Chamber(N_CHM_Chamber+1)-Z_Chamber(0+1),
         RCYS_Chamber(1,1), RCYS_Chamber(1,2),ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),'V','a','c','u','u','m';
]
ELSE ["Medium is not vacuum"
     WRITE(IOUTLIST,1301) IR_Chamber,'NA','entire',
         Z_Chamber(0+1),
         Z_Chamber(N_CHM_Chamber+1)-Z_Chamber(0+1),
         RCYS_Chamber(1,1), RCYS_Chamber(1,2),ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),
         (MEDIA(J,MED(IRA)),J=1,8);
]
WRITE(IOUTLIST,1310)'wall';
" ion chamber side air gap part "
IRA=IRA+1;
WRITE(IOUTLIST,1202);
IF (MED(IRA)=0) ["Medium is vacuum"
    /ECUT(IRA),PCUT(IRA)/ = 0.0;  "avoids output overflows but not used"
    WRITE(IOUTLIST,1302) IR_Chamber+1,'NA','entire',
         Z_Chamber(0+1),
         Z_Chamber(N_CHM_Chamber+1)-Z_Chamber(0+1),
         RCYS_Chamber(1,2), RCYS_Chamber(1,3), ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),'V','a','c','u','u','m';
]
ELSE ["Medium is not vacuum"
     WRITE(IOUTLIST,1302) IR_Chamber+1,'NA','entire',
         Z_Chamber(0+1),
         Z_Chamber(N_CHM_Chamber+1)-Z_Chamber(0+1),
         RCYS_Chamber(1,2), RCYS_Chamber(1,3), ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),
         (MEDIA(J,MED(IRA)),J=1,8);
]
WRITE(IOUTLIST,1311)'gap';
" ion chamber's container wall part "
IRA=IRA+1;
WRITE(IOUTLIST,1203);
IF (MED(IRA)=0) ["Medium is vacuum"
    /ECUT(IRA),PCUT(IRA)/ = 0.0;  "avoids output overflows but not used"
    WRITE(IOUTLIST,1303) IR_Chamber+2,'NA','entire',
     Z_Chamber(0+1),
     Z_Chamber(N_CHM_Chamber+1)-Z_Chamber(0+1),
         RCYS_Chamber(1,3), RMAX_CM(ICM_Chamber),
         ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),'V','a','c','u','u','m';
]
ELSE ["Medium is not vacuum"
     WRITE(IOUTLIST,1303) IR_Chamber+2,'NA','entire',
     Z_Chamber(0+1),
     Z_Chamber(N_CHM_Chamber+1)-Z_Chamber(0+1),
         RCYS_Chamber(1,3), RMAX_CM(ICM_Chamber),
         ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),
         (MEDIA(J,MED(IRA)),J=1,8);
]
WRITE(IOUTLIST,1312)'wall';

" ION CHAMBER BOTTOM PART "
IRA = IRSTART_Chamber-1+3+N_CHM_Chamber+2*N_TOP_Chamber;
IF( N_BOT_Chamber~=0 ) [ WRITE(IOUTLIST,1206); ]
DO IR_Chamber=N_CHM_Chamber+N_TOP_Chamber+1,
                 N_CHM_Chamber+N_TOP_Chamber+N_BOT_Chamber[
   IRA = IRA+1;
   I=(IR_Chamber-N_CHM_Chamber-1)*2+N_CHM_Chamber+3+1;
   IF( IR_Chamber=N_CHM_Chamber+N_TOP_Chamber+1 )[
     IF (MED(IRA)=0) ["Medium is vacuum"
         /ECUT(IRA),PCUT(IRA)/ = 0.0;  "avoids output overflows but not used"
         WRITE(IOUTLIST,1306)
         I,IR_Chamber-N_CHM_Chamber-N_TOP_Chamber,
         Z_Chamber(N_CHM_Chamber+1),Z_Chamber(IR_Chamber+1)-
         Z_Chamber(N_CHM_Chamber+1),
         RCYS_Chamber(IR_Chamber,1), ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),'V','a','c','u','u','m';
     ]
     ELSE ["Medium is not vacuum"
         WRITE(IOUTLIST,1306)
         I,IR_Chamber-N_CHM_Chamber-N_TOP_Chamber,
         Z_Chamber(N_CHM_Chamber+1),Z_Chamber(IR_Chamber+1)-
         Z_Chamber(N_CHM_Chamber+1),
         RCYS_Chamber(IR_Chamber,1), ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),
         (MEDIA(J,MED(IRA)),J=1,9);
     ]
   ]
   ELSE[
      IF (MED(IRA)=0) ["Medium is vacuum"
         /ECUT(IRA),PCUT(IRA)/ = 0.0;  "avoids output overflows but not used"
         WRITE(IOUTLIST,1306)
         I,IR_Chamber-N_CHM_Chamber-N_TOP_Chamber,
         Z_Chamber(IR_Chamber),Z_Chamber(IR_Chamber+1)-
         Z_Chamber(IR_Chamber),
         RCYS_Chamber(IR_Chamber,1), ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),'V','a','c','u','u','m';
      ]
      ELSE ["Medium is not vacuum"
         WRITE(IOUTLIST,1306)
         I,IR_Chamber-N_CHM_Chamber-N_TOP_Chamber,
         Z_Chamber(IR_Chamber),Z_Chamber(IR_Chamber+1)-
         Z_Chamber(IR_Chamber),
         RCYS_Chamber(IR_Chamber,1), ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),
         (MEDIA(J,MED(IRA)),J=1,9);
      ]
   ]

   IRA = IRA+1;
   I=I+1;
   IF( IR_Chamber=N_CHM_Chamber+N_TOP_Chamber+1 ) [
      IF (MED(IRA)=0) ["Medium is vacuum"
         /ECUT(IRA),PCUT(IRA)/ = 0.0;  "avoids output overflows but not used"
         WRITE(IOUTLIST,1307)
         I,IR_Chamber-N_CHM_Chamber-N_TOP_Chamber,
         Z_Chamber(N_CHM_Chamber+1),Z_Chamber(IR_Chamber+1)-
         Z_Chamber(N_CHM_Chamber+1),
         RCYS_Chamber(IR_Chamber,1), ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),'V','a','c','u','u','m';
      ]
      ELSE ["Medium is not vacuum"
         WRITE(IOUTLIST,1307)
         I,IR_Chamber-N_CHM_Chamber-N_TOP_Chamber,
         Z_Chamber(N_CHM_Chamber+1),Z_Chamber(IR_Chamber+1)-
         Z_Chamber(N_CHM_Chamber+1),
         RCYS_Chamber(IR_Chamber,1), ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),
         (MEDIA(J,MED(IRA)),J=1,9);
      ]
   ]
   ELSE[
     IF (MED(IRA)=0)["Medium is vacuum"
         /ECUT(IRA),PCUT(IRA)/ = 0.0;  "avoids output overflows but not used"
         WRITE(IOUTLIST,1307)
         I,IR_Chamber-N_CHM_Chamber-N_TOP_Chamber,
         Z_Chamber(IR_Chamber),Z_Chamber(IR_Chamber+1)-
         Z_Chamber(IR_Chamber),
         RCYS_Chamber(IR_Chamber,1), ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),'V','a','c','u','u','m';
     ]
     ELSE["Medium is not vacuum"
         WRITE(IOUTLIST,1307)
         I,IR_Chamber-N_CHM_Chamber-N_TOP_Chamber,
         Z_Chamber(IR_Chamber),Z_Chamber(IR_Chamber+1)-
         Z_Chamber(IR_Chamber),
         RCYS_Chamber(IR_Chamber,1), ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),
         (MEDIA(J,MED(IRA)),J=1,9);
     ]
   ]
]

DO I=1,N_Chamber[IF(VOL_Chamber(I)<=0.0 )[WRITE(IOUTLIST,141)I;]]

110 FORMAT(///1x,79('-')/
            '  Component module',I3,' is an ion chamber or phantom ',
            '(CHAMBER)'/ 1x,79('-')//T5,'Title: ',68A1);
111 FORMAT(/T2,'Chamber region & geometry parameters:',
           /T2,'-------------------------------------',
           /T2,'Distance of front of CM from reference plane = ',
           F15.5,' cm',
           /T2,'Radius of outer boundary of CM = ',F15.5,' cm');

120 FORMAT(/T5,'Chamber CENTRAL PART parameters:',
           /T5,'--------------------------------',
           /T1,' local layer loc.   Z    Zthick  rad.  electr photon',
           ' range-reject  dose  medium',
           /T1,' reg              front                cutoff cutoff',
           ' level   max   zone'
           /T1,'                   (cm)    (cm)  (cm)   (MeV)  (MeV)',
           ' (MeV)  (MeV)');
130 FORMAT(T1,I3,I5,A7,F8.3,F8.4,F7.3,4F7.3,I3,2X,9A1);
131 FORMAT(T9,A8);
1201 FORMAT(/T5,'Chamber WALL parameters:',
           /T5,'--------------------------',
        /T1,' local layer loc.  Z    Zthick     rad.     electr photon',
        ' range-reject dose med',
        /T1,' reg             front         inner  outer cutoff cutoff',
        ' level  max   zone'
        /T1,'                 (cm)    (cm)      (cm)      (MeV)  (MeV)',
        ' (MeV) (MeV)');
1301 FORMAT(T1,I3,A4,A7,F8.3,F7.3,2F7.3,2F6.3,F7.3,F6.3,I3,1X,8A1);
1310 FORMAT(T8,A7);
1202 FORMAT(/T5,'Chamber side air gap parameters:',
           /T5,'---------------------------------',
        /T1,' local layer loc.  Z    Zthick     rad.     electr photon',
        ' range-reject dose med',
        /T1,' reg             front         inner  outer cutoff cutoff',
        ' level  max   zone'
        /T1,'                 (cm)    (cm)      (cm)      (MeV)  (MeV)',
        ' (MeV) (MeV)');
1302 FORMAT(T1,I3,A4,A7,F8.3,F7.3,2F7.3,2F6.3,F7.3,F6.3,I3,1X,8A1);
1311 FORMAT(T8,A7);
1203 FORMAT(/T5,'Chamber container wall parameters:',
           /T5,'-----------------------------------',
        /T1,' local layer loc.  Z    Zthick     rad.     electr photon',
        ' range-reject dose med',
        /T1,' reg             front         inner  outer cutoff cutoff',
        ' level  max   zone'
        /T1,'                 (cm)    (cm)      (cm)      (MeV)  (MeV)',
        ' (MeV) (MeV)');
1303 FORMAT(T1,I3,A4,A7,F8.3,F7.3,2F7.3,2F6.3,F7.3,F6.3,I3,1X,8A1);
1312 FORMAT(T8,A7);
1204 FORMAT(/T5,'Chamber TOP PART parameters:',
           /T5,'-----------------------------',
           /T1,' local layer loc.   Z    Zthick  inner electr photon',
           ' range-reject  dose  medium',
           /T1,' reg              front           rad. cutoff cutoff',
           ' level   max   zone'
           /T1,'                   (cm)   (cm)    (cm)  (MeV)  (MeV)',
           ' (MeV)  (MeV)');
1304 FORMAT(T1,I3,I5,'  inner',F8.3,F8.4,5F7.3,I3,2X,9A1);
1305 FORMAT(T1,I3,I5,'  outer',F8.3,F8.4,5F7.3,I3,2X,9A1);
1206 FORMAT(/T5,'Chamber BOTTOM PART parameters:',
           /T5,'--------------------------------',
           /T1,' local layer loc.   Z    Zthick  inner electr photon',
           ' range-reject  dose  medium',
           /T1,' reg              front           rad. cutoff cutoff',
           ' level   max   zone'
           /T1,'                   (cm)   (cm)    (cm)  (MeV)  (MeV)',
           ' (MeV)  (MeV)');
1306 FORMAT(T1,I3,I5,'  inner',F8.3,F8.4,5F7.3,I3,2X,9A1);
1307 FORMAT(T1,I3,I5,'  outer',F8.3,F8.4,5F7.3,I3,2X,9A1);
1501 FORMAT(/T5,'Air gap parameters:',
           /T5,'-------------------',
           /T1,' local layer loc.   Z    Zthick   rad. electr photon',
           ' range-reject  dose  medium',
           /T1,' reg              front                cutoff cutoff',
           ' level   max   zone'
           /T1,'                   (cm)   (cm)    (cm)  (MeV)  (MeV)',
           ' (MeV)  (MeV)');
1504 FORMAT(T1,I3,A5,'  airgap',F8.3,F7.3,5F7.3,I3,2X,9A1);
1505 FORMAT(T8,'   at top');


141 FORMAT(/' LOCAL REGION',I4,' IN CHAMBER HAS ZERO VOLUME!');



"   Output representation of this component module to file for EGS_Windows
"   ======================================================================
"

IF(IWATCH = 4 | IZLAST = 2)
[  "Creat a graphics file "
   ;$SELECT-COLOUR;
    DO I=1, N_CHM_Chamber+N_TOP_Chamber+N_BOT_Chamber
    [
       WRITE(IOUTGEOM,201)ICOLOUR,'CYLZ',Z_Chamber(I-1+1),
                      RCYS_Chamber(I,1),
                Z_Chamber(I+1),RCYS_Chamber(I,1),0.0,0.0;
    ]
]"End of graphics output"

201   FORMAT(' ',I1,A4,10(F7.2,','));


"   end of ISUMRY_Chamber
"   ===================
"
RETURN;
END; "End of subroutine ISUMRY_Chamber"
%E "Start of subroutine HOWNEAR_Chamber
"*******************************************************************************
"
SUBROUTINE HOWNEAR_Chamber(DIST);
"
" Returns min. distance to nearest region boundary
" Used to be a function, but changed to a subroutine for convenience
"  and consistency.
"*******************************************************************************
$IMPLICIT-NONE;

;COMIN/CM_Chamber,STACK/;

INTEGER LAYER;
$REAL RF_Chamber, RF2_Chamber, DIST;

IR_Chamber=IR(NP)-IRSTART_Chamber+1;"local region # "

" CALC. THE LAYER # "
IF( IR_Chamber<=N_CHM_Chamber ) [ LAYER=IR_Chamber; ]
ELSEIF(IR_Chamber<=N_CHM_Chamber+3 ) [ LAYER=1; ]
ELSEIF(IR_Chamber<=N_Chamber)[
    LAYER=N_CHM_Chamber+(IR_Chamber-N_CHM_Chamber-3+1)/2;
    "last term gives the layer number, i.e., "
    "for region 1 in top part, the layer number(integer)=(1+1)/2=1"
    "for region 2 in top part, the layer number(integer)=(2+1)/2=1"
    "for region 3 in top part, the layer number(integer)=(3+1)/2=2"
    "......                                        changed by CMa."
    " this will be used only for the top and bottom parts         "
]

RF2_Chamber=X(NP)**2+Y(NP)**2;
RF_Chamber=SQRT(RF2_Chamber);
IF( IR_Chamber<=N_CHM_Chamber ) [" inside the main ion chamber part "
    DIST=MIN(  Z(NP)-Z_Chamber(LAYER),   " upstream "
    Z_Chamber(LAYER+1)-Z(NP),     " downstream"
    RCYS_Chamber(LAYER,1)-RF_Chamber  );
    RETURN;
]
ELSEIF( IR_Chamber<=N_CHM_Chamber +3 )  [
    " in the side wall or side gap or container wall "
    DIST=MIN(  Z(NP)-Z_Chamber(1),      " upstream "
    Z_Chamber(N_CHM_Chamber+1)-Z(NP),  " downstream "
    ABS( RF_Chamber -RCYS_Chamber(1, 1) ),
    ABS( RF_Chamber -RCYS_Chamber(1, 2) ),
    ABS( RF_Chamber -RCYS_Chamber(1, 3) ) );
    RETURN;
]
ELSEIF( IR_Chamber<=N_Chamber )[   " except air gap. "
    DIST=MIN(  Z(NP)-ZMIN_Chamber,
    " check the front face of the 1st layer in the top"
    ABS( Z(NP)-Z_Chamber(1) ),
    " check the back face of the last layer in the top"
    ABS( Z(NP)-Z_Chamber(N_CHM_Chamber+1) ),
    " check the front face for the 1st layer in the bottom"
    ZMAX_Chamber-Z(NP),        " back face for the last in the bottom "
    ABS(Z(NP)-Z_Chamber(LAYER)),  " except the above case "
    "this is for the front face of the layer"
    ABS(Z_Chamber(LAYER+1)-Z(NP)),
    "this is for the back face of the layer"
    "note we use ABS because the front face in the top layer"
    "and the back face of the bottom layer may not be Z_Chamber(LAYER)"
    "and Z_Chamber(LAYER+1)     --CMa"
    ABS( RCYS_Chamber(LAYER,1)-RF_Chamber ) );
    RETURN;
]
ELSEIF( IR(NP)=IREND_Chamber & N_GAP_Chamber=1)[
    DIST=MIN(Z(NP)-ZFRONT_Chamber, ZMIN_Chamber-Z(NP));
    RETURN;
]
RETURN;
END; "End of subroutine HOWNEAR_Chamber"
"End of CHAMBER_cm.mortran"
%C80
"#############################################################################"
"                                                                             "
"  EGSnrc BEAMnrc component module: mirror plane                              "
"  Copyright (C) 2015 National Research Council Canada                        "
"                                                                             "
"  This file is part of EGSnrc.                                               "
"                                                                             "
"  EGSnrc is free software: you can redistribute it and/or modify it under    "
"  the terms of the GNU Affero General Public License as published by the     "
"  Free Software Foundation, either version 3 of the License, or (at your     "
"  option) any later version.                                                 "
"                                                                             "
"  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY  "
"  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  "
"  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for   "
"  more details.                                                              "
"                                                                             "
"  You should have received a copy of the GNU Affero General Public License   "
"  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.             "
"                                                                             "
"#############################################################################"
"                                                                             "
"  Author:          Blake Walters, 1995                                       "
"                                                                             "
"  Contributors:    Iwan Kawrakow                                             "
"                   Ernesto Mainegra-Hing                                     "
"                                                                             "
"#############################################################################"
"                                                                             "
"  This code originally evolved from the MIRR component module written by     "
"  George Ding, starting in 1992, and subsequently edited by Charlie Ma.      "
"                                                                             "
"  The contributors named above are only those who could be identified from   "
"  this file's revision history.                                              "
"                                                                             "
"  This code was originally part of the BEAM code system for Monte Carlo      "
"  simulation of radiotherapy treatments units. It was developed at the       "
"  National Research Council of Canada as part of the OMEGA collaborative     "
"  research project with the University of Wisconsin. The system was          "
"  originally described in:                                                   "
"                                                                             "
"  BEAM: A Monte Carlo code to simulate radiotherapy treatment units,         "
"  DWO Rogers, BA Faddegon, GX Ding, C-M Ma, J Wei and TR Mackie,             "
"  Medical Physics 22, 503-524 (1995).                                        "
"                                                                             "
"  BEAM User Manual                                                           "
"  DWO Rogers, C-M Ma, B Walters, GX Ding, D Sheikh-Bagheri and G Zhang,      "
"  NRC Report PIRS-509A (rev D)                                               "
"                                                                             "
"  As well as the authors of this paper and report, Joanne Treurniet of NRC   "
"  made significant contributions to the code system, in particular the GUIs  "
"  and EGS_Windows. Mark Holmes, Brian Geiser and Paul Reckwerdt of Wisconsin "
"  played important roles in the overall OMEGA project within which the BEAM  "
"  code system was developed.                                                 "
"                                                                             "
"  There have been major upgrades in the BEAM code starting in 2000 which     "
"  have been heavily supported by Iwan Kawrakow, most notably: the port to    "
"  EGSnrc, the inclusion of history-by-history statistics and the development "
"  of the directional bremsstrahlung splitting variance reduction technique.  "
"                                                                             "
"#############################################################################"


"*******************************************************************************
"
"                             ***********              ""toc:
"                             *         *              ""toc:
"                             * MIRROR  *              ""toc:
"                             *         *              ""toc:
"                             ***********              ""toc:
"
"
"                               PURPOSE
"                               *******
"   Component module for BEAM.  A mirror plane of arbitrary layer,thickness and
"   material in air.
"
"*******************************************************************************
"
"                          GENERAL DESCRIPTION
"                          *******************
"
"   This set of routines is used in conjunction with BEAM.MORTRAN to simulate
"   one component module of a clinical linear accelerator:  a mirror.
"
%E   "MIRROR_cm.mortran  -- start of geometry picture"
"I>
"I> Geometry of MIRROR:
"I> ******************
"I>
"I>                          |         | \ \ \   IR = N+1   |
"I>                          |         |\ \ \ \             |
"I>                          |         | \ \ \ \            |
"I>                          |         |  \ \ \ \           |
"I>                          |         |   \ \ \ \          |
"I>      ----------->        | IR= N+3 |    \ \ \ \         |
"I>                          |         |   IR=1,2,N\        |
"I>      beam direction      |         |      \ \ \ \       |
"I>                          |         |       \ \ \ \      |
"I>                          |         |        \ \ \ \     |
"I>                          |         |         \ \ \ \    |
"I>                          |         |          \ \ \ \   |
"I>                          |         |           \ \ \ \  |
"I>                          |         |            \ \ \ \ |
"I>                          |         |  IR = N+2   \ \ \ \|
"I>
"I>
"I>   IR is the region number within the CM.  There are three local regions
"I>   shown above.
"I>
"I>
"I>            -------------------------------------------------
"I>            |          Region         | Description         |
"I>            |-------------------------|---------------------|
"I>            |  absolute    | local    |                     |
"I>            |--------------|----------|                     |
"I>            |              |          |                     |
"I>            |IRSTART_MIRROR| IR_MIRROR|  as shown in above  |
"I>            |  +IR_MIRROR-1|          |    (1 to N+3)       |
"I>            |              |          |                     |
"I>            |              |          |                     |
"I>            -------------------------------------------------
"I>
" Subroutines:
" ************
"                      INPUT_Mirror
"                      ISUMRY_Mirror
"                      HOWFAR_Mirror
"                      WHERE_AM_I_Mirror
"
"       Called from BEAM's subroutines:
"                      INPUT
"                      ISUMRY
"                      HOWFAR
"
"       Subroutines called:
"                      WHERE_AM_I (a BEAM subroutine)
"
"*******************************************************************************
"
"                             RESTRICTIONS ON USE/KNOW BUGS
"                             *****************************
"
"
"*******************************************************************************
%E   "MIRROR_cm.mortran  -- start of description of user input file"
"
"                               INPUT FROM UNIT 5       ""toc:
"                               *****************
"
"I>
"I>  CARDS CM_Mirror
"I>  **************
"I>
"I>  -1  Dummy line to indicate start of CM.
"I>
"I>   0  RMAX_CM(ICM_Mirror) (F10.0): Half-width of CM boundary (cm).
"I>
"I>   1  TITLE_Mirror (60A1): Title of CM.
"I>
"I>   2  ZMIN_Mirror,ZTHICK_Mirror (2F15.0):
"I>
"I>           ZMIN_Mirror:   Distance from front of CM(excluding air gap) to
"I>                           ref plane(Z=0).
"I>           ZTHICK_Mirror: Z-direction span.
"I>
"I>   3  XFMIN_Mirror, XBMIN_Mirror (2F15.0):
"I>
"I>           XFMIN_Mirror:  X value at which front face of mirror
"I>                           intersects ZMIN_Mirror.
"I>           XBMIN_Mirror:  X value at which front face of mirror
"I>                           intersects ZMIN_Mirror + ZTHICK_Mirror.
"I>      Note restriction:
"I>    5 degrees<ATAN(ZTHICK_Mirror/(XFMIN_Mirror-XBMIN_Mirror)<90 degrees
"I>
"I>   4  N_Mirror, (I10):    Number of layers
"I>
"I>   Repeat 5 for I=1,N_Mirror
"I>
"I>   5  DTHICK_Mirror(I) (F15.0): Thickness of layer I in mirror,
"I>                                 in cm.  Layer 1 is the front face
"I>                                 of the mirror.
"I>
"I>   Repeat 6 and 7 for I=1,N_Mirror.
"I>
"I>   6  ECUT, PCUT,DOSE_ZONE, IREGION_TO_BIT (2F15.0, 2I5): for each layer
"I>
"I>          ECUT, PCUT:  Cutoff energies for electrons and photons in
"I>                       layer I.
"I>          DOSE_ZONE:   Dose scoring flag in layer I.
"I>     IREGION_TO_BIT:   bit to associate local region of layer I with
"I>
"I>   7  MED_IN (24A1):  Medium of layer I, used to set MED_INDEX.
"I>
"I>   8  ECUT, PCUT, DOSE_ZONE, IREGION_TO_BIT in region behind mirror
"I>                                                       (2F15.0,2I5):
"I>
"I>         ECUT, PCUT:  Cutoff energies for electrons and photons.
"I>         DOSE_ZONE:   Dose scoring flag, 0 to score dose deposited in it
"I>    IREGION_TO_BIT:   bit to associate local region with
"I>
"I>   9  MED_IN (24A1):  Medium of local region behind the mirror,
"I>                      used to set MED_INDEX.
"I>
"I>   10  ECUT, PCUT, DOSE_ZONE, IREGION_TO_BIT in region in front of
"I>                                             mirror(2F15.0,2I5):
"I>
"I>         ECUT, PCUT:  Cutoff energies for electrons and photons.
"I>         DOSE_ZONE:   Dose scoring flag, 0 to score dose deposited in it
"I>    IREGION_TO_BIT:   bit to associate local region with
"I>
"I>   11  MED_IN (24A1): Medium of region in front of mirror,
"I>                      used to set MED_INDEX.
"I>
"I>
"I>   Example
"I>   *******
"I>
"I>   The following describes a mirror composed of 1 AL slab.
"I>   The front face of the mirror intersects the front of the
"I>   CM (excluding any airgap) at X=3cm and the back of the CM at X=-3cm.
"I>   The mirror starts at 19.7cm and is 2cm in the z-direction.
"I>   The thickness of the AL slab is 0.00508cm.
"I>   Note that thickness is measured perpendicular to the
"I>   face of the mirror.  AIR is both in front of and behind
"I>   the AL mirror.  No dose is scored in this example.
"I>
"I>   10.00   RMAX_CM
"I>   MIRROR : z=19.5074 downstream, original, dif overlap
"I>   19.70, 2.0
"I>   3.0, -3.0
"I>   1
"I>   0.00508
"I>   0.0, 0.0, 0, 0
"I>   AL
"I>   0.0, 0.0, 0, 0
"I>   AIR
"I>   0.0, 0.0, 0, 0
"I>   AIR
"I>
"I>
"
;
"*******************************************************************************
"*******************************  ERROR CONDITIONS  ****************************
"*******************************************************************************
"
"                              SIMULATION PARAMETERS
"                              *********************
"
" Geometry checks:
" ****************
"
"   1)  Overlapping component modules
"
"*******************************************************************************
%E   "start of subroutine HOWFAR_Mirror"
"*******************************************************************************
"
"                          Subroutine HOWFAR_Mirror
"                          ***********************
"
" HOWFAR routine for stacked planar media.
"
" Determine if current region number is within component module MIRR, and if so
" evaluate DIST, distance to region boundary along current trajectory.  USTEP
" must not exceed DIST.
"
"   There are N_Mirror local regions :
"
"     local               absolute                       description
"   ------------    ------------------------------     ----------------------
"   IR_Mirror      IR_start_CM(ICM_MIRROR)+IR_MIRROR-1      as shown above
"   ------------    ------------------------------     -----------------------
"   Geometrical co-ordinates, as set in INPUT_MIRROR are:
"
"   ZFRONT_MIRROR     front of CM (upstream surface, air region)
"   ZMIN_MIRROR       front of mirror
"   ZBACK_MIRROR       back of mirror
"   RMAX_MIRROR       dimmension limit (in x and y)
"
"******************************************************************************
REPLACE {$PRINT_1_N1;} WITH {;
IF( X(NP)-A_Mirror*Z(NP)+BMAXT_Mirror(IR_Mirror) > $BDY_TOL)[
   OUTPUT IR_Mirror,Z(NP),X(NP),A_Mirror*Z(NP)+BMAXT_Mirror(IR_Mirror);
       (' print1-n1:ir,z, x, a+bmax ',I3,3F16.8);
]
J = J + 1;
IF(J>1000)[STOP;]
}
REPLACE {$PRINT_1_N2;} WITH {;
OUTPUT IR_Mirror,Z(NP),X(NP),A_Mirror*Z(NP)+BMINT_Mirror(IR_Mirror);
       (' print1-n2:ir,z, x, a+bmin ',I3,3F16.8);
J = J + 1;
IF(J>1000)[STOP;]
}
REPLACE {$PRINT_N+1;} WITH {;
OUTPUT IR_Mirror,Z(NP),X(NP),A_Mirror*Z(NP)+BMAX_Mirror(N_Mirror);
       (' printn+1:ir,z, x, a+bmax ',I3,3F16.8);
J = J + 1;
IF(J>1000)[STOP;]
}
REPLACE {$PRINT_N+2;} WITH {;
OUTPUT IR_Mirror,Z(NP),X(NP),A_Mirror*Z(NP)+BMIN_Mirror(1);
       (' printn+1:ir,z, x, a+bmax ',I3,3F16.8);
J = J + 1;
IF(J>1000)[STOP;]
}
;SUBROUTINE HOWFAR_Mirror;


;IMPLICIT NONE;
;COMIN/CMs,CM_Mirror,EPCONT,STACK,EGS-IO/;
"T>
"T>**********************************
"T>TYPE DECLARATIONS FOR HOWFAR_MIRROR
"T>**********************************
"T>
INTEGER
   IRL,           "T>local region number (absolute), required by HOWNEAR macro
   IRNEW_Mirror, "T>tentative new region number within CM (absolute)
   I,             "T> loop index
   NERROR_M;      "T> number of errors in howfar (particle neglected)

$REAL
   DIST,          "T>distance to region boundary along current trajectory
   XPLN_Mirror;  "T> Temporary variable
;
" Determine local region number
" *****************************

IRL = IR(NP); "local region number (absolute)

" Set DNEAR
" *********
" This replacement macros sets DMIN_Mirror as well as defining IR_Mirror
"
;Mirror_CM_HOWNEAR(DNEAR(NP));

" Boundary-crossing check
" ***********************
"
" Determine if current region number is within component module MIRR, and if so
" evaluate DIST, distance to region boundary along current trajectory.  USTEP
" must not exceed DIST.
;
IF(IR_Mirror > 0 & IR_Mirror <= N_Mirror )[   "local region 1 to N
   IF(X(NP) > A_Mirror*Z(NP)+BMAXT_Mirror(IR_Mirror))[
      IRNEW = IRSTART_Mirror + IR_Mirror;
      "$PRINT_1_N1;"
      USTEP = 0;
      RETURN;
   ]
   ELSEIF(X(NP) < A_Mirror*Z(NP)+BMINT_Mirror(IR_Mirror))[
      IRNEW = IRSTART_Mirror + IR_Mirror - 2;
      IF(IR_Mirror = 1)[IRNEW = IRSTART_Mirror + N_Mirror + 1;]
      "$PRINT_1_N2;"
      USTEP = 0;
      RETURN;
   ]
   IF(W(NP) > 0.0)[
      DIST = (ZBACK_Mirror - Z(NP))/W(NP);
      IF(DIST<=0.)[DIST=1.E-16;] "ensures call to ausgab if leaving CM"
      IRNEW_Mirror = 1;
      XPLN_Mirror = X(NP) + U(NP)*DIST;
      IF(XPLN_Mirror > XBMAXT_Mirror(IR_Mirror))[
         IRNEW_Mirror = IRSTART_Mirror + IR_Mirror;
         DIST = (A_Mirror*Z(NP)+BMAXT_Mirror(IR_Mirror)
                 -X(NP))/(U(NP)-W(NP)*A_Mirror);
      ]
      ELSEIF(XPLN_Mirror < XBMINT_Mirror(IR_Mirror))[
         IRNEW_Mirror = IRSTART_Mirror + IR_Mirror - 2;
         IF(IR_Mirror = 1)[
            IRNEW_Mirror = IRSTART_Mirror + N_Mirror + 1;
         ]
         DIST = (A_Mirror*Z(NP)+BMINT_Mirror(IR_Mirror)
                -X(NP))/(U(NP)-W(NP)*A_Mirror);
      ]
   ]
   ELSEIF(W(NP) < 0.0)[
      DIST = (ZMIN_Mirror - Z(NP))/W(NP);
      IF(DIST<=0. & N_GAP_Mirror=0)[DIST=1.E-16;]
      XPLN_Mirror = X(NP) + U(NP)*DIST;
      IRNEW_Mirror = IREND_Mirror;
      IF(N_GAP_Mirror = 0)[IRNEW_Mirror = 1;]
      IF(XPLN_Mirror > XFMAXT_Mirror(IR_Mirror))[
         IRNEW_Mirror = IRSTART_Mirror + IR_Mirror;
         DIST = (A_Mirror*Z(NP)+BMAXT_Mirror(IR_Mirror)
                -X(NP))/(U(NP)-W(NP)*A_Mirror);
      ]
      ELSEIF(XPLN_Mirror < XFMINT_Mirror(IR_Mirror))[
         IRNEW_Mirror = IRSTART_Mirror + IR_Mirror - 2;
         IF(IR_Mirror = 1)[
            IRNEW_Mirror = IRSTART_Mirror + N_Mirror + 1;
         ]
         DIST = (A_Mirror*Z(NP)+BMINT_Mirror(IR_Mirror)
                -X(NP))/(U(NP)-W(NP)*A_Mirror);
      ]
   ]
   ELSE[
      IF(U(NP) > 0.0)[
         IRNEW_Mirror = IRSTART_Mirror + IR_Mirror;
         DIST = (A_Mirror*Z(NP)+BMAXT_Mirror(IR_Mirror)-X(NP))/U(NP);
      ]
      ELSEIF(U(NP) < 0.0)[
         IRNEW_Mirror = IRSTART_Mirror + IR_Mirror - 2;
         IF(IR_Mirror = 1)[
            IRNEW_Mirror = IRSTART_Mirror + N_Mirror + 1;
         ]
         DIST = (A_Mirror*Z(NP)+BMINT_Mirror(IR_Mirror)-X(NP))/U(NP);
      ]
   ]
   IF(DIST <= USTEP ) ["particle to be moved to region boundary
      USTEP = DIST;
      IF(IRNEW_Mirror=1) ["leaving CM through back"
         IF(W(NP) > 0.0)[CALL WHERE_AM_I(ICM_Mirror,1);]
         ELSEIF(W(NP) < 0.0)[CALL WHERE_AM_I(ICM_Mirror,-1);]
      ]
      ELSE ["still in CM, entering between bars
         IRNEW = IRNEW_Mirror; "new region number"
      ]
   ]
]"end of IR = 1-N

ELSEIF(IR_Mirror = N_Mirror + 1)[ "local region N_Mirror + 1
   IF(X(NP) < A_Mirror*Z(NP)+BMAX_Mirror(N_Mirror))[
      IRNEW = IRSTART_Mirror + N_Mirror - 1;
      USTEP = 0;
      RETURN;
   ]
   IF(W(NP) > 0.0)[
      DIST = (ZBACK_Mirror - Z(NP))/W(NP);
      IF(DIST<=0.)[DIST=1.E-16;]
      IRNEW_Mirror = 1;
      XPLN_Mirror = X(NP) + U(NP)*DIST;
      IF(XPLN_Mirror < XBMAX_Mirror(N_Mirror))[
         IRNEW_Mirror = IRSTART_Mirror + IR_Mirror - 2;
         DIST = (A_Mirror*Z(NP)+BMAX_Mirror(N_Mirror)
                   -X(NP))/(U(NP)-W(NP)*A_Mirror);
      ]
   ]
   ELSEIF(W(NP) < 0.0)[
      DIST = (ZMIN_Mirror - Z(NP))/W(NP);
      IF(DIST<=0. & N_GAP_Mirror = 0)[DIST=1.E-16;]
      IRNEW_Mirror = IREND_Mirror;
      IF(N_GAP_Mirror = 0)[IRNEW_Mirror = 1;]
      XPLN_Mirror = X(NP) + U(NP)*DIST;
      IF(XPLN_Mirror < XFMAX_Mirror(N_Mirror))[
         IRNEW_Mirror = IRSTART_Mirror + IR_Mirror - 2;
         DIST = (A_Mirror*Z(NP)+BMAX_Mirror(N_Mirror)
                  -X(NP))/(U(NP)-W(NP)*A_Mirror);
      ]
   ]
   ELSE[
      IF(U(NP) < 0.0)[
         IRNEW_Mirror = IRSTART_Mirror + IR_Mirror - 2;
         DIST = (A_Mirror*Z(NP)+BMAX_Mirror(N_Mirror)-X(NP))/U(NP);
      ]
   ]
   IF(DIST <= USTEP ) ["particle to be moved to region boundary
      USTEP = DIST;
      IF(IRNEW_Mirror=1) ["leaving CM"
         IF(W(NP) > 0.0)[CALL WHERE_AM_I(ICM_Mirror,1);]
         ELSEIF(W(NP) < 0.0)[CALL WHERE_AM_I(ICM_Mirror,-1);]
      ]
      ELSE ["still in CM, entering between bars
         IRNEW = IRNEW_Mirror; "new region number"
      ]
   ]
]
ELSEIF(IR_Mirror = N_Mirror + 2)[ "local region N_Mirror + 2
   IF(X(NP) > A_Mirror*Z(NP)+BMIN_Mirror(1))[
      IRNEW = IRSTART_Mirror;
      USTEP = 0;
      RETURN;
   ]
   IF(W(NP) > 0.0)[
      DIST = (ZBACK_Mirror - Z(NP))/W(NP);
      IF(DIST<=0.)[DIST=1.E-16;]
      IRNEW_Mirror = 1;
      XPLN_Mirror = X(NP) + U(NP)*DIST;
      IF(XPLN_Mirror > XBMIN_Mirror(1))[
         IRNEW_Mirror = IRSTART_Mirror;
         DIST = (A_Mirror*Z(NP)+BMIN_Mirror(1)
                   -X(NP))/(U(NP)-W(NP)*A_Mirror);
      ]
   ]
   ELSEIF(W(NP) < 0.0)[
      DIST = (ZMIN_Mirror - Z(NP))/W(NP);
      IF(DIST<=0. & N_GAP_Mirror = 0)[DIST=1.E-16;]
      IRNEW_Mirror = IREND_Mirror;
      XPLN_Mirror = X(NP) + U(NP)*DIST;
      IF(N_GAP_Mirror = 0)[IRNEW_Mirror = 1;]
      IF(XPLN_Mirror > XFMIN_Mirror(1))[
         IRNEW_Mirror = IRSTART_Mirror;
         DIST = (A_Mirror*Z(NP)+BMIN_Mirror(1)
                  -X(NP))/(U(NP)-W(NP)*A_Mirror);
      ]
   ]
   ELSE[
      IF(U(NP) > 0.0)[
         IRNEW_Mirror = IRSTART_Mirror;
         DIST = (A_Mirror*Z(NP)+BMIN_Mirror(1)-X(NP))/U(NP);
      ]
   ]
   IF(DIST <= USTEP ) ["particle to be moved to region boundary
      USTEP = DIST;
      IF(IRNEW_Mirror=1) ["leaving CM "
         IF(W(NP) > 0.0)[CALL WHERE_AM_I(ICM_Mirror,1);]
         ELSEIF(W(NP) < 0.0)[CALL WHERE_AM_I(ICM_Mirror,-1);]
      ]
      ELSE ["still in CM, entering between bars
         IRNEW = IRNEW_Mirror; "new region number"
      ]
   ]
]
ELSEIF(IR_Mirror = N_Mirror + 3)[ "local region N_Mirror + 3
   IF(W(NP) > 0.0)[
      DIST = (ZMIN_Mirror - Z(NP))/W(NP);
      IF(DIST < 0.0)[DIST = 0.0;]
      XPLN_Mirror = X(NP) + U(NP)*DIST;
      IF(XPLN_Mirror < XFMIN_Mirror(1))[
         IRNEW_Mirror = IRSTART_Mirror + N_Mirror + 1;
      ]
      ELSEIF(XPLN_Mirror < XFMAX_Mirror(N_Mirror))[
         DO I = 1, N_Mirror[
            IF(XPLN_Mirror < XFMAX_Mirror(I))[
               IRNEW_Mirror = IRSTART_Mirror + I - 1;
               EXIT;
            ]
         ]
      ]
      ELSE[
         IRNEW_Mirror = IRSTART_Mirror + N_Mirror;
      ]
   ]
   ELSEIF(W(NP) < 0.0)[
      DIST = (ZFRONT_Mirror - Z(NP))/W(NP);
      IF(DIST <= 0.0)[DIST = 1.E-16;]
      IRNEW_Mirror = 1;
   ]
   IF(DIST <= USTEP ) ["particle to be moved to region boundary
      USTEP = DIST;
      IF(IRNEW_Mirror = 1) ["leaving CM through back"
         CALL WHERE_AM_I(ICM_Mirror,-1);
      ]
      ELSE ["still in CM
         IRNEW = IRNEW_Mirror; "new region number"
      ]
   ]
] " end of region N_Mirror + 3

"   outside of CM, something is wrong
"   =================================
"
ELSE ["something is wrong"
   OUTPUT IR(NP)-IRSTART_Mirror+1,IR(NP),
          ICM_Mirror,IR_start_CM(ICM_Mirror);
      (//' ************'//' HOWFAR_Mirror error: region # confused,'/
         '    Region, local, absolute =',2I5/
         '    CM number=',I5,' start region =',I5/
         '    This particle is being terminated on spot.',
         ' ************'//);
   NERROR_M=NERROR_M+1;
   IDISC=1;
   USTEP = 0.; IRNEW = IRL;
   IF(NERROR_M.EQ.10)[
      OUTPUT;(//' TOO MANY PARTICLES ARE NEGLECTED IN THIS CM!!'//);
      STOP;
   ]
] "end of IF statement"
;
RETURN;
END; "End of subroutine HOWFAR_Mirror"

%E   "start of subroutine INPUT_Mirror"
"*******************************************************************************
"
"                           Subroutine INPUT_Mirror
"                           **********************
"
"  A CM input subroutine for a series of 2 or more semi-infinite slabs.
"
"  It must fill all parameters in COMMON/CMs/ associated with this CM.
"
"  Routine prints error messages on unit 6 for
"      format error on input
"      end of file hit
"      error in logic of input file
"
"  The format of the input is presented in the section `INPUT FROM UNIT 5' in
"  the above documentation.
"
"*******************************************************************************

;SUBROUTINE INPUT_Mirror;


;IMPLICIT NONE;
;COMIN/ BOUNDS,CMs,CM_Mirror,GEOM,IO_INFO,MEDIA,MISC,SCORE,USER,EGS-IO/;
"T>
"T>*********************************
"T>TYPE DECLARATIONS FOR INPUT_Mirror
"T>*********************************
"T>
$REAL
      BDYTOL;            "T>boundary tolerence
INTEGER I,J,NDO,         "T>DO loop indeces
        IRA,             "T>Absolute region number
        MED_FLAG,        "T>flag used by media-sort macro $MED_INPUT
        MED_INDEX;       "T>medium index, set after medium sort by $MED_INPUT
"
"  initialize parameters
"  =====================
"
ICM_Mirror = ICM;      "CM index for this component module
IRSTART_Mirror = IR_start_CM(ICM_Mirror); "Index of first region in this CM,
                                      "set by previous CM or in MAIN if ICM=1
IERR_GEOM(ICM_Mirror) = 0; "Geometry-checking flag, 0 if no error detected
"
"  get the title line
"  ==================
OUTPUT;(/' Mirror (MIRROR)');
OUTPUT RMAX_CM(ICM);(/' Next component is a flat inclined mirror'/
  '      Outer boundary is a square with |x| & |y| <',F10.2,' cm');
IF(ICM_Mirror = 1)[OUTPUT Z_min_CM(1);
   (' This component starts at',F10.4,' cm from the ref plane(Z=0)');]
ELSE
   [OUTPUT Z_min_CM(ICM_Mirror);(' Previous CM ends at:',F12.5,' cm');]

OUTPUT;(' TITLE: ',$);
MINPUT (Mirror) TITLE_Mirror;(60A1); "MINPUT is a macro with EOF and
                                "ERR branching to :EOF_{P1}: and :ERR_{P1}:
OUTPUT TITLE_Mirror;(' ',60A1);
"
" get distance from reference plane, z=0"
"   =============================
OUTPUT; (' Z position at which mirror (excluding air gap) starts '/
  'and thickness of mirror in Z direction (on one line)'/' : ',$);
MINPUT (Mirror) ZMIN_Mirror,ZTHICK_Mirror;(2F15.0);
OUTPUT ZMIN_Mirror,ZTHICK_Mirror;(2F15.5);
IF(Z_min_CM(ICM_Mirror)>ZMIN_Mirror)[
   IF(ICM_Mirror=1)[
     OUTPUT ICM_Mirror, ZMIN_Mirror,Z_min_CM(ICM_Mirror);
      (//' ***WARNING IN CM ',I4,' (MIRROR):'/
         ' Z_min_CM(1) > Z at which mirror starts'/
         ' Z_min_CM(1) reset to ',F8.5,' cm from ',F8.5,' cm'//);
     WRITE(IOUTLIST,100)ICM_Mirror, ZMIN_Mirror,Z_min_CM(ICM_Mirror);
     100 FORMAT(//' ***WARNING IN CM ',I4,' (MIRROR):'/
         ' Z_min_CM(1) > Z at which mirror starts'/
         ' Z_min_CM(1) reset to ',F8.5,' cm from ',F8.5,' cm'//);
      Z_min_CM(ICM_Mirror)=ZMIN_Mirror;
   ]
   ELSE[
     OUTPUT ICM_Mirror;
      (//'***ERROR IN CM ',I4,' (MIRROR):'/
         'Overlaps with previous CM'//);
     IERR_GEOM(ICM_Mirror)=IERR_GEOM(ICM_Mirror)+1;
   ]
]
IF(ZTHICK_Mirror<0.0)[
  OUTPUT ICM_Mirror;
   (//'***ERROR IN CM ',I4,' (MIRROR):'/
      'ZTHICK < 0.0'//);
   IERR_GEOM(ICM_Mirror)=IERR_GEOM(ICM_Mirror)+1;
]

OUTPUT;
   (' XFMIN (X position that front face crosses front of CM) and'/,
    ' XBMIN (X position that front face crosses back of CM): ',$);
MINPUT (Mirror) XFMIN_Mirror(1),XBMIN_Mirror(1);(2F15.0);
OUTPUT XFMIN_Mirror(1),XBMIN_Mirror(1);(2F11.5);
IF(XFMIN_Mirror(1) < XBMIN_Mirror(1))[
   OUTPUT ICM_Mirror;
     (//'***ERROR IN CM ',I4,' (MIRROR):'/
        'XFMIN < XBMIN'//);
   IERR_GEOM(ICM_Mirror)=IERR_GEOM(ICM_Mirror)+1;
]
ELSEIF(ZTHICK_Mirror>0.0 &
       ZTHICK_Mirror/(XFMIN_Mirror(1) - XBMIN_Mirror(1)).LT.0.0875)[
   "for angles < 5 degrees, one should not use this component module"
   OUTPUT ICM_Mirror;
   (//'***ERROR IN CM ',I4,' (MIRROR):'/
      'Mirror angle too small which will result in simulation error'/
      ' Module SLABS can be used for such small angle simulations.'//);
   IERR_GEOM(ICM_Mirror)=IERR_GEOM(ICM_Mirror)+1;
]
IF(ABS(XFMIN_Mirror(1))>RMAX_CM(ICM_Mirror))[
   OUTPUT ICM_Mirror;
    (//'***WARNING IN CM ',I4,' (MIRROR):'/
       'XFMIN(1) is outside RMAX_CM'//);
   WRITE(IOUTLIST,'(//''***WARNING IN CM '',I4,'' (MIRROR):''/
       ''XFMIN(1) is outside RMAX_CM''//)')
       ICM_Mirror;
]
IF(ABS(XBMIN_Mirror(1))>RMAX_CM(ICM_Mirror))[
   OUTPUT ICM_Mirror;
    (//'***WARNING IN CM ',I4,' (MIRROR):'/
       'XBMIN(1) is outside RMAX_CM'//);
   WRITE(IOUTLIST,'(//''***WARNING IN CM '',I4,'' (MIRROR):''/
       ''XBMIN(1) is outside RMAX_CM''//)')
       ICM_Mirror;
]
"
"   get geometry information for mirror
"   =================================================
"
N_Mirror = $MAX_N_Mirror;
OUTPUT N_Mirror;(' Number of layers of the mirror, minimum 1, maximum',I4);
MINPUT (Mirror) N_Mirror; (I10);
OUTPUT N_Mirror;(' Number of layers in this mirror is',I4);
IF(N_Mirror>$MAX_N_Mirror)[
   N_Mirror=$MAX_N_Mirror;
   OUTPUT ICM_Mirror, N_Mirror;
    (//'***ERROR IN CM ',I4,' (MIRROR):'/
       '# of layers > max. allowed'/
       '# of layers reduced to ',F8.5,' for now'//);
   IERR_GEOM(ICM_Mirror)=IERR_GEOM(ICM_Mirror)+1;
]
ELSEIF(N_Mirror<1)[
   N_Mirror=1;
   OUTPUT ICM_Mirror;
    (//'***ERROR IN CM ',I4,' (MIRROR):'/
       '# of layers < 1'/
       '# of layers reset to 1 for now'//);
   IERR_GEOM(ICM_Mirror)=IERR_GEOM(ICM_Mirror)+1;
]
DO I =1, N_Mirror [
   OUTPUT I;(' Thickness of layer',I3,'(in cm): ',$);
   ;MINPUT (Mirror) DTHICK_Mirror(I);(F15.0);
   OUTPUT DTHICK_Mirror(I);(F15.5);
   IF(DTHICK_Mirror(I)<0.0)[
      OUTPUT ICM_Mirror, I;
       (//'***ERROR IN CM ',I4,' (MIRROR):'/
          'DTHICK(',I4,') < 0.0'//);
      IERR_GEOM(ICM_Mirror)=IERR_GEOM(ICM_Mirror)+1;
   ]
]

XFMAX_Mirror(1) = XFMIN_Mirror(1) +
      SQRT(ZTHICK_Mirror**2+(XFMIN_Mirror(1)-
      XBMIN_Mirror(1))**2)/ZTHICK_Mirror*DTHICK_Mirror(1);
XBMAX_Mirror(1) = XBMIN_Mirror(1) +
      SQRT(ZTHICK_Mirror**2+(XFMIN_Mirror(1)-
      XBMIN_Mirror(1))**2)/ZTHICK_Mirror*DTHICK_Mirror(1);
IF(N_Mirror > 1)[
   DO I =2, N_Mirror[
      XFMIN_Mirror(I) = XFMIN_Mirror(I-1) +
         SQRT(ZTHICK_Mirror**2+(XFMIN_Mirror(1)-
         XBMIN_Mirror(1))**2)/ZTHICK_Mirror*DTHICK_Mirror(I-1);
      XFMAX_Mirror(I-1) = XFMIN_Mirror(I);
      XBMIN_Mirror(I) = XBMIN_Mirror(I-1) +
         SQRT(ZTHICK_Mirror**2+(XFMIN_Mirror(1)-
         XBMIN_Mirror(1))**2)/ZTHICK_Mirror*DTHICK_Mirror(I-1);
      XBMAX_Mirror(I-1) = XBMIN_Mirror(I);
      XFMAX_Mirror(I) = XFMAX_Mirror(I-1) +
         SQRT(ZTHICK_Mirror**2+(XFMIN_Mirror(1)-
         XBMIN_Mirror(1))**2)/ZTHICK_Mirror*DTHICK_Mirror(I);
      XBMAX_Mirror(I) = XBMAX_Mirror(I-1) +
         SQRT(ZTHICK_Mirror**2+(XFMIN_Mirror(1)-
         XBMIN_Mirror(1))**2)/ZTHICK_Mirror*DTHICK_Mirror(I);
   ]
]
"
"   get ECUT, PCUT, dose scoring zone, and material in each region
"   ===============================================================
IRA = IRSTART_Mirror-1;
DO IR_Mirror = 1,N_Mirror+2["loop through regions to get information"
   IRA = IRA+1;
   IF(IR_Mirror <= N_Mirror) [
         OUTPUT IR_Mirror;(/' For layer',I3,' of mirror:');
   ]
   ELSEIF(IR_Mirror = N_Mirror+1)[OUTPUT;(/' For region behind mirror:');]
   ELSEIF(IR_Mirror = N_Mirror+2)[OUTPUT;
                 (/' For region in front of mirror:');]
   ;OUTPUT;(' ECUT, PCUT(MeV), DOSE ZONE(0=DO NOT SCORE DOSE), IREGION_TO_BIT'/
   ' :',$);
   ;MINPUT (Mirror) ECUT(IRA),PCUT(IRA),DOSE_ZONE(IRA),
      IREGION_TO_BIT(IRA); (2F15.0,2I5);
   OUTPUT ECUT(IRA),PCUT(IRA), DOSE_ZONE(IRA),
      IREGION_TO_BIT(IRA); (F8.3,F9.3,I15,I19);
   IF(ECUT(IRA) < ECUTIN)[ECUT(IRA)=ECUTIN;]
   IF(PCUT(IRA) < PCUTIN)[PCUT(IRA)=PCUTIN;]
   IF(IR_Mirror=N_Mirror+1)[
      OUTPUT; (' Material of region behind mirror ',$);]
   ELSEIF(IR_Mirror=N_Mirror+2)[
      OUTPUT; (' Material of region in front of mirror ',$);]
   ELSE[
      OUTPUT IR_Mirror;(' Material of layer ',I3,' ',$);]
   ;$MED_INPUT(Mirror); " inputs character array MED_IN from unit 5, loops
  "through array MEDIA(24,I) to check if medium was previously input.
  "If so, sets MED_INDEX to index of previous medium.  If not,
  "increments NMED and sets MED_INDEX to NMED.
   MED(IRA) = MED_INDEX; " medium of the planar slab
] "end of loop over IR_Mirror"

"  set up air gap to previous CM, if present
"  =========================================
"
"  The air gap has the highest region number in the CM, even though it is at
"  the top of the component module.  This is to allow the assignment of region
"  numbers on input of the parameters of each local region (mainly to assign the
"  medium number of the region).  The air gap is then assigned after all of the
"  CM parameters have been input.
"
Z_gap_THICK(ICM_Mirror) = ZMIN_Mirror - Z_min_CM(ICM_Mirror);
IF (Z_gap_THICK(ICM_Mirror) < $MIN_GAP) [
   Z_gap_THICK(ICM_Mirror) = 0.;
   ZMIN_Mirror=Z_min_CM(ICM_Mirror);
   N_GAP_Mirror = 0; "no air gap for this CM
]
ELSE[ N_GAP_Mirror = 1; "this CM has an air gap "]

IF(N_GAP_Mirror =1)[
    IRA = IRSTART_Mirror + N_Mirror + 2;
    ECUT(IRA) = ECUT(IRA-1);
    PCUT(IRA) = PCUT(IRA-1);
    MED(IRA)  = AIR_INDEX; " medium of the air gap
    ESAVE(IRA)=ESAVE_GLOBAL;
]
"
"  parameter definition
"  ====================
"
"fill arrays of distance from reference plane (z=0) to front and back of slabs
"
BDYTOL = $BDY_TOL;
A_Mirror =  (XBMIN_Mirror(1) - XFMIN_Mirror(1))/ZTHICK_Mirror;
DO I = 1, N_Mirror[
   BMIN_Mirror(I) = XFMIN_Mirror(I) - A_Mirror*ZMIN_Mirror;
   BMAX_Mirror(I) = XFMAX_Mirror(I) - A_Mirror*ZMIN_Mirror;
   BMINT_Mirror(I) = BMIN_Mirror(I) - BDYTOL;
   BMAXT_Mirror(I) = BMAX_Mirror(I) + BDYTOL;
   XFMINT_Mirror(I) = XFMIN_Mirror(I) - BDYTOL;
   XFMAXT_Mirror(I) = XFMAX_Mirror(I) + BDYTOL;
   XBMINT_Mirror(I) = XBMIN_Mirror(I) - BDYTOL;
   XBMAXT_Mirror(I) = XBMAX_Mirror(I) + BDYTOL;
]
"
"establish start of next CM
ZBACK_Mirror = ZMIN_Mirror + ZTHICK_Mirror;
Z_min_CM(ICM_Mirror+1) = ZBACK_Mirror;
ZFRONT_Mirror = Z_min_CM(ICM_Mirror);
"
"
"  set up region numbers
"  =====================
"  This CM has N_Mirror + 2 + N_GAP_Mirror regions
"
IREND_Mirror = IRSTART_Mirror + N_Mirror + N_GAP_Mirror + 1;
               "Index of last region
NREG = NREG + N_Mirror + N_GAP_Mirror + 2;  "Total number of regions up
                                              "to and including this CM
IF (NREG <= $MXREG) ["have not exceeded maximum region number
      "Index of first region in next CM:"
      IR_start_CM(ICM_Mirror+1) = IREND_Mirror + 1;
]
ELSE [
      OUTPUT ICM_Mirror,NREG,$MXREG;
      (//'***ERROR IN CM ',I4,' (MIRROR):'/
        I4,' regions requested, only',I4,' available');
         N_Mirror=$MAX_N_Mirror;
     IERR_GEOM(ICM_Mirror)=IERR_GEOM(ICM_Mirror)+1;
]
"
"  establish CM boundary
"  =====================
"
RMAX_CM_FLAG(ICM_Mirror) = 2; "put a square boundary about CM
"
"  establish dose-scoring zones and range rejection parameters for each region
"  ===========================================================================
"
IRA = IRSTART_Mirror-1; "absolute region number"
DO IR_Mirror=1,N_Mirror+2["loop over local region number
   IRA = IRA+1;
   "dose-scoring zones
   NDOSE_ZONE = MAX(DOSE_ZONE(IRA),NDOSE_ZONE); "Number of dose zones
   IF(NDOSE_ZONE > $MAX_DOSE_ZONE)[
      OUTPUT NDOSE_ZONE;
       (' Too many dose zone !', 'NDOSE_ZONE =',I5,
        ' > $MAX_DOSE_ZONE');
      STOP;
   ]
   MAX_BIT = MAX(IREGION_TO_BIT(IRA),MAX_BIT);
   "charged particle range rejection parameters
   ESAVE(IRA)=ESAVE_GLOBAL; "Particles with total energies below ESAVE are
                            "considered for range rejection
] "end of loop over IR_Mirror

"Initialize for automated range rejection"

"set up minimum thicknesses which in this case are just the last 5"
"slabs"
"If we ever need more than 5 slabs, we should extend this or do
"something fancy like group similar materials"

NDO = MIN(5,N_Mirror); "consider at most 5 slabs of material"
                        "air gap handled below"
IF (IREJCT_GLOBAL = 1)[" i.e. will use automated range rejection"
   ;OUTPUT;(//' ************************************************************'/
        ' NOTE: MIRRORs RANGE REJECTION ALGORITHM ASSUMES THE MIRROR'/
        ' INTERSECTS THE ENTIRE BEAM!!!   CHECK IT'/
        ' ***********************************************************'//);
   WRITE(IOUTLIST,'(''*********************************************''/
      '' NOTE: MIRRORs RANGE REJECTION ALGORITHM ASSUMES THE MIRROR''/
      '' INTERSECTS THE ENTIRE BEAM!!!   CHECK IT''/
      '' ***********************************************************''//)');
   DO IR_Mirror = 1, NDO [
      IRA = IR_Mirror + IRSTART_Mirror-1;   "absolute region"
      Z_min_thick(ICM,IR_Mirror) = DTHICK_Mirror(IR_Mirror);
      MED_min_thick(ICM, IR_Mirror) = MED(IRA);
      "OUTPUT IR_Mirror,IRA,ICM, IR_Mirror, Z_min_thick(ICM,IR_Mirror),
         "ICM,IR_Mirror, MED_min_thick(ICM, IR_Mirror);
         "(' IR_Mirror,IRA=',I2,',',I3,T25,'Z_min_thick(',2I2,')=',F10.3,
         "'  MED_min_thick(',2I3,')=',I2);
   ]"have set parameters for actual mirror materials"
   IF(NDO < 5)[  "still some of 5 locations available"
       "Use an approximation and treat entire rest of CM as if filled"
       "with air and with no reduction because of material in mirror"
       "This may be a bad approximation if used for anything other than a"
       "MIRROR ********************"
       Z_min_thick(ICM,NDO+1) = ZTHICK_Mirror + Z_gap_thick(ICM_Mirror);
       MED_min_thick(ICM,NDO+1) = AIR_INDEX; "AIR_INDEX is 0 or 1"
       OUTPUT ICM,NDO+1,Z_min_thick(ICM,NDO+1),ICM,NDO+1,
                    MED_min_thick(ICM,NDO+1);
       (' For air in CM ',T25,' Z_min_thick(',2I2,')=',F10.3,
                    '  MED_min_thick(',2I3,')=',I2);
   ]
]"end of loop on IREJCT_GLOBAL=1"
RETURN;

"   error messages
"   ==============
"
:EOF_Mirror:
;OUTPUT ICM;(//' *** ERROR *** unexpected end of file reading input for CM',I3);
STOP;

:ERROR_Mirror:
;OUTPUT ICM;(//' *** ERROR *** format error on input for CM',I3);
STOP;
END;  "End of INPUT_Mirror"
%E   "start of subroutine ISUMRY_Mirror"
"*******************************************************************************
"
"                          Subroutine ISUMRY_MIRROR
"                          ************************
"
" Summarize input, write graphics file for EGS_Windows, and set parameters that
" require medium information obtained from HATCH call.
"
"*******************************************************************************

;SUBROUTINE ISUMRY_Mirror;


;IMPLICIT NONE;

;COMIN/ BOUNDS,CMs,CM_Mirror,GEOM,IO_INFO,MEDIA,MISC,SCORE,UPHIOT,USER/;
"T>
"T>**********************************
"T>TYPE DECLARATIONS FOR ISUMRY_MIRROR
"T>**********************************
"T>
INTEGER
   ICOLOUR,    "T>colour of CM for EGS_Windows
   IRA,        "T>absolute region number
   I,J;        "T>DO loop index

$REAL VOL_Mirror($MAX_N_Mirror),   "T>volume
      YWIDTH,
      VOLTOT_Mirror;
"
"   Mass of dose zone
"   =================
"Need to calculate mass of dose zone here, after call to HATCH, where the region
"density is set if it was allowed to default in INPUT_Mirror.
VOLTOT_Mirror=0.;
IRA=IRSTART_Mirror-1;
DO I = 1, N_Mirror + 2 [
   IRA = IRA+1; "absolute region number
   IF(I<=N_Mirror)["one of the mirror slabs
     VOL_Mirror(I)=SQRT(ZTHICK_Mirror**2+(XFMIN_Mirror(I)-
                    XBMIN_Mirror(I))**2)*DTHICK_Mirror(I)*
                    2*RMAX_CM(ICM_Mirror);
     IF(XBMIN_Mirror(I)<-RMAX_CM(ICM_Mirror) &
       XBMAX_Mirror(I)>=-RMAX_CM(ICM_Mirror))[
         VOL_Mirror(I)=VOL_Mirror(I)-(ABS(XBMIN_Mirror(I))-
                        RMAX_CM(ICM_Mirror))**2*(ZTHICK_Mirror/
                        (XFMIN_Mirror(I)-XBMIN_Mirror(I)))*
                        RMAX_CM(ICM_Mirror);
     ]
     ELSEIF(XBMIN_Mirror(I)<-RMAX_CM(ICM_Mirror) &
       XBMAX_Mirror(I)<-RMAX_CM(ICM_Mirror))[
          VOL_Mirror(I)=VOL_Mirror(I)-(XBMAX_Mirror(I)-
                         XBMIN_Mirror(I))*(ABS(XBMAX_Mirror(I))-
                         RMAX_CM(ICM_Mirror))*ZTHICK_Mirror/
                         (XFMIN_Mirror(I)-XBMIN_Mirror(I))*2*
                         RMAX_CM(ICM_Mirror)-(XBMAX_Mirror(I)-
                         XBMIN_Mirror(I))**2*ZTHICK_Mirror/
                         (XFMIN_Mirror(I)-XBMIN_Mirror(I))*
                         RMAX_CM(ICM_Mirror);
     ]
     IF(XFMAX_Mirror(I)>RMAX_CM(ICM_Mirror) &
     XFMIN_Mirror(I)<=RMAX_CM(ICM_Mirror))[
         IF(XBMAX_Mirror(I)>RMAX_CM(ICM_Mirror))[
             VOL_Mirror(I)=VOL_Mirror(I)-(XFMAX_Mirror(I)-
                        XBMAX_Mirror(I))*ZTHICK_Mirror*
                        RMAX_CM(ICM_Mirror)-(XBMAX_Mirror(I)-
                        RMAX_CM(ICM_Mirror))*ZTHICK_Mirror*
                        2*RMAX_CM(ICM_Mirror);
         ]
         ELSE[
         VOL_Mirror(I)=VOL_Mirror(I)-(ABS(XFMAX_Mirror(I))-
                        RMAX_CM(ICM_Mirror))**2*ZTHICK_Mirror/
                        (XFMIN_Mirror(I)-XBMIN_Mirror(I))*
                        RMAX_CM(ICM_Mirror);
         ]
     ]
     ELSEIF(XFMAX_Mirror(I)>RMAX_CM(ICM_Mirror) &
     XFMIN_Mirror(I)>RMAX_CM(ICM_Mirror))[
        IF(XBMAX_Mirror(I)>RMAX_CM(ICM_Mirror))[
          VOL_Mirror(I)=VOL_Mirror(I)-(XFMAX_Mirror(I)-
                         XFMIN_Mirror(I))*(XFMIN_Mirror(I)-
                         RMAX_CM(ICM_Mirror))*ZTHICK_Mirror/
                         (XFMIN_Mirror(I)-XBMIN_Mirror(I))*2*
                         RMAX_CM(ICM_Mirror)-(XFMAX_Mirror(I)-
                         XFMIN_Mirror(I))**2*ZTHICK_Mirror/
                         (XFMIN_Mirror(I)-XBMIN_Mirror(I))*
                         RMAX_CM(ICM_Mirror)+(XBMAX_Mirror(I)-
                         RMAX_CM(ICM_Mirror))**2*ZTHICK_Mirror/
                         (XFMIN_Mirror(I)-XBMIN_Mirror(I))*
                         RMAX_CM(ICM_Mirror);
        ]
        ELSE[
          VOL_Mirror(I)=VOL_Mirror(I)-(XFMAX_Mirror(I)-
                         XFMIN_Mirror(I))*(ABS(XFMIN_Mirror(I))-
                         RMAX_CM(ICM_Mirror))*ZTHICK_Mirror/
                         (XFMIN_Mirror(I)-XBMIN_Mirror(I))*2*
                         RMAX_CM(ICM_Mirror)-(XFMAX_Mirror(I)-
                        XFMIN_Mirror(I))**2*ZTHICK_Mirror/
                         (XFMIN_Mirror(I)-XBMIN_Mirror(I))*
                         RMAX_CM(ICM_Mirror);
        ]
     ]
     VOLTOT_Mirror=VOLTOT_Mirror+VOL_Mirror(I);
   ]
   ELSEIF(I=N_Mirror+1)["region underneath mirror"
     IF(XBMAX_Mirror(N_Mirror)>RMAX_CM(ICM_Mirror))[
       VOL_Mirror(I)=0.0;
     ]
     ELSE[
       VOL_Mirror(I)=ZTHICK_Mirror*(XFMAX_Mirror(N_Mirror)
                    -XBMAX_Mirror(N_Mirror))*
                    RMAX_CM(ICM_Mirror);
       IF(XFMAX_Mirror(N_Mirror)>RMAX_CM(ICM_Mirror))[
          VOL_Mirror(I)=VOL_Mirror(I)-(RMAX_CM(ICM_Mirror)-
                       XBMAX_Mirror(N_Mirror))*ZTHICK_Mirror/
                       (XFMAX_Mirror(N_Mirror)-
                        XBMAX_Mirror(N_Mirror))*
                        (XFMAX_Mirror(N_Mirror)-
                        RMAX_CM(ICM_Mirror))*2*RMAX_CM(ICM_Mirror)-
                        (XFMAX_Mirror(N_Mirror)-
                         RMAX_CM(ICM_Mirror))**2*ZTHICK_Mirror/
                         (XFMAX_Mirror(N_Mirror)-
                        XBMAX_Mirror(N_Mirror))*
                        RMAX_CM(ICM_Mirror);
       ]
       ELSE[
          VOL_Mirror(I)=VOL_Mirror(I)+ZTHICK_Mirror*
                       (RMAX_CM(ICM_Mirror)-
                        XFMAX_Mirror(N_Mirror))*2*
                        RMAX_CM(ICM_Mirror);
       ]
       IF(XBMAX_Mirror(N_Mirror)<-RMAX_CM(ICM_Mirror))[
          VOL_Mirror(I)=VOL_Mirror(I)-
                       (ABS(XBMAX_Mirror(N_Mirror))-
                       RMAX_CM(ICM_Mirror))**2*ZTHICK_Mirror/
                       (XFMAX_Mirror(N_Mirror)-
                        XBMAX_Mirror(N_Mirror))*
                        RMAX_CM(ICM_Mirror);
       ]
    ]
    VOLTOT_Mirror=VOLTOT_Mirror+VOL_Mirror(I)
   ]
   ELSEIF(I=N_Mirror+2)["region above mirror"
     VOL_Mirror(I)=ZTHICK_Mirror*4*RMAX_CM(ICM_Mirror)**2-
                    VOLTOT_Mirror;
   ]
   IF(DOSE_ZONE(IRA).NE.0) ["this is a dose zone"
      ID=DOSE_ZONE(IRA);
      AMASS(ID)=AMASS(ID)+VOL_Mirror(I)*RHOR(IRA);
   ]
]"end of do loop over regions"


"   Calculate four corner of the mirror for graph
"   =============================================
"

"   Summarize geometrical information for this component module in listing file
"   ===========================================================================

WRITE(IOUTLIST,110) ICM_Mirror,TITLE_Mirror;
WRITE(IOUTLIST,120) Z_min_CM(ICM_Mirror),RMAX_CM(ICM_Mirror),
                    ZMIN_Mirror,ZTHICK_Mirror;
WRITE(IOUTLIST,122);
IF(N_GAP_Mirror~=0)[
   WRITE(IOUTLIST,126) 'airgap',ZMIN_Mirror-Z_min_CM(ICM_Mirror),
                       'NA','NA','NA','NA';
   WRITE(IOUTLIST,126) 'at top';
]
DO I=1,N_Mirror[
   IF(I=1)[
   WRITE(IOUTLIST,124) I,'(front)',DTHICK_Mirror(I),
                       XFMIN_Mirror(I),XBMIN_Mirror(I),
                       XFMAX_Mirror(I),XBMAX_Mirror(I);
   ]
   ELSE[
   WRITE(IOUTLIST,123) I,DTHICK_Mirror(I),
                       XFMIN_Mirror(I),XBMIN_Mirror(I),
                       XFMAX_Mirror(I),XBMAX_Mirror(I);
   ]
]
WRITE(IOUTLIST,125) ATAN((XFMIN_Mirror(1)-XBMIN_Mirror(1))/
                         ZTHICK_Mirror)*180./3.1415926;
WRITE(IOUTLIST,130);

IRA = IRSTART_Mirror-1;
DO IR_Mirror=1,N_Mirror+2+N_GAP_Mirror[
   IRA = IRA+1;
   IF(IR_Mirror<=N_Mirror)[
      IF(MED(IRA)=0)[
         WRITE(IOUTLIST,140) IR_Mirror,IR_Mirror,'layer',
               ECUT(IRA),PCUT(IRA),ECUTRR(IRA),ESAVE(IRA),
               DOSE_ZONE(IRA),IREGION_TO_BIT(IRA),
               'V','a','c','u','u','m';
      ]
      ELSE[
         WRITE(IOUTLIST,140) IR_Mirror,IR_Mirror,'layer',
               ECUT(IRA),PCUT(IRA),ECUTRR(IRA),ESAVE(IRA),
               DOSE_ZONE(IRA),IREGION_TO_BIT(IRA),
               (MEDIA(J,MED(IRA)),J=1,9);
      ]
   ]
   ELSEIF(IR_Mirror<=N_Mirror+2)[
       IF(MED(IRA)=0)[
         WRITE(IOUTLIST,141) IR_Mirror,'NA','region',
               ECUT(IRA),PCUT(IRA),ECUTRR(IRA),ESAVE(IRA),
               DOSE_ZONE(IRA),IREGION_TO_BIT(IRA),
               'V','a','c','u','u','m';
       ]
       ELSE[
         WRITE(IOUTLIST,141) IR_Mirror,'NA','region',
               ECUT(IRA),PCUT(IRA),ECUTRR(IRA),ESAVE(IRA),
               DOSE_ZONE(IRA),IREGION_TO_BIT(IRA),
               (MEDIA(J,MED(IRA)),J=1,9);
       ]
       IF(IR_Mirror=N_Mirror+1)[
            WRITE(IOUTLIST,142)'behind';
       ]
       ELSEIF(IR_Mirror=N_Mirror+2)[
            WRITE(IOUTLIST,142)'in front';
       ]
   ]
   ELSEIF(IR_Mirror=N_Mirror+2+N_GAP_Mirror)[
       IF(MED(IRA)=0)[
         WRITE(IOUTLIST,141) IR_Mirror,'NA','airgap',
               ECUT(IRA),PCUT(IRA),ECUTRR(IRA),ESAVE(IRA),
               DOSE_ZONE(IRA),IREGION_TO_BIT(IRA),
              'V','a','c','u','u','m';
       ]
       ELSE[
         WRITE(IOUTLIST,141) IR_Mirror,'NA','airgap',
               ECUT(IRA),PCUT(IRA),ECUTRR(IRA),ESAVE(IRA),
               DOSE_ZONE(IRA),IREGION_TO_BIT(IRA),
              (MEDIA(J,MED(IRA)),J=1,9);
       ]
       WRITE(IOUTLIST,142)'at top';
   ]

]

110 FORMAT(///1X,79('-')/'  Component module',I3,' is a flat inclined',
           ' mirror MIRROR '
           /1X,79('-')
           //T2,'Title: ',68A1);
120 FORMAT(/T2,'Mirror geometry parameters:',
           /T2,'-----------------------------',
           /T2,'Z of front face of CM = ',F15.5,' cm',
           /T2,'Half-width of outer boundary of CM = ',F15.5,' cm',
           /T2,'Z at which mirror starts = ',F15.5,
               ' cm',
           /T2,'Z span of mirror = ',F15.5,' cm');
122 FORMAT(/T2,
'layer #      thickness         XFMIN     XBMIN     XFMAX     XBMAX',
/T2,
'               (cm)                            (cm)');
123 FORMAT(T2,I2,F17.3,F17.3,3F10.3);
124 FORMAT(T2,I2,A7,F10.3,F17.3,3F10.3);
126 FORMAT(T2,A7,F12.3,A17,3A10);
125 FORMAT(/T2,'Angle of mirror face wrt z-axis = ',F15.5,' degrees');
130 FORMAT(/T2,'Mirror region parameters:',
           /T2,'---------------------------',
           /T2,'local layer  location   electron   photon',
           '  range-rejection   dose  bit  medium'
           /T2,'region                   cutoff    cutoff',
           '   level     max    zone  set',
           /T2,'                         (MeV)      (MeV)',
           '   (MeV)    (MeV)');
140 FORMAT(T2,I3,I7,2X,A8,F11.3,F9.3,F9.3,F9.3,I5,I5,2X,9A1);
141 FORMAT(T2,I3,A7,2X,A8,F11.3,F9.3,F9.3,F9.3,I5,I5,2X,9A1);
142 FORMAT(T14,A8);



"   Output representation of this component module to file for EGS_Windows
"   ======================================================================
"
ICOLOUR = 1;
YWIDTH = MIN(RMAX_CM(ICM_Mirror),3.);
IF(IWATCH = 4 | IZLAST = 2) [   "Creat a graphics file "
  ;$SELECT-COLOUR;
   DO I =1, N_Mirror[
      WRITE(IOUTGEOM,201) ICOLOUR,'QUAD',
          XFMIN_Mirror(I), YWIDTH,ZMIN_Mirror,
          XBMIN_Mirror(I), YWIDTH,ZBACK_Mirror,
          XBMIN_Mirror(I),-YWIDTH,ZBACK_Mirror,
          XFMIN_Mirror(I),-YWIDTH,ZMIN_Mirror;
   ]
      WRITE(IOUTGEOM,201) ICOLOUR,'QUAD',
          XFMAX_Mirror(N_Mirror), YWIDTH,ZMIN_Mirror,
          XBMAX_Mirror(N_Mirror), YWIDTH,ZBACK_Mirror,
          XBMAX_Mirror(N_Mirror),-YWIDTH,ZBACK_Mirror,
          XFMAX_Mirror(N_Mirror),-YWIDTH,ZMIN_Mirror;

201   FORMAT(' ',I1,A4,12(F7.2,','));
]"End of graphics output"

"   end of ISUMRY_Mirror
"   ===================
"
RETURN;
END; "end of subroutine ISUMRY_Mirror"
%E   "start of subroutine WHERE_AM_I_Mirror"
"*******************************************************************************
"
"                          Subroutine WHERE_AM_I_$MIRR
"                          ***************************
"
" WHERE_AM_I routine for a MIRROR"
"
" WHERE_AM_I_Mirror determines the new region number when a particle traverses
" a component module boundary.  The scheme is as follows:
"
"      Whenever a particle is to be transported to a component module
"      boundary in HOWFAR, the subroutine WHERE_AM_I is called.  The
"      current component module and particle direction (backwards or
"      forwards) are transferred to WHERE_AM_I in the CALL statement.
"      WHERE_AM_I determines which component module the particle is
"      about to enter and calls the WHERE_AM_I_Mirror subroutine for
"      that component module, transferring the particle direction.
"      The region number that the particle is about to enter is
"      determined in WHERE_AM_I_Mirror from the knowledge of which
"      surface the particle is entering through (front if IDIR=1,
"      back if IDIR=-1) and the (X,Y) coordinates of the particle.
"      The current particle being transported is NP (in /STACK/).
"
"*******************************************************************************

;SUBROUTINE WHERE_AM_I_Mirror(IDIR);


;IMPLICIT NONE;
;COMIN/CM_Mirror,EPCONT,STACK/;
"T>
"T>**************************************
"T>TYPE DECLARATIONS FOR WHERE_AM_I_Mirror
"T>**************************************
"T>
INTEGER I,     "T>loop index
        IDIR;  "T>direction of particle, +1=forward, -1=backward
$REAL XF_Mirror;
XF_Mirror = X(NP) + USTEP*U(NP);
IF(IDIR=1) ["particle entering this CM through front face (upstream)
   IF(N_GAP_Mirror ~= 0)[
      IRNEW = IREND_Mirror;
   ]
   ELSE[
      IF(IRSTART_Mirror = 2) [XF_Mirror = X(NP);]
      IF(XF_Mirror < XFMIN_Mirror(1))[
         IRNEW = IRSTART_Mirror + N_Mirror + 1;
      ]
      ELSEIF(XF_Mirror < XFMAX_Mirror(N_Mirror))[
         DO I = 1, N_Mirror[
            IF(XF_Mirror < XFMAX_Mirror(I))[
               IRNEW = IRSTART_Mirror + I - 1;
               RETURN;
            ]
         ]
      ]
      ELSE[
         IRNEW = IRSTART_Mirror + N_Mirror;
      ]
   ]
]
ELSE["particle entering this CM through back face (downstream)
   IF(XF_Mirror > XBMAX_Mirror(N_Mirror))[
      IRNEW = IRSTART_Mirror + N_Mirror;
   ]
   ELSEIF(XF_Mirror > XBMIN_Mirror(1))[
      DO I = 1, N_Mirror[
         IF(XF_Mirror <= XBMAX_Mirror(I))[
            IRNEW = IRSTART_Mirror + I - 1;
            RETURN;
         ]
      ]
   ]
   ELSE[
      IRNEW = IRSTART_Mirror + N_Mirror + 1;
   ]
]
RETURN;
END; "End of subroutine WHERE_AM_I_Mirror"

%E   "start of subroutine HOWNEAR_Mirror"
"******************************************************************************
"
"                          Subroutine HOWNEAR_MIRROR
"                          ************************
"
" Calculates min. distance to nearest region boundary.
" Used to be a macro, but now the macro calls this subroutine.
"
"*******************************************************************************
;SUBROUTINE HOWNEAR_Mirror(DIST);


$IMPLICIT-NONE;

COMIN/CM_Mirror,STACK/;

$REAL DIST; "T> the min. distance to the nearest region boundary

IR_Mirror = IR(NP) - IRSTART_Mirror + 1;"local region number (relative)"
IF(IR_Mirror > 0 & IR_Mirror <= N_Mirror )[   "local region 1 to N"
        DIST=MIN( Z(NP)-ZMIN_Mirror,  "distance to the top surface"
        ZBACK_Mirror-Z(NP),      "distance to the bottom"
        (X(NP)-XBMIN_Mirror(IR_Mirror))*(ZTHICK_Mirror/
           SQRT((XBMIN_Mirror(1)
           -XFMIN_Mirror(1))**2+ZTHICK_Mirror**2))
           -(ZBACK_Mirror-Z(NP))*((XFMIN_Mirror(1)-
           XBMIN_Mirror(1))/SQRT((XBMIN_Mirror(1)
           -XFMIN_Mirror(1))**2+ZTHICK_Mirror**2)), "distance to the side"
        (ZBACK_Mirror-Z(NP))*((XFMIN_Mirror(1)-
           XBMIN_Mirror(1))/SQRT((XBMIN_Mirror(1)
           -XFMIN_Mirror(1))**2+ZTHICK_Mirror**2))
           - (X(NP)-XBMAX_Mirror(IR_Mirror))*(ZTHICK_Mirror/
           SQRT((XBMIN_Mirror(1)-XFMIN_Mirror(1))**2+ZTHICK_Mirror**2))
        "distance to the side"
        );
]
ELSEIF(IR_Mirror=N_Mirror+1)["the air region below the mirror"
        DIST=MIN( Z(NP)-ZMIN_Mirror,  "distance to the top surface"
        ZBACK_Mirror-Z(NP),      "distance to the bottom"
        (X(NP)-XBMAX_Mirror(N_Mirror))*(ZTHICK_Mirror
         /SQRT((XBMIN_Mirror(1)-XFMIN_Mirror(1))**2+ZTHICK_Mirror**2))
           -(ZBACK_Mirror-Z(NP))*((XFMIN_Mirror(1)-XBMIN_Mirror(1))/
           SQRT((XBMIN_Mirror(1)-XFMIN_Mirror(1))**2+ZTHICK_Mirror**2))
        "distance to the side"
        );
]
ELSEIF(IR_Mirror=N_Mirror+2)["the air region above the mirror"
        DIST=MIN( Z(NP)-ZMIN_Mirror,  "distance to the top surface"
        ZBACK_Mirror-Z(NP),      "distance to the bottom"
        (ZBACK_Mirror-Z(NP))*((XFMIN_Mirror(1)-
           XBMIN_Mirror(1))/SQRT((XBMIN_Mirror(1)
           -XFMIN_Mirror(1))**2+ZTHICK_Mirror**2))
           -(X(NP)-XBMIN_Mirror(1))*(ZTHICK_Mirror/SQRT((XFMIN_Mirror(1)
           -XBMIN_Mirror(1))**2+ZTHICK_Mirror**2))
        "distance to the side"
        );
]
ELSEIF((N_GAP_Mirror.EQ.1)&(IR_Mirror=N_Mirror+3))["in the air gap"
   DIST=MIN( Z(NP)-ZFRONT_Mirror,  "distance to the front surface of the CM"
   ZMIN_Mirror-Z(NP)      "distance to the lower boundary of the region"
   );
]
RETURN;
END; "End of subroutine HOWNEAR_Mirror"
"*******************************************************************************
"End of MIRROR_cm.mortran"
%C80
"#############################################################################"
"                                                                             "
"  EGSnrc BEAMnrc component module: set of paired bars                        "
"  Copyright (C) 2015 National Research Council Canada                        "
"                                                                             "
"  This file is part of EGSnrc.                                               "
"                                                                             "
"  EGSnrc is free software: you can redistribute it and/or modify it under    "
"  the terms of the GNU Affero General Public License as published by the     "
"  Free Software Foundation, either version 3 of the License, or (at your     "
"  option) any later version.                                                 "
"                                                                             "
"  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY  "
"  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  "
"  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for   "
"  more details.                                                              "
"                                                                             "
"  You should have received a copy of the GNU Affero General Public License   "
"  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.             "
"                                                                             "
"#############################################################################"
"                                                                             "
"  Author:          George Ding, 1992                                         "
"                                                                             "
"  Contributors:    Blake Walters                                             "
"                   Iwan Kawrakow                                             "
"                                                                             "
"#############################################################################"
"                                                                             "
"  The contributors named above are only those who could be identified from   "
"  this file's revision history.                                              "
"                                                                             "
"  This code was originally part of the BEAM code system for Monte Carlo      "
"  simulation of radiotherapy treatments units. It was developed at the       "
"  National Research Council of Canada as part of the OMEGA collaborative     "
"  research project with the University of Wisconsin. The system was          "
"  originally described in:                                                   "
"                                                                             "
"  BEAM: A Monte Carlo code to simulate radiotherapy treatment units,         "
"  DWO Rogers, BA Faddegon, GX Ding, C-M Ma, J Wei and TR Mackie,             "
"  Medical Physics 22, 503-524 (1995).                                        "
"                                                                             "
"  BEAM User Manual                                                           "
"  DWO Rogers, C-M Ma, B Walters, GX Ding, D Sheikh-Bagheri and G Zhang,      "
"  NRC Report PIRS-509A (rev D)                                               "
"                                                                             "
"  As well as the authors of this paper and report, Joanne Treurniet of NRC   "
"  made significant contributions to the code system, in particular the GUIs  "
"  and EGS_Windows. Mark Holmes, Brian Geiser and Paul Reckwerdt of Wisconsin "
"  played important roles in the overall OMEGA project within which the BEAM  "
"  code system was developed.                                                 "
"                                                                             "
"  There have been major upgrades in the BEAM code starting in 2000 which     "
"  have been heavily supported by Iwan Kawrakow, most notably: the port to    "
"  EGSnrc, the inclusion of history-by-history statistics and the development "
"  of the directional bremsstrahlung splitting variance reduction technique.  "
"                                                                             "
"#############################################################################"


"*******************************************************************************
"
"                             **************      ""toc:
"                             *            *      ""toc:
"                             *    JAWS    *      ""toc:
"                             *            *      ""toc:
"                             **************      ""toc:
"
"   Programmer:  George Ding.
"
"   Development  Version, begun September 5, 1992. Completed in October,1992
"
"   For complete history see sccs record.
"*******************************************************************************
"*******************************************************************************
"
"                               PURPOSE
"                               *******
"   Component module for BEAM.
"   Set of paired bars.(collimator jaws or applicator)
"
"*******************************************************************************
"
"                          GENERAL DESCRIPTION
"                          *******************
"
"   This set of routines is used in conjunction with BEAM.MORTRAN to simulate
"   one component module of a clinical linear accelerator:  a set of 1 or more
"   paired bars. The bas are of arbitrary thickness and material,and X or Y.
"   orintation.
"
"   This component module can be added to the simulation by including these
"   routines in the MORTRAN file BEAM_CM.MORTRAN and including the MORTRAN
"   replacement macros associated with this component module in the file
"   BEAM_COMMON.MORTRAN.  The order of the component modules in either of
"   these files is unimportant.  To explicitly include this component module in
"   the simulation it must be included in the $CM_LIST replacement statement.
"   The component modules in this list are stacked sequentially for the
"   simulation, one on top of the other, and must not overlap.
%E   "JAWS_cm.mortran - start of geometry description
"I>
"I> Geometry of JAWS:                             ""toc:
"I> ******************
"I>                                  ||
"I>                                \ || /   beam
"I>                                 \||/
"I>                                  \/
"I>
"I>             ---------------------------------------------------
"I>
"I>             -------------     IR=1      ----------------
"I>                         /              |
"I>  ISCM=1       IR=3     /               |   IR=2
"I>            ------------  - - - - - - -  -----------------
"I>
"I>           ---------------    IR=4     ---------------------
"I>                         /            \
"I>  ISCM=2       IR=6     /              \  IR=5
"I>       ----------------- - - - - - - -  -----------------------
"I>
"I>
"I>   IR is the region number within the CM.  There are N_JAWS local
"I>   regions. The first region is between bars or jaws.  An air gap is
"I>   always present at the front.
"I>
"I>
"I>            --------------------------------------------------------
"I>            |          Region               | Description          |
"I>            |-------------------------------|----------------------|
"I>            |  absolute       | local       |                      |
"I>            |-----------------|-------------|                      |
"I>            | IRSTART_JAWS    |  IR_JAWS    |   see graph          |
"I>            |   +IR_JAWS-1    |             |                      |
"I>            --------------------------------------------------------
"I>
" Subroutines:
" ************
"                      INPUT_Jaws
"                      ISUMRY_Jaws
"                      HOWFAR_Jaws
"                      WHERE_AM_I_Jaws
"
"       Called from BEAM's subroutines:
"                      INPUT
"                      ISUMRY
"                      HOWFAR
"
"       Subroutines called:
"                      WHERE_AM_I (a BEAM subroutine)
"
"*******************************************************************************
"
"                             RESTRICTIONS ON USE/BUGS
"                             ************************
"
" 1. Very small jaw angles lead to approximations because of boundary
"    tolerance.  Particles may step right through the tips of jaws,
"    without recognizing that they have entered and exited a distinct
"    region, where jaw thickness is ~$BDY_TOL cm.
"
"*******************************************************************************
"*******************************************************************************
"**************************  DESCRIPTION OF VARIABLES  *************************
"*******************************************************************************
"
"                             COMMON BLOCK VARIABLES
"                             **********************
"
"  Refer to the replacement macros in BEAM.MORTRAN and BEAM_COMMON.MORTRAN
"  which define the common block variables.
"
"*******************************************************************************
"
"                                OTHER VARIABLES
"                                ***************
"
"  Refer to the section on type declarations for each subroutine. The following
"  section describes the variables input from unit 5.  These variables define
"  the parameters of each simulation.
"
"*******************************************************************************
"
"                   Description of Users Input from Unit 5   ""toc:
"                   **************************************
"
"I>
"I>  CARDS CM_Jaws(JAWS)
"I>  **************
"I>
"I>  -1  dummy line read in main used to separate input for CMs
"I>
"I>   0  RMAX_CM(ICM_JAWS) (F10.0):
"I>                         Perpendicular distance from Z-axis to boundary
"I>                         surrounding component module.  This component
"I>                         module has a square boundary.
"I>
"I>   1  TITLE_Jaws (60A1):  Title of CM.
"I>
"I>   2  ISCM_MAX_Jaws (I5):  Number of paired bars or jaws in CM.
"I>
"I>   Repeat 3 and 4 for I=1,ISCM_MAX_Jaws
"I>
"I>   3  XY_CHOICE (A1):  indicate orientation of the paired bars/jaws
"I>                        X means bars/jaws perpendicular to x axis
"I>                       i.e. separation and movement is along x-axis
"I>
"I>   4  ZMIN_Jaws(I), ZMAX_Jaws(I), XFP_Jaws(I), XBP_Jaws(I),
"I>      XFN_Jaws(I), XBN_Jaws(I) (6F15.0)
"I>
"I>        ZMIN_Jaws(I): Distance front of bars/jaws to reference plane.
"I>        ZMAX_Jaws(I): Distance back of bars/jaws to reference plane.
"I>        XFP_Jaws(I):  positive bar/jaw x or y coodinate at front.
"I>        XBP_Jaws(I):  positive bar/jaw x or y coodinate at back.
"I>        XFN_Jaws(I):  negative bar/jaw x or y coodinate at front.
"I>        XBN_Jaws(I):  negative bar/jaw x or y coodinate at back.
"I>
"I>   5   ECUT, PCUT, DOSE_ZONE, IREGION_to_BIT (2F15.0,2I5): for interior
"I>                                                     (assumed to be AIR)
"I>
"I>          ECUT, PCUT:     Cutoff energies for electrons and photons.
"I>          DOSE_ZONE:      Dose scoring zone of air surrounding bars.
"I>          IREGION_TO_BIT: This region associated with this bit in LATCH
"I>
"I>   Repeat 6 and 7 for I=1,ISCM_MAX_Jaws
"I>
"I>   6   ECUT, PCUT, DOSE_ZONE, IREGION_TO_BIT (2F15.0,2I5)
"I>
"I>          ECUT, PCUT:     Cutoff energies for electrons and photons in
"I>                          jaw I.
"I>          DOSE_ZONE:      Dose scoring zone for jaw I.
"I>          IREGION_TO_BIT: Both bars of jaw I associated with this bit.
"I>
"I>   7   MED_IN (24A1):  Medium of jaw I, used to set MED_INDEX.
"I>
"I>   Example
"I>   *******
"I>
"I>  The following set of cards defines a pair of 5 cm-thick Al jaws.
"I>  The first set of bars open along the X axis.  The inside faces of
"I>  this jaw are vertical at |X|=3cm.  The second set of bars open along
"I>  the Y axis.  The inside
"I>  faces of this jaw are angled out slightly, beginning at |Y|=3cm at the top
"I>  of the jaw and ending at |Y|=3.05cm at the bottom of the jaw.
"I>  The first jaw starts at Z=30.0 cm.  Note the 0.01 cm airgap between
"I>  the two jaws.
"I>
"I>  Electrons will be followed in the CM down to kinetic energies of
"I>  10 keV (total energies of 0.521 MeV) and photons will be followed down
"I>  to energies of 1 keV.  The dose deposited in the air will be scored and
"I>  added to the dose deposited in the bars in dose zone 1.
"I>
"I>  15.0    RMAX_CM
"I>  JAWS: 2 Al jaws, 5cm thick
"I>  2
"I>  X
"I>  30.0, 35.0, 3.0, 3.0, -3.0, -3.0
"I>  Y
"I>  35.01, 40.01, 3.0, 3.05, -3.0, -3.05
"I>  0.0, 0.0, 1, 0
"I>  0.0, 0.0, 1, 0
"I>  AL
"I>  0.0, 0.0, 1, 0
"I>  AL
"I>
"
;
"*******************************************************************************
"*******************************  ERROR CONDITIONS  ****************************
"*******************************************************************************
"
"                              SIMULATION PARAMETERS
"                              *********************
"
" Geometry checks:
" ****************
"
"   1)  Overlapping component modules not allowed
"
"   2)  Overlapping bars not allowed
"
"   3)  Air gap at front of CM required
"
"   4)  Inner boundary of all bars must be within CM boundary, RMAX_CM
"
"*******************************************************************************

%E   "Start of subroutine HOWFAR_Jaws"
"*******************************************************************************
"************************** Component Module JAWS ******************************
"*******************************************************************************
"
"                          Subroutine HOWFAR_JAWS
"                          ***********************
"
" HOWFAR routine for set of paired bars.
"
" Determine if current region number is within component module JAWS, and if
" so evaluate DIST, distance to region boundary along current trajectory.  USTEP
" must not exceed DIST.
"
"   There are 4xISCM local regions see above graph:
"
"      local                    absolute                   description
"   ------------  ------------------------------------   ---------------
"       IRL       IR_start_CM(ICM_JAWS)+IRL-1               IRL
"
"   Geometrical co-ordinates, as set in INPUT_JAWS are:
"
"   ZFRONT_JAWS     front of CM (upstream surface, air region)
"   ZBACK_JAWS      back of CM (downstream surface, air region)
"   ZMIN_JAWS(IRL)  front of bars ISCM,
"   ZMAX_JAWS(IRL)  back of bars ISCM
"
"*******************************************************************************
;SUBROUTINE HOWFAR_Jaws;


;IMPLICIT NONE;
;COMIN/CMs,CM_Jaws,EPCONT,STACK,EGS-IO/;

"T>
"T>**********************************
"T>TYPE DECLARATIONS FOR HOWFAR_JAWS
"T>**********************************
"T>
INTEGER
   IRL,        "T>local region number (absolute), required by HOWNEAR macro
   IB_Jaws,    "T>index to deal with round off errors
   I_tpo,I_tne, "T>error indices
   IRNEW_Jaws; "T>tentative new region number within CM (absolute)

$REAL
   DIST,       "T>distance to region boundary along current particle trajectory
   DIST1,      "T>holds value of DIST while further checks are done
   XPLN_Jaws,  "T>X or Y at a plane surface along particle trajectory
   ZPLN_Jaws;  "T>Z along particle trajectory

DATA I_tpo,I_tne/0,0/;

IRL = IR(NP); "local region number (absolute)
"
" This replacement macros sets DNEAR as well as defining IR_Jaws,
 ;Jaws_CM_HOWNEAR(DNEAR(NP));

" Boundary-crossing check
" ***********************
"
" Determine if current region number is within component module JAWS, and if
" so evaluate DIST, distance to region boundary along current trajectory.  USTEP
" must not exceed DIST.
"
";Jaws_SET_XY_UV(ISCM_Jaws);"" needed if no dnear caln in howfar"
IF(IR_Jaws = 3*ISCM_Jaws-2) ["particle not in positive or negative bar
   IB_Jaws=1;
   IF(W(NP) > 0.0 )[
      IF(Z(NP) < ZMIN_Jaws(ISCM_Jaws) + $BDY_TOL) [
         DIST = (ZMIN_Jaws(ISCM_Jaws) - Z(NP) + $BDY_TOL)/W(NP);
         XPLN_Jaws = XY_Jaws + UV_Jaws * DIST;
         ZPLN_Jaws = Z(NP)+DIST*W(NP);
         IF(XPLN_Jaws > APO_Jaws(ISCM_Jaws)*ZPLN_Jaws +
            BPOT_Jaws(ISCM_Jaws,IB_Jaws))[
            "must check against plane of jaws at actual Z posn of particle"
            IRNEW_Jaws = IRSTART_Jaws + 3*(ISCM_Jaws-1) + 1;
         ]
         ELSEIF(XPLN_Jaws < ANE_Jaws(ISCM_Jaws)*ZPLN_Jaws +
                BNET_Jaws(ISCM_Jaws,IB_Jaws))[
            IRNEW_Jaws = IRSTART_Jaws + 3*(ISCM_Jaws-1) + 2;
         ]
         ELSE[
            DIST = (ZMAX_Jaws(ISCM_Jaws)-Z(NP) + $BDY_TOL)/W(NP);
            IF(DIST < 0) [DIST = 0.0;]
            IF(DIST=0. & ISCM_Jaws=ISCM_MAX_Jaws)[DIST=1.E-16;]
            XPLN_Jaws = XY_Jaws + UV_Jaws * DIST;
            ZPLN_Jaws = Z(NP)+DIST*W(NP);
            IRNEW_Jaws = IRSTART_Jaws + 3*ISCM_Jaws;
            IF(ISCM_Jaws = ISCM_MAX_Jaws)[IRNEW_Jaws =1;]
            DIST1=DIST;
            IF(XPLN_Jaws > APO_Jaws(ISCM_Jaws)*ZPLN_Jaws +
               BPOT_Jaws(ISCM_Jaws,IB_Jaws))[
               ;Jaws_TPOSITIVE;
               IF(DIST<DIST1)[
                 IRNEW_Jaws = IRSTART_Jaws + 3*(ISCM_Jaws-1) + 1;
               ]
               ELSE[
                 DIST=DIST1;
               ]
            ]
            ELSEIF(XPLN_Jaws < ANE_Jaws(ISCM_Jaws)*ZPLN_Jaws +
                BNET_Jaws(ISCM_Jaws,IB_Jaws))[
               ;Jaws_TNEGATIVE;
               IF(DIST<DIST1)[
                 IRNEW_Jaws = IRSTART_Jaws + 3*(ISCM_Jaws-1) + 2;
               ]
               ELSE[
                 DIST=DIST1;
               ]
            ]
         ]
      ]
      ELSE[ "Z(NP)> ZMIN_Jaws(ISCM_Jaws)
         IF( XY_Jaws > APO_Jaws(ISCM_Jaws)*Z(NP) +
             BPOT_Jaws(ISCM_Jaws,IB_Jaws) &
             Z(NP) > ZMIN_Jaws(ISCM_Jaws) + $BDY_TOL  &
             Z(NP) < ZMAX_Jaws(ISCM_Jaws) - $BDY_TOL )[
            IRNEW = IRSTART_Jaws + 3*(ISCM_Jaws-1) + 1;
            USTEP = 0.0;
            RETURN;
         ]
         IF( XY_Jaws < ANE_Jaws(ISCM_Jaws)*Z(NP) +
             BNET_Jaws(ISCM_Jaws,IB_Jaws) &
             Z(NP) > ZMIN_Jaws(ISCM_Jaws) + $BDY_TOL &
             Z(NP) < ZMAX_Jaws(ISCM_Jaws) - $BDY_TOL )[
            IRNEW = IRSTART_Jaws + 3*(ISCM_Jaws-1) + 2;
            USTEP = 0.0;
            RETURN;
         ]
         DIST = (ZMAX_Jaws(ISCM_Jaws) - Z(NP) + $BDY_TOL)/W(NP);
         IRNEW_Jaws = IRSTART_Jaws + 3*ISCM_Jaws;
         IF(ISCM_Jaws = ISCM_MAX_Jaws)[IRNEW_Jaws =1;]
         XPLN_Jaws = XY_Jaws + UV_Jaws * DIST;
         ZPLN_Jaws = Z(NP)+DIST*W(NP);
         DIST1=DIST;
         IF(XPLN_Jaws > APO_Jaws(ISCM_Jaws)*ZPLN_Jaws +
               BPOT_Jaws(ISCM_Jaws,IB_Jaws))[
            ;Jaws_TPOSITIVE;
            IF(DIST<DIST1)[
              IRNEW_Jaws = IRSTART_Jaws + 3*(ISCM_Jaws-1) + 1;
            ]
            ELSE[
              DIST=DIST1;
            ]
         ]
         ELSEIF(XPLN_Jaws < ANE_Jaws(ISCM_Jaws)*ZPLN_Jaws +
                BNET_Jaws(ISCM_Jaws,IB_Jaws))[
            ;Jaws_TNEGATIVE;
            IF(DIST<DIST1)[
              IRNEW_Jaws = IRSTART_Jaws + 3*(ISCM_Jaws-1) + 2;
            ]
            ELSE[
              DIST=DIST1;
            ]
         ]
      ]
      IF(DIST <= USTEP ) ["particle to be moved to region boundary
         USTEP = DIST;
         IF (IRNEW_Jaws=1) ["leaving CM through back"
            CALL WHERE_AM_I(ICM_Jaws,1);
         ]
         ELSE ["still in CM, entering between bars
            IRNEW = IRNEW_Jaws; "new region number"
         ]
      ]
   ]"end of w > 0.0
   ELSEIF (W(NP) < 0.0)[
      IF(Z(NP) < ZMIN_Jaws(ISCM_Jaws) + $BDY_TOL) [
         IF(ISCM_Jaws = 1)[
            DIST = (ZFRONT_Jaws - Z(NP))/W(NP);
            IF(DIST <= 0)[ DIST = 1.E-16;]
            IRNEW_Jaws = 1;
         ]
         ELSE[ "  ISCM_Jaws > 1
            ;Jaws_SET_XY_UV(ISCM_Jaws-1);
            DIST = (ZMAX_Jaws(ISCM_Jaws-1) - Z(NP) - $BDY_TOL)/W(NP);
            XPLN_Jaws = XY_Jaws + UV_Jaws * DIST;
            ZPLN_Jaws = Z(NP) + DIST*W(NP);
            IRNEW_Jaws = IRSTART_Jaws + 3*(ISCM_Jaws-2);
            IF(XPLN_Jaws > APO_Jaws(ISCM_Jaws-1)*ZPLN_Jaws +
               BPOT_Jaws(ISCM_Jaws-1,IB_Jaws))[
               IRNEW_Jaws = IRSTART_Jaws + 3*(ISCM_Jaws-2) + 1;
            ]
            ELSEIF(XPLN_Jaws < ANE_Jaws(ISCM_Jaws-1)*ZPLN_Jaws +
                BNET_Jaws(ISCM_Jaws-1,IB_Jaws))[
               IRNEW_Jaws = IRSTART_Jaws + 3*(ISCM_Jaws-2) + 2;
            ]
         ]
      ]
      ELSE[ "Z(NP)> ZMIN_Jaws(ISCM_Jaws)
         IF( XY_Jaws > APO_Jaws(ISCM_Jaws)*Z(NP) +
             BPOT_Jaws(ISCM_Jaws,IB_Jaws) &
             Z(NP) > ZMIN_Jaws(ISCM_Jaws) + $BDY_TOL  &
             Z(NP) < ZMAX_Jaws(ISCM_Jaws) - $BDY_TOL )[
            IRNEW = IRSTART_Jaws + 3*(ISCM_Jaws-1) + 1;
            USTEP = 0.0;
            RETURN;
         ]
         IF( XY_Jaws < ANE_Jaws(ISCM_Jaws)*Z(NP) +
             BNET_Jaws(ISCM_Jaws,IB_Jaws) &
             Z(NP) > ZMIN_Jaws(ISCM_Jaws) + $BDY_TOL &
             Z(NP) < ZMAX_Jaws(ISCM_Jaws) - $BDY_TOL )[
            IRNEW = IRSTART_Jaws + 3*(ISCM_Jaws-1) + 2;
            USTEP = 0.0;
            RETURN;
         ]
         DIST = (ZMIN_Jaws(ISCM_Jaws)-Z(NP) - $BDY_TOL)/W(NP);
         IF(DIST < 0)[ DIST = 0.0;]
         XPLN_Jaws = XY_Jaws + UV_Jaws * DIST;
         ZPLN_Jaws = Z(NP) + DIST*W(NP);
         DIST1=DIST;
         IF(XPLN_Jaws > APO_Jaws(ISCM_Jaws)*ZPLN_Jaws +
               BPOT_Jaws(ISCM_Jaws,IB_Jaws))[
            ;Jaws_TPOSITIVE;
            IF(DIST<DIST1)[
              IRNEW_Jaws = IRSTART_Jaws + 3*(ISCM_Jaws-1) + 1;
            ]
            ELSE[
              DIST=DIST1;
            ]
         ]
         ELSEIF(XPLN_Jaws < ANE_Jaws(ISCM_Jaws)*ZPLN_Jaws +
                BNET_Jaws(ISCM_Jaws,IB_Jaws))[
            ;Jaws_TNEGATIVE;
            IF(DIST<DIST1)[
              IRNEW_Jaws = IRSTART_Jaws + 3*(ISCM_Jaws-1) + 2;
            ]
            ELSE[
              DIST=DIST1;
            ]
         ]
         ELSE[
            IF(ISCM_Jaws = 1)[
               DIST = (ZFRONT_Jaws - Z(NP))/W(NP);
               IF(DIST <= 0)[ DIST = 1.E-16;]
               IRNEW_Jaws = 1;
            ]
            ELSE[ "  ISCM_Jaws > 1
               ;Jaws_SET_XY_UV(ISCM_Jaws-1);
               DIST = (ZMAX_Jaws(ISCM_Jaws-1) - Z(NP) - $BDY_TOL)/W(NP);
               IF(DIST < 0)[ DIST = 0.0;]
               XPLN_Jaws = XY_Jaws + UV_Jaws * DIST;
               ZPLN_Jaws = Z(NP) + DIST*W(NP);
               IRNEW_Jaws = IRSTART_Jaws + 3*(ISCM_Jaws-2);
               IF(XPLN_Jaws > APO_Jaws(ISCM_Jaws-1)*ZPLN_Jaws +
                  BPOT_Jaws(ISCM_Jaws-1,IB_Jaws))[
                  IRNEW_Jaws = IRSTART_Jaws + 3*(ISCM_Jaws-2) + 1;
               ]
               ELSEIF(XPLN_Jaws <
                      ANE_Jaws(ISCM_Jaws-1)*ZPLN_Jaws +
                      BNET_Jaws(ISCM_Jaws-1,IB_Jaws))[
                  IRNEW_Jaws = IRSTART_Jaws + 3*(ISCM_Jaws-2) + 2;
               ]
            ]
         ]
      ]
      IF(DIST <= USTEP ) [
         USTEP = DIST;
         IF(IRNEW_Jaws = 1)["particle moving out from front CM
            CALL WHERE_AM_I(ICM_Jaws,-1);
         ]
         ELSE[  "still in CM
            USTEP = DIST;
            IRNEW = IRNEW_Jaws; "new region number"
         ]
      ]
   ] "end of w < 0.0
   ELSE[ "(W(NP) = 0.0
      DIST=1.0E20;
      IF(Z(NP) > ZMIN_Jaws(ISCM_Jaws) ) [
         IF(UV_Jaws > 0.0)[
            IRNEW_Jaws = IRSTART_Jaws + 3*(ISCM_Jaws-1) + 1;
            ;Jaws_TPOSITIVE;
         ]
         ELSE[
            IRNEW_Jaws = IRSTART_Jaws + 3*(ISCM_Jaws-1) + 2;
            ;Jaws_TNEGATIVE;
         ]
      ]
      IF(DIST <= USTEP ) ["particle to be moved to region boundary
         USTEP = DIST;
         IRNEW = IRNEW_Jaws; "new region number"
      ]
   ]"end of w = 0.0
] "end of region 1
ELSEIF(IR_Jaws = 3*ISCM_Jaws-1) [ "particle in positive bars
   IB_Jaws=2;
   IF( XY_Jaws < APO_Jaws(ISCM_Jaws)*Z(NP) +
       BPOT_Jaws(ISCM_Jaws,IB_Jaws) &
      Z(NP) > ZMIN_Jaws(ISCM_Jaws) - $BDY_TOL  &
      Z(NP) < ZMAX_Jaws(ISCM_Jaws) + $BDY_TOL )[
      IRNEW = IRSTART_Jaws + 3*(ISCM_Jaws-1);
      USTEP = 0.0;
      RETURN;
   ]
   IF (W(NP) > 0.0) [
      DIST = (ZMAX_Jaws(ISCM_Jaws)-Z(NP)+$BDY_TOL)/W(NP);
      IF(DIST < 0)[DIST = 0.0;]
      IF(DIST=0. & ISCM_Jaws = ISCM_MAX_Jaws)[DIST=1.E-16;]
      IRNEW_Jaws = IRSTART_Jaws + 3*ISCM_Jaws;
      IF(ISCM_Jaws = ISCM_MAX_Jaws)[IRNEW_Jaws =1;]
      XPLN_Jaws = XY_Jaws + UV_Jaws * DIST;
      ZPLN_Jaws = Z(NP) + DIST*W(NP);
      IF(XPLN_Jaws < APO_Jaws(ISCM_Jaws)*ZPLN_Jaws +
       BPOT_Jaws(ISCM_Jaws,IB_Jaws))[
         IRNEW_Jaws = IRSTART_Jaws + 3*(ISCM_Jaws-1);
         ;Jaws_TPOSITIVE;
      ]
   ]"end of w > 0.0
   ELSEIF (W(NP) < 0.0)[
      DIST = (ZMIN_Jaws(ISCM_Jaws)-Z(NP)-$BDY_TOL)/W(NP);
      IF(DIST < 0)[DIST = 0.0;]
      IRNEW_Jaws = IRSTART_Jaws + 3*(ISCM_Jaws-1);
      XPLN_Jaws = XY_Jaws + UV_Jaws * DIST;
      ZPLN_Jaws = Z(NP) + DIST*W(NP);
      IF(XPLN_Jaws < APO_Jaws(ISCM_Jaws)*ZPLN_Jaws +
       BPOT_Jaws(ISCM_Jaws,IB_Jaws))[
         ;Jaws_TPOSITIVE;
      ]
   ] "end of w < 0.0
   ELSE[ "(W(NP) = 0.0
      DIST=1.0E20;
      IF(UV_Jaws < 0.0)[
         IRNEW_Jaws = IRSTART_Jaws + 3*(ISCM_Jaws-1);
         ;Jaws_TPOSITIVE;
      ]
   ]
   IF(DIST <= USTEP ) ["particle to be moved to region boundary
      USTEP = DIST;
      IF (IRNEW_Jaws=1) ["leaving CM through back"
         CALL WHERE_AM_I(ICM_Jaws,1);
      ]
      ELSE ["still in CM, entering between bars
         IRNEW = IRNEW_Jaws; "new region number"
      ]
   ]
]  "end of region 2
ELSEIF(IR_Jaws = 3*ISCM_Jaws) [ "particle in negative bars
   IB_Jaws=2;
   IF( XY_Jaws > ANE_Jaws(ISCM_Jaws)*Z(NP) +
       BNET_Jaws(ISCM_Jaws,IB_Jaws) &
      Z(NP) > ZMIN_Jaws(ISCM_Jaws) - $BDY_TOL &
      Z(NP) < ZMAX_Jaws(ISCM_Jaws) + $BDY_TOL )[
      IRNEW = IRSTART_Jaws + 3*(ISCM_Jaws-1);
      USTEP = 0.0;
      RETURN;
   ]
   IF (W(NP) > 0.0) [
      DIST = (ZMAX_Jaws(ISCM_Jaws)-Z(NP)+$BDY_TOL)/W(NP);
      IF(DIST < 0)[DIST = 0.0;]
      IF(DIST=0. & ISCM_Jaws = ISCM_MAX_Jaws)[DIST=1.E-16;]
      IRNEW_Jaws = IRSTART_Jaws + 3*ISCM_Jaws;
      IF(ISCM_Jaws = ISCM_MAX_Jaws)[IRNEW_Jaws =1;]
      XPLN_Jaws = XY_Jaws + UV_Jaws * DIST;
      ZPLN_Jaws = Z(NP) + DIST*W(NP);
      IF(XPLN_Jaws > ANE_Jaws(ISCM_Jaws)*ZPLN_Jaws +
       BNET_Jaws(ISCM_Jaws,IB_Jaws))[
         IRNEW_Jaws = IRSTART_Jaws + 3*(ISCM_Jaws-1);
         ;Jaws_TNEGATIVE;
      ]
   ] "end of w > 0.0
   ELSEIF(W(NP) < 0.0)[
      DIST = (ZMIN_Jaws(ISCM_Jaws)-Z(NP)-$BDY_TOL)/W(NP);
      IF(DIST < 0)[DIST = 0.0;]
      IRNEW_Jaws = IRSTART_Jaws + 3*(ISCM_Jaws-1);
      XPLN_Jaws = XY_Jaws + UV_Jaws * DIST;
      ZPLN_Jaws = Z(NP) + DIST*W(NP);
      IF(XPLN_Jaws > ANE_Jaws(ISCM_Jaws)*ZPLN_Jaws +
       BNET_Jaws(ISCM_Jaws,IB_Jaws))[
         ;Jaws_TNEGATIVE;
      ]
   ]"end of w < 0.0
   ELSE[ "(W(NP) = 0.0
      DIST=1.0E20;
      IF(UV_Jaws > 0.0)[
         IRNEW_Jaws = IRSTART_Jaws + 3*(ISCM_Jaws-1);
         ;Jaws_TNEGATIVE;
      ]
   ]
   IF(DIST <= USTEP ) ["particle to be moved to region boundary
      USTEP = DIST;
      IF (IRNEW_Jaws=1) ["leaving CM through back"
         CALL WHERE_AM_I(ICM_Jaws,1);
      ]
      ELSE ["still in CM, entering between bars
         IRNEW = IRNEW_Jaws; "new region number"
      ]
   ]
] "end of region 3
"end of CM regions"

"   outside of CM, something is wrong
"   =================================
"
ELSE ["something is wrong"
   OUTPUT IR(NP)-IRSTART_Jaws+1, IR(NP), ICM_Jaws,
          IR_start_CM(ICM_Jaws);
      (//' ************'//' HOWFAR_JAWS error'/
         '    Region, local, absolute =',2I5/
         '    CM number=',I5,' start region =',I5/
         ' *********'//);
   STOP;
] "end of IF statement"
RETURN;
END; "End of subroutine HOWFAR_Jaws"
%E   "Start of subroutine WHERE_AM_I_Jaws"
"*******************************************************************************
"
"                          Subroutine WHERE_AM_I_JAWS
"                          ***************************
"
" WHERE_AM_I routine for set of JAWS.
"
" WHERE_AM_I_Jaws determines the new region number when a particle traverses
" a component module boundary.  The scheme is as follows:
"
"      Whenever a particle is to be transported to a component module
"      boundary in HOWFAR, the subroutine WHERE_AM_I is called.  The
"      current component module and particle direction (backwards or
"      forwards) are transferred to WHERE_AM_I in the CALL statement.
"      WHERE_AM_I determines which component module the particle is
"      about to enter and calls the WHERE_AM_I_Jaws subroutine for
"      that component module, transferring the particle direction.
"      The region number that the particle is about to enter is
"      determined in WHERE_AM_I_Jaws from the knowledge of which
"      surface the particle is entering through (front if IDIR=1,
"      back if IDIR=-1) and the (X,Y) coordinates of the particle.
"      The current particle being transported is NP (in /STACK/).
"
"*******************************************************************************
;SUBROUTINE WHERE_AM_I_Jaws(IDIR);


;IMPLICIT NONE;
;COMIN/CM_Jaws,EPCONT,STACK/;

"T>
"T>**************************************
"T>TYPE DECLARATIONS FOR WHERE_AM_I_JAWS
"T>**************************************
"T>
INTEGER IDIR;       "T>direction of particle, +1=forward, -1=backward
$REAL XBDY_Jaws;
XBDY_Jaws = X(NP) + U(NP)*USTEP;
IF(IXY_CHOICE_Jaws(ISCM_MAX_Jaws) = 1)[
   XBDY_Jaws = Y(NP) + V(NP)*USTEP;
]
IF (IDIR=1) ["particle entering this CM through front face (upstream)
   "$CHECK_FRONT_Jaws;"
   IRNEW = IRSTART_Jaws;
]
ELSE ["particle entering this CM through back face (downstream)
   IRNEW = IRSTART_Jaws + 3*ISCM_MAX_Jaws - 3;
   "$CHECK_BACK_Jaws;"
   IF(XBDY_Jaws > XBP_Jaws(ISCM_MAX_Jaws))[
      IRNEW = IRSTART_Jaws + 3*ISCM_MAX_Jaws-2;
   ]
   ELSEIF(XBDY_Jaws < XBN_Jaws(ISCM_MAX_Jaws))[
      IRNEW = IRSTART_Jaws + 3*ISCM_MAX_Jaws - 1;
   ]
]
RETURN;
END; "End of subroutine WHERE_AM_I_Jaws"
%E   "Start of subroutine INPUT_Jaws"
"*******************************************************************************
"
"                           Subroutine INPUT_JAWS
"                           **********************
"
"  A CM input subroutine for a series of 1 or more paired bars.
"
"  It must fill all parameters in COMMON/CMs/ associated with this CM.
"
"  Routine prints error messages on unit 6 for
"      format error on input
"      end of file hit
"      error in logic of input file
"
"  The format of the input is presented in the section `INPUT FROM UNIT 5' in
"  the above documentation.
"
"*******************************************************************************

;SUBROUTINE INPUT_Jaws;


;IMPLICIT NONE;
;COMIN/BOUNDS,CMs,CM_Jaws,GEOM,IO_INFO,MEDIA,MISC,SCORE,USER,EGS-IO/;

"T>
"T>*********************************
"T>TYPE DECLARATIONS FOR INPUT_JAWS
"T>*********************************
"T>
INTEGER I,J,         "T>DO loop indeces
        IRA,         "T>Absolute region number
        MED_FLAG,    "T>flag used by media-sort macro $MED_INPUT
        MED_INDEX;   "T>medium index, set after medium sort by $MED_INPUT

$REAL AIRGAPMIN_Jaws,  "T>minimum air gap in front and back of CM
      BDYTOL;          "T>stores $BDY_TOL
CHARACTER*1 XY_CHOICE(1);
"
"  initialize parameters
"  =====================
"
ICM_Jaws = ICM;      "CM index for this component module
IRSTART_Jaws = IR_start_CM(ICM_Jaws); "Index of first region in this CM,
                                      "set by previous CM or in MAIN if ICM=1
IERR_GEOM(ICM_Jaws) = 0; "Geometry-checking flag, 0 if no error detected
AIRGAPMIN_Jaws = 0.01; "Minimum 0.01 cm air gap at front and back of CM

OUTPUT RMAX_CM(ICM); (' This component is sets of paired bars or jaws'/
  '      Outer boundary is a square with |x| & |y| <',F10.2,' cm');
OUTPUT;(' TITLE: ',$);
;MINPUT (Jaws) TITLE_Jaws;(60A1);
                          ";MINPUT is a replacement macro with EOF and
                          "ERR branching to :EOF_{P1}: and :ERR_{P1}:
OUTPUT TITLE_Jaws;(' ',60A1);
IF(ICM_Jaws = 1)[
   OUTPUT;(' This is the first component and starts at the reference plane');]
ELSE
   [OUTPUT Z_min_CM(ICM_Jaws);(' Previous CM ends at:',F12.5,' cm');]

"
"   get geometry information
"   =============================
"
"get the number of paired bars/jaws"
ISCM_MAX_Jaws = $MAX_N_Jaws; "Max number of paired bars/jaws permitted
OUTPUT ISCM_MAX_Jaws;
       (' NUMBER OF paired bars/jaws (minimum 1, maximum',I3,'): ',$);
;MINPUT (Jaws) ISCM_MAX_Jaws; (I5);
OUTPUT ISCM_MAX_Jaws; (I5);
IF(ISCM_MAX_Jaws > $MAX_N_Jaws)[
   OUTPUT ICM_Jaws, $MAX_N_Jaws;
   (//'***ERROR IN CM ',I4,' (JAWS):'/
      '# of paired bars > max. allowed.'/
      '# of pared bars reduced to ',I4,' for now.'//);
   ISCM_MAX_Jaws=$MAX_N_Jaws;
   IERR_GEOM(ICM_Jaws)=IERR_GEOM(ICM_Jaws)+1;
]
ELSEIF(ISCM_MAX_Jaws<1)[
   ISCM_MAX_Jaws=1;
   OUTPUT ICM_Jaws;
   (//'***ERROR IN CM ',I4,' (JAWS):'/
      '# of paired bars < 1'/
      '# of pared bars reset to 1 for now.'//);
   IERR_GEOM(ICM_Jaws)=IERR_GEOM(ICM_Jaws)+1;
]
N_Jaws = 3*ISCM_MAX_Jaws;

"loop over bars
DO I = 1,ISCM_MAX_Jaws ["loop to get each bar location"
   OUTPUT I;(/' Paired bar/jaw set no:',I3,/
    ' Are bars/jaws perpendicular to x or y axis'/
    ' i.e. is separation measured on x or y axis'/
    ' (Input "y" or "Y" for Y jaws, any other character for X jaws): ',$);
   ;MINPUT (Jaws) XY_CHOICE;(1A1);
   OUTPUT XY_CHOICE;(' ',1A1);
   IXY_CHOICE_Jaws(I) = 0;
   IF(XY_CHOICE(1) ='Y' | XY_CHOICE(1) ='y')[ IXY_CHOICE_Jaws(I) = 1;]
   IF(IXY_CHOICE_Jaws(I) = 0)["this is x bars/jaws"
         OUTPUT;(' Input ZMIN, ZMAX & jaw coordinates: XFP, XBP,',
         ' XFN, XBN(cm) all on one line');
   ]
   ELSE ["this is y bars/jaws"
         OUTPUT;(' Input ZMIN, ZMAX & jaw coordinates: YFP, YBP,',
         ' YFN, YBN(cm) all on one line');
   ]
   IF(I=1)[
         OUTPUT AIRGAPMIN_Jaws;
          (' (leave at least min. airgap = ',F8.5,' before 1st jaws)',
          /' : ',$);
   ]
   ELSE[
         OUTPUT AIRGAPMIN_Jaws;
          (' (leave at least min. airgap = ',F8.5,' between jaws)',
           /' : ',$);
   ]
   ;MINPUT (Jaws) ZMIN_Jaws(I), ZMAX_Jaws(I), XFP_Jaws(I),
      XBP_Jaws(I), XFN_Jaws(I), XBN_Jaws(I);(6F15.0);
   ;OUTPUT ZMIN_Jaws(I),ZMAX_Jaws(I), XFP_Jaws(I),
      XBP_Jaws(I), XFN_Jaws(I),XBN_Jaws(I); (6F11.5);
   IF(I=1)[
       IF(ICM_Jaws=1 &
         Z_min_CM(ICM_Jaws)>ZMIN_Jaws(1)-AIRGAPMIN_Jaws)[
         OUTPUT ICM_Jaws, AIRGAPMIN_Jaws,
         ZMIN_Jaws(1)-AIRGAPMIN_Jaws,Z_min_CM(1);
           (//' ***WARNING IN CM ',I4,' (JAWS):'/
              ' Less than min. airgap (',F8.5,' cm) between top',
              ' of CM and 1st jaws.'/
              ' Z_min_CM(1) reset to ',F8.5,' cm from ',F8.5,' cm'//);
           WRITE(IOUTLIST,100)ICM_Jaws, AIRGAPMIN_Jaws,
              ZMIN_Jaws(1)-AIRGAPMIN_Jaws,Z_min_CM(1);
          100 FORMAT(//' ***WARNING IN CM ',I4,' (JAWS):'/
              ' Less than min. airgap (',F8.5,' cm) between top',
              ' of CM and 1st jaws.'/
              ' Z_min_CM(1) reset to ',F8.5,' cm from ',F8.5,' cm'//);
          Z_min_CM(1)=ZMIN_Jaws(1)-AIRGAPMIN_Jaws;
       ]
       ELSEIF(Z_min_CM(ICM_Jaws)>ZMIN_Jaws(1))[
         OUTPUT ICM_Jaws;
           (//'***ERROR IN CM ',I4,' (JAWS):'/
              'Overlaps with previous CM'//);
           IERR_GEOM(ICM_Jaws)=IERR_GEOM(ICM_Jaws)+1;
       ]
       ELSEIF(Z_min_CM(ICM_Jaws)>ZMIN_Jaws(1)-AIRGAPMIN_Jaws)[
         OUTPUT ICM_Jaws, AIRGAPMIN_Jaws,
         Z_min_CM(ICM_Jaws)+AIRGAPMIN_Jaws,
                ZMIN_Jaws(1);
           (//' ***WARNING IN CM ',I4,' (JAWS):'/
              ' Less than min. airgap (',F8.5,' cm) between',
              ' top of CM and first jaws.'/
              ' ZMIN(1) reset to ',F8.5,' cm from ',F8.5,' cm'//);
         WRITE(IOUTLIST,101)ICM_Jaws, AIRGAPMIN_Jaws,
                Z_min_CM(ICM_Jaws)+AIRGAPMIN_Jaws,ZMIN_Jaws(1);
         101 FORMAT(//' ***WARNING IN CM ',I4,' (JAWS):'/
              ' Less than min. airgap (',F8.5,' cm) between',
              ' top of CM and first jaws.'/
              ' ZMIN(1) reset to ',F8.5,' cm from ',F8.5,' cm'//);
         ZMIN_Jaws(1)=Z_min_CM(ICM_Jaws)+AIRGAPMIN_Jaws;
       ]
   ]
   ELSE[
     IF (ZMAX_Jaws(I-1)>ZMIN_Jaws(I))[
        OUTPUT ICM_Jaws, I-1, I;
         (//'***ERROR IN CM ',I4,' (JAWS):'/
            'Paired bars ',I4,' overlap with paired bars ',I4//);
        IERR_GEOM(ICM_Jaws)=IERR_GEOM(ICM_Jaws)+1;
     ]
     ELSEIF (ZMAX_Jaws(I-1)>ZMIN_Jaws(I)-AIRGAPMIN_Jaws)[
        OUTPUT ICM_Jaws, AIRGAPMIN_Jaws, I-1, I, I,
                ZMAX_Jaws(I-1)+AIRGAPMIN_Jaws,ZMIN_Jaws(I);
          (//' ***WARNING IN CM ',I4,' (JAWS):'/
             ' Less than min. airgap (',F8.5,' cm) between',
             ' jaws ',I4,' and jaws',I4/
             ' ZMIN(',I4,') reset to ',F8.5,' cm from ',F8.5,' cm'//);
        WRITE(IOUTLIST,102)ICM_Jaws, AIRGAPMIN_Jaws, I-1, I, I,
                ZMAX_Jaws(I-1)+AIRGAPMIN_Jaws,ZMIN_Jaws(I);
        102 FORMAT(//' ***WARNING IN CM ',I4,' (JAWS):'/
             ' Less than min. airgap (',F8.5,' cm) between',
             ' jaws ',I4,' and jaws',I4/
             ' ZMIN(',I4,') reset to ',F8.5,' cm from ',F8.5,' cm'//);
        ZMIN_Jaws(I)=ZMAX_Jaws(I-1)+AIRGAPMIN_Jaws;
     ]
   ]
   IF(ZMIN_Jaws(I) >= ZMAX_Jaws(I))[
      OUTPUT ICM_Jaws, I, I;
        (//'***ERROR IN CM ',I4,' (JAWS):'/
           'ZMIN(',I4,') >= ZMAX(',I4,')'//);
      IERR_GEOM(ICM_Jaws)=IERR_GEOM(ICM_Jaws)+1;
   ]
   IF(ABS(XFP_Jaws(I))>RMAX_CM(ICM_Jaws))[
      OUTPUT ICM_Jaws, I;
        (//'***ERROR IN CM ',I4,' (JAWS):'/
           'XFP(',I4,') beyond RMAX_CM'//);
      IERR_GEOM(ICM_Jaws)=IERR_GEOM(ICM_Jaws)+1;
   ]
   IF(ABS(XBP_Jaws(I))>RMAX_CM(ICM_Jaws))[
      OUTPUT ICM_Jaws, I;
        (//'***ERROR IN CM ',I4,' (JAWS):'/
           'XBP(',I4,') beyond RMAX_CM'//);
      IERR_GEOM(ICM_Jaws)=IERR_GEOM(ICM_Jaws)+1;
   ]
   IF(ABS(XFN_Jaws(I))>RMAX_CM(ICM_Jaws))[
      OUTPUT ICM_Jaws, I;
        (//'***ERROR IN CM ',I4,' (JAWS):'/
           'XFN(',I4,') beyond RMAX_CM'//);
      IERR_GEOM(ICM_Jaws)=IERR_GEOM(ICM_Jaws)+1;
   ]
   IF(ABS(XBN_Jaws(I))>RMAX_CM(ICM_Jaws))[
      OUTPUT ICM_Jaws, I;
        (//'***ERROR IN CM ',I4,' (JAWS):'/
           'XBN(',I4,') beyond RMAX_CM'//);
      IERR_GEOM(ICM_Jaws)=IERR_GEOM(ICM_Jaws)+1;
   ]
   IF(XFP_Jaws(I) < XFN_Jaws(I))[
      OUTPUT ICM_Jaws, I, I;
        (//'***ERROR IN CM ',I4,' (JAWS):'/
           'XFP(',I4,') < XFN(',I4,')'//);
      IERR_GEOM(ICM_Jaws)=IERR_GEOM(ICM_Jaws)+1;
   ]
   ELSEIF(XFP_Jaws(I) - XFN_Jaws(I) < $BDY_TOL*3 )[
      XFP_Jaws(I) = XFP_Jaws(I) + $BDY_TOL*2;
      XFN_Jaws(I) = XFN_Jaws(I) - $BDY_TOL*2;
   ]
   IF(XBP_Jaws(I) < XBN_Jaws(I))[
      OUTPUT ICM_Jaws, I, I;
        (//'***ERROR IN CM ',I4,' (JAWS):'/
           'XBP(',I4,') < XBN(',I4,')'//);
      IERR_GEOM(ICM_Jaws)=IERR_GEOM(ICM_Jaws)+1;
   ]
   ELSEIF(XBP_Jaws(I) - XBN_Jaws(I) < $BDY_TOL*3 )[
      XBP_Jaws(I) = XBP_Jaws(I) + $BDY_TOL*2;
      XBN_Jaws(I) = XBN_Jaws(I) - $BDY_TOL*2;
   ]
] "end of loop over paired bars/jaws"

"set absolute region number to first region in CM for next set of inputs"
IRA = IRSTART_Jaws; "absolute region number
OUTPUT ; (/'  Now input data re ECUT and PCUT for each region'/
         /' For central region which is assumed to be air'
         /' ECUT,       PCUT,   DOSE ZONE OF AIR,   REGION TO BIT '/' : ',$);
MINPUT (Jaws) ECUT(IRA),PCUT(IRA),DOSE_ZONE(IRA),IREGION_TO_BIT(IRA);
        (2F15.0,2I5);
OUTPUT ECUT(IRA),PCUT(IRA),DOSE_ZONE(IRA),IREGION_TO_BIT(IRA); (2F11.5,2I5);
IF (ECUT(IRA) <  ECUTIN) ECUT(IRA)=ECUTIN;
IF (PCUT(IRA) <  PCUTIN) PCUT(IRA)=PCUTIN;
"get material for each bar and determine material number for these regions
MED(IRA) = AIR_INDEX; " medium of air
"
"now get info on each set of jaws"
DO IR_Jaws = 2, N_Jaws-1, 3[
   IRA = IRSTART_Jaws  + IR_Jaws - 1;"this is absolute region number"
   "central region air, so pick up same parameters as assigned above"
   "this is redundant on first time thru loop"
   ECUT(IRA-1) = ECUT(IRSTART_Jaws);
   PCUT(IRA-1) = PCUT(IRSTART_Jaws);
   DOSE_ZONE(IRA-1) = DOSE_ZONE(IRSTART_Jaws);
   MED(IRA-1) = AIR_INDEX; " medium of air
   OUTPUT IR_Jaws/3 + 1 ; (/' Paired bars/jaws no:',I3,
         /' ECUT,        PCUT,       DOSE ZONE,    IREGION_TO_BIT '/' :',$);
  ;MINPUT (Jaws) ECUT(IRA), PCUT(IRA), DOSE_ZONE(IRA),
          IREGION_TO_BIT(IRA); (2F15.0,2I5);
  ;OUTPUT ECUT(IRA),PCUT(IRA), DOSE_ZONE(IRA),
          IREGION_TO_BIT(IRA); (2F11.5,2I5);
   IREGION_TO_BIT(IRA -1) = IREGION_TO_BIT(IRSTART_Jaws);
   IF (ECUT(IRA) <  ECUTIN) ECUT(IRA)=ECUTIN;
   IF (PCUT(IRA) <  PCUTIN) PCUT(IRA)=PCUTIN;
   "get material for each bar and determine material number for these regions
   OUTPUT;(' Medium in this region',$);
   $MED_INPUT(Jaws); " inputs character array MED_IN from unit 5, loops
      "through array MEDIA(24,I) to check if medium was previously input.
      "If so, sets MED_INDEX to index of previous medium.  If not,
      "increments NMED and sets MED_INDEX to NMED.
      "error transfers to :ERROR_Jaws:
   MED(IRA) = MED_INDEX; " medium of the planar slab
   "both parts of jaw are same material so transfer parameters"
   ECUT(IRA+1) = ECUT(IRA);
   PCUT(IRA+1) = PCUT(IRA);
   DOSE_ZONE(IRA+1) = DOSE_ZONE(IRA);
   IREGION_TO_BIT(IRA +1) = IREGION_TO_BIT(IRA);
   MED(IRA+1) = MED(IRA); "
] "end of loop over IR_Jaws"
;
"  set up region numbers
"  =====================
"
"  CM has 4xISCM_MAX_Jaws regions, series of paired bars/jaws surrounded
"  by an air region.  paired bars are numbered in sequence starting from the
"  furthest upstream.
"
IREND_Jaws = IRSTART_Jaws + N_Jaws-1;  "Index of last region
NREG = NREG+N_Jaws;           "Total number of regions in full geometry up
                                "to and including this CM
IF (NREG <= $MXREG) ["have not exceeded maximum region number
      "Index of first region in next CM:"
      IR_start_CM(ICM_Jaws+1) = IREND_Jaws+1;
]
ELSE [
      OUTPUT ICM_Jaws,NREG,$MXREG;
      (//'***ERROR IN CM ',I4,' (JAWS):'/
         I4,' regions requested, only ',I4,' available'//);
      IERR_GEOM(ICM_Jaws)=IERR_GEOM(ICM_Jaws)+1;
]
"
"  parameter definition
"  ====================
"
"geometrical coordinates
"
"
DO I = 1, ISCM_MAX_Jaws[
   APO_Jaws(I) = (XBP_Jaws(I)-XFP_Jaws(I))/
                           (ZMAX_Jaws(I) - ZMIN_Jaws(I));
   ANE_Jaws(I) = (XBN_Jaws(I)-XFN_Jaws(I))/
                           (ZMAX_Jaws(I) - ZMIN_Jaws(I));
   BPO_Jaws(I) =  XFP_Jaws(I) - ZMIN_Jaws(I)*APO_Jaws(I);
   BNE_Jaws(I) =  XFN_Jaws(I) - ZMIN_Jaws(I)*ANE_Jaws(I);
   COSP_Jaws(I)= (ZMAX_Jaws(I) - ZMIN_Jaws(I))/
                 SQRT( (ZMAX_Jaws(I) - ZMIN_Jaws(I))**2
                      +( XBP_Jaws(I) - XFP_Jaws(I) )**2 );
   COSN_Jaws(I)= (ZMAX_Jaws(I) - ZMIN_Jaws(I))/
                 SQRT( (ZMAX_Jaws(I) - ZMIN_Jaws(I))**2
                       + (XBN_Jaws(I) - XFN_Jaws(I))**2 );
]

BDYTOL = $BDY_TOL;
DO I = 1,ISCM_MAX_Jaws ["loop through bars"
   XFPT_Jaws(I,1)  = XFP_Jaws(I) + BDYTOL;
   XFPT_Jaws(I,2)  = XFP_Jaws(I) - BDYTOL;
   XBPT_Jaws(I,1)  = XBP_Jaws(I) + BDYTOL;
   XBPT_Jaws(I,2)  = XBP_Jaws(I) - BDYTOL;
   XFNT_Jaws(I,1)  = XFN_Jaws(I) - BDYTOL;
   XFNT_Jaws(I,2)  = XFN_Jaws(I) + BDYTOL;
   XBNT_Jaws(I,1)  = XBN_Jaws(I) - BDYTOL;
   XBNT_Jaws(I,2)  = XBN_Jaws(I) + BDYTOL;
   BPOT_Jaws(I,1) =  BPO_Jaws(I) + BDYTOL;
   BPOT_Jaws(I,2) =  BPO_Jaws(I) - BDYTOL;
   BNET_Jaws(I,1) =  BNE_Jaws(I) - BDYTOL;
   BNET_Jaws(I,2) =  BNE_Jaws(I) + BDYTOL;
] "end of loop over I"
"

"establish start of next CM
Z_min_CM(ICM_Jaws+1) = ZMAX_Jaws(ISCM_MAX_Jaws);
"
"
ZFRONT_Jaws = Z_min_CM(ICM_Jaws);
ZBACK_Jaws = Z_min_CM(ICM_Jaws+1);
"
"  establish CM boundary is a square
"  =================================
"
RMAX_CM_FLAG(ICM_Jaws) = 2; "=> put a square boundary about CM

"
"  establish dose-scoring zones and range rejection parameters for each region
"  ===========================================================================
"
IRA = IRSTART_Jaws-1; "absolute region number
DO IR_Jaws=1,N_Jaws ["loop over local region number
   IRA = IRA+1;
   "dose-scoring zones and latch
   "
   NDOSE_ZONE = MAX(DOSE_ZONE(IRA),NDOSE_ZONE); "Number of dose zones"
   MAX_BIT = MAX(IREGION_TO_BIT(IRA),MAX_BIT);

   "charged particle range rejection parameters
   "
   ESAVE(IRA)=ESAVE_GLOBAL; "Particles with total energies below ESAVE are
                            "considered for range rejection
   ECUTRR(IRA)=ECUT(IRA); "Minimum energy on exit from region
] "end of loop over IR_Jaws
E_min_out(ICM_Jaws)=ECUT(IRA); "Minimum energy on exit from CM


"   return from INPUT_JAWS
"   =======================
"
RETURN;

"   error messages
"   ==============
"
:EOF_Jaws:
;OUTPUT ICM;(//' *** ERROR *** unexpected end of file reading input for CM',I3);
STOP;

:ERROR_Jaws:
;OUTPUT ICM;(//' *** ERROR *** format error on input for CM',I3);
STOP;
END;  "End of INPUT_Jaws"
%E   "Start of subroutine ISUMRY_Jaws"
"*******************************************************************************
"
"                          Subroutine ISUMRY_JAWS
"                          ***********************
"
" Summarize input, write graphics file for EGS_Windows, and set parameters that
" require medium information obtained from HATCH call.
"
"*******************************************************************************

;SUBROUTINE ISUMRY_Jaws;


;IMPLICIT NONE;

;COMIN/
   BOUNDS,CMs,CM_Jaws,GEOM,IO_INFO,MEDIA,MISC,SCORE,UPHIOT,USER/;

"T>
"T>**********************************
"T>TYPE DECLARATIONS FOR ISUMRY_JAWS
"T>**********************************
"T>

INTEGER
   ICOLOUR,   "T>colour of CM for EGS_Windows
   IRA,       "T>absolute region number
   I,J;       "T>DO loop index

$REAL
   XYMAX,     "T>X or Y boundary
   VOLAIR_Jaws,  "T>air volume
   VOL_Jaws($MAX_N_Jaws); "T>volume of air between bar
CHARACTER*1 XY_CHOICE(1);

"   Mass of dose zone
"   =================
"Need to calculate mass of dose zone here, after call to HATCH, where the region
"density is set if it was allowed to default in INPUT_Jaws.
"
IRA = IRSTART_Jaws-2; "absolute region number
VOLAIR_Jaws=(ZBACK_Jaws-ZFRONT_Jaws)*
            4.*RMAX_CM2(ICM_Jaws);"air volume"
DO I = 1,ISCM_MAX_Jaws [
  IRA=IRA+3;
   VOL_Jaws(I)=(ZMAX_Jaws(I)-ZMIN_Jaws(I))*
               (4.*RMAX_CM2(ICM_Jaws)-
               RMAX_CM(ICM_Jaws)*
               ABS(XFP_Jaws(I)+
               XBP_Jaws(I)-XFN_Jaws(I)-
               XBN_Jaws(I)));
   VOLAIR_Jaws=VOLAIR_Jaws-VOL_Jaws(I);
   IF(DOSE_ZONE(IRA)~=0) [ "this is a dose zone"
      ID=DOSE_ZONE(IRA);
     AMASS(ID)=AMASS(ID)+RHOR(IRA)*VOL_Jaws(I);
   ]
] "end of loop over IR_Jaws"
IRA = IRSTART_Jaws; "absolute region number
IF(DOSE_ZONE(IRA)~=0) ["this is a dose zone"
      ID=DOSE_ZONE(IRA);
      AMASS(ID)=AMASS(ID)+RHOR(IRA)*VOLAIR_Jaws;
]


"   Summarize geometrical information for this component module in listing file
"   ===========================================================================
"
WRITE(IOUTLIST,110) ICM_Jaws,TITLE_Jaws;
WRITE(IOUTLIST,120) Z_min_CM(ICM_Jaws),RMAX_CM(ICM_Jaws);
WRITE(IOUTLIST,122);
DO I=1, ISCM_MAX_Jaws[
   IF(I=1)[
        WRITE(IOUTLIST,124)'airgap',Z_min_CM(ICM_Jaws),ZMIN_Jaws(1)-
                           Z_min_CM(ICM_Jaws),'NA','NA','NA','NA',
                           'NA';
   ]
   ELSE[
        WRITE(IOUTLIST,124)'airgap',ZMAX_Jaws(I-1),ZMIN_Jaws(I)-
                           ZMAX_Jaws(I-1),'NA','NA','NA','NA',
                           'NA';
   ]
   IF(IXY_CHOICE_Jaws(I) = 0)[XY_CHOICE(1) ='x';]
   ELSE[XY_CHOICE(1) ='y';]
   WRITE(IOUTLIST,123)I,ZMIN_Jaws(I),ZMAX_Jaws(I)-
                      ZMIN_Jaws(I),XY_CHOICE(1),
                      XFP_Jaws(I),XBP_Jaws(I),
                      XFN_Jaws(I),XBN_Jaws(I);
]
WRITE(IOUTLIST,130);
IRA = IRSTART_Jaws-1;
DO I = 1, ISCM_MAX_Jaws [
   IRA = IRSTART_Jaws + 3*(I-1);
   IF(MED(IRA)~=0)[
      WRITE(IOUTLIST,140) 3*(I-1)+1,I,'airgap',
        ECUT(IRA),PCUT(IRA), ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),
         IREGION_TO_BIT(IRA),(MEDIA(J,MED(IRA)),J=1,9);
        WRITE(IOUTLIST,141)'above &';
        WRITE(IOUTLIST,141)'centre';
   ]
   ELSE[
      WRITE(IOUTLIST,140) 3*(I-1)+1,I,'airgap',
        ECUT(IRA),PCUT(IRA), ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),
         IREGION_TO_BIT(IRA),'V','a','c','u','u','m';
        WRITE(IOUTLIST,141)'above &';
        WRITE(IOUTLIST,141)'centre';
   ]
   IF(MED(IRA+1)~=0)[
      WRITE(IOUTLIST,140) 3*(I-1)+2,I,'+ve jaw',
        ECUT(IRA+1),PCUT(IRA+1), ECUTRR(IRA+1),ESAVE(IRA+1),
        DOSE_ZONE(IRA+1),
         IREGION_TO_BIT(IRA+1),(MEDIA(J,MED(IRA+1)),J=1,9);
   ]
   ELSE[
      WRITE(IOUTLIST,140) 3*(I-1)+2,I,'+ve jaw',
        ECUT(IRA+1),PCUT(IRA+1), ECUTRR(IRA+1),ESAVE(IRA+1),
        DOSE_ZONE(IRA+1),
         IREGION_TO_BIT(IRA+1),'V','a','c','u','u','m';
   ]
   IF(MED(IRA+2)~=0)[
      WRITE(IOUTLIST,140) 3*(I-1)+3,I,'-ve jaw',
        ECUT(IRA+2),PCUT(IRA+2), ECUTRR(IRA+2),ESAVE(IRA+2),
        DOSE_ZONE(IRA+2),
         IREGION_TO_BIT(IRA+2),(MEDIA(J,MED(IRA+2)),J=1,9);
   ]
   ELSE[
      WRITE(IOUTLIST,140) 3*(I-1)+3,I,'-ve jaw',
        ECUT(IRA+2),PCUT(IRA+2), ECUTRR(IRA+2),ESAVE(IRA+2),
        DOSE_ZONE(IRA+2),
         IREGION_TO_BIT(IRA+2),'V','a','c','u','u','m';
   ]
   WRITE(IOUTLIST,141)' ';
]
110 FORMAT(///1X,79('-')/
'  Component module',I3,' is JAWS'
           /1X,79('-')
           //T5,'Title: ',68A1);
120 FORMAT(/T2,'Jaws geometry parameters:',
           /T2,'-----------------------------',
           /T2,'Distance of front of CM from reference plane = ',
           F15.5,' cm',
           /T2,'Half-width of outer boundary of CM = ',F15.5,' cm');
122 FORMAT(/T2,
'jaw #    Z front    thickness    x or y               coordinates',
/T2,
'          face                   jaws        FP       BP       FN',
'      BN',
/T2,
'          (cm)        (cm)                                (cm)');
123 FORMAT(T2,I3,F12.3,F11.3,9X,A1,F12.3,F9.3,F9.3,F9.3);
124 FORMAT(T2,A6,F9.3,F11.3,8X,A2,A11,A9,A9,A8);
130 FORMAT(/T2,'Jaws region parameters:',
           /T2,'---------------------------',
           /T2,'local jaw #   location  electron  photon',
           '  range-rejection   dose  bit  medium'
           /T2,'region                   cutoff   cutoff',
           '   level     max    zone  set'
           /T2,'                          (MeV)    (MeV)',
           '   (MeV)    (MeV)');
140 FORMAT(T2,I3,I7,4X,A7,F10.3,F9.3,F8.3,F9.3,I6,I5,2X,9A1);
141 FORMAT(15X,A7);


"   Output representation of this component module to file for EGS_Windows
"   ======================================================================
"
IF (IWATCH = 4 | IZLAST = 2) ["Graphics file requested"
   ;$SELECT-COLOUR; "Macro for selecting ICOLOUR = 1, 2, or 3, colour of CM"
   DO I =1,ISCM_MAX_Jaws["Loop over local region number"
      XYMAX = RMAX_CM(ICM_Jaws);
         IF(IXY_CHOICE_Jaws(I) = 0)[
            WRITE(IOUTGEOM,200)
               ICOLOUR,'COLX',XYMAX,XFP_Jaws(I),XBP_Jaws(I),XYMAX,XYMAX,
               ZMIN_Jaws(I),ZMAX_Jaws(I);
            WRITE(IOUTGEOM,200)
              ICOLOUR,'COLX',XFN_Jaws(I),-XYMAX,-XYMAX,XBN_Jaws(I),
              XYMAX, ZMIN_Jaws(I),ZMAX_Jaws(I);
         ]
         ELSEIF(IXY_CHOICE_Jaws(I) = 1)[
            J = ICOLOUR-1;
            IF(J < 1)[J = 4;]
            WRITE(IOUTGEOM,200)
               J,'COLY',XYMAX,XFP_Jaws(I),XBP_Jaws(I),XYMAX,XYMAX,
               ZMIN_Jaws(I),ZMAX_Jaws(I);
            WRITE(IOUTGEOM,200)
               J,'COLY',XFN_Jaws(I),-XYMAX,-XYMAX,XBN_Jaws(I),XYMAX,
               ZMIN_Jaws(I),ZMAX_Jaws(I);
         ]
   ]
] "End of graphics output"

200 FORMAT(' ',I1,A4,10(F7.2,','));

"   end of ISUMRY_JAWS
"   ===================
"
RETURN;
END;  "End of subroutine ISUMRY_Jaws"

%E   "Start of subroutine HOWNEAR_Jaws"
"******************************************************************************
"
"                          Subroutine HOWNEAR_JAWS
"                          ***********************
"
" Returns min. distance to nearest region boundary
" Replaces the old HOWNEAR macro.
"
"*******************************************************************************
;SUBROUTINE HOWNEAR_Jaws(DIST);


$IMPLICIT-NONE;

COMIN/CM_Jaws,STACK/;

$REAL DIST; "T> min. distance to nearest boundary

IR_Jaws = IR(NP)-IRSTART_Jaws+1;
ISCM_Jaws = (IR_Jaws-1)/3 + 1;
XY_Jaws = X(NP);
UV_Jaws = U(NP);
IF(IXY_CHOICE_Jaws(ISCM_Jaws) = 1)[
   XY_Jaws = Y(NP);
   UV_Jaws = V(NP);
]
IF(IR_Jaws = 3*ISCM_Jaws-1) [ "particle in positive bars"
   DIST = COSP_Jaws(ISCM_Jaws)
          *(XY_Jaws-APO_Jaws(ISCM_Jaws)*Z(NP)
           -BPOT_Jaws(ISCM_Jaws,2));
   DIST = MIN(DIST,
              ZMAX_Jaws(ISCM_Jaws)-Z(NP),
              Z(NP) - ZMIN_Jaws(ISCM_Jaws));
]
ELSEIF(IR_Jaws = 3*ISCM_Jaws) [ "particle in negative bars"
   DIST = COSN_Jaws(ISCM_Jaws)
          *(ANE_Jaws(ISCM_Jaws)*Z(NP)
          +BNET_Jaws(ISCM_Jaws,2)-XY_Jaws) ;
   DIST = MIN(DIST,
              ZMAX_Jaws(ISCM_Jaws) - Z(NP),
              Z(NP) - ZMIN_Jaws(ISCM_Jaws) );
]
ELSE[ "particle in air"
   DIST = 0.0;
]
RETURN;
END; "End of subroutine HOWNEAR_Jaws"
"*******************************************************************************
"End of JAWS_cm.mortran"
%C80
"#############################################################################"
"                                                                             "
"  EGSnrc BEAMnrc component module: stacked planes                            "
"  Copyright (C) 2015 National Research Council Canada                        "
"                                                                             "
"  This file is part of EGSnrc.                                               "
"                                                                             "
"  EGSnrc is free software: you can redistribute it and/or modify it under    "
"  the terms of the GNU Affero General Public License as published by the     "
"  Free Software Foundation, either version 3 of the License, or (at your     "
"  option) any later version.                                                 "
"                                                                             "
"  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY  "
"  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  "
"  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for   "
"  more details.                                                              "
"                                                                             "
"  You should have received a copy of the GNU Affero General Public License   "
"  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.             "
"                                                                             "
"#############################################################################"
"                                                                             "
"  Author:          Blake Walters, 1995                                       "
"                                                                             "
"  Contributors:    Dave Rogers                                               "
"                   Geoff Zhang                                               "
"                   Iwan Kawrakow                                             "
"                                                                             "
"#############################################################################"
"                                                                             "
"  This code originally evolved from the SLAB component module written by     "
"  Dave Rogers and Bruce Faddegon, starting in 1991, and subsequently edited  "
"  by George Ding.                                                            "
"                                                                             "
"  The contributors named above are only those who could be identified from   "
"  this file's revision history.                                              "
"                                                                             "
"  This code was originally part of the BEAM code system for Monte Carlo      "
"  simulation of radiotherapy treatments units. It was developed at the       "
"  National Research Council of Canada as part of the OMEGA collaborative     "
"  research project with the University of Wisconsin. The system was          "
"  originally described in:                                                   "
"                                                                             "
"  BEAM: A Monte Carlo code to simulate radiotherapy treatment units,         "
"  DWO Rogers, BA Faddegon, GX Ding, C-M Ma, J Wei and TR Mackie,             "
"  Medical Physics 22, 503-524 (1995).                                        "
"                                                                             "
"  BEAM User Manual                                                           "
"  DWO Rogers, C-M Ma, B Walters, GX Ding, D Sheikh-Bagheri and G Zhang,      "
"  NRC Report PIRS-509A (rev D)                                               "
"                                                                             "
"  As well as the authors of this paper and report, Joanne Treurniet of NRC   "
"  made significant contributions to the code system, in particular the GUIs  "
"  and EGS_Windows. Mark Holmes, Brian Geiser and Paul Reckwerdt of Wisconsin "
"  played important roles in the overall OMEGA project within which the BEAM  "
"  code system was developed.                                                 "
"                                                                             "
"  There have been major upgrades in the BEAM code starting in 2000 which     "
"  have been heavily supported by Iwan Kawrakow, most notably: the port to    "
"  EGSnrc, the inclusion of history-by-history statistics and the development "
"  of the directional bremsstrahlung splitting variance reduction technique.  "
"                                                                             "
"#############################################################################"


"*******************************************************************************
"
"                             ***********             ""toc:
"                             *         *             ""toc:
"                             *  SLABS  *             ""toc:
"                             *         *             ""toc:
"                             ***********             ""toc:
"
"   History of modifications given by sccs
"
"*******************************************************************************
"*******************************************************************************
"
"                               PURPOSE
"                               *******
"   Component module for BEAM.  Multiple planes of arbitrary thickness and
"   material.
"
"*******************************************************************************
"
"                          GENERAL DESCRIPTION
"                          *******************
"
"   This set of routines is used in conjunction with BEAM.MORTRAN to simulate
"   one component module of a clinical linear accelerator:  a set of 2 or more
"   slabs infinite in x & y.
"
"   This component module can be added to the simulation by including these
"   routines in the MORTRAN file BEAM_CM.MORTRAN and including the MORTRAN
"   replacement macros associated with this component module in the file
"   BEAM_COMMON.MORTRAN.  The order of the component modules in either of
"   these files is unimportant.  To explicitly include this component module in
"   the simulation it must be included in the $CM_LIST replacement statement.
"   The component modules in this list are stacked sequentially for the
"   simulation, one on top of the other, and must not overlap.
;
%E   " SLABS_cm.mortran - start of geometry description
"I>
"I> Geometry of Air (SLABS):             ""toc:
"I> ******************
"I>
"I>                     |        |          |        |                |
"I>                     |        |          |        |                |
"I>                     |        |          |        |                |
"I>                     |        |          |        |                |
"I>                     |        |          |        |                |
"I> -------->    IR=    | IR=1   |  IR=2    | ...... |  IR=N_SLABS    |
"I>    beam   N_SLABS+1 |        |          |        |                |
"I> direction  (airgap) |        |          |        |                |
"I>                     |        |          |        |                |
"I>                     |        |          |        |                |
"I>                     |        |          |        |                |
"I>
"I>   IR is the region number within the CM.  There are N_SLABS(+1) local
"I>   regions. The first region is the slab furthest upstream.  If there
"I>   is an airgap at the front (top) then it is the last region,
"I>   otherwise the last region is the slab furthest downstream.
"I>
"I>
"I>            -----------------------------------------------
"I>            |          Region        | Description        |
"I>            |------------------------|--------------------|
"I>            |  absolute    | local   |                    |
"I>            |--------------|---------|                    |
"I>            |IRSTART_SLABS | IR_SLABS| slab infinite x, y |
"I>            |  +IR_SLABS-1 |         |                    |
"I>            -----------------------------------------------
"I>
" Subroutines:
" ************
"                      INPUT_Air
"                      ISUMRY_Air
"                      HOWFAR_Air
"                      WHERE_AM_I_Air
"
"       Called from BEAM's subroutines:
"                      INPUT
"                      ISUMRY
"                      HOWFAR
"
"       Subroutines called:
"                      WHERE_AM_I (a BEAM subroutine)
"
"*******************************************************************************
"
"                             RESTRICTIONS ON USE/BUGS             ""toc:
"                             ************************
"
"         As structured, one cannot assign IREGION_TO_BIT or DOSE_ZONE values
"         to the air gap region if it exists.
"
"        in EGS_WINDOWS file, a disk instead of square is output
"
"*******************************************************************************
"
;
"*******************************************************************************
"**************************  DESCRIPTION OF VARIABLES  *************************
"*******************************************************************************
"
"
"                                OTHER VARIABLES
"                                ***************
"
"  Refer to the section on type declarations for each subroutine. The following
"  section describes the variables input from unit 5.  These variables define
"  the parameters of each simulation.
"
"*******************************************************************************
"
"                               INPUT FROM UNIT 5              ""toc:
"                               *****************             ""toc:
"
"I>
"I>  CARDS CM_Air  (SLABS)
"I>  **************
"I>
"I>  -1  dummy line (filled with ****)  read in main
"I>
"I>   0  RMAX_CM(ICM_Air)       outer boundary for CM - 1/2 side of
"I>                                square(read in main)
"I>
"I>   1  TITLE_Air (60A1):  Title of CM.
"I>
"I>   2  N_Air (I5):  Number of planar slabs in CM = # regions in CM,
"I>                      excludes any air gap needed.
"I>
"I>   3  ZMIN_Air (F15.0):  Distance from front of first slab to reference
"I>                            plane  (Z=0).
"I>
"I>   4  Parameters of each slab from front to back (increasing Z).  One pair of
"I>      cards (4a and 4b) for each of the slabs.
"I>
"I>      4a   ZTHICK_Air, ECUT, PCUT, DOSE_ZONE, IREGION_TO_BIT, ESAVEIN
"I>                           (3F15.0,2I5,F15.0):
"I>
"I>              ZTHICK_Air:   slab thickness.
"I>              ECUT, PCUT:      Cutoff energies-defaults are ECUTIN,PCUTIN
"I>              DOSE_ZONE:       Dose zone to score dose - 0 if not scored
"I>              IREGION_TO_BIT:  map this region to this bit number in LATCH
"I>              ESAVEIN:         Value of ESAVE for this region if range
"I>                               rejection on. Default is ESAVE_GLOBAL.
"I>
"I>      4b   MED_IN (24A1):  Medium of the planar slab, used to set MED_INDEX.
"I>
"I>   Example
"I>   *******
"I>
"I>  The following set of cards defines a 1 cm thick slab of air sandwiched
"I>  between two 0.1 cm thick slabs of tungsten.  The front slab is at
"I>  Z=7.32 cm. Electrons will be followed in the slabs down to kinetic energies
"I>  of 10 keV (total energies of 0.521 MeV) and photons will be followed down
"I>  to energies of 1 keV.  The dose deposited in the air will be scored and
"I>  added to the dose from the other regions in dose zone 1, and the
"I>  dose deposited in both tungsten slabs will be scored and added to the dose
"I>  from the other regions in dose zone 2.  Particles interacting in
"I>  the first slab will be associated with BIT 1 in LATCH.  In all slabs,
"I>  ESAVEIN=0, thus ESAVE in each slab will default to ESAVE_GLOBAL.
"I>
"I>  10.0,                         RMAX_CM
"I>  Multiple slabs: 0.1cm W-1cm air-0.1cm W, ECUT=0.521, PCUT=0.001
"I>  3,                            N_SLABS
"I>  7.32,                         ZMIN_SLABS
"I>  0.1, 0.521, 0.001, 2,1,0.0,   ZTHICK_SLABS etc
"I>  W521ICRU
"I>  1., 0.521, 0.001, 1,0,0.0
"I>  AIR521ICRU
"I>  0.1, 0.521, 0.001, 2,0,0.0
"I>  W521ICRU
"
"
%E   "Start of subroutine INPUT_Air"
"*******************************************************************************
"
"                           Subroutine INPUT_SLABS
"                           **********************
"
"  A CM input subroutine for a series of 1 or more slabs infinite in x & y.
"
"  It must fill all parameters in COMMON/CMs/ associated with this CM.
"
"  Routine prints error messages on unit 6 for
"      format error on input
"      end of file hit
"      error in logic of input file
"
"  The format of the input is presented in the section `INPUT FROM UNIT 5' in
"  the above documentation.
"
"*******************************************************************************

;SUBROUTINE INPUT_Air;


;IMPLICIT NONE;
;COMIN/ BOUNDS,CMs,CM_Air,GEOM,IO_INFO,MEDIA,MISC,SCORE,USER,EGS-IO/;
"T>
"T>*********************************
"T>TYPE DECLARATIONS FOR INPUT_SLABS
"T>*********************************
"T>
$REAL ZMIN_Air,                   "T>minimum Z for this CM
      ESAVEIN;                       "T>ESAVE value read in for each region

INTEGER I,J,                         "T>DO loop indeces
        IRA,                         "T>Absolute region number
        MED_FLAG,                    "T>flag for media-sort macro $MED_INPUT
        MED_INDEX,                   "T>medium index,set(post)sort $MED_INPUT
        NDO;                         "T>loop index
"
"  initialize parameters
"  =====================
"
ICM_Air = ICM;                   "CM index for this component module
                                    "Note ICM_Air not needed here since
                                    "ICM is set, but it is not set when
                                    "other routines called.
IRSTART_Air = IR_start_CM(ICM_Air); "Index of first region in this CM,
                                    "set by previous CM or in MAIN if ICM=1
IERR_GEOM(ICM_Air) = 0;          "Geometry-checking flag, 0 if no errors
"
"establish CM boundary as a square (was cylinder prior to April 13,1994)
RMAX_CM_FLAG(ICM_Air) = 2;       "put a square boundary about CM
"
OUTPUT;(/' Air (SLABS)');
OUTPUT RMAX_CM(ICM); (' This component is a set of planar slabs'/
  '      Outer boundary is a square with |x| & |y| <',F10.2,' cm');
IF(ICM_Air = 1)[
   OUTPUT Z_min_CM(ICM_Air);
   (' This is first component -- starts at ',F11.4,' cm from reference plane');]
ELSE
   [OUTPUT Z_min_CM(ICM_Air);(' Previous CM ends at:',F12.5,' cm');]
OUTPUT;(' TITLE: ',$);
;MINPUT (Air) TITLE_Air;(60A1);
               "MINPUT is a replacement macro with EOF and
               "ERR branching to :EOF_{P1}: and :ERR_{P1}:
OUTPUT TITLE_Air;(' ',60A1);
"
"   get information for each slab
"   =============================
"
"
"Get maximum number of slabs (and regions) permitted
OUTPUT $MAX_N_Air; (' NUMBER OF SLABS (MINIMUM 1, MAXIMUM',I3,'): ',$);
;MINPUT (Air) N_Air; (I5);
OUTPUT N_Air; (I5);
IF(N_Air < 1)[
         N_Air=1;
         OUTPUT ICM_Air;
          (//'***ERROR IN CM ',I4,' (SLABS):'/
             '# of slabs < 1'/
             '# of slabs set to 1 for now.'//);
         IERR_GEOM(ICM_Air)=IERR_GEOM(ICM_Air)+1;
]
ELSEIF (N_Air > $MAX_N_Air)[
               N_Air=$MAX_N_Air;
               OUTPUT ICM_Air, N_Air;
               (//'***ERROR IN CM ',I4,' (SLABS):'/
                  '# of slabs > max. allowed'/
                  '# of slabs reduced to ',I4,' for now'//);
               IERR_GEOM(ICM_Air)=IERR_GEOM(ICM_Air)+1;
]

" get distance from reference plane, z=0"
"
OUTPUT;
 (' DISTANCE FROM FRONT OF SLABS (excluding air gap) TO REF PLANE (z=0): ',$);
;MINPUT (Air) ZMIN_Air;(F15.0);
OUTPUT ZMIN_Air;(F10.5);
IF(ZMIN_Air < Z_min_CM(ICM_Air))["have overlapped two CMs"
   IF(ICM_Air = 1)["first CM is special case"
     "Z_min_CM(1) is very front of accelerator, including air, input in main"
     OUTPUT ICM_Air, ZMIN_Air,Z_min_CM(ICM_Air);
      (//' ***WARNING IN CM ',I4,' (Air):'/
       ' Z_min_CM(1) (=front of the accelerator) is past front of first slab'/
       ' Z_min_CM(1) reset to value just input =',F8.5,' cm'/
       ' from ',F8.5,' cm'//);
     WRITE(IOUTLIST,:label1:) ICM_Air, ZMIN_Air,
                              Z_min_CM(ICM_Air);
          :label1: FORMAT(//' ***WARNING IN CM ',I4,' (Air):'/
  ' Z_min_CM(1) (=front of the accelerator) is past front of first slab'/
  ' Z_min_CM(1) reset to value just input =',F8.5,' cm'/
  ' from ',F8.5,' cm'//);
     Z_min_CM(ICM_Air) = ZMIN_Air;
   ]
   ELSE[
     OUTPUT ICM_Air;
       (//'***ERROR IN CM ',I4,' (Air):'/
          'Overlaps with previous CM.'//);
     IERR_GEOM(ICM_Air)=IERR_GEOM(ICM_Air)+1;
   ]
]

"loop over slabs
"
IRA = IRSTART_Air-1; "absolute region number
DO IR_Air=1,N_Air [
   "loop through local region number to get slab information"
   IRA = IRA+1;
   "get thickness, cutoff energies, and dose scoring zone"
   "
   OUTPUT IR_Air;(//' Inputs for slab # ',I5);
   OUTPUT; (' SLAB THICKNESS(cm), ECUT, PCUT,',
         ' DOSE ZONE(0=>DONT SCORE), IREGION_TO_BIT,ESAVE'/' :',$);
   ;MINPUT (Air)
      ZTHICK_Air(IR_Air),ECUT(IRA),PCUT(IRA),
      DOSE_ZONE(IRA),IREGION_TO_BIT(IRA),ESAVEIN;
      (3F15.0,2I5,F15.0);
   IF (ECUT(IRA) < ECUTIN) ECUT(IRA)=ECUTIN;
   IF (PCUT(IRA) < PCUTIN) PCUT(IRA)=PCUTIN;
   IF (ESAVEIN > 0.511) [ESAVE(IRA) = ESAVEIN;]
   ELSE [ESAVE(IRA)=ESAVE_GLOBAL;]
   "Particles with total energies < ESAVE are considered for range rejection"
   "if range rejection is on.  Default is ESAVE_GLOBAL but values are set"
   "back to zero in main if range rejection is off"
   ;OUTPUT
      ZTHICK_Air(IR_Air),ECUT(IRA),PCUT(IRA),
      DOSE_ZONE(IRA),IREGION_TO_BIT(IRA), ESAVE(IRA);
      (3F11.5,I9,I20,F11.5);
   IF(ZTHICK_Air(IR_Air)<0.0)[
      OUTPUT ICM_Air, IR_Air;
       (//'***ERROR IN CM ',I4,' (SLABS):'/
          'ZTHICK(',I4,') < 0.0'//);
      IERR_GEOM(ICM_Air)=IERR_GEOM(ICM_Air)+1;
   ]
   "get material for this slab and determine material number for this region"

   OUTPUT;(' SLAB ',$);
   ;$MED_INPUT(Air); " inputs character array MED_IN from unit 5, loops
      "through array MEDIA(24,I) to check if medium was previously input.
      "If so, sets MED_INDEX to index of previous medium.  If not,
      "increments NMED and sets MED_INDEX to NMED.
   MED(IRA) = MED_INDEX; " medium of the planar slab
] "end of loop over IR_Air"
"
"  parameter definition
"  ====================
"
"fill arrays of distance from reference plane (z=0) to front and back of slabs
ZFRONT_Air(1) = ZMIN_Air;
IF (N_Air > 1) [
   DO IR_Air=1,N_Air-1 ["loop through local region number"
      ZBACK_Air(IR_Air) = ZFRONT_Air(IR_Air) +
                            ZTHICK_Air(IR_Air);
      ZFRONT_Air(IR_Air+1) = ZBACK_Air(IR_Air);
   ] "end of loop over IR_Air"
]
ZBACK_Air(N_Air) = ZFRONT_Air(N_Air) +
                             ZTHICK_Air(N_Air);
"
"establish start of next CM
Z_min_CM(ICM_Air+1) = ZBACK_Air(N_Air);
"
"  set up air gap to previous CM, if present
"  =========================================
"
"  The air gap has the highest region number in the CM, even though it is at
"  the top of the component module.  This is to allow the assignment of region
"  numbers on input of the parameters of each local region (mainly to assign the
"  medium number of the region).  The air gap is then assigned after all of the
"  CM parameters have been input.
"
Z_gap_THICK(ICM_Air) = ZMIN_Air-Z_min_CM(ICM_Air);

IF (Z_gap_THICK(ICM_Air) < $MIN_GAP) ["$MIN_GAP is defined in  main"
   Z_gap_THICK(ICM_Air) = 0.;
   ZFRONT_Air(1)=Z_min_CM(ICM_Air);
   N_GAP_Air = 0; "no air gap for this CM
]
ELSE [
   N_GAP_Air = 1; "this CM has an air gap
   IRA = IRSTART_Air+N_Air; "absolute region number of air gap
   MED(IRA) = AIR_INDEX; "medium is air, vacuum or whatever assigned
   ESAVE(IRA)=ESAVE_GLOBAL; "Particles with total energies below ESAVE are
                            "considered for range rejection
   ECUT(IRA) = ECUTIN;
   PCUT(IRA) = PCUTIN;
   ZFRONT_Air(N_Air+1) = Z_min_CM(ICM_Air);
   "only for output listing
]
"  set up region numbers
"  =====================
"
"  This CM has N_Air+N_GAP_Air regions, plates infinite in x & y, with
"  an air gap at the front, if present. Slabs are numbered in sequence starting
"  from the furthest upstream slab to the last downstream slab, followed by the
"  air gap, if present.
"
IREND_Air = IRSTART_Air+N_Air+N_GAP_Air-1;
               "Index of last region
NREG = NREG+N_Air+N_GAP_Air;  "Total of regions in full geometry up
                                    "to and including this CM
                                    "NREG is in comin GEOM
IF (NREG <= $MXREG) ["have not exceeded maximum region number
      "Index of first region in next CM:"
      IR_start_CM(ICM_Air+1) = IREND_Air+1;
]
ELSE [
      OUTPUT ICM_Air,NREG,$MXREG;
      (//'***ERROR IN CM ',I4,' (SLABS):'/
         I4,' regions requested, only', I4,' available'/
         '    Change $MXREG in beam_user_macros.mortran'//);
      IERR_GEOM(ICM_Air)=IERR_GEOM(ICM_Air)+1;
]
"
"  establish dose-scoring zones and range rejection parameters for each region
"  ===========================================================================
"
"Note air gap cannot be a dose scoring region as presently set up.
IRA = IRSTART_Air-1; "absolute region number
DO IR_Air=1,N_Air ["loop over local region number
   IRA = IRA+1;

   "dose-scoring zones
   "
   NDOSE_ZONE = MAX(DOSE_ZONE(IRA),NDOSE_ZONE); "Number of dose zones
   MAX_BIT = MAX(IREGION_TO_BIT(IRA),MAX_BIT); " current maxmum number
] "end of loop over IR_Air

"set up minimum thicknesses which in this case are just the last 5"
"slabs"
"If we ever need more than 5 slabs, we should extend this or do
"something fancy like group similar materials"

NDO = MIN(5,N_Air); "consider at most 5 slabs of material"
                       "air gap handled below"
                       "limit of 5 not essential here, but needed in helpful"
                       "in other cases"
"OUTPUT NDO;(' For automated range rejection consider',I3,' slabs of material');
DO IR_Air = N_Air, N_Air-NDO+1, -1 [
   IRA = IR_Air + IRSTART_Air-1;   "absolute region"
   Z_min_thick(ICM,N_Air+1 - IR_Air) = ZTHICK_Air(IR_Air);
   "MED_min_thick is in COMIN CMs"
   MED_min_thick(ICM,N_Air+1 - IR_Air) = MED(IRA);
   "OUTPUT IR_Air,IRA,ICM, N_Air+1-IR_Air,
      "Z_min_thick(ICM,N_Air+1-IR_Air),
      "ICM,N_Air+1 - IR_Air,
      "MED_min_thick(ICM,N_Air+1 - IR_Air);
      "(' IR_Air,IRA=',I2,',',I3,' Z_min_thick(',2I2,')=',F10.3,
      "'  MED_min_thick(',2I3,')=',I2   );
]
IF(NDO < 5)[  "some not used - include air gap if there is one"
    IF(N_GAP_Air = 1)["There is an air gap"
       Z_min_thick(ICM,NDO+1) = Z_gap_thick(ICM_Air);
       MED_min_thick(ICM,NDO+1) = 1; "AIR is 1"
       OUTPUT ICM,NDO+1,Z_min_thick(ICM,NDO+1),ICM,NDO+1,
                 MED_min_thick(ICM,NDO+1);
       (' Front air gap',T20,' Z_min_thick(',I2,',',I2,')=',F10.3,
                 '  MED_min_thick(',I2,',',I2,')=',I5   );
       NDO = NDO +1;
    ]"end of loop if there is an air gap"
    IF(NDO < 5 )["check in case incremented by air gap"
       DO I = NDO+1,5["zero remaining, unused values"
         Z_min_thick(ICM,I) = 0.0;
         MED_min_thick(ICM,I) = 0;
       ]"end of do loop on I"
    ]"end second NDO < 5 case"
]"end NDO < 5 case"
"
"   return from INPUT_SLABS
"   =======================
RETURN;

"   error messages
"   ==============
"
:EOF_Air:
;OUTPUT ICM;
(//' *** ERROR in Air *** unexpected end of file reading input for CM',I3);
STOP;

:ERROR_Air:
;OUTPUT ICM;(//' *** ERROR  in Air *** format error on input for CM',I3);
STOP; END;
"End of INPUT_Air"

%E   "start of subroutine ISUMRY_Air"
"*******************************************************************************
"
"                          Subroutine ISUMRY_SLABS
"                          ***********************
"
" Summarize input, write graphics file for EGS_Windows, and set parameters that
" require medium information obtained from HATCH call.
"
"*******************************************************************************

;SUBROUTINE ISUMRY_Air;


;IMPLICIT NONE;
;COMIN/BOUNDS,CMs,CM_Air,GEOM,IO_INFO,MEDIA,MISC,SCORE,UPHIOT,USER/;
"T>
"T>**********************************
"T>TYPE DECLARATIONS FOR ISUMRY_SLABS
"T>**********************************
"T>
INTEGER
   ICOLOUR,   "T>colour of CM for EGS_Windows
   IDD,       "T>index of dose scoring zone
   IRA,       "T>absolute region number
   J;         "T>DO loop index
"
"   Mass of dose zone
"   =================
"Need to calculate mass of dose zone here,after call to HATCH, where the region
"density is set if it was allowed to default in INPUT_Air.
"
IRA = IRSTART_Air-1; "absolute region number
DO IR_Air=1,N_Air+N_GAP_Air ["loop over local region number
   IRA = IRA+1;
   IF(DOSE_ZONE(IRA).NE.0) ["this is a dose zone"
      IDD=DOSE_ZONE(IRA);
      "add mass of square region to any previous mass in dose region"
      AMASS(IDD)=AMASS(IDD) + RHOR(IRA)* (ZBACK_Air(IR_Air)
                 - ZFRONT_Air(IR_Air))*4*(RMAX_CM2(ICM_Air));
      "note RHOR is the density which defaults to that from PEGS4 in HATCH
      "but could be set to any value prior to call to hatch
   ]
] "end of loop over IR_Air"

"   Summarize geometrical information for this component module in listing file
"   ===========================================================================
"
"Output to list file changed to make it more clear--B Walters 18/08/94"

WRITE(IOUTLIST,110) ICM_Air,TITLE_Air;
WRITE(IOUTLIST,120) Z_min_CM(ICM_Air),RMAX_CM(ICM_Air);
WRITE(IOUTLIST,122);
IF(N_GAP_Air~=0)[
   WRITE(IOUTLIST,124) 'airgap',Z_min_CM(ICM_Air),
                       ZFRONT_Air(1)-Z_min_CM(ICM_Air);
]
DO IR_Air=1,N_Air[
   WRITE(IOUTLIST,123) IR_Air,ZFRONT_Air(IR_Air),
                       ZTHICK_Air(IR_Air);
]
WRITE(IOUTLIST,130);
IRA = IRSTART_Air-1;

DO IR_Air=1,N_Air + N_GAP_Air [
   IRA = IRA+1;
   IF(IR_Air<=N_Air)[
      IF (MED(IRA)=0) ["Medium is vacuum"
         WRITE(IOUTLIST,140)
         IR_Air,IR_Air,'slab',ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),
         IREGION_TO_BIT(IRA),'V','a','c','u','u','m';
      ]
      ELSE ["Medium is not vacuum"
         WRITE(IOUTLIST,140)
         IR_Air,IR_Air,'slab',ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),IREGION_TO_BIT(IRA),
         (MEDIA(J,MED(IRA)),J=1,9);
      ]
   ]
   ELSE[
      IF (MED(IRA)=0) ["Medium is vacuum"
         WRITE(IOUTLIST,142)
         IR_Air,'NA','airgap',ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),
         IREGION_TO_BIT(IRA),'V','a','c','u','u','m';
      ]
      ELSE ["Medium is not vacuum"
         WRITE(IOUTLIST,142)
         IR_Air,'NA','airgap',ECUT(IRA),PCUT(IRA),
         ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),IREGION_TO_BIT(IRA),
         (MEDIA(J,MED(IRA)),J=1,9);
      ]
    WRITE(IOUTLIST,141)'at top';
    ]
]"end loop on IR_Air"


110 FORMAT(///1x,79('-')/
 '  Component module',I3,' is one or more planar slabs  ',
 '(SLABS)'
           /1x,79('-')
           //T5,'Title: ',68A1);
120 FORMAT(/T2,'Air geometry parameters:',
           /T2,'-----------------------------',
           /T2,'Distance of front of CM from reference plane = ',
           F15.5,' cm',
           /T2,'Half-width of outer boundary of CM = ',F15.5,' cm');
122 FORMAT(/T2,
'slab #    Z front    thickness',
/T2,
'           face               ',
/T2,
'           (cm)        (cm)   ');
123 FORMAT(T2,I4,F12.3,F11.3);
124 FORMAT(T2,A6,F10.3,F11.3);
130 FORMAT(/T2,'Air region parameters:',
           /T2,'---------------------------',
           /T2,'local  slab #  location  electron  photon',
           '  range-rejection  dose  bit  medium'
           /T2,'region                    cutoff   cutoff',
           '   level     max   zone  set'
           /T2,'                           (MeV)    (MeV)',
           '   (MeV)    (MeV)');

140 FORMAT(T2,I3,I7,5X,A7,F10.3,F9.3,F8.3,F9.3,I5,I5,2X,9A1);
141 FORMAT(T17,A7);
142 FORMAT(T2,I3,5X,A2,5X,A7,F10.3,F9.3,F8.3,F9.3,I5,I5,2X,9A1);



"   Output representation of this component module to file for EGS_Windows
"   ======================================================================
"
IF (IWATCH = 4 | IZLAST = 2) ["Graphics file requested"
   ICOLOUR = MOD(ICM_Air,4)+1; "select ICOLOUR = 1, 2, or 3, colour of CM"
   DO IR_Air=1,N_Air ["Loop over local region number"
      WRITE(IOUTGEOM,200) ICOLOUR,'DISK',0.,0.,
                       ZFRONT_Air(IR_Air),RMAX_CM(ICM_Air);
      "NOTE *** it was a disk but it is a square now!"
   ]
   WRITE(IOUTGEOM,200) ICOLOUR,'DISK',0.,0.,
                       ZBACK_Air(N_Air),RMAX_CM(ICM_Air);
   200 FORMAT(' ',I1,A4,10(F7.2,','));
] "End of graphics output"
"
;RETURN;END;
"SLABS_cm.mortran end of ISUMRY_Air"

%E   "start of subroutine HOWFAR_Air"
"*******************************************************************************
"************************** Component Module SLABS *****************************
"*******************************************************************************
"
"                          Subroutine HOWFAR_SLABS
"                          ***********************
"
" HOWFAR routine for stacked planar media.
"
" Determine if current region number is within component module SLABS, and if so
" evaluate DIST, distance to region boundary along current trajectory.  USTEP
" must not exceed DIST.
"
"   There are N_SLABS local regions + an air gap (if present):
"
"     local               absolute                  description
"   ---------  ----------------------------------  -------------
"   IR_SLABS   IR_start_CM(ICM_SLABS)+IR_SLABS-1   slab IR_SLABS
"   N_SLABS+1  IR_start_CM(ICM_SLABS)+N_SLABS      air gap
"
"       Geometrical co-ordinates, as set in INPUT_SLABS are:
"       ZFRONT_SLABS(IR_SLABS)     front of slab IR_SLABS (upstream surface)
"       ZBACK_SLABS(IR_SLABS)      back of slab IR_SLABS (downstream surface)
"
"*******************************************************************************

;SUBROUTINE HOWFAR_Air;


;IMPLICIT NONE;
;COMIN/ CMs,CM_Air,EPCONT,STACK,EGS-IO/;
"T>
"T>**********************************
"T>TYPE DECLARATIONS FOR HOWFAR_SLABS
"T>**********************************
"T>
INTEGER
   IRL;         "T>local region number (absolute), required by HOWNEAR macro
$REAL
   DIST,        "T>distance to region boundary along current particle trajectory
   DMIN_Air, "T>minimum distance to boundaries checked thus far
   ZNEAR;       "T>distance to nearest boundary

IRL = IR(NP);   "local region number (absolute)

" Set DNEAR
" *********
" This replacement macros sets DMIN_Air as well as defining IR_Air
;
Air_CM_HOWNEAR(DMIN_Air);
DNEAR(NP) = DMIN_Air;
;
" Boundary-crossing check
" ***********************
" Determine if current region number is within component module SLABS,
"  and if so evaluate DIST, distance to region boundary along current
" trajectory.  USTEP must not exceed DIST.
"
IF (IR_Air>0 & IR_Air<N_Air+1) [
   "particle in this CM (not in air gap)"
   IF (W(NP)>0.0) ["particle going forward"
      "calculate distance to back boundary"
      ZNEAR = ZBACK_Air(IR_Air)-Z(NP);
      DIST = ZNEAR/W(NP);
      IF (DIST < 0.) [DIST=0.;]
      "Above check was put in to handle the case where the distance"
      "to interaction is ~ the distance to the"
      "back of the SLABS CM.  In this case, particles initiated"
      "by the interaction may actually have Z values that put them"
      "in the next CM, but because the WHERE_AM_I for the next"
      "CM has not been called yet, HOWFAR for SLABS is used, and a"
      "negative USTEP results.  Note that this unusual case has"
      "only been observed to occur between SLABS and CONS3R CMs"
      "when incident particles are photons, SLABS is the target, and"
      "CONS3R is the primary collimator immediately below the target"
      "18/12/95"
      IF(DIST=0. & IR_Air=N_Air)[DIST=1.E-16;]
      "Above gives DIST a very small positive value in case of leaving CM"
      "When collecting phase space immediately below a thin (0.01 cm) layer of"
      "Mylar in a beam, there was a high probability of the calculated"
      "value of USTEP (ie unmodified by HOWFAR) actually putting the particle"
      "right on the back of the mylar layer.  When it came to the next step,"
      "the calculated value of DIST was 0, which meant USTEP was set to 0,"
      "and, as a result, AUSGAB was not called on leaving the CM."
      IF(DIST <= USTEP ) ["particle to be moved to region boundary
         USTEP = DIST;
         IF (IR_Air<N_Air) ["particle will remain in CM"
            IRNEW = IR(NP)+1; "new region number"
         ]
         ELSE ["particle will enter downstream CM"
            CALL WHERE_AM_I(ICM_Air,1); "get IRNEW, ICMNEW"
         ]
      ]
   ]" end of forward going block"
   ELSEIF (W(NP)<0.0) ["particle going backwards"
      "calculate distance to front boundary"
      ZNEAR = Z(NP)-ZFRONT_Air(IR_Air);
      DIST = -ZNEAR/W(NP); "Direction cosine is negative"
      IF (DIST < 0.) [DIST=0.;] "see reason above"
      IF (DIST=0. & N_GAP_Air=0 & IR_Air=1)[ DIST=1.E-16;]
      IF(DIST <= USTEP) [
         USTEP = DIST;
         IF (IR_Air>1) ["particle will remain in CM"
            IRNEW = IR(NP)-1; "new region number"
         ]
         ELSEIF (IR_Air=1 & N_GAP_Air=1) ["particle entering air gap"
            IRNEW = IREND_Air; "new region number"
         ]
         ELSE ["particle will enter upstream CM"
            CALL WHERE_AM_I(ICM_Air,-1); "get IRNEW, ICMNEW"
         ]
      ]
   ]" end of backward going block"
   "if W(NP)=0.0, never hit boundary, need not reset USTEP"
]"end of CM regions"

"   in air gap at top of CM
"   =======================
"
ELSEIF (IR_Air=N_Air+1 & N_GAP_Air=1) ["particle in air gap"
   IF (W(NP)>0.0) ["particle going forward"
      "calculate distance to back boundary"
      ZNEAR = ZFRONT_Air(1)-Z(NP);
      DIST = ZNEAR/W(NP);
      IF (DIST < 0.) [DIST=0.;] "See reason above"
      IF(DIST <= USTEP ) ["particle will enter first slab, this CM
         USTEP = DIST;
         IRNEW = IRSTART_Air; "new region number"
      ]
   ]" end of forward going block"
   ELSEIF (W(NP)<0.0 ) ["particle going backwards"
      "calculate distance to front boundary"
      ZNEAR = Z(NP)-Z_min_CM(ICM_Air);
      DIST = -ZNEAR/W(NP); "Direction cosine is negative"
      IF (DIST <= 0.) [DIST=1.E-16;] "See reason above"
                                     "Always set to small +ve value since"
                                     "we are definitely leaving through top"
      IF(DIST <= USTEP) ["particle will enter upstream CM"
         USTEP = DIST;
         CALL WHERE_AM_I(ICM_Air,-1); "get IRNEW, ICMNEW"
      ]
   ]" end of backward going block"
   "if W(NP)=0.0, never hit boundary, need not reset USTEP"
]"end of air-gap region"

"   outside of CM, something is wrong
"   =================================
"
ELSE ["something is wrong"
   OUTPUT IR(NP)-IRSTART_Air+1, IR(NP), ICM_Air,
      IR_start_CM(ICM_Air); (//' ************'//' HOWFAR_Air error'/
      '    Region, local, absolute =',2I5/
      '    CM number=',I5,' start region =',I5/' *********'//);
   STOP;
] "end of IF statement"
RETURN; END; "End of subroutine HOWFAR_SLABS"

%E   "start of subroutine WHERE_AM_I_Air"
"*******************************************************************************
"
"                          Subroutine WHERE_AM_I_SLABS
"                          ***************************
"
" WHERE_AM_I routine for stacked planar slabs.
"
" WHERE_AM_I_Air determines the new region number when a particle traverses
" a component module boundary.  The scheme is as follows:
"
"      Whenever a particle is to be transported to a component module
"      boundary in HOWFAR, the subroutine WHERE_AM_I is called.  The
"      current component module and particle direction (backwards or
"      forwards) are transferred to WHERE_AM_I in the CALL statement.
"      WHERE_AM_I determines which component module the particle is
"      about to enter and calls the WHERE_AM_I_Air subroutine for
"      that component module, transferring the particle direction.
"      The region number that the particle is about to enter is
"      determined in WHERE_AM_I_Air from the knowledge of which
"      surface the particle is entering through (front if IDIR=1,
"      back if IDIR=-1) and the (X,Y) coordinates of the particle.
"      The current particle being transported is NP (in /STACK/).
"
"*******************************************************************************

;SUBROUTINE WHERE_AM_I_Air(IDIR);


;IMPLICIT NONE;
;COMIN/CM_Air,EPCONT,STACK/; "/STACK/would be needed for more complicated
                       "geometries.
"T>
"T>**************************************
"T>TYPE DECLARATIONS FOR WHERE_AM_I_SLABS
"T>**************************************
"T>
INTEGER IDIR,I;  "T>direction of particle, +1=forward, -1=backward

IF (IDIR=1) ["particle entering this CM through front face (upstream)
   IF (N_GAP_Air=0) ["no air gap this CM"
      IRNEW = IRSTART_Air;
   ]
   ELSE ["this CM has an air gap at the front
      IRNEW = IREND_Air;
   ]
]
ELSEIF(IDIR=2) ["particle starting within CM"
   IF(N_GAP_Air=1 & Z(NP)< ZFRONT_Air(1))[
      IRNEW = IREND_Air;
   ]
   ELSE[
     IRNEW=IRSTART_Air+N_Air-1;
     DO I=1,N_Air[
      IF(Z(NP)<ZFRONT_Air(I)+ZTHICK_Air(I))[
          IRNEW=IRSTART_Air+I-1;
          EXIT;
      ]
     ]
   ]
]
ELSE ["particle entering this CM through back face (downstream)
   IRNEW = IRSTART_Air+N_Air-1;
]
RETURN;
END; "End of subroutine WHERE_AM_I_SLABS"

%E  "start of subroutine HOWNEAR_Air"
"*****************************************************************************
"
"                        Subroutine HOWNEAR_Air
"                        *************************
"
" Returns min. distance to nearest region boundary.  Used to be a macro, but
" now the the macro calls this subroutine.
"
"*****************************************************************************

;SUBROUTINE HOWNEAR_Air(DIST);

$IMPLICIT-NONE;

COMIN/CM_Air,STACK,CMs/;

$REAL DIST; "T> min. distance to nearest region boundary

IR_Air = IR(NP)-IRSTART_Air+1;
IF(IR_Air=N_Air+1 & N_GAP_Air=1)["particle is in air gap"
   DIST=MIN(Z(NP)-Z_min_CM(ICM_Air),ZFRONT_Air(1)-Z(NP));
]
ELSE["particle is in one of the layers"
   DIST=MIN(Z(NP)-ZFRONT_Air(IR_Air),
       ZBACK_Air(IR_Air)-Z(NP));
]
RETURN;
END; "End of subroutine HOWNEAR_Air"
"******************************************************************************
"End of SLABS_cm.mortran"
%N "Turn off MORTRAN listing
