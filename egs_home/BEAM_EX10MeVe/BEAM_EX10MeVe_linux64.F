      program beam_main
      implicit none
      integer*4 ircode
      call egs_init
      call beam_init(ircode)
      write(6,*) '*********** Returned from beam_init: ircode = ',ircode
      IF (( ircode .LT. 0 )) THEN
          call exit(1)
      END IF
      IF((ircode .EQ. 0))call beam_shower_loop
      IF (( ircode .EQ. 2 )) THEN
          call beam_finish(1)
      ELSE
          call beam_finish(0)
      END IF
      call exit(0)
      end
#define HAVE_C_COMPILER
#ifdef HAVE_C_COMPILER
#endif
      subroutine beam_init(ircode)
      implicit none
      integer*4 ircode,IERR
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L(3000),IPHTER(3000)
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      COMMON/ELECIN/ esig_e(12),psig_e(12), esige_max, psige_max, range_
     *ep(0:1,500,12), E_array(500,12), etae_ms0(500,12),etae_ms1(500,12)
     *,etap_ms0(500,12),etap_ms1(500,12),q1ce_ms0(500,12),q1ce_ms1(500,1
     *2),q1cp_ms0(500,12),q1cp_ms1(500,12),q2ce_ms0(500,12),q2ce_ms1(500
     *,12),q2cp_ms0(500,12),q2cp_ms1(500,12),blcce0(500,12),blcce1(500,1
     *2), EKE0(12),EKE1(12), XR0(12),TEFF0(12),BLCC(12),XCC(12), ESIG0(5
     *00,12),ESIG1(500,12),PSIG0(500,12),PSIG1(500,12),EDEDX0(500,12),ED
     *EDX1(500,12),PDEDX0(500,12),PDEDX1(500,12),EBR10(500,12),EBR11(500
     *,12),PBR10(500,12),PBR11(500,12),PBR20(500,12),PBR21(500,12),TMXS0
     *(500,12),TMXS1(500,12), expeke1(12), IUNRST(12),EPSTFL(12),IAPRIM(
     *12), sig_ismonotone(0:1,12)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/ENERGYSRC/NENSRC,IMODE,ENSRCD,SRCPDF,SRCCDF,ENMIN,CDFINV, D
     *ELTAK,IB, FILNAM
      real*8 ENSRCD(240),SRCPDF(240),SRCCDF(240),ENMIN, CDFINV(1000,2),D
     *ELTAK
      INTEGER IMODE,NENSRC,IB
      CHARACTER*256 FILNAM
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/GEOM/ NREG
      INTEGER NREG
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/PHOTIN/ EBINDA(12), GE0(12),GE1(12), GMFP0(2000,12),GMFP1(2
     *000,12),GBR10(2000,12),GBR11(2000,12),GBR20(2000,12),GBR21(2000,12
     *), RCO0(12),RCO1(12), RSCT0(100,12),RSCT1(100,12), COHE0(2000,12),
     *COHE1(2000,12),  PHOTONUC0(2000,12),PHOTONUC1(2000,12), DPMFP, MPG
     *EM(1,12), NGR(12)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/SOURCE/ COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,
     *COSTHETA,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SI
     *GN2,RIN1_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA
     *24, NNPHSP,NPHOTSRC,WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEA
     *M,YBEAM,ZBEAM,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL
     *2,PROBFC,PROBSD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z
     *_SOURCE,E_ph_sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT1
     *00,XSCAN_UNIT,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YIN
     *DEL, EKMAXSRC, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9, Y_SRC9, PR
     *OB_SRC9, ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN,RDISTF,RPDF,RCDF, F
     *NORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COSRNG,SINRNG,WEIGHTOLD,UINOL
     *D,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RSRC_DBS,SSDSRC_DBS,ZSRC_DBS
     *,sigma_src19,DIST24,ALPHA24,BETA24,RBEAMY, xo_src19, yo_src19, NRD
     *IST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p, NPASS_ph_s
     *p, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRATIO_YXF, OL
     *DSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUNT, IERROR,
     *RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB,MONOEN, NR
     *CYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE_FLAG, INIT
     *_ICMOLD,I_MUPHSP_IN,SPCNAM, the_beam_code,the_input_file,the_pegs_
     *file,SPEC_TITLE,phsp_open
      REAL*8 COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,COSTHETA
     *,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SIGN2,RIN1
     *_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA24
      integer*8 NNPHSP, NPHOTSRC
      real*8 WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEAM,YBEAM,ZBEAM
     *,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL2,PROBFC,PROB
     *SD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z_SOURCE,E_ph_
     *sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT100,XSCAN_UNIT
     *,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YINDEL, EKMAXSRC
     *, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9(10), Y_SRC9(10), PROB_SR
     *C9(10), ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN(1000,2),RDISTF(1000)
     *, RPDF(1000),RCDF(1000), FNORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COS
     *RNG,SINRNG,WEIGHTOLD,UINOLD,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RS
     *RC_DBS,SSDSRC_DBS,ZSRC_DBS,sigma_src19,DIST24,ALPHA24,BETA24,RBEAM
     *Y, xo_src19, yo_src19
      INTEGER NRDIST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p,
     * NPASS_ph_sp, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRA
     *TIO_YXF, OLDSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUN
     *T, IERROR, RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB
     *,MONOEN, NRCYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE
     *_FLAG, INIT_ICMOLD,I_MUPHSP_IN
      CHARACTER*256 SPCNAM
      CHARACTER*80 the_beam_code,the_input_file,the_pegs_file,SPEC_TITLE
      logical phsp_open
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/RWPHSP/ STRING_TEMP_ZLAST_OUT,  STRING_TEMP_OUT,  IHSTRY_PH
     *SP,   iaea_dummy_long,  NHSTRY_DOS,   ESHORT,  WEIGHTTMP,  WT_PHSP
     *_SHORT,  X_PHSP_SHORT,  Y_PHSP_SHORT,  Z_PHSP_SHORT,  U_PHSP_SHORT
     *,  V_PHSP_SHORT,  W_PHSP_SHORT,  ZLAST_PHSP_SHORT,  MUIDX_PHSP_SHO
     *RT,  EKMAX_PHSP_SHORT,  EKMINE_PHSP_SHORT,  NINC_PHSP_SHORT,  dosx
     *yz2beam_index,  iaea_extra_floats,  NUM_PHSP_TOT,  PHOT_PHSP_TOT,
     *iaea_result,   iaea_n_stat,  iaea_q_typ,  iaea_typ_q,  iaea_q_inde
     *x,  I_PHSP,  IERR_PHSP,  LATCHTMP,  WRITE_PHSP_COUNTER,  WRITE_PHS
     *P_SOFAR,  PHSP_RESTART,  PHSP_RECL,  PHSP_RECL_OLD,  iaea_extra_in
     *ts,  iaea_extra_int_types,iaea_extra_float_types,   iaea_i_zlast,
     * iaea_i_latch,  iaea_i_muidx,  iaea_n_extra_ints,  iaea_n_extra_fl
     *oats,  i_iaea_open_for_write,   iaea_i_zlast_out,  iaea_i_latch_ou
     *t,  iaea_i_muidx_out,  dosxyz2beam_izscore,  MODE_RW
      CHARACTER*32000 STRING_TEMP_ZLAST_OUT(3)
      CHARACTER*28000 STRING_TEMP_OUT(3)
      integer*8 IHSTRY_PHSP(3),iaea_dummy_long,NHSTRY_DOS
      REAL*4 ESHORT,WEIGHTTMP,WT_PHSP_SHORT,X_PHSP_SHORT,Y_PHSP_SHORT, Z
     *_PHSP_SHORT,U_PHSP_SHORT, V_PHSP_SHORT,W_PHSP_SHORT,ZLAST_PHSP_SHO
     *RT, MUIDX_PHSP_SHORT, EKMAX_PHSP_SHORT,EKMINE_PHSP_SHORT,NINC_PHSP
     *_SHORT,dosxyz2beam_index, iaea_extra_floats(10)
      INTEGER NUM_PHSP_TOT,PHOT_PHSP_TOT, iaea_result,iaea_n_stat,iaea_q
     *_typ(3),iaea_typ_q(3),iaea_q_index,I_PHSP, IERR_PHSP,LATCHTMP, WRI
     *TE_PHSP_COUNTER(3),WRITE_PHSP_SOFAR(3), PHSP_RESTART,PHSP_RECL,PHS
     *P_RECL_OLD,iaea_extra_ints(10), iaea_extra_int_types(10),iaea_extr
     *a_float_types(10),iaea_i_zlast, iaea_i_latch,iaea_i_muidx,iaea_n_e
     *xtra_ints,iaea_n_extra_floats, i_iaea_open_for_write,iaea_i_zlast_
     *out,iaea_i_latch_out, iaea_i_muidx_out,dosxyz2beam_izscore
      CHARACTER*5 MODE_RW
      INTEGER LATCH_TEMP_OUT,NUM_PHSP_TOFLUSH,TEMP_PHSP_COUNTER,REM_PHSP
      REAL*4 REAL_TEMP_OUT(7)
      CHARACTER*32 REC_TEMP_OUT
      common/egs_vr/ e_max_rr(3000),  prob_RR,  nbr_split,  i_play_RR,
     *    i_survived_RR,
     *        n_RR_warning,                                        i_do_
     *rr(3000)
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common/CH_steps/ count_pII_steps,count_all_steps,is_ch_step
      real*8 count_pII_steps,count_all_steps
      logical is_ch_step
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/timing_info/ etimetot, timcpu, tzero, timeb, ibatch
      real*8 etimetot, timcpu, tzero, timeb
      integer*4 ibatch
      COMMON/GetInput/ ALLOWED_INPUTS(100,0:5),   VALUES_SOUGHT(100),  C
     *HAR_VALUE(100,100),  VALUE(100,100),  DEFAULT(100),  VALUE_MIN(100
     *),  VALUE_MAX(100),  NVALUE(100),  TYPE(100),      ERROR_FLAGS(100
     *),   i_errors,  NMIN, NMAX,   ERROR_FLAG,  DELIMETER
      character ALLOWED_INPUTS*64,VALUES_SOUGHT*64, CHAR_VALUE*256,DELIM
     *ETER*64
      real*8 VALUE,DEFAULT,VALUE_MIN,VALUE_MAX
      integer*4 NVALUE,TYPE,NMIN,NMAX,ERROR_FLAG,ERROR_FLAGS,i_errors
      INTEGER I,IS,I1,I2,I3,I4,IT,J,k,  LATCHM,NHSTRYM,NPASSM,IQINM, IER
     *R_INPUTS,  IRL,  ITMAX,  LELKE,  lelktmp,  lelec,  NPPHSPSP,   egs
     *_open_datfile,  egs_open_file,  lnblnk1,  IZLAST1
      real*8 DEDXE,  EKEM,  EKEI,  ELKEI,  fedep,  elktmp,  dedxmid,  au
     *x,  EI,  RSCORE_MAX2,  EINM,XINM,YINM,UINM,VINM,WTM,ZINM,WINM,  WE
     *IGHT,Z_SCORE
      REAL*4 Z_SCORE_SHORT
      integer*8 long_tmp
      CHARACTER*8 AUNIT
      CHARACTER*256 phsp_fn,phsp_fn_base
      external combine_results
      IBATCH=0
      ETIMETOT=0
      ircode = 0
      DO 1011 I_PHSP=1,3
          WRITE_PHSP_COUNTER(I_PHSP)=0
          WRITE_PHSP_SOFAR(I_PHSP)=0
          IHSTRY_PHSP(I_PHSP)=0
1011  CONTINUE
1012  CONTINUE
      PHSP_RESTART=0
      PHSP_RECL_OLD=0
      iaea_q_typ(1)=2
      iaea_q_typ(2)=1
      iaea_q_typ(3)=3
      iaea_typ_q(1)=0
      iaea_typ_q(2)=-1
      iaea_typ_q(3)=1
      iaea_n_extra_ints=0
      iaea_n_extra_floats=0
      iaea_i_zlast=-99
      iaea_i_latch=-99
      iaea_i_muidx=-99
      i_iaea_open_for_write=0
      iaea_i_zlast_out=-99
      iaea_i_latch_out=-99
      iaea_i_muidx_out=-99
      CMLIST(1) = 'XITWIN'
      CMLIST(2) = 'COLLIMAT'
      CMLIST(3) = 'SCATFOIL'
      CMLIST(4) = 'IONCHAM'
      CMLIST(5) = 'RING'
      CMLIST(6) = 'MIRROR'
      CMLIST(7) = 'MAINJAWS'
      CMLIST(8) = 'APPLICAT'
      CMTYPE(1) = 'SLABS'
      CMTYPE(2) = 'CONS3R'
      CMTYPE(3) = 'CONESTAK'
      CMTYPE(4) = 'CHAMBER'
      CMTYPE(5) = 'CONESTAK'
      CMTYPE(6) = 'MIRROR'
      CMTYPE(7) = 'JAWS'
      CMTYPE(8) = 'APPLICAT'
      CALL DATETIME(1)
      WRITE(6,1020)TIMEN, DATEN
1020  FORMAT(//' BEAMnrc  ',' ', ' '/ ' ON ','linux64',' WITH EGSnrc.',T
     *60,A,1X,A/)
      WRITE(6,1030)25, 12, 3000, 10000, 2000, 1500, 3, 5, 12, 0.01
1030  FORMAT(/' The following internal parameters are set:'/ ' Max numbe
     *r of CMs:',I3, T40,'Max number of media',I4/ ' Max number of regio
     *ns:',I4, T40,'Max stack:',I10/ ' Max bremsstrahlung split:',I10, T
     *40,'Max number dose zones:',I4/ ' Max number of scoring planes:',I
     *3,T40,'Max number of scoring zones:',I4/ ' Max number dose compone
     *nts:',I3, T40,'Minimum air gap:',F12.4,' cm'/ '   All of above can
     * be adjusted in beamnrc_user_macros.mortran'/)
      IOUTLIST = 1
      IOUTRN = 2
      IOUTPLOT = 3
      IORSTRT = 4
      IOUTGPH = 13
      IOUTGEOM = 17
      IINSRC = 42
      OUTCNT =0
      DO 1041 I=1,3
          IOUTFLU(I) = I+43
1041  CONTINUE
1042  CONTINUE
      IOUTLIST=egs_open_file(IOUTLIST,0,1,'.egslst')
      CALL INPUTS
      WRITE(6,1050)
1050  FORMAT(/' Finished general beamnrc input, now input re component m
     *odules')
      IF ((IREJCT_GLOBAL .GT. 0)) THEN
          DO 1061 IRL=1,3000
              IREJCT(IRL) = 1
1061      CONTINUE
1062      CONTINUE
      END IF
      NREG = 1
      MED(1) = 0
      IR_start_CM(1) = 2
      NDOSE_ZONE = 0
      IERR_INPUTS = 0
      DO 1071 ICM=1,25
          RMAX_CM_FLAG(ICM) = -1
1071  CONTINUE
1072  CONTINUE
      ICM = 1
      IF((ICM .GT. 25))GOTO 1080
      WRITE(6,1400)
1400  FORMAT(/1x,79('=')/ '  Input blank line to signify start of compon
     *ent module')
      read(i_input,*)
1410  FORMAT(' **************start of CM ',A8,2X,A8, '  *************')
      WRITE(6,1420)ICM
1420  FORMAT(/1x,79('=')/' Outer boundary of CM',I3,': ',$)
      READ(i_input,1430,END=1120,ERR=1130)RMAX_CM(ICM)
1430  FORMAT(F10.0)
      IF((RMAX_CM(ICM) .EQ. 0.0))RMAX_CM(ICM) = 100.
      WRITE(6,1440)RMAX_CM(ICM)
1440  FORMAT(F10.5)
1450  FORMAT(F10.5,',',T50,'Outer boundary')
      RMAX_CM2(ICM) = RMAX_CM(ICM)**2
      CALL INPUT_XITWIN
      ICM=ICM+1
      IF((ICM .GT. 25))GOTO 1080
      WRITE(6,1090)
1090  FORMAT(/1x,79('=')/ '  Input blank line to signify start of compon
     *ent module')
      read(i_input,*)
      WRITE(6,1100)ICM
1100  FORMAT(1x,79('=')/' Outer boundary of CM',I3,': ',$)
      READ(i_input,1110,END=1120,ERR=1130)RMAX_CM(ICM)
1110  FORMAT(F10.0)
      IF((RMAX_CM(ICM) .EQ. 0.0))RMAX_CM(ICM) = 100.
      WRITE(6,1140)RMAX_CM(ICM)
1140  FORMAT(F10.5)
      RMAX_CM2(ICM) = RMAX_CM(ICM)**2
      CALL INPUT_COLLIMAT
      ICM=ICM+1
      IF((ICM .GT. 25))GOTO 1080
      WRITE(6,1150)
1150  FORMAT(/1x,79('=')/ '  Input blank line to signify start of compon
     *ent module')
      read(i_input,*)
      WRITE(6,1160)ICM
1160  FORMAT(1x,79('=')/' Outer boundary of CM',I3,': ',$)
      READ(i_input,1170,END=1120,ERR=1130)RMAX_CM(ICM)
1170  FORMAT(F10.0)
      IF((RMAX_CM(ICM) .EQ. 0.0))RMAX_CM(ICM) = 100.
      WRITE(6,1180)RMAX_CM(ICM)
1180  FORMAT(F10.5)
      RMAX_CM2(ICM) = RMAX_CM(ICM)**2
      CALL INPUT_SCATFOIL
      ICM=ICM+1
      IF((ICM .GT. 25))GOTO 1080
      WRITE(6,1190)
1190  FORMAT(/1x,79('=')/ '  Input blank line to signify start of compon
     *ent module')
      read(i_input,*)
      WRITE(6,1200)ICM
1200  FORMAT(1x,79('=')/' Outer boundary of CM',I3,': ',$)
      READ(i_input,1210,END=1120,ERR=1130)RMAX_CM(ICM)
1210  FORMAT(F10.0)
      IF((RMAX_CM(ICM) .EQ. 0.0))RMAX_CM(ICM) = 100.
      WRITE(6,1220)RMAX_CM(ICM)
1220  FORMAT(F10.5)
      RMAX_CM2(ICM) = RMAX_CM(ICM)**2
      CALL INPUT_IONCHAM
      ICM=ICM+1
      IF((ICM .GT. 25))GOTO 1080
      WRITE(6,1230)
1230  FORMAT(/1x,79('=')/ '  Input blank line to signify start of compon
     *ent module')
      read(i_input,*)
      WRITE(6,1240)ICM
1240  FORMAT(1x,79('=')/' Outer boundary of CM',I3,': ',$)
      READ(i_input,1250,END=1120,ERR=1130)RMAX_CM(ICM)
1250  FORMAT(F10.0)
      IF((RMAX_CM(ICM) .EQ. 0.0))RMAX_CM(ICM) = 100.
      WRITE(6,1260)RMAX_CM(ICM)
1260  FORMAT(F10.5)
      RMAX_CM2(ICM) = RMAX_CM(ICM)**2
      CALL INPUT_RING
      ICM=ICM+1
      IF((ICM .GT. 25))GOTO 1080
      WRITE(6,1270)
1270  FORMAT(/1x,79('=')/ '  Input blank line to signify start of compon
     *ent module')
      read(i_input,*)
      WRITE(6,1280)ICM
1280  FORMAT(1x,79('=')/' Outer boundary of CM',I3,': ',$)
      READ(i_input,1290,END=1120,ERR=1130)RMAX_CM(ICM)
1290  FORMAT(F10.0)
      IF((RMAX_CM(ICM) .EQ. 0.0))RMAX_CM(ICM) = 100.
      WRITE(6,1300)RMAX_CM(ICM)
1300  FORMAT(F10.5)
      RMAX_CM2(ICM) = RMAX_CM(ICM)**2
      CALL INPUT_MIRROR
      ICM=ICM+1
      IF((ICM .GT. 25))GOTO 1080
      WRITE(6,1310)
1310  FORMAT(/1x,79('=')/ '  Input blank line to signify start of compon
     *ent module')
      read(i_input,*)
      WRITE(6,1320)ICM
1320  FORMAT(1x,79('=')/' Outer boundary of CM',I3,': ',$)
      READ(i_input,1330,END=1120,ERR=1130)RMAX_CM(ICM)
1330  FORMAT(F10.0)
      IF((RMAX_CM(ICM) .EQ. 0.0))RMAX_CM(ICM) = 100.
      WRITE(6,1340)RMAX_CM(ICM)
1340  FORMAT(F10.5)
      RMAX_CM2(ICM) = RMAX_CM(ICM)**2
      CALL INPUT_MAINJAWS
      ICM=ICM+1
      IF((ICM .GT. 25))GOTO 1080
      WRITE(6,1350)
1350  FORMAT(/1x,79('=')/ '  Input blank line to signify start of compon
     *ent module')
      read(i_input,*)
      WRITE(6,1360)ICM
1360  FORMAT(1x,79('=')/' Outer boundary of CM',I3,': ',$)
      READ(i_input,1370,END=1120,ERR=1130)RMAX_CM(ICM)
1370  FORMAT(F10.0)
      IF((RMAX_CM(ICM) .EQ. 0.0))RMAX_CM(ICM) = 100.
      WRITE(6,1380)RMAX_CM(ICM)
1380  FORMAT(F10.5)
      RMAX_CM2(ICM) = RMAX_CM(ICM)**2
      CALL INPUT_APPLICAT
      WRITE(6,1390)
1390  FORMAT('  Input blank line to signify end of component module')
      read(i_input,*)
      GOTO 1460
1080  WRITE(6,1470)25
1470  FORMAT(//' ******Number of component modules requested', ' is grea
     *ter than the',I3,' available *******')
      call exit(1)
1460  CONTINUE
      WRITE(6,1480)
1480  FORMAT(/' Back in main of beamnrc.mortran after inputs from CMs'/)
      MAX_CMs = ICM
      IF ((NMED .EQ. 0)) THEN
          WRITE(6,1490)
1490      FORMAT(//'  EXITING because entire geometry input as VACCUUM'/
     *'          EGSnrc does not like this: set it up so there is at'/ '
     *          least one region with a material in it'///)
          call exit(1)
      END IF
      IF ((ISOURC .EQ. 21 .OR. ISOURC.EQ.23 .OR.ISOURC.EQ.24)) THEN
          IF ((INIT_ICM .GT. MAX_CMs).OR.(INIT_ICM .LT. 1)) THEN
              INIT_ICM=1
              WRITE(6,1500)
1500          FORMAT(//'***ERROR IN INPUT FOR ISOURC=21 or 23 or 24'/ 'I
     *NIT_ICM>MAX_CMs or INIT_ICM<1'/ 'INIT_ICM reset to 1'//)
              WRITE(IOUTLIST,'(//''***ERROR IN INPUT FOR ISOURC=21 or 23
     * or 24''/                      ''INIT_ICM>MAX_CMs or INIT_ICM<1''/
     *                                             ''INIT_ICM reset to 1
     *''//)')
          END IF
      END IF
      IF ((ITDOSE_ON.EQ.1 .AND. ICM_CONTAM .GT. MAX_CMs)) THEN
          ICM_CONTAM=MAX_CMs
          WRITE(6,1510)ICM_CONTAM
1510      FORMAT(//'***WARNING:'/ 'ICM_CONTAM > # of CMs'/ 'ICM_CONTAM r
     *eset to ',I4//)
      END IF
      IF ((ICM_SPLIT .GT. MAX_CMs)) THEN
          WRITE(6,1520)ICM_SPLIT, MAX_CMs
1520      FORMAT(//' ***WARNING***'/ ' ICM_SPLIT > # of CMs'/ ' ICM_SPLI
     *T reduced to ',I4,' from ',I4//)
      END IF
      IF ((NDOSE_ZONE .GT. 1500)) THEN
          WRITE(6,1530)NDOSE_ZONE,1500
1530      FORMAT(///'***Number of dose zone=', I4,' is greater than maxa
     *llowed =',I5/' Increase $MAX_DOSE_ZONE', ' in beamnrc_user_macros.
     *mortran'///)
          call exit(1)
      END IF
      DO 1541 IRL=2,NREG
          IF ((DOSE_ZONE(IRL).LT.0)) THEN
              WRITE(6,1550)IRL
1550          FORMAT(//' ****WARNING:'/ ' Dose zone in region ',I10,' is
     * < 0'/ ' Reset to 0 (no dose scoring).'//)
              DOSE_ZONE(IRL)=0
          END IF
1541  CONTINUE
1542  CONTINUE
      DO 1561 ISCORE=1,NSC_PLANES
          IF ((MZONE_TYPE(ISCORE) .EQ. 0)) THEN
              DO 1571 I=1,NSC_ZONES(ISCORE)
                  IF ((RSCORE_ZONE(ISCORE,I).GT.RMAX_CM(IPLANE_to_CM(ISC
     *            ORE)))) THEN
                      WRITE(6,1580)ISCORE, IPLANE_to_CM(ISCORE), I, RSCO
     *                RE_ZONE(ISCORE,I), RMAX_CM(IPLANE_to_CM(ISCORE))
1580                  FORMAT(//'***ERROR IN INPUT FOR SCORING PLANE ',I4
     *,' ON CM ',I4/ 'Outer radius of zone ',I4,' =',F10.3,' cm, which i
     *s > RMAX_CM/SMAX_CM'/ 'Radius reduced to ',F10.3,' cm'//)
                      WRITE(IOUTLIST, '(//''***ERROR IN INPUT FOR SCORIN
     *G PLANE '',I4,'' ON CM '',I4/                 ''Outer radius of zo
     *ne '',I4,'' ='',F10.3,'' cm, which is > RMAX_CM/SMAX_CM''/  ''Radi
     *us reduced to '',F10.3,'' cm''//)') ISCORE, IPLANE_to_CM(ISCORE),
     *                I, RSCORE_ZONE(ISCORE,I),RMAX_CM(IPLANE_to_CM(ISCO
     *                RE))
                      RSCORE_ZONE(ISCORE,I)=RMAX_CM(IPLANE_to_CM(ISCORE)
     *                )
                      RSCORE_ZONE2(ISCORE,I)=RSCORE_ZONE(ISCORE,I)**2
                  END IF
1571          CONTINUE
1572          CONTINUE
          ELSE IF((MZONE_TYPE(ISCORE) .EQ. 1)) THEN
              DO 1591 I=1,NSC_ZONES(ISCORE)
                  IF ((RMAX_CM_FLAG(IPLANE_to_CM(ISCORE)).EQ.1 .AND. SQR
     *            T(2.)*RSCORE_ZONE(ISCORE,I).GT.RMAX_CM(IPLANE_to_CM(IS
     *            CORE)))) THEN
                      WRITE(6,1600)ISCORE, IPLANE_to_CM(ISCORE), I, RSCO
     *                RE_ZONE(ISCORE,I), RMAX_CM(IPLANE_to_CM(ISCORE))/S
     *                QRT(2.)
1600                  FORMAT(//'***ERROR IN INPUT FOR SCORING PLANE ',I4
     *,' ON CM ',I4/ 'Outer half-width of zone ',I4,' =',F10.3,' cm, whi
     *ch goes beyond RMAX_CM'/ 'Half-width reduced to ',F10.3,' cm'//)
                      WRITE(IOUTLIST, '(//''***ERROR IN INPUT FOR SCORIN
     *G PLANE '',I4,'' ON CM '',I4/                 ''Outer half-width o
     *f zone '',I4,'' ='',F10.3,                                  '' cm,
     * which goes beyond RMAX_CM''/
     *        ''Half-width reduced to '',F10.3,'' cm''//)') ISCORE, IPLA
     *                NE_to_CM(ISCORE), I, RSCORE_ZONE(ISCORE,I), RMAX_C
     *                M(IPLANE_to_CM(ISCORE))/SQRT(2.)
                      RSCORE_ZONE(ISCORE,I)=RMAX_CM(IPLANE_to_CM(ISCORE)
     *                ) /SQRT(2.)
                      RSCORE_ZONE2(ISCORE,I)=RSCORE_ZONE(ISCORE,I)**2
                  ELSE IF((RMAX_CM_FLAG(IPLANE_to_CM(ISCORE)).EQ.2 .AND.
     *             RSCORE_ZONE(ISCORE,I).GT.RMAX_CM(IPLANE_to_CM(ISCORE)
     *            ))) THEN
                      WRITE(6,1610)ISCORE, IPLANE_to_CM(ISCORE), I, RSCO
     *                RE_ZONE(ISCORE,I), RMAX_CM(IPLANE_to_CM(ISCORE))
1610                  FORMAT(//'***ERROR IN INPUT FOR SCORING PLANE ',I4
     *,' ON CM ',I4/ 'Outer half-width of zone ',I4,' =',F10.3,' cm, whi
     *ch is > SMAX_CM'/ 'Half-width reduced to ',F10.3,' cm'//)
                      WRITE(IOUTLIST, '(//''***ERROR IN INPUT FOR SCORIN
     *G PLANE '',I4,'' ON CM '',I4/                 ''Outer half-width o
     *f zone '',I4,'' ='',F10.3,'' cm, which is > SMAX_CM''/      ''Half
     *-width reduced to '',F10.3,'' cm''//)') ISCORE, IPLANE_to_CM(ISCOR
     *                E), I, RSCORE_ZONE(ISCORE,I), RMAX_CM(IPLANE_to_CM
     *                (ISCORE))
                      RSCORE_ZONE(ISCORE,I)=RMAX_CM(IPLANE_to_CM(ISCORE)
     *                )
                      RSCORE_ZONE2(ISCORE,I)=RSCORE_ZONE(ISCORE,I)**2
                  END IF
1591          CONTINUE
1592          CONTINUE
          END IF
1561  CONTINUE
1562  CONTINUE
      IF ((IBRSPL.EQ.2 .AND. ICM_DBS.GT.0)) THEN
          IF ((ICM_DBS.GT.MAX_CMs)) THEN
              ICM_DBS=0
              WRITE(6,1620)MAX_CMs
1620          FORMAT(/' ****DBS WARNING*****'/ ' CM no. for electron spl
     *itting > max. CM no. in accelerator (',I4,')'/ ' No electron split
     *ting will be done.'/)
          ELSE IF((CMTYPE(ICM_DBS).NE.'FLATFILT' .AND. CMTYPE(ICM_DBS).N
     *    E.'PYRAMIDS')) THEN
              ICM_DBS=0
              WRITE(6,1630)CMTYPE(ICM_DBS)
1630          FORMAT(/' ****DBS WARNING****'/ ' You have selected to spl
     *it electrons in a ',A8,' CM.'/ ' Electron splitting is only suppor
     *ted in FLATFILT.'/ ' No splitting will be done.'/)
          END IF
      END IF
      IF ((IO_OPT .EQ. 0 .OR. IO_OPT .GE. 3)) THEN
          IF ((PHSP_OUTDIR.NE.' ')) THEN
              phsp_fn_base=PHSP_OUTDIR(:lnblnk1(PHSP_OUTDIR)) // '/' //
     *        output_file(:lnblnk1(output_file))
          ELSE
              phsp_fn_base=egs_home(:lnblnk1(egs_home))//user_code(:lnbl
     *        nk1(user_code)) // '/' // output_file(:lnblnk1(output_file
     *        ))
          END IF
          IF (( i_parallel .GT. 0 )) THEN
              phsp_fn_base=phsp_fn_base(:lnblnk1(phsp_fn_base))// '_w'
              call egs_itostring(phsp_fn_base,i_parallel,.false.)
          END IF
          I_MU_PHSP=0
          DO 1641 I=1,MAX_CMs
              IF ((CMTYPE(I).EQ.'SYNCJAWS' .OR. CMTYPE(I).EQ.'SYNCVMLC'
     *        .OR. CMTYPE(I).EQ.'SYNCMLCE' .OR. CMTYPE(I).EQ.'SYNCHDMLC'
     *        )) THEN
                  I_MU_PHSP=1
                  GO TO1642
              END IF
1641      CONTINUE
1642      CONTINUE
          IF ((IRESTART .EQ. 0)) THEN
              DO 1651 I=1,NSC_PLANES
                  IF ((IOUTFLU(I)-43 .GT. 9)) THEN
                      WRITE(AUNIT,'(I2)') IOUTFLU(I)-43
                  ELSE
                      WRITE(AUNIT,'(I1)') IOUTFLU(I)-43
                  END IF
                  IF ((IO_OPT.EQ.4)) THEN
                      phsp_fn=phsp_fn_base(:lnblnk1(phsp_fn_base))// '.'
     *                 //AUNIT//char(0)
                      Z_SCORE_SHORT=Z_min_CM(IPLANE_to_CM(I)+1)
                      call iaea_new_source(IOUTFLU(I),phsp_fn(:lnblnk1(p
     *                hsp_fn)),0+2,iaea_result)
                      IF ((iaea_result.LT.0)) THEN
                          WRITE(i_log,*)' Error opening IAEA phase space
     * file for write.'
                          call exit(1)
                      END IF
                      i_iaea_open_for_write=1
                      IF ((0.EQ.0)) THEN
                          IF((0.NE.1))call iaea_set_constant_variable(IO
     *                    UTFLU(I),2,Z_SCORE_SHORT)
                          IF ((IZLAST.NE.0)) THEN
                              IF ((I_MU_PHSP.NE.0)) THEN
                                  call iaea_set_extra_numbers(IOUTFLU(I)
     *                            ,2,1)
                                  call iaea_set_type_extrafloat_variable
     *                            (IOUTFLU(I),1,0)
                                  iaea_i_muidx_out=2
                              ELSE
                                  call iaea_set_extra_numbers(IOUTFLU(I)
     *                            ,1,1)
                              END IF
                              call iaea_set_type_extrafloat_variable(IOU
     *                        TFLU(I),0,3)
                              iaea_i_zlast_out=1
                          ELSE IF((I_MU_PHSP.NE.0)) THEN
                              call iaea_set_extra_numbers(IOUTFLU(I),1,1
     *                        )
                              call iaea_set_type_extrafloat_variable(IOU
     *                        TFLU(I),0,0)
                              iaea_i_muidx_out=1
                          ELSE
                              call iaea_set_extra_numbers(IOUTFLU(I),0,1
     *                        )
                          END IF
                          call iaea_set_type_extralong_variable(IOUTFLU(
     *                    I),0,2)
                          iaea_i_latch_out=1
                      END IF
                  ELSE
                      phsp_fn=phsp_fn_base(:lnblnk1(phsp_fn_base))// '.e
     *gsphsp'//AUNIT
                      IF ((IZLAST.NE.0)) THEN
                          MODE_RW='MODE2'
                          PHSP_RECL=4*8000
                      ELSE
                          MODE_RW='MODE0'
                          PHSP_RECL=4*7000
                      END IF
                      OPEN(UNIT=IOUTFLU(I),FILE=phsp_fn(:lnblnk1(phsp_fn
     *                )),ACCESS='DIRECT',RECL=PHSP_RECL, FORM='UNFORMATT
     *ED',STATUS='UNKNOWN')
                      CLOSE(IOUTFLU(I))
                      IF ((IZLAST.NE.0)) THEN
                          PHSP_RECL=4*8
                      ELSE
                          PHSP_RECL=4*7
                      END IF
                      OPEN(UNIT=IOUTFLU(I),FILE=phsp_fn(:lnblnk1(phsp_fn
     *                )),RECL=PHSP_RECL,ACCESS='DIRECT', FORM='UNFORMATT
     *ED',STATUS='UNKNOWN')
                      IF ((0.GT.2147483647)) THEN
                          write(*,*)' Warning while writing phase space
     *file:'
                          write(*,*)' No. of particles > 2^31-1.'
                          write(*,*)' Total no. of particles (and photon
     *s) written'
                          write(*,*)' to header may be nonsense.'
                      END IF
                      NUM_PHSP_TOT=0
                      PHOT_PHSP_TOT=0
                      EKMAX_PHSP_SHORT=0
                      EKMINE_PHSP_SHORT=0
                      NINC_PHSP_SHORT=0
                      WRITE(IOUTFLU(I),REC=1)MODE_RW,NUM_PHSP_TOT,PHOT_P
     *                HSP_TOT,EKMAX_PHSP_SHORT, EKMINE_PHSP_SHORT,NINC_P
     *                HSP_SHORT
                      CLOSE(IOUTFLU(I))
                      IF ((IZLAST.NE.0)) THEN
                          PHSP_RECL=4*8000
                      ELSE
                          PHSP_RECL=4*7000
                      END IF
                      OPEN(UNIT=IOUTFLU(I),FILE=phsp_fn(:lnblnk1(phsp_fn
     *                )),RECL=PHSP_RECL,ACCESS='DIRECT', FORM='UNFORMATT
     *ED',STATUS='UNKNOWN')
                  END IF
1651          CONTINUE
1652          CONTINUE
          ELSE IF((IRESTART .EQ. 1)) THEN
              WRITE(6,1660)
1660          FORMAT(/' Restarting after previous run, will read old dat
     *a & phase-space', ' files')
              DO 1671 I=1,NSC_PLANES
                  WRITE(6,1680)IOUTFLU(I)
1680              FORMAT(//' Checking ph-sp file on logical unit ',I4)
1690              CONTINUE
                  IF ((IOUTFLU(I)-43 .GT. 9)) THEN
                      WRITE(AUNIT,'(I2)') IOUTFLU(I)-43
                  ELSE
                      WRITE(AUNIT,'(I1)') IOUTFLU(I)-43
                  END IF
                  IF ((IO_OPT.EQ.4)) THEN
                      phsp_fn=phsp_fn_base(:lnblnk1(phsp_fn_base))// '.'
     *                 //AUNIT//char(0)
                      Z_SCORE_SHORT=Z_min_CM(IPLANE_to_CM(I)+1)
                      call iaea_new_source(IOUTFLU(I),phsp_fn(:lnblnk1(p
     *                hsp_fn)),1+2,iaea_result)
                      IF ((iaea_result.LT.0)) THEN
                          WRITE(i_log,*)' Error opening IAEA phase space
     * file for write.'
                          call exit(1)
                      END IF
                      i_iaea_open_for_write=1
                      IF ((1.EQ.0)) THEN
                          IF((0.NE.1))call iaea_set_constant_variable(IO
     *                    UTFLU(I),2,Z_SCORE_SHORT)
                          IF ((IZLAST.NE.0)) THEN
                              IF ((I_MU_PHSP.NE.0)) THEN
                                  call iaea_set_extra_numbers(IOUTFLU(I)
     *                            ,2,1)
                                  call iaea_set_type_extrafloat_variable
     *                            (IOUTFLU(I),1,0)
                                  iaea_i_muidx_out=2
                              ELSE
                                  call iaea_set_extra_numbers(IOUTFLU(I)
     *                            ,1,1)
                              END IF
                              call iaea_set_type_extrafloat_variable(IOU
     *                        TFLU(I),0,3)
                              iaea_i_zlast_out=1
                          ELSE IF((I_MU_PHSP.NE.0)) THEN
                              call iaea_set_extra_numbers(IOUTFLU(I),1,1
     *                        )
                              call iaea_set_type_extrafloat_variable(IOU
     *                        TFLU(I),0,0)
                              iaea_i_muidx_out=1
                          ELSE
                              call iaea_set_extra_numbers(IOUTFLU(I),0,1
     *                        )
                          END IF
                          call iaea_set_type_extralong_variable(IOUTFLU(
     *                    I),0,2)
                          iaea_i_latch_out=1
                      END IF
                  ELSE
                      phsp_fn=phsp_fn_base(:lnblnk1(phsp_fn_base))// '.e
     *gsphsp'//AUNIT
                      IF ((IZLAST.GT.0)) THEN
                          PHSP_RECL=4*8
                          OPEN(UNIT=IOUTFLU(I),FILE=phsp_fn(:lnblnk1(phs
     *                    p_fn)),FORM='UNFORMATTED',ACCESS='DIRECT', REC
     *                    L=PHSP_RECL,STATUS='OLD',IOSTAT=IERR_PHSP)
                          IF ((IERR_PHSP.NE.0)) THEN
                              WRITE(6,1700)
1700                          FORMAT(/' ***error opening file as MODE2 *
     ****' /' *** THE FILE FORMAT MAY BE WRONG (I.E., NOT A MODE2 FILE)*
     ***'/ /' *** WE NOW TRY TO OPEN IT AS A MODE3 FILE ***'//)
                              OPEN(UNIT=IOUTFLU(I),STATUS='OLD',FILE=phs
     *                        p_fn(:lnblnk1(phsp_fn)), FORM='UNFORMATTED
     *', IOSTAT=IERR_PHSP)
                              IF ((IERR_PHSP.NE.0)) THEN
                                  WRITE(6,1710)
1710                              FORMAT(//' *** PHASE SPACE FILE CANNOT
     * BE FOUND. ***')
                                  STOP
                              END IF
                              READ(IOUTFLU(I),REC=1,IOSTAT=IERR_PHSP)MOD
     *                        E_RW,NUM_PHSP_TOT,PHOT_PHSP_TOT, EKMAX_PHS
     *                        P_SHORT,EKMINE_PHSP_SHORT,NINC_PHSP_SHORT
                              NPPHSPSP=NUM_PHSP_TOT
                              NPHOTPHSP(I)=PHOT_PHSP_TOT
                              EKMAXPHSP(I)=EKMAX_PHSP_SHORT
                              EKMINPHSPE(I)=EKMINE_PHSP_SHORT
                              NINCPHSP=NINC_PHSP_SHORT
                              IF ((IERR_PHSP.NE.0)) THEN
                                  WRITE(6,1720)
1720                              FORMAT(//' ***ERROR READING HEADER OFP
     *HASE SPACE FILE*** '//)
                                  STOP
                              END IF
                              IF ((MODE_RW .NE. 'MODE3')) THEN
                                  WRITE(6,1730)
1730                              FORMAT(//' That file does not start wi
     *th MODE3,', ' as all old compressed files (with ZLAST) must'/ '  C
     *heck it out and try again!'///)
                                  IERR_PHSP=1
                                  STOP
                              ELSE
                                  WRITE(6,1740)
1740                              FORMAT(//' This is a MODE3 file! '/ 'P
     *lease convert it into a MODE2 file using [readphsp] ', ' and tryag
     *ain!'///)
                                  IERR_PHSP=1
                                  STOP
                              END IF
                          END IF
                          READ(IOUTFLU(I),REC=1,IOSTAT=IERR_PHSP)MODE_RW
     *                    ,NUM_PHSP_TOT,PHOT_PHSP_TOT, EKMAX_PHSP_SHORT,
     *                    EKMINE_PHSP_SHORT,NINC_PHSP_SHORT
                          NPPHSPSP=NUM_PHSP_TOT
                          NPHOTPHSP(I)=PHOT_PHSP_TOT
                          EKMAXPHSP(I)=EKMAX_PHSP_SHORT
                          EKMINPHSPE(I)=EKMINE_PHSP_SHORT
                          NINCPHSP=NINC_PHSP_SHORT
                          IF ((IERR_PHSP.NE.0)) THEN
                              WRITE(6,1750)
1750                          FORMAT(//' ***ERROR READING HEADER OF PHAS
     *E SPACE FILE*** '//)
                              STOP
                          END IF
                          IF ((MODE_RW .NE. 'MODE2')) THEN
                              WRITE(6,1760)
1760                          FORMAT(//' That file does not start with M
     *ODE2,', ' as standard compressed files with ZLAST must'/ '  Checki
     *t out and try again!'///)
                              IERR_PHSP=1
                              STOP
                          END IF
                      ELSE IF((IZLAST.EQ.0)) THEN
                          PHSP_RECL=4*7
                          OPEN(UNIT=IOUTFLU(I),FILE=phsp_fn(:lnblnk1(phs
     *                    p_fn)),FORM='UNFORMATTED',ACCESS='DIRECT', REC
     *                    L=PHSP_RECL,STATUS='OLD',IOSTAT=IERR_PHSP)
                          IF ((IERR_PHSP.NE.0)) THEN
                              WRITE(6,1770)
1770                          FORMAT(/' ***ERROR opening file as MODE0**
     ***' /' *** THE FILE FORMAT MAY BE WRONG (I.E., NOT A MODE0 FILE) *
     ***'/ /' *** WE NOW TRY TO OPEN IT AS A MODE1 FILE ***'//)
                              OPEN(UNIT=IOUTFLU(I),STATUS='OLD',FILE=phs
     *                        p_fn(:lnblnk1(phsp_fn)), FORM='UNFORMATTED
     *', IOSTAT=IERR_PHSP)
                              IF ((IERR_PHSP.NE.0)) THEN
                                  WRITE(6,1780)
1780                              FORMAT(//' *** PHASE SPACE FILE CANNOT
     * BE FOUND. ***')
                                  STOP
                              END IF
                              READ(IOUTFLU(I),REC=1,IOSTAT=IERR_PHSP)MOD
     *                        E_RW,NUM_PHSP_TOT,PHOT_PHSP_TOT, EKMAX_PHS
     *                        P_SHORT,EKMINE_PHSP_SHORT,NINC_PHSP_SHORT
                              NPPHSPSP=NUM_PHSP_TOT
                              NPHOTPHSP(I)=PHOT_PHSP_TOT
                              EKMAXPHSP(I)=EKMAX_PHSP_SHORT
                              EKMINPHSPE(I)=EKMINE_PHSP_SHORT
                              NINCPHSP=NINC_PHSP_SHORT
                              IF ((IERR_PHSP.NE.0)) THEN
                                  WRITE(6,1790)
1790                              FORMAT(//' ***ERROR READING HEADER OFP
     *HASE SPACE FILE*** '//)
                                  STOP
                              END IF
                              IF ((MODE_RW .NE. 'MODE1')) THEN
                                  WRITE(6,1800)
1800                              FORMAT(//' That file does not start wi
     *th MODE1,', ' as all old compressed files must'/ '  Check it out a
     *nd try again!'///)
                                  IERR_PHSP=1
                                  STOP
                              ELSE
                                  WRITE(6,1810)
1810                              FORMAT(//' This is a MODE1 file! '/ 'P
     *lease convert it into a MODE0 file using [readphsp] ', 'and try ag
     *ain!'///)
                                  IERR_PHSP=1
                                  STOP
                              END IF
                          END IF
                          READ(IOUTFLU(I),REC=1,IOSTAT=IERR_PHSP)MODE_RW
     *                    ,NUM_PHSP_TOT,PHOT_PHSP_TOT, EKMAX_PHSP_SHORT,
     *                    EKMINE_PHSP_SHORT,NINC_PHSP_SHORT
                          NPPHSPSP=NUM_PHSP_TOT
                          NPHOTPHSP(I)=PHOT_PHSP_TOT
                          EKMAXPHSP(I)=EKMAX_PHSP_SHORT
                          EKMINPHSPE(I)=EKMINE_PHSP_SHORT
                          NINCPHSP=NINC_PHSP_SHORT
                          IF ((IERR_PHSP.NE.0)) THEN
                              WRITE(6,1820)
1820                          FORMAT(//' ***ERROR READING HEADER OF PHAS
     *E SPACE FILE*** '//)
                              STOP
                          END IF
                          IF ((MODE_RW .NE. 'MODE0')) THEN
                              WRITE(6,1830)
1830                          FORMAT(/' Does not start with MODE0 as fil
     *es without ZLAST must'/ '  Try again!'//)
                              IERR_PHSP=1
                              STOP
                          END IF
                      ELSE IF((IZLAST.LT.0)) THEN
                          WRITE(6,1840)
1840                      FORMAT(/' First, try to open it as a MODE0 fil
     *e')
                          PHSP_RECL=4*7
                          OPEN(UNIT=IOUTFLU(I),FILE=phsp_fn(:lnblnk1(phs
     *                    p_fn)),FORM='UNFORMATTED',ACCESS='DIRECT', REC
     *                    L=PHSP_RECL,STATUS='OLD',IOSTAT=IERR_PHSP)
                          IF ((IERR_PHSP.NE.0)) THEN
                              WRITE(6,1850)
1850                          FORMAT(/' Now try to open it as a MODE2 fi
     *le')
                              IZLAST=1
                              PHSP_RECL=4*8
                              OPEN(UNIT=IOUTFLU(I),FILE=phsp_fn(:lnblnk1
     *                        (phsp_fn)),FORM='UNFORMATTED',ACCESS='DIRE
     *CT', RECL=PHSP_RECL,STATUS='OLD',IOSTAT=IERR_PHSP)
                              IF ((IERR_PHSP.NE.0)) THEN
                                  WRITE(6,1860)
1860                              FORMAT(//' *** PHASE SPACE FILE CANNOT
     * BE FOUND. ***')
                              ELSE
                                  READ(IOUTFLU(I),REC=1,IOSTAT=IERR_PHSP
     *                            )MODE_RW,NUM_PHSP_TOT,PHOT_PHSP_TOT, E
     *                            KMAX_PHSP_SHORT,EKMINE_PHSP_SHORT,NINC
     *                            _PHSP_SHORT
                                  NPPHSPSP=NUM_PHSP_TOT
                                  NPHOTPHSP(I)=PHOT_PHSP_TOT
                                  EKMAXPHSP(I)=EKMAX_PHSP_SHORT
                                  EKMINPHSPE(I)=EKMINE_PHSP_SHORT
                                  NINCPHSP=NINC_PHSP_SHORT
                                  IF ((IERR_PHSP.NE.0)) THEN
                                      WRITE(6,1870)
1870                                  FORMAT(//' ***ERROR READING HEADER
     * OF PHASE SPACE FILE*** '//)
                                      STOP
                                  END IF
                                  IF ((MODE_RW.NE.'MODE2')) THEN
                                      WRITE(6,1880)
1880                                  FORMAT(//' That file does not star
     *t with MODE2,', ' as standard compressed files with ZLAST must'/ '
     *  Check it out and try again!'///)
                                      CLOSE(IOUTFLU(I))
                                      STOP
                                  END IF
                              END IF
                          ELSE
                              READ(IOUTFLU(I),REC=1,IOSTAT=IERR_PHSP)MOD
     *                        E_RW,NUM_PHSP_TOT,PHOT_PHSP_TOT, EKMAX_PHS
     *                        P_SHORT,EKMINE_PHSP_SHORT,NINC_PHSP_SHORT
                              NPPHSPSP=NUM_PHSP_TOT
                              NPHOTPHSP(I)=PHOT_PHSP_TOT
                              EKMAXPHSP(I)=EKMAX_PHSP_SHORT
                              EKMINPHSPE(I)=EKMINE_PHSP_SHORT
                              NINCPHSP=NINC_PHSP_SHORT
                              IF ((IERR_PHSP.NE.0)) THEN
                                  WRITE(6,1890)
1890                              FORMAT(//' ***ERROR READING HEADER OFP
     *HASE SPACE FILE*** '//)
                                  STOP
                              END IF
                              IZLAST=0
                              IF ((MODE_RW.NE.'MODE0')) THEN
                                  WRITE(6,1900)
1900                              FORMAT(/' The file does not start with
     * MODE0 as it supposed to')
                                  CLOSE(IOUTFLU(I))
                                  WRITE(6,1910)
1910                              FORMAT(/' Now try to open it as a MODE
     *2 file')
                                  IZLAST=1
                                  PHSP_RECL=4*8
                                  OPEN(UNIT=IOUTFLU(I),FILE=phsp_fn(:lnb
     *                            lnk1(phsp_fn)),FORM='UNFORMATTED',ACCE
     *                            SS='DIRECT', RECL=PHSP_RECL,STATUS='OL
     *D',IOSTAT=IERR_PHSP)
                                  IF ((IERR_PHSP.NE.0)) THEN
                                      WRITE(6,1920)
1920                                  FORMAT(//' *** PHASE SPACE FILE CA
     *NNOT BE OPENED. ***')
                                  ELSE
                                      READ(IOUTFLU(I),REC=1,IOSTAT=IERR_
     *                                PHSP)MODE_RW,NUM_PHSP_TOT,PHOT_PHS
     *                                P_TOT, EKMAX_PHSP_SHORT,EKMINE_PHS
     *                                P_SHORT,NINC_PHSP_SHORT
                                      NPPHSPSP=NUM_PHSP_TOT
                                      NPHOTPHSP(I)=PHOT_PHSP_TOT
                                      EKMAXPHSP(I)=EKMAX_PHSP_SHORT
                                      EKMINPHSPE(I)=EKMINE_PHSP_SHORT
                                      NINCPHSP=NINC_PHSP_SHORT
                                      IF ((IERR_PHSP.NE.0)) THEN
                                          WRITE(6,1930)
1930                                      FORMAT(//' ***ERROR READING HE
     *ADER OF PHASE SPACE FILE*** '//)
                                          STOP
                                      END IF
                                      IF ((MODE_RW.NE.'MODE2')) THEN
                                          WRITE(6,1940)
1940                                      FORMAT(//' That file does nots
     *tart with MODE2,', ' as standard compressed files with ZLAST must'
     */ '  Check it out and try again!'///)
                                          CLOSE(IOUTFLU(I))
                                          STOP
                                      END IF
                                  END IF
                              END IF
                          END IF
                      END IF
                      NPPHSP(I)=NPPHSPSP
                  END IF
1671          CONTINUE
1672          CONTINUE
          END IF
      END IF
      N_ph_sp_e=0
      N_ph_sp_g=0
      N_ph_sp_p=0
      NPASS_ph_sp=0
      NFAT_ph_sp=0
      E_ph_sp_e=0.0
      E_ph_sp_g=0.0
      E_ph_sp_p=0.0
      E_MAX_ph_sp=0.0
      IF ((IPLANE_to_CM(1) .LE. 0)) THEN
          IPLANE_to_CM(1) = MAX_CMs
      END IF
      DO 1951 ISCORE=1,NSC_PLANES
          IF ((IPLANE_to_CM(ISCORE).GT.MAX_CMs)) THEN
              IERR_INPUTS = 1
              WRITE(6,1960)ISCORE,IPLANE_to_CM(ISCORE)
1960          FORMAT(' *** ERROR *** ', ' Scoring plane',I3,' at back of
     * CM',I3,', CM does not exist')
          END IF
1951  CONTINUE
1952  CONTINUE
      DO 1971 ISCORE=1,NSC_PLANES
          IF ((NSC_ZONES(ISCORE) .EQ. 0)) THEN
              NSC_ZONES(ISCORE) = 5
              WRITE(6,1980)
1980          FORMAT(' Default equal area fluence scoring zones now bein
     *g set')
              RSCORE_MAX2 = RMAX_CM2(IPLANE_to_CM(ISCORE))
              DO 1991 ISZ=1,NSC_ZONES(ISCORE)
                  RSCORE_ZONE2(ISCORE,ISZ) = ISZ*RSCORE_MAX2/NSC_ZONES(I
     *            SCORE)
                  RSCORE_ZONE(ISCORE,ISZ) = SQRT(RSCORE_ZONE2(ISCORE,ISZ
     *            ))
1991          CONTINUE
1992          CONTINUE
              IF ((MZONE_TYPE(ISCORE) .EQ. 0)) THEN
                  WRITE(6,2000)ISCORE,(RSCORE_ZONE(ISCORE,ISZ),ISZ=1,NSC
     *            _ZONES(ISCORE))
2000              FORMAT(' For scoring plane',I2,', zone radii  are:',(5
     *F8.4))
              ELSE
                  WRITE(6,2010)ISCORE,(RSCORE_ZONE(ISCORE,ISZ),ISZ=1,NSC
     *            _ZONES(ISCORE))
2010              FORMAT(' For scoring plane',I2,', zone half-widths  ar
     *e:',(5F8.4))
              END IF
          END IF
1971  CONTINUE
1972  CONTINUE
      DO 2021 ICM=1,MAX_CMs
          IF ((IERR_GEOM(ICM) .NE. 0)) THEN
              IF ((IERR_GEOM(ICM).GT.99)) THEN
                  IERR_INPUTS = 1
                  WRITE(6,2030)ICM-1,ICM
2030              FORMAT(' *** ERROR *** Component modules',I3,' and',I3
     *,' overlap')
              END IF
              IF ((IERR_GEOM(ICM)-(IERR_GEOM(ICM)/100)*100.GT.0)) THEN
                  IERR_INPUTS = 1
                  WRITE(6,2040)IERR_GEOM(ICM)-(IERR_GEOM(ICM)/100)*100,I
     *            CM
2040              FORMAT('***ERROR:'/ I2,' errors detected in the geomet
     *ry of component module',I3)
              END IF
          END IF
2021  CONTINUE
2022  CONTINUE
      DO 2051 ICM=1,MAX_CMs
          IF ((RMAX_CM_FLAG(ICM).EQ.-1)) THEN
              IERR_INPUTS = 1
              WRITE(6,2060)ICM
2060          FORMAT(' *** ERROR *** ', ' RMAX_CM_FLAG not properly setf
     *or CM ',I4)
          END IF
2051  CONTINUE
2052  CONTINUE
      ITMAX=3+LNEXC+LNINC
      SCSTP=0
      SCSTP2=0
      SCDSTP=0
      SCDSTP2=0
      PIISTP=0
      SCSTP_LAST=0
      SCDSTP_LAST=0
      DO 2071 IT=1,ITMAX
          DO 2081 ID=1,NDOSE_ZONE
              SCDOSE_LAST(ID,IT)=0
              SCDOSE(ID,IT)=0.0
              SCDOSE2(ID,IT)=0.0
              SCDOSE_TMP(ID,IT)=0.0
2081      CONTINUE
2082      CONTINUE
2071  CONTINUE
2072  CONTINUE
      DO 2091 I1 = 1,3
          DO 2101 I2 = 1,3
              DO 2111 I3 = 1,5+1
                  SCFLU_LAST(I1,I2,I3,1)=0
                  SCFLU_LAST(I1,I2,I3,2)=0
                  SCFLU_NUM(I1,I2,I3,1)=0
                  SCFLU_NUM(I1,I2,I3,2)=0
                  SCFLU_NOCOV(I1,I2,I3,1)=0
                  SCFLU_NOCOV(I1,I2,I3,2)=0
                  DO 2121 I4=1,4
                      SCFLU_COV(I1,I2,I3,I4)=0.
2121              CONTINUE
2122              CONTINUE
                  DO 2131 I4 = 1,8
                      SCFLU(I1,I2,I3,I4)=0.
                      SCFLU2(I1,I2,I3,I4)=0.
                      SCFLU_TMP(I1,I2,I3,I4)=0.
2131              CONTINUE
2132              CONTINUE
2111          CONTINUE
2112          CONTINUE
2101      CONTINUE
2102      CONTINUE
2091  CONTINUE
2092  CONTINUE
      DO 2141 I=1,MAX_CMs
          ICM_to_SCORE(I)=0
2141  CONTINUE
2142  CONTINUE
      DO 2151 I=1,NSC_PLANES
          NPFLU(I)=0
          ICM_to_SCORE(IPLANE_to_CM(I))=I
2151  CONTINUE
2152  CONTINUE
      NCASEO=0
      NCASET=0
      TMCPUO=0
      NHSTRYO=0
      NPASS_ph_spO=0
      NFAT_ph_spO=0
      IF ((ISOURC.NE.21 .AND. ISOURC.NE.24)) THEN
          NNPHSP=1.
          NINCSRC=1.
          NRCYCL=0
      END IF
      IF ((IRESTART .EQ. 0)) THEN
          DO 2161 I=1,NSC_PLANES
              NPPHSP(I)=0
              EKMAXPHSP(I)=0.
              EKMINPHSPE(I)=99999.
              NPHOTPHSP(I)=0
2161      CONTINUE
2162      CONTINUE
          NINCPHSP=0
      ELSE IF((IRESTART .EQ. 1)) THEN
          WRITE(6,2170)
2170      FORMAT(/' *** About to read dose/fluence data from previous ru
     *n ***')
          data_unit=egs_open_datfile(IORSTRT,0,1,'.egsdat')
          READ(data_unit,*) SCSTP,SCSTP2,SCDSTP,SCDSTP2,PIISTP
          READ(data_unit,*) ((SCDOSE(ID,IT),SCDOSE2(ID,IT),IT=1,ITMAX),I
     *    D=1,NDOSE_ZONE)
          READ(data_unit,*) ((((SCFLU(I1,I2,I3,I4),SCFLU2(I1,I2,I3,I4),I
     *    1=1,3),I3=1,NSC_ZONES(I2)+1),I2=1,NSC_PLANES),I4=1,8)
          READ(data_unit,*) ((((SCFLU_COV(I1,I2,I3,I4),I1=1,3),I3=1,NSC_
     *    ZONES(I2)+1),I2=1,NSC_PLANES),I4=1,4)
          READ(data_unit,*) ((((SCFLU_NUM(I1,I2,I3,I4),I1=1,3),I3=1,NSC_
     *    ZONES(I2)+1),I2=1,NSC_PLANES),I4=1,2)
          read(data_unit,*) urndm,crndm,cdrndm, cmrndm, ixx, jxx, rng_se
     *    ed, rng_array
          twom24 = 1./16777216.
          READ(data_unit,*)NCASEO,NHSTRYO,TMCPUO,(NPPHSP(I),I=1,NSC_PLAN
     *    ES), NPASS_ph_spO,NFAT_ph_spO
          CLOSE(data_unit)
          WRITE(6,2180)
2180      FORMAT(/' ***Successfully read previous dose and fluence dataf
     *ile ***'/)
          DO 2191 I=1,NSC_PLANES
              WRITE(6,2200)I,NPPHSP(I)
2200          FORMAT(//' PH-SP FILE',I4,': '/ '               TOTAL NO.O
     *F PARTICLES =',I12)
              IF ((IO_OPT.EQ.0 .OR. IO_OPT.EQ.3)) THEN
                  IF ((IO_OPT.EQ.4)) THEN
                      call iaea_get_max_particles(IOUTFLU(I),-1,iaea_dum
     *                my_long)
                      NPPHSP(I)=iaea_dummy_long
                      call iaea_get_max_particles(IOUTFLU(I),1,iaea_dumm
     *                y_long)
                      NPHOTPHSP(I)=iaea_dummy_long
                      call iaea_get_total_original_particles(IOUTFLU(I),
     *                iaea_dummy_long)
                      NINCPHSP=iaea_dummy_long
                      call iaea_get_maximum_energy(IOUTFLU(I),EKMAX_PHSP
     *                _SHORT)
                      EKMAXPHSP(I)=EKMAX_PHSP_SHORT
                      call iaea_get_constant_variable(IOUTFLU(I),2,Z_PHS
     *                P_SHORT,iaea_result)
                      IF ((iaea_result.EQ.-3)) THEN
                          write(i_log,*) ' Z positions of each particle
     *will be read from phase space data.'
                          Z_SCORE=999.
                          IZSCORE=1
                      ELSE IF((iaea_result.LT.0)) THEN
                          write(i_log,*)' Error reading Z position where
     * IAEA phsp was scored.'
                          IZSCORE=0
                      ELSE
                          Z_SCORE=Z_PHSP_SHORT
                          IZSCORE=0
                      END IF
                      call iaea_get_extra_numbers(IOUTFLU(I),iaea_n_extr
     *                a_floats,iaea_n_extra_ints)
                      IF ((iaea_n_extra_floats .EQ. -1 .OR. iaea_n_extra
     *                _ints .EQ. -1)) THEN
                          write(i_log,*)' Error reading number of extra
     *variables stored in IAEA phsp'
                      END IF
                      call iaea_get_type_extra_variables(IOUTFLU(I),iaea
     *                _result,iaea_extra_int_types, iaea_extra_float_typ
     *                es)
                      IF ((iaea_result.EQ.-1)) THEN
                          write(i_log,*)' Error getting types of extra v
     *ariables stored in IAEA phsp'
                      END IF
                      DO 2211 I_PHSP=1,iaea_n_extra_ints
                          IF ((iaea_extra_int_types(I_PHSP).EQ.2)) THEN
                              iaea_i_latch=I_PHSP
                              GO TO2212
                          END IF
2211                  CONTINUE
2212                  CONTINUE
                      IF ((iaea_i_latch.EQ.-99)) THEN
                          write(i_log,*)' Warning: IAEA format phsp file
     * does not store LATCH'
                      END IF
                      DO 2221 I_PHSP=1,iaea_n_extra_floats
                          IF ((iaea_extra_float_types(I_PHSP).EQ.3)) THE
     *                    N
                              iaea_i_zlast=I_PHSP
                              GO TO2222
                          END IF
2221                  CONTINUE
2222                  CONTINUE
                      IF ((iaea_i_zlast.EQ.-99)) THEN
                          IZLAST1=0
                      ELSE
                          IZLAST1=1
                      END IF
                      iaea_i_muidx=MAX(1,iaea_i_zlast+1)
                      IF ((iaea_i_muidx.GT.iaea_n_extra_floats .OR. iaea
     *                _extra_float_types(iaea_i_muidx).NE.0)) THEN
                          iaea_i_muidx=-99
                          I_MU_PHSP=0
                      ELSE
                          I_MU_PHSP=1
                      END IF
                      EKMINPHSPE(I)=99999.
                      IF ((IZLAST.EQ.0 .AND. IZLAST1.EQ.1)) THEN
                          WRITE(6,2230)
2230                      FORMAT(//' Error: Phase space file was scoredw
     *ith ZLAST in previous run '/ ' but you have restarted this run wit
     *h IZLAST=0.  Restart with'/ ' IZLAST=1.'//)
                          STOP
                      ELSE IF((IZLAST.EQ.1 .AND. IZLAST1.EQ.0)) THEN
                          WRITE(6,2240)
2240                      FORMAT(//' Error: Phase space file was scored 
     *without ZLAST in previous run '/ ' but you have restarted this run
     * with IZLAST=1.  Restart with'/ ' IZLAST=0.'//)
                          STOP
                      END IF
                  ELSE
                      READ(IOUTFLU(I),REC=1,IOSTAT=IERR_PHSP)MODE_RW,NUM
     *                _PHSP_TOT,PHOT_PHSP_TOT, EKMAX_PHSP_SHORT,EKMINE_P
     *                HSP_SHORT,NINC_PHSP_SHORT
                      NPPHSPSP=NUM_PHSP_TOT
                      NPHOTPHSP(I)=PHOT_PHSP_TOT
                      EKMAXPHSP(I)=EKMAX_PHSP_SHORT
                      EKMINPHSPE(I)=EKMINE_PHSP_SHORT
                      NINCPHSP=NINC_PHSP_SHORT
                      IF ((IERR_PHSP.NE.0)) THEN
                          WRITE(6,2250)
2250                      FORMAT(//' ***ERROR READING HEADER OF PHASE SP
     *ACE FILE*** '//)
                          STOP
                      END IF
                      NPPHSP(I)=NPPHSPSP
                  END IF
                  IF ((NINCPHSP.GT. NINCSRC*(NCASEO+(NRCYCL+1)*(NPASS_ph
     *            _spO+NFAT_ph_spO))/NNPHSP)) THEN
                      WRITE(6,2260)I
2260                  FORMAT(//' ***ERROR:'/ ' Phase space file',I4,' ha
     *s been added to (using beamdp?) before restarting.'/ ' The code cu
     *rrently does not support this.  Please add phase space'/ ' files o
     *nly after all runs, including restarts, are complete.'//)
                  END IF
              END IF
              IF ((NPPHSP(I) .GT. 0)) THEN
                  CALL DATETIME(1)
                  WRITE(6,2270)TIMEN
2270              FORMAT(/' READ PH-SP FILE AT ',A)
                  IF ((IO_OPT.EQ.4)) THEN
                      call iaea_check_file_size_byte_order(IOUTFLU(I),ia
     *                ea_result)
                      IF ((iaea_result.EQ.-3)) THEN
                          WRITE(i_log,*)' ERROR: Size of phase space fil
     *e does not match'
                          WRITE(i_log,*)' the value of checksum in the h
     *eader.  Something may be'
                          WRITE(i_log,*)' wrong.  Check your file.'
                          call exit(1)
                      ELSE IF((iaea_result.EQ.-4)) THEN
                          WRITE(i_log,*)' ERROR: Byte order in the phase
     * space file does not'
                          WRITE(i_log,*)' match the machine you are runn
     *ing on.'
                          call exit(1)
                      ELSE IF((iaea_result.EQ.-5)) THEN
                          WRITE(i_log,*)' ERROR: Size of file does not m
     *atch the value of checksum'
                          WRITE(i_log,*)' in the header AND there is a b
     *yte order mismatch between'
                          WRITE(i_log,*)' the file and the machine you a
     *re running on.'
                          call exit(1)
                      ELSE IF((iaea_result.EQ.-1)) THEN
                          WRITE(i_log,*)' ERROR: Cannot open phase space
     * header.'
                          call exit(1)
                      ELSE IF((iaea_result.EQ.-2)) THEN
                          WRITE(i_log,*)' ERROR: Something is wrong with
     * the phase space file.'
                          call exit(1)
                      END IF
                  ELSE
                      IF ((IZLAST.NE.0)) THEN
                          READ(IOUTFLU(I),REC=NPPHSP(I)+1,IOSTAT=IERR_PH
     *                    SP) LATCHM,ESHORT,X_PHSP_SHORT,Y_PHSP_SHORT, U
     *                    _PHSP_SHORT,V_PHSP_SHORT,WT_PHSP_SHORT,ZLAST_P
     *                    HSP_SHORT
                      ELSE
                          READ(IOUTFLU(I),REC=NPPHSP(I)+1,IOSTAT=IERR_PH
     *                    SP) LATCHM,ESHORT,X_PHSP_SHORT,Y_PHSP_SHORT, U
     *                    _PHSP_SHORT,V_PHSP_SHORT,WT_PHSP_SHORT
                      END IF
                      IF ((NPPHSP(I)+1.EQ.76695869)) THEN
                          write(*,*)' x,y,u,v,wt,eshort,latch', X_PHSP_S
     *                    HORT,Y_PHSP_SHORT,U_PHSP_SHORT,V_PHSP_SHORT, W
     *                    T_PHSP_SHORT,ESHORT,LATCHM
                      END IF
                      IF ((ESHORT.LT.0.0)) THEN
                          NHSTRYM=NHSTRYM+1
                          ESHORT=ABS(ESHORT)
                      END IF
                      EINM=ESHORT
                      WTM=WT_PHSP_SHORT
                      XINM=X_PHSP_SHORT
                      YINM=Y_PHSP_SHORT
                      UINM=U_PHSP_SHORT
                      VINM=V_PHSP_SHORT
                      IF((IZLAST.NE.0))ZLAST(1)=ZLAST_PHSP_SHORT
                      WRITE(6,2280)NPPHSP(I),LATCHM,EINM,XINM,YINM,UINM,
     *                VINM,WTM
2280                  FORMAT(// ' (LATCHM,EINM,XINM,YINM,UINM,VINM,WTM)F
     *OR PARTICLE No.', I12,' IN THIS FILE:'/' ',I12,6F12.5)
                  END IF
                  WRITE(6,2290)
2290              FORMAT(/' FINISHED READING PH-SP FILE AT ',$)
                  call egs_time(6)
                  WRITE(6,2300)
2300              FORMAT(' ')
              END IF
2191      CONTINUE
2192      CONTINUE
      ELSE IF((IRESTART .EQ. 3)) THEN
          WRITE(6,2310)
2310      FORMAT(/' *** About to read dose/fluence data from previous ru
     *n ***')
          data_unit=egs_open_datfile(IORSTRT,0,1,'.egsdat')
          READ(data_unit,*) SCSTP,SCSTP2,SCDSTP,SCDSTP2,PIISTP
          READ(data_unit,*) ((SCDOSE(ID,IT),SCDOSE2(ID,IT),IT=1,ITMAX),I
     *    D=1,NDOSE_ZONE)
          READ(data_unit,*) ((((SCFLU(I1,I2,I3,I4),SCFLU2(I1,I2,I3,I4),I
     *    1=1,3),I3=1,NSC_ZONES(I2)+1),I2=1,NSC_PLANES),I4=1,8)
          READ(data_unit,*) ((((SCFLU_COV(I1,I2,I3,I4),I1=1,3),I3=1,NSC_
     *    ZONES(I2)+1),I2=1,NSC_PLANES),I4=1,4)
          READ(data_unit,*) ((((SCFLU_NUM(I1,I2,I3,I4),I1=1,3),I3=1,NSC_
     *    ZONES(I2)+1),I2=1,NSC_PLANES),I4=1,2)
          read(data_unit,*) urndm,crndm,cdrndm, cmrndm, ixx, jxx, rng_se
     *    ed, rng_array
          twom24 = 1./16777216.
          write(6,*) urndm,crndm,cdrndm, cmrndm, ixx, jxx, rng_seed, rng
     *    _array
          READ(data_unit,*)NCASEO,NHSTRYO,TMCPUO,(NPPHSP(IS),IS=1,NSC_PL
     *    ANES), NPASS_ph_spO,NFAT_ph_spO
          CLOSE(data_unit)
          NCASE=0
      ELSE IF((IRESTART .EQ. 4)) THEN
          call egs_combine_runs(combine_results,'.egsdat')
          NCASE=0
      END IF
      IF ((IRESTART.EQ.1.OR.IRESTART.EQ.3)) THEN
          DO 2321 I=1,NSC_PLANES
              DO 2331 I4=1,2
                  DO 2341 I3=1,NSC_ZONES(I)+1
                      DO 2351 I1=1,3
                          NPFLU(I)=NPFLU(I)+SCFLU_NUM(I1,I,I3,I4)
2351                  CONTINUE
2352                  CONTINUE
2341              CONTINUE
2342              CONTINUE
2331          CONTINUE
2332          CONTINUE
2321      CONTINUE
2322      CONTINUE
      END IF
      NCASET=NCASE+NCASEO
      DUNIT=1
      WRITE(6,2360)NMED, (I,(MEDIA(J,I),J=1,24), I=1,NMED)
2360  FORMAT(/' There are', I3,' different media:'/ (10x,' Medium(',I3,'
     *) is: ',24A1))
      CALL DATETIME(1)
      WRITE(6,2370)TIMEN
2370  FORMAT(/' CALL TO HATCH AT  ',A)
      CALL HATCH
      call get_cse_factors
      CALL GET_REJPLN
      CALL GET_BCSE_PARAMETERS
      CALL DATETIME(1)
      WRITE(6,2380)TIMEN
2380  FORMAT(/' HATCH COMPLETED AT ',A)
      call show_transport_parameter(6)
      call set_elastic_parameter
      IF ((ECUTIN.EQ.0.0)) THEN
          IF ((AIR_INDEX.EQ.1)) THEN
              ECUTIN=AE(1)
          ELSE
              DO 2391 I=1,NMED
                  ECUTIN=MAX(ECUTIN,AE(I))
2391          CONTINUE
2392          CONTINUE
          END IF
      END IF
      IF ((PCUTIN.EQ.0.0)) THEN
          IF ((AIR_INDEX.EQ.1)) THEN
              PCUTIN=AP(1)
          ELSE
              DO 2401 I=1,NMED
                  PCUTIN=MAX(PCUTIN,AP(I))
2401          CONTINUE
2402          CONTINUE
          END IF
      END IF
      MFORCF=0
      IRL = 0
      ICM = 0
2411  CONTINUE
          IRL = IRL + 1
          IF ((IRL .EQ. IR_start_CM(ICM+1))) THEN
              ICM = ICM + 1
          END IF
          IR_to_CM(IRL) = ICM
          IF(((IRL .EQ. NREG)))GO TO2412
      GO TO 2411
2412  CONTINUE
      IF ((IREJCT_GLOBAL .EQ. 0)) THEN
          DO 2421 IRL=1,3000
              IREJCT(IRL) = 0
              ECUTRR(IRL)=0.
2421      CONTINUE
2422      CONTINUE
      ELSE
          IF ((IREJCT_GLOBAL.EQ.1)) THEN
              IF ((ICM_to_SCORE(MAX_CMs) .NE. 1)) THEN
                  WRITE(6,2430)
2430              FORMAT(///' ******************************************
     ***********'/ ' IREJECT_GLOBAL=1 ASSUMES only scoring plane is at b
     *ack of last CM' /' and it isnt!'/ '*******************************
     ********************************'/)
                  WRITE(IOUTLIST,'(//'' ********************************
     **************''           /'' IREJECT_GLOBAL=1 ASSUMES 1 scoring p
     *lane is at back of last CM''            /'' and it isnt!''/
     *                                                     ''***********
     ************************************************''//)')
              END IF
              E_min_out(MAX_CMs) = ECUTIN
              DO 2441 ICM=MAX_CMs,2,-1
                  EKE = E_min_out(ICM)
                  IF ((Z_min_thick(ICM,1) .EQ. 0.0)) THEN
                      Z_min_thick(ICM,1) = Z_min_CM(ICM+1) - Z_min_CM(IC
     *                M)
                      MED_min_thick(ICM,1)=1
                      IF ((AIR_INDEX .EQ. 0 .AND.  RHO(MED_min_thick(ICM
     *                ,1)) .GT. 0.12048)) THEN
                          aux=1.0E+10
                          MED_min_thick(ICM,1)=1
                          DO 2451 j=1,nmed
                              IF ((rho(j).LT.aux)) THEN
                                  aux=rho(j)
                                  MED_min_thick(ICM,1)=j
                              END IF
2451                      CONTINUE
2452                      CONTINUE
                          j = MED_min_thick(ICM,1)
                          write(i_log,'(/a)') '***************** Warning
     *: '
                          write(i_log,'(a,i3/,3(a/),a,i3,a,e10.5,a,24a1)
     *') 'Range rejection initialization CM # ',ICM, '==================
     *======================', 'Surrounding medium set to VACUUM but AIR
     *-like medium 1', 'is 100 times more dense than AIR. Resetting MED_
     *min_thick', 'to least dense medium #',j,' with RHO = ', rho(j),' g
     */cm3 named ',(media(k,j),k=1,24)
                      END IF
                  END IF
                  DO 2461 I=1,5
                      MEDIUM = MED_min_thick(ICM,I)
                      IF ((MEDIUM .NE. 0)) THEN
                          IF ((EKE .LE. UE(MEDIUM))) THEN
                              ELKE = LOG(EKE)
                              LELKE=EKE1(MEDIUM)*ELKE+EKE0(MEDIUM)
                              DEDXE=EDEDX1(LELKE,MEDIUM)*ELKE+EDEDX0(LEL
     *                        KE,MEDIUM)
                              EKEM = EKE + 0.5*DEDXE*Z_min_thick(ICM,I)
                              IF ((EKEM .LE. UE(MEDIUM))) THEN
                                  ELKE = LOG(EKEM)
                                  LELKE=EKE1(MEDIUM)*ELKE+EKE0(MEDIUM)
                                  DEDXE=EDEDX1(LELKE,MEDIUM)*ELKE+EDEDX0
     *                            (LELKE,MEDIUM)
                              END IF
                              EKE = EKE + DEDXE*Z_min_thick(ICM,I)
                          END IF
                          IF ((EKE .GT. UE(MEDIUM))) THEN
                              write(i_log,'(/a)') '***************** War
     *ning: '
                              write(i_log,'(a,i3/,a/,a/,a,f7.2,a,f7.2,a/
     *,2a/,'// '2a,f7.2,a/,/a/,a,f7.2,a,24a1/)') 'Setting up range rejec
     *tion (rr) with varying ECUTRR in CM # ', ICM, '===================
     *=========================================', 'Minimum E needed from
     * previous CM to reach the bottom of ', 'this CM is ',EKE, ' MeV. T
     *his is larger than UE (',UE(medium),' MeV).', 'Hence all charged
     *particles will be range-rejected before ', 'entering this CM.', 'S
     *witching off rr in this CM by setting the minimum energy to', ' EC
     *UTIN = ', ECUTIN,' MeV.', 'Are you using a high density surroundin
     *g medium?', 'Nominal "AIR" (MEDIUM 1) with RHO = ',rho(medium),'g/
     *cm3 is ', (media(J,medium),J=1,24)
                              EKE = E_min_out(ICM)
                          END IF
                      END IF
2461              CONTINUE
2462              CONTINUE
                  E_min_out(ICM-1) = EKE
2441          CONTINUE
2442          CONTINUE
              DO 2471 IRL=2,NREG
                  ECUTRR(IRL) = max(ECUT(IRL),E_min_out(IR_to_CM(IRL)))
2471          CONTINUE
2472          CONTINUE
          ELSE IF((IREJCT_GLOBAL.EQ.2)) THEN
              DO 2481 IRL=2,NREG
                  ECUTRR(IRL) =ECUT(IRL)
2481          CONTINUE
2482          CONTINUE
          END IF
          lelec=-1
          DO 2491 IRL=2,NREG
              IF ((IREJCT(IRL).GT.0)) THEN
                  MEDIUM = MED(IRL)
                  IF ((MEDIUM.EQ.0 .OR. ECUTRR(IRL) .EQ. AE(MEDIUM))) TH
     *            EN
                      RANGE_ECUTRR(IRL)=0.0
                  ELSE
                      EKE = ECUTRR(IRL)- RM
                      ELKE = LOG(EKE)
                      LELKE=EKE1(MEDIUM)*ELKE+EKE0(MEDIUM)
                      EKEI = E_array(LELKE,MEDIUM)
                      ELKEI = (LELKE - eke0(MEDIUM))/eke1(MEDIUM)
                      fedep = 1 - EKEI/EKE
                      elktmp = 0.5*(ELKE+ELKEI+0.25*fedep*fedep*(1+fedep
     *                *(1+0.875*fedep)))
                      lelktmp = LELKE
                      IF ((lelec .LT. 0)) THEN
                          dedxmid=ededx1(Lelktmp,MEDIUM)*elktmp+ededx0(L
     *                    elktmp,MEDIUM)
                          dedxmid = 1/dedxmid
                          aux = ededx1(lelktmp,medium)*dedxmid
                      ELSE
                          dedxmid=pdedx1(Lelktmp,MEDIUM)*elktmp+pdedx0(L
     *                    elktmp,MEDIUM)
                          dedxmid = 1/dedxmid
                          aux = pdedx1(lelktmp,medium)*dedxmid
                      END IF
                      aux = aux*(1+2*aux)*(fedep/(2-fedep))**2/6
                      RANGE_ECUTRR(IRL) = fedep*EKE*dedxmid*(1+aux)
                      RANGE_ECUTRR(IRL)=(RANGE_ECUTRR(IRL)+range_ep(0,LE
     *                LKE,MEDIUM))* (RHO(MEDIUM)/RHOR(IRL))
                  END IF
              END IF
2491      CONTINUE
2492      CONTINUE
      END IF
      DO 2501 J=1,5
          IAUSFL(J)=1
2501  CONTINUE
2502  CONTINUE
      DO 2511 J=6,35
          IAUSFL(J)=0
2511  CONTINUE
2512  CONTINUE
      IAUSFL(7)=1
      IF (((IBRSPL.EQ.1 .AND. IRRLTT.EQ.0) .OR. IBRSPL.EQ.2)) THEN
          IAUSFL(13)=1
          IAUSFL(29)=1
      END IF
      IF (( IBRSPL.EQ.2)) THEN
          IAUSFL(16) = 1
          IAUSFL(18) = 1
          IAUSFL(20) = 1
          IAUSFL(24) = 1
      END IF
      IF (( IBRSPL.EQ.2 )) THEN
          IAUSFL(26) = 1
      END IF
      IF ((LATCH_OPTION .NE. 0)) THEN
          IAUSFL(8)=1
          IAUSFL(10)=1
          IAUSFL(12)=1
          IAUSFL(14)=1
          IAUSFL(15)=1
          IAUSFL(17)=1
          IAUSFL(19)=1
          IAUSFL(21)=1
          IF ((LATCH_OPTION .GE. 2)) THEN
              IAUSFL(25) = 1
              LNOB29 = 2**(29-5)
          END IF
      END IF
      IF ((IZLAST .NE. 0)) THEN
          IAUSFL(8)=1
          IAUSFL(14)=1
          IAUSFL(15)=1
          IAUSFL(17)=1
          IAUSFL(19)=1
          IAUSFL(25)=1
          IAUSFL(21)=1
      END IF
      DO 2521 j=1,35
          cse_return(j) = .false.
2521  CONTINUE
2522  CONTINUE
      IF (( use_cs_enhance )) THEN
          IF((iausfl(16) .EQ. 0))cse_return(16) = .true.
          IF((iausfl(17) .EQ. 0))cse_return(17) = .true.
          IF((iausfl(18) .EQ. 0))cse_return(18) = .true.
          IF((iausfl(19) .EQ. 0))cse_return(19) = .true.
          IF((iausfl(20) .EQ. 0))cse_return(20) = .true.
          IF((iausfl(21) .EQ. 0))cse_return(21) = .true.
          IF((iausfl(24) .EQ. 0))cse_return(24) = .true.
          IF((iausfl(25) .EQ. 0))cse_return(25) = .true.
          IAUSFL(16) = 1
          IAUSFL(17) = 1
          IAUSFL(18) = 1
          IAUSFL(19) = 1
          IAUSFL(20) = 1
          IAUSFL(21) = 1
          IAUSFL(24) = 1
          IAUSFL(25) = 1
      END IF
      IF ((IBRSPL.EQ.1)) THEN
          IAUSFL(26)=1
      END IF
      IF ((USE_BCSE)) THEN
          IAUSFL(7)=1
          IAUSFL(8)=1
          IAUSFL(26)=1
      END IF
      MXNP=0
      IHSTRY = NCASEO
      NPASS_ph_sp=NPASS_ph_spO
      NFAT_ph_sp=NFAT_ph_spO
      NHSTRY = NHSTRYO
      IF (((ISOURC.EQ.21 .OR. ISOURC.EQ.24) .AND. .NOT.phsp_open)) THEN
          IF ((IPARALLEL.GT.1 .AND. PARNUM.GT.0)) THEN
              IF ((IHSTRY+(NRCYCL+1)*(NPASS_ph_sp+NFAT_ph_sp).LT.NNPHSP/
     *        IPARALLEL)) THEN
                  INPHSP=INT((PARNUM-1)*NNPHSP/IPARALLEL)+IHSTRY+ (NRCYC
     *            L+1)*(NPASS_ph_sp+NFAT_ph_sp)
              ELSE
                  long_tmp=NNPHSP
                  INPHSP=INT((PARNUM-1)*NNPHSP/IPARALLEL)+ MOD(IHSTRY+(N
     *            RCYCL+1)*(NPASS_ph_sp+NFAT_ph_sp), long_tmp/IPARALLEL)
              END IF
          ELSE
              IF ((IHSTRY+(NRCYCL+1)*(NPASS_ph_sp+NFAT_ph_sp).LT.NNPHSP)
     *        ) THEN
                  INPHSP = IHSTRY+(NRCYCL+1)*(NPASS_ph_sp+NFAT_ph_sp)
              ELSE
                  long_tmp=NNPHSP
                  INPHSP=MOD(IHSTRY+(NRCYCL+1)*(NPASS_ph_sp+NFAT_ph_sp),
     *            long_tmp)
              END IF
          END IF
          IF ((i_iaea_in.EQ.1)) THEN
              iaea_dummy_long=INPHSP+1
              call iaea_set_record(IINSRC,iaea_dummy_long,iaea_result)
              IF ((iaea_result.LT.0)) THEN
                  WRITE(i_log,*)' Error going to record ',INPHSP+1,' in
     *IAEA phsp file.'
                  call exit(1)
              END IF
          END IF
      END IF
      JHSTRY = 0
      IF ((ISOURC .LT. 21 .OR. ISOURC.EQ.22)) THEN
          IF ((MONOEN .EQ. 0)) THEN
              IF ((IQIN .EQ. 0)) THEN
                  EI=EIN
              ELSE
                  EI=EIN+RM
              END IF
              EKMAX=EIN
          ELSE IF((MONOEN .EQ. 1)) THEN
              EKMAX = ENSRCD(NENSRC)
          END IF
      ELSE IF((ISOURC .GE. 21 .AND. ISOURC.NE.22)) THEN
          EKMAX=EKMAXSRC
          EIN=EKMAXSRC
      END IF
      DO 2531 I=1,NMED
          IF (((EKMAX .GT. UP(I)) .OR. (EKMAX .GT. UE(I)-RM))) THEN
              WRITE(6,2540)I,EKMAX,UP(I),UE(I)
2540          FORMAT(//1X,50('*')// ' FOR MEDIUM',I3,' INCIDENT ENERGY='
     *,F10.1,' MeV'/ ' IS GREATER THAN COVERED BY DATA FILE WHERE UP,UE=
     *',2F10.1,' MeV'/ '     EXECUTION WILL TERMINATE AFTER COMPLETION O
     *F INPUT FILE'// 1X,50('*')//)
              IRESTART=2
          END IF
2531  CONTINUE
2532  CONTINUE
      CALL SRCOTO(WEIGHT)
      IF ((IWATCH.EQ.4 .OR. IZLAST.EQ.2)) THEN
          IOUTGEOM=egs_open_file(IOUTGEOM,0,1,'.egsgeom')
      END IF
      IF ((IZLAST.EQ.2)) THEN
          IOUTGPH=egs_open_file(IOUTGPH,0,1,'.egsgph')
      END IF
      IF((IDAT.EQ.0))data_unit = egs_open_file(IORSTRT,0,1,'.egsdat')
      CALL ISUMRY
      ECUT(1)=0.
      PCUT(1)=0.
      IF ((IERR_INPUTS .NE. 0)) THEN
          WRITE(6,2550)
2550      FORMAT(//'***ERROR in CM geometries -- simulation not run'//)
          WRITE (IOUTLIST,121)
          call exit(1)
      END IF
121   FORMAT('***ERROR in CM geometries -- simulation not run'/ T20, 'Se
     *e log file or terminal output')
      CALL DATETIME(1)
      WRITE(IOUTLIST,100) TITLE,TIMEN,DATEN
100   FORMAT(//1A79/ /' NRCC CALN: BEAMnrc(EGSnrc) ',' ', ' ', /' ON ','
     *linux64',' ',T60,A,1X,A)
      WRITE(IOUTLIST,200)
200   FORMAT(' ',79('*')/ ' ',T20,'EXECUTION INFORMATION AND WARNING MES
     *SAGES'/ ' ',79('*') )
      WRITE(i_log,200)
      IF ((IRESTART .EQ. 0)) THEN
          WRITE(i_log,201)
          WRITE(IOUTLIST,201)
      ELSE IF((IRESTART .EQ. 1)) THEN
          IF ((ISOURC.EQ.21 .OR. ISOURC.EQ.24)) THEN
              WRITE(i_log,205) NCASE,NCASEO,NHSTRYO,NPASS_ph_spO,NFAT_ph
     *        _spO, (NPPHSP(IS),IS=1,NSC_PLANES)
              WRITE(IOUTLIST,205)NCASE,NCASEO,NHSTRYO,NPASS_ph_spO,NFAT_
     *        ph_spO, (NPPHSP(IS),IS=1,NSC_PLANES)
          ELSE IF((ISOURC.EQ.23)) THEN
              WRITE(i_log,206) NCASE,NCASEO,NHSTRYO,NFAT_ph_spO, (NPPHSP
     *        (IS),IS=1,NSC_PLANES)
              WRITE(IOUTLIST,206)NCASE,NCASEO,NHSTRYO,NFAT_ph_spO, (NPPH
     *        SP(IS),IS=1,NSC_PLANES)
          ELSE
              WRITE(i_log,202) NCASE,NCASEO,(NPPHSP(IS),IS=1,NSC_PLANES)
              WRITE(IOUTLIST,202)NCASE,NCASEO,(NPPHSP(IS),IS=1,NSC_PLANE
     *        S)
          END IF
      ELSE IF((IRESTART .EQ. 2)) THEN
          WRITE(i_log,203)
          WRITE(IOUTLIST,203)
          ircode = 2
          return
      ELSE IF((IRESTART .EQ. 3)) THEN
          WRITE(i_log,204)
          WRITE(IOUTLIST,204)
          ircode = 1
          return
      END IF
201   FORMAT(/'********* NEW INPUT FILE *********'/)
202   FORMAT(/' ********* RESTARTED INPUT FILE ********* '/ ' ',10X,I12,
     *' NEW + ',I12,' OLD HISTORIES'/ ' ',10X,'USING RN SEEDS FROM PREVI
     *OUS RUN'/ ' ',10X,'# OF PARTICLES IN THE PH-SP FILE FROM PREVIOUSR
     *UN ='/ ' ',20X,4(1X,I12)/)
203   FORMAT(/' ********* INPUT FILE CREATION ONLY *********'/)
204   FORMAT(/' ********* DATA ANALYSIS ONLY *********'/)
205   FORMAT(/' ********* RESTARTED INPUT FILE ********* '/ ' ',10X,I12,
     *' NEW + ',I12,' OLD HISTORIES (',I12,' PRIMARY HISTORIES)'/ ' ',10
     *X,'# OF MULTIPLE PASSERS REJECTED FROM PREVIOUS RUN = ',I12/ ' ',1
     *0X,'# OF PHOTONS REJECTED BECAUSE THEY FALL OUTSIDE '/ ' ',10X,'  
     *                        DBS SPLITTING RADIUS = ',I12/ ' ',10X,'USI
     *NG RN SEEDS FROM PREVIOUS RUN'/ ' ',10X,'# OF PARTICLES IN THE PH-
     *SP FILE FROM PREVIOUS RUN ='/ ' ',20X,4(1X,I12)/)
206   FORMAT(/' ********* RESTARTED INPUT FILE ********* '/ ' ',10X,I12,
     *' NEW + ',I12,' OLD HISTORIES (',I12,' PRIMARY HISTORIES)'/ ' ',10
     *X,'# OF FAT PHOTONS REJECTED=',I12/ ' ',10X,'USING RN SEEDS FROM P
     *REVIOUS RUN'/ ' ',10X,'# OF PARTICLES IN THE PH-SP FILE FROM PREVI
     *OUS RUN ='/ ' ',20X,4(1X,I12)/)
      IF((IWATCH .NE. 0))CALL WATCH(-99,IWATCH)
      CHOSEN_SRC18=0
      DO 2561 I1=1,10000
          NP_INC(I1)=0
2561  CONTINUE
2562  CONTINUE
      MINWEIGHT=9999.
      MAXWEIGHT=0.
      CYCLNUM=0
      NUM_BREM=0
      NHSTRY_LAST=0
      BEAM_MU_INDEX=-1.0
      BEAM_MU_INDEX_OLD=-1.0
      dosxyz2beam_index=1.0
      IF ((ISTORE .EQ. -1)) THEN
          WRITE(6,2570)IOUTRN
2570      FORMAT(/' Will READ RANDOM NUMBER PARAMETERS FROM UNIT : ',I2)
          IOUTRN=egs_open_datfile(IOUTRN,0,1,'.egsrns')
          read(IOUTRN,*) urndm,crndm,cdrndm, cmrndm, ixx, jxx, rng_seed,
     *     rng_array
          twom24 = 1./16777216.
      END IF
      count_nbrem=0
      count_ncomp=0
      count_npair=0
      count_nphoto=0
      count_nannih=0
      count_kill_brem=0
      count_kill_comp=0
      count_kill_photo=0
      count_kill_annih=0
      time_brem=0
      time_comp=0
      count_esplit=0
      return
1120  CONTINUE
      WRITE(6,2580)
2580  FORMAT(//' *** unexpected end of file reading input for MAIN ***')
      ircode = -1
      return
1130  CONTINUE
      WRITE(6,2590)
2590  FORMAT(//' *** format error on input for MAIN ***')
      ircode = -2
      return
2600  CONTINUE
      WRITE(6,2610)
2610  FORMAT(/' *** Error on opening file: No directory/file can be foun
     *d. ***')
      ircode = -3
      return
      end
      subroutine beam_shower(icase)
      implicit none
      integer*8 icase
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/SOURCE/ COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,
     *COSTHETA,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SI
     *GN2,RIN1_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA
     *24, NNPHSP,NPHOTSRC,WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEA
     *M,YBEAM,ZBEAM,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL
     *2,PROBFC,PROBSD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z
     *_SOURCE,E_ph_sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT1
     *00,XSCAN_UNIT,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YIN
     *DEL, EKMAXSRC, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9, Y_SRC9, PR
     *OB_SRC9, ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN,RDISTF,RPDF,RCDF, F
     *NORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COSRNG,SINRNG,WEIGHTOLD,UINOL
     *D,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RSRC_DBS,SSDSRC_DBS,ZSRC_DBS
     *,sigma_src19,DIST24,ALPHA24,BETA24,RBEAMY, xo_src19, yo_src19, NRD
     *IST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p, NPASS_ph_s
     *p, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRATIO_YXF, OL
     *DSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUNT, IERROR,
     *RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB,MONOEN, NR
     *CYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE_FLAG, INIT
     *_ICMOLD,I_MUPHSP_IN,SPCNAM, the_beam_code,the_input_file,the_pegs_
     *file,SPEC_TITLE,phsp_open
      REAL*8 COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,COSTHETA
     *,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SIGN2,RIN1
     *_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA24
      integer*8 NNPHSP, NPHOTSRC
      real*8 WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEAM,YBEAM,ZBEAM
     *,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL2,PROBFC,PROB
     *SD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z_SOURCE,E_ph_
     *sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT100,XSCAN_UNIT
     *,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YINDEL, EKMAXSRC
     *, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9(10), Y_SRC9(10), PROB_SR
     *C9(10), ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN(1000,2),RDISTF(1000)
     *, RPDF(1000),RCDF(1000), FNORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COS
     *RNG,SINRNG,WEIGHTOLD,UINOLD,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RS
     *RC_DBS,SSDSRC_DBS,ZSRC_DBS,sigma_src19,DIST24,ALPHA24,BETA24,RBEAM
     *Y, xo_src19, yo_src19
      INTEGER NRDIST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p,
     * NPASS_ph_sp, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRA
     *TIO_YXF, OLDSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUN
     *T, IERROR, RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB
     *,MONOEN, NRCYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE
     *_FLAG, INIT_ICMOLD,I_MUPHSP_IN
      CHARACTER*256 SPCNAM
      CHARACTER*80 the_beam_code,the_input_file,the_pegs_file,SPEC_TITLE
      logical phsp_open
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      common/timing_info/ etimetot, timcpu, tzero, timeb, ibatch
      real*8 etimetot, timcpu, tzero, timeb
      integer*4 ibatch
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/RWPHSP/ STRING_TEMP_ZLAST_OUT,  STRING_TEMP_OUT,  IHSTRY_PH
     *SP,   iaea_dummy_long,  NHSTRY_DOS,   ESHORT,  WEIGHTTMP,  WT_PHSP
     *_SHORT,  X_PHSP_SHORT,  Y_PHSP_SHORT,  Z_PHSP_SHORT,  U_PHSP_SHORT
     *,  V_PHSP_SHORT,  W_PHSP_SHORT,  ZLAST_PHSP_SHORT,  MUIDX_PHSP_SHO
     *RT,  EKMAX_PHSP_SHORT,  EKMINE_PHSP_SHORT,  NINC_PHSP_SHORT,  dosx
     *yz2beam_index,  iaea_extra_floats,  NUM_PHSP_TOT,  PHOT_PHSP_TOT,
     *iaea_result,   iaea_n_stat,  iaea_q_typ,  iaea_typ_q,  iaea_q_inde
     *x,  I_PHSP,  IERR_PHSP,  LATCHTMP,  WRITE_PHSP_COUNTER,  WRITE_PHS
     *P_SOFAR,  PHSP_RESTART,  PHSP_RECL,  PHSP_RECL_OLD,  iaea_extra_in
     *ts,  iaea_extra_int_types,iaea_extra_float_types,   iaea_i_zlast,
     * iaea_i_latch,  iaea_i_muidx,  iaea_n_extra_ints,  iaea_n_extra_fl
     *oats,  i_iaea_open_for_write,   iaea_i_zlast_out,  iaea_i_latch_ou
     *t,  iaea_i_muidx_out,  dosxyz2beam_izscore,  MODE_RW
      CHARACTER*32000 STRING_TEMP_ZLAST_OUT(3)
      CHARACTER*28000 STRING_TEMP_OUT(3)
      integer*8 IHSTRY_PHSP(3),iaea_dummy_long,NHSTRY_DOS
      REAL*4 ESHORT,WEIGHTTMP,WT_PHSP_SHORT,X_PHSP_SHORT,Y_PHSP_SHORT, Z
     *_PHSP_SHORT,U_PHSP_SHORT, V_PHSP_SHORT,W_PHSP_SHORT,ZLAST_PHSP_SHO
     *RT, MUIDX_PHSP_SHORT, EKMAX_PHSP_SHORT,EKMINE_PHSP_SHORT,NINC_PHSP
     *_SHORT,dosxyz2beam_index, iaea_extra_floats(10)
      INTEGER NUM_PHSP_TOT,PHOT_PHSP_TOT, iaea_result,iaea_n_stat,iaea_q
     *_typ(3),iaea_typ_q(3),iaea_q_index,I_PHSP, IERR_PHSP,LATCHTMP, WRI
     *TE_PHSP_COUNTER(3),WRITE_PHSP_SOFAR(3), PHSP_RESTART,PHSP_RECL,PHS
     *P_RECL_OLD,iaea_extra_ints(10), iaea_extra_int_types(10),iaea_extr
     *a_float_types(10),iaea_i_zlast, iaea_i_latch,iaea_i_muidx,iaea_n_e
     *xtra_ints,iaea_n_extra_floats, i_iaea_open_for_write,iaea_i_zlast_
     *out,iaea_i_latch_out, iaea_i_muidx_out,dosxyz2beam_izscore
      CHARACTER*5 MODE_RW
      INTEGER LATCH_TEMP_OUT,NUM_PHSP_TOFLUSH,TEMP_PHSP_COUNTER,REM_PHSP
      REAL*4 REAL_TEMP_OUT(7)
      CHARACTER*32 REC_TEMP_OUT
      integer*8 NHSTRY_OLD
      integer*4 RESETWATCH,IRIN,I1,I2,I3,IT,LATCHI,ITMAX
      real*8 EI,XIN,YIN,ZIN,UIN,VIN,WIN,WEIGHT
      integer egs_open_file
      RESETWATCH = 0
      ITMAX=3+LNEXC+LNINC
      IHSTRY=IHSTRY+1
      NHSTRY_OLD=NHSTRY
      IF ((IWATCH .LT. 0 .AND. ABS(IWATCH) .EQ. IHSTRY)) THEN
          IWATCH=2
          RESETWATCH=1
      END IF
      NFTIME(1)=0
      IDISC=0
      IF ((ISTORE .EQ. 1)) THEN
          IOUTRN=egs_open_file(IOUTRN,0,1,'.egsrns')
          write(IOUTRN,*) urndm,crndm,cdrndm, cmrndm, ixx, jxx, rng_seed
     *    , rng_array
          CLOSE(IOUTRN)
      END IF
      IF ((IBRSPL.EQ.2)) THEN
          IPHATI=NBRSPL
      ELSE
          IPHATI=1
      END IF
      IF ((dosxyz2beam_index.LT.0)) THEN
          BEAM_MU_INDEX=dosxyz2beam_index+1.1
          BEAM_MU_INDEX_OLD=BEAM_MU_INDEX-1.1
      END IF
      BEAM_MU_INDEX_OLD = BEAM_MU_INDEX
      CALL SRCHST(XIN,YIN,ZIN,UIN,VIN,WIN,IRIN,WEIGHT)
      ICMNEW = ICM
      IF (( ISOURC .NE. 21 .AND. ISOURC .NE.23 .AND. ISOURC.NE.24 .AND.
     *dosxyz2beam_index .GE. 0)) THEN
          IF((MONOEN .EQ. 1))CALL EN_SAMPLE(EIN)
          IF ((IQIN .EQ. 0)) THEN
              EI=EIN
          ELSE
              EI=EIN+PRM
          END IF
      ELSE
          EI = EIN
      END IF
      IF (( ISOURC.NE.21 .AND. ISOURC.NE.24)) THEN
          NPASSI=0
      END IF
      NSPLITI=0
      ESPLIT_DBS=0
      IF ((IZLAST .NE. 0)) THEN
          ZLAST(1) = ZIN
          XLAST(1) = XIN
          YLAST(1)= YIN
          IF ((ISOURC .NE. 21 .AND. ISOURC.NE.24)) THEN
              ZLAST(1) = ZIN
              XLAST(1) = XIN
              YLAST(1)= YIN
          ELSE
              XLAST(1) = -100.0
              YLAST(1)= -100.0
          END IF
      END IF
      IF (((IWATCH .GT. 0) .AND. (IWATCH .NE. 4))) THEN
          WRITE(6,2620)1,(EI-abs(IQIN)*PRM),IQIN,IRIN,XIN,YIN,ZIN,UIN, V
     *    IN,WIN,LATCHI,WEIGHT
2620      FORMAT(' INITIAL SHOWER VALUES',T37,':', I2,F9.3,2I4,3F8.3,3F7
     *.3,I10,1PE10.3)
      END IF
      IF ((dosxyz2beam_index.GE.0)) THEN
          IF (( isourc .EQ. 3 .AND. i_dsb .EQ. 1 )) THEN
          ELSE
              IF(((ISOURC.NE.21 .AND. ISOURC.NE.23 .AND. ISOURC.NE.24) .
     *        OR. (DOSE_STAT.EQ.1 .AND. NRCYCL.EQ.0) .OR. (DOSE_STAT.EQ.
     *        1 .AND. NRCYCL.GT.0 .AND. CYCLNUM.EQ.1) .OR. ((ISOURC.EQ.2
     *        1 .OR. ISOURC.EQ.24) .AND. DOSE_STAT.EQ.0 .AND. IPARALLEL.
     *        GT.1 .AND. PARNUM.GT.0 .AND. ICASE.EQ.1 .AND. IBATCH.EQ.1
     *        .AND. NHSTRY.EQ.NHSTRY_OLD)))NHSTRY=NHSTRY+1
          END IF
      ELSE
          NHSTRY=NHSTRY_DOS
      END IF
      IF ((NHSTRY.NE.NHSTRY_OLD)) THEN
          NHSTRY_LAST=NHSTRY_LAST+1
          IF ((NHSTRY_LAST.EQ.32700)) THEN
              SCSTP_LAST=0
              SCDSTP_LAST=0
              DO 2631 IT=1,ITMAX
                  DO 2641 ID=1,NDOSE_ZONE
                      SCDOSE_LAST(ID,IT)=0
2641              CONTINUE
2642              CONTINUE
2631          CONTINUE
2632          CONTINUE
              DO 2651 I1 = 1,3
                  DO 2661 I2 = 1,3
                      DO 2671 I3 = 1,5+1
                          SCFLU_LAST(I1,I2,I3,1)=0
                          SCFLU_LAST(I1,I2,I3,2)=0
2671                  CONTINUE
2672                  CONTINUE
2661              CONTINUE
2662              CONTINUE
2651          CONTINUE
2652          CONTINUE
              NHSTRY_LAST=1
          END IF
      END IF
      CALL SHOWER(IQIN,EI,XIN,YIN,ZIN,UIN,VIN,WIN,IRIN,WEIGHT)
      IF((IWATCH .GT. 0))CALL WATCH(-1,IWATCH)
      IF ((RESETWATCH.EQ.1)) THEN
          IWATCH = 0
      END IF
      return
      end
      subroutine beam_shower_loop
      implicit none
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/SOURCE/ COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,
     *COSTHETA,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SI
     *GN2,RIN1_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA
     *24, NNPHSP,NPHOTSRC,WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEA
     *M,YBEAM,ZBEAM,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL
     *2,PROBFC,PROBSD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z
     *_SOURCE,E_ph_sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT1
     *00,XSCAN_UNIT,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YIN
     *DEL, EKMAXSRC, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9, Y_SRC9, PR
     *OB_SRC9, ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN,RDISTF,RPDF,RCDF, F
     *NORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COSRNG,SINRNG,WEIGHTOLD,UINOL
     *D,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RSRC_DBS,SSDSRC_DBS,ZSRC_DBS
     *,sigma_src19,DIST24,ALPHA24,BETA24,RBEAMY, xo_src19, yo_src19, NRD
     *IST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p, NPASS_ph_s
     *p, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRATIO_YXF, OL
     *DSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUNT, IERROR,
     *RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB,MONOEN, NR
     *CYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE_FLAG, INIT
     *_ICMOLD,I_MUPHSP_IN,SPCNAM, the_beam_code,the_input_file,the_pegs_
     *file,SPEC_TITLE,phsp_open
      REAL*8 COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,COSTHETA
     *,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SIGN2,RIN1
     *_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA24
      integer*8 NNPHSP, NPHOTSRC
      real*8 WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEAM,YBEAM,ZBEAM
     *,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL2,PROBFC,PROB
     *SD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z_SOURCE,E_ph_
     *sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT100,XSCAN_UNIT
     *,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YINDEL, EKMAXSRC
     *, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9(10), Y_SRC9(10), PROB_SR
     *C9(10), ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN(1000,2),RDISTF(1000)
     *, RPDF(1000),RCDF(1000), FNORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COS
     *RNG,SINRNG,WEIGHTOLD,UINOLD,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RS
     *RC_DBS,SSDSRC_DBS,ZSRC_DBS,sigma_src19,DIST24,ALPHA24,BETA24,RBEAM
     *Y, xo_src19, yo_src19
      INTEGER NRDIST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p,
     * NPASS_ph_sp, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRA
     *TIO_YXF, OLDSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUN
     *T, IERROR, RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB
     *,MONOEN, NRCYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE
     *_FLAG, INIT_ICMOLD,I_MUPHSP_IN
      CHARACTER*256 SPCNAM
      CHARACTER*80 the_beam_code,the_input_file,the_pegs_file,SPEC_TITLE
      logical phsp_open
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      common/CH_steps/ count_pII_steps,count_all_steps,is_ch_step
      real*8 count_pII_steps,count_all_steps
      logical is_ch_step
      COMMON/RWPHSP/ STRING_TEMP_ZLAST_OUT,  STRING_TEMP_OUT,  IHSTRY_PH
     *SP,   iaea_dummy_long,  NHSTRY_DOS,   ESHORT,  WEIGHTTMP,  WT_PHSP
     *_SHORT,  X_PHSP_SHORT,  Y_PHSP_SHORT,  Z_PHSP_SHORT,  U_PHSP_SHORT
     *,  V_PHSP_SHORT,  W_PHSP_SHORT,  ZLAST_PHSP_SHORT,  MUIDX_PHSP_SHO
     *RT,  EKMAX_PHSP_SHORT,  EKMINE_PHSP_SHORT,  NINC_PHSP_SHORT,  dosx
     *yz2beam_index,  iaea_extra_floats,  NUM_PHSP_TOT,  PHOT_PHSP_TOT,
     *iaea_result,   iaea_n_stat,  iaea_q_typ,  iaea_typ_q,  iaea_q_inde
     *x,  I_PHSP,  IERR_PHSP,  LATCHTMP,  WRITE_PHSP_COUNTER,  WRITE_PHS
     *P_SOFAR,  PHSP_RESTART,  PHSP_RECL,  PHSP_RECL_OLD,  iaea_extra_in
     *ts,  iaea_extra_int_types,iaea_extra_float_types,   iaea_i_zlast,
     * iaea_i_latch,  iaea_i_muidx,  iaea_n_extra_ints,  iaea_n_extra_fl
     *oats,  i_iaea_open_for_write,   iaea_i_zlast_out,  iaea_i_latch_ou
     *t,  iaea_i_muidx_out,  dosxyz2beam_izscore,  MODE_RW
      CHARACTER*32000 STRING_TEMP_ZLAST_OUT(3)
      CHARACTER*28000 STRING_TEMP_OUT(3)
      integer*8 IHSTRY_PHSP(3),iaea_dummy_long,NHSTRY_DOS
      REAL*4 ESHORT,WEIGHTTMP,WT_PHSP_SHORT,X_PHSP_SHORT,Y_PHSP_SHORT, Z
     *_PHSP_SHORT,U_PHSP_SHORT, V_PHSP_SHORT,W_PHSP_SHORT,ZLAST_PHSP_SHO
     *RT, MUIDX_PHSP_SHORT, EKMAX_PHSP_SHORT,EKMINE_PHSP_SHORT,NINC_PHSP
     *_SHORT,dosxyz2beam_index, iaea_extra_floats(10)
      INTEGER NUM_PHSP_TOT,PHOT_PHSP_TOT, iaea_result,iaea_n_stat,iaea_q
     *_typ(3),iaea_typ_q(3),iaea_q_index,I_PHSP, IERR_PHSP,LATCHTMP, WRI
     *TE_PHSP_COUNTER(3),WRITE_PHSP_SOFAR(3), PHSP_RESTART,PHSP_RECL,PHS
     *P_RECL_OLD,iaea_extra_ints(10), iaea_extra_int_types(10),iaea_extr
     *a_float_types(10),iaea_i_zlast, iaea_i_latch,iaea_i_muidx,iaea_n_e
     *xtra_ints,iaea_n_extra_floats, i_iaea_open_for_write,iaea_i_zlast_
     *out,iaea_i_latch_out, iaea_i_muidx_out,dosxyz2beam_izscore
      CHARACTER*5 MODE_RW
      INTEGER LATCH_TEMP_OUT,NUM_PHSP_TOFLUSH,TEMP_PHSP_COUNTER,REM_PHSP
      REAL*4 REAL_TEMP_OUT(7)
      CHARACTER*32 REC_TEMP_OUT
      common/timing_info/ etimetot, timcpu, tzero, timeb, ibatch
      real*8 etimetot, timcpu, tzero, timeb
      integer*4 ibatch
      INTEGER I,I1,I2,I3,I4,IT,  TOT_BATCH,  IRIN,  ITMAX,  RESETWATCH,
     * NPPHSPSP,   lnblnk1
      integer*8 ICASE, NHSTRY_OLD
      real CPUT0,CPUT1,CPUT2,TDUM
      real egs_tot_time, egs_etime
      real*8 BATCHT
      integer egs_open_file
      integer*4 IERR
      CHARACTER AUNIT*8, phsp_fn*256,phsp_fn_base*256
#ifdef HAVE_C_COMPILER
      real*8 part_dose, part2_dose, current_result, current_uncertainty
      integer*8 n_run,n_tot,n_last,n_left,other_num_1,other_num_2,p_per_
     *phsp_chunk
      integer*4 n_run_chunk
      logical first_time
#endif
      INTEGER NETADJ
      NETADJ=0
      ITMAX=3+LNEXC+LNINC
      RESETWATCH=0
      TOT_BATCH = 0
      tzero=egs_etime()
      tdum = egs_tot_time(1)
#ifdef HAVE_C_COMPILER
      n_tot = ncaseo
      first_time = .true.
      part_dose=0
      part2_dose=0
      write(i_log,*) '*********** jcase = ',jcase
2680  CONTINUE
      IF (( n_parallel .GT. 0 )) THEN
          call egs_pjob_control(ncase,n_run,n_left,n_tot,part_dose,part2
     *    _dose, current_result, current_uncertainty)
          IF (( n_run .EQ. 0 )) THEN
              write(i_log,'(//a,a//)') '****** No histories left in job
     *control file', '       => end simulation'
              return
          END IF
          jcase = n_run/10
          IF (( jcase .LT. 1 )) THEN
              jcase = 1
              n_run = jcase*10
          END IF
          IF (( first_time )) THEN
              IF((ISOURC.EQ.21 .OR. ISOURC.EQ.24))p_per_phsp_chunk=NNPHS
     *        P/(n_parallel*10)
              first_time = .false.
              n_last = n_run
              write(i_log,'(//a,i12,a//)') '****** Running ',n_run,' his
     *tories'
          ELSE
              write(i_log,'(//a,i12,a)') '***** Finished ',n_last,' hist
     *ories'
              write(i_log,'(/a/,20x,1pe11.4,a,0pf5.2,a/,a,i12,a//)') '
     *    current result including previous runs and other parallel jobs
     *: ', current_result, ' +/- ',current_uncertainty,' %', '      will
     * run another ',n_run,' histories'
          END IF
          IF ((ISOURC.EQ.21 .OR. ISOURC.EQ.24)) THEN
              n_run_chunk=(ncase-n_left)*n_parallel*10/ncase
              other_num_1=n_run_chunk*ncase
              other_num_2=(ncase-n_left)*n_parallel*10
              IF ((other_num_1.LT.other_num_2)) THEN
                  n_run_chunk=n_run_chunk+1
              END IF
              INPHSP_MIN=(n_run_chunk-1)*p_per_phsp_chunk+1
              IF ((n_left.EQ.0)) THEN
                  INPHSP_MAX=NNPHSP
              ELSE
                  INPHSP_MAX=INPHSP_MIN+p_per_phsp_chunk-1
              END IF
              INPHSP=INPHSP_MIN-1
              IF ((i_iaea_in.EQ.1)) THEN
                  iaea_dummy_long=INPHSP_MIN
                  call iaea_set_record(IINSRC,iaea_dummy_long,iaea_resul
     *            t)
                  IF ((iaea_result.LT.0)) THEN
                      WRITE(i_log,*)' Error going to record ',INPHSP_MIN
     *                ,' in IAEA phsp file.'
                      call exit(1)
                  END IF
              END IF
              CYCLNUM=0
              write(i_log,'(/a/,a,i12,a,i12/,a//)') '      This simulati
     *on uses a phase space source.', '      This run will use from part
     *icle',INPHSP_MIN,' to particle ', INPHSP_MAX, '      in the source
     * file.'
          END IF
      END IF
#endif
      IF ((IRESTART.EQ.3)) THEN
          WRITE(6,2690)
2690      FORMAT(/' Analyzing data from a previous run'//)
      ELSE IF((IRESTART.EQ.4)) THEN
          WRITE(6,2700)
2700      FORMAT(/' Combining and analyzing data from parallel runs'//)
      ELSE
          DO 2711 IBATCH=1,10
              TOT_BATCH = TOT_BATCH + 1
              IF ((IBATCH .EQ. 1)) THEN
                  CALL DATETIME(1)
                  WRITE(6,2720)TIMEN
2720              FORMAT(/' BATCH #',2X,'TIME-ELAPSED',2X,'TOTAL CPUTIME
     *',2X,'RATIO',2X, 'TIME OF DAY',2X,'RNG pointers'// ' ',4X,'1',10X,
     *'0.0',12X,'0.0',6X,'0.00',4X,A,'  ',$)
                  write(i_log,'(a,2i4,$)') ' ixx jxx = ',ixx,jxx
                  WRITE(6,2730)
2730              FORMAT(' ')
              ELSE
                  TIMEB = egs_tot_time(0)
                  CPUT2=egs_etime()
                  TIMCPU=CPUT2-tzero
                  ETIMETOT=ETIMETOT+TIMEB
                  CALL DATETIME(1)
                  WRITE(6,2740)IBATCH,ETIMETOT,TIMCPU,ETIMETOT/TIMCPU,TI
     *            MEN
2740              FORMAT(4X,I2,5X,F8.1,7X,F8.1,2X,F8.2,4X,A,'  ',$)
                  write(i_log,'(a,2i4,$)') ' ixx jxx = ',ixx,jxx
                  WRITE(6,2750)
2750              FORMAT(' ')
                  BATCHT=TIMCPU/FLOAT(TOT_BATCH - 1)
                  IF ((TIMCPU+1.1*BATCHT .GT. TIMMAX*3600.)) THEN
                      WRITE(IOUTLIST,210) TIMMAX,TOT_BATCH-1,IHSTRY-NCAS
     *                EO,IHSTRY
                      WRITE(i_log,210) TIMMAX,TOT_BATCH-1,IHSTRY-NCASEO,
     *                IHSTRY
                      return
                  END IF
              END IF
210           FORMAT(//' ========= '/'   NOT ENOUGH TIME TO FINISH WITHI
     *N', ' LIMIT OF',F8.2,' HOURS',I3,' BATCHES USED'/ ' ',I12,' HISTOR
     *IES RUN, ',I12,' HISTORIES ANALYZED'//)
              DO 2761 ICASE=1,JCASE
                  call beam_shower(icase)
2761          CONTINUE
2762          CONTINUE
              call beam_write_dat
              IF ((IO_OPT .EQ. 0 .OR. IO_OPT .GE. 3)) THEN
                  IF ((PHSP_OUTDIR.NE.' ')) THEN
                      phsp_fn_base=PHSP_OUTDIR(:lnblnk1(PHSP_OUTDIR)) //
     *                 '/' // output_file(:lnblnk1(output_file))
                  ELSE
                      phsp_fn_base=egs_home(:lnblnk1(egs_home))//user_co
     *                de(:lnblnk1(user_code)) // '/' // output_file(:lnb
     *                lnk1(output_file))
                  END IF
                  IF (( i_parallel .GT. 0 )) THEN
                      phsp_fn_base=phsp_fn_base(:lnblnk1(phsp_fn_base))/
     *                / '_w'
                      call egs_itostring(phsp_fn_base,i_parallel,.false.
     *                )
                  END IF
                  IF ((IO_OPT.EQ.4)) THEN
                      DO 2771 I1=1,NSC_PLANES
                          NINCPHSP=NINCSRC*(IHSTRY+(NRCYCL+1)*(NPASS_ph_
     *                    sp+NFAT_ph_sp))/NNPHSP
                          iaea_dummy_long=NINCPHSP
                          call iaea_set_total_original_particles(IOUTFLU
     *                    (I1),iaea_dummy_long)
                          call iaea_update_header(IOUTFLU(I1),iaea_resul
     *                    t)
                          IF ((iaea_result.LT.0)) THEN
                              WRITE(i_log,*)' Error writing IAEA phase s
     *pace header for ID ',IOUTFLU(I1)
                              call exit(1)
                          END IF
2771                  CONTINUE
2772                  CONTINUE
                  ELSE
                      IF ((MODE_RW.EQ.'MODE0' .OR. MODE_RW.EQ.'MODE2'))
     *                THEN
                          NINCPHSP=NINCSRC*(IHSTRY+(NRCYCL+1)*(NPASS_ph_
     *                    sp+NFAT_ph_sp))/NNPHSP
                          DO 2781 I1=1,NSC_PLANES
                              NPPHSPSP=NPPHSP(I1)
                              IF ((IOUTFLU(I1)-43 .GT. 9)) THEN
                                  WRITE(AUNIT,'(I2)') IOUTFLU(I1)-43
                              ELSE
                                  WRITE(AUNIT,'(I1)') IOUTFLU(I1)-43
                              END IF
                              phsp_fn=phsp_fn_base(:lnblnk1(phsp_fn_base
     *                        ))// '.egsphsp'//AUNIT
                              TEMP_PHSP_COUNTER=0
                              NUM_PHSP_TOFLUSH=WRITE_PHSP_COUNTER(I1)
                              IF ((NUM_PHSP_TOFLUSH.GT.0)) THEN
                                  IF ((WRITE_PHSP_SOFAR(I1).EQ.0)) THEN
                                      WRITE_PHSP_COUNTER(I1)=WRITE_PHSP_
     *                                COUNTER(I1)+1
                                      NUM_PHSP_TOFLUSH=NUM_PHSP_TOFLUSH+
     *                                1
                                  END IF
2791                              CONTINUE
                                      TEMP_PHSP_COUNTER=NUM_PHSP_TOFLUSH
     *                                +1
2801                                  CONTINUE
                                          TEMP_PHSP_COUNTER=TEMP_PHSP_CO
     *                                    UNTER-1
                                          REM_PHSP=MOD(WRITE_PHSP_SOFAR(
     *                                    I1),TEMP_PHSP_COUNTER)
                                          IF(((REM_PHSP.EQ.0)))GO TO2802
                                      GO TO 2801
2802                                  CONTINUE
                                      CLOSE(IOUTFLU(I1))
                                      IF ((IZLAST.NE.0)) THEN
                                          PHSP_RECL=4*8*TEMP_PHSP_COUNTE
     *                                    R
                                          OPEN(UNIT=IOUTFLU(I1),FILE=phs
     *                                    p_fn(:lnblnk1(phsp_fn)),RECL=P
     *                                    HSP_RECL, ACCESS='DIRECT',FORM
     *                                    ='UNFORMATTED',STATUS='UNKNOWN
     *')
                                          WRITE(IOUTFLU(I1),REC=WRITE_PH
     *                                    SP_SOFAR(I1)/TEMP_PHSP_COUNTER
     *                                    +1) STRING_TEMP_ZLAST_OUT(I1)
     *                                    (32*(WRITE_PHSP_COUNTER(I1)-NU
     *                                    M_PHSP_TOFLUSH)+1: 32*(WRITE_P
     *                                    HSP_COUNTER(I1)-NUM_PHSP_TOFLU
     *                                    SH+TEMP_PHSP_COUNTER))
                                      ELSE
                                          PHSP_RECL=4*7*TEMP_PHSP_COUNTE
     *                                    R
                                          OPEN(UNIT=IOUTFLU(I1),FILE=phs
     *                                    p_fn(:lnblnk1(phsp_fn)),RECL=P
     *                                    HSP_RECL, ACCESS='DIRECT',FORM
     *                                    ='UNFORMATTED',STATUS='UNKNOWN
     *')
                                          WRITE(IOUTFLU(I1),REC=WRITE_PH
     *                                    SP_SOFAR(I1)/TEMP_PHSP_COUNTER
     *                                    +1) STRING_TEMP_OUT(I1) (28*(W
     *                                    RITE_PHSP_COUNTER(I1)-NUM_PHSP
     *                                    _TOFLUSH)+1: 28*(WRITE_PHSP_CO
     *                                    UNTER(I1)-NUM_PHSP_TOFLUSH+TEM
     *                                    P_PHSP_COUNTER))
                                      END IF
                                      WRITE_PHSP_SOFAR(I1)=WRITE_PHSP_SO
     *                                FAR(I1)+TEMP_PHSP_COUNTER
                                      NUM_PHSP_TOFLUSH=NUM_PHSP_TOFLUSH-
     *                                TEMP_PHSP_COUNTER
                                      IF(((NUM_PHSP_TOFLUSH.EQ.0)))GO TO
     *                                2792
                                  GO TO 2791
2792                              CONTINUE
                                  WRITE_PHSP_COUNTER(I1)=0
                                  WRITE_PHSP_SOFAR(I1)=0
                              END IF
                              IF ((NPPHSPSP.EQ.NPHOTPHSP(I1))) THEN
                                  CLOSE(IOUTFLU(I1))
                                  IF ((IZLAST.NE.0)) THEN
                                      PHSP_RECL=4*8
                                  ELSE
                                      PHSP_RECL=4*7
                                  END IF
                                  OPEN(UNIT=IOUTFLU(I1),FILE=phsp_fn(:ln
     *                            blnk1(phsp_fn)),RECL=PHSP_RECL,ACCESS=
     *                            'DIRECT', FORM='UNFORMATTED',STATUS='U
     *NKNOWN')
                                  IF ((NPPHSPSP.GT.2147483647)) THEN
                                      write(*,*)' Warning while writing
     *phase space file:'
                                      write(*,*)' No. of particles > 2^3
     *1-1.'
                                      write(*,*)' Total no. of particles
     * (and photons) written'
                                      write(*,*)' to header may be nonse
     *nse.'
                                  END IF
                                  NUM_PHSP_TOT=NPPHSPSP
                                  PHOT_PHSP_TOT=NPHOTPHSP(I1)
                                  EKMAX_PHSP_SHORT=EKMAXPHSP(I1)
                                  EKMINE_PHSP_SHORT=0.0
                                  NINC_PHSP_SHORT=NINCPHSP
                                  WRITE(IOUTFLU(I1),REC=1)MODE_RW,NUM_PH
     *                            SP_TOT,PHOT_PHSP_TOT,EKMAX_PHSP_SHORT,
     *                             EKMINE_PHSP_SHORT,NINC_PHSP_SHORT
                                  CLOSE(IOUTFLU(I1))
                                  IF ((IZLAST.NE.0)) THEN
                                      PHSP_RECL=4*8000
                                  ELSE
                                      PHSP_RECL=4*7000
                                  END IF
                                  OPEN(UNIT=IOUTFLU(I1),FILE=phsp_fn(:ln
     *                            blnk1(phsp_fn)),RECL=PHSP_RECL,ACCESS=
     *                            'DIRECT', FORM='UNFORMATTED',STATUS='U
     *NKNOWN')
                              ELSE
                                  CLOSE(IOUTFLU(I1))
                                  IF ((IZLAST.NE.0)) THEN
                                      PHSP_RECL=4*8
                                  ELSE
                                      PHSP_RECL=4*7
                                  END IF
                                  OPEN(UNIT=IOUTFLU(I1),FILE=phsp_fn(:ln
     *                            blnk1(phsp_fn)),RECL=PHSP_RECL,ACCESS=
     *                            'DIRECT', FORM='UNFORMATTED',STATUS='U
     *NKNOWN')
                                  IF ((NPPHSPSP.GT.2147483647)) THEN
                                      write(*,*)' Warning while writing
     *phase space file:'
                                      write(*,*)' No. of particles > 2^3
     *1-1.'
                                      write(*,*)' Total no. of particles
     * (and photons) written'
                                      write(*,*)' to header may be nonse
     *nse.'
                                  END IF
                                  NUM_PHSP_TOT=NPPHSPSP
                                  PHOT_PHSP_TOT=NPHOTPHSP(I1)
                                  EKMAX_PHSP_SHORT=EKMAXPHSP(I1)
                                  EKMINE_PHSP_SHORT=EKMINPHSPE(I1)
                                  NINC_PHSP_SHORT=NINCPHSP
                                  WRITE(IOUTFLU(I1),REC=1)MODE_RW,NUM_PH
     *                            SP_TOT,PHOT_PHSP_TOT,EKMAX_PHSP_SHORT,
     *                             EKMINE_PHSP_SHORT,NINC_PHSP_SHORT
                                  CLOSE(IOUTFLU(I1))
                                  IF ((IZLAST.NE.0)) THEN
                                      PHSP_RECL=4*8000
                                  ELSE
                                      PHSP_RECL=4*7000
                                  END IF
                                  OPEN(UNIT=IOUTFLU(I1),FILE=phsp_fn(:ln
     *                            blnk1(phsp_fn)),RECL=PHSP_RECL,ACCESS=
     *                            'DIRECT', FORM='UNFORMATTED',STATUS='U
     *NKNOWN')
                              END IF
2781                      CONTINUE
2782                      CONTINUE
                      END IF
                  END IF
              END IF
2711      CONTINUE
2712      CONTINUE
      END IF
#ifdef HAVE_C_COMPILER
      IF (( n_parallel .GT. 0 )) THEN
          goto 2680
      END IF
#endif
      return
      end
      subroutine beam_write_dat
      implicit none
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/SOURCE/ COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,
     *COSTHETA,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SI
     *GN2,RIN1_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA
     *24, NNPHSP,NPHOTSRC,WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEA
     *M,YBEAM,ZBEAM,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL
     *2,PROBFC,PROBSD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z
     *_SOURCE,E_ph_sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT1
     *00,XSCAN_UNIT,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YIN
     *DEL, EKMAXSRC, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9, Y_SRC9, PR
     *OB_SRC9, ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN,RDISTF,RPDF,RCDF, F
     *NORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COSRNG,SINRNG,WEIGHTOLD,UINOL
     *D,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RSRC_DBS,SSDSRC_DBS,ZSRC_DBS
     *,sigma_src19,DIST24,ALPHA24,BETA24,RBEAMY, xo_src19, yo_src19, NRD
     *IST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p, NPASS_ph_s
     *p, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRATIO_YXF, OL
     *DSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUNT, IERROR,
     *RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB,MONOEN, NR
     *CYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE_FLAG, INIT
     *_ICMOLD,I_MUPHSP_IN,SPCNAM, the_beam_code,the_input_file,the_pegs_
     *file,SPEC_TITLE,phsp_open
      REAL*8 COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,COSTHETA
     *,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SIGN2,RIN1
     *_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA24
      integer*8 NNPHSP, NPHOTSRC
      real*8 WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEAM,YBEAM,ZBEAM
     *,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL2,PROBFC,PROB
     *SD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z_SOURCE,E_ph_
     *sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT100,XSCAN_UNIT
     *,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YINDEL, EKMAXSRC
     *, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9(10), Y_SRC9(10), PROB_SR
     *C9(10), ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN(1000,2),RDISTF(1000)
     *, RPDF(1000),RCDF(1000), FNORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COS
     *RNG,SINRNG,WEIGHTOLD,UINOLD,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RS
     *RC_DBS,SSDSRC_DBS,ZSRC_DBS,sigma_src19,DIST24,ALPHA24,BETA24,RBEAM
     *Y, xo_src19, yo_src19
      INTEGER NRDIST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p,
     * NPASS_ph_sp, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRA
     *TIO_YXF, OLDSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUN
     *T, IERROR, RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB
     *,MONOEN, NRCYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE
     *_FLAG, INIT_ICMOLD,I_MUPHSP_IN
      CHARACTER*256 SPCNAM
      CHARACTER*80 the_beam_code,the_input_file,the_pegs_file,SPEC_TITLE
      logical phsp_open
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common/CH_steps/ count_pII_steps,count_all_steps,is_ch_step
      real*8 count_pII_steps,count_all_steps
      logical is_ch_step
      common/timing_info/ etimetot, timcpu, tzero, timeb, ibatch
      real*8 etimetot, timcpu, tzero, timeb
      integer*4 ibatch
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      INTEGER IT,ITMAX,I1,I2,I3,I4
      real CPUT0,CPUT1,CPUT2,TDUM
      real egs_tot_time, egs_etime
      ITMAX=3+LNEXC+LNINC
      IF ((IDAT .EQ. 0)) THEN
          SCSTP=SCSTP+SCSTP_TMP
          SCSTP2=SCSTP2+SCSTP_TMP*SCSTP_TMP
          SCSTP_TMP=0
          SCDSTP=SCDSTP+SCDSTP_TMP
          SCDSTP2=SCDSTP2+SCDSTP_TMP*SCDSTP_TMP
          SCDSTP_TMP=0
          DO 2811 ID=1,NDOSE_ZONE
              DO 2821 IT=1,ITMAX
                  SCDOSE(ID,IT)=SCDOSE(ID,IT)+SCDOSE_TMP(ID,IT)
                  SCDOSE2(ID,IT)=SCDOSE2(ID,IT)+SCDOSE_TMP(ID,IT)*SCDOSE
     *            _TMP(ID,IT)
                  SCDOSE_TMP(ID,IT)=0
2821          CONTINUE
2822          CONTINUE
2811      CONTINUE
2812      CONTINUE
          DO 2831 I1=1,3
              DO 2841 I2=1,NSC_PLANES
                  DO 2851 I3=1,NSC_ZONES(I2)+1
                      SCFLU_COV(I1,I2,I3,1)=SCFLU_COV(I1,I2,I3,1)+ SCFLU
     *                _TMP(I1,I2,I3,3)* SCFLU_TMP(I1,I2,I3,2)
                      SCFLU_COV(I1,I2,I3,2)=SCFLU_COV(I1,I2,I3,2)+ SCFLU
     *                _TMP(I1,I2,I3,4)* SCFLU_TMP(I1,I2,I3,1)
                      SCFLU_COV(I1,I2,I3,3)=SCFLU_COV(I1,I2,I3,3)+ SCFLU
     *                _TMP(I1,I2,I3,7)* SCFLU_TMP(I1,I2,I3,6)
                      SCFLU_COV(I1,I2,I3,4)=SCFLU_COV(I1,I2,I3,4)+ SCFLU
     *                _TMP(I1,I2,I3,8)* SCFLU_TMP(I1,I2,I3,5)
                      DO 2861 I4=1,8
                          SCFLU(I1,I2,I3,I4)=SCFLU(I1,I2,I3,I4)+ SCFLU_T
     *                    MP(I1,I2,I3,I4)
                          SCFLU2(I1,I2,I3,I4)=SCFLU2(I1,I2,I3,I4)+ SCFLU
     *                    _TMP(I1,I2,I3,I4)*SCFLU_TMP(I1,I2,I3,I4)
                          SCFLU_TMP(I1,I2,I3,I4)=0
2861                  CONTINUE
2862                  CONTINUE
2851              CONTINUE
2852              CONTINUE
2841          CONTINUE
2842          CONTINUE
2831      CONTINUE
2832      CONTINUE
          rewind(data_unit)
          WRITE(data_unit,*) SCSTP,SCSTP2,SCDSTP,SCDSTP2,PIISTP+count_pI
     *    I_steps
          WRITE(data_unit,*) ((SCDOSE(ID,IT),SCDOSE2(ID,IT),IT=1,ITMAX),
     *    ID=1,NDOSE_ZONE)
          WRITE(data_unit,*) ((((SCFLU(I1,I2,I3,I4),SCFLU2(I1,I2,I3,I4),
     *    I1=1,3),I3=1,NSC_ZONES(I2)+1),I2=1,NSC_PLANES),I4=1,8)
          WRITE(data_unit,*) ((((SCFLU_COV(I1,I2,I3,I4),I1=1,3),I3=1,NSC
     *    _ZONES(I2)+1),I2=1,NSC_PLANES),I4=1,4)
          WRITE(data_unit,*) ((((SCFLU_NUM(I1,I2,I3,I4),I1=1,3),I3=1,NSC
     *    _ZONES(I2)+1),I2=1,NSC_PLANES),I4=1,2)
          CPUT2=egs_etime()
          TIMCPU=CPUT2-tzero
          write(data_unit,*) urndm,crndm,cdrndm, cmrndm, ixx, jxx, rng_s
     *    eed, rng_array
          WRITE(data_unit,*) IHSTRY,NHSTRY,TIMCPU,(NPPHSP(I1),I1=1,NSC_P
     *    LANES), NPASS_ph_sp,NFAT_ph_sp
          WRITE(6,2870)IHSTRY,NPPHSP(1)
2870      FORMAT('     # of histories run:',I10, '      # of particles i
     *n ph-sp file:',I10/)
          call flush(data_unit)
      END IF
      return
      end
      subroutine beam_finish(ientry)
      implicit none
      integer*4 ientry,egs_open_file
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/SOURCE/ COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,
     *COSTHETA,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SI
     *GN2,RIN1_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA
     *24, NNPHSP,NPHOTSRC,WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEA
     *M,YBEAM,ZBEAM,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL
     *2,PROBFC,PROBSD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z
     *_SOURCE,E_ph_sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT1
     *00,XSCAN_UNIT,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YIN
     *DEL, EKMAXSRC, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9, Y_SRC9, PR
     *OB_SRC9, ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN,RDISTF,RPDF,RCDF, F
     *NORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COSRNG,SINRNG,WEIGHTOLD,UINOL
     *D,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RSRC_DBS,SSDSRC_DBS,ZSRC_DBS
     *,sigma_src19,DIST24,ALPHA24,BETA24,RBEAMY, xo_src19, yo_src19, NRD
     *IST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p, NPASS_ph_s
     *p, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRATIO_YXF, OL
     *DSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUNT, IERROR,
     *RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB,MONOEN, NR
     *CYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE_FLAG, INIT
     *_ICMOLD,I_MUPHSP_IN,SPCNAM, the_beam_code,the_input_file,the_pegs_
     *file,SPEC_TITLE,phsp_open
      REAL*8 COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,COSTHETA
     *,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SIGN2,RIN1
     *_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA24
      integer*8 NNPHSP, NPHOTSRC
      real*8 WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEAM,YBEAM,ZBEAM
     *,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL2,PROBFC,PROB
     *SD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z_SOURCE,E_ph_
     *sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT100,XSCAN_UNIT
     *,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YINDEL, EKMAXSRC
     *, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9(10), Y_SRC9(10), PROB_SR
     *C9(10), ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN(1000,2),RDISTF(1000)
     *, RPDF(1000),RCDF(1000), FNORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COS
     *RNG,SINRNG,WEIGHTOLD,UINOLD,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RS
     *RC_DBS,SSDSRC_DBS,ZSRC_DBS,sigma_src19,DIST24,ALPHA24,BETA24,RBEAM
     *Y, xo_src19, yo_src19
      INTEGER NRDIST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p,
     * NPASS_ph_sp, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRA
     *TIO_YXF, OLDSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUN
     *T, IERROR, RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB
     *,MONOEN, NRCYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE
     *_FLAG, INIT_ICMOLD,I_MUPHSP_IN
      CHARACTER*256 SPCNAM
      CHARACTER*80 the_beam_code,the_input_file,the_pegs_file,SPEC_TITLE
      logical phsp_open
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      common/timing_info/ etimetot, timcpu, tzero, timeb, ibatch
      real*8 etimetot, timcpu, tzero, timeb
      integer*4 ibatch
      COMMON/RWPHSP/ STRING_TEMP_ZLAST_OUT,  STRING_TEMP_OUT,  IHSTRY_PH
     *SP,   iaea_dummy_long,  NHSTRY_DOS,   ESHORT,  WEIGHTTMP,  WT_PHSP
     *_SHORT,  X_PHSP_SHORT,  Y_PHSP_SHORT,  Z_PHSP_SHORT,  U_PHSP_SHORT
     *,  V_PHSP_SHORT,  W_PHSP_SHORT,  ZLAST_PHSP_SHORT,  MUIDX_PHSP_SHO
     *RT,  EKMAX_PHSP_SHORT,  EKMINE_PHSP_SHORT,  NINC_PHSP_SHORT,  dosx
     *yz2beam_index,  iaea_extra_floats,  NUM_PHSP_TOT,  PHOT_PHSP_TOT,
     *iaea_result,   iaea_n_stat,  iaea_q_typ,  iaea_typ_q,  iaea_q_inde
     *x,  I_PHSP,  IERR_PHSP,  LATCHTMP,  WRITE_PHSP_COUNTER,  WRITE_PHS
     *P_SOFAR,  PHSP_RESTART,  PHSP_RECL,  PHSP_RECL_OLD,  iaea_extra_in
     *ts,  iaea_extra_int_types,iaea_extra_float_types,   iaea_i_zlast,
     * iaea_i_latch,  iaea_i_muidx,  iaea_n_extra_ints,  iaea_n_extra_fl
     *oats,  i_iaea_open_for_write,   iaea_i_zlast_out,  iaea_i_latch_ou
     *t,  iaea_i_muidx_out,  dosxyz2beam_izscore,  MODE_RW
      CHARACTER*32000 STRING_TEMP_ZLAST_OUT(3)
      CHARACTER*28000 STRING_TEMP_OUT(3)
      integer*8 IHSTRY_PHSP(3),iaea_dummy_long,NHSTRY_DOS
      REAL*4 ESHORT,WEIGHTTMP,WT_PHSP_SHORT,X_PHSP_SHORT,Y_PHSP_SHORT, Z
     *_PHSP_SHORT,U_PHSP_SHORT, V_PHSP_SHORT,W_PHSP_SHORT,ZLAST_PHSP_SHO
     *RT, MUIDX_PHSP_SHORT, EKMAX_PHSP_SHORT,EKMINE_PHSP_SHORT,NINC_PHSP
     *_SHORT,dosxyz2beam_index, iaea_extra_floats(10)
      INTEGER NUM_PHSP_TOT,PHOT_PHSP_TOT, iaea_result,iaea_n_stat,iaea_q
     *_typ(3),iaea_typ_q(3),iaea_q_index,I_PHSP, IERR_PHSP,LATCHTMP, WRI
     *TE_PHSP_COUNTER(3),WRITE_PHSP_SOFAR(3), PHSP_RESTART,PHSP_RECL,PHS
     *P_RECL_OLD,iaea_extra_ints(10), iaea_extra_int_types(10),iaea_extr
     *a_float_types(10),iaea_i_zlast, iaea_i_latch,iaea_i_muidx,iaea_n_e
     *xtra_ints,iaea_n_extra_floats, i_iaea_open_for_write,iaea_i_zlast_
     *out,iaea_i_latch_out, iaea_i_muidx_out,dosxyz2beam_izscore
      CHARACTER*5 MODE_RW
      INTEGER LATCH_TEMP_OUT,NUM_PHSP_TOFLUSH,TEMP_PHSP_COUNTER,REM_PHSP
      REAL*4 REAL_TEMP_OUT(7)
      CHARACTER*32 REC_TEMP_OUT
      real*8 SCORE_NORM_NUM,  SCORE_NORM_FLUENCE,  FMASS
      REAL*8 SCORE_TEMP
      real*8 TEMP1,WEIGHT,RATIO
      integer*4 I,I1,I2,I3,I4,IT,ITMAX,IERR,NUMIND,COVIND
      real CPUT0,CPUT1,CPUT2,TDUM
      real egs_tot_time, egs_etime
      external combine_results
#ifdef HAVE_C_COMPILER
      integer n_job
#endif
      is_finished = .false.
      ITMAX=3+LNEXC+LNINC
      IF (( ientry .NE. 0 .AND. ientry .NE. 1)) THEN
          goto 2880
      END IF
      IF ((ISOURC.EQ.21 .OR. ISOURC.EQ.24)) THEN
          IF ((OUTCNT.GT.0)) THEN
              WRITE(IOUTLIST,249) OUTCNT
          END IF
249       FORMAT(///' **WARNING** USED ALL PARTICLES FROM SOURCE FILE ',
     *I5, ' TIMES.')
      END IF
2890  IF ((IRESTART.NE.4 .AND. .NOT.is_finished)) THEN
          WRITE(IOUTLIST,250)
          write(IOUTLIST,'(a,2i4,$)') ' ixx jxx = ',ixx,jxx
          WRITE(i_log,250)
          write(i_log,'(a,2i4,$)') ' ixx jxx = ',ixx,jxx
      END IF
      TIMEB = egs_tot_time(0)
      CPUT2=egs_etime()
      TIMCPU=CPUT2-tzero
      ETIMETOT=ETIMETOT+TIMEB
      RATIO=ETIMETOT/TIMCPU
      IF ((IRESTART .NE. 3 .AND. IRESTART .NE.4 .AND. .NOT.is_finished))
     * THEN
          WRITE(IOUTLIST,260)ETIMETOT,TIMCPU,TIMCPU/3600.,RATIO
          WRITE(i_log,260)ETIMETOT,TIMCPU,TIMCPU/3600.,RATIO
          IF ((ientry.EQ.1)) THEN
              WRITE(IOUTLIST,280)TIMCPU/dble(IHSTRY), 3600.*dble(IHSTRY)
     *        /TIMCPU
              WRITE(i_log,280)TIMCPU/dble(IHSTRY), 3600.*dble(IHSTRY)/TI
     *        MCPU
          ELSE
              WRITE(IOUTLIST,280)TIMCPU/dble((IBATCH-1)*JCASE), 3600.*db
     *        le((IBATCH-1)*JCASE)/TIMCPU
              WRITE(i_log,280)TIMCPU/dble((IBATCH-1)*JCASE), 3600.*dble(
     *        (IBATCH-1)*JCASE)/TIMCPU
          END IF
      END IF
      IF ((IRESTART .EQ. 1)) THEN
          WRITE(IOUTLIST,270) TIMCPU+TMCPUO,(TIMCPU+TMCPUO)/3600.
          WRITE(i_log,270) TIMCPU+TMCPUO,(TIMCPU+TMCPUO)/3600.
          WRITE(IOUTLIST,280)(TIMCPU+TMCPUO)/dble(IHSTRY), 3600.*dble(IH
     *    STRY)/(TIMCPU+TMCPUO)
          WRITE(i_log,280)(TIMCPU+TMCPUO)/dble(IHSTRY), 3600.*dble(IHSTR
     *    Y)/(TIMCPU+TMCPUO)
      ELSE IF((IRESTART .EQ. 3)) THEN
          WRITE(IOUTLIST,275) TMCPUO,TMCPUO/3600.
          WRITE(i_log,275) TMCPUO,TMCPUO/3600.
          WRITE(IOUTLIST,280)TMCPUO/dble(IHSTRY), 3600.*dble(IHSTRY)/TMC
     *    PUO
          WRITE(i_log,280)TMCPUO/dble(IHSTRY), 3600.*dble(IHSTRY)/TMCPUO
      ELSE IF((IRESTART .EQ. 4 .OR. is_finished)) THEN
          WRITE(IOUTLIST,285) DATCOUNT,TMCPUO,TMCPUO/3600.,TMCPUO/FLOAT(
     *    DATCOUNT)
          WRITE(i_log,285) DATCOUNT,TMCPUO,TMCPUO/3600.,TMCPUO/FLOAT(DAT
     *    COUNT)
          WRITE(IOUTLIST,290)TMCPUO/dble(IHSTRY), 3600.*dble(IHSTRY)/TMC
     *    PUO
          WRITE(i_log,290)TMCPUO/dble(IHSTRY), 3600.*dble(IHSTRY)/TMCPUO
      END IF
250   FORMAT(/' *** FINAL RANDOM NUMBER POINTERS: ',$)
260   FORMAT(//' FOR THIS RUN:'/ ' ------------ '/ ' ELAPSED& CPU TIMEs,
     * RATIO =',2F10.1,'s (=',F7.2,'HR)',F7.2)
270   FORMAT(/' FOR THIS+PREVIOUS RUN:'/ ' --------------------- '/ ' TO
     *TAL CPUTIME =',F10.1,'s (=',F8.2,' HR)')
275   FORMAT(/' FOR OLD RUN:'/ ' ----------- '/ ' TOTAL CPUTIME =',F10.1
     *,'s (=',F8.2,' HR)')
280   FORMAT( ' CPUTIME per history =',F10.5,' sec. Number of historiesp
     *er', ' hour =',F12.0/'   On ','linux64',' ')
285   FORMAT(/' FOR PARALLEL RUNS:'/ ' ----------------- '/ ' On ',I5,'m
     *achines '/ ' TOTAL CPUTIME =',F10.1,'s (=',F8.2,' HR), CPUTIME/mac
     *hine =',F10.1)
290   FORMAT( ' CPUTIME per history =',F10.5,' sec. '/ ' Number of histo
     *ries per hour on one machine =',F12.0/ '   On ','linux64',' ')
2900  CONTINUE
      IF ((OUTCNT.GT.0)) THEN
          WRITE(6,2910)
2910      FORMAT(//' ***WARNING***'/ ' The phsp source was restarted atl
     *east once.  This may lead'/ ' to an underestimate of uncertainty, 
     *especially if restarted'/ ' many times.  If restarted many times, 
     *try re-running with'/ ' NRCYCL recalculated as described at top of
     * beamnrc.mortran'//)
      END IF
      IF (((ISOURC.EQ.3 .AND. i_dsb.EQ.1).OR.ISOURC.EQ.23)) THEN
          SCORE_NORM_NUM=NHSTRY
      ELSE
          SCORE_NORM_NUM = NINCSRC*dble(IHSTRY+(NRCYCL+1)*(NPASS_ph_sp+N
     *    FAT_ph_sp))/ FLOAT(NNPHSP)
      END IF
      IF ((IDAT.EQ.1)) THEN
          SCSTP= SCSTP+SCSTP_TMP
          SCSTP2= SCSTP2 +SCSTP_TMP*SCSTP_TMP
      END IF
      SCORE_TEMP=SCSTP/SCORE_NORM_NUM
      SCSTP2=SCSTP2/SCORE_NORM_NUM
      SCSTP2=(SCSTP2-SCORE_TEMP*SCORE_TEMP)/(SCORE_NORM_NUM-1)
      IF((SCSTP2.GE.0.))SCSTP2= SQRT(SCSTP2)
      IF ((SCORE_TEMP.NE.0.)) THEN
          SCSTP2= MIN(SCSTP2/SCORE_TEMP*100.D0,99.9D00)
      ELSE
          SCSTP2=99.9D00
      END IF
      IF ((IDAT.EQ.1)) THEN
          SCDSTP= SCDSTP+SCDSTP_TMP
          SCDSTP2= SCDSTP2 +SCDSTP_TMP*SCDSTP_TMP
      END IF
      SCORE_TEMP=SCDSTP/SCORE_NORM_NUM
      SCDSTP2=SCDSTP2/SCORE_NORM_NUM
      SCDSTP2=(SCDSTP2-SCORE_TEMP*SCORE_TEMP)/(SCORE_NORM_NUM-1)
      IF((SCDSTP2.GE.0.))SCDSTP2= SQRT(SCDSTP2)
      IF ((SCORE_TEMP.NE.0.)) THEN
          SCDSTP2= MIN(SCDSTP2/SCORE_TEMP*100.D0,99.9D00)
      ELSE
          SCDSTP2=99.9D00
      END IF
      DO 2921 I1=1,ITMAX
          DO 2931 I2=1,NDOSE_ZONE
              IF ((IDAT.EQ.1)) THEN
                  SCDOSE(I2,I1)= SCDOSE(I2,I1)+SCDOSE_TMP(I2,I1)
                  SCDOSE2(I2,I1)= SCDOSE2(I2,I1) +SCDOSE_TMP(I2,I1)*SCDO
     *            SE_TMP(I2,I1)
              END IF
              SCORE_TEMP=SCDOSE(I2,I1)/SCORE_NORM_NUM
              SCDOSE2(I2,I1)=SCDOSE2(I2,I1)/SCORE_NORM_NUM
              SCDOSE2(I2,I1)=(SCDOSE2(I2,I1)-SCORE_TEMP*SCORE_TEMP)/(SCO
     *        RE_NORM_NUM-1)
              IF((SCDOSE2(I2,I1).GE.0.))SCDOSE2(I2,I1)= SQRT(SCDOSE2(I2,
     *        I1))
              IF ((SCORE_TEMP.NE.0.)) THEN
                  SCDOSE2(I2,I1)= MIN(SCDOSE2(I2,I1)/SCORE_TEMP*100.D0,9
     *            9.9D00)
              ELSE
                  SCDOSE2(I2,I1)=99.9D00
              END IF
2931      CONTINUE
2932      CONTINUE
2921  CONTINUE
2922  CONTINUE
      DO 2941 IT=1,ITMAX
          DO 2951 ID=1,NDOSE_ZONE
              IF ((SCDOSE(ID,IT) .NE. 0.0)) THEN
                  FMASS=AMASS(ID)
                  IF((FMASS .EQ. 0.0))FMASS=1.0
                  SCDOSE(ID,IT)=SCDOSE(ID,IT)*1.602E-10/ (FMASS*SCORE_NO
     *            RM_NUM)
              END IF
2951      CONTINUE
2952      CONTINUE
2941  CONTINUE
2942  CONTINUE
      DO 2961 I1=1,3
          DO 2971 I2=1,NSC_PLANES
              FLUENCERR(I2)=0
              IF ((MZONE_TYPE(I2) .EQ. 0)) THEN
                  TEMP1=PI
              ELSE IF((MZONE_TYPE(I2) .EQ. 1)) THEN
                  TEMP1=4.0
              ELSE IF((MZONE_TYPE(I2) .EQ. 2)) THEN
                  TEMP1=1.0
              ELSE
                  WRITE(6,2980)
2980              FORMAT(///' SCORING NORMALIZATION NOT WELL DEFINED****
     *****')
                  TEMP1 = 1.0
              END IF
              DO 2991 I3=1,NSC_ZONES(I2)+1
                  IF ((MZONE_TYPE(I2).LT.2)) THEN
                      IF ((I3.EQ.1)) THEN
                          SCORE_NORM_FLUENCE = TEMP1*RSCORE_ZONE2(I2,I3)
     *                    *SCORE_NORM_NUM
                      ELSE IF((I3.EQ.NSC_ZONES(I2)+1)) THEN
                          IF (((IPLANE_to_CM(I2).EQ.MAX_CMs) .OR. (RMAX_
     *                    CM_FLAG(IPLANE_to_CM(I2)).EQ.RMAX_CM_FLAG(IPLA
     *                    NE_to_CM(I2)+1) .AND. RMAX_CM(IPLANE_to_CM(I2)
     *                    ).GE.RMAX_CM(IPLANE_to_CM(I2)+1)) .OR. (RMAX_C
     *                    M_FLAG(IPLANE_to_CM(I2)).EQ.1 .AND. RMAX_CM(IP
     *                    LANE_to_CM(I2)).GE.SQRT(2.)*RMAX_CM(IPLANE_to_
     *                    CM(I2)+1)).OR. (RMAX_CM_FLAG(IPLANE_to_CM(I2))
     *                    .EQ.2 .AND. RMAX_CM(IPLANE_to_CM(I2)).GE.RMAX_
     *                    CM(IPLANE_to_CM(I2)+1)))) THEN
                              IF ((RMAX_CM_FLAG(IPLANE_to_CM(I2)).EQ.1))
     *                         THEN
                                  SCORE_NORM_FLUENCE=(PI*RMAX_CM(IPLANE_
     *                            to_CM(I2))**2 -TEMP1*RSCORE_ZONE2(I2,N
     *                            SC_ZONES(I2)))* SCORE_NORM_NUM
                              ELSE IF((RMAX_CM_FLAG(IPLANE_to_CM(I2)).EQ
     *                        .2)) THEN
                                  SCORE_NORM_FLUENCE=(4*RMAX_CM(IPLANE_t
     *                            o_CM(I2))**2 -TEMP1*RSCORE_ZONE2(I2,NS
     *                            C_ZONES(I2)))* SCORE_NORM_NUM
                              END IF
                          ELSE
                              SCORE_NORM_FLUENCE=SCORE_NORM_NUM
                              FLUENCERR(I2)=1
                          END IF
                      ELSE
                          SCORE_NORM_FLUENCE = TEMP1*(RSCORE_ZONE2(I2,I3
     *                    ) - RSCORE_ZONE2(I2,I3-1))*SCORE_NORM_NUM
                      END IF
                  ELSE
                      IF ((I3.EQ.NSC_ZONES(I2)+1)) THEN
                          SCORE_NORM_FLUENCE=(4*RMAX_CM(IPLANE_to_CM(I2)
     *                    )**2 -(RSCORE_ZONE(I2,NX_ZONE(I2)+1)-RSCORE_ZO
     *                    NE(I2,1))* (RSCORE_ZONE2(I2,NY_ZONE(I2)+1)-RSC
     *                    ORE_ZONE2(I2,1)))* SCORE_NORM_NUM
                      ELSE
                          SCORE_NORM_FLUENCE=(RSCORE_ZONE(I2,2)-RSCORE_Z
     *                    ONE(I2,1))* (RSCORE_ZONE2(I2,2)-RSCORE_ZONE2(I
     *                    2,1))* SCORE_NORM_NUM
                      END IF
                  END IF
                  IF ((SCORE_NORM_FLUENCE.NE.0.)) THEN
                      DO 3001 I4=1,8
                          IF ((IDAT.EQ.1)) THEN
                              SCFLU(I1,I2,I3,I4)=SCFLU(I1,I2,I3,I4)+ SCF
     *                        LU_TMP(I1,I2,I3,I4)
                              SCFLU2(I1,I2,I3,I4)=SCFLU2(I1,I2,I3,I4)+ S
     *                        CFLU_TMP(I1,I2,I3,I4)**2
                              IF ((I4.EQ.1)) THEN
                                  SCFLU_COV(I1,I2,I3,I4)=SCFLU_COV(I1,I2
     *                            ,I3,I4)+ SCFLU_TMP(I1,I2,I3,I4+2)* SCF
     *                            LU_TMP(I1,I2,I3,2)
                              ELSE IF((I4.EQ.2)) THEN
                                  SCFLU_COV(I1,I2,I3,I4)=SCFLU_COV(I1,I2
     *                            ,I3,I4)+ SCFLU_TMP(I1,I2,I3,I4+2)* SCF
     *                            LU_TMP(I1,I2,I3,1)
                              ELSE IF((I4.EQ.3)) THEN
                                  SCFLU_COV(I1,I2,I3,I4)=SCFLU_COV(I1,I2
     *                            ,I3,I4)+ SCFLU_TMP(I1,I2,I3,I4+4)* SCF
     *                            LU_TMP(I1,I2,I3,6)
                              ELSE IF((I4.EQ.4)) THEN
                                  SCFLU_COV(I1,I2,I3,I4)=SCFLU_COV(I1,I2
     *                            ,I3,I4)+ SCFLU_TMP(I1,I2,I3,I4+4)* SCF
     *                            LU_TMP(I1,I2,I3,5)
                              END IF
                          END IF
                          SCORE_TEMP=SCFLU(I1,I2,I3,I4)/SCORE_NORM_NUM
                          SCFLU2(I1,I2,I3,I4)=SCFLU2(I1,I2,I3,I4)/SCORE_
     *                    NORM_NUM
                          SCFLU2(I1,I2,I3,I4)=(SCFLU2(I1,I2,I3,I4)-SCORE
     *                    _TEMP**2)/ (SCORE_NORM_NUM-1)
                          IF((SCFLU2(I1,I2,I3,I4).GT.0))SCFLU2(I1,I2,I3,
     *                    I4)= SQRT(SCFLU2(I1,I2,I3,I4))
                          IF (((I4.LT.5 .AND. SCFLU_NUM(I1,I2,I3,1).LE.1
     *                    ) .OR. (I4.GT.4 .AND. I4.LT.9 .AND. SCFLU_NUM(
     *                    I1,I2,I3,2).LE.1))) THEN
                              SCFLU2(I1,I2,I3,I4)=99.9
                          ELSE IF((SCORE_TEMP.NE.0)) THEN
                              SCFLU2(I1,I2,I3,I4)= MIN(SCFLU2(I1,I2,I3,I
     *                        4)/SCORE_TEMP*100.D00,99.9D00)
                          END IF
                          IF ((I4.EQ.1.OR.I4.EQ.5)) THEN
                              SCFLU(I1,I2,I3,I4)=SCFLU(I1,I2,I3,I4)/SCOR
     *                        E_NORM_NUM
                          ELSE IF((I4.EQ.2.OR.I4.EQ.6)) THEN
                              SCFLU(I1,I2,I3,I4)=SCFLU(I1,I2,I3,I4)/SCOR
     *                        E_NORM_FLUENCE
                          ELSE IF((I4.EQ.3.OR.I4.EQ.7)) THEN
                              IF ((I4.EQ.3)) THEN
                                  NUMIND=1
                                  COVIND=1
                              ELSE
                                  NUMIND=2
                                  COVIND=3
                              END IF
                              SCFLU(I1,I2,I3,I4)=SCFLU(I1,I2,I3,I4)/SCOR
     *                        E_NORM_NUM
                              SCORE_TEMP=SCFLU(I1,I2,I3,I4-1)*SCORE_NORM
     *                        _FLUENCE/ SCORE_NORM_NUM
                              IF ((SCFLU_NUM(I1,I2,I3,NUMIND).LE.1)) THE
     *                        N
                                  SCFLU2(I1,I2,I3,I4)=99.9
                                  SCFLU_NOCOV(I1,I2,I3,NUMIND)=1
                              ELSE
                                  IF ((SCFLU_NUM(I1,I2,I3,NUMIND).LT.10)
     *                            ) THEN
                                      SCFLU_COV(I1,I2,I3,COVIND)=0.
                                      SCFLU_NOCOV(I1,I2,I3,NUMIND)=1
                                  ELSE
                                      SCFLU_COV(I1,I2,I3,COVIND)=SCFLU_C
     *                                OV(I1,I2,I3,COVIND)/ SCORE_NORM_NU
     *                                M - SCFLU(I1,I2,I3,I4)*SCORE_TEMP
                                      SCFLU_COV(I1,I2,I3,COVIND)=SCFLU_C
     *                                OV(I1,I2,I3,COVIND)/ (SCFLU(I1,I2,
     *                                I3,I4)* SCORE_TEMP*(SCORE_NORM_NUM
     *                                -1))
                                  END IF
                                  SCFLU2(I1,I2,I3,I4)=(SCFLU2(I1,I2,I3,I
     *                            4)/100.D00)**2+ (SCFLU2(I1,I2,I3,I4-1)
     *                            /100.D00)**2- 2*SCFLU_COV(I1,I2,I3,COV
     *                            IND)
                                  IF ((SCFLU2(I1,I2,I3,I4).GT.0.)) THEN
                                      SCFLU2(I1,I2,I3,I4)=SQRT(SCFLU2(I1
     *                                ,I2,I3,I4))
                                  END IF
                                  SCFLU2(I1,I2,I3,I4)=MIN(SCFLU2(I1,I2,I
     *                            3,I4)*100.D00, 99.9D00)
                              END IF
                              IF((SCFLU(I1,I2,I3,I4-1).GT.0))SCFLU(I1,I2
     *                        ,I3,I4)= SCFLU(I1,I2,I3,I4)/SCORE_TEMP
                          ELSE IF((I4.EQ.4.OR.I4.EQ.8)) THEN
                              IF ((I4.EQ.4)) THEN
                                  NUMIND=1
                                  COVIND=2
                              ELSE
                                  NUMIND=2
                                  COVIND=4
                              END IF
                              SCFLU(I1,I2,I3,I4)=SCFLU(I1,I2,I3,I4)/SCOR
     *                        E_NORM_NUM
                              IF ((SCFLU_NUM(I1,I2,I3,NUMIND).LE.1)) THE
     *                        N
                                  SCFLU2(I1,I2,I3,I4)=99.9
                                  SCFLU_NOCOV(I1,I2,I3,NUMIND)=1
                              ELSE
                                  IF ((SCFLU_NUM(I1,I2,I3,NUMIND).LT.10)
     *                            ) THEN
                                      SCFLU_COV(I1,I2,I3,COVIND)=0.
                                      SCFLU_NOCOV(I1,I2,I3,NUMIND)=1
                                  ELSE IF((SCFLU(I1,I2,I3,I4).EQ.0.)) TH
     *                            EN
                                      SCFLU_COV(I1,I2,I3,COVIND)=0.
                                  END IF
                                  SCFLU_COV(I1,I2,I3,COVIND)=SCFLU_COV(I
     *                            1,I2,I3,COVIND)/ SCORE_NORM_NUM - SCFL
     *                            U(I1,I2,I3,I4)*SCFLU(I1,I2,I3,I4-3)
                                  SCFLU_COV(I1,I2,I3,COVIND)=SCFLU_COV(I
     *                            1,I2,I3,COVIND)/ (SCFLU(I1,I2,I3,I4)*
     *                            SCFLU(I1,I2,I3,I4-3)* (SCORE_NORM_NUM-
     *                            1))
                                  SCFLU2(I1,I2,I3,I4)=(SCFLU2(I1,I2,I3,I
     *                            4)/100.D00)**2+ (SCFLU2(I1,I2,I3,I4-3)
     *                            /100.D00)**2- 2*SCFLU_COV(I1,I2,I3,COV
     *                            IND)
                                  IF ((SCFLU2(I1,I2,I3,I4).GT.0.)) THEN
                                      SCFLU2(I1,I2,I3,I4)=SQRT(SCFLU2(I1
     *                                ,I2,I3,I4))
                                  END IF
                                  SCFLU2(I1,I2,I3,I4)=MIN(SCFLU2(I1,I2,I
     *                            3,I4)*100.D00, 99.9D00)
                              END IF
                              IF((SCFLU(I1,I2,I3,I4-3).GT.0))SCFLU(I1,I2
     *                        ,I3,I4)= SCFLU(I1,I2,I3,I4)/SCFLU(I1,I2,I3
     *                        ,I4-3)
                              SCFLU(I1,I2,I3,I4)=SCFLU(I1,I2,I3,I4)*57.2
     *                        9578
                          END IF
3001                  CONTINUE
3002                  CONTINUE
                  ELSE IF((I1.EQ.1 .AND. I3.LE.NSC_ZONES(I2))) THEN
                      WRITE (IOUTLIST, '(//''***WARNING IN SCORING PLANE
     * '',I4,/                                           ''Zone '',I4,''
     * has zero area''//)') I2, I3
                      WRITE(6,3010)I2, I3
3010                  FORMAT(//'***WARNING IN SCORING PLANE ',I4,/ 'Zone
     * ',I4,' has zero area'//)
                  END IF
2991          CONTINUE
2992          CONTINUE
2971      CONTINUE
2972      CONTINUE
2961  CONTINUE
2962  CONTINUE
      IF((ientry.EQ.1))NINCPHSP=SCORE_NORM_NUM
      CALL OSUMRY
2880  CONTINUE
      IF((IDAT.EQ.0))close(data_unit)
      IF ((IWATCH.EQ.4 .OR. IZLAST.EQ.2 )) THEN
          close(IOUTGPH)
          close(IOUTGEOM)
      END IF
      IF ((ISTORE .EQ. -1)) THEN
          CLOSE(IOUTRN)
      END IF
      IF ((n_parallel.EQ.0 .OR. .NOT.is_finished)) THEN
          IF ((IO_OPT .EQ. 0).OR.((IO_OPT .EQ. 3).AND.(IHSTRY .LE. 10000
     *    0)).OR.(IO_OPT.EQ.4)) THEN
              DO 3021 I=1,NSC_PLANES
                  IF ((IO_OPT.EQ.4)) THEN
                      call iaea_destroy_source(IOUTFLU(I),iaea_result)
                      IF ((iaea_result.LT.0)) THEN
                          WRITE(i_log,*)' Error closing IAEA phase space
     * ID ',IOUTFLU(I)
                      END IF
                  ELSE
                      CLOSE(IOUTFLU(I))
                  END IF
3021          CONTINUE
3022          CONTINUE
          END IF
      END IF
      CALL DATETIME(1)
      WRITE(6,3030)DATEN,TIMEN
3030  FORMAT(/' END OF RUN',10X,A,1X,A//)
      WRITE(IOUTLIST,400) DATEN,TIMEN
400   FORMAT(///' END OF RUN',10X,A,1X,A//)
      call egs_finish
#ifdef HAVE_C_COMPILER
      IF (( n_parallel .GT. 0 .AND. .NOT.is_finished )) THEN
          call egs_pjob_finish(n_job)
          IOUTLIST=egs_open_file(IOUTLIST,0,1,'.egslst')
          IF (( n_job .EQ. 0 )) THEN
              is_finished = .true.
              DO 3041 ID=1,NDOSE_ZONE
                  AMASS(ID)=0.
3041          CONTINUE
3042          CONTINUE
              CALL ISUMRY
              call egs_combine_runs(combine_results,'.egsdat')
              NCASET=NCASEO
              IHSTRY=NCASET
              NCASE=0
              CALL SRCOTO(WEIGHT)
              goto 2890
          END IF
      END IF
#endif
      return
      end
      SUBROUTINE AUSGAB(IARG)
      implicit none
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L(3000),IPHTER(3000)
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/GEOM/ NREG
      INTEGER NREG
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/PHOTIN/ EBINDA(12), GE0(12),GE1(12), GMFP0(2000,12),GMFP1(2
     *000,12),GBR10(2000,12),GBR11(2000,12),GBR20(2000,12),GBR21(2000,12
     *), RCO0(12),RCO1(12), RSCT0(100,12),RSCT1(100,12), COHE0(2000,12),
     *COHE1(2000,12),  PHOTONUC0(2000,12),PHOTONUC1(2000,12), DPMFP, MPG
     *EM(1,12), NGR(12)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/RWPHSP/ STRING_TEMP_ZLAST_OUT,  STRING_TEMP_OUT,  IHSTRY_PH
     *SP,   iaea_dummy_long,  NHSTRY_DOS,   ESHORT,  WEIGHTTMP,  WT_PHSP
     *_SHORT,  X_PHSP_SHORT,  Y_PHSP_SHORT,  Z_PHSP_SHORT,  U_PHSP_SHORT
     *,  V_PHSP_SHORT,  W_PHSP_SHORT,  ZLAST_PHSP_SHORT,  MUIDX_PHSP_SHO
     *RT,  EKMAX_PHSP_SHORT,  EKMINE_PHSP_SHORT,  NINC_PHSP_SHORT,  dosx
     *yz2beam_index,  iaea_extra_floats,  NUM_PHSP_TOT,  PHOT_PHSP_TOT,
     *iaea_result,   iaea_n_stat,  iaea_q_typ,  iaea_typ_q,  iaea_q_inde
     *x,  I_PHSP,  IERR_PHSP,  LATCHTMP,  WRITE_PHSP_COUNTER,  WRITE_PHS
     *P_SOFAR,  PHSP_RESTART,  PHSP_RECL,  PHSP_RECL_OLD,  iaea_extra_in
     *ts,  iaea_extra_int_types,iaea_extra_float_types,   iaea_i_zlast,
     * iaea_i_latch,  iaea_i_muidx,  iaea_n_extra_ints,  iaea_n_extra_fl
     *oats,  i_iaea_open_for_write,   iaea_i_zlast_out,  iaea_i_latch_ou
     *t,  iaea_i_muidx_out,  dosxyz2beam_izscore,  MODE_RW
      CHARACTER*32000 STRING_TEMP_ZLAST_OUT(3)
      CHARACTER*28000 STRING_TEMP_OUT(3)
      integer*8 IHSTRY_PHSP(3),iaea_dummy_long,NHSTRY_DOS
      REAL*4 ESHORT,WEIGHTTMP,WT_PHSP_SHORT,X_PHSP_SHORT,Y_PHSP_SHORT, Z
     *_PHSP_SHORT,U_PHSP_SHORT, V_PHSP_SHORT,W_PHSP_SHORT,ZLAST_PHSP_SHO
     *RT, MUIDX_PHSP_SHORT, EKMAX_PHSP_SHORT,EKMINE_PHSP_SHORT,NINC_PHSP
     *_SHORT,dosxyz2beam_index, iaea_extra_floats(10)
      INTEGER NUM_PHSP_TOT,PHOT_PHSP_TOT, iaea_result,iaea_n_stat,iaea_q
     *_typ(3),iaea_typ_q(3),iaea_q_index,I_PHSP, IERR_PHSP,LATCHTMP, WRI
     *TE_PHSP_COUNTER(3),WRITE_PHSP_SOFAR(3), PHSP_RESTART,PHSP_RECL,PHS
     *P_RECL_OLD,iaea_extra_ints(10), iaea_extra_int_types(10),iaea_extr
     *a_float_types(10),iaea_i_zlast, iaea_i_latch,iaea_i_muidx,iaea_n_e
     *xtra_ints,iaea_n_extra_floats, i_iaea_open_for_write,iaea_i_zlast_
     *out,iaea_i_latch_out, iaea_i_muidx_out,dosxyz2beam_izscore
      CHARACTER*5 MODE_RW
      INTEGER LATCH_TEMP_OUT,NUM_PHSP_TOFLUSH,TEMP_PHSP_COUNTER,REM_PHSP
      REAL*4 REAL_TEMP_OUT(7)
      CHARACTER*32 REC_TEMP_OUT
      common/egs_vr/ e_max_rr(3000),  prob_RR,  nbr_split,  i_play_RR,
     *    i_survived_RR,
     *        n_RR_warning,                                        i_do_
     *rr(3000)
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      COMMON/SOURCE/ COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,
     *COSTHETA,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SI
     *GN2,RIN1_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA
     *24, NNPHSP,NPHOTSRC,WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEA
     *M,YBEAM,ZBEAM,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL
     *2,PROBFC,PROBSD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z
     *_SOURCE,E_ph_sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT1
     *00,XSCAN_UNIT,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YIN
     *DEL, EKMAXSRC, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9, Y_SRC9, PR
     *OB_SRC9, ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN,RDISTF,RPDF,RCDF, F
     *NORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COSRNG,SINRNG,WEIGHTOLD,UINOL
     *D,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RSRC_DBS,SSDSRC_DBS,ZSRC_DBS
     *,sigma_src19,DIST24,ALPHA24,BETA24,RBEAMY, xo_src19, yo_src19, NRD
     *IST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p, NPASS_ph_s
     *p, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRATIO_YXF, OL
     *DSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUNT, IERROR,
     *RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB,MONOEN, NR
     *CYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE_FLAG, INIT
     *_ICMOLD,I_MUPHSP_IN,SPCNAM, the_beam_code,the_input_file,the_pegs_
     *file,SPEC_TITLE,phsp_open
      REAL*8 COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,COSTHETA
     *,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SIGN2,RIN1
     *_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA24
      integer*8 NNPHSP, NPHOTSRC
      real*8 WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEAM,YBEAM,ZBEAM
     *,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL2,PROBFC,PROB
     *SD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z_SOURCE,E_ph_
     *sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT100,XSCAN_UNIT
     *,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YINDEL, EKMAXSRC
     *, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9(10), Y_SRC9(10), PROB_SR
     *C9(10), ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN(1000,2),RDISTF(1000)
     *, RPDF(1000),RCDF(1000), FNORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COS
     *RNG,SINRNG,WEIGHTOLD,UINOLD,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RS
     *RC_DBS,SSDSRC_DBS,ZSRC_DBS,sigma_src19,DIST24,ALPHA24,BETA24,RBEAM
     *Y, xo_src19, yo_src19
      INTEGER NRDIST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p,
     * NPASS_ph_sp, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRA
     *TIO_YXF, OLDSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUN
     *T, IERROR, RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB
     *,MONOEN, NRCYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE
     *_FLAG, INIT_ICMOLD,I_MUPHSP_IN
      CHARACTER*256 SPCNAM
      CHARACTER*80 the_beam_code,the_input_file,the_pegs_file,SPEC_TITLE
      logical phsp_open
      COMMON/ELECIN/ esig_e(12),psig_e(12), esige_max, psige_max, range_
     *ep(0:1,500,12), E_array(500,12), etae_ms0(500,12),etae_ms1(500,12)
     *,etap_ms0(500,12),etap_ms1(500,12),q1ce_ms0(500,12),q1ce_ms1(500,1
     *2),q1cp_ms0(500,12),q1cp_ms1(500,12),q2ce_ms0(500,12),q2ce_ms1(500
     *,12),q2cp_ms0(500,12),q2cp_ms1(500,12),blcce0(500,12),blcce1(500,1
     *2), EKE0(12),EKE1(12), XR0(12),TEFF0(12),BLCC(12),XCC(12), ESIG0(5
     *00,12),ESIG1(500,12),PSIG0(500,12),PSIG1(500,12),EDEDX0(500,12),ED
     *EDX1(500,12),PDEDX0(500,12),PDEDX1(500,12),EBR10(500,12),EBR11(500
     *,12),PBR10(500,12),PBR11(500,12),PBR20(500,12),PBR21(500,12),TMXS0
     *(500,12),TMXS1(500,12), expeke1(12), IUNRST(12),EPSTFL(12),IAPRIM(
     *12), sig_ismonotone(0:1,12)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      common/compton_data/ iz_array(1538),  be_array(1538),  Jo_array(15
     *38),  erfJo_array(1538),   ne_array(1538),  shn_array(1538),
     *shell_array(200,12), eno_array(200,12), eno_atbin_array(200,12), n
     *_shell(12), radc_flag,  ibcmp(3000)
      integer*4 iz_array,ne_array,shn_array,eno_atbin_array, shell_array
     *,n_shell,radc_flag
      real*8 be_array,Jo_array,erfJo_array,eno_array
      integer*2 ibcmp
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      INTEGER IARG,  IPAR,  IQL, LGLE,IBITH30,IBITL30, IT,  ISTATUS,  I,
     * II,  IERR,  split_dsb,  IRL,  lnblnk1,  IX,IY
      real*8 FTMP,  RDIST2,  WEIGHT,  WGHTMA,  WL,  RNNO35,COHFAC, ANG_D
     *BS, ang_dsb, ener,  sinthe,costhe,cphi,sphi,rhophi2,yphi2,yphi,xph
     *i2,xphi
      real*8 twopi,cos_dsb,sin_dsb,RNDM_BCSE,one
      LOGICAL BTEST
      CHARACTER*8 AUNIT
      CHARACTER*256 phsp_fn
      integer*4 iicm,ip
      real*8 phsp_upper_limit
      real*8 abrspl,wt_i
      integer*4 iphat_i
      REAL*4 time_array(2),etime
      integer*4 n_weight_warning
      parameter (one = 1)
      data n_weight_warning/0/
      data phsp_upper_limit/2147483647/twopi/6.2831853071795864770256179
     *1881237241/
      save n_weight_warning,phsp_upper_limit,twopi
      EQUIVALENCE(REC_TEMP_OUT(1:4),LATCH_TEMP_OUT)
      EQUIVALENCE(REC_TEMP_OUT(5:8),REAL_TEMP_OUT(1))
      EQUIVALENCE(REC_TEMP_OUT(9:12),REAL_TEMP_OUT(2))
      EQUIVALENCE(REC_TEMP_OUT(13:16),REAL_TEMP_OUT(3))
      EQUIVALENCE(REC_TEMP_OUT(17:20),REAL_TEMP_OUT(4))
      EQUIVALENCE(REC_TEMP_OUT(21:24),REAL_TEMP_OUT(5))
      EQUIVALENCE(REC_TEMP_OUT(25:28),REAL_TEMP_OUT(6))
      EQUIVALENCE(REC_TEMP_OUT(29:32),REAL_TEMP_OUT(7))
      MXNP=MAX(MXNP,NP)
      IF ((NP .GT. 10000)) THEN
          WRITE(6,3050)NP,10000
3050      FORMAT(' IN AUSGAB, NP=',I3,' >= MAXIMUM STACK ALLOWED=',I3,/1
     *X,79('*')/)
          call exit(1)
      END IF
      IF (( use_bcse .AND. ibrspl .LT. 2 )) THEN
          IF (( iarg .EQ. 6 .AND. is_bcse_medium(med(ir(np))) )) THEN
              abrspl = NBRSPL_ORGNL
              abrspl = abrspl/bcse_factor
              IF (( abrspl .LT. 1 )) THEN
                  write(i_log,'(/a)') '***************** Error: '
                  write(i_log,*) 'Brems enhancement factor ',bcse_factor
     *            , ' is greater than nbrspl ',NBRSPL_ORGNL
                  write(i_log,'(/a)') '***************** Quiting now.'
                  call exit(1)
              END IF
              nbrspl = abrspl
              IF((rng_seed .GT. 128))call ranmar_get
              rndm_bcse = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF((rndm_bcse .LT. abrspl - nbrspl))nbrspl = nbrspl + 1
              nbr_split = nbrspl
              wt(np) = (wt(np)*nbrspl)/nbrspl_orgnl
              enpold_orgnl = e(np)
          END IF
          IF (( iarg .EQ. 7 .AND. is_bcse_medium(med(ir(np))) )) THEN
              wt(npold) = (wt(npold)*nbrspl_orgnl)/nbrspl
              nbrspl = nbrspl_orgnl
              nbr_split = nbrspl
              IF((rng_seed .GT. 128))call ranmar_get
              rndm_bcse = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF((rndm_bcse*bcse_factor .GT. 1))e(npold) = enpold_orgnl
          END IF
      END IF
      IF (((IBRSPL.EQ.1 .OR. (USE_BCSE .AND. IBRSPL.LT.2)) .AND. IARG.EQ
     *.25 .AND. WT(NP).EQ.1.0)) THEN
          NPOLD=NP
          CALL UNIFORM_PHOTONS_4PI(NBRSPL,E(NP))
      END IF
      IF((IWATCH .GT. 0))CALL WATCH(IARG,IWATCH)
      IRL = IR(NP)
      IF ((IRL .EQ. 1)) THEN
          IF ((IARG .NE. 3 .AND. IARG .NE.5)) THEN
              WRITE(6,3060)IARG
3060          FORMAT(//' ********IN AUSGAB:   IRL = 1 with IARG=',I5,/ '
     *This should not happen'//)
              call exit(1)
          END IF
          IF ((IARG .EQ. 3)) THEN
              RETURN
          END IF
      END IF
      IF ((IBRSPL.EQ.2 .AND. USE_REJPLN)) THEN
          IF ((FLAG_REJPLN.EQ.0)) THEN
              WRITE(IOUTLIST,901) Z_REJPLN
901           FORMAT(/'** A rejection plane is being used with DBS **'/'
     *Z(cm) from zero reference plane =',F12.2/ 'The followingis a list 
     *of discarded fat particle data (if any):'/ 'IARG , IQ(NP) , IR(NP)
     * , WT(NP) , Z(NP) , TVSTEP'//)
              FLAG_REJPLN=1
          END IF
          IF ((WT(NP).EQ.1 .AND. Z(NP).GE.Z_REJPLN .AND. IARG .GT. 5)) T
     *    HEN
              WRITE(IOUTLIST,902) IARG,IQ(NP),IR(NP),WT(NP),Z(NP),TVSTEP
902           FORMAT(I3,2X,I3,2X,I3,2X,E10.3,2X,E10.3,2X,E10.3)
              WT(NP)=0
              FLAG_REJPLN = FLAG_REJPLN+1
              IF ((FLAG_REJPLN.GT.1000)) THEN
                  WRITE(IOUTLIST,903)
903               FORMAT('Rejection plane eliminated more than 1000 fatp
     *hotons. STOP')
                  STOP
              END IF
              RETURN
          END IF
      END IF
      IF (( use_cs_enhance )) THEN
          iicm = IR_to_CM(irl)
          IF (( cs_enhance(iicm) .GT. 1 )) THEN
              IF (( iarg .EQ. 15 .OR. iarg .EQ. 17 .OR. iarg .EQ. 19 .OR
     *        . iarg .EQ. 23 )) THEN
                  np = np+1
                  IF (( np .GT. 10000 )) THEN
                      write(i_log,'(/a)') '***************** Error: '
                      write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine '
     *                ,'ausgab(cs_enhance)', ' stack size exceeded! ','
     *$MAXSTACK = ',10000,' np = ',np
                      write(i_log,'(/a)') '***************** Quiting now
     *.'
                      call exit(1)
                  END IF
                  X(np)=X(np-1)
                  Y(np)=Y(np-1)
                  Z(np)=Z(np-1)
                  IR(np)=IR(np-1)
                  WT(np)=WT(np-1)
                  DNEAR(np)=DNEAR(np-1)
                  LATCH(np)=LATCH(np-1)
                  ZLAST(np)=ZLAST(np-1)
                  NFTIME(np)=NFTIME(np-1)
                  DO 3071 ISCORE=1,3
                      NPASS(np,ISCORE)=NPASS(np-1,ISCORE)
3071              CONTINUE
3072              CONTINUE
                  NSPLIT(np)=NSPLIT(np-1)
                  IPHAT(np)=IPHAT(np-1)
                  W(NP)=W(NP-1)
                  U(np)=U(np-1)
                  V(np)=V(np-1)
                  E(NP)=E(NP-1)
                  IQ(NP)=IQ(NP-1)
                  wt(np) = wt(np)/cs_enhance(iicm)
                  return
              ELSE IF(( iarg .EQ. 16 .OR. iarg .EQ. 18 .OR. iarg .EQ. 20
     *         .OR. iarg .EQ. 24 )) THEN
                  IF((rng_seed .GT. 128))call ranmar_get
                  rnno35 = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  IF (( rnno35*cs_enhance(iicm) .GT. 1 )) THEN
                      DO 3081 ip=npold,np
                          IF (( iq(ip) .EQ. 0 )) THEN
                              wt(ip) = 0
                          END IF
3081                  CONTINUE
3082                  CONTINUE
                  ELSE
                      wt(npold-1) = 0
                      DO 3091 ip=npold,np
                          IF (( iq(ip) .EQ. 0 )) THEN
                              wt(ip) = wt(ip)*cs_enhance(iicm)
                          END IF
3091                  CONTINUE
3092                  CONTINUE
                  END IF
                  return
              END IF
          END IF
          IF((cse_return(iarg+1)))return
      END IF
      IF ((IARG .EQ. 5)) THEN
          IF ((ESPLIT_DBS.EQ.1)) THEN
              IF ((W(NP).GT.0)) THEN
                  count_esplit=count_esplit+1
                  IF ((IWATCH.EQ.1.OR.IWATCH.EQ.2)) THEN
                      WRITE(6,3100)NP,E(NP)-PRM,IQ(NP),IR(NP),X(NP),Y(NP
     *                ),Z(NP), U(NP),V(NP),W(NP),LATCH(NP),WT(NP)
3100                  FORMAT(' Electron',T36,':',I5,F9.3,2I4,3F8.3,3F7.3
     *,I10,1PE10.3)
                      WRITE(6,3110)NBRSPL
3110                  FORMAT(' about to be split ',I10, ' times (DBS).')
                      IF ((IRAD_DBS.EQ.1)) THEN
                          WRITE(6,3120)
3120                      FORMAT(' Split electrons will be symmetrically
     * distributed about beam axis.')
                      END IF
                  END IF
                  WT(NP)=WT(NP)/FLOAT(NBRSPL)
                  IPHAT(NP)=1
                  IF ((IRAD_DBS.EQ.1)) THEN
                      ANG_DBS=2.*3.1415926/FLOAT(NBRSPL)
                  END IF
                  IF ((IWATCH.EQ.1.OR.IWATCH.EQ.2)) THEN
                      WRITE(6,3130)NP,E(NP)-PRM,IQ(NP),IR(NP),X(NP),Y(NP
     *                ),Z(NP), U(NP),V(NP),W(NP),LATCH(NP),WT(NP)
3130                  FORMAT(T36,':',I5,F9.3,2I4,3F8.3,3F7.3,I10,1PE10.3
     *)
                  END IF
                  DO 3141 I=1,NBRSPL-1
                      NP=NP+1
                      X(NP)=X(NP-1)
                      Y(NP)=Y(NP-1)
                      Z(NP)=Z(NP-1)
                      IR(NP)=IR(NP-1)
                      WT(NP)=WT(NP-1)
                      DNEAR(NP)=DNEAR(NP-1)
                      LATCH(NP)=LATCH(NP-1)
                      ZLAST(NP)=ZLAST(NP-1)
                      NFTIME(NP)=NFTIME(NP-1)
                      DO 3151 ISCORE=1,3
                          NPASS(NP,ISCORE)=NPASS(NP-1,ISCORE)
3151                  CONTINUE
3152                  CONTINUE
                      NSPLIT(NP)=NSPLIT(NP-1)
                      IPHAT(NP)=IPHAT(NP-1)
                      W(NP)=W(NP-1)
                      E(NP)=E(NP-1)
                      IQ(NP)=IQ(NP-1)
                      IF ((IRAD_DBS.EQ.1)) THEN
                          X(NP)=X(NP-1)*COS(ANG_DBS)+Y(NP-1)*SIN(ANG_DBS
     *                    )
                          Y(NP)=-X(NP-1)*SIN(ANG_DBS)+Y(NP-1)*COS(ANG_DB
     *                    S)
                          U(NP)=U(NP-1)*COS(ANG_DBS)+V(NP-1)*SIN(ANG_DBS
     *                    )
                          V(NP)=-U(NP-1)*SIN(ANG_DBS)+V(NP-1)*COS(ANG_DB
     *                    S)
                      ELSE
                          U(NP)=U(NP-1)
                          V(NP)=V(NP-1)
                      END IF
                      IF ((IWATCH.EQ.1.OR.IWATCH.EQ.2)) THEN
                          WRITE(6,3160)NP,E(NP)-PRM,IQ(NP),IR(NP),X(NP),
     *                    Y(NP),Z(NP), U(NP),V(NP),W(NP),LATCH(NP),WT(NP
     *                    )
3160                      FORMAT(T36,':',I5,F9.3,2I4,3F8.3,3F7.3,I10,1PE
     *10.3)
                      END IF
3141              CONTINUE
3142              CONTINUE
              END IF
              ESPLIT_DBS=0
          END IF
          IF ((ICM.EQ.ICMNEW)) THEN
              IAUSFL(6)=0
              RETURN
          END IF
          IF (((IDIRG.EQ.-1 .AND. W(NP).GT.0) .OR. (IDIRG.EQ.1 .AND. W(N
     *    P).LT.0))) THEN
              IAUSFL(6)=0
              RETURN
          END IF
          IF ((IWATCH .EQ. 1 .OR. IWATCH .EQ. 2)) THEN
              IF ((ICMNEW .NE. 0)) THEN
                  WRITE(6,3170)ICM,ICMNEW
3170              FORMAT(' PASSING FROM CM',I3,' TO CM',I3)
              ELSE
                  WRITE(6,3180)ICM
3180              FORMAT(' PASSING FROM CM',I3,' TO OUTSIDE REGION')
              END IF
          END IF
          IF ((ICM .EQ. ICMNEW)) THEN
              WRITE(6,3190)ICM,IAUSFL(6),IHSTRY
3190          FORMAT(' *** WARNING *** ICM=ICMNEW=',I2, ' when IAUSFL(6)
     *=',I2, ' for history',I10)
              WRITE (IOUTLIST, '('' *** WARNING *** ICM=ICMNEW='',I2,''
     *when IAUSFL(6)='',I2,                    '' for history'',I10)') I
     *        CM,IAUSFL(6),IHSTRY
              GOTO 3200
          END IF
          IF ((W(NP) .GT. 0.)) THEN
              ISCORE = ICM_to_SCORE(ICM)
          ELSE IF((ICM .EQ. 1)) THEN
              ISCORE = 0
          ELSE
              ISCORE = ICM_to_SCORE(ICM-1)
          END IF
          IF((ISCORE .EQ. 0))GOTO 3200
          IQL = IQ(NP)+2
          WL = W(NP)
          IF((ABS(WL) .GT. 1.))WL=SIGN(one,WL)
          RDIST2 = Y(NP)**2+X(NP)**2
          NPFLU(ISCORE)=NPFLU(ISCORE)+1
          IF ((MZONE_TYPE(ISCORE) .EQ. 0)) THEN
              DO 3211 ISZ=1,NSC_ZONES(ISCORE)
                  IF ((RDIST2 .LE. RSCORE_ZONE2(ISCORE,ISZ))) THEN
                      GOTO 3220
                  END IF
3211          CONTINUE
3212          CONTINUE
          ELSE IF((MZONE_TYPE(ISCORE) .EQ. 1)) THEN
              DO 3231 ISZ=1,NSC_ZONES(ISCORE)
                  IF (( ABS(X(NP)) .LE. RSCORE_ZONE(ISCORE,ISZ) .AND. AB
     *            S(Y(NP)) .LE. RSCORE_ZONE(ISCORE,ISZ))) THEN
                      GOTO 3220
                  END IF
3231          CONTINUE
3232          CONTINUE
          ELSE IF((MZONE_TYPE(ISCORE) .EQ. 2)) THEN
              DO 3241 IX=1,NX_ZONE(ISCORE)
                  IF((RSCORE_ZONE(ISCORE,IX).LE.X(NP) .AND. RSCORE_ZONE(
     *            ISCORE,IX+1) .GT. X(NP)))GO TO3242
3241          CONTINUE
3242          CONTINUE
              DO 3251 IY=1,NY_ZONE(ISCORE)
                  IF((RSCORE_ZONE2(ISCORE,IY).LE.Y(NP) .AND. RSCORE_ZONE
     *            2(ISCORE,IY+1) .GT. Y(NP)))GO TO3252
3251          CONTINUE
3252          CONTINUE
              IF ((IX.EQ.NX_ZONE(ISCORE)+1 .OR. IY.EQ.NY_ZONE(ISCORE)+1)
     *        ) THEN
                  ISZ=NSC_ZONES(ISCORE)+1
              ELSE
                  ISZ=IX+(IY-1)*NX_ZONE(ISCORE)
              END IF
          END IF
3220      CONTINUE
          IF ((ISZ.LE.NSC_ZONES(ISCORE)+1)) THEN
              IF ((NPASS(NP,ISCORE).EQ.0)) THEN
                  IPAR = 0
              ELSE
                  IPAR = 4
              END IF
              WEIGHT = WT(NP)
              IF ((WEIGHT .LT. 0.0)) THEN
                  WRITE(6,3260)WEIGHT,E(NP)
3260              FORMAT(' ***error in AUSGAB - weight=',F12.4,' is NEGA
     *TIVE for E=', F12.4)
              END IF
              IF ((IPAR.EQ.0 .AND. NHSTRY_LAST.EQ.SCFLU_LAST(IQL,ISCORE,
     *        ISZ,1) .OR. IPAR.EQ.4 .AND. NHSTRY_LAST.EQ.SCFLU_LAST(IQL,
     *        ISCORE,ISZ,2))) THEN
                  SCFLU_TMP(IQL,ISCORE,ISZ,IPAR+1)=SCFLU_TMP(IQL,ISCORE,
     *            ISZ,IPAR+1)+ WEIGHT
                  SCFLU_TMP(IQL,ISCORE,ISZ,IPAR+2)=SCFLU_TMP(IQL,ISCORE,
     *            ISZ,IPAR+2)+ WEIGHT/MAX(0.08716,ABS(WL))
                  SCFLU_TMP(IQL,ISCORE,ISZ,IPAR+3)=SCFLU_TMP(IQL,ISCORE,
     *            ISZ,IPAR+3)+ WEIGHT*(E(NP)-PRM*ABS(IQ(NP)))/ MAX(0.087
     *            16,ABS(WL))
                  SCFLU_TMP(IQL,ISCORE,ISZ,IPAR+4)=SCFLU_TMP(IQL,ISCORE,
     *            ISZ,IPAR+4)+ WEIGHT*ACOS(WL)
              ELSE
                  SCFLU(IQL,ISCORE,ISZ,IPAR+3)=SCFLU(IQL,ISCORE,ISZ,IPAR
     *            +3) + SCFLU_TMP(IQL,ISCORE,ISZ,IPAR+3)
                  SCFLU2(IQL,ISCORE,ISZ,IPAR+3)=SCFLU2(IQL,ISCORE,ISZ,IP
     *            AR+3)+ SCFLU_TMP(IQL,ISCORE,ISZ,IPAR+3)**2
                  SCFLU_COV(IQL,ISCORE,ISZ,IPAR/2+1)=SCFLU_COV(IQL,ISCOR
     *            E,ISZ,IPAR/2+1)+ SCFLU_TMP(IQL,ISCORE,ISZ,IPAR+3)* SCF
     *            LU_TMP(IQL,ISCORE,ISZ,IPAR+2)
                  SCFLU_TMP(IQL,ISCORE,ISZ,IPAR+3)=WEIGHT*(E(NP)-PRM*ABS
     *            (IQ(NP)))/ MAX(0.08716,ABS(WL))
                  SCFLU(IQL,ISCORE,ISZ,IPAR+4)=SCFLU(IQL,ISCORE,ISZ,IPAR
     *            +4) + SCFLU_TMP(IQL,ISCORE,ISZ,IPAR+4)
                  SCFLU2(IQL,ISCORE,ISZ,IPAR+4)=SCFLU2(IQL,ISCORE,ISZ,IP
     *            AR+4)+ SCFLU_TMP(IQL,ISCORE,ISZ,IPAR+4)**2
                  SCFLU_COV(IQL,ISCORE,ISZ,IPAR/2+2)=SCFLU_COV(IQL,ISCOR
     *            E,ISZ,IPAR/2+2)+ SCFLU_TMP(IQL,ISCORE,ISZ,IPAR+4)* SCF
     *            LU_TMP(IQL,ISCORE,ISZ,IPAR+1)
                  SCFLU_TMP(IQL,ISCORE,ISZ,IPAR+4)=WEIGHT*ACOS(WL)
                  SCFLU(IQL,ISCORE,ISZ,IPAR+1)=SCFLU(IQL,ISCORE,ISZ,IPAR
     *            +1) + SCFLU_TMP(IQL,ISCORE,ISZ,IPAR+1)
                  SCFLU2(IQL,ISCORE,ISZ,IPAR+1)=SCFLU2(IQL,ISCORE,ISZ,IP
     *            AR+1) + SCFLU_TMP(IQL,ISCORE,ISZ,IPAR+1)**2
                  SCFLU_TMP(IQL,ISCORE,ISZ,IPAR+1)=WEIGHT
                  SCFLU(IQL,ISCORE,ISZ,IPAR+2)=SCFLU(IQL,ISCORE,ISZ,IPAR
     *            +2) + SCFLU_TMP(IQL,ISCORE,ISZ,IPAR+2)
                  SCFLU2(IQL,ISCORE,ISZ,IPAR+2)=SCFLU2(IQL,ISCORE,ISZ,IP
     *            AR+2) + SCFLU_TMP(IQL,ISCORE,ISZ,IPAR+2)**2
                  SCFLU_TMP(IQL,ISCORE,ISZ,IPAR+2)=WEIGHT/MAX(0.08716,AB
     *            S(WL))
                  IF ((IPAR.EQ.0)) THEN
                      SCFLU_LAST(IQL,ISCORE,ISZ,1)=NHSTRY_LAST
                  ELSE
                      SCFLU_LAST(IQL,ISCORE,ISZ,2)=NHSTRY_LAST
                  END IF
              END IF
              IF ((IPAR.EQ.0)) THEN
                  SCFLU_NUM(IQL,ISCORE,ISZ,1)=SCFLU_NUM(IQL,ISCORE,ISZ,1
     *            )+1
              ELSE
                  SCFLU_NUM(IQL,ISCORE,ISZ,2)=SCFLU_NUM(IQL,ISCORE,ISZ,2
     *            )+1
              END IF
              IF ((WEIGHT.LT.MINWEIGHT)) THEN
                  MINWEIGHT=WEIGHT
              ELSE IF((WEIGHT.GT.MAXWEIGHT)) THEN
                  MAXWEIGHT=WEIGHT
              END IF
          END IF
          IF ((IO_OPT .EQ. 0).OR.((IO_OPT .EQ. 3).AND.(IHSTRY .LE. 10000
     *    0)).OR.(IO_OPT.EQ.4)) THEN
              NPPHSP(ISCORE)=NPPHSP(ISCORE)+1
              IF (((E(NP)-PRM*ABS(IQ(NP))).GT.EKMAXPHSP(ISCORE))) THEN
                  EKMAXPHSP(ISCORE)=E(NP)-PRM*ABS(IQ(NP))
              END IF
              IF ((IQ(NP).EQ.-1)) THEN
                  IF (((E(NP)-PRM).LT.EKMINPHSPE(ISCORE))) THEN
                      EKMINPHSPE(ISCORE)=E(NP)-PRM
                  END IF
              ELSE IF((IQ(NP).EQ.0)) THEN
                  NPHOTPHSP(ISCORE)=NPHOTPHSP(ISCORE)+1
              END IF
              IF ((PHSP_OUTDIR.NE.' ')) THEN
                  phsp_fn=PHSP_OUTDIR(:lnblnk1(PHSP_OUTDIR)) // '/' // o
     *            utput_file(:lnblnk1(output_file))
              ELSE
                  phsp_fn=egs_home(:lnblnk1(egs_home))//user_code(:lnbln
     *            k1(user_code)) // '/' // output_file(:lnblnk1(output_f
     *            ile))
              END IF
              IF ((IOUTFLU(ISCORE)-43 .GT. 9)) THEN
                  WRITE(AUNIT,'(I2)') IOUTFLU(ISCORE)-43
              ELSE
                  WRITE(AUNIT,'(I1)') IOUTFLU(ISCORE)-43
              END IF
              IF ((IO_OPT.EQ.4)) THEN
                  IF ((NPASS(NP,ISCORE).EQ.0)) THEN
                      ESHORT=E(NP)
                      iaea_n_stat=NHSTRY-IHSTRY_PHSP(ISCORE)
                      IHSTRY_PHSP(ISCORE)=NHSTRY
                      IF (( (IQ(NP).EQ.1) .OR. (IQ(NP).EQ.-1) )) THEN
                          ESHORT = ESHORT - 0.5109989461
                      END IF
                      WT_PHSP_SHORT=WT(NP)
                      X_PHSP_SHORT=X(NP)
                      Y_PHSP_SHORT=Y(NP)
                      Z_PHSP_SHORT=Z(NP)
                      U_PHSP_SHORT=U(NP)
                      V_PHSP_SHORT=V(NP)
                      W_PHSP_SHORT=W(NP)
                      ZLAST_PHSP_SHORT=ZLAST(NP)
                      MUIDX_PHSP_SHORT=BEAM_MU_INDEX
                      IF ((i_iaea_open_for_write.EQ.1)) THEN
                          iaea_extra_ints(iaea_i_latch_out)=LATCH(NP)
                          IF((iaea_i_zlast_out.GT.0))iaea_extra_floats(i
     *                    aea_i_zlast_out)=ZLAST_PHSP_SHORT
                          IF((iaea_i_muidx_out.GT.0))iaea_extra_floats(i
     *                    aea_i_muidx_out)=MUIDX_PHSP_SHORT
                      ELSE
                          iaea_extra_ints(iaea_i_latch)=LATCH(NP)
                          IF((iaea_i_zlast.GT.0))iaea_extra_floats(iaea_
     *                    i_zlast)=ZLAST_PHSP_SHORT
                          IF((iaea_i_muidx.GT.0))iaea_extra_floats(iaea_
     *                    i_muidx)=MUIDX_PHSP_SHORT
                      END IF
                      call iaea_write_particle(IOUTFLU(ISCORE),iaea_n_st
     *                at,iaea_q_typ(IQ(NP)+2),ESHORT, WT_PHSP_SHORT,X_PH
     *                SP_SHORT,Y_PHSP_SHORT,Z_PHSP_SHORT,U_PHSP_SHORT, V
     *                _PHSP_SHORT,W_PHSP_SHORT,iaea_extra_floats,iaea_ex
     *                tra_ints)
                  END IF
              ELSE
                  IF (( i_parallel .GT. 0 )) THEN
                      phsp_fn=phsp_fn(:lnblnk1(phsp_fn))// '_w'
                      call egs_itostring(phsp_fn,i_parallel,.false.)
                  END IF
                  phsp_fn=phsp_fn(:lnblnk1(phsp_fn))// '.egsphsp'//AUNIT
                  LATCHTMP=LATCH(NP)
                  IF ((NPASS(NP,ISCORE) .EQ. 0)) THEN
                      LATCHTMP = IBCLR(LATCHTMP,31)
                  ELSE
                      LATCHTMP = IBSET(LATCHTMP,31)
                  END IF
                  IF ((IQ(NP) .EQ. -1)) THEN
                      LATCHTMP = IBSET(LATCHTMP,30)
                  ELSE IF((IQ(NP) .EQ. 0)) THEN
                      LATCHTMP = IBCLR(LATCHTMP,30)
                      LATCHTMP = IBCLR(LATCHTMP,29)
                  ELSE
                      LATCHTMP = IBCLR(LATCHTMP,30)
                      LATCHTMP = IBSET(LATCHTMP,29)
                  END IF
                  ESHORT=E(NP)
                  WEIGHTTMP=SIGN(WT(NP),W(NP))
                  IF ((NPPHSP(ISCORE)+1.GT.2 .AND. WRITE_PHSP_COUNTER(IS
     *            CORE).EQ.0 .AND. WRITE_PHSP_SOFAR(ISCORE).EQ.0)) THEN
                      IF (((NPPHSP(ISCORE)+1-1)-1000*((NPPHSP(ISCORE)+1-
     *                1)/1000).NE.0)) THEN
                          CLOSE(IOUTFLU(ISCORE))
                          IF ((IZLAST.NE.0)) THEN
                              PHSP_RECL=4*8
                              OPEN(UNIT=IOUTFLU(ISCORE),FILE=phsp_fn(:ln
     *                        blnk1(phsp_fn)),ACCESS='DIRECT',RECL=PHSP_
     *                        RECL, FORM='UNFORMATTED',STATUS='UNKNOWN')
                              DO 3271 I_PHSP=1,(NPPHSP(ISCORE)+1-1)-1000
     *                        *((NPPHSP(ISCORE)+1-1)/1000)
                                  READ(IOUTFLU(ISCORE),REC=1000*INT(dble
     *                            (NPPHSP(ISCORE)+1-1)/1000)+I_PHSP) STR
     *                            ING_TEMP_ZLAST_OUT(ISCORE)(32*(I_PHSP-
     *                            1)+1:32*I_PHSP)
3271                          CONTINUE
3272                          CONTINUE
                              CLOSE(IOUTFLU(ISCORE))
                              PHSP_RECL=4*8000
                              OPEN(UNIT=IOUTFLU(ISCORE),FILE=phsp_fn(:ln
     *                        blnk1(phsp_fn)),ACCESS='DIRECT',RECL=PHSP_
     *                        RECL, FORM='UNFORMATTED',STATUS='UNKNOWN')
                          ELSE
                              PHSP_RECL=4*7
                              OPEN(UNIT=IOUTFLU(ISCORE),FILE=phsp_fn(:ln
     *                        blnk1(phsp_fn)),ACCESS='DIRECT',RECL=PHSP_
     *                        RECL, FORM='UNFORMATTED',STATUS='UNKNOWN')
                              DO 3281 I_PHSP=1,(NPPHSP(ISCORE)+1-1)-1000
     *                        *((NPPHSP(ISCORE)+1-1)/1000)
                                  READ(IOUTFLU(ISCORE),REC=1000*INT(dble
     *                            (NPPHSP(ISCORE)+1-1)/1000)+I_PHSP) STR
     *                            ING_TEMP_OUT(ISCORE)(28*(I_PHSP-1)+1:2
     *                            8*I_PHSP)
3281                          CONTINUE
3282                          CONTINUE
                              CLOSE(IOUTFLU(ISCORE))
                              PHSP_RECL=4*7000
                              OPEN(UNIT=IOUTFLU(ISCORE),FILE=phsp_fn(:ln
     *                        blnk1(phsp_fn)),ACCESS='DIRECT',RECL=PHSP_
     *                        RECL, FORM='UNFORMATTED',STATUS='UNKNOWN')
                          END IF
                      END IF
                      WRITE_PHSP_SOFAR(ISCORE)=1000*INT(dble(NPPHSP(ISCO
     *                RE)+1-1)/1000)
                      IF ((WRITE_PHSP_SOFAR(ISCORE).GT.0)) THEN
                          PHSP_RESTART=1
                          WRITE_PHSP_COUNTER(ISCORE)=(NPPHSP(ISCORE)+1-1
     *                    )-1000*((NPPHSP(ISCORE)+1-1)/1000)
                      ELSE
                          WRITE_PHSP_COUNTER(ISCORE)=(NPPHSP(ISCORE)+1-2
     *                    )-1000*((NPPHSP(ISCORE)+1-2)/1000)
                      END IF
                  END IF
                  IF ((NHSTRY.NE.IHSTRY_PHSP(ISCORE))) THEN
                      ESHORT=-ESHORT
                      IHSTRY_PHSP(ISCORE)=NHSTRY
                  END IF
                  LATCH_TEMP_OUT=LATCHTMP
                  REAL_TEMP_OUT(1)=ESHORT
                  REAL_TEMP_OUT(2)=X(NP)
                  REAL_TEMP_OUT(3)=Y(NP)
                  REAL_TEMP_OUT(4)=U(NP)
                  REAL_TEMP_OUT(5)=V(NP)
                  REAL_TEMP_OUT(6)=WEIGHTTMP
                  IF((IZLAST.NE.0))REAL_TEMP_OUT(7)=ZLAST(NP)
                  IF ((NPPHSP(ISCORE)+1.LE.1000 .AND. PHSP_RESTART.EQ.0)
     *            ) THEN
                      IF ((IZLAST.NE.0)) THEN
                          STRING_TEMP_ZLAST_OUT(ISCORE)(32*WRITE_PHSP_CO
     *                    UNTER(ISCORE)+33: 32*WRITE_PHSP_COUNTER(ISCORE
     *                    )+64)=REC_TEMP_OUT(1:32)
                      ELSE
                          STRING_TEMP_OUT(ISCORE)(28*WRITE_PHSP_COUNTER(
     *                    ISCORE)+29: 28*WRITE_PHSP_COUNTER(ISCORE)+56)=
     *                    REC_TEMP_OUT(1:28)
                      END IF
                  ELSE
                      IF ((IZLAST.NE.0)) THEN
                          STRING_TEMP_ZLAST_OUT(ISCORE)(32*WRITE_PHSP_CO
     *                    UNTER(ISCORE)+1: 32*WRITE_PHSP_COUNTER(ISCORE)
     *                    +32)=REC_TEMP_OUT(1:32)
                      ELSE
                          STRING_TEMP_OUT(ISCORE)(28*WRITE_PHSP_COUNTER(
     *                    ISCORE)+1: 28*WRITE_PHSP_COUNTER(ISCORE)+28)=R
     *                    EC_TEMP_OUT(1:28)
                      END IF
                  END IF
                  WRITE_PHSP_COUNTER(ISCORE)=WRITE_PHSP_COUNTER(ISCORE)+
     *            1
                  IF ((NPPHSP(ISCORE)+1.EQ.1000.OR.WRITE_PHSP_COUNTER(IS
     *            CORE).EQ.1000)) THEN
                      IF ((IZLAST.NE.0 .AND. PHSP_RECL.EQ.4*8)) THEN
                          CLOSE(IOUTFLU(ISCORE))
                          PHSP_RECL_OLD=PHSP_RECL
                          PHSP_RECL=4*8000
                          OPEN(UNIT=IOUTFLU(ISCORE),FILE=phsp_fn(:lnblnk
     *                    1(phsp_fn)),ACCESS='DIRECT',RECL=PHSP_RECL, FO
     *                    RM='UNFORMATTED',STATUS='UNKNOWN')
                      ELSE IF((IZLAST.EQ.0 .AND. PHSP_RECL.EQ.4*7)) THEN
                          PHSP_RECL_OLD=PHSP_RECL
                          CLOSE(IOUTFLU(ISCORE))
                          PHSP_RECL=4*7000
                          OPEN(UNIT=IOUTFLU(ISCORE),FILE=phsp_fn(:lnblnk
     *                    1(phsp_fn)),ACCESS='DIRECT',RECL=PHSP_RECL, FO
     *                    RM='UNFORMATTED',STATUS='UNKNOWN')
                      END IF
                      IF ((IZLAST.NE.0)) THEN
                          WRITE(IOUTFLU(ISCORE),REC=INT(dble(NPPHSP(ISCO
     *                    RE)+1)/1000)) STRING_TEMP_ZLAST_OUT(ISCORE)
                      ELSE
                          WRITE(IOUTFLU(ISCORE),REC=INT(dble(NPPHSP(ISCO
     *                    RE)+1)/1000)) STRING_TEMP_OUT(ISCORE)
                      END IF
                      IF ((PHSP_RECL_OLD.NE.0)) THEN
                          PHSP_RECL=PHSP_RECL_OLD
                          CLOSE(IOUTFLU(ISCORE))
                          OPEN(UNIT=IOUTFLU(ISCORE),FILE=phsp_fn(:lnblnk
     *                    1(phsp_fn)),ACCESS='DIRECT',RECL=PHSP_RECL, FO
     *                    RM='UNFORMATTED',STATUS='UNKNOWN')
                      END IF
                      WRITE_PHSP_COUNTER(ISCORE)=0
                      WRITE_PHSP_SOFAR(ISCORE)=WRITE_PHSP_SOFAR(ISCORE)+
     *                1000
                  END IF
              END IF
              IF ((IZLAST .EQ. 2)) THEN
                  WRITE(IOUTGPH,3290) 0,0,0,0.0,0.0,0.0,0.0,JHSTRY
                  JHSTRY=JHSTRY+1
                  WRITE(IOUTGPH,3290) NP,IQ(NP),0, XLAST(NP),YLAST(NP),Z
     *            LAST(NP),0
3290              FORMAT(3I4,4G15.8,I12)
              END IF
              IF ((NPPHSP(ISCORE).EQ.phsp_upper_limit)) THEN
                  write(i_log,'(/a)') '***************** Error: '
                  write(i_log,'(//a,i19,4(a/))') ' *** WHILE WRITING PHA
     *SE SPACE FILE:', NPPHSP(ISCORE), ' particles in file.', ' Due to t
     *he fact that the counter for the number', ' of particles in the fi
     *le cannot be larger than this,', ' no more particles will be writt
     *en to the phsp file.'
                  write(i_log,'(/a)') '***************** Quiting now.'
                  call exit(1)
              END IF
          END IF
          NPASS(NP,ISCORE) = NPASS(NP,ISCORE)+1
3200      IF ((ICM_SPLIT.GT.0)) THEN
              IF ((ICMNEW.EQ.ICM_SPLIT .AND. W(NP).GT.0. .AND. NSPLIT(NP
     *        ).EQ.0)) THEN
                  NSPLIT(NP)=NSPLIT(NP)+1
                  IF ((IQ(NP).EQ.0 .AND. NSPLIT_PHOT.GT.1)) THEN
                      WT(NP)=WT(NP)/FLOAT(NSPLIT_PHOT)
                      IF ((IWATCH.EQ.1 .OR. IWATCH.EQ.2)) THEN
                          WRITE(6,3300)NSPLIT_PHOT
3300                      FORMAT(' SPLITTING PHOTON INTO ',I4,' PHOTONSE
     *ACH WITH THE FOLLOWING PROPERTIES:')
                          WRITE(6,3310)NP,NP+NSPLIT_PHOT-1,E(NP),IQ(NP),
     *                    IR(NP),X(NP),Y(NP), Z(NP),U(NP),V(NP),W(NP),LA
     *                    TCH(NP),WT(NP)
3310                      FORMAT(' RESULTING PHOTONS',T29,':',I5,' -',I5
     *,F9.3,2I4,3F8.3,3F7.3, I10,1PE10.3)
                      END IF
                      DO 3321 I=1,NSPLIT_PHOT-1
                          NP=NP+1
                          X(NP)=X(NP-1)
                          Y(NP)=Y(NP-1)
                          Z(NP)=Z(NP-1)
                          IR(NP)=IR(NP-1)
                          WT(NP)=WT(NP-1)
                          DNEAR(NP)=DNEAR(NP-1)
                          LATCH(NP)=LATCH(NP-1)
                          ZLAST(NP)=ZLAST(NP-1)
                          NFTIME(NP)=NFTIME(NP-1)
                          DO 3331 ISCORE=1,3
                              NPASS(NP,ISCORE)=NPASS(NP-1,ISCORE)
3331                      CONTINUE
3332                      CONTINUE
                          NSPLIT(NP)=NSPLIT(NP-1)
                          IPHAT(NP)=IPHAT(NP-1)
                          U(NP)=U(NP-1)
                          V(NP)=V(NP-1)
                          W(NP)=W(NP-1)
                          E(NP)=E(NP-1)
                          IQ(NP)=IQ(NP-1)
3321                  CONTINUE
3322                  CONTINUE
                  ELSE IF((IABS(IQ(NP)).EQ.1 .AND. NSPLIT_ELEC.GT.1)) TH
     *            EN
                      WT(NP)=WT(NP)/FLOAT(NSPLIT_ELEC)
                      IF ((IWATCH.EQ.1 .OR. IWATCH.EQ.2)) THEN
                          WRITE(6,3340)NSPLIT_ELEC
3340                      FORMAT(' SPLITTING ELECTRON INTO ',I4,' ELECTR
     *ONS EACH WITH THE', ' FOLLOWING PROPERTIES:')
                          WRITE(6,3350)NP,NP+NSPLIT_ELEC-1,E(NP)-PRM,IQ(
     *                    NP),IR(NP), X(NP),Y(NP),Z(NP),U(NP),V(NP),W(NP
     *                    ),LATCH(NP),WT(NP)
3350                      FORMAT(' RESULTING ELECTRONS',T29,':',I5,' -',
     *I5,F9.3,2I4,3F8.3,3F7.3, I10,1PE10.3)
                      END IF
                      DO 3361 I=1,NSPLIT_ELEC-1
                          NP=NP+1
                          X(NP)=X(NP-1)
                          Y(NP)=Y(NP-1)
                          Z(NP)=Z(NP-1)
                          IR(NP)=IR(NP-1)
                          WT(NP)=WT(NP-1)
                          DNEAR(NP)=DNEAR(NP-1)
                          LATCH(NP)=LATCH(NP-1)
                          ZLAST(NP)=ZLAST(NP-1)
                          NFTIME(NP)=NFTIME(NP-1)
                          DO 3371 ISCORE=1,3
                              NPASS(NP,ISCORE)=NPASS(NP-1,ISCORE)
3371                      CONTINUE
3372                      CONTINUE
                          NSPLIT(NP)=NSPLIT(NP-1)
                          IPHAT(NP)=IPHAT(NP-1)
                          U(NP)=U(NP-1)
                          V(NP)=V(NP-1)
                          W(NP)=W(NP-1)
                          E(NP)=E(NP-1)
                          IQ(NP)=IQ(NP-1)
3361                  CONTINUE
3362                  CONTINUE
                  END IF
              END IF
          END IF
          IF ((i_dsb.EQ.1 .AND. dsb_delta.GT.0 .AND. icmnew.EQ.splitcm_d
     *    sb .AND. w(np).GT.0. .AND. iphat(np).GT.1 .AND. iphat(np).LT.n
     *    brspl)) THEN
              WT(NP)=WT(NP)/FLOAT(iphat(np))
              ANG_dsb=twopi/FLOAT(iphat(np))
              cos_dsb = cos(ang_dsb)
              sin_dsb = sin(ang_dsb)
              split_dsb=iphat(np)
              iphat(np)=1
              DO 3381 I=1,split_dsb-1
                  NP=NP+1
                  X(NP)=X(NP-1)
                  Y(NP)=Y(NP-1)
                  Z(NP)=Z(NP-1)
                  IR(NP)=IR(NP-1)
                  WT(NP)=WT(NP-1)
                  DNEAR(NP)=DNEAR(NP-1)
                  LATCH(NP)=LATCH(NP-1)
                  ZLAST(NP)=ZLAST(NP-1)
                  NFTIME(NP)=NFTIME(NP-1)
                  DO 3391 ISCORE=1,3
                      NPASS(NP,ISCORE)=NPASS(NP-1,ISCORE)
3391              CONTINUE
3392              CONTINUE
                  NSPLIT(NP)=NSPLIT(NP-1)
                  IPHAT(NP)=IPHAT(NP-1)
                  W(NP)=W(NP-1)
                  E(NP)=E(NP-1)
                  IQ(NP)=IQ(NP-1)
                  X(NP)=X(NP-1)*cos_dsb+Y(NP-1)*sin_dsb
                  Y(NP)=-X(NP-1)*sin_dsb+Y(NP-1)*cos_dsb
                  U(NP)=U(NP-1)*cos_dsb+V(NP-1)*sin_dsb
                  V(NP)=-U(NP-1)*sin_dsb+V(NP-1)*cos_dsb
3381          CONTINUE
3382          CONTINUE
          END IF
          IF (( IQ(NP).EQ.0 .AND. IFORCE.EQ.1 )) THEN
              IF ((((ICMNEW.EQ.NFCMIN .AND. W(NP).GT.0) .OR. (ICMNEW.EQ.
     *        NFCMAX .AND. W(NP).LT.0)) .AND. NP_INC(NP).EQ.0 )) THEN
                  IF (( NFTIME(NP)+1.LE.NFMAX)) THEN
                      NFTIME(NP)=NFTIME(NP)+1
                      IF((rng_seed .GT. 128))call ranmar_get
                      RNNO35 = rng_array(rng_seed)*twom24
                      rng_seed = rng_seed + 1
                      IF((RNNO35 .EQ. 0.0))RNNO35=1.E-30
                      NP_INC(NP)=1
                      NP=NP+1
                      X(NP)=X(NP-1)
                      Y(NP)=Y(NP-1)
                      Z(NP)=Z(NP-1)
                      IR(NP)=IR(NP-1)
                      WT(NP)=WT(NP-1)
                      DNEAR(NP)=DNEAR(NP-1)
                      LATCH(NP)=LATCH(NP-1)
                      ZLAST(NP)=ZLAST(NP-1)
                      NFTIME(NP)=NFTIME(NP-1)
                      DO 3401 ISCORE=1,3
                          NPASS(NP,ISCORE)=NPASS(NP-1,ISCORE)
3401                  CONTINUE
3402                  CONTINUE
                      NSPLIT(NP)=NSPLIT(NP-1)
                      IPHAT(NP)=IPHAT(NP-1)
                      U(NP)=U(NP-1)
                      V(NP)=V(NP-1)
                      W(NP)=W(NP-1)
                      E(NP)=E(NP-1)
                      IQ(NP)=IQ(NP-1)
                      DUMU=USTEP
                      IRODUM=IROLD
                      IRNDUM=IRNEW
                      ICMNEWDUM=ICMNEW
                      ICMOLDDUM=ICM
                      MEDDUM=MEDIUM
                      IDUM=IDISC
                      PATHL=0.0
                      MEDTMP=0
                      IF ((IWATCH .EQ. 1 .OR. IWATCH .EQ.2)) THEN
                          WRITE(6,3410)NP
3410                      FORMAT(' Ficticious photon put on stack with N
     *P =',I4)
                      END IF
3421                  CONTINUE
                          USTEP=VACDST
                          IROLD=IR(NP)
                          MEDIUM=MED(IROLD)
                          IF ((MEDIUM.EQ.0)) THEN
                              DELTAP=0.
                          ELSE
                              IF ((MEDTMP .NE. MEDIUM)) THEN
                                  MEDTMP=MEDIUM
                                  LGLE=GE1(MEDIUM)*GLE+GE0(MEDIUM)
                                  DELTAP=GMFP1(LGLE,MEDIUM)*GLE+GMFP0(LG
     *                            LE,MEDIUM)
                              END IF
                              IF ((IRAYLR(IROLD) .EQ. 1)) THEN
                                  COHFAC=COHE1(LGLE,MEDIUM)*GLE+COHE0(LG
     *                            LE,MEDIUM)
                              ELSE
                                  COHFAC=1.0
                              END IF
                          END IF
                          CALL HOWFAR
                          IF((DELTAP.NE.0))PATHL=PATHL+USTEP/(DELTAP*COH
     *                    FAC)
                          IF(((IR_to_CM(IRNEW).LT.NFCMIN) .OR. (IR_to_CM
     *                    (IRNEW).GT.NFCMAX) .OR. (IRNEW.EQ.1)))GO TO342
     *                    2
                          IF ((E(NP).LT.PCUT(IRNEW))) THEN
                              IF ((MFORCF.EQ.0)) THEN
                                  MFORCF=1
                                  WRITE(6,3430)IRNEW,IRNEW,PCUT(IRNEW),E
     *                            (NP),IRODUM,IR(NP)
3430                              FORMAT(/ /' *** NO photon interactionf
     *orcing in region',I4/ '     for particles of energies < PCUT(',I4,
     *') =', F8.3,'MeV'/ '     which differs from the pcut values elsewh
     *ere.'// '     This photon (E=',F8.3,'MeV) is forced to interact in
     *'/ '     regions',I4,' TO',I4,'.'//)
                                  WRITE(IOUTLIST, '(//'' *** NO photon i
     *nteraction forcing in region'',I4/                        ''     f
     *or particles of energies < PCUT('',I4,'') ='',F8.3,''MeV''/
     *      ''     which differs from the pcut values elsewhere.''//
     *                    ''     This photon (E='',F8.3,''MeV) is forced
     * to interact in''/                ''     regions'',I4,'' TO '',I4/
     */)') IRNEW,IRNEW,PCUT(IRNEW), E(NP),IRODUM,IR(NP)
                              END IF
                              GO TO3422
                          END IF
                          IR(NP)=IRNEW
                          X(NP)=X(NP)+USTEP*U(NP)
                          Y(NP)=Y(NP)+USTEP*V(NP)
                          Z(NP)=Z(NP)+USTEP*W(NP)
                      GO TO 3421
3422                  CONTINUE
                      X(NP)=X(NP-1)
                      Y(NP)=Y(NP-1)
                      Z(NP)=Z(NP-1)
                      IR(NP)=IR(NP-1)
                      WT(NP)=WT(NP-1)
                      DNEAR(NP)=DNEAR(NP-1)
                      LATCH(NP)=LATCH(NP-1)
                      ZLAST(NP)=ZLAST(NP-1)
                      NFTIME(NP)=NFTIME(NP-1)
                      DO 3441 ISCORE=1,3
                          NPASS(NP,ISCORE)=NPASS(NP-1,ISCORE)
3441                  CONTINUE
3442                  CONTINUE
                      NSPLIT(NP)=NSPLIT(NP-1)
                      IPHAT(NP)=IPHAT(NP-1)
                      U(NP)=U(NP-1)
                      V(NP)=V(NP-1)
                      W(NP)=W(NP-1)
                      E(NP)=E(NP-1)
                      USTEP=DUMU
                      IROLD=IRODUM
                      IRNEW=IRNDUM
                      ICMNEW=ICMNEWDUM
                      ICM=ICMOLDDUM
                      MEDIUM=MEDDUM
                      IDISC=IDUM
                      IF ((PATHL .LE. 1.0E-3)) THEN
                          GWAIT(NP-1)=PATHL*(1.-0.5*PATHL)
                      ELSE
                          GWAIT(NP-1)=1.-EXP(-PATHL)
                      END IF
                      GWTOLD=WT(NP-1)
                      WT(NP-1)=GWTOLD*GWAIT(NP-1)
                      GWAIT(NP)=1.-GWAIT(NP-1)
                      WT(NP)=GWTOLD*GWAIT(NP)
                      EPSLON=RNNO35*GWAIT(NP)
                      IF (( (1.-GWAIT(NP)+EPSLON) .LE. 1.0E-3)) THEN
                          DPMFP=(1.-GWAIT(NP)+EPSLON)*(1.+0.5*(1.-GWAIT(
     *                    NP)+EPSLON))
                      ELSE
                          IF ((GWAIT(NP).EQ.EPSLON)) THEN
                              DPMFP=1.0E30
                          ELSE
                              DPMFP=-LOG(GWAIT(NP)-EPSLON)
                          END IF
                      END IF
                  END IF
              END IF
          END IF
          IAUSFL(6) = 0
          RETURN
      END IF
      IF ((IBRSPL.EQ.1 .AND. IRRLTT.EQ.0)) THEN
          IF ((IARG.EQ.6 .OR. IARG.EQ.12 .OR. IARG.EQ.28)) THEN
              IF ((BTEST(LATCH(NP), 0))) THEN
                  nbr_split=1
              ELSE
                  nbr_split=NBRSPL
              END IF
          END IF
      ELSE IF((IBRSPL.EQ.2)) THEN
          IF (( iarg .GT. 5 .AND. z(np) .GT. ssd )) THEN
              nbr_split = 1
              GOTO 3450
          END IF
          IF ((i_dsb.EQ.1 .AND. z(np).LT.Z_min_CM(splitcm_dsb) .AND. dsb
     *    _nbin.GT.1)) THEN
              do_dsb=1
          ELSE
              do_dsb=0
          END IF
          IF ((iarg .EQ. 6 .OR. iarg .EQ. 12 .OR. iarg .EQ. 28 )) THEN
              IF ((LATCH_OPTION.EQ.2 .OR. LATCH_OPTION.EQ.3)) THEN
                  LATCHIN=LATCH(np)
                  IF ((BTEST(LATCHIN, 30))) THEN
                      IBITH30=1073741824
                      LATCHOUT=LATCHIN-IBITH30
                  ELSE
                      IBITH30=0
                  END IF
                  LATCHOUT = IBSET(LATCHIN,0)
                  IF ((LATCHIN .GE. LNOB29)) THEN
                      LATCHOUT=LATCHOUT+ (IREGION_TO_BIT(IRL)- INT(LATCH
     *                OUT/LNOB29))*LNOB29
                  ELSE
                      LATCHOUT = LATCHOUT+IREGION_TO_BIT(IRL)*LNOB29
                  END IF
                  LATCHOUT=LATCHOUT+IBITH30
                  LATCH(np)=LATCHOUT
              END IF
              IF((IZLAST.EQ.1))ZLAST(np)=Z(np)
              nbr_split = NBRSPL
              IF (( iarg .EQ. 6 )) THEN
                  IF (( iphat(np) .GT. 1 )) THEN
                      IF (( use_bcse .AND. is_bcse_medium(med(ir(np))) )
     *                ) THEN
                          abrspl = nbrspl_orgnl
                          abrspl = abrspl/bcse_factor
                          IF (( abrspl .LT. 1 )) THEN
                              write(i_log,'(/a)') '***************** Err
     *or: '
                              write(i_log,*) 'Brems enhancement factor '
     *                        ,abrspl, ' is greater than NBRSPL!'
                              write(i_log,'(/a)') '***************** Qui
     *ting now.'
                              call exit(1)
                          END IF
                          IF((rng_seed .GT. 128))call ranmar_get
                          rndm_bcse = rng_array(rng_seed)*twom24
                          rng_seed = rng_seed + 1
                          nbrspl = abrspl
                          IF((rndm_bcse .LT. abrspl - nbrspl))nbrspl = n
     *                    brspl + 1
                          nbr_split = nbrspl
                          enpold_orgnl = e(np)
                          wt_i = wt(np)
                          wt(np) = (wt_i*nbrspl)/nbrspl_orgnl
                      ELSE
                          nbrspl = iphat(np)
                          nbr_split = nbrspl
                      END IF
                      iphat_i = iphat(np)
                      iphat(np) = 1
                      count_nbrem = count_nbrem + nbrspl
                      IF (( ibrdst .EQ. 0 )) THEN
                          call do_smart_brems
                      ELSE
                          call brems
                          call kill_the_photons(npold+1,0)
                          count_kill_brem = count_kill_brem + count_kill
     *                    _tmp
                      END IF
                      iphat(npold) = iphat_i
                      IF (( use_bcse .AND. is_bcse_medium(med(ir(np))) )
     *                ) THEN
                          wt(npold) = wt_i
                          IF((rng_seed .GT. 128))call ranmar_get
                          rndm_bcse = rng_array(rng_seed)*twom24
                          rng_seed = rng_seed + 1
                          IF (( rndm_bcse*bcse_factor .GT. 1 )) THEN
                              e(npold) = enpold_orgnl
                              wt_i = 0
                          END IF
                          DO 3461 ip=npold+1,np
                              IF (( iphat(ip) .GT. 1 )) THEN
                                  wt(ip) = wt_i
                                  iphat(ip) = iphat_i
                              END IF
3461                      CONTINUE
3462                      CONTINUE
                          nbrspl = nbrspl_orgnl
                          nbr_split = nbrspl
                      END IF
                  ELSE
                      count_nbrem = count_nbrem + 1
                      nbr_split=1
                      call brems
                      call kill_the_photons(npold+1,0)
                      count_kill_brem = count_kill_brem + count_kill_tmp
                  END IF
                  IF((LATCH_OPTION.EQ.2 .OR. LATCH_OPTION.EQ.3))LATCH(np
     *            old)=LATCHIN
              ELSE IF(( iarg .EQ. 12 )) THEN
                  IF (( iphat(np) .GT. 1 )) THEN
                      nbr_split = iphat(np)
                      iphat(np) = 1
                      count_nannih = count_nannih + 2*nbr_split
                  ELSE
                      count_nannih = count_nannih + 2
                      nbr_split=1
                  END IF
                  call annih
                  call kill_the_photons(npold,0)
                  count_kill_annih = count_kill_annih + count_kill_tmp
              ELSE
                  IF ((iphat(np) .GT. 1)) THEN
                      count_nannih = count_nannih + 2*iphat(np)
                      npold = np
                      call uniform_photons(2*iphat(np),rm)
                  ELSE
                      count_nannih = count_nannih + 2
                      npold = np
                      IF((rng_seed .GT. 128))call ranmar_get
                      costhe = rng_array(rng_seed)*twom24
                      rng_seed = rng_seed + 1
                      costhe = 2*costhe-1
                      sinthe = sqrt(max(0.0,(1-costhe)*(1+costhe)))
3471                  CONTINUE
                          IF((rng_seed .GT. 128))call ranmar_get
                          xphi = rng_array(rng_seed)*twom24
                          rng_seed = rng_seed + 1
                          xphi = 2*xphi - 1
                          xphi2 = xphi*xphi
                          IF((rng_seed .GT. 128))call ranmar_get
                          yphi = rng_array(rng_seed)*twom24
                          rng_seed = rng_seed + 1
                          yphi2 = yphi*yphi
                          rhophi2 = xphi2 + yphi2
                          IF(rhophi2.LE.1)GO TO3472
                      GO TO 3471
3472                  CONTINUE
                      rhophi2 = 1/rhophi2
                      cphi = (xphi2 - yphi2)*rhophi2
                      sphi = 2*xphi*yphi*rhophi2
                      e(np) = prm
                      iq(np) = 0
                      X(np)=X(npold)
                      Y(np)=Y(npold)
                      Z(np)=Z(npold)
                      IR(np)=IR(npold)
                      WT(np)=WT(npold)
                      DNEAR(np)=DNEAR(npold)
                      LATCH(np)=LATCH(npold)
                      ZLAST(np)=ZLAST(npold)
                      NFTIME(np)=NFTIME(npold)
                      DO 3481 ISCORE=1,3
                          NPASS(np,ISCORE)=NPASS(npold,ISCORE)
3481                  CONTINUE
3482                  CONTINUE
                      NSPLIT(np)=NSPLIT(npold)
                      IPHAT(np)=IPHAT(npold)
                      u(np) = sinthe*cphi
                      v(np) = sinthe*sphi
                      w(np) = costhe
                      np = np+1
                      IF (( np .GT. 10000 )) THEN
                          write(i_log,'(/a)') '***************** Error:
     *'
                          write(i_log,'(//,3a,/,2(a,i9))') ' In subrouti
     *ne ','ANNIH_AT_REST', ' stack size exceeded! ',' $MAXSTACK = ',100
     *                    00,' np = ',np
                          write(i_log,'(/a)') '***************** Quiting
     * now.'
                          call exit(1)
                      END IF
                      e(np) = prm
                      iq(np) = 0
                      X(np)=X(npold)
                      Y(np)=Y(npold)
                      Z(np)=Z(npold)
                      IR(np)=IR(npold)
                      WT(np)=WT(npold)
                      DNEAR(np)=DNEAR(npold)
                      LATCH(np)=LATCH(npold)
                      ZLAST(np)=ZLAST(npold)
                      NFTIME(np)=NFTIME(npold)
                      DO 3491 ISCORE=1,3
                          NPASS(np,ISCORE)=NPASS(npold,ISCORE)
3491                  CONTINUE
3492                  CONTINUE
                      NSPLIT(np)=NSPLIT(npold)
                      IPHAT(np)=IPHAT(npold)
                      u(np) = -u(np-1)
                      v(np) = -v(np-1)
                      w(np) = -w(np-1)
                      call kill_the_photons(npold,0)
                      count_kill_annih = count_kill_annih + count_kill_t
     *                mp
                  END IF
              END IF
              IF ((IZLAST.EQ.2)) THEN
                  DO 3501 I=NPold,NP
                      XLAST(I)=X(I)
                      YLAST(I)=Y(I)
                      ZLAST(I)=Z(I)
3501              CONTINUE
3502              CONTINUE
              END IF
              np=np+1
              IF (( np .GT. 10000 )) THEN
                  write(i_log,'(/a)') '***************** Error: '
                  write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','au
     *sgab(after brems or annih)', ' stack size exceeded! ',' $MAXSTACK
     *= ',10000,' np = ',np
                  write(i_log,'(/a)') '***************** Quiting now.'
                  call exit(1)
              END IF
              wt(np) = 0
              return
          END IF
          IF (( iarg .EQ. 15 .OR. iarg .EQ. 17 .OR. iarg .EQ. 19 .OR. ia
     *    rg .EQ. 23 )) THEN
              IF (( iphat(np) .LT. NBRSPL .AND. (ICM_DBS.EQ.0 .OR. Z(NP)
     *        .LE.ZRR_DBS) .AND. (rhor(ir(np)).GE.1.2e-2 .OR. do_dsb.EQ.
     *        1))) THEN
                  IF (( (iarg .NE. 17 .OR. ibcmp(irl) .EQ. 0) .AND. iarg
     *             .NE. 23 )) THEN
                      IF((rng_seed .GT. 128))call ranmar_get
                      rnno35 = rng_array(rng_seed)*twom24
                      rng_seed = rng_seed + 1
                      IF (( rnno35*nbrspl .GT. iphat(np) )) THEN
                          wt(np) = 0
                          return
                      END IF
                      wt(np) = wt(np)*float(nbrspl)/float(iphat(np))
                      iphat(np)=nbrspl
                  END IF
              END IF
              IF ((LATCH_OPTION.EQ.2 .OR. LATCH_OPTION.EQ.3)) THEN
                  LATCHOLD=LATCH(np)
                  LATCHIN=LATCH(np)
                  IF((LATCH_OPTION.EQ.3))LATCHIN=IBSET(LATCHIN,IREGION_T
     *            O_BIT(IRL))
                  IF ((BTEST(LATCHIN, 30))) THEN
                      IBITH30=1073741824
                      LATCHOUT=LATCHIN-IBITH30
                  ELSE
                      IBITH30=0
                  END IF
                  IF ((LATCHIN .GE. LNOB29)) THEN
                      LATCHOUT=LATCHOUT+ (IREGION_TO_BIT(IRL)- INT(LATCH
     *                OUT/LNOB29))*LNOB29
                  ELSE
                      LATCHOUT = LATCHOUT+IREGION_TO_BIT(IRL)*LNOB29
                  END IF
                  LATCHOUT=LATCHOUT+IBITH30
              END IF
              IF((IZLAST.EQ.1))ZLASTOLD=ZLAST(np)
              IF (( iarg .EQ. 15 .OR. iarg .EQ. 19 )) THEN
                  IF((LATCH_OPTION.EQ.2 .OR. LATCH_OPTION.EQ.3))LATCH(np
     *            )=LATCHOUT
                  IF((IZLAST.EQ.1))ZLAST(np)=Z(np)
                  IF ((iphat(np).EQ.nbrspl .AND. ICM_DBS.GT.0 .AND. Z(NP
     *            ).GT.ZRR_DBS)) THEN
                      IF ((iarg.EQ.15)) THEN
                          count_npair= count_npair+nbrspl
                          call do_pair
                      ELSE
                          count_nphoto= count_nphoto+nbrspl
                          call do_photo
                      END IF
                      IF ((IZLAST.EQ.2)) THEN
                          DO 3511 I=NPold,NP
                              ZLAST(I)=Z(I)
                              XLAST(I)=X(I)
                              YLAST(I)=Y(I)
3511                      CONTINUE
3512                      CONTINUE
                      END IF
                  ELSE
                      nbr_split = 1
                      return
                  END IF
              ELSE IF(( iarg .EQ. 17 )) THEN
                  time_start = etime(time_array)
                  IF ((iphat(np).EQ.nbrspl)) THEN
                      count_ncomp = count_ncomp + nbrspl
                      IF (( ibcmp(ir(np)) .EQ. 1 .OR. (ICM_DBS.GT.0 .AND
     *                . Z(NP).GT.ZRR_DBS))) THEN
                          call do_compton
                          count_kill_comp = count_kill_comp + count_kill
     *                    _tmp
                      ELSE
                          IF((LATCH_OPTION.EQ.3))LATCH(np)=LATCHIN
                          IF((IZLAST.EQ.1))zlast(np)=z(np)
                          call do_smart_compton
                          IF((LATCH_OPTION.EQ.2 .OR. LATCH_OPTION.EQ.3))
     *                    LATCH(npold)= LATCHOUT
                          IF ((IZLAST.EQ.2)) THEN
                              DO 3521 I=NPold,NP
                                  ZLAST(I)=Z(I)
                                  XLAST(I)=X(I)
                                  YLAST(I)=Y(I)
3521                          CONTINUE
3522                          CONTINUE
                          END IF
                      END IF
                  ELSE
                      count_ncomp = count_ncomp + 1
                      IF((LATCH_OPTION.EQ.2 .OR. LATCH_OPTION.EQ.3))LATC
     *                H(np)= LATCHOUT
                      IF((IZLAST.EQ.1))zlast(np)=z(np)
                      call compt
                      IF ((LATCH_OPTION.EQ.2 .OR. LATCH_OPTION.EQ.3)) TH
     *                EN
                          IF ((np.GT.npold)) THEN
                              LATCH(npold)=LATCHIN
                          ELSE
                              LATCH(npold)=LATCHOLD
                          END IF
                      END IF
                      IF((IZLAST.EQ.1 .AND. np.EQ.npold))zlast(npold)=zl
     *                astold
                      call kill_the_photons(npold,0)
                      count_kill_comp = count_kill_comp + count_kill_tmp
                      IF ((IZLAST.EQ.2)) THEN
                          DO 3531 I=NPold,NP
                              ZLAST(I)=Z(I)
                              XLAST(I)=X(I)
                              YLAST(I)=Y(I)
3531                      CONTINUE
3532                      CONTINUE
                      END IF
                  END IF
                  time_end = etime(time_array)
                  time_comp = time_comp + time_end - time_start
              ELSE
                  IF((LATCH_OPTION.EQ.3))LATCH(np)=LATCHIN
                  IF((IZLAST.EQ.1))zlast(np)=z(np)
                  IF ((iphat(np).EQ.1)) THEN
                      call do_rayleigh(1)
                  ELSE
                      call do_rayleigh(nbrspl)
                  END IF
                  IF ((IZLAST.EQ.2)) THEN
                      DO 3541 I=npold,np
                          zlast(I)=z(I)
                          xlast(I)=x(I)
                          ylast(I)=y(I)
3541                  CONTINUE
3542                  CONTINUE
                  END IF
              END IF
              IF (( iarg .EQ. 16 )) THEN
              END IF
              IF (( iarg .EQ. 20 )) THEN
              END IF
              np=np+1
              IF (( np .GT. 10000 )) THEN
                  write(i_log,'(/a)') '***************** Error: '
                  write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','au
     *sgab(after compton or rayleigh)', ' stack size exceeded! ',' $MAXS
     *TACK = ',10000,' np = ',np
                  write(i_log,'(/a)') '***************** Quiting now.'
                  call exit(1)
              END IF
              wt(np) = 0
              return
          END IF
          IF (( iarg .EQ. 25 )) THEN
              IF (( iphat(np) .EQ. nbrspl )) THEN
                  ener = e(np)
                  npold=np
                  call uniform_photons(nbrspl,ener)
              ELSE
                  call kill_the_photons(np,0)
              END IF
              return
          END IF
      END IF
      IF((IARG.EQ.6))NUM_BREM=NUM_BREM+nbr_split
3450  CONTINUE
      IF ((IZLAST .EQ. 1)) THEN
          IF ((IARG .EQ. 7)) THEN
              DO 3551 I=NPold,NP
                  ZLAST(I)=Z(I)
3551          CONTINUE
3552          CONTINUE
          ELSE IF((IARG .EQ. 18)) THEN
              IF ((NP .GT. NPold .OR. i_survived_rr .GT. 0)) THEN
                  DO 3561 I=NPold,NP
                      ZLAST(I)=Z(I)
3561              CONTINUE
3562              CONTINUE
              END IF
          ELSE IF((IARG .EQ. 24)) THEN
              ZLAST(NP) = Z(NP)
          ELSE IF((IARG .EQ. 13 .OR. IARG .EQ. 14)) THEN
              DO 3571 I=NPold,NP
                  ZLAST(I)=Z(I)
3571          CONTINUE
3572          CONTINUE
          ELSE IF((IARG .EQ. 20)) THEN
              IF ((NP.GT.NPold .OR. i_survived_rr .GT. 0 .OR. IQ(NPold).
     *        EQ.-1)) THEN
                  DO 3581 I=NPold,NP
                      ZLAST(I)=Z(I)
3581              CONTINUE
3582              CONTINUE
              END IF
          ELSE IF((IARG .EQ. 16)) THEN
              DO 3591 I=NPold,NP
                  ZLAST(I)=Z(I)
3591          CONTINUE
3592          CONTINUE
          END IF
      ELSE IF((IZLAST .EQ. 2)) THEN
          IF ((IARG .EQ. 7)) THEN
              DO 3601 I=NPold,NP
                  XLAST(I)=X(I)
                  YLAST(I)=Y(I)
                  ZLAST(I)=Z(I)
3601          CONTINUE
3602          CONTINUE
          ELSE IF((IARG .EQ. 18)) THEN
              IF ((NP .GT. NPold .OR. i_survived_rr .GT. 0)) THEN
                  DO 3611 I=NPold,NP
                      XLAST(I)=X(I)
                      YLAST(I)=Y(I)
                      ZLAST(I)=Z(I)
3611              CONTINUE
3612              CONTINUE
              END IF
          ELSE IF((IARG .EQ. 24)) THEN
              ZLAST(NP) = Z(NP)
              YLAST(NP) = Y(NP)
              XLAST(NP) = X(NP)
          ELSE IF((IARG .EQ. 13 .OR. IARG .EQ. 14)) THEN
              DO 3621 I=NPold,NP
                  XLAST(I)=X(I)
                  YLAST(I)=Y(I)
                  ZLAST(I)=Z(I)
3621          CONTINUE
3622          CONTINUE
          ELSE IF((IARG .EQ. 20)) THEN
              IF ((NP.GT.NPold .OR. i_survived_rr .GT. 0 .OR. IQ(NPold).
     *        EQ.-1)) THEN
                  DO 3631 I=NPold,NP
                      XLAST(I)=X(I)
                      YLAST(I)=Y(I)
                      ZLAST(I)=Z(I)
3631              CONTINUE
3632              CONTINUE
              END IF
          ELSE IF((IARG .EQ. 16)) THEN
              DO 3641 I=NPold,NP
                  XLAST(I)=X(I)
                  YLAST(I)=Y(I)
                  ZLAST(I)=Z(I)
3641          CONTINUE
3642          CONTINUE
          END IF
      END IF
      IF ((LATCH_OPTION .LT. 3 .OR. (LATCH_OPTION .EQ. 3 .AND. IQ(NP) .N
     *E. 0) )) THEN
          IF (((IARG .EQ. 0) .AND. (IREGION_TO_BIT(IRL) .NE. 0) )) THEN
              LATCH(NP) = IBSET(LATCH(NP),IREGION_TO_BIT(IRL))
          END IF
      END IF
      IF ((LATCH_OPTION .EQ. 1 .AND. IREGION_TO_BIT(IRL) .NE. 0)) THEN
          IF ((IARG .EQ. 7)) THEN
              DO 3651 I=NPold+1,NP
                  LATCH(I) = IBSET(0,IREGION_TO_BIT(IRL))
3651          CONTINUE
3652          CONTINUE
          ELSE IF((IARG .EQ. 9)) THEN
              LATCH(NP) = IBSET(0,IREGION_TO_BIT(IRL))
          ELSE IF((IARG .EQ. 11)) THEN
              IF ((IQ(NP) .EQ. 1)) THEN
                  LATCH(NP-1) = IBSET(0,IREGION_TO_BIT(IRL))
              ELSE
                  LATCH(NP) = IBSET(0,IREGION_TO_BIT(IRL))
              END IF
          ELSE IF((IARG .EQ. 13 .OR. IARG .EQ. 14 )) THEN
              DO 3661 I=NPold,NP
                  LATCH(I) = IBSET(0,IREGION_TO_BIT(IRL))
3661          CONTINUE
3662          CONTINUE
          ELSE IF((IARG .EQ. 16)) THEN
              DO 3671 I=NPold,NP
                  LATCH(I) = IBSET(0,IREGION_TO_BIT(IRL))
3671          CONTINUE
3672          CONTINUE
          ELSE IF((IARG .EQ. 18)) THEN
              DO 3681 I=NPold+1,NP
                  LATCH(I) = IBSET(0,IREGION_TO_BIT(IRL))
3681          CONTINUE
3682          CONTINUE
          ELSE IF((IARG .EQ. 20)) THEN
              IF ((NP.GT.NPold .OR. i_survived_rr .GT. 0 .OR. IQ(NPold).
     *        EQ.-1)) THEN
                  DO 3691 I=NPold,NP
                      LATCH(I) = IBSET(0,IREGION_TO_BIT(IRL))
3691              CONTINUE
3692              CONTINUE
              END IF
          END IF
      ELSE IF((LATCH_OPTION .EQ. 2 .AND. IARG .GT. 6)) THEN
          IF ((IARG .EQ. 9)) THEN
              IF ((BTEST(LATCH(NP), 30))) THEN
                  IBITH30=1073741824
                  LATCH(NP)=LATCH(NP)-IBITH30
              ELSE
                  IBITH30=0
              END IF
              IF ((LATCH(NP) .GE. LNOB29)) THEN
                  LATCH(NP) = LATCH(NP)+(IREGION_TO_BIT(IRL)- INT(LATCH(
     *            NP)/LNOB29))*LNOB29
              ELSE
                  LATCH(NP) = LATCH(NP)+IREGION_TO_BIT(IRL)*LNOB29
              END IF
              LATCH(NP)=LATCH(NP)+IBITH30
          ELSE IF((IARG .EQ. 18)) THEN
              DO 3701 I=NPold+1,NP
                  IF ((BTEST(LATCH(I), 30))) THEN
                      IBITH30=1073741824
                      LATCH(I)=LATCH(I)-IBITH30
                  ELSE
                      IBITH30=0
                  END IF
                  IF ((LATCH(I) .GE. LNOB29)) THEN
                      LATCH(I) = LATCH(I)+(IREGION_TO_BIT(IRL)- INT(LATC
     *                H(I)/LNOB29))*LNOB29
                  ELSE
                      LATCH(I) = LATCH(I)+IREGION_TO_BIT(IRL)*LNOB29
                  END IF
                  LATCH(I)=LATCH(I)+IBITH30
3701          CONTINUE
3702          CONTINUE
          ELSE IF((IARG .EQ. 7)) THEN
              DO 3711 I=NPold,NP
                  IF ((IQ(I).EQ.0)) THEN
                      IF ((BTEST(LATCH(I), 30))) THEN
                          IBITH30=1073741824
                          LATCH(I)=LATCH(I)-IBITH30
                      ELSE
                          IBITH30=0
                      END IF
                      LATCH(I) = IBSET(LATCH(I),0)
                      IF ((LATCH(I) .GE. LNOB29)) THEN
                          LATCH(I) =LATCH(I)+(IREGION_TO_BIT(IRL)- INT(L
     *                    ATCH(I)/LNOB29))*LNOB29
                      ELSE
                          LATCH(I) = LATCH(I)+IREGION_TO_BIT(IRL)*LNOB29
                      END IF
                      LATCH(I)=LATCH(I)+IBITH30
                  END IF
3711          CONTINUE
3712          CONTINUE
          ELSE IF((IARG .EQ. 16)) THEN
              DO 3721 I=NPold,NP
                  IF ((BTEST(LATCH(I), 30))) THEN
                      IBITH30=1073741824
                      LATCH(I)=LATCH(I)-IBITH30
                  ELSE
                      IBITH30=0
                  END IF
                  IBITL30 = IBITH30
                  IF ((LATCH(I) .GE. LNOB29)) THEN
                      LATCH(I)=LATCH(I)+(IREGION_TO_BIT(IRL)- INT(LATCH(
     *                I)/LNOB29))*LNOB29
                  ELSE
                      LATCH(I) = LATCH(I)+IREGION_TO_BIT(IRL)*LNOB29
                  END IF
                  LATCH(I)=LATCH(I)+IBITH30
3721          CONTINUE
3722          CONTINUE
          ELSE IF((IARG .EQ. 11)) THEN
              IF ((IQ(NP) .EQ. 1)) THEN
                  IF ((BTEST(LATCH(NP-1), 30))) THEN
                      IBITL30=1073741824
                      LATCH(NP-1)=LATCH(NP-1)-IBITL30
                  ELSE
                      IBITL30=0
                  END IF
                  IF ((LATCH(NP-1) .GE. LNOB29)) THEN
                      LATCH(NP-1) = LATCH(NP-1)+(IREGION_TO_BIT(IRL)- IN
     *                T(LATCH(NP-1)/LNOB29))*LNOB29
                  ELSE
                      LATCH(NP-1) = LATCH(NP-1)+IREGION_TO_BIT(IRL)*LNOB
     *                29
                  END IF
                  LATCH(NP-1)=LATCH(NP-1)+IBITL30
              ELSE
                  IF ((BTEST(LATCH(NP), 30))) THEN
                      IBITH30=1073741824
                      LATCH(NP)=LATCH(NP)-IBITH30
                  ELSE
                      IBITH30=0
                  END IF
                  IF ((LATCH(NP) .GE. LNOB29)) THEN
                      LATCH(NP) = LATCH(NP)+(IREGION_TO_BIT(IRL)- INT(LA
     *                TCH(NP)/LNOB29))*LNOB29
                  ELSE
                      LATCH(NP) = LATCH(NP)+IREGION_TO_BIT(IRL)*LNOB29
                  END IF
                  LATCH(NP)=LATCH(NP)+IBITH30
              END IF
          ELSE IF((IARG .EQ. 13 .OR. IARG .EQ. 14 )) THEN
              DO 3731 I=NPold,NP
                  IF ((BTEST(LATCH(I), 30))) THEN
                      IBITH30=1073741824
                      LATCH(I)=LATCH(I)-IBITH30
                  ELSE
                      IBITH30=0
                  END IF
                  LATCH(I) = IBSET(LATCH(I),0)
                  IF ((LATCH(I) .GE. LNOB29)) THEN
                      LATCH(I)=LATCH(I)+(IREGION_TO_BIT(IRL)- INT(LATCH(
     *                I)/LNOB29))*LNOB29
                  ELSE
                      LATCH(I) = LATCH(I)+IREGION_TO_BIT(IRL)*LNOB29
                  END IF
                  LATCH(I)=LATCH(I)+IBITH30
3731          CONTINUE
3732          CONTINUE
          ELSE IF((IARG .EQ. 20)) THEN
              IF ((NP.GT.NPold .OR. i_survived_rr .GT. 0 .OR. IQ(NPold).
     *        EQ.-1)) THEN
                  DO 3741 I=NPold,NP
                      IF ((BTEST(LATCH(I), 30))) THEN
                          IBITH30=1073741824
                          LATCH(I)=LATCH(I)-IBITH30
                      ELSE
                          IBITH30=0
                      END IF
                      IF ((LATCH(I) .GE. LNOB29)) THEN
                          LATCH(I) = LATCH(I)+(IREGION_TO_BIT(IRL)- INT(
     *                    LATCH(I)/LNOB29))*LNOB29
                      ELSE
                          LATCH(I) = LATCH(I)+IREGION_TO_BIT(IRL)*LNOB29
                      END IF
                      LATCH(I)=LATCH(I)+IBITH30
3741              CONTINUE
3742              CONTINUE
              END IF
          END IF
      ELSE IF((LATCH_OPTION .EQ. 3 .AND. IARG .GT. 6)) THEN
          IF ((IARG .EQ. 9)) THEN
              IF ((BTEST(LATCH(NP), 30))) THEN
                  IBITH30=1073741824
                  LATCH(NP)=LATCH(NP)-IBITH30
              ELSE
                  IBITH30=0
              END IF
              IF ((LATCH(NP) .GE. LNOB29)) THEN
                  LATCH(NP) = LATCH(NP)+(IREGION_TO_BIT(IRL)-INT(LATCH(N
     *            P)/LNOB29))*LNOB29
              ELSE
                  LATCH(NP) = LATCH(NP)+IREGION_TO_BIT(IRL)*LNOB29
              END IF
              LATCH(NP)=LATCH(NP)+IBITH30
          ELSE IF((IARG .EQ. 18)) THEN
              DO 3751 I=NPold+1,NP
                  LATCH(I)= IBSET(LATCH(I),IREGION_TO_BIT(IRL))
                  IF ((BTEST(LATCH(I), 30))) THEN
                      IBITH30=1073741824
                      LATCH(I)=LATCH(I)-IBITH30
                  ELSE
                      IBITH30=0
                  END IF
                  IF ((LATCH(I) .GE. LNOB29)) THEN
                      LATCH(I) = LATCH(I)+(IREGION_TO_BIT(IRL)- INT(LATC
     *                H(I)/LNOB29))*LNOB29
                  ELSE
                      LATCH(I) = LATCH(I)+IREGION_TO_BIT(IRL)*LNOB29
                  END IF
                  LATCH(I)=LATCH(I)+IBITH30
3751          CONTINUE
3752          CONTINUE
              IF ((NP.GT.NPold .OR. i_survived_rr .GT. 0)) THEN
                  LATCH(NPold)=IBSET(LATCH(NPold),IREGION_TO_BIT(IRL))
              END IF
          ELSE IF((IARG .EQ. 7)) THEN
              DO 3761 I=NPold,NP
                  IF ((IQ(I).EQ.0)) THEN
                      LATCH(I) = IBSET(LATCH(I),0)
                      IF ((BTEST(LATCH(I), 30))) THEN
                          IBITH30=1073741824
                          LATCH(I)=LATCH(I)-IBITH30
                      ELSE
                          IBITH30=0
                      END IF
                      IF ((LATCH(I) .GE. LNOB29)) THEN
                          LATCH(I) =LATCH(I)+(IREGION_TO_BIT(IRL)- INT(L
     *                    ATCH(I)/LNOB29))*LNOB29
                      ELSE
                          LATCH(I) = LATCH(I)+IREGION_TO_BIT(IRL)*LNOB29
                      END IF
                      LATCH(I)=LATCH(I)+IBITH30
                  END IF
3761          CONTINUE
3762          CONTINUE
          ELSE IF((IARG .EQ. 16)) THEN
              DO 3771 I=NPold,NP
                  IF ((BTEST(LATCH(I), 30))) THEN
                      IBITH30=1073741824
                      LATCH(I)=LATCH(I)-IBITH30
                  ELSE
                      IBITH30=0
                  END IF
                  LATCH(I)=IBSET(LATCH(I),IREGION_TO_BIT(IRL))
                  IF ((LATCH(I) .GE. LNOB29)) THEN
                      LATCH(I)=LATCH(I)+(IREGION_TO_BIT(IRL)-INT(LATCH(I
     *                )/LNOB29))*LNOB29
                  ELSE
                      LATCH(I) = LATCH(I)+IREGION_TO_BIT(IRL)*LNOB29
                  END IF
                  LATCH(I)=LATCH(I)+IBITH30
3771          CONTINUE
3772          CONTINUE
          ELSE IF((IARG .EQ. 11)) THEN
              IF ((IQ(NP) .EQ. 1)) THEN
                  IF ((BTEST(LATCH(NP-1), 30))) THEN
                      IBITL30=1073741824
                      LATCH(NP-1)=LATCH(NP-1)-IBITL30
                  ELSE
                      IBITL30=0
                  END IF
                  IF ((LATCH(NP-1) .GE. LNOB29)) THEN
                      LATCH(NP-1) = LATCH(NP-1)+(IREGION_TO_BIT(IRL)- IN
     *                T(LATCH(NP-1)/LNOB29))*LNOB29
                  ELSE
                      LATCH(NP-1) = LATCH(NP-1)+IREGION_TO_BIT(IRL)*LNOB
     *                29
                  END IF
                  LATCH(NP-1)=LATCH(NP-1)+IBITL30
              ELSE
                  IF ((BTEST(LATCH(NP), 30))) THEN
                      IBITH30=1073741824
                      LATCH(NP)=LATCH(NP)-IBITH30
                  ELSE
                      IBITH30=0
                  END IF
                  IF ((LATCH(NP) .GE. LNOB29)) THEN
                      LATCH(NP) = LATCH(NP)+(IREGION_TO_BIT(IRL)- INT(LA
     *                TCH(NP)/LNOB29))*LNOB29
                  ELSE
                      LATCH(NP) = LATCH(NP)+IREGION_TO_BIT(IRL)*LNOB29
                  END IF
                  LATCH(NP)=LATCH(NP)+IBITH30
              END IF
          ELSE IF((IARG .EQ. 24)) THEN
              IF ((IQ(NP) .EQ. 0)) THEN
                  LATCH(NP)=IBSET(LATCH(NP),IREGION_TO_BIT(IRL))
              ELSE
                  WRITE(6,3780)
3780              FORMAT(/// ' ***IN AUSGAB****'/ ' Something is wrong,I
     *Q(NP) should be = 0 for photons!!!'///)
                  call exit(1)
              END IF
          ELSE IF((IARG .EQ. 20)) THEN
              IF ((NP.GT.NPold .OR. i_survived_rr .GT. 0 .OR. IQ(NPold).
     *        EQ.-1)) THEN
                  DO 3791 I=NPold,NP
                      IF ((BTEST(LATCH(I), 30))) THEN
                          IBITH30=1073741824
                          LATCH(I)=LATCH(I)-IBITH30
                      ELSE
                          IBITH30=0
                      END IF
                      IF ((LATCH(I) .GE. LNOB29)) THEN
                          LATCH(I) = LATCH(I)+(IREGION_TO_BIT(IRL)- INT(
     *                    LATCH(I)/LNOB29))*LNOB29
                      ELSE
                          LATCH(I) = LATCH(I)+IREGION_TO_BIT(IRL)*LNOB29
                      END IF
                      LATCH(I)=IBSET(LATCH(I),IREGION_TO_BIT(IRL))
                      LATCH(I)=LATCH(I)+IBITH30
3791              CONTINUE
3792              CONTINUE
              END IF
          ELSE IF((IARG .EQ. 13 .OR. IARG .EQ. 14 )) THEN
              DO 3801 I=NPold,NP
                  IF ((BTEST(LATCH(I), 30))) THEN
                      IBITH30=1073741824
                      LATCH(I)=LATCH(I)-IBITH30
                  ELSE
                      IBITH30=0
                  END IF
                  LATCH(I) = IBSET(LATCH(I),0)
                  IF ((LATCH(I) .GE. LNOB29)) THEN
                      LATCH(I)=LATCH(I)+(IREGION_TO_BIT(IRL)-INT(LATCH(I
     *                )/LNOB29))*LNOB29
                  ELSE
                      LATCH(I) = LATCH(I)+IREGION_TO_BIT(IRL)*LNOB29
                  END IF
                  LATCH(I)=LATCH(I)+IBITH30
3801          CONTINUE
3802          CONTINUE
          END IF
      END IF
      ID=DOSE_ZONE(IRL)
      IF ((IARG .EQ. 0)) THEN
          IF ((IQ(NP) .NE. 0)) THEN
              IF ((NHSTRY_LAST.EQ.SCSTP_LAST)) THEN
                  SCSTP_TMP=SCSTP_TMP + 1
              ELSE
                  SCSTP=SCSTP+SCSTP_TMP
                  SCSTP2=SCSTP2 + SCSTP_TMP*SCSTP_TMP
                  SCSTP_TMP=1
                  SCSTP_LAST=NHSTRY_LAST
              END IF
              IF ((ID .NE. 0)) THEN
                  IF ((NHSTRY_LAST.EQ.SCDSTP_LAST)) THEN
                      SCDSTP_TMP=SCDSTP_TMP + 1
                  ELSE
                      SCDSTP=SCDSTP+SCDSTP_TMP
                      SCDSTP2=SCDSTP2 + SCDSTP_TMP*SCDSTP_TMP
                      SCDSTP_TMP=1
                      SCDSTP_LAST=NHSTRY_LAST
                  END IF
              END IF
          END IF
      END IF
      IF(((IARG .GE. 5) .OR. (EDEP .EQ. 0.0)))RETURN
      FTMP=WT(NP)*EDEP
      IF ((ID .NE. 0)) THEN
          IF ((NHSTRY_LAST.EQ.SCDOSE_LAST(ID,1))) THEN
              SCDOSE_TMP(ID,1)=SCDOSE_TMP(ID,1) + FTMP
          ELSE
              SCDOSE(ID,1)=SCDOSE(ID,1)+SCDOSE_TMP(ID,1)
              SCDOSE2(ID,1)=SCDOSE2(ID,1) + SCDOSE_TMP(ID,1)*SCDOSE_TMP(
     *        ID,1)
              SCDOSE_TMP(ID,1)=FTMP
              SCDOSE_LAST(ID,1)=NHSTRY_LAST
          END IF
          IF ((IBRSPL.EQ.2 .AND. IPHAT(NP).EQ.1)) THEN
              IF ((NHSTRY_LAST.EQ.SCDOSE_LAST(ID,2))) THEN
                  SCDOSE_TMP(ID,2)=SCDOSE_TMP(ID,2) + FTMP
              ELSE
                  SCDOSE(ID,2)=SCDOSE(ID,2)+SCDOSE_TMP(ID,2)
                  SCDOSE2(ID,2)=SCDOSE2(ID,2) + SCDOSE_TMP(ID,2)*SCDOSE_
     *            TMP(ID,2)
                  SCDOSE_TMP(ID,2)=FTMP
                  SCDOSE_LAST(ID,2)=NHSTRY_LAST
              END IF
          END IF
          IF ((ITDOSE_ON.EQ.1 )) THEN
              IF (( BTEST(LATCH(NP), 30) )) THEN
                  IF ((NHSTRY_LAST.EQ.SCDOSE_LAST(ID,3))) THEN
                      SCDOSE_TMP(ID,3)=SCDOSE_TMP(ID,3) + FTMP
                  ELSE
                      SCDOSE(ID,3)=SCDOSE(ID,3)+SCDOSE_TMP(ID,3)
                      SCDOSE2(ID,3)=SCDOSE2(ID,3) + SCDOSE_TMP(ID,3)*SCD
     *                OSE_TMP(ID,3)
                      SCDOSE_TMP(ID,3)=FTMP
                      SCDOSE_LAST(ID,3)=NHSTRY_LAST
                  END IF
              END IF
              IF (( LNEXC+LNINC .GT. 0 )) THEN
                  DO 3811 IT=4,3+LNEXC
                      ISTATUS=1
                      DO 3821 I=1,31
                          IF (( L_N_EXC(IT, I).EQ.0 )) THEN
                              GO TO3822
                          ELSE IF((BTEST(LATCH(NP), L_N_EXC(IT, I)))) TH
     *                    EN
                              ISTATUS=0
                          END IF
3821                  CONTINUE
3822                  CONTINUE
                      IF ((I.EQ.1)) THEN
                          ISTATUS=0
                      END IF
                      IF (( ISTATUS.EQ.1 )) THEN
                          IF ((NHSTRY_LAST.EQ.SCDOSE_LAST(ID,IT))) THEN
                              SCDOSE_TMP(ID,IT)=SCDOSE_TMP(ID,IT) + FTMP
                          ELSE
                              SCDOSE(ID,IT)=SCDOSE(ID,IT)+SCDOSE_TMP(ID,
     *                        IT)
                              SCDOSE2(ID,IT)=SCDOSE2(ID,IT) + SCDOSE_TMP
     *                        (ID,IT)*SCDOSE_TMP(ID,IT)
                              SCDOSE_TMP(ID,IT)=FTMP
                              SCDOSE_LAST(ID,IT)=NHSTRY_LAST
                          END IF
                      END IF
3811              CONTINUE
3812              CONTINUE
                  DO 3831 IT=4+LNEXC,3+LNEXC+LNINC
                      ISTATUS=0
                      DO 3841 I=1,31
                          IF (( L_N_INC(IT, I).EQ.0 )) THEN
                              GO TO3842
                          ELSE IF((BTEST(LATCH(NP), L_N_INC(IT, I)))) TH
     *                    EN
                              ISTATUS=1
                          END IF
3841                  CONTINUE
3842                  CONTINUE
                      IF ((I.EQ.1)) THEN
                          ISTATUS=0
                      END IF
                      DO 3851 II=I+1,31
                          IF (( L_N_INC(IT, II).EQ.0 )) THEN
                              GO TO3852
                          ELSE IF((BTEST(LATCH(NP), L_N_INC(IT, II)))) T
     *                    HEN
                              ISTATUS=0
                          END IF
3851                  CONTINUE
3852                  CONTINUE
                      IF (( ISTATUS.EQ.1 )) THEN
                          IF ((NHSTRY_LAST.EQ.SCDOSE_LAST(ID,IT))) THEN
                              SCDOSE_TMP(ID,IT)=SCDOSE_TMP(ID,IT) + FTMP
                          ELSE
                              SCDOSE(ID,IT)=SCDOSE(ID,IT)+SCDOSE_TMP(ID,
     *                        IT)
                              SCDOSE2(ID,IT)=SCDOSE2(ID,IT) + SCDOSE_TMP
     *                        (ID,IT)*SCDOSE_TMP(ID,IT)
                              SCDOSE_TMP(ID,IT)=FTMP
                              SCDOSE_LAST(ID,IT)=NHSTRY_LAST
                          END IF
                      END IF
3831              CONTINUE
3832              CONTINUE
              END IF
          END IF
          IF (((IWATCH .GT. 1) .AND. (IWATCH .NE. 4))) THEN
              WRITE(6,3860)FTMP,IRL,IARG
3860          FORMAT(' ***TOTAL DOSE WITH DELTA TRANSPORT = ',E14.7,' Me
     *V. IRL= ',I3, ' IARG= ',I3)
          END IF
      END IF
      IF ((IAUSFL(6).EQ.1)) THEN
          IF ((IARG.EQ.1 .OR. IARG.EQ.2 .OR. IARG.EQ.3)) THEN
              IAUSFL(6)=0
              ESPLIT_DBS=0
          ELSE IF((ICM .EQ. ICMNEW .AND. ESPLIT_DBS.EQ.0)) THEN
              IAUSFL(6) = 0
              WRITE(6,3870)
3870          FORMAT(/' IN AUSGAB, IAUSFL(6) is re-set to 0. This should
     * not happen!'/ ' Track down why we are getting this!'/)
              WRITE(6,3880)X(NP),Y(NP),Z(NP),W(NP),IR(NP),ICM,IHSTRY
3880          FORMAT(' X(NP),Y(NP),Z(NP),W(NP),IR(NP),ICM,IHSTRY= ',4F12
     *.4,3I8)
          END IF
      END IF
      RETURN
      END
      SUBROUTINE EN_SAMPLE(ENIN)
      implicit none
      COMMON/ENERGYSRC/NENSRC,IMODE,ENSRCD,SRCPDF,SRCCDF,ENMIN,CDFINV, D
     *ELTAK,IB, FILNAM
      real*8 ENSRCD(240),SRCPDF(240),SRCCDF(240),ENMIN, CDFINV(1000,2),D
     *ELTAK
      INTEGER IMODE,NENSRC,IB
      CHARACTER*256 FILNAM
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/SOURCE/ COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,
     *COSTHETA,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SI
     *GN2,RIN1_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA
     *24, NNPHSP,NPHOTSRC,WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEA
     *M,YBEAM,ZBEAM,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL
     *2,PROBFC,PROBSD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z
     *_SOURCE,E_ph_sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT1
     *00,XSCAN_UNIT,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YIN
     *DEL, EKMAXSRC, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9, Y_SRC9, PR
     *OB_SRC9, ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN,RDISTF,RPDF,RCDF, F
     *NORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COSRNG,SINRNG,WEIGHTOLD,UINOL
     *D,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RSRC_DBS,SSDSRC_DBS,ZSRC_DBS
     *,sigma_src19,DIST24,ALPHA24,BETA24,RBEAMY, xo_src19, yo_src19, NRD
     *IST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p, NPASS_ph_s
     *p, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRATIO_YXF, OL
     *DSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUNT, IERROR,
     *RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB,MONOEN, NR
     *CYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE_FLAG, INIT
     *_ICMOLD,I_MUPHSP_IN,SPCNAM, the_beam_code,the_input_file,the_pegs_
     *file,SPEC_TITLE,phsp_open
      REAL*8 COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,COSTHETA
     *,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SIGN2,RIN1
     *_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA24
      integer*8 NNPHSP, NPHOTSRC
      real*8 WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEAM,YBEAM,ZBEAM
     *,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL2,PROBFC,PROB
     *SD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z_SOURCE,E_ph_
     *sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT100,XSCAN_UNIT
     *,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YINDEL, EKMAXSRC
     *, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9(10), Y_SRC9(10), PROB_SR
     *C9(10), ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN(1000,2),RDISTF(1000)
     *, RPDF(1000),RCDF(1000), FNORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COS
     *RNG,SINRNG,WEIGHTOLD,UINOLD,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RS
     *RC_DBS,SSDSRC_DBS,ZSRC_DBS,sigma_src19,DIST24,ALPHA24,BETA24,RBEAM
     *Y, xo_src19, yo_src19
      INTEGER NRDIST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p,
     * NPASS_ph_sp, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRA
     *TIO_YXF, OLDSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUN
     *T, IERROR, RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB
     *,MONOEN, NRCYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE
     *_FLAG, INIT_ICMOLD,I_MUPHSP_IN
      CHARACTER*256 SPCNAM
      CHARACTER*80 the_beam_code,the_input_file,the_pegs_file,SPEC_TITLE
      logical phsp_open
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      INTEGER K
      real*8 ENIN
3890  CONTINUE
      IF((rng_seed .GT. 128))call ranmar_get
      RNNO1 = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      IF((rng_seed .GT. 128))call ranmar_get
      RNNO2 = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      DO 3901 K=1,NENSRC
          RNNO1=RNNO1-SRCCDF(K)
          IF((RNNO1.LE.0))GO TO3902
3901  CONTINUE
3902  CONTINUE
      ENIN = CDFINV(K,1) + RNNO2*CDFINV(K,2)
      IF ((ENIN .LT. ENMIN)) THEN
          IF ((ENIN .LT. 0.9999*ENMIN)) THEN
              WRITE(6,3910)
3910          FORMAT(//' ***WARNING IN ENERGY SAMPLING ROUTINE:'/ ' Samp
     *led energy < ENMIN'//)
          END IF
          GOTO 3890
      END IF
      IF ((ENIN .GT. ENSRCD(NENSRC))) THEN
          IF ((ENIN .GT. 1.0001*ENSRCD(NENSRC))) THEN
              WRITE(6,3920)
3920          FORMAT(//' ***WARNING IN ENERGY SAMPLING ROUTINE:'/ ' Samp
     *led energy > max. energy'//)
          END IF
          GOTO 3890
      END IF
      RETURN
      END
      SUBROUTINE EN_INITIALIZE
      implicit none
      COMMON/ENERGYSRC/NENSRC,IMODE,ENSRCD,SRCPDF,SRCCDF,ENMIN,CDFINV, D
     *ELTAK,IB, FILNAM
      real*8 ENSRCD(240),SRCPDF(240),SRCCDF(240),ENMIN, CDFINV(1000,2),D
     *ELTAK
      INTEGER IMODE,NENSRC,IB
      CHARACTER*256 FILNAM
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/SOURCE/ COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,
     *COSTHETA,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SI
     *GN2,RIN1_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA
     *24, NNPHSP,NPHOTSRC,WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEA
     *M,YBEAM,ZBEAM,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL
     *2,PROBFC,PROBSD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z
     *_SOURCE,E_ph_sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT1
     *00,XSCAN_UNIT,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YIN
     *DEL, EKMAXSRC, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9, Y_SRC9, PR
     *OB_SRC9, ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN,RDISTF,RPDF,RCDF, F
     *NORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COSRNG,SINRNG,WEIGHTOLD,UINOL
     *D,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RSRC_DBS,SSDSRC_DBS,ZSRC_DBS
     *,sigma_src19,DIST24,ALPHA24,BETA24,RBEAMY, xo_src19, yo_src19, NRD
     *IST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p, NPASS_ph_s
     *p, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRATIO_YXF, OL
     *DSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUNT, IERROR,
     *RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB,MONOEN, NR
     *CYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE_FLAG, INIT
     *_ICMOLD,I_MUPHSP_IN,SPCNAM, the_beam_code,the_input_file,the_pegs_
     *file,SPEC_TITLE,phsp_open
      REAL*8 COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,COSTHETA
     *,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SIGN2,RIN1
     *_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA24
      integer*8 NNPHSP, NPHOTSRC
      real*8 WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEAM,YBEAM,ZBEAM
     *,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL2,PROBFC,PROB
     *SD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z_SOURCE,E_ph_
     *sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT100,XSCAN_UNIT
     *,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YINDEL, EKMAXSRC
     *, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9(10), Y_SRC9(10), PROB_SR
     *C9(10), ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN(1000,2),RDISTF(1000)
     *, RPDF(1000),RCDF(1000), FNORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COS
     *RNG,SINRNG,WEIGHTOLD,UINOLD,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RS
     *RC_DBS,SSDSRC_DBS,ZSRC_DBS,sigma_src19,DIST24,ALPHA24,BETA24,RBEAM
     *Y, xo_src19, yo_src19
      INTEGER NRDIST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p,
     * NPASS_ph_sp, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRA
     *TIO_YXF, OLDSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUN
     *T, IERROR, RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB
     *,MONOEN, NRCYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE
     *_FLAG, INIT_ICMOLD,I_MUPHSP_IN
      CHARACTER*256 SPCNAM
      CHARACTER*80 the_beam_code,the_input_file,the_pegs_file,SPEC_TITLE
      logical phsp_open
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      INTEGER KMAX,  I,K
      real*8 FMAX,  TEMP,  FNORM
      IF ((ENMIN .GE. ENSRCD(1))) THEN
          WRITE(6,3930)
3930      FORMAT(//' ***ERROR IN ENERGY SPECTRUM:'/ ' Lower energy of 1s
     *t bin >= upper energy of 1st bin.'//)
          call exit(1)
      END IF
      FNORM=0
      DO 3941 IB=1,NENSRC
          FNORM = FNORM + SRCPDF(IB)
3941  CONTINUE
3942  CONTINUE
      DO 3951 IB=1,NENSRC
          SRCCDF(IB)=SRCPDF(IB)/FNORM
          IF ((IB.GT.1)) THEN
              CDFINV(IB,1)=ENSRCD(IB-1)
          ELSE
              CDFINV(IB,1)=ENMIN
          END IF
          CDFINV(IB,2)=ENSRCD(IB)-CDFINV(IB,1)
3951  CONTINUE
3952  CONTINUE
      DO 3961 I=1,NENSRC-1
          FMAX=SRCCDF(I)
          KMAX=I
          DO 3971 K=I+1,NENSRC
              IF ((SRCCDF(K) .GT. FMAX)) THEN
                  FMAX=SRCCDF(K)
                  KMAX=K
              END IF
3971      CONTINUE
3972      CONTINUE
          K=KMAX
          TEMP=SRCCDF(K)
          SRCCDF(K)=SRCCDF(I)
          SRCCDF(I)=TEMP
          TEMP=CDFINV(K,1)
          CDFINV(K,1)=CDFINV(I,1)
          CDFINV(I,1)=TEMP
          TEMP=CDFINV(K,2)
          CDFINV(K,2)=CDFINV(I,2)
          CDFINV(I,2)=TEMP
3961  CONTINUE
3962  CONTINUE
      IF ((IWATCH .NE. 0)) THEN
          WRITE(6,3980)SPEC_TITLE
3980      FORMAT(1x,80A1)
          WRITE(6,3990)
3990      FORMAT(/' ENSRCD,   SRCPDF:'//)
          WRITE(6,4000)(ENSRCD(IB),SRCPDF(IB),IB=1,NENSRC)
4000      FORMAT(2E17.7)
          WRITE(6,4010)
4010      FORMAT(//)
      END IF
      RETURN
      END
      SUBROUTINE HOWFAR
      implicit none
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/GEOM/ NREG
      INTEGER NREG
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 A,  B,  B2,  C,  COUT,  TCYL,  XF,  YF
      IF ((IR(NP) .GT. 1 .AND. IR(NP) .LE. NREG)) THEN
          ICM = IR_to_CM(IR(NP))
      ELSE
          IDISC = 1
          RETURN
      END IF
      ICMNEW = ICM
      IAUSFL(6) = 0
      ESPLIT_DBS=0
      GOTO (4020,4030,4040,4050,4060,4070,4080,4090) ICM
4090  CONTINUE
      CALL HOWFAR_APPLICAT
      GOTO 4100
4080  CONTINUE
      CALL HOWFAR_MAINJAWS
      GOTO 4100
4070  CONTINUE
      CALL HOWFAR_MIRROR
      GOTO 4100
4060  CONTINUE
      CALL HOWFAR_RING
      GOTO 4100
4050  CONTINUE
      CALL HOWFAR_IONCHAM
      GOTO 4100
4040  CONTINUE
      CALL HOWFAR_SCATFOIL
      GOTO 4100
4030  CONTINUE
      CALL HOWFAR_COLLIMAT
      GOTO 4100
4020  CONTINUE
      CALL HOWFAR_XITWIN
4100  CONTINUE
      XF = ABS(X(NP) + USTEP * U(NP))
      YF = ABS(Y(NP) + USTEP * V(NP))
      IF ((RMAX_CM_FLAG(ICM) .EQ. 1)) THEN
          C = X(NP)**2 + Y(NP)**2
          IF (( C .GT. RMAX_CM2(ICM) )) THEN
              IRNEW = 1
              ICMNEW = 0
              IAUSFL(6) = 0
              USTEP = 0.0
              ESPLIT_DBS = 0
          ELSE IF(( (XF**2 + YF**2) .GT. RMAX_CM2(ICM) )) THEN
              A = U(NP)*U(NP)+V(NP)*V(NP)
              IF ((A .GT. 0.0 .AND. (RMAX_CM(ICM)-SQRT(C))/SQRT(A) .LT.
     *        USTEP)) THEN
                  COUT = C - RMAX_CM2(ICM)
                  IF ((COUT .GT. 0.0)) THEN
                      IF ((IWATCH .GT. 0)) THEN
                          WRITE(6,4110)COUT
4110                      FORMAT(' COUT=',E11.3)
                      END IF
                      COUT=0.0
                  END IF
                  B = X(NP)*U(NP)+Y(NP)*V(NP)
                  B2 = B**2
                  IF ((B .GT. 0.0)) THEN
                      IF ((COUT/B2 .GT. -1.0E-3)) THEN
                          TCYL=-0.5*COUT/B
                      ELSE
                          TCYL=-COUT/(SQRT(B2-A*COUT)+B)
                      END IF
                  ELSE IF((B .LT. 0.0)) THEN
                      IF ((COUT/B2 .GT. -1.0E-3)) THEN
                          TCYL = -2.*B/A*(1.-0.25*A*COUT/B2)
                      ELSE
                          TCYL = (SQRT(B2-A*COUT)-B)/A
                      END IF
                  ELSE
                      TCYL=SQRT(-COUT/A)
                  END IF
                  IF ((USTEP .GT. TCYL)) THEN
                      USTEP = TCYL
                      IRNEW = 1
                      ICMNEW = 0
                      IAUSFL(6) = 0
                      ESPLIT_DBS=0
                  END IF
              END IF
          END IF
      ELSE IF((RMAX_CM_FLAG(ICM) .EQ. 2)) THEN
          IF ((ABS(X(NP)) .GT. RMAX_CM(ICM) .OR. ABS(Y(NP)) .GT. RMAX_CM
     *    (ICM) )) THEN
              IRNEW = 1
              ICMNEW = 0
              IAUSFL(6) = 0
              USTEP = 0.0
              ESPLIT_DBS=0
          ELSE IF(((XF .GT. RMAX_CM(ICM)) .OR. (YF .GT. RMAX_CM(ICM)) ))
     *     THEN
              A=1.E20
              B=1.E20
              IF ((U(NP) .GT. 0)) THEN
                  A = (RMAX_CM(ICM)-X(NP))/U(NP)
              ELSE IF((U(NP) .LT. 0)) THEN
                  A = (-RMAX_CM(ICM)-X(NP))/U(NP)
              END IF
              IF ((V(NP) .GT. 0)) THEN
                  B = (RMAX_CM(ICM)-Y(NP))/V(NP)
              ELSE IF((V(NP) .LT. 0)) THEN
                  B = (-RMAX_CM(ICM)-Y(NP))/V(NP)
              END IF
              C = MIN(A,B)
              IF ((C .LT. USTEP)) THEN
                  USTEP = C
                  IRNEW = 1
                  ICMNEW = 0
                  IAUSFL(6) = 0
                  ESPLIT_DBS=0
              END IF
          END IF
      END IF
      RETURN
      END
      SUBROUTINE INPUTS
      implicit none
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L(3000),IPHTER(3000)
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/ELECIN/ esig_e(12),psig_e(12), esige_max, psige_max, range_
     *ep(0:1,500,12), E_array(500,12), etae_ms0(500,12),etae_ms1(500,12)
     *,etap_ms0(500,12),etap_ms1(500,12),q1ce_ms0(500,12),q1ce_ms1(500,1
     *2),q1cp_ms0(500,12),q1cp_ms1(500,12),q2ce_ms0(500,12),q2ce_ms1(500
     *,12),q2cp_ms0(500,12),q2cp_ms1(500,12),blcce0(500,12),blcce1(500,1
     *2), EKE0(12),EKE1(12), XR0(12),TEFF0(12),BLCC(12),XCC(12), ESIG0(5
     *00,12),ESIG1(500,12),PSIG0(500,12),PSIG1(500,12),EDEDX0(500,12),ED
     *EDX1(500,12),PDEDX0(500,12),PDEDX1(500,12),EBR10(500,12),EBR11(500
     *,12),PBR10(500,12),PBR11(500,12),PBR20(500,12),PBR21(500,12),TMXS0
     *(500,12),TMXS1(500,12), expeke1(12), IUNRST(12),EPSTFL(12),IAPRIM(
     *12), sig_ismonotone(0:1,12)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/GEOM/ NREG
      INTEGER NREG
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/SOURCE/ COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,
     *COSTHETA,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SI
     *GN2,RIN1_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA
     *24, NNPHSP,NPHOTSRC,WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEA
     *M,YBEAM,ZBEAM,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL
     *2,PROBFC,PROBSD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z
     *_SOURCE,E_ph_sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT1
     *00,XSCAN_UNIT,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YIN
     *DEL, EKMAXSRC, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9, Y_SRC9, PR
     *OB_SRC9, ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN,RDISTF,RPDF,RCDF, F
     *NORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COSRNG,SINRNG,WEIGHTOLD,UINOL
     *D,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RSRC_DBS,SSDSRC_DBS,ZSRC_DBS
     *,sigma_src19,DIST24,ALPHA24,BETA24,RBEAMY, xo_src19, yo_src19, NRD
     *IST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p, NPASS_ph_s
     *p, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRATIO_YXF, OL
     *DSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUNT, IERROR,
     *RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB,MONOEN, NR
     *CYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE_FLAG, INIT
     *_ICMOLD,I_MUPHSP_IN,SPCNAM, the_beam_code,the_input_file,the_pegs_
     *file,SPEC_TITLE,phsp_open
      REAL*8 COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,COSTHETA
     *,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SIGN2,RIN1
     *_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA24
      integer*8 NNPHSP, NPHOTSRC
      real*8 WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEAM,YBEAM,ZBEAM
     *,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL2,PROBFC,PROB
     *SD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z_SOURCE,E_ph_
     *sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT100,XSCAN_UNIT
     *,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YINDEL, EKMAXSRC
     *, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9(10), Y_SRC9(10), PROB_SR
     *C9(10), ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN(1000,2),RDISTF(1000)
     *, RPDF(1000),RCDF(1000), FNORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COS
     *RNG,SINRNG,WEIGHTOLD,UINOLD,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RS
     *RC_DBS,SSDSRC_DBS,ZSRC_DBS,sigma_src19,DIST24,ALPHA24,BETA24,RBEAM
     *Y, xo_src19, yo_src19
      INTEGER NRDIST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p,
     * NPASS_ph_sp, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRA
     *TIO_YXF, OLDSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUN
     *T, IERROR, RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB
     *,MONOEN, NRCYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE
     *_FLAG, INIT_ICMOLD,I_MUPHSP_IN
      CHARACTER*256 SPCNAM
      CHARACTER*80 the_beam_code,the_input_file,the_pegs_file,SPEC_TITLE
      logical phsp_open
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/ENERGYSRC/NENSRC,IMODE,ENSRCD,SRCPDF,SRCCDF,ENMIN,CDFINV, D
     *ELTAK,IB, FILNAM
      real*8 ENSRCD(240),SRCPDF(240),SRCCDF(240),ENMIN, CDFINV(1000,2),D
     *ELTAK
      INTEGER IMODE,NENSRC,IB
      CHARACTER*256 FILNAM
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      common/egs_vr/ e_max_rr(3000),  prob_RR,  nbr_split,  i_play_RR,
     *    i_survived_RR,
     *        n_RR_warning,                                        i_do_
     *rr(3000)
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common/ET_control/ smaxir(3000),estepe,ximax,  skindepth_for_bca,t
     *ransport_algorithm, bca_algorithm,exact_bca,spin_effects
      real*8 smaxir,  estepe,  ximax,      skindepth_for_bca
      integer*4 transport_algorithm, bca_algorithm
      logical exact_bca,  spin_effects
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/GetInput/ ALLOWED_INPUTS(100,0:5),   VALUES_SOUGHT(100),  C
     *HAR_VALUE(100,100),  VALUE(100,100),  DEFAULT(100),  VALUE_MIN(100
     *),  VALUE_MAX(100),  NVALUE(100),  TYPE(100),      ERROR_FLAGS(100
     *),   i_errors,  NMIN, NMAX,   ERROR_FLAG,  DELIMETER
      character ALLOWED_INPUTS*64,VALUES_SOUGHT*64, CHAR_VALUE*256,DELIM
     *ETER*64
      real*8 VALUE,DEFAULT,VALUE_MIN,VALUE_MAX
      integer*4 NVALUE,TYPE,NMIN,NMAX,ERROR_FLAG,ERROR_FLAGS,i_errors
     *
      COMMON/RWPHSP/ STRING_TEMP_ZLAST_OUT,  STRING_TEMP_OUT,  IHSTRY_PH
     *SP,   iaea_dummy_long,  NHSTRY_DOS,   ESHORT,  WEIGHTTMP,  WT_PHSP
     *_SHORT,  X_PHSP_SHORT,  Y_PHSP_SHORT,  Z_PHSP_SHORT,  U_PHSP_SHORT
     *,  V_PHSP_SHORT,  W_PHSP_SHORT,  ZLAST_PHSP_SHORT,  MUIDX_PHSP_SHO
     *RT,  EKMAX_PHSP_SHORT,  EKMINE_PHSP_SHORT,  NINC_PHSP_SHORT,  dosx
     *yz2beam_index,  iaea_extra_floats,  NUM_PHSP_TOT,  PHOT_PHSP_TOT,
     *iaea_result,   iaea_n_stat,  iaea_q_typ,  iaea_typ_q,  iaea_q_inde
     *x,  I_PHSP,  IERR_PHSP,  LATCHTMP,  WRITE_PHSP_COUNTER,  WRITE_PHS
     *P_SOFAR,  PHSP_RESTART,  PHSP_RECL,  PHSP_RECL_OLD,  iaea_extra_in
     *ts,  iaea_extra_int_types,iaea_extra_float_types,   iaea_i_zlast,
     * iaea_i_latch,  iaea_i_muidx,  iaea_n_extra_ints,  iaea_n_extra_fl
     *oats,  i_iaea_open_for_write,   iaea_i_zlast_out,  iaea_i_latch_ou
     *t,  iaea_i_muidx_out,  dosxyz2beam_izscore,  MODE_RW
      CHARACTER*32000 STRING_TEMP_ZLAST_OUT(3)
      CHARACTER*28000 STRING_TEMP_OUT(3)
      integer*8 IHSTRY_PHSP(3),iaea_dummy_long,NHSTRY_DOS
      REAL*4 ESHORT,WEIGHTTMP,WT_PHSP_SHORT,X_PHSP_SHORT,Y_PHSP_SHORT, Z
     *_PHSP_SHORT,U_PHSP_SHORT, V_PHSP_SHORT,W_PHSP_SHORT,ZLAST_PHSP_SHO
     *RT, MUIDX_PHSP_SHORT, EKMAX_PHSP_SHORT,EKMINE_PHSP_SHORT,NINC_PHSP
     *_SHORT,dosxyz2beam_index, iaea_extra_floats(10)
      INTEGER NUM_PHSP_TOT,PHOT_PHSP_TOT, iaea_result,iaea_n_stat,iaea_q
     *_typ(3),iaea_typ_q(3),iaea_q_index,I_PHSP, IERR_PHSP,LATCHTMP, WRI
     *TE_PHSP_COUNTER(3),WRITE_PHSP_SOFAR(3), PHSP_RESTART,PHSP_RECL,PHS
     *P_RECL_OLD,iaea_extra_ints(10), iaea_extra_int_types(10),iaea_extr
     *a_float_types(10),iaea_i_zlast, iaea_i_latch,iaea_i_muidx,iaea_n_e
     *xtra_ints,iaea_n_extra_floats, i_iaea_open_for_write,iaea_i_zlast_
     *out,iaea_i_latch_out, iaea_i_muidx_out,dosxyz2beam_izscore
      CHARACTER*5 MODE_RW
      INTEGER LATCH_TEMP_OUT,NUM_PHSP_TOFLUSH,TEMP_PHSP_COUNTER,REM_PHSP
      REAL*4 REAL_TEMP_OUT(7)
      CHARACTER*32 REC_TEMP_OUT
      INTEGER I,J,JJ,  INEXT,  NUM_PHSPOUT
      DOUBLE PRECISION FCASE
      real*8 ESTEPIN,SMAX
      INTEGER IDORAY,IFLUOR
      WRITE(6,4120)
4120  FORMAT(/' TITLE:',$)
      READ(i_input,4130,END=4140,ERR=4150)TITLE
4130  FORMAT(1A80)
      WRITE(6,4160)TITLE
4160  FORMAT(' ',1A80/)
      WRITE(6,4170)
4170  FORMAT(' ')
      WRITE(6,4180)
4180  FORMAT(' Reading in EGSnrc transport parameters:'/ ' -------------
     *------------------------- ')
      skindepth_for_bca=0
      call get_transport_parameter(-1)
      WRITE(6,4190)
4190  FORMAT(//' Finished reading EGSnrc transport parameters.'/)
      IF (((.NOT.exact_bca .OR. transport_algorithm.EQ.1) .AND. SMAXIR(1
     *).EQ.1e10)) THEN
          DO 4201 I=1,3000
              SMAXIR(I)=5.
4201      CONTINUE
4202      CONTINUE
      END IF
      PHSP_OUTDIR=' '
      NUM_PHSPOUT=1
      VALUES_SOUGHT(NUM_PHSPOUT)='PHSP OUTPUT DIRECTORY'
      TYPE(NUM_PHSPOUT)=2
      NVALUE(NUM_PHSPOUT)=1
      DELIMETER='USER INPUTS'
      NMIN = NUM_PHSPOUT
      NMAX = NUM_PHSPOUT
      CALL GET_INPUT
      IF ((error_flags(NUM_PHSPOUT).EQ.0)) THEN
          READ (CHAR_VALUE(NUM_PHSPOUT,1),FMT='(A)') PHSP_OUTDIR
      END IF
      REWIND(i_input)
      READ(i_input,4210,END=4140,ERR=4150)TITLE
4210  FORMAT(1A80)
      NMED = 1
      AIR_INDEX = 1
      WRITE(6,4220)
4220  FORMAT(/' MEDIUM of nominal AIR (exactly as in pegs4dat) (left jus
     *tify): ',$)
      READ(i_input,'(24A1)') (MED_IN(J),J=1,24)
      WRITE(6,4230)(MED_IN(J),J=1,24)
4230  FORMAT(' ',24A1/)
      IF ((MED_IN(1) .EQ. 'V' .AND.  MED_IN(2).EQ.'A' .AND. MED_IN(3).EQ
     *.'C' .AND. MED_IN(4).EQ.'U' .AND. MED_IN(5).EQ.'U' .AND. MED_IN(6)
     *.EQ.'M')) THEN
          WRITE(6,4240)
4240      FORMAT(/' AIR  is called VACUUM '/)
          AIR_INDEX = 0
          NMED = 0
      ELSE IF((MED_IN(1) .EQ. ' ' .AND. MED_IN(2).EQ.' ' .AND. MED_IN(3)
     *.EQ.' ' .AND. MED_IN(4).EQ.' ')) THEN
          MED_IN(1)='V'
          MED_IN(2)='A'
          MED_IN(3)='C'
          MED_IN(4)='U'
          MED_IN(5)='U'
          MED_IN(6)='M'
          WRITE(6,4250)
4250      FORMAT(' Defaults to vacuum')
          AIR_INDEX = 0
          NMED = 0
      END IF
      DO 4261 J=1,24
          MEDIA(J,1)=MED_IN(J)
4261  CONTINUE
4262  CONTINUE
      WRITE(6,4270)
4270  FORMAT(/' IWATCH(-N-4), ISTOR(0,+-1), IRESTART(0-3), IO_OPT(0-4),'
     *,/ ' IDAT(0-1), LATCH_OPTION (1-3), IZLAST(0-2): ',$)
      READ(i_input,4280,END=4140,ERR=4150)IWATCH,ISTORE,IRESTART,IO_OPT,
     *IDAT,LATCH_OPTION ,IZLAST
4280  FORMAT (7I12)
      WRITE(6,4290)IWATCH,ISTORE,IRESTART,IO_OPT,IDAT,LATCH_OPTION ,IZLA
     *ST
4290  FORMAT(2I12,3I10,2I12)
      IF((IWATCH .GT. 4))IWATCH=0
      IF(((ISTORE .LT. -1) .OR. (ISTORE .GT. 1)))ISTORE=0
      IF(((IRESTART .LT. 0) .OR. (IRESTART .GT. 4)))IRESTART=0
      IF(((IO_OPT .LT. 0) .OR. (IO_OPT .GT. 4)))IO_OPT=0
      IF(((IDAT .LT. 0) .OR. (IDAT .GT. 1)))IDAT =0
      IF(((IZLAST .LT. 0) .OR. (IZLAST .GT. 2)))IZLAST = 0
      IF((LATCH_OPTION .LE.0.OR. LATCH_OPTION.GT.3))LATCH_OPTION = 2
      IF ((IO_OPT .GT. 1 .AND. IO_OPT.LT.4)) THEN
          WRITE(6,4300)
4300      FORMAT(///' BEAM CHARACTERIZATION MODELS NOT IMPLEMENTED'// 'P
     *LEASE USE OPTION 0 OR 1 FOR IO_OPT INSTEAD'///)
          STOP
      END IF
      WRITE(6,4310)IWATCH,ISTORE,IRESTART,IO_OPT,IDAT,LATCH_OPTION ,IZLA
     *ST
4310  FORMAT(/' Do not track(0) or track(>0) every interaction or trackN
     *th'/ ' history only(-N):',T60,I12/ ' Store random # for a batch(0)
     *,a history(1) or read random #(-1):',T70,I2/ ' First run(0),restar
     *ted(1),make(2),analyze(3):',T70,I2/ ' Output to PH-SP(0),not(1),BE
     *AM-MODEL(2),PH-SP&MODEL(3),'/ '      output to PH-SP in IAEA forma
     *t(4):',T70,I2/ ' Store data(0) or not(1):',T70,I2/ ' LATCH OPTION,
     *do not inherit(1),inherit+record origin(2,3):',T70,I2/ ' Do not sc
     *ore ZLAST(0), score ZLAST(1), output file for graphics(2):', T70,I
     *2)
      IF ((IRESTART .EQ. 1)) THEN
          INEXT=1
      ELSE
          INEXT=0
      END IF
      WRITE(6,4320)
4320  FORMAT(' ')
      WRITE(6,4330)
4330  FORMAT(' #HISTORIES, RN SEED #1, RN SEED #2, TIMMAX, ', ' IBRSPL(0
     *,1,2),'/T10,'NBRSPL, IRRLTT(0,1,2), ICM_SPLIT'/' : ',$)
      READ(i_input,'(F15.0,2I13,F12.0,4I10)',END=4140,ERR=4340) FCASE, I
     *XXIN,JXXIN,TIMMAX,IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT
      WRITE(6,4350)FCASE,IXXIN,JXXIN,TIMMAX,IBRSPL,NBRSPL,IRRLTT,ICM_SPL
     *IT
4350  FORMAT(/T1,F15.0,2I13,F12.4,4I10)
      IF ((IWATCH .EQ. 4 .AND. FCASE .GT.1000 )) THEN
          WRITE(6,4360)
4360      FORMAT(//' ***************************************************
     ***'/ ' *****************************************************'/ ' I
     *WATCH = 4 and FCASE > 1000. => a huge file'/ ' The assumption is t
     *hat this is a mistake/oversight'/ '        Stopping the run'/ ' **
     ****************************************************'/ ' **********
     ********************************************'/)
          call exit(1)
      END IF
      IF (((IXXIN .LE. 0) .OR. (IXXIN .GT. 31328))) THEN
          WRITE(6,4370)
4370      FORMAT(' First RN seed outside allowed range and default value
     * set')
          IXXIN = 1802
      END IF
      IF (((JXXIN .LE. 0) .OR. (JXXIN .GT. 30081))) THEN
          WRITE(6,4380)
4380      FORMAT(' Second RN seed outside allowed range and default valu
     *e set')
          JXXIN = 9373
      END IF
      NCASE=FCASE
      IF ((IWATCH .EQ. 0 .AND. NCASE .LT. 100)) THEN
          NCASE=100
      END IF
      IF ((NCASE/10.EQ.0)) THEN
          NCASE=10
      END IF
      JCASE=NCASE/10
      NCASE=10*JCASE
      FCASE=NCASE
      IF((i_parallel .GT. 0))JXXIN = JXXIN - 1 + i_parallel
      ixx = IXXIN
      jxx = JXXIN
      call init_ranmar
      IF((TIMMAX .EQ. 0.0))TIMMAX=0.99
      IF((IRRLTT.LT.0 .OR. IRRLTT .GT. 2))IRRLTT=0
      IF ((IBRSPL .EQ. 0 .AND. IRRLTT.GE.1)) THEN
          IRRLTT=0
          NBRSPL=1
          WRITE(6,4390)
4390      FORMAT(//' Russian roulette can only be used with brem splitti
     *ng'/ ' IRRLTT reset to 0.'//)
      ELSE IF((IBRSPL.EQ.2 .AND. IRRLTT.GT.0)) THEN
          IRRLTT=0
          WRITE(6,4400)
4400      FORMAT(//' Built-in Russian roulette not used with DBS'/ ' IRR
     *LTT reset to 0.'//)
      ELSE IF((IBRSPL.EQ.29)) THEN
          WRITE(6,4410)
4410      FORMAT(//' Selective bremsstrahlung splitting no longer suppor
     *ted.'/ ' Will carry on with no bremsstrahlung splitting.'//)
          IRRLTT=0
          NBRSPL=1
      END IF
      IF ((IRRLTT.EQ.1)) THEN
          WRITE(6,4420)
4420      FORMAT(//' IRRLTT=1 is no longer supported.  Defaults to IRRLT
     *T=2.'//)
          IRRLTT=2
      END IF
      IF ((IBRSPL .EQ. 1 .OR. IBRSPL.EQ.2)) THEN
          IF ((NBRSPL .LE. 0)) THEN
              NBRSPL=20
              WRITE(6,4430)NBRSPL
4430          FORMAT(//' ***WARNING***'/ ' NBRSPL<=0.  Reset to ',I4//)
              WRITE(IOUTLIST,100)NBRSPL
100           FORMAT(//' ***WARNING***'/ ' NBRSPL<=0.  Reset to ',I4//)
          ELSE IF((NBRSPL .GT. 2000)) THEN
              WRITE(6,4440)2000,NBRSPL
4440          FORMAT(//' ***WARNING***'/ ' NBRSPL > $MAXBRSPLIT '/ ' NBR
     *SPL reduced to ',I10,' from ',I10//)
              WRITE(IOUTLIST,101)2000,NBRSPL
101           FORMAT(//' ***WARNING***'/ ' NBRSPL > $MAXBRSPLIT '/ ' NBR
     *SPL reduced to max = ',I10,' from ',I10//)
              NBRSPL=2000
          END IF
          IF ((10000.LT.4*NBRSPL)) THEN
              WRITE(6,4450)10000,4*NBRSPL
4450          FORMAT(//' ***WARNING***'/ ' $MXSTACK is only ',I10,'.  Th
     *is may not be large enough to'/ ' handle the bremsstrahlung splitt
     *ing.  We recommend increasing'/ ' $MXSTACK to at least 4*NBRSPL ='
     *,I10,' in '/ ' beamnrc_user_macros.mortran.'//)
              WRITE(IOUTLIST,102)10000,4*NBRSPL
102           FORMAT(//' ***WARNING***'/ ' $MXSTACK is only ',I10,'.  Th
     *is may not be large enough to'/ ' handle the bremsstrahlung splitt
     *ing.  We recommend increasing'/ ' $MXSTACK to at least 4*NBRSPL ='
     *,I10,' in '/ ' beamnrc_user_macros.mortran.'//)
          END IF
          IF ((LATCH_OPTION.LT.2)) THEN
              LATCH_OPTION=2
              WRITE(6,4460)
4460          FORMAT(//' LATCH_OPTION cannot be set to 0 or 1 if brem-sp
     *litting required.'/ ' LATCH_OPTION has been re-set to 2'//)
          END IF
      END IF
      IF((IBRSPL.EQ.1 .OR. IBRSPL.EQ.2))nbr_split=NBRSPL
      IF ((IRRLTT.EQ.2)) THEN
          i_play_RR=1
          IF((IBRSPL.EQ.1 .OR. IBRSPL.EQ.2))prob_RR=1./FLOAT(NBRSPL)
      END IF
      IF ((ICM_SPLIT.LT.0)) THEN
          ICM_SPLIT=0
      ELSE IF((ICM_SPLIT.EQ.1)) THEN
          WRITE(6,4470)
4470      FORMAT(//' ***WARNING***'/ ' You have set the arbitrary splitt
     *ing plane to the top of CM 1.'/ ' Splitting only works for CM > 1.
     *  Code will not fail but you'/ ' will not get splitting.'//)
          WRITE(IOUTLIST,103)
103       FORMAT(//' ***WARNING***'/ ' You have set the arbitrary splitt
     *ing plane to the top of CM 1.'/ ' Splitting only works for CM > 1.
     *  Code will not fail but you'/ ' will not get splitting.'//)
      END IF
      WRITE(6,4480)NCASE,IXXIN,JXXIN,TIMMAX,IBRSPL,NBRSPL,IRRLTT
4480  FORMAT(/' # of histories:',T60,I12/ ' 1st initial random number se
     *ed(>0,<31329):',T60,I12/ ' 2nd initial random number seed(>0,<3008
     *1):',T60,I12/ ' maximum cpu time allowed:',T60,F10.2,' hrs'/ ' bre
     *msstrahlung angular sampling is always switched on'/ ' bremsstrahl
     *ung splitting off(0),uniform(1),'/ ' directional(2):',T60,I12 / 'e
     *ach brem split into:',T60,I12/ ' Russian roulette off(0),on(1),on+
     *annihilation split(2):',T60,I12/)
      IF ((ICM_SPLIT.GT.0)) THEN
          WRITE(6,4490)ICM_SPLIT
4490      FORMAT(' Arbitrary splitting plane at top of CM # ',T60,I12)
      END IF
      WRITE(6,4500)
4500  FORMAT(' ')
      IF ((IBRSPL.EQ.2)) THEN
          WRITE(6,4510)
4510      FORMAT(' Inputs for DBS:'/ ' ---------------'/ ' Field radiusa
     *t SSD (cm), SSD (cm), CM no. for electron splitting'/ ' (0 for no 
     *splitting), Plane no. within CM for electron splitting,'/ ' IRAD_D
     *BS (set to 1 for radially-symmetric splitting), Z position'/ ' of 
     *russian roulette plane (cm).'/ ' : ',$)
          READ(i_input,4520,END=4140,ERR=4150)FS,SSD,ICM_DBS,ZPLANE_DBS,
     *    IRAD_DBS,ZRR_DBS
4520      FORMAT (2F12.0,3I12,F12.0)
          WRITE(6,4530)FS,SSD,ICM_DBS,ZPLANE_DBS,IRAD_DBS,ZRR_DBS
4530      FORMAT(/T1,2F12.3,3I12,F12.3)
          IF ((ICM_DBS.LE.0 .OR. ZPLANE_DBS.LE.0)) THEN
              ICM_DBS=0
              WRITE(6,4540)
4540          FORMAT(/' Electrons will not be split.'/)
          ELSE
              WRITE(6,4550)NBRSPL,ICM_DBS,ZPLANE_DBS,ZRR_DBS
4550          FORMAT(/' Electrons will be split ',I10,' times:'/ '  CM n
     *o. for splitting = ',I4,/ '        Splitting plane no.  = ',I8,/ '
     * Z of russian roulette plain = ',F8.5,' cm'/)
              IF ((IRAD_DBS.EQ.1)) THEN
                  WRITE(6,4560)
4560              FORMAT(/' Split electrons will be redistributed with r
     *adial'/ ' symmetry about the beam axis.'/)
              ELSE
                  IRAD_DBS=0
              END IF
          END IF
          WRITE(6,4570)
4570      FORMAT(' ')
      END IF
      IF ((ICM_SPLIT.GT.0)) THEN
          WRITE(6,4580)
4580      FORMAT(' NSPLIT_PHOT,NSPLIT_ELEC :',$)
          READ(i_input,4590,END=4140,ERR=4150)NSPLIT_PHOT,NSPLIT_ELEC
4590      FORMAT(2I6)
          WRITE(6,4600)NSPLIT_PHOT,NSPLIT_ELEC
4600      FORMAT(/T1,2I6)
          IF ((NSPLIT_PHOT.LE.1 .AND. NSPLIT_ELEC.LE.1)) THEN
              WRITE(6,4610)
4610          FORMAT(//' ***WARNING in arbitrary splitting:'/ ' Both NSP
     *LIT_PHOT and NSPLIT_ELEC are <=1'/ ' Implying no splitting is to b
     *e done for either particle type.'/ ' ICM_SPLIT will be set to 0, s
     *hutting off arbitrary splitting.'//)
              ICM_SPLIT=0
          END IF
          IF ((10000.LT.4*NSPLIT_PHOT)) THEN
              WRITE(6,4620)10000,4*NSPLIT_PHOT
4620          FORMAT(//' ***WARNING***'/ ' $MXSTACK is only ',I6,'.  Thi
     *s may not be large enough to'/ ' handle the photon splitting at an
     * arbitrary plane.  We recommend'/ ' increasing $MXSTACK to at leas
     *t 4*NSPLIT_PHOT = ',I6,' in '/ ' beamnrc_user_macros.mortran.'//)
              WRITE(IOUTLIST,104)10000,4*NSPLIT_PHOT
104           FORMAT(//' ***WARNING***'/ ' $MXSTACK is only ',I6,'.  Thi
     *s may not be large enough to'/ ' handle the photon splitting at an
     * arbitrary plane.  We recommend'/ ' increasing $MXSTACK to at leas
     *t 4*NSPLIT_PHOT = ',I6,' in '/ ' beamnrc_user_macros.mortran.'//)
          END IF
          IF ((10000.LT.4*NSPLIT_ELEC)) THEN
              WRITE(6,4630)10000,4*NSPLIT_ELEC
4630          FORMAT(//' ***WARNING***'/ ' $MXSTACK is only ',I6,'.  Thi
     *s may not be large enough to'/ ' handle the electron splitting ata
     *n arbitrary plane.  We recommend'/ ' increasing $MXSTACK to at lea
     *st 4*NSPLIT_ELEC = ',I6,' in '/ ' beamnrc_user_macros.mortran.'//)
              WRITE(IOUTLIST,105)10000,4*NSPLIT_ELEC
105           FORMAT(//' ***WARNING***'/ ' $MXSTACK is only ',I6,'.  Thi
     *s may not be large enough to'/ ' handle the photon splitting at an
     * arbitrary plane.  We recommend'/ ' increasing $MXSTACK to at leas
     *t 4*NSPLIT_ELEC = ',I6,' in '/ ' beamnrc_user_macros.mortran.'//)
          END IF
      END IF
      DOSE_STAT=0
      CALL ISOURCE
      WRITE(6,4640)
4640  FORMAT(/'(ESTEPIN,SMAX--DUMMY INPUTS),ECUTIN,PCUTIN,(IDORAY--DUMMY
     * INPUT)'/ 'IREJCT_GLOBAL(-2...2),ESAVE_GLOBAL,(IFLUOR--DUMMY INPUT
     *)'/'   : ',$)
      READ(i_input,4650,END=4140,ERR=4150)ESTEPIN,SMAX,ECUTIN,PCUTIN,IDO
     *RAY,IREJCT_GLOBAL,ESAVE_GLOBAL,IFLUOR
4650  FORMAT (4F15.0,2I12,F15.0,I5)
      WRITE(6,4660)ESTEPIN,SMAX,ECUTIN,PCUTIN,IDORAY,IREJCT_GLOBAL,ESAVE
     *_GLOBAL,IFLUOR
4660  FORMAT(F7.3, 1PE12.4, 0PF10.4,F10.4,2I5,F10.4, I5)
      IF ((ECUTIN.GT.ECUT(2))) THEN
          WRITE(6,4670)ECUT(2)
4670      FORMAT(/' ****WARNING****'/ ' ECUTIN > ECUT input in EGSnrc pa
     *rameters ( ',F10.4,' MeV).'/ ' ECUT defaults to ECUTIN.'/)
          DO 4681 I=2,3000
              ECUT(I)=ECUTIN
4681      CONTINUE
4682      CONTINUE
      ELSE
          ECUTIN=ECUT(2)
      END IF
      IF ((PCUTIN.GT.PCUT(2))) THEN
          WRITE(6,4690)PCUT(2)
4690      FORMAT(/' ****WARNING****'/ ' PCUTIN > PCUT input in EGSnrc pa
     *rameters ( ',F10.4,' MeV).'/ ' PCUT defaults to PCUTIN.'/)
          DO 4701 I=2,3000
              PCUT(I)=PCUTIN
4701      CONTINUE
4702      CONTINUE
      ELSE
          PCUTIN=PCUT(2)
      END IF
      IF ((MONOEN.EQ.1)) THEN
          IF ((SRCPDF(1).GT.0.0)) THEN
              IF ((IQIN.EQ.-1.AND.ENMIN.LT.ECUTIN)) THEN
                  WRITE(6,4710)
4710              FORMAT(//' *******WARNING:'/ ' min. energy of spectrum
     * < ECUTIN'/ ' May lead to artifically high dose in region(s) on wh
     *ich source', '  is incident'//)
                  WRITE(IOUTLIST,'(//'' *******WARNING:''/
     *                                      '' min. energy of spectrum <
     * ECUTIN''/                                          '' May lead to
     * artifically high dose in region(s)'',
     *'' on which source is incident''//)')
              ELSE IF((IQIN.EQ.0.AND.ENMIN.LT.PCUTIN)) THEN
                  WRITE(6,4720)
4720              FORMAT(//' *******WARNING:'/ ' min. energy of spectrum
     * < PCUTIN'/ ' May lead to artifically high dose in region(s) on wh
     *ich source', ' is incident'//)
                  WRITE(IOUTLIST,'(//'' *******WARNING:''/
     *                                      '' min. energy of spectrum <
     * PCUTIN''/                                          '' May lead to
     * artifically high dose in region(s)'',
     *'' on which source is incident''//)')
              END IF
          ELSE
              DO 4731 IB=2,NENSRC
                  IF ((SRCPDF(IB).GT.0.)) THEN
                      IF ((IQIN.EQ.-1.AND.ENSRCD(IB-1).LT.ECUTIN)) THEN
                          WRITE(6,4740)
4740                      FORMAT(//' *******WARNING:'/ ' min. energy ofs
     *pectrum < ECUTIN'/ ' May lead to artifically high dose in region(s
     *) on which source', ' is incident'//)
                          WRITE(IOUTLIST,'(//'' *******WARNING:''/
     *                                         '' min. energy of spectru
     *m < ECUTIN''/                                          '' May lead
     * to artifically high dose in region(s)'',
     *   '' on which source is incident''//)')
                      ELSE IF((IQIN.EQ.0.AND.ENSRCD(IB-1).LT.PCUTIN)) TH
     *                EN
                          WRITE(6,4750)
4750                      FORMAT(//' *******WARNING:'/ ' min. energy ofs
     *pectrum < PCUTIN'/ ' May lead to artifically high dose in region(s
     *) on which source', ' is incident'//)
                          WRITE(IOUTLIST,'(//'' *******WARNING:''/
     *                                         '' min. energy of spectru
     *m < PCUTIN''/                                          '' May lead
     * to artifically high dose in region(s)'',
     *   '' on which source is incident''//)')
                      END IF
                      GO TO4732
                  END IF
4731          CONTINUE
4732          CONTINUE
          END IF
      END IF
      WRITE(6,4760)ESAVE_GLOBAL
4760  FORMAT(' Global esave cutoff value for range rejection:',T60,F10.4
     *,' MeV')
      IF (( IREJCT_GLOBAL .LT. 0 .AND. IREJCT_GLOBAL .GT. -3 )) THEN
          i_rr_global = 1
          IREJCT_GLOBAL = -IREJCT_GLOBAL
      ELSE
          i_rr_global = 0
      END IF
      IF ((IREJCT_GLOBAL .LE. 0 .OR. IREJCT_GLOBAL .GT. 2)) THEN
          WRITE(6,4770)
4770      FORMAT(' NO RANGE REJECTION')
          IF ((ESAVE_GLOBAL .GT. ECUTIN)) THEN
              WRITE(6,4780)
4780          FORMAT(T10,' Why is ESAVE_GLOBAL set when there is no rang
     *e rejection?', /T15,'It is set to zero'/)
              ESAVE_GLOBAL = 0.0
          END IF
          IREJCT_GLOBAL=0
      ELSE IF((IREJCT_GLOBAL .GT. 0)) THEN
          WRITE(6,4790)
4790      FORMAT(' RANGE REJECTION below ESAVE with RANGE and DNEAR')
          IF ((ESAVE_GLOBAL .LE. ECUTIN)) THEN
              WRITE(6,4800)
4800          FORMAT(///' ******  NB ESAVE_GLOBAL <= ECUT  so NO Range R
     *ejection', ' ***' /'              Unless ESAVE set individually'//
     *)
          ELSE IF((ESAVE_GLOBAL .NE. 0.0 .AND. IREJCT_GLOBAL .EQ. 1)) TH
     *    EN
              WRITE(6,4810)
4810          FORMAT(///'       ***** NOTE ****',/ ' Automated range rej
     *ection (IREJCT_GLOBAL=1) is being used.',/ ' This implies doses wi
     *ll be inaccurate because of changes',/ ' in ECUTRR going from oneC
     *M to the next.'///)
          END IF
      ELSE
          WRITE(6,4820)IREJCT_GLOBAL
4820      FORMAT(' RANGE REJECTION  option:',I4,'  NOT IMPLEMENTED'/ 'No
     * range rejection done ******'//)
          IREJCT_GLOBAL = 0
      END IF
      WRITE(6,4830)
4830  FORMAT(/' Photon forcing: next five numbers on one line'/ ' Forcep
     *hoton interactions in the target?(0)=>no,(1)=>yes, '/ ' min/max ph
     *oton interaction #/history to do forcing for,'/ ' min/max CM # in 
     *which to do forcing  '/' : ',$)
      READ(i_input,4840,END=4140,ERR=4150)IFORCE,NFMIN,NFMAX, NFCMIN, NF
     *CMAX
4840  FORMAT(5I12)
      WRITE(6,4850)IFORCE,NFMIN,NFMAX, NFCMIN, NFCMAX
4850  FORMAT(5I4)
      IF(((IFORCE .LT. 0) .OR. (IFORCE .GT. 1)))IFORCE=0
      IF ((IFORCE .EQ. 0)) THEN
          WRITE(6,4860)
4860      FORMAT(/' No photon interaction forcing in effect'/)
      ELSE
          IF((NFMIN .LE. 0))NFMIN=1
          IF((NFMAX .LE. 0))NFMAX=1
          WRITE(6,4870)NFMIN,NFMAX
4870      FORMAT(/' Forced photon interactions in effect for interaction
     *s #', I3,' to',I3/)
          WRITE(6,4880)NFCMIN,NFCMAX
4880      FORMAT(/' Forced photons to interact in modules',I3,' to',I3,/
     *)
      END IF
      WRITE(6,4890)
4890  FORMAT(/' Information about scoring planes'/)
      IF ((IO_OPT.EQ.1 .OR. IO_OPT.EQ.2)) THEN
          WRITE(6,4900)IO_OPT
4900      FORMAT(' No phase space files since IO_OPT=',I3)
      ELSE
          WRITE(6,4910)
4910      FORMAT(' There will be phase space files generated at each pla
     *ne')
          IF((IO_OPT.EQ.4))WRITE(6,4920)
4920      FORMAT(' Phase space will be in IAEA format')
      END IF
      WRITE(6,4930)
4930  FORMAT(' Number of scoring planes(NSC_PLANES) & list of CMs (score
     * at', ' back of each)'/' : ',$)
      READ(i_input,4940,END=4140,ERR=4150)NSC_PLANES,(IPLANE_to_CM(I),I=
     *1,NSC_PLANES)
4940  FORMAT(10I5)
      WRITE(6,4950)NSC_PLANES,(IPLANE_to_CM(I),I=1,NSC_PLANES)
4950  FORMAT(10I5)
      IF ((NSC_PLANES .GT. 3)) THEN
          WRITE(6,4960)NSC_PLANES, 3
4960      FORMAT(///' *******asked for too many scoring planes**********
     *'/ '        reduced from',I4,' to', I3/ /' ***********************
     *')
          NSC_PLANES = 3
      END IF
      IF ((IO_OPT .NE. 1).AND.(NSC_PLANES .EQ. 0)) THEN
          WRITE(6,4970)
4970      FORMAT(//' AT LEAST ONE SCORING PLANE HAS TO BE GIVEN FOR PH-S
     *P OUTPUT!!'/ ' PLEASE RESTART AND USE NSC_PLANES > 0.'///)
          call exit(1)
      END IF
      IF((NSC_PLANES .LT. 0 .OR. NSC_PLANES .GT. 3))NSC_PLANES=3
      IF ((NSC_PLANES .EQ. 0)) THEN
          WRITE(6,4980)
4980      FORMAT(//' Number of scoring or output planes is zero.'/ ' Nof
     *luence scoring will be done.'//)
      ELSE
          WRITE(6,4990)NSC_PLANES,(IPLANE_to_CM(I),I=1,NSC_PLANES)
4990      FORMAT(' Number of planes for fluence scoring or phase space o
     *utput:', I5/ ' Fluence will be scored at the back of component mod
     *ule(s): ',10(I5,','))
          IF ((IPLANE_to_CM(1) .EQ. 0)) THEN
              WRITE(6,5000)
5000          FORMAT(' Scoring plane will default to back of last CM')
          END IF
      END IF
      IF ((NSC_PLANES.GT.0 .AND. IO_OPT .NE. 1 .AND. PHSP_OUTDIR.NE.' ')
     *) THEN
          WRITE(6,5010)PHSP_OUTDIR
5010      FORMAT(//' Phase space files at scoring planes will be outputt
     *o directory'/ ' : ',A)
      END IF
      IF ((NSC_PLANES .GT. 0)) THEN
          DO 5021 ISCORE=1,NSC_PLANES
              WRITE(6,5030)ISCORE
5030          FORMAT(/' Inputs for scoring plane ',I5)
              WRITE(6,5040)5
5040          FORMAT(/' Number of scoring zones(',I5, ') & zone type (0-
     *annular;1-square;2-grid): ',$)
              READ(i_input,5050,END=4140,ERR=4150)NSC_ZONES(ISCORE),MZON
     *        E_TYPE(ISCORE)
5050          FORMAT(2I5)
              IF ((NSC_ZONES(ISCORE) .GT. 5)) THEN
                  WRITE(6,5060)ISCORE, NSC_ZONES(ISCORE), 5
5060              FORMAT(///' *******asked for too many scoring zones fo
     *r scoring plane',I2, ' **********'/ '        reduced from',I4,' to
     *', I3/ /' ***********************'///)
                  NSC_ZONES(ISCORE) = 5
              END IF
              WRITE(6,5070)NSC_ZONES(ISCORE),MZONE_TYPE(ISCORE)
5070          FORMAT(2I5)
              IF((MZONE_TYPE(ISCORE) .LT.0 .OR. MZONE_TYPE(ISCORE).GT.2)
     *        )MZONE_TYPE(ISCORE)=0
              IF ((MZONE_TYPE(ISCORE) .EQ. 0)) THEN
                  IF ((NSC_ZONES(ISCORE).GT.0)) THEN
                      WRITE(6,5080)
5080                  FORMAT(' Radii of scoring zones, in increasing ord
     *er(10/line): ',$)
                      READ(i_input,5090,END=4140,ERR=4150)(RSCORE_ZONE(I
     *                SCORE,I),I=1,NSC_ZONES(ISCORE))
5090                  FORMAT (10F15.0)
                      WRITE(6,5100)(RSCORE_ZONE(ISCORE,I),I=1,NSC_ZONES(
     *                ISCORE))
5100                  FORMAT(10F10.5)
                      DO 5111 ISZ=1,NSC_ZONES(ISCORE)
                          RSCORE_ZONE2(ISCORE,ISZ) = RSCORE_ZONE(ISCORE,
     *                    ISZ)**2
5111                  CONTINUE
5112                  CONTINUE
                  ELSE
                      WRITE(6,5120)
5120                  FORMAT(' Five equal area annular zones to be usedf
     *or scoring')
                  END IF
                  WRITE(6,5130)
5130              FORMAT(' ')
              ELSE IF((MZONE_TYPE(ISCORE) .EQ. 1)) THEN
                  IF ((NSC_ZONES(ISCORE).GT.0)) THEN
                      WRITE(6,5140)
5140                  FORMAT(' Half-width of scoring zones, in increasin
     *g order(10/line)'/ ' : ',$)
                      READ(i_input,5150,END=4140,ERR=4150)(RSCORE_ZONE(I
     *                SCORE,I),I=1,NSC_ZONES(ISCORE))
5150                  FORMAT (10F15.0)
                      WRITE(6,5160)(RSCORE_ZONE(ISCORE,I),I=1,NSC_ZONES(
     *                ISCORE))
5160                  FORMAT(10F10.5)
                      DO 5171 ISZ=1,NSC_ZONES(ISCORE)
                          RSCORE_ZONE2(ISCORE,ISZ) = RSCORE_ZONE(ISCORE,
     *                    ISZ)**2
5171                  CONTINUE
5172                  CONTINUE
                  ELSE
                      WRITE(6,5180)
5180                  FORMAT(' Five equal area square rings to be used f
     *or scoring')
                  END IF
                  WRITE(6,5190)
5190              FORMAT(' ')
              ELSE IF((MZONE_TYPE(ISCORE) .EQ. 2)) THEN
                  READ(i_input,5200,END=4140,ERR=4150)XMIN_ZONE(ISCORE),
     *            XMAX_ZONE(ISCORE), YMIN_ZONE(ISCORE),YMAX_ZONE(ISCORE)
     *            , NX_ZONE(ISCORE),NY_ZONE(ISCORE)
5200              FORMAT (4F12.5,2I5)
                  WRITE(6,5210)
5210              FORMAT(' XMIN, XMAX, YMIN and YMAX in cm')
                  WRITE(6,5220)XMIN_ZONE(ISCORE),XMAX_ZONE(ISCORE), YMIN
     *            _ZONE(ISCORE),YMAX_ZONE(ISCORE)
5220              FORMAT(4F10.3)
                  WRITE(6,5230)NX_ZONE(ISCORE),NY_ZONE(ISCORE)
5230              FORMAT(' NX =',I3,'    NY =',I3)
                  IF ((NX_ZONE(ISCORE)*NY_ZONE(ISCORE).GT.5)) THEN
                      WRITE(6,5240)ISCORE, NX_ZONE(ISCORE)*NY_ZONE(ISCOR
     *                E), 5
5240                  FORMAT(///' *******asked for too many scoring zone
     *s for scoring plane',I2, ' **********'/ '   You asked for ',I4,' b
     *ut max. number is ',I4/ /' ***********************'///)
                      STOP
                  ELSE
                      NSC_ZONES(ISCORE)=NX_ZONE(ISCORE)*NY_ZONE(ISCORE)
                      WRITE(6,5250)NSC_ZONES(ISCORE)
5250                  FORMAT(' Total no. of scoring zones = ',I5)
                      DO 5261 ISZ=1,NX_ZONE(ISCORE)+1
                          RSCORE_ZONE(ISCORE,ISZ)=XMIN_ZONE(ISCORE)+ (XM
     *                    AX_ZONE(ISCORE)-XMIN_ZONE(ISCORE))/NX_ZONE(ISC
     *                    ORE)*(ISZ-1)
5261                  CONTINUE
5262                  CONTINUE
                      WRITE(6,5270)(RSCORE_ZONE(ISCORE,ISZ),ISZ=1,NX_ZON
     *                E(ISCORE)+1)
5270                  FORMAT(' X-grid boundaries:'/(6F10.3))
                      DO 5281 ISZ=1,NY_ZONE(ISCORE)+1
                          RSCORE_ZONE2(ISCORE,ISZ)=YMIN_ZONE(ISCORE)+ (Y
     *                    MAX_ZONE(ISCORE)-YMIN_ZONE(ISCORE))/NY_ZONE(IS
     *                    CORE)*(ISZ-1)
5281                  CONTINUE
5282                  CONTINUE
                      WRITE(6,5290)(RSCORE_ZONE2(ISCORE,ISZ),ISZ=1,NY_ZO
     *                NE(ISCORE)+1)
5290                  FORMAT(' Y-grid boundaries:'/(6F10.3))
                      WRITE(6,5300)
5300                  FORMAT(/)
                  END IF
              END IF
5021      CONTINUE
5022      CONTINUE
      END IF
      WRITE(6,5310)
5310  FORMAT(' Total dose only(0) or total dose & dose components(1):',$
     *)
      READ(i_input,5320,END=4140,ERR=4150)ITDOSE_ON
5320  FORMAT (I5)
      IF((ITDOSE_ON .NE. 1))ITDOSE_ON=0
      WRITE(6,5330)ITDOSE_ON
5330  FORMAT(I5)
      IF ((ITDOSE_ON .EQ. 1)) THEN
          WRITE(6,5340)
5340      FORMAT(/' CM # at which contaminant particles are identified o
     *n entry at front,'/ ' and type of contaminant particle (0=photons,
     *1=charged particles)'/ ' :',$)
          READ(i_input,5350,END=4140,ERR=4150)ICM_CONTAM, IQ_CONTAM
5350      FORMAT (2I5)
          WRITE(6,5360)ICM_CONTAM, IQ_CONTAM
5360      FORMAT(2I5)
          IF ((IQ_CONTAM .NE. 0).AND.(ABS(IQ_CONTAM) .NE. 1)) THEN
              WRITE(6,5370)
5370          FORMAT(///' Wrong input for IQ_CONTAM!!!'/ ' Try again wit
     *h IQ_CONTAM = 1(charged particles) or 0(photons)'//)
              call exit(1)
          END IF
          IF ((LATCH_OPTION .EQ. 1 .AND. ICM_CONTAM .NE. 0)) THEN
              WRITE(6,5380)
5380          FORMAT(//' ****************WARNING: **************'/ 'Cont
     *aminant dose is meaningless with LATCH_OPTION = 1'/ 'ICM_CONTAM ha
     *s been set to 0'//)
              WRITE(IOUTLIST,'(//''***WARNING:''/
     *                      ''Contaminant dose is meaningless with LATCH
     *_OPTION = 1''/                      ''ICM_CONTAM has been set to 0
     *''//)')
              ICM_CONTAM=0
          END IF
          IF (((ISOURC.EQ.21 .OR. ISOURC.EQ.23 .OR. ISOURC.EQ.24) .AND.
     *    ICM_CONTAM.LT.INIT_ICM)) THEN
              WRITE(6,5390)
5390          FORMAT(//'***WARNING:'/ 'ICM_CONTAM < CM # on which phases
     *pace/BEAMnrc sim. source is incident.'/ 'Cannot score contaminant 
     *dose in this case.'/ 'ICM_CONTAM reset to 0 (no contaminant dosede
     *termined) for now.'//)
              WRITE(IOUTLIST,'(//''***WARNING:''/
     *                  ''ICM_CONTAM <= CM # on which phase space/BEAMnr
     *c sim. source is incident.''/        ''Cannot score contaminant do
     *se in this case.''/                              ''ICM_CONTAM rese
     *t to 0 (no contaminant dose determined) for now.''//)')
              ICM_CONTAM=0
          ELSE IF((ICM_CONTAM.GE.1)) THEN
              IF ((IQ_CONTAM.EQ.0)) THEN
                  WRITE(6,5400)
5400              FORMAT(//' Dose from contaminant photons will be calcu
     *lated')
              ELSE IF((ABS(IQ_CONTAM).EQ.1)) THEN
                  WRITE(6,5410)
5410              FORMAT(//' Dose from contaminant electrons & positrons
     * will be calculated')
              END IF
              WRITE(6,5420)ICM_CONTAM
5420          FORMAT(' in CM # ',I4,//)
          ELSE
              WRITE(6,5430)
5430          FORMAT(//'No contaminant dose will be calculated'//)
              ICM_CONTAM=0
          END IF
          WRITE(6,5440)
5440      FORMAT(/' # of dose components which exclude particles', ' fro
     *m specified regions: ',$)
          READ(i_input,5450,END=4140,ERR=4150)LNEXC
5450      FORMAT (I5)
          WRITE(6,5460)LNEXC
5460      FORMAT(I5)
          IF ((LNEXC.LE.0)) THEN
              LNEXC=0
          END IF
          IF (( LNEXC+3.GT.12)) THEN
              WRITE(6,5470)12-3,12
5470          FORMAT(/' ******Input error: too many components asked for
     *'/ ' MAX. LNEXC =', I3,' since $MAXIT=',I3)
              call exit(1)
          END IF
          DO 5481 I=4,3+LNEXC
              WRITE(6,5490)I-3
5490          FORMAT(/' INPUT THE BIT #S IN LATCH FOR DOSE COMPONENT' ,I
     *4, /' WILL NOT SCORE THE DOSE WHEN THESE BITS ARE SET: ')
              READ(i_input,5500,END=4140,ERR=4150)(L_N_EXC(I, J),J=1, 31
     *        )
5500          FORMAT (31I5)
              DO 5511 J=1,31
                  IF ((L_N_EXC(I,J) .NE. 0)) THEN
                      WRITE(6,5520)L_N_EXC(I, J)
5520                  FORMAT(I5,$)
                  END IF
5511          CONTINUE
5512          CONTINUE
              WRITE(6,5530)
5530          FORMAT(' ')
5481      CONTINUE
5482      CONTINUE
          WRITE(6,5540)
5540      FORMAT(/' # of dose components including particles from specif
     *ied regions: ',$)
          READ(i_input,5550,END=4140,ERR=4150)LNINC
5550      FORMAT (I5)
          WRITE(6,5560)LNINC
5560      FORMAT(I5)
          IF ((LNINC.LE.0)) THEN
              LNINC=0
          END IF
          IF (( LNINC+LNEXC+3.GT.12)) THEN
              WRITE(6,5570)12-3-LNINC,12
5570          FORMAT(/' ******Input error: too many components asked for
     *', ' MAX. LNINC =', I3,' since $MAXIT=',I3)
              call exit(1)
          END IF
          DO 5581 I=4+LNEXC,3+LNEXC+LNINC
              WRITE(6,5590)I-3
5590          FORMAT(/' INPUT THE BIT #S IN LATCH FOR DOSE COMPONENT', I
     *4, /' INPUT BIT #S TO INCLUDE, 0, BIT #S TO EXCLUDE (IF ANY): ')
              READ(i_input,5600,END=4140,ERR=4150)(L_N_INC(I, J),J=1, 31
     *        )
5600          FORMAT (31I5)
              DO 5611 J=1,31
                  IF ((L_N_INC(I,J).EQ.0)) THEN
                      GO TO5612
                  ELSE
                      IF((J.EQ.1))WRITE(6,5620)
5620                  FORMAT(' WILL SCORE THE DOSE IF ANY OF THESE BITSA
     *RE SET: ')
                      WRITE(6,5630)L_N_INC(I, J)
5630                  FORMAT(I5,$)
                  END IF
5611          CONTINUE
5612          CONTINUE
              DO 5641 JJ=J+1,31
                  IF ((L_N_INC(I,JJ).EQ.0)) THEN
                      GO TO5642
                  ELSE
                      IF((JJ.EQ.J+1))WRITE(6,5650)
5650                  FORMAT(/' AND NONE OF THESE BITS ARE SET: ')
                      WRITE(6,5660)L_N_INC(I, JJ)
5660                  FORMAT(I5,$)
                  END IF
5641          CONTINUE
5642          CONTINUE
              WRITE(6,5670)
5670          FORMAT(' ')
5581      CONTINUE
5582      CONTINUE
      END IF
      WRITE(6,5680)
5680  FORMAT(/' Z dist from ref plane(Z=0) to CM front (include any airg
     *ap): ', $)
      READ(i_input,5690,END=4140,ERR=4150)Z_min_CM(1)
5690  FORMAT (F15.0)
      WRITE(6,5700)Z_min_CM(1)
5700  FORMAT(F11.5)
      DO 5711 I=1,3000
          IREGION_TO_BIT(I) = 0
5711  CONTINUE
5712  CONTINUE
      RETURN
4140  CONTINUE
      WRITE(6,5720)
5720  FORMAT(//' *** unexpected end of file reading input for INPUTS ***
     *')
      call exit(1)
4150  CONTINUE
      WRITE(6,5730)
5730  FORMAT(//' *** format error on input for INPUTS ***')
      call exit(1)
4340  CONTINUE
      WRITE(6,5740)
5740  FORMAT(//' *** format error on input for INPUTS ***'/ ' Note thatw
     *e have added a new input variable, ICM_SPLIT '/ ' for particle spl
     *itting at an arbitrary plane.  This error '/ ' may be due to thefa
     *ct that you are using an older input'/ ' file without ICM_SPLITand
     * with explanatory text on this'/ ' input line.')
      call exit(1)
      END
      SUBROUTINE ISUMRY
      implicit none
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L(3000),IPHTER(3000)
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      COMMON/ELECIN/ esig_e(12),psig_e(12), esige_max, psige_max, range_
     *ep(0:1,500,12), E_array(500,12), etae_ms0(500,12),etae_ms1(500,12)
     *,etap_ms0(500,12),etap_ms1(500,12),q1ce_ms0(500,12),q1ce_ms1(500,1
     *2),q1cp_ms0(500,12),q1cp_ms1(500,12),q2ce_ms0(500,12),q2ce_ms1(500
     *,12),q2cp_ms0(500,12),q2cp_ms1(500,12),blcce0(500,12),blcce1(500,1
     *2), EKE0(12),EKE1(12), XR0(12),TEFF0(12),BLCC(12),XCC(12), ESIG0(5
     *00,12),ESIG1(500,12),PSIG0(500,12),PSIG1(500,12),EDEDX0(500,12),ED
     *EDX1(500,12),PDEDX0(500,12),PDEDX1(500,12),EBR10(500,12),EBR11(500
     *,12),PBR10(500,12),PBR11(500,12),PBR20(500,12),PBR21(500,12),TMXS0
     *(500,12),TMXS1(500,12), expeke1(12), IUNRST(12),EPSTFL(12),IAPRIM(
     *12), sig_ismonotone(0:1,12)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/GEOM/ NREG
      INTEGER NREG
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/SOURCE/ COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,
     *COSTHETA,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SI
     *GN2,RIN1_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA
     *24, NNPHSP,NPHOTSRC,WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEA
     *M,YBEAM,ZBEAM,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL
     *2,PROBFC,PROBSD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z
     *_SOURCE,E_ph_sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT1
     *00,XSCAN_UNIT,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YIN
     *DEL, EKMAXSRC, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9, Y_SRC9, PR
     *OB_SRC9, ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN,RDISTF,RPDF,RCDF, F
     *NORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COSRNG,SINRNG,WEIGHTOLD,UINOL
     *D,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RSRC_DBS,SSDSRC_DBS,ZSRC_DBS
     *,sigma_src19,DIST24,ALPHA24,BETA24,RBEAMY, xo_src19, yo_src19, NRD
     *IST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p, NPASS_ph_s
     *p, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRATIO_YXF, OL
     *DSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUNT, IERROR,
     *RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB,MONOEN, NR
     *CYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE_FLAG, INIT
     *_ICMOLD,I_MUPHSP_IN,SPCNAM, the_beam_code,the_input_file,the_pegs_
     *file,SPEC_TITLE,phsp_open
      REAL*8 COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,COSTHETA
     *,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SIGN2,RIN1
     *_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA24
      integer*8 NNPHSP, NPHOTSRC
      real*8 WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEAM,YBEAM,ZBEAM
     *,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL2,PROBFC,PROB
     *SD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z_SOURCE,E_ph_
     *sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT100,XSCAN_UNIT
     *,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YINDEL, EKMAXSRC
     *, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9(10), Y_SRC9(10), PROB_SR
     *C9(10), ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN(1000,2),RDISTF(1000)
     *, RPDF(1000),RCDF(1000), FNORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COS
     *RNG,SINRNG,WEIGHTOLD,UINOLD,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RS
     *RC_DBS,SSDSRC_DBS,ZSRC_DBS,sigma_src19,DIST24,ALPHA24,BETA24,RBEAM
     *Y, xo_src19, yo_src19
      INTEGER NRDIST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p,
     * NPASS_ph_sp, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRA
     *TIO_YXF, OLDSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUN
     *T, IERROR, RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB
     *,MONOEN, NRCYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE
     *_FLAG, INIT_ICMOLD,I_MUPHSP_IN
      CHARACTER*256 SPCNAM
      CHARACTER*80 the_beam_code,the_input_file,the_pegs_file,SPEC_TITLE
      logical phsp_open
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/ENERGYSRC/NENSRC,IMODE,ENSRCD,SRCPDF,SRCCDF,ENMIN,CDFINV, D
     *ELTAK,IB, FILNAM
      real*8 ENSRCD(240),SRCPDF(240),SRCCDF(240),ENMIN, CDFINV(1000,2),D
     *ELTAK
      INTEGER IMODE,NENSRC,IB
      CHARACTER*256 FILNAM
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      INTEGER I,I1,I2,I3,J,JJ,kk,  I3MAX,  IOUT,  IRL,  LELKE,  lelktmp,
     * lelec
      real*8 AEMIN,  EIE,  ETAB(5),  RNGEE(12),  TSTTPM,  IEKMAX,  EKEI,
     *  ELKEI,  fedep,  elktmp,  dedxmid,  aux
      DATA ETAB/1.,1.5,2.,4.,6./
      CALL DATETIME(1)
      WRITE(IOUTLIST,100) TITLE,TIMEN,DATEN
100   FORMAT(// ,1A79/ /' NRCC CALN: BEAMnrc(EGSnrc) ',' ', ' ', /' ON '
     *,'linux64',' ',T60,A,1X,A)
      WRITE(IOUTLIST,200)
      WRITE(IOUTLIST,211) NCASE,NCASET
      IF(((NCASE+IHSTRY) .LT. 100))WRITE(IOUTLIST,203)
      IF ((IQIN .LT. 9) .AND. (ISOURC .LT. 21 .OR. ISOURC.EQ.22)) THEN
          IF ((IQIN .LT. 9)) THEN
              WRITE(IOUTLIST,204) IQIN
          END IF
          IF ((MONOEN .EQ. 0)) THEN
              WRITE(IOUTLIST,201) EIN
          END IF
          IF ((MONOEN .EQ. 1)) THEN
              WRITE(IOUTLIST,205) FILNAM, ENMIN, ENSRCD(NENSRC),NENSRC
              IF ((IMODE.EQ.1)) THEN
                  WRITE(IOUTLIST,'(T20,''  SPECTRUM FILE CONTAINS COUNTS
     */MeV'')')
              ELSE IF((IMODE.EQ.0)) THEN
                  WRITE(IOUTLIST,'(T20,''  SPECTRUM FILE CONTAINS COUNTS
     */BIN'')')
              END IF
              IF ((IOUTSP .EQ. 1)) THEN
                  WRITE(IOUTLIST,110) NENSRC
110               FORMAT(T20,'ENERGY DIST''N, # OF INCIDENT ENERGY BINS:
     *',T60, I3/T20,'BIN    KINETIC ENERGY     PROBABILITY  ')
                  DO 5751 IB=1,NENSRC
                      WRITE(IOUTLIST,120)IB,ENSRCD(IB),SRCPDF(IB)
120                   FORMAT(' ',T20,I3,T28,F7.3,T45,1PE10.3)
5751              CONTINUE
5752              CONTINUE
              END IF
          END IF
      ELSE IF((ISOURC .GE. 21 .AND. ISOURC.NE.22)) THEN
          IF (((ISOURC .EQ. 21 .OR. ISOURC.EQ.24) .AND. .NOT.phsp_open))
     *     THEN
              WRITE(IOUTLIST,207) NNPHSP, NPHOTSRC, EKMAXSRC, EKMINSRCE,
     *         NINCSRC, INIT_ICM, NRCYCL
              IF ((OLDSRC .EQ. 1)) THEN
                  WRITE(IOUTLIST,208)
              END IF
              IF ((IPARALLEL.GT.1 .AND. PARNUM.GT.0)) THEN
                  WRITE(IOUTLIST,209)IPARALLEL,INT((PARNUM-1)*NNPHSP/IPA
     *            RALLEL)+1, INT(PARNUM*NNPHSP/IPARALLEL)
              END IF
          END IF
      END IF
      IF (((IBRSPL .EQ. 1 .OR. IBRSPL .EQ. 2) .AND. USE_BCSE)) THEN
          NBRSPL = NBRSPL_ORGNL
      END IF
      IF ((IBRSPL .EQ. 0)) THEN
          WRITE(IOUTLIST,2279)
      ELSE IF((IBRSPL .EQ. 1)) THEN
          WRITE(IOUTLIST,2281)NBRSPL
      ELSE IF((IBRSPL .EQ. 2)) THEN
          WRITE(IOUTLIST,2289)FS,SSD,NBRSPL
          IF ((ICM_DBS.GT.0)) THEN
              WRITE(IOUTLIST,2290)ZPLANE_DBS,ICM_DBS,ZPOSN_DBS,ZRR_DBS
              IF ((IRAD_DBS.EQ.1)) THEN
                  WRITE(IOUTLIST,2291)
              ELSE
                  WRITE(IOUTLIST,2292)
              END IF
          END IF
      END IF
      IF ((USE_BCSE)) THEN
          WRITE(IOUTLIST,5760) nmed_enhance
5760      FORMAT(/T20,'Brem. cross section enhancement WILL be used'/ T2
     *0,' The following ',I2,' media will be enhanced:')
          DO 5771 i=1,12
              IF (( is_bcse_medium(i) )) THEN
                  WRITE(IOUTLIST,'(T20,24a1)') (media(kk,i),kk=1,24)
              END IF
5771      CONTINUE
5772      CONTINUE
          IF (( BCSE_POWER_N .GT. 0 )) THEN
              WRITE(IOUTLIST,5780) BCSE_FACTOR_C,BCSE_POWER_N
5780          FORMAT(T20,' Enhancement factor will be 1 + C*E**N WITH C=
     * ', 1PE14.6,' N = ',0PF9.2)
          ELSE
              WRITE(IOUTLIST,5790) BCSE_FACTOR_C
5790          FORMAT(T20,' Constant enhancement factor  =',F12.2)
          END IF
      ELSE
          WRITE(IOUTLIST,5800)
5800      FORMAT(T20,'Brem. cross section enhancement WILL NOT be used')
      END IF
      IF ((IBRSPL.EQ.1)) THEN
          IF ((IRRLTT .GE. 1)) THEN
              WRITE(IOUTLIST,2282)
          ELSE
              WRITE(IOUTLIST,2283)
          END IF
      END IF
      IF ((IRRLTT .EQ. 2)) THEN
          IF ((IBRSPL .EQ. 1)) THEN
              WRITE(IOUTLIST,2286)NBRSPL
          END IF
      END IF
      IF ((ICM_SPLIT.GT.0)) THEN
          WRITE(IOUTLIST,2287)ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC
      END IF
      IF ((IFORCE .NE. 0)) THEN
          IF (( NFCMIN.LT.1 .OR. NFCMIN.GT.NFCMAX )) THEN
              NFCMIN = 1
          END IF
          IF (( NFCMAX.LT.NFCMIN .OR. NFCMAX.GT.MAX_CMS )) THEN
              NFCMAX = MAX_CMS
          END IF
          WRITE(IOUTLIST,230)NFMIN,NFMAX,NFCMIN,NFCMAX
      ELSE
          WRITE(IOUTLIST,231)
      END IF
      IF ((NSC_PLANES .EQ. 0)) THEN
          WRITE(IOUTLIST,233)
      ELSE IF((NSC_PLANES.GT.0)) THEN
          WRITE(IOUTLIST,234)
          DO 5811 I=1,NSC_PLANES
              WRITE(IOUTLIST,235) I,IPLANE_to_CM(I)
5811      CONTINUE
5812      CONTINUE
          IF ((IO_OPT .EQ. 1.OR.IO_OPT .EQ. 2)) THEN
              WRITE(IOUTLIST,236)
          ELSE
              WRITE(IOUTLIST,237)
              IF((IO_OPT.EQ.4))WRITE(IOUTLIST,238)
          END IF
      END IF
200   FORMAT(' ',78('*')/ ' **',T78,'**'/ ' **',T38,'BEAMnrc',T78,'**'/'
     * **',T78,'**'/ ' **',T10,'Code developed at National Research Coun
     *cil of Canada as part of', T78,'**'/ ' **',T15,'OMEGA collaboratio
     *n with the University of Wisconsin.',T78,'**'/ ' **',T78,'**'/ '**
     *',' This is version V1 of BEAMnrc ' ,T78,'**'/ ' **',T78,'**'/ ' '
     *,78('*')//)
211   FORMAT(' Max # of histories: to run',I12,T50,'To analyze',T65,I12)
204   FORMAT(' ',T20,'Incident charge',T63,I2)
201   FORMAT(' ',T20,'Incident kinetic energy',T56,F9.3,' MeV')
202   FORMAT(' ',T20,'Maximum incident kinetic energy',T57,F9.3,' MeV')
203   FORMAT (' ',T4,'*** WARNING *** too few histories - statistical an
     *alysis', ' incorrect')
205   FORMAT(' ',T20,'Read incident kinetic energy spectrum from file:'/
     *A,/ ' ',T20,'  Minimum kinetic energy in spectrum',T56,F9.3,' MeV'
     *,/ ' ',T20,'  Maximum kinetic energy in spectrum',T56,F9.3,' MeV',
     */ ' ',T20,'               # of bins in spectrum',T56,I9)
207   FORMAT(' ',T20,'Reading in a phase space source with:',/, ' ',T20,
     *'             total # of particles',T56,I9,/ ' ',T20,'         # o
     *f photons',T56,I9,/ ' ',T20,'  Maximum particle kinetic energy',T5
     *6,F9.3,' MeV',/ ' ',T20,'  Minimum electron kinetic energy',T56,F9
     *.3,' MeV',/ ' ',T20,'  # of particles incident from',/ ' ',T20,'  
     *                original source',T56,F13.1,/ ' ',T20,'   Source en
     *tering at top of CM #',T63,I2/ ' ',T20,'  # of times to recycle pa
     *rticles',T56,I9)
208   FORMAT(/' ',T20,'***WARNING****NUMBER OF PHOTONS AND MINIMUM'/ ' '
     *,T20,'     PHOTON AND ELECTRON ENERGIES SHOWN ABOVE'/ ' ',T20,'  H
     *AVE BEEN SET TO ZERO EITHER BECAUSE THE'/ ' ',T20,'     THE SOURCE
     * FILE WAS GENERATED BY AN OLDER'/ ' ',T20,'     VERSION OF BEAMnrc
     * OR BECAUSE IT HAS AN ERROR.'/ ' ',T20,'     CHECK THE FILE!!'/)
209   FORMAT(/,' ',T20,'This is one of ',I4,' parallel runs'/ ' ',T20,'S
     *imulation will use from particle',T56,I12,/ ' ',T20,'         to p
     *article',T56,I12)
230   FORMAT(' ',T20,'Min/max photon step forced',T60,I6,'/',I6, /T20,'M
     *in/max CM modules to force interaction',T60,I6,'/',I6)
231   FORMAT(' ',T20,'Photon force interaction switch',T60,'OFF')
233   FORMAT(' ',T20,'There are no scoring planes')
234   FORMAT(' ',T20,'SCORING PLANES:     #',T52,'CM #',/ ' ',T20,'-----
     *----------------',T52,'----')
235   FORMAT(' ',T37,I4,T53,I2)
236   FORMAT(T20,'No phase space files will be output')
237   FORMAT(T20,'Phase space files will be output at EVERY scoring plan
     *e')
238   FORMAT(T20,'Phase space files will be in IAEA format')
2279  FORMAT(/T20,'Bremsstrahlung splitting',T60,'OFF')
2281  FORMAT(/T20,'Bremsstrahlung splitting',T60,'UNIFORM'/T20, 'Initial
     *ly, each bremsstrahlung photon split into ',I10,' photons')
2282  FORMAT(T20,'Russian Roulette is',T60,'ON')
2283  FORMAT(T20,'Russian Roulette is',T60,'OFF')
2284  FORMAT(T20,'Annihilation splitting no.',T60,F5.1)
2286  FORMAT(T20,'Annihilation splitting no.',T60,I4)
2289  FORMAT(/T20,'Bremsstrahlung splitting',T60,'DIRECTIONAL'/ T20,' sp
     *litting field radius',T60,F8.3,' cm'/ T20,' splitting field SSD',T
     *60,F8.3,' cm'/ T20,' splitting no. in field',T60,I10)
2290  FORMAT(T20,' e+/e- will be split at plane',I4,' in CM',I4,':'/ T20
     *,'  Z of splitting plane',T60,F8.3,' cm'/ T20,'  Z of Russian Roul
     *ette plane',T60,F8.3,' cm')
2291  FORMAT(T20,'  Radial redistribution of split e+/e-',T60,'ON')
2292  FORMAT(T20,'  Radial redistribution of split e+/e-',T60,'OFF')
2287  FORMAT(T20,'Arbitrary split plane at top of CM',T60,I5/ T20,'     
     * Photon splitting number',T60,I5/ T20,'         Electron splitting
     * number',T60,I5)
      IF ((IREJCT_GLOBAL .EQ. 0)) THEN
          WRITE(IOUTLIST,'(T20,''RANGE REJECTION SWITCH'',T60,''OFF'')')
      ELSE IF((IREJCT_GLOBAL .GT. 0)) THEN
          lelec=-1
          JJ = 0
          DO 5821 I=1,NREG
              IF ((ESAVE(I) .GT. ECUT(I))) THEN
                  JJ = JJ + 1
              END IF
5821      CONTINUE
5822      CONTINUE
          IF ((JJ .EQ. 0)) THEN
              WRITE(IOUTLIST,'(T10,''ESAVE NEVER ABOVE ECUT=> NO RANGE R
     *EJECTION'')')
          END IF
          WRITE(IOUTLIST,'(T20,''Range rejection switch'',T60,''ON '' )'
     *    )
          IF ((JJ.GT.0)) THEN
              WRITE(IOUTLIST,5830) JJ
5830          FORMAT(T20,'Range rejection in',I4,' regions')
          END IF
          IF ((IREJCT_GLOBAL .EQ. 1)) THEN
              WRITE(IOUTLIST, '(T20,''Automatic ECUTRR used starting fro
     *m'',T60,F10.3,'' MeV'')') ECUTIN
          END IF
          IF ((IREJCT_GLOBAL .EQ. 2)) THEN
              WRITE(IOUTLIST,'(T30,''Fixed ECUT used'')')
          END IF
          WRITE(IOUTLIST, '('' Range rejection based on medium of region
     * particle is traversing'')')
          I3MAX = MIN0(NMED,7)
          WRITE(IOUTLIST,246) I3MAX,((MEDIA(J,I),J=1,8),I=1,I3MAX)
246       FORMAT(' Maximum electron ranges for restricted stopping power
     *s:'/ '   kinetic',T20,'   Range for media 1 through',I2/ '   energ
     *y',T30,'      (cm)'/'   (MeV)    ',6(8A1,2X),8A1)
          AEMIN = 1.E30
          IEKMAX = 20.
          DO 5841 I3=1,I3MAX
              IF ((AEMIN .GT. AE(I3))) THEN
                  AEMIN = AE(I3)
              END IF
5841      CONTINUE
5842      CONTINUE
          IF (((MONOEN .EQ. 0) .AND. (ISOURC.LT.21 .OR. ISOURC.EQ.22)))
     *    THEN
              IEKMAX = EIN
          ELSE IF((ISOURC.GE.21 .AND. EKMAXSRC.GT.0. .AND. ISOURC.NE.22)
     *    ) THEN
              IEKMAX = EKMAXSRC
          ELSE IF(((MONOEN.EQ.1) .AND. (ISOURC.LT.21 .OR. ISOURC.EQ.22))
     *    ) THEN
              IEKMAX = ENSRCD(NENSRC)
          END IF
          DO 5851 I1=1,8
              DO 5861 I2=1,5
                  EKE = ETAB(I2)*10.**(I1-4)
                  EIE = EKE+RM
                  IF ((EIE .GE. AEMIN .AND. EIE .LE. IEKMAX)) THEN
                      ELKE = LOG(EKE)
                      DO 5871 MEDIUM=1,I3MAX
                          RNGEE(MEDIUM) = 0.
                          IF ((EIE .GE. AE(MEDIUM) .AND. EIE .LE. UE(MED
     *                    IUM))) THEN
                              LELKE=EKE1(MEDIUM)*ELKE+EKE0(MEDIUM)
                              EKEI = E_array(LELKE,MEDIUM)
                              ELKEI = (LELKE - eke0(MEDIUM))/eke1(MEDIUM
     *                        )
                              fedep = 1 - EKEI/EKE
                              elktmp = 0.5*(ELKE+ELKEI+0.25*fedep*fedep*
     *                        (1+fedep*(1+0.875*fedep)))
                              lelktmp = LELKE
                              IF ((lelec .LT. 0)) THEN
                                  dedxmid=ededx1(Lelktmp,MEDIUM)*elktmp+
     *                            ededx0(Lelktmp,MEDIUM)
                                  dedxmid = 1/dedxmid
                                  aux = ededx1(lelktmp,medium)*dedxmid
                              ELSE
                                  dedxmid=pdedx1(Lelktmp,MEDIUM)*elktmp+
     *                            pdedx0(Lelktmp,MEDIUM)
                                  dedxmid = 1/dedxmid
                                  aux = pdedx1(lelktmp,medium)*dedxmid
                              END IF
                              aux = aux*(1+2*aux)*(fedep/(2-fedep))**2/6
                              RNGEE(MEDIUM) = fedep*EKE*dedxmid*(1+aux)
                              RNGEE(MEDIUM)=(RNGEE(MEDIUM)+range_ep(0,LE
     *                        LKE,MEDIUM))
                          END IF
                          IF ((EIE .GT. UE(MEDIUM))) THEN
                              RNGEE(MEDIUM) = 999.999
                          END IF
5871                  CONTINUE
5872                  CONTINUE
                      WRITE(IOUTLIST,247) EKE,(RNGEE(I3),I3=1,I3MAX)
247                   FORMAT(' ',F7.3,2X,10(F10.3))
                  END IF
5861          CONTINUE
5862          CONTINUE
5851      CONTINUE
5852      CONTINUE
          EKE = IEKMAX
          EIE = EKE+RM
          ELKE = LOG(EKE)
          DO 5881 MEDIUM=1,I3MAX
              RNGEE(MEDIUM) = 0.
              IF ((EIE .GE. AE(MEDIUM) .AND. EIE .LE. UE(MEDIUM))) THEN
                  LELKE=EKE1(MEDIUM)*ELKE+EKE0(MEDIUM)
                  EKEI = E_array(LELKE,MEDIUM)
                  ELKEI = (LELKE - eke0(MEDIUM))/eke1(MEDIUM)
                  fedep = 1 - EKEI/EKE
                  elktmp = 0.5*(ELKE+ELKEI+0.25*fedep*fedep*(1+fedep*(1+
     *            0.875*fedep)))
                  lelktmp = LELKE
                  IF ((lelec .LT. 0)) THEN
                      dedxmid=ededx1(Lelktmp,MEDIUM)*elktmp+ededx0(Lelkt
     *                mp,MEDIUM)
                      dedxmid = 1/dedxmid
                      aux = ededx1(lelktmp,medium)*dedxmid
                  ELSE
                      dedxmid=pdedx1(Lelktmp,MEDIUM)*elktmp+pdedx0(Lelkt
     *                mp,MEDIUM)
                      dedxmid = 1/dedxmid
                      aux = pdedx1(lelktmp,medium)*dedxmid
                  END IF
                  aux = aux*(1+2*aux)*(fedep/(2-fedep))**2/6
                  RNGEE(MEDIUM) = fedep*EKE*dedxmid*(1+aux)
                  RNGEE(MEDIUM)=(RNGEE(MEDIUM)+range_ep(0,LELKE,MEDIUM))
              END IF
              IF ((EIE .GT. UE(MEDIUM))) THEN
                  RNGEE(MEDIUM) = 999.999
              END IF
5881      CONTINUE
5882      CONTINUE
          WRITE(IOUTLIST,247) EKE,(RNGEE(I3),I3=1,I3MAX)
      END IF
      IF(((ESAVE_GLOBAL .GT. 0.0)))WRITE(IOUTLIST,267)ESAVE_GLOBAL
267   FORMAT(' ',T20,'Discard all electrons below energy:',T60,F7.3, ' M
     *eV'/ T25,'if too far from closest boundary')
      WRITE(IOUTLIST,260) TIMMAX,IXXIN,JXXIN
260   FORMAT(' ',T20,'Maximum cputime allowed',T59,F10.2,' (hrs)'/ ' ',T
     *20,'Initial random number seeds',T50,I12,I14)
      IF ((LATCH_OPTION .EQ. 1)) THEN
          WRITE(IOUTLIST,'(T13,''LATCH_OPTION = 1: Latch values for seco
     *ndaries not''/                     T13,''                  inherit
     *ed from primaries.'')')
      ELSE IF((LATCH_OPTION .EQ. 2)) THEN
          WRITE(IOUTLIST,'(T13,''LATCH_OPTION = 2: Latch values inherite
     *d, origin of''/                    T13,''                  seconda
     *ry particles recorded.'')')
      ELSE IF((LATCH_OPTION .EQ. 3)) THEN
          WRITE(IOUTLIST,'(T13,''LATCH_OPTION = 3: Latch values inherite
     *d, origin of''/                    T13,''                  seconda
     *ry particles recorded.  For''/                   T13,''
     *       photons, region no. are recorded''/                     T13
     *,''                  where they interact, not where ''/
     *           T13,''                  they just pass through.'')')
      END IF
      call show_transport_parameter(IOUTLIST)
      WRITE(IOUTLIST,300) NMED
      DO 5891 I=1,NMED
          WRITE(IOUTLIST,310) I,(MEDIA(J,I),J=1,18),RHO(I),AE(I),AP(I),U
     *    E(I),UP(I)
5891  CONTINUE
5892  CONTINUE
300   FORMAT('  ',T20,'Material summary   ',I1,' Materials used'/ ' ',79
     *('*')/ '  # Material',11x,'density(g/cm**3)',3X,'AE(MeV)',3X,'AP(M
     *eV)', 5X,'UE(MeV)',2X,'UP(MeV)'/ ' -- -----------------  ---------
     *-------',3X,'-------', 3X,'-------',5X,'-------',2X,'-------')
310   FORMAT(' ',I2,1X,18A1,3X,1PE10.3,1x,2(3X,0PF9.3,1X,F9.3))
      CALL SRCOUT
      WRITE(IOUTLIST,548)
548   FORMAT(/' REGION and RANGE REJECTION SUMMARY:',/ ' ***************
     ********************'/)
      WRITE(IOUTLIST,549) NREG
549   FORMAT(' Total number of regions, including region 1', ' which sur
     *rounds the geometry:', I4)
      WRITE(IOUTLIST,550)
      WRITE(IOUTLIST,560) 1,1,0,'exterior',0,0,0,'V','a','c','u','u','m'
      DO 5901 IRL=2,NREG
          IF ((IREGION_TO_BIT(IRL).LT.1.OR.IREGION_TO_BIT(IRL).GT.23)) T
     *    HEN
              IREGION_TO_BIT(IRL)=23
          END IF
5901  CONTINUE
5902  CONTINUE
      DO 5911 IRL=2,NREG
          IF ((IREJCT_GLOBAL .GT. 0)) THEN
              IF ((IREJCT(IRL).EQ.0)) THEN
                  IF ((MED(IRL).EQ.0)) THEN
                      WRITE(IOUTLIST,560) IRL, IRL-IR_start_CM(IR_to_CM(
     *                IRL))+1, IR_to_CM(IRL), CMLIST(IR_to_CM(IRL)), DOS
     *                E_ZONE(IRL), IREGION_TO_BIT(IRL), MED(IRL),'V','a'
     *                ,'c','u','u','m',' ',' ',' ',ECUTRR(IRL), RANGE_EC
     *                UTRR(IRL),ESAVE(IRL),'NO RR'
                  ELSE
                      WRITE(IOUTLIST,560) IRL, IRL-IR_start_CM(IR_to_CM(
     *                IRL))+1, IR_to_CM(IRL), CMLIST(IR_to_CM(IRL)), DOS
     *                E_ZONE(IRL), IREGION_TO_BIT(IRL), MED(IRL),(MEDIA(
     *                J,MED(IRL)),J=1,9),ECUTRR(IRL), RANGE_ECUTRR(IRL),
     *                ESAVE(IRL),'NO RR'
                  END IF
              ELSE IF((IREJCT(IRL).EQ.1)) THEN
                  IF ((MED(IRL).EQ.0)) THEN
                      WRITE(IOUTLIST,560) IRL, IRL-IR_start_CM(IR_to_CM(
     *                IRL))+1, IR_to_CM(IRL), CMLIST(IR_to_CM(IRL)), DOS
     *                E_ZONE(IRL), IREGION_TO_BIT(IRL), MED(IRL),'V','a'
     *                ,'c','u','u','m',' ',' ',' ',ECUTRR(IRL), RANGE_EC
     *                UTRR(IRL),ESAVE(IRL),'DNEAR'
                  ELSE
                      WRITE(IOUTLIST,560) IRL, IRL-IR_start_CM(IR_to_CM(
     *                IRL))+1, IR_to_CM(IRL), CMLIST(IR_to_CM(IRL)), DOS
     *                E_ZONE(IRL), IREGION_TO_BIT(IRL), MED(IRL),(MEDIA(
     *                J,MED(IRL)),J=1,9),ECUTRR(IRL), RANGE_ECUTRR(IRL),
     *                ESAVE(IRL),'DNEAR'
                  END IF
              END IF
          ELSE
              ESAVE(IRL)=0.0
              IF ((IRL.EQ.2)) THEN
                  IF ((MED(IRL).EQ.0)) THEN
                      WRITE(IOUTLIST,565) IRL, IRL-IR_start_CM(IR_to_CM(
     *                IRL))+1, IR_to_CM(IRL), CMLIST(IR_to_CM(IRL)), DOS
     *                E_ZONE(IRL), IREGION_TO_BIT(IRL), MED(IRL),'V','a'
     *                ,'c','u','u','m',' ',' ',' ', 'Global range reject
     *ion off'
                  ELSE
                      WRITE(IOUTLIST,565) IRL, IRL-IR_start_CM(IR_to_CM(
     *                IRL))+1, IR_to_CM(IRL), CMLIST(IR_to_CM(IRL)), DOS
     *                E_ZONE(IRL), IREGION_TO_BIT(IRL), MED(IRL),(MEDIA(
     *                J,MED(IRL)),J=1,9), 'Global range rejection off'
                  END IF
              ELSE
                  IF ((MED(IRL).EQ.0)) THEN
                      WRITE(IOUTLIST,565) IRL, IRL-IR_start_CM(IR_to_CM(
     *                IRL))+1, IR_to_CM(IRL), CMLIST(IR_to_CM(IRL)), DOS
     *                E_ZONE(IRL), IREGION_TO_BIT(IRL), MED(IRL),'V','a'
     *                ,'c','u','u','m'
                  ELSE
                      WRITE(IOUTLIST,565) IRL, IRL-IR_start_CM(IR_to_CM(
     *                IRL))+1, IR_to_CM(IRL), CMLIST(IR_to_CM(IRL)), DOS
     *                E_ZONE(IRL), IREGION_TO_BIT(IRL), MED(IRL),(MEDIA(
     *                J,MED(IRL)),J=1,9)
                  END IF
              END IF
          END IF
5911  CONTINUE
5912  CONTINUE
550   FORMAT(/T3,'Region',T13,'CM',T25,'Dose', T32,'IR_', T39,'Medium',T
     *49,'ECUTRR',T57,'res_rnge',T67,'ESAVE', T75,'type', /T2,'abs',T6,'
     *local',T13,'# IDENTIF ',T25,'ZONE', T32,'TO_', T37,'(No.&Name)',T5
     *0,'(MeV)',T59,'(cm)',T67,'(MeV)', /T24,'(0=no)',T32,'BIT')
560   FORMAT(1x,i3,i4,i5,1x,A8,I4,I7,I5,1X,9A1,F7.3,F8.3,F8.3,A7)
565   FORMAT(1x,i3,i4,i5,1x,A8,I4,I7,I5,1X,9A1,A32)
      IF ((NSC_PLANES.EQ.0)) THEN
          WRITE(6,5920)
5920      FORMAT(/' No scoring planes included in output')
      ELSE
          WRITE(6,5930)NSC_PLANES
5930      FORMAT(/' There are',I3,' scoring planes -see below')
      END IF
      WRITE(IOUTLIST,'(/'' Component Module summary:''/
     *                               '' *************************'')')
      IF ((MAX_CMs .EQ. 1)) THEN
          WRITE(IOUTLIST,'(/''  There is 1 Component Module:''/)')
      ELSE
          WRITE(IOUTLIST,'(/''  There are'',I3,'' Component Modules.''/)
     *') MAX_CMs
      END IF
      WRITE(IOUTLIST,540)
      DO 5941 ICM=1,MAX_CMs
          WRITE(IOUTLIST,545) ICM,CMTYPE(ICM),CMLIST(ICM),IR_start_CM(IC
     *    M), RMAX_CM_FLAG(ICM),RMAX_CM(ICM),Z_min_CM(ICM),Z_gap_THICK(I
     *    CM), ICM_to_SCORE(ICM)
5941  CONTINUE
5942  CONTINUE
540   FORMAT( '     COMPONENT MODULE  FIRST     BOUNDARY    DISTANCE FRO
     *M    AIR    SCORING'/ '                      REGION  (1=cyl,2=sq) 
     *REFERENCE PLANE   GAP     PLANE'/ '  #  TYPE  IDENTIFIERFLAG    (c
     *m)          (cm)      (cm)   (0=none)' /)
545   FORMAT(I3,1X,A,1X,A,I5,I6,F10.3,4X,F10.3,F10.3,I6)
      CALL ISUMRY_XITWIN
      CALL ISUMRY_COLLIMAT
      CALL ISUMRY_SCATFOIL
      CALL ISUMRY_IONCHAM
      CALL ISUMRY_RING
      CALL ISUMRY_MIRROR
      CALL ISUMRY_MAINJAWS
      CALL ISUMRY_APPLICAT
      WRITE(IOUTLIST,'(//)')
      RETURN
      END
      SUBROUTINE OSUMRY
      implicit none
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L(3000),IPHTER(3000)
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      COMMON/ELECIN/ esig_e(12),psig_e(12), esige_max, psige_max, range_
     *ep(0:1,500,12), E_array(500,12), etae_ms0(500,12),etae_ms1(500,12)
     *,etap_ms0(500,12),etap_ms1(500,12),q1ce_ms0(500,12),q1ce_ms1(500,1
     *2),q1cp_ms0(500,12),q1cp_ms1(500,12),q2ce_ms0(500,12),q2ce_ms1(500
     *,12),q2cp_ms0(500,12),q2cp_ms1(500,12),blcce0(500,12),blcce1(500,1
     *2), EKE0(12),EKE1(12), XR0(12),TEFF0(12),BLCC(12),XCC(12), ESIG0(5
     *00,12),ESIG1(500,12),PSIG0(500,12),PSIG1(500,12),EDEDX0(500,12),ED
     *EDX1(500,12),PDEDX0(500,12),PDEDX1(500,12),EBR10(500,12),EBR11(500
     *,12),PBR10(500,12),PBR11(500,12),PBR20(500,12),PBR21(500,12),TMXS0
     *(500,12),TMXS1(500,12), expeke1(12), IUNRST(12),EPSTFL(12),IAPRIM(
     *12), sig_ismonotone(0:1,12)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/GEOM/ NREG
      INTEGER NREG
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/SOURCE/ COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,
     *COSTHETA,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SI
     *GN2,RIN1_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA
     *24, NNPHSP,NPHOTSRC,WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEA
     *M,YBEAM,ZBEAM,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL
     *2,PROBFC,PROBSD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z
     *_SOURCE,E_ph_sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT1
     *00,XSCAN_UNIT,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YIN
     *DEL, EKMAXSRC, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9, Y_SRC9, PR
     *OB_SRC9, ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN,RDISTF,RPDF,RCDF, F
     *NORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COSRNG,SINRNG,WEIGHTOLD,UINOL
     *D,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RSRC_DBS,SSDSRC_DBS,ZSRC_DBS
     *,sigma_src19,DIST24,ALPHA24,BETA24,RBEAMY, xo_src19, yo_src19, NRD
     *IST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p, NPASS_ph_s
     *p, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRATIO_YXF, OL
     *DSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUNT, IERROR,
     *RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB,MONOEN, NR
     *CYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE_FLAG, INIT
     *_ICMOLD,I_MUPHSP_IN,SPCNAM, the_beam_code,the_input_file,the_pegs_
     *file,SPEC_TITLE,phsp_open
      REAL*8 COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,COSTHETA
     *,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SIGN2,RIN1
     *_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA24
      integer*8 NNPHSP, NPHOTSRC
      real*8 WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEAM,YBEAM,ZBEAM
     *,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL2,PROBFC,PROB
     *SD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z_SOURCE,E_ph_
     *sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT100,XSCAN_UNIT
     *,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YINDEL, EKMAXSRC
     *, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9(10), Y_SRC9(10), PROB_SR
     *C9(10), ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN(1000,2),RDISTF(1000)
     *, RPDF(1000),RCDF(1000), FNORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COS
     *RNG,SINRNG,WEIGHTOLD,UINOLD,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RS
     *RC_DBS,SSDSRC_DBS,ZSRC_DBS,sigma_src19,DIST24,ALPHA24,BETA24,RBEAM
     *Y, xo_src19, yo_src19
      INTEGER NRDIST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p,
     * NPASS_ph_sp, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRA
     *TIO_YXF, OLDSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUN
     *T, IERROR, RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB
     *,MONOEN, NRCYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE
     *_FLAG, INIT_ICMOLD,I_MUPHSP_IN
      CHARACTER*256 SPCNAM
      CHARACTER*80 the_beam_code,the_input_file,the_pegs_file,SPEC_TITLE
      logical phsp_open
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common/CH_steps/ count_pII_steps,count_all_steps,is_ch_step
      real*8 count_pII_steps,count_all_steps
      logical is_ch_step
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      INTEGER I,J,  IPAR,  IQL,  IT,  IT1,  MAXIT1, IT2,  MAXIT2, TYPE,
     * NNZ,  HADZERO,  NOCOV
      REAL TOTNUM,  NUMTOT,  TOTERR,  TOTflu_uncer
      real*8 XPLOT(1500),YPLOT(1500),ERRY(1500)
      CHARACTER*100 SUBTITLE
      CHARACTER*60 GRAPHTITLE,XTITLE,YTITLE,SERIESTITLE
      CHARACTER*3 COMPNUM
      integer egs_open_file
      IF ((IBRSPL .EQ. 1)) THEN
          WRITE(IOUTLIST,90)NBRSPL
      END IF
      WRITE(IOUTLIST,200) SCSTP,SCSTP2, SCSTP/(NINCSRC*dble(IHSTRY+(NRCY
     *CL+1)*(NPASS_ph_sp+NFAT_ph_sp))/FLOAT(NNPHSP)), SCSTP2,(count_pII_
     *steps+PIISTP)/SCSTP,SCSTP2
90    FORMAT(/' FINAL BREMSSTRAHLUNG EVENTS CREATE ',I10,' PHOTONS'/)
100   FORMAT(' ',80A1/' ',75X,A,1X,A// T28,'SUMMARY OF FLUENCE AND DOSER
     *ESULTS'/ ' ',T28,'***********************************')
200   FORMAT(/' ',T20,'TOTAL # CHARGED PARTICLE STEPS',T57, 1PE10.3,' +/
     *-',0PF4.1,'%'/ ' ',T10,'# CHARGED PARTICLE STEPS/INITIAL HISTORY',
     *T57, 1PE10.3,' +/-',0PF4.1,'%'/ ' ','# PRESTA-II STEPS/TOTAL # CHA
     *RGED PARTICLE STEPS',T60, F7.3,' +/-',0PF4.1,'%')
      IF ((IRESTART.NE.4 .AND. .NOT.is_finished)) THEN
          WRITE(IOUTLIST, '(/''        NO. OF BREMSSTRAHLUNG EVENTS IN T
     *HIS RUN:'',T60,I12)') NUM_BREM
          WRITE(IOUTLIST,'(/T20,'' Maximum depth of stack='',I8)') MXNP
      END IF
      IF ((ISOURC .EQ. 21 .OR. ISOURC.EQ.23 .OR. ISOURC.EQ.24)) THEN
          IF ((N_ph_sp_e .NE. 0)) THEN
              E_ph_sp_e = E_ph_sp_e/N_ph_sp_e
          END IF
          IF ((N_ph_sp_g .NE. 0)) THEN
              E_ph_sp_g = E_ph_sp_g/N_ph_sp_g
          END IF
          IF ((N_ph_sp_p .NE. 0)) THEN
              E_ph_sp_p = E_ph_sp_p/N_ph_sp_p
          END IF
          IF ((ISOURC .EQ. 21 .OR. ISOURC.EQ.24)) THEN
              WRITE(IOUTLIST,'(/T5,''PHASE SPACE SOURCE: Summary of part
     *icles '',          ''used (not including recycling)''/
     *                                 '' Used total of'',I10,'' particl
     *es, ignored'',I6,                              '' multiple passers
     *''/                                                          '' an
     *d rejected'',I6,'' photons falling outside the DBS radius at SSD''
     *)') N_ph_sp_e+N_ph_sp_g+N_ph_sp_p,NPASS_ph_sp,NFAT_ph_sp
          ELSE IF((ISOURC.EQ.23)) THEN
              WRITE(IOUTLIST,'(/T5,''BEAM SIMULATION SOURCE: Summary of
     *particles used''/  '' Used total of'',I10,'' particles, and reject
     *ed'',I6,'' fat photons'')') N_ph_sp_e+N_ph_sp_g+N_ph_sp_p,NFAT_ph_
     *        sp
          END IF
          WRITE(IOUTLIST, '(/'' Equivalent to'',I10,'' primary histories
     *'')') NHSTRY
          WRITE(IOUTLIST,'(/'' There were'',I10,'' electrons with averag
     *e energy'',         T55, F9.4,'' MeV'')') N_ph_sp_e,E_ph_sp_e
          WRITE(IOUTLIST,'(/'' There were'',I10,'' photons with average
     *energy'',           T55, F9.4,'' MeV'')') N_ph_sp_g,E_ph_sp_g
          WRITE(IOUTLIST,'(/'' There were'',I10,'' positrons with averag
     *e energy'',         T55, F9.4,'' MeV'')') N_ph_sp_p,E_ph_sp_p
          WRITE(IOUTLIST,'(/'' Maximum particle energy was'',F12.3,'' Me
     *V'')') E_MAX_ph_sp
      END IF
      IF ((NSC_PLANES .GT. 0)) THEN
          IF ((IO_OPT .EQ. 0 .OR. IO_OPT .GE. 3)) THEN
              WRITE(IOUTLIST, '(/T20,'' PHASE SPACE FILE OUTPUT''/T20,
     *                                             '' ******************
     ******''/)')
              WRITE(IOUTLIST, '('' FILE  SCORE    TOTAL     TOTAL'',
     *                                    ''    MAX. KE OF       MIN. KE
     * OF     # INCIDENT''/                                 ''  #    PLA
     *NE  PARTICLES* PHOTONS*'',                                      ''
     *   PARTICLES        ELECTRONS   PARTICLES FROM''/
     *                ''                                '',
     *                          ''      (MeV)            (MeV)    ORIGIN
     *AL SOURCE''/)')
              DO 5951 ICM=1,MAX_CMs
                  ISCORE=ICM_to_SCORE(ICM)
                  IF ((ISCORE .NE. 0)) THEN
                      IF ((IRESTART.EQ.3.OR.IRESTART.EQ.4.OR.is_finished
     *                )) THEN
                          WRITE(IOUTLIST,'(I4,I7,I11,I9,''**'',F11.4,''*
     **'',F15.4,''**'',                                  F14.3,''**''/)'
     *                    ) ISCORE,ISCORE,NPPHSP(ISCORE), NPHOTPHSP(ISCO
     *                    RE),EKMAXPHSP(ISCORE),EKMINPHSPE(ISCORE), NINC
     *                    PHSP
                      ELSE
                          WRITE(IOUTLIST,'(I4,I7,I11,I9,F13.4,F17.4,F16.
     *3/)') ISCORE,ISCORE,NPPHSP(ISCORE), NPHOTPHSP(ISCORE),EKMAXPHSP(IS
     *                    CORE),EKMINPHSPE(ISCORE), NINCPHSP
                      END IF
                  END IF
5951          CONTINUE
5952          CONTINUE
          END IF
          IF ((DOSE_STAT.EQ.1)) THEN
              WRITE(IOUTLIST,'(//'' ***WARNING***''/
     *                '' Could not read no. of primary (non-phsp) histor
     *ies from ph-sp source.''/     '' Dose and fluence analyzed assumin
     *g each particle read from the ph-sp''/      '' file is an independ
     *ent history.  May result in an underestimate''/           '' of un
     *certainties.''//)')
          END IF
          IF ((OUTCNT.GT.0)) THEN
              WRITE(IOUTLIST,'(//'' ***WARNING***''/
     *                '' The phsp source was restarted at least once.  T
     *his may lead''/               '' to an underestimate of uncertaint
     *y, especially if restarted''/               '' many times.  If res
     *tarted many times, try re-running with''/                 '' NRCYC
     *L recalculated as described at top of beamnrc.mortran''//)')
          END IF
          WRITE(IOUTLIST,'(//T20,'' FLUENCE RESULTS''/T20, '' **********
     ******''/)')
          IF ((OLDSRC.EQ.1.OR.OLDSRC.EQ.2)) THEN
              WRITE(IOUTLIST, '('' ***WARNING: FLUENCE IS NORMALIZED per
     * PARTICLE INCIDENT FROM''/              ''             PHASE SPACE
     * SOURCE, NOT ORIGINAL SOURCE''//)')
          END IF
          DO 5961 ICM=1,MAX_CMs
              ISCORE=ICM_to_SCORE(ICM)
              IF ((ISCORE .NE. 0)) THEN
                  IF ((MZONE_TYPE(ISCORE) .EQ. 0)) THEN
                      WRITE(IOUTLIST, '(''  CM SCORE POSITION   TOTAL'',
     *                              T48,  ''ZONE RADII'',/,
     *                                     ''     PLANE  (cm)    PARTICL
     *ES*'',T47,''   (cm)'')')
                      WRITE(IOUTLIST,'(I4,I5,F8.2,I12,5F10.4,/(29X,5F10.
     *4))') ICM,ISCORE,Z_min_CM(IPLANE_to_CM(ISCORE)+1),NPFLU(ISCORE), (
     *                RSCORE_ZONE(ISCORE,ISZ),ISZ=1,NSC_ZONES(ISCORE))
                  ELSE IF((MZONE_TYPE(ISCORE) .EQ. 1)) THEN
                      WRITE(IOUTLIST, '(''  CM SCORE POSITION   TOTAL'',
     *                              T48,  ''ZONE HALF-WIDTHS'',/,
     *                                     ''     PLANE  (cm)    PARTICL
     *ES*'',T47,''      (cm)'')')
                      WRITE(IOUTLIST,'(I4,I5,F8.2,I12,5F10.4,/(29X,5F10.
     *4))') ICM,ISCORE,Z_min_CM(IPLANE_to_CM(ISCORE)+1),NPFLU(ISCORE), (
     *                RSCORE_ZONE(ISCORE,ISZ),ISZ=1,NSC_ZONES(ISCORE))
                  ELSE IF((MZONE_TYPE(ISCORE) .EQ. 2)) THEN
                      WRITE(IOUTLIST,'(//'' For grid scoring in plane'',
     *I2)') ISCORE
                      WRITE(IOUTLIST,'(/'' XMIN, XMAX, YMIN and YMAX in
     *cm'')')
                      WRITE(IOUTLIST,'(4F10.3)') XMIN_ZONE(ISCORE),XMAX_
     *                ZONE(ISCORE), YMIN_ZONE(ISCORE),YMAX_ZONE(ISCORE)
                      WRITE(IOUTLIST,'('' NX ='',I3,''    NY ='',I3)') N
     *                X_ZONE(ISCORE),NY_ZONE(ISCORE)
                      WRITE(IOUTLIST,'('' Total no. of scoring zones =''
     *,I5)') NSC_ZONES(ISCORE)
                      WRITE(IOUTLIST,'('' X-grid boundaries:'')')
                      WRITE(IOUTLIST, '(6F10.3)')  (RSCORE_ZONE(ISCORE,I
     *                SZ),ISZ=1,NX_ZONE(ISCORE)+1)
                      WRITE(IOUTLIST,'('' Y-grid boundaries:'')')
                      WRITE(IOUTLIST, '(6F10.3)')  (RSCORE_ZONE2(ISCORE,
     *                ISZ),ISZ=1,NY_ZONE(ISCORE)+1)
                  END IF
              END IF
5961      CONTINUE
5962      CONTINUE
          WRITE(IOUTLIST, '(/'' *Includes all particles of all weights''
     *)')
          IF ((IRESTART.EQ.3 .OR. IRESTART.EQ.4 .OR. is_finished)) THEN
              WRITE(IOUTLIST, '(/'' **Information not available from run
     *s in which previous data''/              ''   is simply analyzed (
     *IRESTART=3) or combined from parallel''/               ''   runs (
     *automatically or with IRESTART=4).  The missing phase''/
     *   ''   space file info is available in the header of the (combine
     *d)''/            ''   phase space file.'')')
          END IF
          WRITE(IOUTLIST, '(/''  Lines with zero results are not printed
     *'')')
          NUMTOT=0.
          DO 5971 IPAR=1,8,4
              IF ((IPAR.EQ.1)) THEN
                  WRITE(IOUTLIST, '(/'' SPECTRAL-AVERAGED QUANTITIES FOR
     * FIRST TIME CROSSINGS OF'',               '' THE SCORING PLANE''/
     *                                                        T20,''NORM
     *ALIZED per INCIDENT PARTICLE'')')
              ELSE
                  WRITE(IOUTLIST, '(/'' SPECTRAL-AVERAGED QUANTITIES FOR
     * MULTIPLE CROSSINGS OF'',                 '' THE SCORING PLANE''/
     *                                                        T20,''NORM
     *ALIZED per INCIDENT PARTICLE'')')
              END IF
              WRITE(IOUTLIST,401)
401           FORMAT( ' ZONE        NUMBER            FLUENCE    ', '   
     *ENERGY       ANGLE WRT Z-AXIS'/ '                            (/cm*
     **2)    ', '      (MeV)           (degrees)'/ ' ---- --------------
     *---- ------------------', ' ---------------- ----------------')
              NOCOV=0
              DO 5981 ICM=1,MAX_CMs
                  IF ((ICM_to_SCORE(ICM) .NE. 0)) THEN
                      ISCORE=ICM_to_SCORE(ICM)
                      WRITE(IOUTLIST, '(T25,'' SCORING PLANE'',I2,'', CM
     *'',I3,'':'')') ISCORE,ICM
                      DO 5991 IQL=-1,1
                          IF ((IQL.EQ.-1)) THEN
                              WRITE(IOUTLIST,'('' ELECTRONS'')')
                          ELSE IF((IQL.EQ.0)) THEN
                              WRITE(IOUTLIST,'('' PHOTONS'')')
                          ELSE
                              WRITE(IOUTLIST,'('' POSITRONS'')')
                          END IF
                          TOTNUM=0.
                          TOTERR=0.
                          TOTflu_uncer=0.
                          NNZ=0
                          DO 6001 ISZ=1,NSC_ZONES(ISCORE)+1
                              IF ((SCFLU(IQL+2,ISCORE,ISZ,IPAR) .NE. 0.0
     *                        )) THEN
                                  IF ((SCFLU_NOCOV(IQL+2,ISCORE,ISZ,IPAR
     *                            /5+1).EQ.1)) THEN
                                      WRITE(IOUTLIST,404) ISZ,(SCFLU(IQL
     *                                +2,ISCORE,ISZ,I),SCFLU2(IQL+2,ISCO
     *                                RE,ISZ,I), I=IPAR,IPAR+8/2-1)
                                      NOCOV=1
                                  ELSE
                                      WRITE(IOUTLIST,402) ISZ,(SCFLU(IQL
     *                                +2,ISCORE,ISZ,I),SCFLU2(IQL+2,ISCO
     *                                RE,ISZ,I), I=IPAR,IPAR+8/2-1)
                                  END IF
                                  NNZ=NNZ+1
                                  NUMTOT=NUMTOT+SCFLU(IQL+2,ISCORE,ISZ,I
     *                            PAR)
                                  IF ((ISZ .NE. NSC_ZONES(ISCORE)+1 .AND
     *                            . MZONE_TYPE(ISCORE) .EQ. 2)) THEN
                                      TOTflu_uncer=TOTflu_uncer+SCFLU2(I
     *                                QL+2,ISCORE,ISZ,IPAR+1)
                                  END IF
                              ELSE IF((ISZ.EQ.NSC_ZONES(ISCORE)+1)) THEN
                                  FLUENCERR(ISCORE)=0
                              END IF
                              IF ((NSC_ZONES(ISCORE).GT.1)) THEN
                                  TOTNUM=TOTNUM+SCFLU(IQL+2,ISCORE,ISZ,I
     *                            PAR)
                                  TOTERR=TOTERR+(SCFLU2(IQL+2,ISCORE,ISZ
     *                            ,IPAR)/100.D00 *SCFLU(IQL+2,ISCORE,ISZ
     *                            ,IPAR))**2
                                  IF ((ISZ.EQ.NSC_ZONES(ISCORE)+1 .AND.
     *                            TOTNUM.GT.0. .AND. NNZ.GT.1)) THEN
                                      WRITE(IOUTLIST,403)'Tot',TOTNUM,SQ
     *                                RT(TOTERR)/ TOTNUM*100.
                                      IF (( MZONE_TYPE(ISCORE) .EQ. 2))
     *                                THEN
                                          WRITE(IOUTLIST,405) TOTflu_unc
     *                                    er/(NNZ-1)
                                      END IF
                                  END IF
                              END IF
402                           FORMAT(' ',I4,1PE11.3,'+-',0PF5.2,'%',1PE1
     *1.3,'+-', 0PF5.2,'%',0PF10.3,'+-',0PF4.1,'%',0PF10.3,'+-', 0PF4.1,
     *'%')
403                           FORMAT('   --------------------',/, ' ',A4
     *,1PE11.3,'+-',0PF4.1,'%')
404                           FORMAT(' ',I4,1PE11.3,'+-',0PF5.2,'%',1PE1
     *1.3,'+-', 0PF5.2,'%',0PF10.3,'+-',0PF4.1,'%*',0PF10.3,'+-', 0PF4.1
     *,'%*')
405                           FORMAT(' ',19x,'Average fluence uncertaint
     *y in grid  ', 0PF5.2,'%')
6001                      CONTINUE
6002                      CONTINUE
5991                  CONTINUE
5992                  CONTINUE
                      IF ((FLUENCERR(ISCORE).EQ.1)) THEN
                          WRITE(IOUTLIST, '(/''***WARNING: RMAX_CM('',I4
     *,'') goes beyond RMAX_CM('',I4,'').  Thus,''/        ''fluence in
     *outer scoring zone may have contributions from particles''/
     * ''exiting from the top of CM '',I4,''.  Since it is difficult to
     *''/            ''determine the area of outer zone under these cond
     *itions, fluence in''/        ''outer zone has been normalized by #
     * of incident particles only.''/)') IPLANE_to_CM(ISCORE)+1, IPLANE_
     *                    to_CM(ISCORE), IPLANE_to_CM(ISCORE)+1
                      END IF
                  END IF
5981          CONTINUE
5982          CONTINUE
              IF ((NOCOV.EQ.1)) THEN
                  WRITE(IOUTLIST, '(/'' *Covariance not included in unce
     *rtainty because no. of particles''/          ''  crossing scoring
     *zone < '',I5)') 10
              END IF
5971      CONTINUE
5972      CONTINUE
          IF ((IRESTART .LT. 2 .AND. .NOT.is_finished)) THEN
              IF((NUMTOT.EQ.0.))MINWEIGHT=0.
              IF ((MINWEIGHT .GT. 0.0000030 )) THEN
                  WRITE(IOUTLIST, '(//'' MIN PARTICLE WEIGHT FOR ALL SCO
     *RING ZONES = '',F12.7/                        '' MAX PARTICLE WEIG
     *HT FOR ALL SCORING ZONES = '',F12.7,/)') MINWEIGHT,MAXWEIGHT
                  WRITE(6,6010)MINWEIGHT,MAXWEIGHT
6010              FORMAT(//' MIN PARTICLE WEIGHT FOR ALL SCORING ZONES =
     * ',F12.7/ ' MAX PARTICLE WEIGHT FOR ALL SCORING ZONES = ',F12.7/)
              ELSE
                  WRITE(IOUTLIST, '(//'' MIN PARTICLE WEIGHT FOR ALL SCO
     *RING ZONES = '',1PE12.5/                      '' MAX PARTICLE WEIG
     *HT FOR ALL SCORING ZONES = '',0PF12.7,/)') MINWEIGHT,MAXWEIGHT
                  WRITE(6,6020)MINWEIGHT,MAXWEIGHT
6020              FORMAT(//' MIN PARTICLE WEIGHT FOR ALL SCORING ZONES =
     * ',1PE12.5/ ' MAX PARTICLE WEIGHT FOR ALL SCORING ZONES = ',0PF12.
     *7/)
              END IF
          END IF
      END IF
      IF ((NDOSE_ZONE .NE. 0)) THEN
          WRITE(IOUTLIST,'(/T30,'' DOSE RESULTS''/
     *                                T30,'' ************''/)')
          IF ((OLDSRC.EQ.1.OR.OLDSRC.EQ.2)) THEN
              WRITE(IOUTLIST, '('' ***WARNING: DOSES ARE NORMALIZED per
     *PARTICLE INCIDENT FROM''/               ''             PHASE SPACE
     * SOURCE, NOT ORIGINAL SOURCE''//)')
          END IF
          IF ((IREJCT_GLOBAL .EQ. 1 .AND. ESAVE_GLOBAL .NE. 0. .AND. ESA
     *    VE_GLOBAL .GT. ECUTIN)) THEN
              WRITE(IOUTLIST,'(T10,'' ***NOTE***''/
     *                             T10,''Automated range rejection is be
     *ing used.''/                               T10,''This implies dose
     *s will be inaccurate because''/                          T10,''of
     *changes in ECUTRR going from on CM to the next.''/)')
          END IF
          WRITE(IOUTLIST,210) SCDSTP,SCDSTP2, SCDSTP/(NINCSRC*dble(IHSTR
     *    Y+(NRCYCL+1)*(NPASS_ph_sp+NFAT_ph_sp))/ FLOAT(NNPHSP)),SCDSTP2
          WRITE(IOUTLIST,300)
          WRITE(IOUTLIST,302) (ID,AMASS(ID),SCDOSE(ID,1),SCDOSE2(ID,1),(
     *    AMASS(ID)/1000.)*SCDOSE(ID,1), SCDOSE2(ID,1),ID=1,NDOSE_ZONE)
          IF ((IBRSPL.EQ.2)) THEN
              WRITE(IOUTLIST, *)
              WRITE(IOUTLIST,305)
              WRITE(IOUTLIST,302) (ID,AMASS(ID),SCDOSE(ID,2),SCDOSE2(ID,
     *        2),(AMASS(ID)/1000.)*SCDOSE(ID,2), SCDOSE2(ID,2),ID=1,NDOS
     *        E_ZONE)
          END IF
          IF (( ITDOSE_ON.EQ.1)) THEN
              IF (( ICM_CONTAM .GE. 1)) THEN
                  WRITE(IOUTLIST, *)
                  WRITE(IOUTLIST,304)ICM_CONTAM
                  WRITE(IOUTLIST,302)(ID,AMASS(ID),SCDOSE(ID,3),SCDOSE2(
     *            ID,3), (AMASS(ID)/1000.)*SCDOSE(ID,3),SCDOSE2(ID,3),ID
     *            =1,NDOSE_ZONE)
              END IF
              WRITE(IOUTLIST, *)
              IF ((LNEXC+LNINC.GT.0)) THEN
                  WRITE(IOUTLIST, '(/T22,'' DOSE RESULTS WITH BIT FILTER
     *S''/                                      T30,'' ************''/)'
     *            )
                  WRITE(IOUTLIST, '(T5,''BIT FILTER SUMMARY''/
     *                                            T5,''*****************
     **''/)')
                  WRITE(IOUTLIST, '(T2,''COMPONENT  FILTER
     *        BIT''/,                           T2,''   #        TYPE
     *                     #s''/)')
                  IF ((LNEXC .GT. 0)) THEN
                      DO 6031 I=4,3+LNEXC
                          WRITE(IOUTLIST,6040)I-3,'EXCLUDE'
                          DO 6051 J=1,31
                              IF ((L_N_EXC(I,J) .NE. 0)) THEN
                                  WRITE(IOUTLIST,6060)L_N_EXC(I,J)
                              ELSE
                                  GO TO6052
                              END IF
6051                      CONTINUE
6052                      CONTINUE
                          WRITE(IOUTLIST,'('' '')')
6031                  CONTINUE
6032                  CONTINUE
                  END IF
                  IF ((LNINC .GT. 0)) THEN
                      DO 6071 I=4+LNEXC,3+LNEXC+LNINC
                          WRITE(IOUTLIST,6040)I-3,'INCLUDE'
                          HADZERO=0
                          DO 6081 J=1,31
                              IF ((L_N_INC(I,J) .NE. 0)) THEN
                                  WRITE(IOUTLIST,6060)L_N_INC(I,J)
                              ELSE IF((HADZERO.EQ.0 .AND. L_N_INC(I,J).E
     *                        Q.0 .AND. L_N_INC(I,J+1).NE.0)) THEN
                                  HADZERO=1
                                  WRITE(IOUTLIST,6090)'-'
                              ELSE
                                  GO TO6082
                              END IF
6081                      CONTINUE
6082                      CONTINUE
                          WRITE(IOUTLIST,'('' '')')
6071                  CONTINUE
6072                  CONTINUE
                  END IF
                  IF ((MOD((LNEXC+LNINC),3).NE.0.OR.LNEXC+LNINC.EQ.0)) T
     *            HEN
                      MAXIT1=AINT((LNEXC+LNINC)/3.)+1
                  ELSE
                      MAXIT1=AINT((LNEXC+LNINC)/3.)
                  END IF
                  IT=3
                  DO 6101 IT1=1,MAXIT1
                      WRITE(IOUTLIST, '(/'' DOSE '', $)' )
                      WRITE(IOUTLIST, '(2X, ''   DOSE   '', $ )')
                      IF ((IT1.EQ.MAXIT1)) THEN
                          MAXIT2=LNEXC+LNINC-(IT1-1)*3
                      ELSE
                          MAXIT2=3
                      END IF
                      DO 6111 IT2=1,MAXIT2
                          WRITE(IOUTLIST, '(7X, ''    DOSE     '', $ )')
6111                  CONTINUE
6112                  CONTINUE
                      WRITE(IOUTLIST, *)
                      WRITE(IOUTLIST, '('' ZONE '', $)' )
                      WRITE(IOUTLIST, '(2X,''   TOTAL   '' , $ )')
                      DO 6121 IT2=1,MAXIT2
                          WRITE(IOUTLIST, '(7X, ''COMPONENT:'',I2,''  ''
     *, $ )') IT2+(IT1-1)*3
6121                  CONTINUE
6122                  CONTINUE
                      WRITE(IOUTLIST, *)
                      DO 6131 ID=1,NDOSE_ZONE
                          WRITE(IOUTLIST, '(/I4,$ )' ) ID
                          WRITE(IOUTLIST, '(1X,1PE10.3, "+/-",0PF4.1,"%"
     *, $ )') SCDOSE(ID,1), SCDOSE2(ID,1)
                          DO 6141 IT2=1,MAXIT2
                              WRITE(IOUTLIST, '(1X,1PE10.3, "+/-",0PF4.1
     *,"%", $ )') SCDOSE(ID,IT+IT2), SCDOSE2(ID,IT+IT2)
6141                      CONTINUE
6142                      CONTINUE
6131                  CONTINUE
6132                  CONTINUE
                      WRITE(IOUTLIST,*)
                      WRITE(IOUTLIST,*)
                      IT=IT+MAXIT2
6101              CONTINUE
6102              CONTINUE
              END IF
          END IF
          IOUTPLOT = egs_open_file(IOUTPLOT,0,0,'.egsplot')
          IF (( IOUTPLOT .GT. 0 )) THEN
              TYPE=1
              IF ((IPLOTFLAG.EQ.0)) THEN
                  DO 6151 ID=1,NDOSE_ZONE
                      XPLOT(ID)=FLOAT(ID)
6151              CONTINUE
6152              CONTINUE
                  XTITLE='DOSE ZONE NUMBER'
              ELSE
                  XTITLE='Z (cm)'
                  IF ((TYPE.EQ.0)) THEN
                      DO 6161 ID=1,NDOSE_ZONE
                          XPLOT(ID)=(ZPLOTCHM(ID)+ZPLOTCHM(ID+1))/2.
6161                  CONTINUE
6162                  CONTINUE
                  ELSE
                      DO 6171 ID=1,NDOSE_ZONE
                          XPLOT(ID)=ZPLOTCHM(ID+1)
6171                  CONTINUE
6172                  CONTINUE
                  END IF
              END IF
              DO 6181 ID=1,NDOSE_ZONE
                  YPLOT(ID)=SCDOSE(ID,1)
                  ERRY(ID)=SCDOSE2(ID,1)*SCDOSE(ID,1)/100.
6181          CONTINUE
6182          CONTINUE
              YTITLE='ABSORBED DOSE PER INCIDENT PARTICLE (Gy)'
              GRAPHTITLE='Dose Simulation Using BEAMnrc'
              SERIESTITLE='total'
              IT2=0
              CALL XVGRPLOT(XPLOT, YPLOT, ERRY, NDOSE_ZONE, IT2,SERIESTI
     *        TLE, XTITLE, YTITLE, GRAPHTITLE, TITLE,IOUTPLOT, TYPE, ZPL
     *        OTCHM(1),0)
              IF ((IBRSPL.EQ.2)) THEN
                  DO 6191 ID=1,NDOSE_ZONE
                      YPLOT(ID)=SCDOSE(ID,2)
                      ERRY(ID)=SCDOSE2(ID,2)*SCDOSE(ID,2)/100.
6191              CONTINUE
6192              CONTINUE
                  SERIESTITLE='total-fat'
                  IT2=IT2+1
                  CALL XVGRPLOT(XPLOT, YPLOT, ERRY, NDOSE_ZONE, IT2,SERI
     *            ESTITLE, XTITLE, YTITLE, GRAPHTITLE, SUBTITLE,IOUTPLOT
     *            , TYPE, ZPLOTCHM(1),0)
              END IF
              IF ((ITDOSE_ON.EQ.1)) THEN
                  IF ((ICM_CONTAM.GE.1)) THEN
                      DO 6201 ID=1,NDOSE_ZONE
                          YPLOT(ID)=SCDOSE(ID,3)
                          ERRY(ID)=SCDOSE2(ID,3)*SCDOSE(ID,3)/100.
6201                  CONTINUE
6202                  CONTINUE
                      SERIESTITLE='contaminant'
                      IT2=IT2+1
                      CALL XVGRPLOT(XPLOT, YPLOT, ERRY, NDOSE_ZONE, IT2,
     *                 SERIESTITLE, XTITLE, YTITLE, GRAPHTITLE, TITLE,IO
     *                UTPLOT, TYPE, ZPLOTCHM(1),0)
                  END IF
                  DO 6211 IT=4,3+LNEXC+LNINC
                      DO 6221 ID=1,NDOSE_ZONE
                          YPLOT(ID)=SCDOSE(ID,IT)
                          ERRY(ID)=SCDOSE2(ID,IT)*SCDOSE(ID,IT)/100.
6221                  CONTINUE
6222                  CONTINUE
                      IT2=IT2+1
                      IF ((IT-3.LT.10)) THEN
                          COMPNUM=CHAR((IT-3)+48)
                      ELSE IF((IT-3.LT.100)) THEN
                          COMPNUM=CHAR((IT-3)/10+48)//CHAR(MOD((IT-3),10
     *                    )+48)
                      ELSE IF((IT-3.LT.1000)) THEN
                          COMPNUM=CHAR((IT-3)/100+48)//CHAR(MOD((IT-3),1
     *                    00)/10+48)// CHAR(MOD(MOD((IT-3),100),10)+48)
                      ELSE
                          COMPNUM=' '
                      END IF
                      SERIESTITLE='component '//COMPNUM
                      CALL XVGRPLOT(XPLOT, YPLOT, ERRY, NDOSE_ZONE, IT2,
     *                 SERIESTITLE, XTITLE, YTITLE, GRAPHTITLE, TITLE,IO
     *                UTPLOT, TYPE, ZPLOTCHM(1),0)
6211              CONTINUE
6212              CONTINUE
              END IF
              CLOSE(IOUTPLOT)
          ELSE
              write(i_log,*)
              write(i_log,*) ' ************ failed to open .egsplot file
     * for writing ********** '
              write(i_log,*)
          END IF
      END IF
210   FORMAT(' ',T12,'TOTAL # CHARGED PARTICLE STEPS in DOSE REG.',T57,1
     *PE10.3,' +/-',0PF4.1,'%'/ ' ','# CHARGED PARTICLE STEPS in DOSE RE
     *G./INITIAL HISTORY',T57, 1PE10.3,' +/-',0PF4.1,'%'/)
300   FORMAT(' ',T15,'TOTAL DOSE PER INCIDENT PARTICLE'/ /T5,'DOSE     M
     *ASS           DOSE          ENERGY DEPOSITED ' /T5,'ZONE      (g) 
     *         (Gy)                 (J)', /T5,'---- -----------  -------
     *-----------  ------------------')
302   FORMAT(' ',I6,3X,1PE10.3,2X,1PE10.3,'+/-',0PF4.1,'%', 2X,1PE10.3,'
     *+/-',0PF4.1,'%')
304   FORMAT(' ',T10,'CONTAMINANT DOSE/INCIDENT PARTICLE FOR CM',I3/ /T5
     *,'DOSE     MASS           DOSE          ENERGY DEPOSITED ' /T5,'ZO
     *NE      (g)           (Gy)                 (J)', /T5,'---- -------
     *----  ------------------  ------------------')
305   FORMAT(' ', 'TOTAL DOSE EXCLUDING FAT PARTICLES PER INCIDENT PARTI
     *CLE (DBS ONLY)'/ /T5,'DOSE     MASS           DOSE          ENERGY
     * DEPOSITED ' /T5,'ZONE      (g)           (Gy)                 (J)
     *', /T5,'---- -----------  ------------------  ------------------')
6040  FORMAT(T2,I4,A14,T25,$)
6060  FORMAT(I5,$)
6090  FORMAT(A5,$)
      RETURN
      END
      SUBROUTINE ISOURCE
      implicit none
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/GEOM/ NREG
      INTEGER NREG
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/SOURCE/ COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,
     *COSTHETA,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SI
     *GN2,RIN1_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA
     *24, NNPHSP,NPHOTSRC,WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEA
     *M,YBEAM,ZBEAM,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL
     *2,PROBFC,PROBSD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z
     *_SOURCE,E_ph_sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT1
     *00,XSCAN_UNIT,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YIN
     *DEL, EKMAXSRC, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9, Y_SRC9, PR
     *OB_SRC9, ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN,RDISTF,RPDF,RCDF, F
     *NORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COSRNG,SINRNG,WEIGHTOLD,UINOL
     *D,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RSRC_DBS,SSDSRC_DBS,ZSRC_DBS
     *,sigma_src19,DIST24,ALPHA24,BETA24,RBEAMY, xo_src19, yo_src19, NRD
     *IST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p, NPASS_ph_s
     *p, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRATIO_YXF, OL
     *DSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUNT, IERROR,
     *RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB,MONOEN, NR
     *CYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE_FLAG, INIT
     *_ICMOLD,I_MUPHSP_IN,SPCNAM, the_beam_code,the_input_file,the_pegs_
     *file,SPEC_TITLE,phsp_open
      REAL*8 COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,COSTHETA
     *,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SIGN2,RIN1
     *_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA24
      integer*8 NNPHSP, NPHOTSRC
      real*8 WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEAM,YBEAM,ZBEAM
     *,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL2,PROBFC,PROB
     *SD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z_SOURCE,E_ph_
     *sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT100,XSCAN_UNIT
     *,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YINDEL, EKMAXSRC
     *, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9(10), Y_SRC9(10), PROB_SR
     *C9(10), ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN(1000,2),RDISTF(1000)
     *, RPDF(1000),RCDF(1000), FNORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COS
     *RNG,SINRNG,WEIGHTOLD,UINOLD,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RS
     *RC_DBS,SSDSRC_DBS,ZSRC_DBS,sigma_src19,DIST24,ALPHA24,BETA24,RBEAM
     *Y, xo_src19, yo_src19
      INTEGER NRDIST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p,
     * NPASS_ph_sp, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRA
     *TIO_YXF, OLDSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUN
     *T, IERROR, RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB
     *,MONOEN, NRCYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE
     *_FLAG, INIT_ICMOLD,I_MUPHSP_IN
      CHARACTER*256 SPCNAM
      CHARACTER*80 the_beam_code,the_input_file,the_pegs_file,SPEC_TITLE
      logical phsp_open
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/ENERGYSRC/NENSRC,IMODE,ENSRCD,SRCPDF,SRCCDF,ENMIN,CDFINV, D
     *ELTAK,IB, FILNAM
      real*8 ENSRCD(240),SRCPDF(240),SRCCDF(240),ENMIN, CDFINV(1000,2),D
     *ELTAK
      INTEGER IMODE,NENSRC,IB
      CHARACTER*256 FILNAM
      COMMON/RWPHSP/ STRING_TEMP_ZLAST_OUT,  STRING_TEMP_OUT,  IHSTRY_PH
     *SP,   iaea_dummy_long,  NHSTRY_DOS,   ESHORT,  WEIGHTTMP,  WT_PHSP
     *_SHORT,  X_PHSP_SHORT,  Y_PHSP_SHORT,  Z_PHSP_SHORT,  U_PHSP_SHORT
     *,  V_PHSP_SHORT,  W_PHSP_SHORT,  ZLAST_PHSP_SHORT,  MUIDX_PHSP_SHO
     *RT,  EKMAX_PHSP_SHORT,  EKMINE_PHSP_SHORT,  NINC_PHSP_SHORT,  dosx
     *yz2beam_index,  iaea_extra_floats,  NUM_PHSP_TOT,  PHOT_PHSP_TOT,
     *iaea_result,   iaea_n_stat,  iaea_q_typ,  iaea_typ_q,  iaea_q_inde
     *x,  I_PHSP,  IERR_PHSP,  LATCHTMP,  WRITE_PHSP_COUNTER,  WRITE_PHS
     *P_SOFAR,  PHSP_RESTART,  PHSP_RECL,  PHSP_RECL_OLD,  iaea_extra_in
     *ts,  iaea_extra_int_types,iaea_extra_float_types,   iaea_i_zlast,
     * iaea_i_latch,  iaea_i_muidx,  iaea_n_extra_ints,  iaea_n_extra_fl
     *oats,  i_iaea_open_for_write,   iaea_i_zlast_out,  iaea_i_latch_ou
     *t,  iaea_i_muidx_out,  dosxyz2beam_izscore,  MODE_RW
      CHARACTER*32000 STRING_TEMP_ZLAST_OUT(3)
      CHARACTER*28000 STRING_TEMP_OUT(3)
      integer*8 IHSTRY_PHSP(3),iaea_dummy_long,NHSTRY_DOS
      REAL*4 ESHORT,WEIGHTTMP,WT_PHSP_SHORT,X_PHSP_SHORT,Y_PHSP_SHORT, Z
     *_PHSP_SHORT,U_PHSP_SHORT, V_PHSP_SHORT,W_PHSP_SHORT,ZLAST_PHSP_SHO
     *RT, MUIDX_PHSP_SHORT, EKMAX_PHSP_SHORT,EKMINE_PHSP_SHORT,NINC_PHSP
     *_SHORT,dosxyz2beam_index, iaea_extra_floats(10)
      INTEGER NUM_PHSP_TOT,PHOT_PHSP_TOT, iaea_result,iaea_n_stat,iaea_q
     *_typ(3),iaea_typ_q(3),iaea_q_index,I_PHSP, IERR_PHSP,LATCHTMP, WRI
     *TE_PHSP_COUNTER(3),WRITE_PHSP_SOFAR(3), PHSP_RESTART,PHSP_RECL,PHS
     *P_RECL_OLD,iaea_extra_ints(10), iaea_extra_int_types(10),iaea_extr
     *a_float_types(10),iaea_i_zlast, iaea_i_latch,iaea_i_muidx,iaea_n_e
     *xtra_ints,iaea_n_extra_floats, i_iaea_open_for_write,iaea_i_zlast_
     *out,iaea_i_latch_out, iaea_i_muidx_out,dosxyz2beam_izscore
      CHARACTER*5 MODE_RW
      INTEGER LATCH_TEMP_OUT,NUM_PHSP_TOFLUSH,TEMP_PHSP_COUNTER,REM_PHSP
      REAL*4 REAL_TEMP_OUT(7)
      CHARACTER*32 REC_TEMP_OUT
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      INTEGER I,    TEMPINT,  LATCHM,NHSTRYM,IQINM,NPASSM,  egs_get_unit
     *,i_spect,i_spcnam,len,ilen,lnblnk1,IZLAST1
      real*8 FNORM,  TEMP1,TEMP2,TEMP3,TEMP4,TEMP5,TEMP6,TEMP7,TEMP8,  E
     *INM,XINM,YINM,UINM,VINM,WTM,ZINM,WINM,Z_SCORE
      CHARACTER*256 TEXT
      integer*8 tmp_long
      INIT_ICM=0
      MONOEN = 0
      WRITE(6,6230)
6230  FORMAT(' CHARGE OF THE INCIDENT BEAM(-1,0,1),'/' SOURCE CONFIGURAT
     *ION')
      WRITE(6,6240)
6240  FORMAT('      (0) Parallel beam incident from the front:(0),radius
     *(cm),'/ '                    incident direction cosines (U,V,W)'/)
      WRITE(6,6250)
6250  FORMAT('  or  (1) Point source on axis incident from the front,'/'
     *           DISTZ,distance of source to VERY front of first CM.'/' 
     *          RBEAM,beam radius (cm) or flag indicating rectangular(<0
     *),'/ '           GAMMA,1/2 angle(degrees) of source if RBEAM=0.0,'
     */ '           XINL,XINU,YINL,YINU, dimensions of rectangular beam 
     *if'/ '           RBEAM<0.'/)
      WRITE(6,6260)
6260  FORMAT('  or  (3) Uniform isotropically radiating source incidentw
     *ithin CMs:'/ '          inner radius of vertical ring (if next inp
     *ut >=0) or Z'/ '          of centre of horizontal cylinder (if nex
     *t input < 0) in cm,'/ '          outer radius of vertical ring (if
     * >=0) or -radius of '/ '          horizontal cylinder (if <0) incm
     *, Z of top of vertical'/ '          ring or min. X of horizontal c
     *ylinder in cm, Z of bottom'/ '          of vertical ring or max. X
     * of horizontal cylinder in cm,'/ '          i_dsb (set to 1 to use
     * directional source biasing),'/ '          splitcm_dsb (CM no. at 
     *which, upon entering, photons '/ '          are split and radially
     * redistributed--set to 0 for no'/ '          splitting/redistribut
     *ion), dsb_delta (min. linear distance'/ '          between split/r
     *edistributed photons projected to SSD'/ '          in cm)'/)
      WRITE(6,6270)
6270  FORMAT('  or  (5) NRC swept beam, cone 1/2 angle (in degrees)'/ ' 
     *                  radius of beam spot (in cm)'/)
      WRITE(6,6280)
6280  FORMAT('  or  (6) Parallel rectangular beam incident along Z-axis:
     *(6),'/ '                    centred at (Xo,Yo), half-widths: Xh, Y
     *h (cm)'/ '                    (0, 6, Xo, Yo, Xh, Yh)'/)
      WRITE(6,6290)
6290  FORMAT('  or  (7) Scanning beam, scanning field size to 100 cm '/'
     *                    ratio of the frequencies in Y/X directions'/' 
     *                   spot size at the initial point. '/)
      WRITE(6,6300)
6300  FORMAT('  or  (8) Scanning point source for MM50--uniform field co
     *verage:'/ '                    (8), SSD (defaults to 100 cm), radi
     *us of'/ '                    field at SSD (defaults to RMAX_CM(1))
     *, radius'/ '                    of beam spot at Z=0 (defaults to 0
     *).'/ '                    Note that this option assumes the point'
     */ '                    source is at Z=0'/)
      WRITE(6,6310)
6310  FORMAT('  or  (9) Scanning point source for MM50--discrete field c
     *overage:'/ '                    (9), SSD (defaults to 100 cm), # o
     *f '/ '                    discrete points at SSD.'/ '       Note t
     *hat this option assumes the point'/ '    source is at Z=0'/)
      WRITE(6,6320)
6320  FORMAT('  or (10) Parallel circular beam incident on an x-ray targ
     *et:'/ '                    (10), radius(cm), direction cosines (U,
     *V)'/ '                    default to (-1,0), (W is set to 0)'/)
      WRITE(6,6330)
6330  FORMAT('  or (13) Parallel rectangular beam incident on an x-ray t
     *arget:'/ '                    (13), half-width(cm), half-height (c
     *m)'/ '                    direction cosines (U,V,W), default to (-
     *1,0,0)'/)
      WRITE(6,6340)
6340  FORMAT('  or (15) NRC swept beam with radial divergence and intens
     *ity distribution:'/ '                    (15),cone 1/2 angle (in d
     *egrees), Z of apex of cone (cm),'/'                    radius at w
     *hich beam divergence angle is defined (cm),'/ ' beam divergence an
     *gle (degrees)'/)
      WRITE(6,6350)
6350  FORMAT('  or (19) Parallel elliptical beam with gaussian in X andY
     *:'/ '                (19),sigma of gaussian distribution in X (if 
     *> 0) or'/ '                -FWHM of gaussian distribution in X (if
     * < 0) in cm,'/ '                incident direction cosines (U,V,W)
     *,'/ '                mean angular spread (degrees, none if <=0,'/'
     *                if set >0 then overrides U,V,W inputs),'/ '       
     *    sigma (if > 0) or -FWHM (if < 0) of gaussian'/ '         distr
     *ibution in Y in cm (if = 0 then defaults to'/ '           value in
     * X-direction)'/)
      WRITE(6,6360)
6360  FORMAT('  or (21) Full phase-space of each particle read from unit
     * 42'/ '                    component module # '/ '      (particles
     * incident on the front of this CM),'/ '         no. of times to re
     *cycle each particle'/ '      (calculated automatically if set to 0
     *),'/ '   no. of parallel jobs (if using pprocess script),'/ '     
     *    job no. (if using pprocess),'/ '                    ISRC_DBS (
     *1 if source generated using DBS),'/ '                    RSRC_DBS,
     *SSDSRC_DBS (splitting radius, SSD used'/ '    to generate this sou
     *rce--only if ISRC_DBS=1),'/ '       ZSRC_DBS (Z where the source w
     *as generated--'/ '            only if ISRC_DBS=1)'/ '             
     *       (0, 21, INIT_ICM, 0,0,0,0,0,0,0)'/)
      WRITE(6,6370)
6370  FORMAT('  or (23) Full BEAM simulation source incident from user-d
     *efined angle'/ '                    component module # '/ '       
     *        (particles incident on the front of this CM),'/ '         
     *         ISRC_DBS (1 if source using DBS),'/ '         angle of ro
     *tation about X axis (ALPHA24),'/ '        angle of rotation about 
     *Y axis (BETA24),'/ '      distance of point of rotation above INIT
     *_ICM (DIST24)'/ '                 (0, 23, INIT_ICM, ISRC_DBS,ALPHA
     *24,BETA24,DIST24)'/)
      WRITE(6,6380)
6380  FORMAT('  or (24) Full phase-space incident from user-defined angl
     *e'/ '          Input line 1:'/ '                    component modu
     *le # '/ '                      (particles incident on the front of
     * this CM),'/ '                    no. of times to recycle each par
     *ticle'/ '                      (calculated automatically if set to
     * 0),'/ '                    no. of parallel jobs (if using pproces
     *s script),'/ '                    job no. (if using pprocess),'/ '
     *                    ISRC_DBS (1 if source generated using DBS),'/'
     *                    RSRC_DBS,SSDSRC_DBS (splitting radius, SSD use
     *d'/ '                       to generate this source--only if ISRC_
     *DBS=1),'/ '                    ZSRC_DBS (Z where the source was ge
     *nerated--'/ '                       only if ISRC_DBS=1)'/ '       
     *       (0, 24, INIT_ICM, 0,0,0,0,0,0,0)'/ '          Inputline 2:'
     */ '                    angle of rotation about X axis (ALPHA24),'/
     * '                    angle of rotation about Y axis (BETA24),'/ '
     *                    distance of point of rotation above INIT_ICM (
     *DIST24)'/)
      WRITE(6,6390)
6390  FORMAT('  or (31) Beam characterization model, component module #'
     *,/ '                    (particles incident on the front of this C
     *M)'/ '                    (0, 31, CMSOU,0.,0.,0.)'/)
      WRITE(6,6400)
6400  FORMAT(' IQIN,ISOURC, up to 8 reals: ',$)
      READ(i_input,6410,END=6420,ERR=6430)IQIN,ISOURC,TEMP1,TEMP2,TEMP3,
     *TEMP4,TEMP5,TEMP6,TEMP7,TEMP8
6410  FORMAT (2I12,8F15.0)
      IF (( ISOURC .LT. 0 )) THEN
          ISOURC = -ISOURC
          INIT_ICM = -1
      END IF
      IF (( ISOURC .GT. 1000 )) THEN
          INSIDE_FLAG = ISOURC/1000
          ISOURC = ISOURC - INSIDE_FLAG*1000
      ELSE
          INSIDE_FLAG = 0
      END IF
      IF (( INIT_ICM .LT. 0 )) THEN
          READ(i_input,6440,END=6420,ERR=6430)Z_SOURCE
6440      FORMAT (F15.0)
      END IF
      WRITE(6,6450)IQIN,ISOURC,TEMP1,TEMP2,TEMP3,TEMP4,TEMP5,TEMP6,TEMP7
     *,TEMP8
6450  FORMAT(I4,I4,8F10.4)
      IF(((IQIN .LT. -1) .OR. (IQIN .GT. 1)))IQIN=0
      IF((ISOURC .LT. 21))WRITE(6,6460)IQIN
6460  FORMAT(T20,' SOURCE CHARGE is ',I3)
      WRITE(6,6470)ISOURC
6470  FORMAT(T20,' ISOURC =',I3)
      IF (( INSIDE_FLAG .GT. 0 )) THEN
          WRITE(6,6480)INSIDE_FLAG
6480      FORMAT(T20,' IFLAG  =',I3)
      END IF
      IF ((ISOURC .EQ. 0)) THEN
          RBEAM=TEMP1
          FNORM=TEMP2**2+TEMP3**2+TEMP4**2
          IF ((FNORM .EQ. 0.0)) THEN
              UINC=0.0
              VINC=0.0
              WINC=1.0
          ELSE
              FNORM=SQRT(FNORM)
              UINC=TEMP2/FNORM
              VINC=TEMP3/FNORM
              WINC=TEMP4/FNORM
          END IF
          WRITE(6,6490)RBEAM,UINC,VINC,WINC
6490      FORMAT(' PARALLEL BEAM INCIDENT FROM THE FRONT(+VE Z-AXIS)'/ '
     * RADIUS OF BEAM AT THE FRONT FACE OF THE TARGET:',T60,F10.4,' cm'/
     *' X-AXIS DIRECTION COSINE:',T60,F10.4/ ' Y-AXIS DIRECTION COSINE:'
     *,T60,F10.4/ ' Z-AXIS DIRECTION COSINE:',T60,F10.4/)
          TEMP5=1.E30
          IF(((RBEAM .LT. 0.0) .OR. (RBEAM .GT. TEMP5)))RBEAM=TEMP5
100       FORMAT(' ',2(I2,' '),4(G14.6),', IQIN,ISOURCE etc')
200       FORMAT(' ',I1)
300       FORMAT(' ',I3)
400       FORMAT(' ',2(G14.7,' '))
500       FORMAT(' ',79('*')//T30,'SOURCE PARAMETERS'//' ',79('*')/)
      ELSE IF((ISOURC .EQ. 1)) THEN
          DISTZ=TEMP1
          RBEAM=TEMP2
          GAMMA= TEMP3
          IF ((RBEAM.LT.0.)) THEN
              XINL=TEMP4
              XINU=TEMP5
              YINL=TEMP6
              YINU=TEMP7
          END IF
          IF((DISTZ .LE. 0.0))DISTZ=100.
          IF ((RBEAM .GT. 0.0 .AND. GAMMA .NE.0.0)) THEN
              WRITE(6,6500)RBEAM,GAMMA
6500          FORMAT(//' ****Beam radius (=',F10.3,') and half-angle(=',
     *F10.3,') are both non-zero****'/' We ignore the half-angle'//)
              GAMMA = 0.0
          END IF
          IF ((RBEAM .GT. 0.0)) THEN
              WRITE(6,6510)DISTZ,RBEAM
6510          FORMAT(' Point source on axis incident from the front'/ 'D
     *istance OF  source to VERY front of first CM:',T60,F10.4,' cm'/ ' 
     *Radius of the beam at front of first CM:', T60,F10.4,' cm'/)
          ELSE IF((RBEAM .LT. 0.0)) THEN
              WRITE(6,6520)DISTZ,XINL,XINU,YINL,YINU
6520          FORMAT(' Point source on axis incident from the front'/ 'D
     *istance of  source to VERY front of first CM:',T60,F10.4,' cm'/ ' 
     *Beam is rectangular on front of first CM with:'/ '             Xbo
     *undaries:',F10.4,' - ',F10.4,' cm'/ '             Y boundaries:',F
     *10.4,' - ',F10.4,' cm'/)
          ELSE
              WRITE(6,6530)DISTZ,GAMMA
6530          FORMAT(' Point source on axis incident from the front'/ 'D
     *istance of  source to VERY front of first CM:',T60,F10.4,' cm'/ ' 
     *Half-angle of circular source =',T60,F10.4,' deg'/)
          END IF
          IF ((RBEAM.EQ.0. .AND. GAMMA .LT. 0.0)) THEN
              WRITE(6,6540)GAMMA
6540          FORMAT(/'  ****Asked for negative angle' ,'=',F12.3/' Its 
     *absolute value is used')
              GAMMA = ABS(GAMMA)
          END IF
          IF ((RBEAM.EQ.0. .AND. GAMMA .GE. 90.)) THEN
              WRITE(6,6550)
6550          FORMAT(//' ***Half-angle must be less than 90 degrees to h
     *it target'/ '     Angle reduced to 89 degrees'//)
              GAMMA = 89.
          END IF
      ELSE IF((ISOURC .EQ. 3)) THEN
          RBEAM=TEMP2
          RBEAM2 = RBEAM**2
          RMINBM = TEMP1
          IF ((RBEAM .GE. 0)) THEN
              IF ((RMINBM .LT. 0)) THEN
                  WRITE(6,6560)
6560              FORMAT(//' ***ERROR IN SOURCE 3:'/ ' RMINBM < 0'//)
                  IF ((RBEAM.EQ.0)) THEN
                      WRITE(6,6570)
6570                  FORMAT(//' NB: IF YOU WANT A HORIZONTAL CYLINDER O
     *F 0 RADIUS,'/ '     SET RBEAM TO A VERY SMALL -VE NUMBER'//)
                  END IF
                  call exit(1)
              END IF
              IF ((RMINBM .GT. RBEAM)) THEN
                  WRITE(6,6580)
6580              FORMAT(//' ***ERROR IN SOURCE 3:'/ ' RMINBM > RBEAM'//
     *)
                  IF ((RBEAM.EQ.0)) THEN
                      WRITE(6,6590)
6590                  FORMAT(//' NB: IF YOU WANT A HORIZONTAL CYLINDER O
     *F 0 RADIUS,'/ '     SET RBEAM TO A VERY SMALL -VE NUMBER'//)
                  END IF
                  call exit(1)
              END IF
              RMINSQ = RMINBM**2
          END IF
          ZSMIN=TEMP3
          ZSMAX=TEMP4
          IF ((ZSMIN .GT. ZSMAX)) THEN
              WRITE(6,6600)
6600          FORMAT(//' ***ERROR IN SOURCE 3:'/ ' ZSMIN > ZSMAX'//)
              call exit(1)
          END IF
          IF ((RBEAM .GE. 0)) THEN
              WRITE(6,6610)RMINBM,RBEAM,ZSMIN,ZSMAX
6610          FORMAT(' UNIFORM ISOTROPICALLY RADIATING RING CENTRED ON Z
     *-AXIS:'/ ' INNER RADIUS:',T60,F10.4,' cm' / ' OUTER RADIUS:',T60,F
     *10.4,' cm' / ' Z OF TOP OF RING:',T60,F10.4,' cm' / ' Z OF BOTTOM 
     *OF RING:',T60,F10.4,' cm' /)
          ELSE
              WRITE(6,6620)ABS(RBEAM),RMINBM,ZSMIN,ZSMAX
6620          FORMAT(' UNIFORM ISOTROPICALLY RADIATING CYLINDER CENTRED|
     *| TO X-AXIS:'/ ' RADIUS:',T60,F10.4,' cm' / ' Z POSITION OF CENTRE
     * OF CYLINDER:',T60,F10.4,' cm'/ ' MIN. X OF CYLINDER:',T60,F10.4,'
     * cm' / ' MAX. X OF CYLINDER:',T60,F10.4,' cm' /)
          END IF
          i_dsb=temp5
          dsb_aeff = 1
          IF ((i_dsb.EQ.1)) THEN
              IF ((IBRSPL.EQ.2)) THEN
                  splitcm_dsb=temp6
                  dsb_delta=temp7
                  WRITE(6,6630)
6630              FORMAT(' Directional source biasing (DSB) used in conj
     *unction with'/ ' directional bremsstrahlung splitting (DBS).'/)
                  IF ((splitcm_dsb .LE. 0 )) THEN
                      WRITE(6,6640)
6640                  FORMAT(' NOT USING ROTATIONAL SYMMETRY'/)
                      write(*,*) '===> split_cm = ', splitcm_dsb
                  ELSE
                      IF (( dsb_delta .GT. 0 )) THEN
                          call dsb_init_sampling(dsb_delta,fs,dsb_aeff,1
     *                    000, dsb_nbin,dsb_rbin,dsb_prob,dsb_ibin)
                      END IF
                      IF (( dsb_delta .GT. 0 )) THEN
                          WRITE(6,6650)splitcm_dsb,dsb_delta*fs,dsb_nbin
     *                    ,dsb_aeff
6650                      FORMAT(' Particles will be split on entering C
     *M no. ',I10/ ' and rotated to positions at least ',F12.5,' cm apar
     *t.'/ ' This requires ',i4,' sampling bins and has Aeff = ',f8.5/)
                      ELSE
                          WRITE(6,6660)
6660                      FORMAT(' NOT USING ROTATIONAL SYMMETRY'/)
                          write(*,*) '===> dsb_delta = ', dsb_delta
                      END IF
                  END IF
              ELSE
                  WRITE(6,6670)
6670              FORMAT(' Directional source biasing (DSB) selected, bu
     *t directional'/ ' bremsstrahlung splitting (DBS) is not.  DSB requ
     *ires DBS.'/ ' DSB turned off for now.'/)
                  i_dsb=0
              END IF
          ELSE
              i_dsb=0
          END IF
      ELSE IF((ISOURC .EQ. 5)) THEN
          GAMMA=TEMP1
          RBEAM=TEMP2
          IF ((GAMMA .LT. 0.0)) THEN
              WRITE(6,6680)GAMMA
6680          FORMAT(/'  ****Asked for negative angle' ,'=',F12.3,'deg'/
     *'      Its absolute value is used')
              GAMMA = ABS(GAMMA)
          END IF
          IF ((RBEAM .LT. 0.0)) THEN
              WRITE(6,6690)RBEAM
6690          FORMAT(/'  ****Asked for negative BEAM RADIUS' ,'=',F12.3/
     *'      It is set to zero')
              RBEAM = 0.0
          END IF
          IF ((GAMMA .GT. 89.0)) THEN
              WRITE(6,6700)
6700          FORMAT(/' ***REDUCED GAMMA to 89 degrees')
              GAMMA = 89.
          END IF
          WRITE(6,6710)GAMMA,RBEAM
6710      FORMAT(' NRC SWEPT BEAM '/ ' Half angle of cone',T60,F10.4,' d
     *eg'/ ' RADIUS OF THE BEAM SPOT AT FRONT of FIRST CM:', T60,F10.4,'
     * cm'/)
      ELSE IF((ISOURC .EQ. 6)) THEN
          XBEAM0=TEMP1
          YBEAM0=TEMP2
          XBEAM=TEMP3
          YBEAM=TEMP4
          UINC=0.0
          VINC=0.0
          WINC=1.0
          WRITE(6,6720)XBEAM0,YBEAM0,XBEAM,YBEAM
6720      FORMAT(' PARALLEL RECTANGULAR BEAM INCIDENT ALONG Z-AXIS'/ ' C
     *ENTRED AT (Xo,Yo) = (',T60,2F10.4,')'/ ' HALF-WIDTH IN X DIRECTION
     *:',T60,F10.4/ ' HALF-WIDTH IN Y DIRECTION:',T60,F10.4/ ' (Note: be
     *am edge limited to simulation geometry later!)'/)
      ELSE IF((ISOURC .EQ. 22)) THEN
          XBEAM0=TEMP1
          YBEAM0=TEMP2
          XBEAM=TEMP3
          YBEAM=TEMP4
          UINC=0.0
          VINC=0.0
          WINC=1.0
          WRITE(6,6730)XBEAM0,YBEAM0,XBEAM,YBEAM
6730      FORMAT(' PARALLEL RECTANGULAR RING INCIDENT ALONG Z-AXIS'/ ' C
     *ENTRED AT (Xo,Yo) = (',T60,2F10.4,')'/ ' HALF-WIDTH IN X DIRECTION
     *:',T60,F10.4/ ' HALF-WIDTH IN Y DIRECTION:',T60,F10.4/ ' (Note: be
     *am edge limited to simulation geometry later!)'/)
      ELSE IF((ISOURC .EQ. 7)) THEN
          FD_AT100=TEMP1
          IF (( FD_AT100.LE.0.0 )) THEN
              WRITE(6,6740)
6740          FORMAT(' SCANNING FIELD SIZE ERROR!!!')
              call exit(1)
          END IF
          IRATIO_YXF=TEMP2*2
          IF ((IRATIO_YXF.LE.0)) THEN
              IRATIO_YXF=13
          END IF
          IF (( MOD(IRATIO_YXF, 2).EQ.0 )) THEN
              IRATIO_YXF=IRATIO_YXF+1
          END IF
          XSCAN_UNIT=FD_AT100*2.0/IRATIO_YXF
          RBEAM=TEMP3
          IF (( RBEAM.LE.0.0 )) THEN
              RBEAM=0.01
          END IF
          WRITE(6,6750)FD_AT100, IRATIO_YXF, RBEAM
6750      FORMAT(' SCANNING BEAM WITH: ', /'          SCANNING FIELD SIZ
     *E AT SSD=100 : ', F15.7, /'          THE FREQUENCY RATIO BETWEEN Y
     */X: ', I5, /'          THE SPOT SIZE AT THE INITIAL POINT:', F15.7
     *)
      ELSE IF((ISOURC .EQ. 8)) THEN
          DISTZ=TEMP1
          RBEAM=TEMP2
          RBEAM0=TEMP3
          IF((DISTZ .LE. 0.0))DISTZ=100.
          IF((RBEAM0 .LT. 0.0))RBEAM0=0.
          IF ((RBEAM .GT. 0.0)) THEN
              WRITE(6,6760)DISTZ,RBEAM,RBEAM0
6760          FORMAT(' MM50 scanned point on axis at Z=0, uniform circul
     *ar field at SSD'/ ' SSD                      :',T60,F10.4,' cm'/ '
     * radius of the beam at SSD :', T60,F10.4,' cm'/ ' radius of beam s
     *pot at Z=0 :',T60,F10.4,' cm'/)
          END IF
          IF ((RBEAM .LE. 0.0)) THEN
              WRITE(6,6770)RBEAM
6770          FORMAT(/'  ****Asked for negative BEAM RADIUS' ,'=',F12.3/
     *'      It will be reset to RINMAX.')
          END IF
      ELSE IF((ISOURC .EQ. 9)) THEN
          DISTZ=TEMP1
          NPTS_SRC9=TEMP2
          IF((DISTZ .LE. 0.0))DISTZ=100.
          IF ((NPTS_SRC9.GT.10)) THEN
              NPTS_SRC9=10
              WRITE(6,6780)10
6780          FORMAT(//'***WARNING IN SOURCE 9'/ ' Number of discrete po
     *ints chosen > max. allowed'/ ' Number of points reduced to',I4//)
              WRITE(IOUTLIST, '(//''***WARNING IN SOURCE 9''/
     *                                      '' Number of discrete points
     * chosen > max. allowed''/                           '' Number of p
     *oints reduced to'',I4//)') 10
          ELSE IF((NPTS_SRC9.LE.0)) THEN
              NPTS_SRC9=1
              WRITE(6,6790)
6790          FORMAT(//'***WARNING IN SOURCE 9'/ ' Number of discrete po
     *ints chosen <= 0'/ ' Number of points reset to 1'//)
              WRITE(IOUTLIST, '(//''***WARNING IN SOURCE 9''/
     *                                      '' Number of discrete points
     * chosen <= 0''/                                     '' Number of p
     *oints reset to 1''//)')
          END IF
          WRITE(6,6800)DISTZ,NPTS_SRC9
6800      FORMAT(/' MM50 SCANNED POINT SOURCE ON AXIS AT Z=0, DISCRETE C
     *OVERAGE AT SSD'/ '                              SSD:',T60,F10.4,'c
     *m'/ ' NUMBER OF DISCRETE POINTS AT SSD:', T60,I10,/)
          WRITE(6,6810)NPTS_SRC9
6810      FORMAT(' INPUT (X,Y,PROBABILITY) FOR THE',I4, ' DISCRETE POINT
     *S AT THE SSD:')
          FNORM = 0.0
          DO 6821 I=1,NPTS_SRC9
              WRITE(6,6830)I
6830          FORMAT(' For point ',I4,' X,Y,prob : ',$)
              READ(i_input,6840,END=6420,ERR=6430)X_SRC9(I),Y_SRC9(I),PR
     *        OB_SRC9(I)
6840          FORMAT(3F15.0)
              WRITE(6,6850)X_SRC9(I),Y_SRC9(I),PROB_SRC9(I)
6850          FORMAT(3F10.4)
              FNORM=FNORM+PROB_SRC9(I)
6821      CONTINUE
6822      CONTINUE
          DO 6861 I=1,NPTS_SRC9
              PROB_SRC9(I)=PROB_SRC9(I)/FNORM
              IF ((I.GT.1)) THEN
                  PROB_SRC9(I)=PROB_SRC9(I)+PROB_SRC9(I-1)
              END IF
6861      CONTINUE
6862      CONTINUE
      ELSE IF((ISOURC .EQ. 10)) THEN
          RBEAM=TEMP1
          FNORM=TEMP2**2+TEMP3**2+TEMP4**2
          IF ((FNORM .EQ. 0.0)) THEN
              UINC=-1.
              VINC=0.0
              WINC=0.0
          ELSE
              FNORM=SQRT(FNORM)
              UINC=TEMP2/FNORM
              VINC=TEMP3/FNORM
              WINC=TEMP4/FNORM
          END IF
          IF ((UINC .GE. 0.0)) THEN
              UINC=-UINC
              WRITE(6,6870)UINC
6870          FORMAT(/' BEAM MUST FACE Z-AXIS, UINC HAS BEEN RE-SET TO '
     *,F8.3/)
          END IF
          IF((RBEAM .LT. 0.0))RBEAM=0.2
          WRITE(6,6880)RBEAM,UINC,VINC,WINC
6880      FORMAT(' PARALLEL BEAM INCIDENT ON X-RAY TARGET (FACING X-AXIS
     *)'/ ' RADIUS OF CROSSECTION AREA OF THE BEAM :',T60,F10.4,' cm'/ '
     * X-AXIS DIRECTION COSINE:',T60,F10.4/ ' Y-AXIS DIRECTION COSINE:',
     *T60,F10.4/ ' Z-AXIS DIRECTION COSINE:',T60,F10.4/)
      ELSE IF((ISOURC .EQ. 13)) THEN
          YBEAM=TEMP1
          ZBEAM=TEMP2
          FNORM=TEMP3**2+TEMP4**2
          IF ((FNORM .EQ. 0.0)) THEN
              UINC=-1.
              VINC=0.0
              WINC=0.0
          ELSE
              FNORM=SQRT(FNORM)
              UINC=TEMP3/FNORM
              VINC=TEMP4/FNORM
              WINC=0.
          END IF
          IF ((UINC .GE. 0.0)) THEN
              UINC=-UINC
              WRITE(6,6890)UINC
6890          FORMAT(/' BEAM MUST FACE Z-AXIS, UINC HAS BEEN RE-SET TO '
     *,F8.3/)
          END IF
          IF((YBEAM .LT. 0.0))YBEAM=0.2
          IF((ZBEAM .LT. 0.0))ZBEAM=0.2
          WRITE(6,6900)YBEAM,ZBEAM,UINC,VINC,WINC
6900      FORMAT(' PARALLEL BEAM INCIDENT ON X-RAY TARGET (FACING X-AXIS
     *)'/ ' HALF-WIDTH OF CROSSECTION AREA OF THE BEAM :',T60,F10.4,' cm
     *'/ ' HALF-HEIGHT OF CROSSECTION AREA OF THE BEAM :',T60,F10.4,' cm
     *'/ ' X-AXIS DIRECTION COSINE:',T60,F10.4/ ' Y-AXIS DIRECTION COSIN
     *E:',T60,F10.4/ ' Z-AXIS DIRECTION COSINE:',T60,F10.4/)
      ELSE IF((ISOURC .EQ. 15)) THEN
          GAMMA=TEMP1
          ZFOCUS=TEMP2
          THETAIN=TEMP4
          RTHETAIN=TEMP3
          IF ((GAMMA .LT. 0.0)) THEN
              WRITE(6,6910)GAMMA
6910          FORMAT(/'  ****Asked for negative angle' ,'=',F12.3,'deg'/
     *'      Its absolute value is used')
              GAMMA = ABS(GAMMA)
          END IF
          WRITE(6,6920)GAMMA,ZFOCUS,THETAIN,RTHETAIN
6920      FORMAT(' NRC SWEPT BEAM with RADIAL INTENSITY DISTRIBUTION and
     * DIVERGENCE'/ ' Half angle of swept cone =',T60,F10.4,' degrees'/'
     * Z of apex of cone = ',T60,F10.4,' cm'/ ' Divergence angle of beam
     * = ',T60,F10.4,' degrees'/ ' Radius at which divergence angle defi
     *ned = ',T60,F10.4,' cm'/)
          WRITE(6,6930)
6930      FORMAT(' INPUT NAME OF FILE WITH RADIAL INTENSITY DISTRIBUTION
     * (up to 80 CHAR '/ ' WITH .EXT): '/)
          READ(i_input,'(A256)',END=6420) SPCNAM
          WRITE(6,6940)SPCNAM
6940      FORMAT(/' READ INPUT RADIAL INTENSITY DISTRIBUTION FROM: '/A25
     *6)
          call replace_env(SPCNAM)
          i_spcnam=9
          i_spcnam=egs_get_unit(i_spcnam)
          IF ((i_spcnam.LT.0)) THEN
              write(i_log,'(/a)') '***************** Error: '
              write(i_log,*) 'failed to get a free Fortran I/O unit for
     *file.'
              write(i_log,'(/a)') '***************** Quiting now.'
              call exit(1)
          END IF
          OPEN(UNIT=i_spcnam,STATUS='OLD',FILE=SPCNAM)
          READ(i_spcnam,*)NRDIST
          IF (((NRDIST.LT.1).OR.(NRDIST.GT.100))) THEN
              WRITE(6,6950)
6950          FORMAT(' *** NUMBER RADIAL BINS OUT OF RANGE (<1 OR >100),
     *', ' RESET TO 100 ***')
              NRDIST=100
          END IF
          READ(i_spcnam,*)(RDISTF(IB20),RPDF(IB20),IB20=1,NRDIST)
          CLOSE(UNIT=i_spcnam)
          WRITE(6,6960)NRDIST
6960      FORMAT('    HAVE READ',I5,' INPUT RADIAL BINS FROM FILE')
          ICOUNT=0
          RLAST=-1000.
          IERROR=0
6970      CONTINUE
6971          CONTINUE
              ICOUNT=ICOUNT+1
              IF ((ICOUNT.GT.NRDIST)) THEN
                  GO TO 6972
              END IF
              IF ((RDISTF(ICOUNT).LE.RLAST)) THEN
                  WRITE(6,6980)
6980              FORMAT(' *** RDISTF>=LAST ONE. MAYBE NOT ALLOWED,', 'C
     *HECK THIS OUT.')
              ELSE IF((RPDF(ICOUNT).LT.0.0)) THEN
                  IERROR=1
                  WRITE(6,6990)
6990              FORMAT(' PDF < 0 NOT ALLOWED,', ' TERMINATING RADIAL I
     *NTENSITY DISTRIBUTION INPUT')
              END IF
              IF ((IERROR.EQ.1)) THEN
                  ICOUNT=ICOUNT-1
                  IF ((ICOUNT.EQ.0)) THEN
                      WRITE(6,7000)
7000                  FORMAT(' *** NO RADIAL INTENSITY DISTRIBUTION DEFI
     *NED,', ' STOPPING EXECUTION ***')
                      call exit(1)
                  END IF
                  WRITE(6,7010)ICOUNT
7010              FORMAT(' RADIAL INTENSITY DITRIBUTION INPUT APPEARS TO
     * BE INCOMPLETE,', ' NRDIST RESET TO ',I12)
                  NRDIST=ICOUNT
                  GO TO 6972
              END IF
              RLAST=RDISTF(ICOUNT)
          GO TO 6971
6972      CONTINUE
          WRITE(6,7020)RDISTF(1),RDISTF(NRDIST)
7020      FORMAT('    UPPER BIN RADII RANGE FROM ',F12.3,' TO',F12.3,' c
     *m')
          WRITE(6,7030)
7030      FORMAT(/' AND NOW THE RADIAL INTENSITY DISTRIBUTION...')
          FNORM20=0
          DO 7041 IB20=1,NRDIST
              IF ((IB20.GT.1)) THEN
                  RCDF(IB20)=RPDF(IB20)*(RDISTF(IB20)**2-RDISTF(IB20-1)*
     *            *2)
              ELSE
                  RCDF(IB20)=RPDF(1)*RDISTF(1)**2
              END IF
              FNORM20=FNORM20+RCDF(IB20)
7041      CONTINUE
7042      CONTINUE
          DO 7051 IB20=1,NRDIST
              RCDF(IB20)=RCDF(IB20)/FNORM20
              IF ((IB20.GT.1)) THEN
                  RCDFIN(IB20,1)=RDISTF(IB20-1)**2
              ELSE
                  RCDFIN(IB20,1)=0.0
              END IF
              RCDFIN(IB20,2)=RDISTF(IB20)**2-RCDFIN(IB20,1)
7051      CONTINUE
7052      CONTINUE
          DO 7061 IB20=1,NRDIST-1
              DUMMY15 = RCDF(IB20)
              AK= IB20
              DO 7071 K20=IB20+1,NRDIST
                  IF ((RCDF(K20) .GT. DUMMY15)) THEN
                      DUMMY15=RCDF(K20)
                      AK=K20
                  END IF
7071          CONTINUE
7072          CONTINUE
              K20 = AK
              TEMP5 = RCDF(K20)
              RCDF(K20) = RCDF(IB20)
              RCDF(IB20) = TEMP5
              TEMP5 = RCDFIN(K20,1)
              RCDFIN(K20,1)=RCDFIN(IB20,1)
              RCDFIN(IB20,1)=TEMP5
              TEMP5 = RCDFIN(K20,2)
              RCDFIN(K20,2)=RCDFIN(IB20,2)
              RCDFIN(IB20,2)=TEMP5
7061      CONTINUE
7062      CONTINUE
          WRITE(6,7080)
7080      FORMAT(/'                               ')
          WRITE(6,7090)
7090      FORMAT('    UPPER RADIUS OF BIN(cm)         PROB. '/)
          WRITE(6,7100)(RDISTF(IB20),RPDF(IB20),IB20=1,NRDIST)
7100      FORMAT(E20.7,6X,E20.7)
          WRITE(6,7110)
7110      FORMAT(//)
      ELSE IF((ISOURC .EQ. 18)) THEN
          FNORM=TEMP2**2+TEMP3**2+TEMP4**2
          IF ((FNORM .EQ. 0.0)) THEN
              UINC=0.0
              VINC=0.0
              WINC=1.0
          ELSE
              FNORM=SQRT(FNORM)
              UINC=TEMP2/FNORM
              VINC=TEMP3/FNORM
              WINC=TEMP4/FNORM
          END IF
          IF ((TEMP1.GE.0)) THEN
              RBEAM=TEMP1
              WRITE(6,7120)RBEAM,UINC,VINC,WINC
7120          FORMAT(' PARALLEL BEAM INCIDENT FROM FRONT WITH GAUSSIAN R
     *ADIAL DISTRIBUTION'/ ' SIGMA OF BEAM AT THE FRONT FACE OF THE TARG
     *ET:',T60,F10.4,' cm'/ ' X-AXIS DIRECTION COSINE:',T60,F10.4/ ' Y-A
     *XIS DIRECTION COSINE:',T60,F10.4/ ' Z-AXIS DIRECTION COSINE:',T60,
     *F10.4/)
          ELSE
              RBEAM=-0.42466*TEMP1
              WRITE(6,7130)-TEMP1,UINC,VINC,WINC
7130          FORMAT(' PARALLEL BEAM INCIDENT FROM FRONT WITH GAUSSIAN R
     *ADIAL DISTRIBUTION'/ ' FWHM OF BEAM AT THE FRONT FACE OF THE TARGE
     *T:',T60,F10.4,' cm'/ ' X-AXIS DIRECTION COSINE:',T60,F10.4/ ' Y-AX
     *IS DIRECTION COSINE:',T60,F10.4/ ' Z-AXIS DIRECTION COSINE:',T60,F
     *10.4/)
          END IF
          TEMP5=1.E30
          IF(((RBEAM .LT. 0.0) .OR. (RBEAM .GT. TEMP5)))RBEAM=TEMP5
      ELSE IF((ISOURC .EQ. 19)) THEN
          FNORM=TEMP2**2+TEMP3**2+TEMP4**2
          IF ((FNORM .EQ. 0.0)) THEN
              UINC=0.0
              VINC=0.0
              WINC=1.0
          ELSE
              FNORM=SQRT(FNORM)
              UINC=TEMP2/FNORM
              VINC=TEMP3/FNORM
              WINC=TEMP4/FNORM
          END IF
          IF (( TEMP1 .GE. 0 )) THEN
              RBEAM=TEMP1
          ELSE
              RBEAM=-0.42466*TEMP1
          END IF
          IF (( TEMP6 .GT. 0 )) THEN
              RBEAMY=TEMP6
          ELSE IF((TEMP6 .LT. 0 )) THEN
              RBEAMY=-0.42466*TEMP6
          ELSE
              RBEAMY=RBEAM
          END IF
          xo_src19 = temp7
          yo_src19 = temp8
          WRITE(6,7140)RBEAM,RBEAMY,xo_src19,yo_src19
7140      FORMAT(' PARALLEL ELLIPTICAL BEAM INCIDENT FROM FRONT WITH GAU
     *SSIAN DISTRIBUTION'/ ' IN X AND Y:'/ ' X-SIGMA OF BEAM AT THE FRON
     *T FACE OF THE TARGET:',T60,F10.4,' cm'/ ' Y-SIGMA OF BEAM AT THE F
     *RONT FACE OF THE TARGET:',T60,F10.4,' cm'/ ' X-POSITION OF MIDPOIN
     *T OF ELLIPTICAL SPOT:',T60,F10.4,' cm'/ ' Y-POSITION OF MIDPOINT O
     *F ELLIPTICAL SPOT:',T60,F10.4,' cm')
          IF (( temp5 .GT. 0 )) THEN
              sigma_src19 = (temp5*3.1415926/180)**2
              WRITE(6,7150)TEMP5
7150          FORMAT(' MEAN ANGULAR SPREAD ABOUT Z AXIS:',T60,F10.4,' de
     *grees'/)
          ELSE
              sigma_src19 = -1
              WRITE(6,7160)UINC,VINC,WINC
7160          FORMAT(' X-AXIS DIRECTION COSINE:',T60,F10.4/ ' Y-AXIS DIR
     *ECTION COSINE:',T60,F10.4/ ' Z-AXIS DIRECTION COSINE:',T60,F10.4/)
          END IF
      ELSE IF((ISOURC .EQ. 21 .OR. ISOURC.EQ.24)) THEN
          WRITE(6,7170)
7170      FORMAT(' FULL PHASE-SPACE TO BE READ FROM UNIT 42...'/ ' INPUT
     * NAME OF FILE WITH PHASE SPACE DATA(1 TO 256 CHARS,', 'WITH .EXT)'
     */' : ',$)
          READ(i_input,'(A256)',END=6420)SPCNAM
          WRITE(6,7180)SPCNAM
7180      FORMAT(/' READ PHASE SPACE INFORMATION FROM: '/A256)
          call replace_env(SPCNAM)
          i_iaea_in=0
          inquire(file=SPCNAM,opened=phsp_open)
          IF ((phsp_open)) THEN
              WRITE(6,7190)
7190          FORMAT(/' Phase space source already open.  Will assume th
     *at '/ ' DOSXYZnrc Source 20 is using this BEAM code as '/ ' an ini
     *tial geometry.  Will not attempt to '/ ' open phase space source.'
     */)
              MONOEN = 2
              IQIN = 9
              INIT_ICM=TEMP1
              EKMAXSRC=TEMP2
          ELSE
              ilen=lnblnk1(SPCNAM)
              IF ((SPCNAM(ilen-8:ilen).EQ.'.IAEAphsp')) THEN
                  i_iaea_in=1
                  SPCNAM=SPCNAM(:ilen-9)
              END IF
              IF ((i_iaea_in.EQ.1)) THEN
                  call iaea_new_source(IINSRC,SPCNAM,1,iaea_result)
                  IF ((iaea_result.LT.0)) THEN
                      WRITE(i_log,*)' Error opening IAEA phase space sou
     *rce.'
                  END IF
                  call iaea_get_max_particles(IINSRC,-1,iaea_dummy_long)
                  NNPHSP=iaea_dummy_long
                  call iaea_get_max_particles(IINSRC,1,iaea_dummy_long)
                  NPHOTSRC=iaea_dummy_long
                  call iaea_get_total_original_particles(IINSRC,iaea_dum
     *            my_long)
                  NINCSRC=iaea_dummy_long
                  call iaea_get_maximum_energy(IINSRC,EKMAX_PHSP_SHORT)
                  EKMAXSRC=EKMAX_PHSP_SHORT
                  call iaea_get_constant_variable(IINSRC,2,Z_PHSP_SHORT,
     *            iaea_result)
                  IF ((iaea_result.EQ.-3)) THEN
                      write(i_log,*) ' Z positions of each particle will
     * be read from phase space data.'
                      Z_SOURCE=999.
                      IZSCORE=1
                  ELSE IF((iaea_result.LT.0)) THEN
                      write(i_log,*)' Error reading Z position where IAE
     *A phsp was scored.'
                      IZSCORE=0
                  ELSE
                      Z_SOURCE=Z_PHSP_SHORT
                      IZSCORE=0
                  END IF
                  call iaea_get_extra_numbers(IINSRC,iaea_n_extra_floats
     *            ,iaea_n_extra_ints)
                  IF ((iaea_n_extra_floats .EQ. -1 .OR. iaea_n_extra_int
     *            s .EQ. -1)) THEN
                      write(i_log,*)' Error reading number of extra vari
     *ables stored in IAEA phsp'
                  END IF
                  call iaea_get_type_extra_variables(IINSRC,iaea_result,
     *            iaea_extra_int_types, iaea_extra_float_types)
                  IF ((iaea_result.EQ.-1)) THEN
                      write(i_log,*)' Error getting types of extra varia
     *bles stored in IAEA phsp'
                  END IF
                  DO 7201 I_PHSP=1,iaea_n_extra_ints
                      IF ((iaea_extra_int_types(I_PHSP).EQ.2)) THEN
                          iaea_i_latch=I_PHSP
                          GO TO7202
                      END IF
7201              CONTINUE
7202              CONTINUE
                  IF ((iaea_i_latch.EQ.-99)) THEN
                      write(i_log,*)' Warning: IAEA format phsp file doe
     *s not store LATCH'
                  END IF
                  DO 7211 I_PHSP=1,iaea_n_extra_floats
                      IF ((iaea_extra_float_types(I_PHSP).EQ.3)) THEN
                          iaea_i_zlast=I_PHSP
                          GO TO7212
                      END IF
7211              CONTINUE
7212              CONTINUE
                  IF ((iaea_i_zlast.EQ.-99)) THEN
                      IZLAST1=0
                  ELSE
                      IZLAST1=1
                  END IF
                  iaea_i_muidx=MAX(1,iaea_i_zlast+1)
                  IF ((iaea_i_muidx.GT.iaea_n_extra_floats .OR. iaea_ext
     *            ra_float_types(iaea_i_muidx).NE.0)) THEN
                      iaea_i_muidx=-99
                      I_MUPHSP_IN=0
                  ELSE
                      I_MUPHSP_IN=1
                  END IF
                  WRITE(6,7220)NNPHSP,NPHOTSRC,EKMAXSRC,NINCSRC
7220              FORMAT(T10,' IAEA format Phase space source with:'/ T5
     *,'                    Total number of particles =',I13/ T5,'      
     *                      Number of photons =',I13/ T5,'              
     *Maximum particle kinetic energy =',F13.3,' MeV'/ T5,' # of particl
     *es incident from original source =',F13.1/)
                  IF ((IZSCORE.EQ.0)) THEN
                      WRITE(6,7230)Z_SOURCE
7230                  FORMAT(T5,'                        Z where sources
     *cored =',F13.3,' cm'/)
                  END IF
                  IF ((I_MUPHSP_IN.NE.0)) THEN
                      WRITE(6,7240)
7240                  FORMAT(/' Fractional MU index will be read from th
     *e phase space data.')
                  END IF
              ELSE
                  IF ((IZLAST.GT.0)) THEN
                      PHSP_RECL=4*8
                      OPEN(UNIT=IINSRC,FILE=SPCNAM,FORM='UNFORMATTED',AC
     *                CESS='DIRECT', RECL=PHSP_RECL,STATUS='OLD',IOSTAT=
     *                IERR_PHSP)
                      IF ((IERR_PHSP.NE.0)) THEN
                          WRITE(6,7250)
7250                      FORMAT(/' ***error opening file as MODE2 ****'
     */' *** THE FILE FORMAT MAY BE WRONG (I.E., NOT A MODE2 FILE) ***'/
     * /' *** WE NOW TRY TO OPEN IT AS A MODE3 FILE ***'//)
                          OPEN(UNIT=IINSRC,STATUS='OLD',FILE=SPCNAM, FOR
     *                    M='UNFORMATTED', IOSTAT=IERR_PHSP)
                          IF ((IERR_PHSP.NE.0)) THEN
                              WRITE(6,7260)
7260                          FORMAT(//' *** PHASE SPACE FILE CANNOT BEF
     *OUND. ***')
                              STOP
                          END IF
                          READ(IINSRC,REC=1,IOSTAT=IERR_PHSP)MODE_RW,NUM
     *                    _PHSP_TOT,PHOT_PHSP_TOT, EKMAX_PHSP_SHORT,EKMI
     *                    NE_PHSP_SHORT,NINC_PHSP_SHORT
                          NNPHSP=NUM_PHSP_TOT
                          NPHOTSRC=PHOT_PHSP_TOT
                          EKMAXSRC=EKMAX_PHSP_SHORT
                          EKMINSRCE=EKMINE_PHSP_SHORT
                          NINCSRC=NINC_PHSP_SHORT
                          IF ((IERR_PHSP.NE.0)) THEN
                              WRITE(6,7270)
7270                          FORMAT(//' ***ERROR READING HEADER OF PHAS
     *E SPACE FILE*** '//)
                              STOP
                          END IF
                          IF ((MODE_RW .NE. 'MODE3')) THEN
                              WRITE(6,7280)
7280                          FORMAT(//' That file does not start with M
     *ODE3,', ' as all old compressed files (with ZLAST) must'/ '  Check
     * it out and try again!'///)
                              IERR_PHSP=1
                              STOP
                          ELSE
                              WRITE(6,7290)
7290                          FORMAT(//' This is a MODE3 file! '/ ' Plea
     *se convert it into a MODE2 file using [readphsp] ', ' and try agai
     *n!'///)
                              IERR_PHSP=1
                              STOP
                          END IF
                      END IF
                      READ(IINSRC,REC=1,IOSTAT=IERR_PHSP)MODE_RW,NUM_PHS
     *                P_TOT,PHOT_PHSP_TOT, EKMAX_PHSP_SHORT,EKMINE_PHSP_
     *                SHORT,NINC_PHSP_SHORT
                      NNPHSP=NUM_PHSP_TOT
                      NPHOTSRC=PHOT_PHSP_TOT
                      EKMAXSRC=EKMAX_PHSP_SHORT
                      EKMINSRCE=EKMINE_PHSP_SHORT
                      NINCSRC=NINC_PHSP_SHORT
                      IF ((IERR_PHSP.NE.0)) THEN
                          WRITE(6,7300)
7300                      FORMAT(//' ***ERROR READING HEADER OF PHASE SP
     *ACE FILE*** '//)
                          STOP
                      END IF
                      IF ((MODE_RW .NE. 'MODE2')) THEN
                          WRITE(6,7310)
7310                      FORMAT(//' That file does not start with MODE2
     *,', ' as standard compressed files with ZLAST must'/ '  Check it o
     *ut and try again!'///)
                          IERR_PHSP=1
                          STOP
                      END IF
                  ELSE IF((IZLAST.EQ.0)) THEN
                      PHSP_RECL=4*7
                      OPEN(UNIT=IINSRC,FILE=SPCNAM,FORM='UNFORMATTED',AC
     *                CESS='DIRECT', RECL=PHSP_RECL,STATUS='OLD',IOSTAT=
     *                IERR_PHSP)
                      IF ((IERR_PHSP.NE.0)) THEN
                          WRITE(6,7320)
7320                      FORMAT(/' ***ERROR opening file as MODE0****'/
     *' *** THE FILE FORMAT MAY BE WRONG (I.E., NOT A MODE0 FILE) ***'/ 
     */' *** WE NOW TRY TO OPEN IT AS A MODE1 FILE***'//)
                          OPEN(UNIT=IINSRC,STATUS='OLD',FILE=SPCNAM, FOR
     *                    M='UNFORMATTED', IOSTAT=IERR_PHSP)
                          IF ((IERR_PHSP.NE.0)) THEN
                              WRITE(6,7330)
7330                          FORMAT(//' *** PHASE SPACE FILE CANNOT BEF
     *OUND. ***')
                              STOP
                          END IF
                          READ(IINSRC,REC=1,IOSTAT=IERR_PHSP)MODE_RW,NUM
     *                    _PHSP_TOT,PHOT_PHSP_TOT, EKMAX_PHSP_SHORT,EKMI
     *                    NE_PHSP_SHORT,NINC_PHSP_SHORT
                          NNPHSP=NUM_PHSP_TOT
                          NPHOTSRC=PHOT_PHSP_TOT
                          EKMAXSRC=EKMAX_PHSP_SHORT
                          EKMINSRCE=EKMINE_PHSP_SHORT
                          NINCSRC=NINC_PHSP_SHORT
                          IF ((IERR_PHSP.NE.0)) THEN
                              WRITE(6,7340)
7340                          FORMAT(//' ***ERROR READING HEADER OF PHAS
     *E SPACE FILE*** '//)
                              STOP
                          END IF
                          IF ((MODE_RW .NE. 'MODE1')) THEN
                              WRITE(6,7350)
7350                          FORMAT(//' That file does not start with M
     *ODE1,', ' as all old compressed files must'/ '  Check it out and t
     *ry again!'///)
                              IERR_PHSP=1
                              STOP
                          ELSE
                              WRITE(6,7360)
7360                          FORMAT(//' This is a MODE1 file! '/ ' Plea
     *se convert it into a MODE0 file using [readphsp] ', 'and try again
     *!'///)
                              IERR_PHSP=1
                              STOP
                          END IF
                      END IF
                      READ(IINSRC,REC=1,IOSTAT=IERR_PHSP)MODE_RW,NUM_PHS
     *                P_TOT,PHOT_PHSP_TOT, EKMAX_PHSP_SHORT,EKMINE_PHSP_
     *                SHORT,NINC_PHSP_SHORT
                      NNPHSP=NUM_PHSP_TOT
                      NPHOTSRC=PHOT_PHSP_TOT
                      EKMAXSRC=EKMAX_PHSP_SHORT
                      EKMINSRCE=EKMINE_PHSP_SHORT
                      NINCSRC=NINC_PHSP_SHORT
                      IF ((IERR_PHSP.NE.0)) THEN
                          WRITE(6,7370)
7370                      FORMAT(//' ***ERROR READING HEADER OF PHASE SP
     *ACE FILE*** '//)
                          STOP
                      END IF
                      IF ((MODE_RW .NE. 'MODE0')) THEN
                          WRITE(6,7380)
7380                      FORMAT(/' Does not start with MODE0 as files w
     *ithout ZLAST must'/ '  Try again!'//)
                          IERR_PHSP=1
                          STOP
                      END IF
                  ELSE IF((IZLAST.LT.0)) THEN
                      WRITE(6,7390)
7390                  FORMAT(/' First, try to open it as a MODE0 file')
                      PHSP_RECL=4*7
                      OPEN(UNIT=IINSRC,FILE=SPCNAM,FORM='UNFORMATTED',AC
     *                CESS='DIRECT', RECL=PHSP_RECL,STATUS='OLD',IOSTAT=
     *                IERR_PHSP)
                      IF ((IERR_PHSP.NE.0)) THEN
                          WRITE(6,7400)
7400                      FORMAT(/' Now try to open it as a MODE2 file')
                          IZLAST=1
                          PHSP_RECL=4*8
                          OPEN(UNIT=IINSRC,FILE=SPCNAM,FORM='UNFORMATTED
     *',ACCESS='DIRECT', RECL=PHSP_RECL,STATUS='OLD',IOSTAT=IERR_PHSP)
                          IF ((IERR_PHSP.NE.0)) THEN
                              WRITE(6,7410)
7410                          FORMAT(//' *** PHASE SPACE FILE CANNOT BEF
     *OUND. ***')
                          ELSE
                              READ(IINSRC,REC=1,IOSTAT=IERR_PHSP)MODE_RW
     *                        ,NUM_PHSP_TOT,PHOT_PHSP_TOT, EKMAX_PHSP_SH
     *                        ORT,EKMINE_PHSP_SHORT,NINC_PHSP_SHORT
                              NNPHSP=NUM_PHSP_TOT
                              NPHOTSRC=PHOT_PHSP_TOT
                              EKMAXSRC=EKMAX_PHSP_SHORT
                              EKMINSRCE=EKMINE_PHSP_SHORT
                              NINCSRC=NINC_PHSP_SHORT
                              IF ((IERR_PHSP.NE.0)) THEN
                                  WRITE(6,7420)
7420                              FORMAT(//' ***ERROR READING HEADER OFP
     *HASE SPACE FILE*** '//)
                                  STOP
                              END IF
                              IF ((MODE_RW.NE.'MODE2')) THEN
                                  WRITE(6,7430)
7430                              FORMAT(//' That file does not start wi
     *th MODE2,', ' as standard compressed files with ZLAST must'/ '  Ch
     *eck it out and try again!'///)
                                  CLOSE(IINSRC)
                                  STOP
                              END IF
                          END IF
                      ELSE
                          READ(IINSRC,REC=1,IOSTAT=IERR_PHSP)MODE_RW,NUM
     *                    _PHSP_TOT,PHOT_PHSP_TOT, EKMAX_PHSP_SHORT,EKMI
     *                    NE_PHSP_SHORT,NINC_PHSP_SHORT
                          NNPHSP=NUM_PHSP_TOT
                          NPHOTSRC=PHOT_PHSP_TOT
                          EKMAXSRC=EKMAX_PHSP_SHORT
                          EKMINSRCE=EKMINE_PHSP_SHORT
                          NINCSRC=NINC_PHSP_SHORT
                          IF ((IERR_PHSP.NE.0)) THEN
                              WRITE(6,7440)
7440                          FORMAT(//' ***ERROR READING HEADER OF PHAS
     *E SPACE FILE*** '//)
                              STOP
                          END IF
                          IZLAST=0
                          IF ((MODE_RW.NE.'MODE0')) THEN
                              WRITE(6,7450)
7450                          FORMAT(/' The file does not start with MOD
     *E0 as it supposed to')
                              CLOSE(IINSRC)
                              WRITE(6,7460)
7460                          FORMAT(/' Now try to open it as a MODE2 fi
     *le')
                              IZLAST=1
                              PHSP_RECL=4*8
                              OPEN(UNIT=IINSRC,FILE=SPCNAM,FORM='UNFORMA
     *TTED',ACCESS='DIRECT', RECL=PHSP_RECL,STATUS='OLD',IOSTAT=IERR_PHS
     *                        P)
                              IF ((IERR_PHSP.NE.0)) THEN
                                  WRITE(6,7470)
7470                              FORMAT(//' *** PHASE SPACE FILE CANNOT
     * BE OPENED. ***')
                              ELSE
                                  READ(IINSRC,REC=1,IOSTAT=IERR_PHSP)MOD
     *                            E_RW,NUM_PHSP_TOT,PHOT_PHSP_TOT, EKMAX
     *                            _PHSP_SHORT,EKMINE_PHSP_SHORT,NINC_PHS
     *                            P_SHORT
                                  NNPHSP=NUM_PHSP_TOT
                                  NPHOTSRC=PHOT_PHSP_TOT
                                  EKMAXSRC=EKMAX_PHSP_SHORT
                                  EKMINSRCE=EKMINE_PHSP_SHORT
                                  NINCSRC=NINC_PHSP_SHORT
                                  IF ((IERR_PHSP.NE.0)) THEN
                                      WRITE(6,7480)
7480                                  FORMAT(//' ***ERROR READING HEADER
     * OF PHASE SPACE FILE*** '//)
                                      STOP
                                  END IF
                                  IF ((MODE_RW.NE.'MODE2')) THEN
                                      WRITE(6,7490)
7490                                  FORMAT(//' That file does not star
     *t with MODE2,', ' as standard compressed files with ZLAST must'/ '
     *  Check it out and try again!'///)
                                      CLOSE(IINSRC)
                                      STOP
                                  END IF
                              END IF
                          END IF
                      END IF
                  END IF
                  OLDSRC=0
                  IF ((EKMAXSRC .EQ. 0.0 .OR. NPHOTSRC.GT.NNPHSP .OR. EK
     *            MINSRCE.GT.EKMAXSRC)) THEN
                      WRITE(6,7500)
7500                  FORMAT(//' *****WARNING*****'/ ' PHASE SPACE SOURC
     *E MAY HAVE AN ERROR OR MAY HAVE BEEN'/ ' GENERATED BY AN OLDER VER
     *SION OF BEAMnrc.'/ ' WILL USE USER-INPUT VALUE OF MAXIMUM KINETICE
     *NERGY.'/ ' NUMBER OF PHOTONS AND MINIMUM ELECTRON ENERGY'/ ' WILL 
     *BE SET TO 0.  THIS WILL HAVE NO EFFECT ON RESULTS.'/ ' # OF PARTIC
     *LES INCIDENT FROM ORIGINAL SOURCE WILL BE SET'/ ' EQUAL TO THE TOT
     *AL NUMBER OF PARTICLES IN THE SOURCE FILE,'/ ' WHICH WILL CAUSE DO
     *SE AND FLUENCE TO BE NORMALIZED'/ ' WITH RESPECT TO THE # OF HISTO
     *RIES RUN FROM THE PHASE'/ ' SPACE FILE, NOT THE # OF PARTICLES FRO
     *M THE ORIGINAL'/ ' SOURCE.'/ ' CHECK PHSP SOURCE FOR POSSIBLE ERRO
     *RS!'//)
                      EKMAXSRC=TEMP2
                      NPHOTSRC=0
                      EKMINSRCE=0.
                      NINCSRC=NNPHSP
                      OLDSRC=1
                  ELSE IF((NINCSRC .LT. 2)) THEN
                      WRITE(6,7510)
7510                  FORMAT(//' ******WARNING*****'/ ' PHASE SPACE SOUR
     *CE WAS GENERATED USING AN OLDER'/ ' VERSION OF BEAMnrc IN WHICH #O
     *F PARTICLES INCIDENT FROM'/ ' ORIGINAL SOURCE WAS NOT STORED.  THI
     *S NUMBER WILL'/ ' BE SET EQUAL TO THE NUMBER OF PARTICLES IN THESO
     *URCE'/ ' FILE, AND DOSE AND FLUENCE WILL BE NORMALIZED'/ ' WITHRES
     *PECT TO THE # OF HISTORIES RUN FROM THIS'/ ' FILE...NOT THE # OF P
     *ARTICLES OF PARTICLES FROM'/ ' THE ORIGINAL SOURCE'//)
                      NINCSRC=NNPHSP
                      OLDSRC=2
                  END IF
                  WRITE(6,7520)NNPHSP,NPHOTSRC,EKMAXSRC,EKMINSRCE,NINCSR
     *            C
7520              FORMAT(T10,' Phase space source with:',/ T5,'         
     *  Total number of particles =',I13,/ T5,'            Number of pho
     *tons =',I13,/ T5,'              Maximum particle kinetic energy ='
     *,F13.3,' MeV'/ T5,'              Minimumelectron kinetic energy ='
     *,F13.3,' MeV'/ T5,' # of particles incident from original source =
     *',F13.1,/)
              END IF
              MONOEN = 2
              IQIN = 9
              INIT_ICM=TEMP1
              WRITE(6,7530)INIT_ICM
7530          FORMAT(/' Particles will start at the front boundary of CM
     *',I3/)
              ISRC_DBS=TEMP5
              RSRC_DBS=TEMP6
              SSDSRC_DBS=TEMP7
              ZSRC_DBS=TEMP8
              IF ((ISRC_DBS.EQ.1)) THEN
                  WRITE(6,7540)RSRC_DBS,SSDSRC_DBS,ZSRC_DBS
7540              FORMAT(/ T5,' Directional Bremsstrahlung Splitting (DB
     *S) used'/ T5,' in BEAM simulation to generate phase space source w
     *ith:'/ T10,'    DBS splitting radius =',F10.4,' cm'/ T10,'SSD wher
     *e radius defined =',F10.4,' cm'/ T10,'   Z where source scored =',
     *F10.4, 'cm'/ T5,' Photons whose trajectory takes themoutside the D
     *BS splitting'/ T5,' radius at the SSD will be rejected.'/)
                  IF ((SSDSRC_DBS.LT.ZSRC_DBS)) THEN
                      WRITE(6,7550)
7550                  FORMAT(//' ***WARNING:'/ ' SSD where DBS splitting
     * radius is defined < the Z'/ ' value of scoring plane for this sou
     *rce.'/ ' Particle rejection will be turned off.'//)
                      ISRC_DBS=0
                  END IF
              ELSE
                  ISRC_DBS=0
              END IF
              IPARALLEL=TEMP3
              PARNUM=TEMP4
#ifdef HAVE_C_COMPILER
              IF ((IPARALLEL.GT.1 .AND. n_parallel.GT.0)) THEN
                  WRITE(6,7560)IPARALLEL, n_parallel
7560              FORMAT(/' You have set IPARALLEL in the input file to'
     *,I4,/ ' But you are also running a C compiled code with n_parallel
     *=',I4,/ ' IPARALLEL will be reset to 1, and control of the paralle
     *l run '/ ' will be within BEAM.'/)
                  IPARALLEL=1
              END IF
#endif
              IF((IPARALLEL.LE.0))IPARALLEL=1
              IF((PARNUM.LT.0))PARNUM=0
              IF ((IPARALLEL.GT.1)) THEN
                  IF ((PARNUM.GE.1 .AND. PARNUM.LE.IPARALLEL)) THEN
                      WRITE(6,7570)IPARALLEL,INT((PARNUM-1)*NNPHSP/IPARA
     *                LLEL)+1, INT(PARNUM*NNPHSP/IPARALLEL)
7570                  FORMAT(/' This is one of ',I4,' parallel jobs.'/ '
     * It will use from particle ',I12,' to particle ',I12,/ ' from thep
     *hase space source in the simulation.'/)
                  ELSE
                      WRITE(6,7580)IPARALLEL
7580                  FORMAT(/' IPARALLEL input indicates that this is o
     *ne of ',I4,' parallel jobs.'/ ' But PARNUM is out of range (<1 or>
     *IPARALLEL).  Therefore, phsp '/ ' source will not be partitioned.'
     */)
                      PARNUM=0
                      IPARALLEL=1
                  END IF
              END IF
              IF ((TEMP2.LE.0)) THEN
                  tmp_long=NNPHSP
                  IF ((NINT(dble(IPARALLEL*NCASE)/float(NNPHSP)).LE.1))
     *            THEN
                      NRCYCL=0
                  ELSE IF((MOD(IPARALLEL*NCASE,tmp_long).EQ.0)) THEN
                      NRCYCL=(IPARALLEL*NCASE)/NNPHSP-1
                  ELSE
                      NRCYCL=(IPARALLEL*NCASE)/NNPHSP
                  END IF
              ELSE
                  NRCYCL=TEMP2
              END IF
              WRITE(6,7590)NRCYCL
7590          FORMAT(/' Particles will be recycled ',I4,' times before m
     *oving on to next one.'/)
              NHSTRYM=0
              IF ((i_iaea_in.EQ.1)) THEN
                  call iaea_check_file_size_byte_order(IINSRC,iaea_resul
     *            t)
                  IF ((iaea_result.EQ.-3)) THEN
                      WRITE(i_log,*)' ERROR: Size of phase space file do
     *es not match'
                      WRITE(i_log,*)' the value of checksum in the heade
     *r.  Something may be'
                      WRITE(i_log,*)' wrong.  Check your file.'
                      call exit(1)
                  ELSE IF((iaea_result.EQ.-4)) THEN
                      WRITE(i_log,*)' ERROR: Byte order in the phase spa
     *ce file does not'
                      WRITE(i_log,*)' match the machine you are running
     *on.'
                      call exit(1)
                  ELSE IF((iaea_result.EQ.-5)) THEN
                      WRITE(i_log,*)' ERROR: Size of file does not match
     * the value of checksum'
                      WRITE(i_log,*)' in the header AND there is a byte
     *order mismatch between'
                      WRITE(i_log,*)' the file and the machine you are r
     *unning on.'
                      call exit(1)
                  ELSE IF((iaea_result.EQ.-1)) THEN
                      WRITE(i_log,*)' ERROR: Cannot open phase space hea
     *der.'
                      call exit(1)
                  ELSE IF((iaea_result.EQ.-2)) THEN
                      WRITE(i_log,*)' ERROR: Something is wrong with the
     * phase space file.'
                      call exit(1)
                  END IF
              ELSE
                  IF ((IZLAST.NE.0)) THEN
                      READ(IINSRC,REC=2,IOSTAT=IERR_PHSP) LATCHM,ESHORT,
     *                X_PHSP_SHORT,Y_PHSP_SHORT, U_PHSP_SHORT,V_PHSP_SHO
     *                RT,WT_PHSP_SHORT,ZLAST_PHSP_SHORT
                  ELSE
                      READ(IINSRC,REC=2,IOSTAT=IERR_PHSP) LATCHM,ESHORT,
     *                X_PHSP_SHORT,Y_PHSP_SHORT, U_PHSP_SHORT,V_PHSP_SHO
     *                RT,WT_PHSP_SHORT
                  END IF
                  IF ((2.EQ.76695869)) THEN
                      write(*,*)' x,y,u,v,wt,eshort,latch', X_PHSP_SHORT
     *                ,Y_PHSP_SHORT,U_PHSP_SHORT,V_PHSP_SHORT, WT_PHSP_S
     *                HORT,ESHORT,LATCHM
                  END IF
                  IF ((ESHORT.LT.0.0)) THEN
                      NHSTRYM=NHSTRYM+1
                      ESHORT=ABS(ESHORT)
                  END IF
                  EINM=ESHORT
                  WTM=WT_PHSP_SHORT
                  XINM=X_PHSP_SHORT
                  YINM=Y_PHSP_SHORT
                  UINM=U_PHSP_SHORT
                  VINM=V_PHSP_SHORT
                  IF((IZLAST.NE.0))ZLAST(1)=ZLAST_PHSP_SHORT
                  IF ((NHSTRYM.EQ.0)) THEN
                      DOSE_STAT=1
                      WRITE(6,7600)
7600                  FORMAT(//' ***WARNING***'/ ' Cannot read no. of pr
     *imary (non-phsp) histories from ph-sp source.'/ ' Dose and fluence
     * will be analyzed assuming each particle read from'/ ' the ph-sp f
     *ile is an independent history.  May result in an'/ ' underestimate
     * of uncertainties.'//)
                  END IF
              END IF
          END IF
          IF ((ISOURC.EQ.24)) THEN
              WRITE(6,7610)INIT_ICM
7610          FORMAT(' Angle of source plane wrt the X-axis (degrees), A
     *ngle wrt '/ ' the Y-axis (degrees), distance from point of rotatio
     *n to '/ ' front of CM ',I4,' (cm):',$)
              READ(i_input,7620,END=6420,ERR=6430)ALPHA24,BETA24,DIST24
7620          FORMAT(3F15.0)
              WRITE(6,7630)ALPHA24,BETA24,DIST24
7630          FORMAT(3F12.5)
              IF ((ABS(ALPHA24).GE.90. .OR. ABS(BETA24).GE.90.)) THEN
                  WRITE(6,7640)
7640              FORMAT(//' ****ERROR in input for source 24:'/ ' At le
     *ast one of the source angles is >= 90.'/ ' Incident particles will
     * not hit the surface of the CM.'/ ' Reset angle(s) and try again.'
     *//)
                  STOP
              ELSE IF((INIT_ICM.EQ.1 .AND. (ALPHA24.NE.0 .OR. BETA24.NE.
     *        0))) THEN
                  WRITE(6,7650)
7650              FORMAT(//' ****ERROR in input for source 24:'/ ' Incid
     *ent CM must be > 1 to allow for rotation of source '/ ' to positio
     *ns above its incident plane.  Try again.'//)
                  STOP
              ELSE IF(((ALPHA24.NE.0 .OR. BETA24.NE.0) .AND. ((CMTYPE(IN
     *        IT_ICM).NE.'SLABS' .AND. CMTYPE(INIT_ICM).NE.'FLATFILT' .A
     *        ND. CMTYPE(INIT_ICM).NE.'SIDETUBE') .OR. (CMTYPE(INIT_ICM-
     *        1).NE.'SLABS' .AND. CMTYPE(INIT_ICM-1).NE.'FLATFILT' .AND.
     *         CMTYPE(INIT_ICM-1).NE.'SIDETUBE')))) THEN
                  WRITE(6,7660)
7660              FORMAT(//' ****ERROR in input for source 24:'/ ' INIT_
     *ICM and INIT_ICM-1 must be SLABS, FLATFILT or SIDETUBE.'//)
                  STOP
              END IF
              SALPHA24=SIN(ALPHA24*3.1415926/180.)
              CALPHA24=COS(ALPHA24*3.1415926/180.)
              SBETA24=SIN(BETA24*3.1415926/180.)
              CBETA24=COS(BETA24*3.1415926/180.)
          END IF
          N_ph_sp_e=0
          N_ph_sp_g=0
          N_ph_sp_p=0
          NPASS_ph_sp=0
          NFAT_ph_sp=0
          E_ph_sp_e=0.0
          E_ph_sp_g=0.0
          E_ph_sp_p=0.0
          E_MAX_ph_sp=0.0
      ELSE IF((ISOURC .EQ. 23)) THEN
          WRITE(6,7670)
7670      FORMAT(' Input name of source beam code (BEAM_accelname), inpu
     *t file (no ext.), '/ ' pegs data (no ext.) (A256)'/'  : ',$)
          READ(i_input,'(A)',END=6420) TEXT
          WRITE(6,7680)TEXT(:lnblnk1(TEXT))
7680      FORMAT(A)
          the_beam_code=TEXT(:INDEX(TEXT,',')-1)
          TEXT=TEXT(INDEX(TEXT,',')+1:)
7691      IF(INDEX(the_beam_code,' ').NE.1)GO TO 7692
              IF ((len(the_beam_code).GE.2)) THEN
                  the_beam_code=the_beam_code(2:)
              ELSE
                  GO TO7692
              END IF
          GO TO 7691
7692      CONTINUE
          the_beam_code=the_beam_code(:lnblnk1(the_beam_code))
          the_input_file=TEXT(:INDEX(TEXT,',')-1)
          TEXT=TEXT(INDEX(TEXT,',')+1:)
7701      IF(INDEX(the_input_file,' ').NE.1)GO TO 7702
              IF ((len(the_input_file).GE.2)) THEN
                  the_input_file=the_input_file(2:)
              ELSE
                  GO TO7702
              END IF
          GO TO 7701
7702      CONTINUE
          the_input_file=the_input_file(:lnblnk1(the_input_file))
          the_pegs_file=TEXT(:lnblnk1(TEXT))
7711      IF(INDEX(the_pegs_file,' ').NE.1)GO TO 7712
              IF ((len(the_pegs_file).GE.2)) THEN
                  the_pegs_file=the_pegs_file(2:)
              ELSE
                  GO TO7712
              END IF
          GO TO 7711
7712      CONTINUE
          MONOEN = 2
          IQIN = 9
          INIT_ICM=TEMP1
          ISRC_DBS=TEMP2
          ALPHA24=TEMP3
          BETA24=TEMP4
          DIST24=TEMP5
          WRITE(6,7720)the_beam_code(:lnblnk1(the_beam_code)),the_input_
     *    file(:lnblnk1(the_input_file)), the_pegs_file(:lnblnk1(the_peg
     *    s_file))
7720      FORMAT(/' BEAM simulation name: ',A/ '           input file: '
     *,A/ '   pegs data for BEAM: ',A/)
          WRITE(6,7730)INIT_ICM
7730      FORMAT(/' Particles will start at the front boundary of CM',I3
     */)
          IF((ISRC_DBS.EQ.1))WRITE(6,7740)
7740      FORMAT(' Fat photons from DBS will be rejected.'/)
          WRITE(6,7750)ALPHA24,BETA24,INIT_ICM,DIST24
7750      FORMAT(' Angle of rotation of source plane wrt the X-axis = ',
     *F8.3,' degrees'/ ' Angle of rotation of source plane wrt the Y-axi
     *s = ',F8.3,' degrees'/ ' Distance of point of rotation above CM ',
     *I4,' = ',F8.3,' cm'/)
          IF ((ABS(ALPHA24).GE.90. .OR. ABS(BETA24).GE.90.)) THEN
              WRITE(6,7760)
7760          FORMAT(//' ****ERROR in input for source 23:'/ ' At leasto
     *ne of the source angles is >= 90.'/ ' Incident particles will not 
     *hit the surface of the CM.'/ ' Reset angle(s) and try again.'//)
              STOP
          ELSE IF((INIT_ICM.EQ.1 .AND. (ALPHA24.NE.0 .OR. BETA24.NE.0)))
     *     THEN
              WRITE(6,7770)
7770          FORMAT(//' ****ERROR in input for source 23:'/ ' IncidentC
     *M must be > 1 to allow for rotation of source '/ ' to positions ab
     *ove its incident plane.  Try again.'//)
              STOP
          ELSE IF(((ALPHA24.NE.0 .OR. BETA24.NE.0) .AND. ((CMTYPE(INIT_I
     *    CM).NE.'SLABS' .AND. CMTYPE(INIT_ICM).NE.'FLATFILT' .AND. CMTY
     *    PE(INIT_ICM).NE.'SIDETUBE') .OR. (CMTYPE(INIT_ICM-1).NE.'SLABS
     *' .AND. CMTYPE(INIT_ICM-1).NE.'FLATFILT' .AND. CMTYPE(INIT_ICM-1).
     *    NE.'SIDETUBE')))) THEN
              WRITE(6,7780)
7780          FORMAT(//' ****ERROR in input for source 23:'/ ' INIT_ICMa
     *nd INIT_ICM-1 must be SLABS, FLATFILT or SIDETUBE'//)
              STOP
          END IF
          SALPHA24=SIN(ALPHA24*3.1415926/180.)
          CALPHA24=COS(ALPHA24*3.1415926/180.)
          SBETA24=SIN(BETA24*3.1415926/180.)
          CBETA24=COS(BETA24*3.1415926/180.)
          N_ph_sp_e=0
          N_ph_sp_g=0
          N_ph_sp_p=0
          NFAT_ph_sp=0
          E_ph_sp_e=0.0
          E_ph_sp_g=0.0
          E_ph_sp_p=0.0
          E_MAX_ph_sp=0.0
      ELSE IF((ISOURC .EQ. 31)) THEN
          WRITE(6,7790)
7790      FORMAT(///' SORRY, BEAM CHARACTERIZATION MODELS NOT IMPLEMENTE
     *D'// ' PLEASE START AGAIN WITH OTHER SOURCES'///)
          STOP
      ELSE
          WRITE(6,7800)ISOURC
7800      FORMAT(///' *********ISOURC=',I5,' DOES NOT EXIST IN BEAMnrc**
     ***'/ //' START AGAIN'///)
          call exit(1)
      END IF
      IF ((ISOURC .LT. 21 .OR. ISOURC.EQ.22)) THEN
          WRITE(6,7810)
7810      FORMAT(/' Source energy --Monoenergetic(0) or spectrum (1): ',
     *$)
          READ(i_input,7820,END=6420,ERR=6430)MONOEN
7820      FORMAT(I4)
          WRITE(6,7830)MONOEN
7830      FORMAT(I8)
          IF ((MONOEN .EQ. 0)) THEN
              WRITE(6,7840)
7840          FORMAT(' Monoenergetic source')
              IF ((IQIN .EQ. 0)) THEN
                  WRITE(6,7850)
7850              FORMAT(' Energy of incident beam (MeV): ',$)
              ELSE
                  WRITE(6,7860)
7860              FORMAT(' Kinetic energy of incident beam (MeV): ',$)
              END IF
              READ(i_input,7870,END=6420,ERR=6430)EIN
7870          FORMAT(F10.0)
              IF (( EIN .EQ. 0.0)) THEN
                  EIN = 1.25
              END IF
              WRITE(6,7880)EIN
7880          FORMAT(F15.4)
          ELSE IF((MONOEN .EQ. 1)) THEN
              WRITE(6,7890)
7890          FORMAT(' Energy distribution source')
              WRITE(6,7900)
7900          FORMAT(' INPUT NAME OF FILE WITH SPECTRUM DATA(<=256 CHARS
     *)'/' : ',$)
              READ(i_input,'(A256)',END=6420) FILNAM
              WRITE(6,7910)FILNAM
7910          FORMAT(/'   Will now read input energy spectrum from: ',/A
     *256)
              call replace_env(FILNAM)
              i_spect=99
              i_spect=egs_get_unit(i_spect)
              IF ((i_spect.LT.0)) THEN
                  write(i_log,'(/a)') '***************** Error: '
                  write(i_log,*) 'failed to get a free Fortran I/O unit
     *for file'
                  write(i_log,'(/a)') '***************** Quiting now.'
                  call exit(1)
              END IF
              OPEN(UNIT=i_spect,STATUS='OLD',FILE=FILNAM,ERR=7920)
              READ(i_spect,'(A80)') SPEC_TITLE
              READ(i_spect,'(I10,F15.0,I5)')NENSRC,ENMIN,IMODE
              IF ((NENSRC .GT. 240)) THEN
                  WRITE(6,7930)NENSRC,240
7930              FORMAT(//' ********** Asked for too many energy bins**
     *****'/ ' NENSRC =',I4, ' reduced to max allowed =',I4/1x,30('*')//
     *)
                  NENSRC = 240
              END IF
              READ(i_spect,'(2F20.0)')(ENSRCD(IB),SRCPDF(IB),IB=1,NENSRC
     *        )
              CLOSE(UNIT=i_spect)
              WRITE(6,7940)NENSRC
7940          FORMAT(' Have read',I5,' energy bins from file')
              IF ((IMODE.EQ.0)) THEN
                  WRITE(6,7950)
7950              FORMAT('      File contained counts/bin ')
              ELSE IF((IMODE .EQ. 1)) THEN
                  WRITE(6,7960)
7960              FORMAT('      File contained counts/MeV ')
                  SRCPDF(1) = SRCPDF(1)*(ENSRCD(1)-ENMIN)
                  DO 7971 IB=2,NENSRC
                      SRCPDF(IB) = SRCPDF(IB)*(ENSRCD(IB)-ENSRCD(IB-1))
7971              CONTINUE
7972              CONTINUE
              ELSE
                  WRITE(6,7980)IMODE
7980              FORMAT(///'*****MODE not 0 or 1 in spectrum file? **'/
     *80('*') //)
              END IF
              EIN = ENSRCD(NENSRC)
              WRITE(6,7990)ENMIN,EIN
7990          FORMAT('    ENERGY RANGES FROM',F10.3,' MeV TO',F12.3,' Me
     *V')
              WRITE(6,8000)
8000          FORMAT(' Print spectrum data in output summary, yes(1) orn
     *o(0): ',$)
              READ(i_input,'(I5)') IOUTSP
              IF ((IOUTSP .NE. 1)) THEN
                  IOUTSP=0
              END IF
              WRITE(6,8010)IOUTSP
8010          FORMAT(I12)
              CALL EN_INITIALIZE
          ELSE IF((MONOEN .GT. 2)) THEN
              WRITE(6,8020)MONOEN
8020          FORMAT(' MONOEN = ',I4, ' ??? ')
              call exit(1)
          END IF
      END IF
      RETURN
6420  CONTINUE
      WRITE(6,8030)
8030  FORMAT(//' *** unexpected end of file reading input for ISOURCE **
     **')
      call exit(1)
6430  CONTINUE
      WRITE(6,8040)
8040  FORMAT(//' *** format error on input for ISOURCE ***')
      call exit(1)
7920  CONTINUE
      WRITE(6,8050)
8050  FORMAT(//' *** SORRY, WE CANNOT FIND THE REQUIRED FILE/DIRECTORY.*
     ***')
      call exit(1)
      END
      SUBROUTINE SRCOTO(WEIGHT)
      implicit none
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/GEOM/ NREG
      INTEGER NREG
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/SOURCE/ COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,
     *COSTHETA,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SI
     *GN2,RIN1_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA
     *24, NNPHSP,NPHOTSRC,WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEA
     *M,YBEAM,ZBEAM,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL
     *2,PROBFC,PROBSD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z
     *_SOURCE,E_ph_sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT1
     *00,XSCAN_UNIT,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YIN
     *DEL, EKMAXSRC, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9, Y_SRC9, PR
     *OB_SRC9, ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN,RDISTF,RPDF,RCDF, F
     *NORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COSRNG,SINRNG,WEIGHTOLD,UINOL
     *D,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RSRC_DBS,SSDSRC_DBS,ZSRC_DBS
     *,sigma_src19,DIST24,ALPHA24,BETA24,RBEAMY, xo_src19, yo_src19, NRD
     *IST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p, NPASS_ph_s
     *p, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRATIO_YXF, OL
     *DSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUNT, IERROR,
     *RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB,MONOEN, NR
     *CYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE_FLAG, INIT
     *_ICMOLD,I_MUPHSP_IN,SPCNAM, the_beam_code,the_input_file,the_pegs_
     *file,SPEC_TITLE,phsp_open
      REAL*8 COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,COSTHETA
     *,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SIGN2,RIN1
     *_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA24
      integer*8 NNPHSP, NPHOTSRC
      real*8 WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEAM,YBEAM,ZBEAM
     *,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL2,PROBFC,PROB
     *SD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z_SOURCE,E_ph_
     *sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT100,XSCAN_UNIT
     *,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YINDEL, EKMAXSRC
     *, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9(10), Y_SRC9(10), PROB_SR
     *C9(10), ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN(1000,2),RDISTF(1000)
     *, RPDF(1000),RCDF(1000), FNORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COS
     *RNG,SINRNG,WEIGHTOLD,UINOLD,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RS
     *RC_DBS,SSDSRC_DBS,ZSRC_DBS,sigma_src19,DIST24,ALPHA24,BETA24,RBEAM
     *Y, xo_src19, yo_src19
      INTEGER NRDIST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p,
     * NPASS_ph_sp, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRA
     *TIO_YXF, OLDSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUN
     *T, IERROR, RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB
     *,MONOEN, NRCYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE
     *_FLAG, INIT_ICMOLD,I_MUPHSP_IN
      CHARACTER*256 SPCNAM
      CHARACTER*80 the_beam_code,the_input_file,the_pegs_file,SPEC_TITLE
      logical phsp_open
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      INTEGER I,  IMAX,  IMIN
      real*8 WEIGHT,  RINMIN
      IFPB=1
      IF ((INIT_ICM .EQ. 0)) THEN
          Z_SOURCE=Z_min_CM(1)
      ELSE IF(( INIT_ICM .GT. 0 )) THEN
          Z_SOURCE=Z_min_CM(INIT_ICM)
      END IF
      WEIGHT=1.0
      IF ((RMAX_CM_FLAG(1) .EQ. 1)) THEN
          RINMAX = RMAX_CM(1)*0.9999
      ELSE IF((RMAX_CM_FLAG(1) .EQ. 2)) THEN
          RINMAX=RMAX_CM(1)*SQRT(2.)*0.9999
      ELSE
          RINMAX=1000.
      END IF
      IF ((ISOURC .EQ. 8 .OR. ISOURC .EQ. 9)) THEN
          IF ((Z_SOURCE .NE. 0.0)) THEN
              RINMAX = RINMAX* DISTZ/ABS(Z_SOURCE)
          ELSE
              RINMAX = 10000.
          END IF
      END IF
      IF ((ISOURC .EQ. 0)) THEN
          IF ((RBEAM .GE. RINMAX)) THEN
              RBEAM=RINMAX
              WRITE(6,8060)RBEAM
8060          FORMAT(//' BEAM GOES BEYOND BOUNDARY OF CM !' /' BEAM RADI
     *US REDUCED TO ',F8.3,' cm.')
          END IF
          IFPB=0
          IF(((ISOURC .EQ. 0) .AND. (WINC .NE. 1.)))IFPB=1
          RBEAM2=RBEAM**2
      ELSE IF((ISOURC .EQ. 1)) THEN
          IF ((RBEAM .LT. 0.0)) THEN
              IF ((XINU.GT.RMAX_CM(1))) THEN
                  WRITE(6,8070)RMAX_CM(1)
8070              FORMAT(//' ***WARNING IN SOURCE 1:'/ ' XINU>RMAX of CM
     * 1. XINU reset to ',F8.5,' cm for now.'//)
                  XINU=RMAX_CM(1)
              END IF
              IF ((XINL.LT.-RMAX_CM(1))) THEN
                  WRITE(6,8080)-RMAX_CM(1)
8080              FORMAT(//' ***WARNING IN SOURCE 1:'/ ' XINL<-RMAX of C
     *M 1. XINL reset to ',F8.5,' cm for now.'//)
                  XINL=-RMAX_CM(1)
              END IF
              IF ((YINU.GT.RMAX_CM(1))) THEN
                  WRITE(6,8090)RMAX_CM(1)
8090              FORMAT(//' ***WARNING IN SOURCE 1:'/ ' YINU>RMAX of CM
     * 1. YINU reset to ',F8.5,' cm for now.'//)
                  YINU=RMAX_CM(1)
              END IF
              IF ((YINL.LT.-RMAX_CM(1))) THEN
                  WRITE(6,8100)-RMAX_CM(1)
8100              FORMAT(//' ***WARNING IN SOURCE 1:'/ ' YINL<-RMAX of C
     *M 1. YINL reset to ',F8.5,' cm for now.'//)
                  YINL=-RMAX_CM(1)
              END IF
              IF ((XINL.GT.XINU)) THEN
                  WRITE(6,8110)
8110              FORMAT(//' ***ERROR IN SOURCE 1:'/ ' XINL>XINU.  Pleas
     *e reset and try again.'//)
                  call exit(1)
              END IF
              IF ((YINL.GT.YINU)) THEN
                  WRITE(6,8120)
8120              FORMAT(//' ***ERROR IN SOURCE 1:'/ ' YINL>YINU.  Pleas
     *e reset and try again.'//)
                  call exit(1)
              END IF
              XINDEL=XINU-XINL
              YINDEL=YINU-YINL
          ELSE
              IF ((RBEAM .EQ. 0.0 .AND. GAMMA .EQ. 0.0)) THEN
                  RBEAM=RINMAX
              END IF
              IF((RBEAM .GE. RINMAX))RBEAM=RINMAX
              RBEAM2 = RBEAM**2
              IF ((GAMMA .EQ. 0.0)) THEN
                  COSGAMMA = DISTZ/SQRT(RBEAM2 + DISTZ**2)
                  ONEMCOSGAM = 1D0 - COSGAMMA
              ELSE
                  COSGAMMA = COS(GAMMA/57.29658)
                  IF ((TAN(GAMMA/57.29658)*DISTZ .GT. RINMAX)) THEN
                      COSGAMMA =DISTZ/SQRT(RINMAX**2 +DISTZ**2)
                      GAMMA = 57.29578*ACOS(COSGAMMA)
                      WRITE(6,8130)GAMMA
8130                  FORMAT('  Half-angle reduced to',F10.5,' degrees s
     *o just hits front face')
                  END IF
                  ONEMCOSGAM = 1D0 - COSGAMMA
              END IF
          END IF
      ELSE IF((ISOURC .EQ. 3)) THEN
          IF ((RBEAM .GE. 0)) THEN
              IF ((ZSMIN .LT. Z_min_CM(1))) THEN
                  IF ((ZSMAX .LT. Z_min_CM(1))) THEN
                      WRITE(6,8140)
8140                  FORMAT(//' ***ERROR IN SOURCE 3:'/ ' ZSMIN & ZSMAX
     * < Z_min_CM(1)'//)
                      call exit(1)
                  ELSE
                      ZSMIN= Z_min_CM(1)
                      WRITE(6,8150)ZSMIN
8150                  FORMAT(//' ***WARNING IN SOURCE 3:'/ ' ZSMIN < Z_m
     *in_CM(1)'/ ' ZSMIN reset to',F10.4,' cm'//)
                      WRITE(IOUTLIST,'(//'' ***WARNING IN SOURCE 3:''/
     *                                         '' ZSMIN < Z_min_CM(1)''/
     *                                                       '' ZSMIN re
     *set to'',F10.4,'' cm''//)')ZSMIN
                  END IF
              END IF
              IF ((ZSMAX .GT. Z_min_CM(MAX_CMs+1))) THEN
                  IF ((ZSMIN .GT. Z_min_CM(MAX_CMs+1))) THEN
                      WRITE(6,8160)
8160                  FORMAT(//' ***ERROR IN SOURCE 3:'/ ' ZSMIN & ZSMAX
     * > bottom of geometry'//)
                      call exit(1)
                  ELSE
                      ZSMAX=Z_min_CM(MAX_CMs+1)
                      WRITE(6,8170)ZSMAX
8170                  FORMAT(//' ***WARNING IN SOURCE 3:'/ ' ZSMAX > bot
     *tom of geometry'/ ' ZSMAX reset to',F10.4,' cm'//)
                      WRITE(IOUTLIST,'(//'' ***WARNING IN SOURCE 3:''/
     *                                         '' ZSMAX > bottom of geom
     *etry''/                                                '' ZSMAX re
     *set to'',F10.4,'' cm''//)')ZSMAX
                  END IF
              END IF
              DO 8181 I=MAX_CMs,1,-1
                  IF ((ZSMIN.GE.Z_min_CM(I))) THEN
                      MIN_CM_SRC3=I
                      GO TO8182
                  END IF
8181          CONTINUE
8182          CONTINUE
              DO 8191 I=1,MAX_CMs
                  IF ((ZSMAX.LE.Z_min_CM(I+1))) THEN
                      MAX_CM_SRC3=I
                      GO TO8192
                  END IF
8191          CONTINUE
8192          CONTINUE
          ELSE
              IF ((RMINBM .LT. Z_min_CM(1))) THEN
                  WRITE(6,8200)
8200              FORMAT(//' ***ERROR IN SOURCE 3:'/ ' Centre of sourcec
     *ylinder < Z_min_CM(1)'/ ' Source will not work with this geometry'
     *//)
                  call exit(1)
              ELSE IF((RMINBM .GT. Z_min_CM(MAX_CMs+1))) THEN
                  WRITE(6,8210)
8210              FORMAT(//' ***ERROR IN SOURCE 3:'/ ' Centre of sourcec
     *ylinder > bottom of simulation geometry'/ ' Source will not workwi
     *th this geometry'//)
                  call exit(1)
              END IF
              IF ((RMINBM - ABS(RBEAM) .LT. Z_min_CM(1))) THEN
                  RBEAM=-ABS(RMINBM - Z_min_CM(1))
                  WRITE(6,8220)ABS(RBEAM)
8220              FORMAT(//' ***WARNING IN SOURCE 3:'/ ' Source extendsa
     *bove Z_min_CM(1)'/ ' RBEAM reset to',F10.4,' cm'//)
                  WRITE(IOUTLIST,'(//'' ***WARNING IN SOURCE 3:''/
     *                          '' Source extends above Z_min_CM(1)''/
     *                                        '' RBEAM reset to'',F10.4,
     *'' cm''//)')ABS(RBEAM)
              END IF
              IF ((RMINBM + ABS(RBEAM) .GT. Z_min_CM(MAX_CMs+1))) THEN
                  RBEAM=-ABS(Z_min_CM(MAX_CMs+1)-RMINBM)
                  WRITE(6,8230)ABS(RBEAM)
8230              FORMAT(//' ***WARNING IN SOURCE 3:'/ ' Source extendsb
     *elow simulation geometry'/ ' RBEAM reset to',F10.4,' cm'//)
                  WRITE(IOUTLIST,'(//'' ***WARNING IN SOURCE 3:''/
     *                          '' Source extends below simulation geome
     *try''/                                  '' RBEAM reset to'',F10.4,
     *'' cm''//)')ABS(RBEAM)
              END IF
              DO 8241 I=MAX_CMs,1,-1
                  IF ((RMINBM-ABS(RBEAM).GE.Z_min_CM(I))) THEN
                      MIN_CM_SRC3=I
                      GO TO8242
                  END IF
8241          CONTINUE
8242          CONTINUE
              DO 8251 I=1,MAX_CMs
                  IF ((RMINBM+ABS(RBEAM).LE.Z_min_CM(I+1))) THEN
                      MAX_CM_SRC3=I
                      GO TO8252
                  END IF
8251          CONTINUE
8252          CONTINUE
          END IF
          IMAX=MIN_CM_SRC3
          IMIN=MIN_CM_SRC3
          RINMAX=RMAX_CM(IMAX)
          RINMIN=RMAX_CM(IMAX)
          DO 8261 I=MIN_CM_SRC3,MAX_CM_SRC3
              IF ((CMTYPE(I).NE.'CONESTAK' .AND. CMTYPE(I).NE.'SIDETUBE'
     *         .AND. CMTYPE(I).NE.'FLATFILT')) THEN
                  WRITE(6,8270)I
8270              FORMAT(//' ***ERROR IN SOURCE 3:'/ ' CM ',I4,' is nota
     * CONESTAK, SIDETUBE or FLATFILT, yet it has some of the'/ ' source
     * in it.  Source must be contained within CONESTAKs, SIDETUBEs, or'
     */ ' FLATFILTs for now.  Try again.'//)
                  call exit(1)
              END IF
              IF ((RMAX_CM(I).GT.RMAX_CM(IMAX))) THEN
                  IMAX=I
                  RINMAX=RMAX_CM(I)
              ELSE IF((RMAX_CM(I).LT.RMAX_CM(IMIN))) THEN
                  IMIN=I
                  RINMIN=RMAX_CM(I)
              END IF
8261      CONTINUE
8262      CONTINUE
          IF ((RBEAM .GE. 0)) THEN
              IF ((RMAX_CM_FLAG(IMAX).EQ.2)) THEN
                  RINMAX = SQRT(2.)*RINMAX
              END IF
              IF ((RMAX_CM_FLAG(IMIN).EQ.2)) THEN
                  RINMIN = SQRT(2.)*RINMIN
              END IF
              IF ((RBEAM.GT.RINMAX)) THEN
                  IF ((RMINBM.GT.RINMAX)) THEN
                      WRITE(6,8280)
8280                  FORMAT(//' ***ERROR IN SOURCE 3:'/ ' RBEAM & RMINB
     *M > RMAX_CM of largest CM containing source'//)
                      call exit(1)
                  ELSE
                      RBEAM=RINMAX
                      WRITE(6,8290)RBEAM
8290                  FORMAT(//' ***WARNING IN SOURCE 3:'/ ' RBEAM > RMA
     *X_CM of largest CM containing source'/ ' RBEAM reset to ',F8.3,' c
     *m'//)
                      WRITE(IOUTLIST,'(//'' ***WARNING IN SOURCE 3:''/
     *                             '' RBEAM > RMAX_CM of largest CM cont
     *aining source''/                           '' RBEAM reset to '',F8
     *.3,'' cm''//)') RBEAM
                  END IF
              END IF
              IF ((RBEAM.GT.RINMIN)) THEN
                  WRITE(6,8300)
8300              FORMAT(//' ***WARNING IN SOURCE 3:'/ ' Source goes bey
     *ond RMAX_CM of smallest CM containing source'//)
                  WRITE(IOUTLIST,'(//'' ***WARNING IN SOURCE 3:''/
     *                        '' Source goes beyond RMAX_CM of smallest
     *CM containing source''//)')
              END IF
          ELSE
              IF (((ZSMIN .LT. -RINMAX .AND. ZSMAX .LT. -RINMAX) .OR. (Z
     *        SMIN .GT. RINMAX .AND. ZSMAX .GT. RINMAX))) THEN
                  WRITE(6,8310)
8310              FORMAT(//' ***ERROR IN SOURCE 3:'/ ' Entire source isb
     *eyond RMAX_CM of largest CM supposed to contain source'//)
                  call exit(1)
              END IF
              IF ((ZSMIN .LT. -RINMAX)) THEN
                  ZSMIN=-RINMAX
                  WRITE(6,8320)ZSMIN
8320              FORMAT(//' ***WARNING IN SOURCE 3:'/ ' Min. X of sourc
     *e < RMAX_CM of largest CM containing source'/ ' Min. X reset to ',
     *F8.3,' cm'//)
                  WRITE(IOUTLIST,'(//'' ***WARNING IN SOURCE 3:''/
     *                          '' Min. X of source < RMAX_CM of largest
     * CM containing source''/                '' Min. X reset to '',F8.3
     *,'' cm''//)') ZSMIN
              END IF
              IF ((ZSMAX .GT. RINMAX)) THEN
                  ZSMAX=RINMAX
                  WRITE(6,8330)ZSMAX
8330              FORMAT(//' ***WARNING IN SOURCE 3:'/ ' Max. X of sourc
     *e > RMAX_CM of largest CM containing source'/ ' Max. X reset to ',
     *F8.3,' cm'//)
                  WRITE(IOUTLIST,'(//'' ***WARNING IN SOURCE 3:''/
     *                          '' Max. X of source < RMAX_CM of largest
     * CM containing source''/                '' Max. X reset to '',F8.3
     *,'' cm''//)') ZSMAX
              END IF
              IF ((ABS(ZSMAX) .GT. RINMIN .OR. ABS(ZSMIN) .GT. RINMIN))
     *        THEN
                  WRITE(6,8340)
8340              FORMAT(//' ***WARNING IN SOURCE 3:'/ ' Source goes bey
     *ond RMAX_CM of smallest CM containing source'//)
                  WRITE(IOUTLIST,'(//'' ***WARNING IN SOURCE 3:''/
     *                      '' Source goes beyond RMAX_CM of smallest CM
     * containing source''//)')
              END IF
          END IF
          ZSOFST=0.5*(ZSMAX - ZSMIN)+ ZSMIN
          ZBEAM=0.5*(ZSMAX - ZSMIN)
      ELSE IF((ISOURC .EQ. 5)) THEN
          IF((RBEAM .GE. RINMAX))RBEAM=RINMAX
          RBEAM2 = RBEAM**2
          COSGAMMA = COS(GAMMA/57.29658)
          SINGAMMA = SQRT(1.0 - COSGAMMA**2)
      ELSE IF((ISOURC .EQ. 6)) THEN
          RBEAM=SQRT(XBEAM**2+YBEAM**2)
          IF ((RMAX_CM_FLAG(1) .EQ. 1)) THEN
              IF ((SQRT(XBEAM0**2+YBEAM0**2) .GT. RMAX_CM(1))) THEN
                  XBEAM0=0.
                  YBEAM0=0.
                  WRITE(6,8350)
8350              FORMAT(//' BEAM CENTRE IS OUTSIDE THE GEOMETRY RADIUS!
     *!!'/ ' BEAM CENTRE DEFAULTS TO (0.,0.). '///)
              END IF
          ELSE IF((RMAX_CM_FLAG(1) .EQ. 2)) THEN
              IF ((ABS(XBEAM0) .GT. RMAX_CM(1)) .OR. (ABS(YBEAM0) .GT. R
     *        MAX_CM(1))) THEN
                  XBEAM0=0.
                  YBEAM0=0.
                  WRITE(6,8360)
8360              FORMAT(//' BEAM CENTRE IS OUTSIDE THE GEOMETRY RADIUS!
     *!!'/ ' BEAM CENTRE DEFAULTS TO (0.,0.). '///)
              END IF
          END IF
          IF ((ABS(XBEAM0+XBEAM) .GT. RMAX_CM(1)) .OR. (ABS(XBEAM0-XBEAM
     *    ) .GT. RMAX_CM(1))) THEN
              XBEAM=RMAX_CM(1) - ABS(XBEAM0)
              WRITE(6,8370)XBEAM
8370          FORMAT(//' BEAM GOES BEYOND BOUNDARY OF CM!!'/ ' XBEAM RED
     *UCED TO ',F8.3,'cm.')
          END IF
          IF ((ABS(YBEAM0+YBEAM) .GT. RMAX_CM(1)) .OR. (ABS(YBEAM0-YBEAM
     *    ) .GT. RMAX_CM(1))) THEN
              YBEAM=RMAX_CM(1) - ABS(YBEAM0)
              WRITE(6,8380)YBEAM
8380          FORMAT(//' BEAM GOES BEYOND BOUNDARY OF CM!!'/ ' YBEAM RED
     *UCED TO ',F8.3,'cm.')
          END IF
          IFPB=0
      ELSE IF((ISOURC.EQ.21)) THEN
          IF ((i_iaea_in.EQ.1 .AND. IZSCORE.EQ.1 .AND. CMTYPE(INIT_ICM).
     *    NE.'SLABS' .AND. CMTYPE(INIT_ICM).NE.'FLATFILT' .AND. CMTYPE(I
     *    NIT_ICM).NE.'SIDETUBE')) THEN
              WRITE(6,8390)
8390          FORMAT(/' Warning in source 21: Z for each particle will b
     *e read'/ ' from the IAEA phase space data, but INIT_ICM is not set
     *'/ ' to a CM that can handle particles incident within it'/ ' (SLA
     *BS, FLATFILT or SIDETUBE).  Depending on the Z'/ ' of incident par
     *ticles, this may result in the'/ ' simulation stopping mid-run.'/)
          END IF
      ELSE IF((ISOURC .EQ. 22)) THEN
          RBEAM=SQRT(XBEAM**2+YBEAM**2)
          IF ((RMAX_CM_FLAG(1) .EQ. 1)) THEN
              IF ((SQRT(XBEAM0**2+YBEAM0**2) .GT. RMAX_CM(1))) THEN
                  XBEAM0=0.
                  YBEAM0=0.
                  WRITE(6,8400)
8400              FORMAT(//' BEAM CENTRE IS OUTSIDE THE GEOMETRY RADIUS!
     *!!'/ ' BEAM CENTRE DEFAULTS TO (0.,0.). '///)
              END IF
          ELSE IF((RMAX_CM_FLAG(1) .EQ. 2)) THEN
              IF ((ABS(XBEAM0) .GT. RMAX_CM(1)) .OR. (ABS(YBEAM0) .GT. R
     *        MAX_CM(1))) THEN
                  XBEAM0=0.
                  YBEAM0=0.
                  WRITE(6,8410)
8410              FORMAT(//' BEAM CENTRE IS OUTSIDE THE GEOMETRY RADIUS!
     *!!'/ ' BEAM CENTRE DEFAULTS TO (0.,0.). '///)
              END IF
          END IF
          IF ((ABS(XBEAM0+XBEAM) .GT. RMAX_CM(1)) .OR. (ABS(XBEAM0-XBEAM
     *    ) .GT. RMAX_CM(1))) THEN
              XBEAM=RMAX_CM(1) - ABS(XBEAM0)
              WRITE(6,8420)XBEAM
8420          FORMAT(//' BEAM GOES BEYOND BOUNDARY OF CM!!'/ ' XBEAM RED
     *UCED TO ',F8.3,'cm.')
          END IF
          IF ((ABS(YBEAM0+YBEAM) .GT. RMAX_CM(1)) .OR. (ABS(YBEAM0-YBEAM
     *    ) .GT. RMAX_CM(1))) THEN
              YBEAM=RMAX_CM(1) - ABS(YBEAM0)
              WRITE(6,8430)YBEAM
8430          FORMAT(//' BEAM GOES BEYOND BOUNDARY OF CM!!'/ ' YBEAM RED
     *UCED TO ',F8.3,'cm.')
          END IF
      ELSE IF((ISOURC .EQ. 7)) THEN
          IF ((RBEAM .GT. RINMAX)) THEN
              RBEAM=RINMAX
          END IF
          RBEAM2=RBEAM**2
      ELSE IF((ISOURC .EQ. 8)) THEN
          IF ((RBEAM .GT. RINMAX .OR. RBEAM.LE. 0)) THEN
              IF ((RBEAM .GT. RINMAX)) THEN
                  WRITE(6,8440)RINMAX
8440              FORMAT(//' BEAM GOES BEYOND BOUNDARY.'/ ' BEAM RADIUSR
     *EDUCED TO ',F8.3,'cm.'//)
              END IF
              RBEAM=RINMAX
          END IF
          RBEAM2=RBEAM**2
          IF ((RBEAM+RBEAM0 .GT. RINMAX)) THEN
              WRITE(6,8450)RBEAM0,RINMAX-RBEAM
8450          FORMAT(//' ****WARNING IN SOURCE 8'/ ' RBEAM+RBEAM0 goes b
     *eyond boundary of CM 1 '/ ' RBEAM0 reduced from ',F8.3,' cm to ',F
     *8.3,' cm.'//)
              WRITE(IOUTLIST,100)RBEAM0,RINMAX-RBEAM
100           FORMAT(//' ****WARNING IN SOURCE 8'/ ' RBEAM+RBEAM0 goes b
     *eyond boundary of CM 1 '/ ' RBEAM0 reduced from ',F8.3,' cm to ',F
     *8.3,' cm.'//)
              RBEAM0=RINMAX-RBEAM
          END IF
      ELSE IF((ISOURC .EQ. 9)) THEN
          IF ((RMAX_CM_FLAG(1) .EQ. 1)) THEN
              DO 8461 I=1,NPTS_SRC9
                  IF ((SQRT(X_SRC9(I)**2+Y_SRC9(I)**2) .GT. RINMAX)) THE
     *            N
                      WRITE(6,8470)I
8470                  FORMAT(//'***WARNING IN SOURCE 9:'/ 'Point ',I4,'g
     *oes beyond RINMAX.'//)
                      WRITE(IOUTLIST,'(//''***WARNING IN SOURCE 9:''/
     *                                  ''Point '',I4,'' goes beyond RIN
     *MAX.''//)') I
                  END IF
8461          CONTINUE
8462          CONTINUE
          ELSE IF((RMAX_CM_FLAG(1) .EQ. 2)) THEN
              DO 8481 I=1,NPTS_SRC9
                  IF ((ABS(X_SRC9(I)).GT.RINMAX .OR. ABS(Y_SRC9(I)).GT.R
     *            INMAX )) THEN
                      WRITE(6,8490)I
8490                  FORMAT(//'***WARNING IN SOURCE 9:'/ 'Point ',I4,'g
     *oes beyond RINMAX.'//)
                      WRITE(IOUTLIST,'(//''***WARNING IN SOURCE 9:''/
     *                                  ''Point '',I4,'' goes beyond RIN
     *MAX.''//)') I
                  END IF
8481          CONTINUE
8482          CONTINUE
          END IF
      ELSE IF((ISOURC .EQ. 10)) THEN
          IF ((RBEAM .GE. (Z_min_CM(2)-Z_min_CM(1))/2.)) THEN
              RBEAM=(Z_min_CM(2)-Z_min_CM(1))/2.
          END IF
          RBEAM2=RBEAM**2
      ELSE IF((ISOURC .EQ. 13)) THEN
          IF ((YBEAM .GE. (Z_min_CM(2)-Z_min_CM(1))/2.)) THEN
              YBEAM=(Z_min_CM(2)-Z_min_CM(1))/2.
          END IF
          IF ((ZBEAM .GE. (Z_min_CM(2)-Z_min_CM(1))/2.)) THEN
              ZBEAM=(Z_min_CM(2)-Z_min_CM(1))/2.
          END IF
      ELSE IF((ISOURC .EQ. 15)) THEN
          COSGAMMA=COS(GAMMA/57.29578)
          SINGAMMA = SIN(GAMMA/57.29578)
          WEIGHT=1.0
      ELSE IF((ISOURC .EQ. 18)) THEN
          IF ((RBEAM .GE. RINMAX)) THEN
              WRITE(6,8500)RBEAM,RINMAX
8500          FORMAT(//' ***WARNING IN SOURCE 18:'/ ' SIGMA OF INCIDENTB
     *EAM IS BEYOND BOUNDARY OF CM !' /' SIGMA REDUCED FROM ',F8.3,' cm 
     *TO ',F8.3,' cm.'//)
              WRITE(IOUTLIST,102)RBEAM,RINMAX
102           FORMAT(//' ***WARNING IN SOURCE 18:'/ ' SIGMA OF INCIDENTB
     *EAM IS BEYOND BOUNDARY OF CM !' /' SIGMA REDUCED FROM ',F8.3,' cm 
     *TO ',F8.3,' cm.'//)
              RBEAM=RINMAX
          END IF
          IFPB=0
          IF(((ISOURC .EQ. 18) .AND. (WINC .NE. 1.)))IFPB=1
          RBEAM2=RBEAM**2
      ELSE IF((ISOURC .EQ. 19)) THEN
          IF ((RBEAM .GE. RINMAX)) THEN
              WRITE(6,8510)RBEAM,RINMAX
8510          FORMAT(//' ***WARNING IN SOURCE 19:'/ ' SIGMA OF INCIDENTB
     *EAM IS BEYOND BOUNDARY OF CM !' /' SIGMA REDUCED FROM ',F8.3,' cm 
     *TO ',F8.3,' cm.'//)
              WRITE(IOUTLIST,103)RBEAM,RINMAX
103           FORMAT(//' ***WARNING IN SOURCE 19:'/ ' SIGMA OF INCIDENTB
     *EAM IS BEYOND BOUNDARY OF CM !' /' SIGMA REDUCED FROM ',F8.3,' cm 
     *TO ',F8.3,' cm.'//)
              RBEAM=RINMAX
          END IF
          IFPB=0
          IF(((ISOURC .EQ. 19) .AND. (WINC .NE. 1.)))IFPB=1
          RBEAM2=RBEAM**2
      ELSE IF((ISOURC .EQ. 23)) THEN
          WRITE(6,8520)'About to call init_beamsource'
8520      FORMAT(//a)
          call init_beamsource(i_parallel,n_parallel,i_log,'linux64', he
     *    n_house,egs_home,the_beam_code, the_pegs_file,the_input_file)
          call maxenergy_beamsource(EKMAXSRC)
      END IF
      RETURN
      END
      SUBROUTINE SRCOUT
      implicit none
      INTEGER I,lnblnk1
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/GEOM/ NREG
      INTEGER NREG
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/SOURCE/ COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,
     *COSTHETA,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SI
     *GN2,RIN1_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA
     *24, NNPHSP,NPHOTSRC,WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEA
     *M,YBEAM,ZBEAM,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL
     *2,PROBFC,PROBSD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z
     *_SOURCE,E_ph_sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT1
     *00,XSCAN_UNIT,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YIN
     *DEL, EKMAXSRC, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9, Y_SRC9, PR
     *OB_SRC9, ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN,RDISTF,RPDF,RCDF, F
     *NORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COSRNG,SINRNG,WEIGHTOLD,UINOL
     *D,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RSRC_DBS,SSDSRC_DBS,ZSRC_DBS
     *,sigma_src19,DIST24,ALPHA24,BETA24,RBEAMY, xo_src19, yo_src19, NRD
     *IST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p, NPASS_ph_s
     *p, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRATIO_YXF, OL
     *DSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUNT, IERROR,
     *RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB,MONOEN, NR
     *CYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE_FLAG, INIT
     *_ICMOLD,I_MUPHSP_IN,SPCNAM, the_beam_code,the_input_file,the_pegs_
     *file,SPEC_TITLE,phsp_open
      REAL*8 COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,COSTHETA
     *,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SIGN2,RIN1
     *_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA24
      integer*8 NNPHSP, NPHOTSRC
      real*8 WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEAM,YBEAM,ZBEAM
     *,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL2,PROBFC,PROB
     *SD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z_SOURCE,E_ph_
     *sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT100,XSCAN_UNIT
     *,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YINDEL, EKMAXSRC
     *, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9(10), Y_SRC9(10), PROB_SR
     *C9(10), ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN(1000,2),RDISTF(1000)
     *, RPDF(1000),RCDF(1000), FNORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COS
     *RNG,SINRNG,WEIGHTOLD,UINOLD,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RS
     *RC_DBS,SSDSRC_DBS,ZSRC_DBS,sigma_src19,DIST24,ALPHA24,BETA24,RBEAM
     *Y, xo_src19, yo_src19
      INTEGER NRDIST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p,
     * NPASS_ph_sp, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRA
     *TIO_YXF, OLDSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUN
     *T, IERROR, RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB
     *,MONOEN, NRCYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE
     *_FLAG, INIT_ICMOLD,I_MUPHSP_IN
      CHARACTER*256 SPCNAM
      CHARACTER*80 the_beam_code,the_input_file,the_pegs_file,SPEC_TITLE
      logical phsp_open
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/ENERGYSRC/NENSRC,IMODE,ENSRCD,SRCPDF,SRCCDF,ENMIN,CDFINV, D
     *ELTAK,IB, FILNAM
      real*8 ENSRCD(240),SRCPDF(240),SRCCDF(240),ENMIN, CDFINV(1000,2),D
     *ELTAK
      INTEGER IMODE,NENSRC,IB
      CHARACTER*256 FILNAM
      WRITE(IOUTLIST,500)
500   FORMAT(' ',79('*')/T30,'SOURCE PARAMETERS'/)
      IF ((ISOURC .LT. 21 .OR. ISOURC.EQ.22)) THEN
          IF ((IQIN .EQ. 0)) THEN
              WRITE(IOUTLIST,505)
          ELSE IF((IQIN .EQ. -1)) THEN
              WRITE(IOUTLIST,506)
          ELSE IF((IQIN .EQ. +1)) THEN
              WRITE(IOUTLIST,507)
          END IF
      END IF
502   FORMAT(T20,'INITIAL PARTICLES are electrons and positrons')
503   FORMAT(T20,'INITIAL PARTICLES are photons and positrons')
504   FORMAT(T20,'INITIAL PARTICLES are electrons, photons and positrons
     *')
505   FORMAT(T20,'INITIAL PARTICLES are Photons')
506   FORMAT(T20,'INITIAL PARTICLES are Electrons')
507   FORMAT(T20,'INITIAL PARTICLES are Positrons')
      IF ((ISOURC .EQ. 0)) THEN
          WRITE(IOUTLIST,510) Z_SOURCE,RBEAM,UINC,VINC,WINC
510       FORMAT(T20,'PARALLEL BEAM ON FRONT FACE at Z=',F9.4,' cm'/ T20
     *,'Beam radius=',F9.4,' cm'/ T17,' X,Y,Z DIRECTION COSINES = (',3(F
     *10.5),')')
      ELSE IF((ISOURC .EQ. 1)) THEN
          WRITE(IOUTLIST,520) DISTZ, Z_SOURCE
520       FORMAT(T5,'Point source on beam (Z) axis',F8.2, ' cm from FIRS
     *T CM, '/ T5,'Front surface of CM at Z=',F9.4,' cm')
          IF ((RBEAM.LT.0.)) THEN
              WRITE(IOUTLIST,523)XINL,XINU,YINL,YINU
523           FORMAT(T5,'Collimated to rectangle with:'/ T5,'   X dimens
     *ions: ',F8.3,' - ',F8.3,' cm'/ T5,'   Y dimensions: ',F8.3,' - ',F
     *8.3,' cm')
          ELSE
              IF ((GAMMA .NE. 0.0)) THEN
                  WRITE(IOUTLIST,521) GAMMA
521               FORMAT(T5,' Half-angle of source=',F10.5,' degrees')
              ELSE
                  WRITE(IOUTLIST,522) RBEAM
522               FORMAT(T5,'Beam collimated to radius =',F8.3,' cm')
              END IF
          END IF
      ELSE IF((ISOURC .EQ. 3)) THEN
          IF ((RBEAM.GE.0)) THEN
              WRITE(IOUTLIST,525) ZSMIN,ZSMAX,RMINBM,RBEAM,MIN_CM_SRC3,M
     *        AX_CM_SRC3
          ELSE
              WRITE(IOUTLIST,526) ZSMIN,ZSMAX,RMINBM,ABS(RBEAM), MIN_CM_
     *        SRC3,MAX_CM_SRC3
          END IF
525       FORMAT(T5,'UNIFORM ISOTROPICALLY RADIATING RING CENTRED ON Z-A
     *XIS'/ T5,'SOURCE SPANS FROM Z=',F10.4,' cm to Z=',F10.4,' cm'/ T5,
     *'INNER RADIUS=',F10.4,' cm'/ T5,'OUTER RADIUS=',F10.4,' cm'/ T5,'S
     *OURCE IS WITHIN CM(s)',I4,' -',I4)
526       FORMAT (T5,'UNIFORM ISOTROPICALLY RADIATING CYLINDER CENTRED |
     *| TO X-AXIS'/ T5,'SOURCE SPANS FROM X=',F10.4,' cm to X=',F10.4,'c
     *m'/ T5,'Z OF THE SOURCE CENTRE=',F10.4,' cm'/ T5,'RADIUS=',F10.4,'
     * cm'/ T5,'SOURCE IS WITHIN CM(s)',I4,' -',I4)
      ELSE IF((ISOURC .EQ. 5)) THEN
          WRITE(IOUTLIST,530) GAMMA,RBEAM,Z_SOURCE
530       FORMAT(T5,'NRC swept beam  with half angle of ',F8.2, ' degree
     *s '/ T5,'BEAM SPOT RADIUS =',F8.3,' cm at Z=',F9.4,' cm')
      ELSE IF((ISOURC .EQ. 6)) THEN
          WRITE(IOUTLIST,516) Z_SOURCE,XBEAM0,YBEAM0,XBEAM,YBEAM
516       FORMAT(T5,'PARALLEL RECTANGULAR BEAM ON FRONT FACE at Z=', F9.
     *4,' cm'/ T5,'CENTRED AT (Xh,Yh) = (',2F9.4,')'/ T5,' HALF-WIDTH IN
     * X DIRECTION:',F10.4,' cm'/ T5,' HALF-WIDTH IN Y DIRECTION:',F10.4
     *,' cm'/)
      ELSE IF((ISOURC .EQ. 7)) THEN
          WRITE(IOUTLIST,537) FD_AT100, IRATIO_YXF, RBEAM
537       FORMAT(T5, ' SCANNING BEAM WITH FIELD SIZE AT SSD=100 : ', F15
     *.7, T5, /'          THE FREQUENCY 2*RATION BETWEEN Y/X: ', I5,T5, 
     */'          THE SPOT SIZE AT THE INITIAL POINT:', F15.7)
      ELSE IF((ISOURC .EQ. 8)) THEN
          WRITE(IOUTLIST,538) DISTZ, Z_SOURCE
538       FORMAT(T5,'MM50 point scanned uniform circular source SSD',F8.
     *2, ' cm from first CM, '/ T5,'Front surface of CM(1) at Z=',F9.4,'
     * cm')
          IF ((GAMMA .NE. 0.0)) THEN
              WRITE(IOUTLIST,521) GAMMA
          ELSE
              WRITE(IOUTLIST,522) RBEAM
          END IF
          WRITE(IOUTLIST,536) RBEAM0
536       FORMAT(T5,'Beam spot radius at Z=0 is ',F8.5,' cm')
      ELSE IF((ISOURC .EQ. 9)) THEN
          WRITE(IOUTLIST,539) NPTS_SRC9, DISTZ, Z_SOURCE
539       FORMAT(T5,'MM50 scanned point source with',I4,' discrete point
     *s at SSD'/ T5,'SSD=',F8.2,' cm, '/ T5,'Front surface of CM(1) at Z
     *=',F9.4,' cm'/ T5,'(X,Y,PROBABILITY) of each point at SSD:')
          DO 8531 I=1,NPTS_SRC9
              IF ((I.GT.1)) THEN
                  WRITE(IOUTLIST,'(T10,3F10.4)') X_SRC9(I),Y_SRC9(I),PRO
     *            B_SRC9(I)-PROB_SRC9(I-1)
              ELSE
                  WRITE(IOUTLIST,'(T10,3F10.4)') X_SRC9(I),Y_SRC9(I),PRO
     *            B_SRC9(I)
              END IF
8531      CONTINUE
8532      CONTINUE
      ELSE IF((ISOURC .EQ. 10)) THEN
          WRITE(IOUTLIST,511) RBEAM,UINC,VINC,WINC
511       FORMAT(T20,'PARALLEL CIRCULAR BEAM FROM SIDE, RADIUS=',F8.3,'c
     *m'/ T17,' X,Y,Z DIRECTION COSINES = (',3(F10.4),')')
      ELSE IF((ISOURC .EQ. 13)) THEN
          WRITE(IOUTLIST,512) YBEAM,ZBEAM,UINC,VINC,WINC
512       FORMAT(T20,'PARALLEL RECTANGULAR BEAM FROM SIDE'/ T20,'HALF-WI
     *DTH(Y)=',F8.3,'cm, HALF-HEIGHT(Z)=',F8.3,' cm'/ T17,' X,Y,Z DIRECT
     *ION COSINES = (',3(F10.4),')')
      ELSE IF((ISOURC .EQ. 15)) THEN
          WRITE(IOUTLIST,540) GAMMA,ZFOCUS,THETAIN,RTHETAIN,SPCNAM
540       FORMAT(T5, 'NRC SWEPT BEAM WITH DIVERGENCE AND RADIAL INTENSIT
     *Y DISTRIBUTION'/ T5,'                     HALF ANGLE OF SWEPT CONE
     * = ',F10.4,' degrees'/ T5,'                            Z OF APEX O
     *F CONE = ',F10.4,' cm'/ T5,'                        BEAM DIVERGENC
     *E ANGLE = ',F10.4,' degrees'/ T5,'RADIUS AT WHICH BEAM DIVERGENCEA
     *NGLE DEFINED = ',F10.4,' cm'// T5,'FILE CONTAINING RADIAL INTENSIT
     *Y DISTRIBUTION:'/A// T5,'RADIAL INTENSITY DISTRIBTION...'// T5,'  
     *  bin     upper radius            '/ T5,'      #          (cm)    
     *   prob.  '/)
          DO 8541 IB20=1,NRDIST
              WRITE(IOUTLIST,541)IB20,RDISTF(IB20),RPDF(IB20)
541           FORMAT(T5,I7,F17.8,E14.5)
8541      CONTINUE
8542      CONTINUE
      ELSE IF((ISOURC .EQ. 18)) THEN
          WRITE(IOUTLIST,513) Z_SOURCE,RBEAM,RBEAM/0.42466, UINC,VINC,WI
     *    NC
513       FORMAT(T20,'PARALLEL BEAM WITH GAUSSIAN RADIAL DISTRIBUTION'/T
     *20,'ON FRONT FACE at Z=',F9.4,' cm'/ T20,'BEAM SIGMA=',F9.4,' cm (
     *FWHM=',F9.4,' cm)'/ T17,' X,Y,Z DIRECTION COSINES = (',3(F10.5),')
     *')
      ELSE IF((ISOURC .EQ. 19)) THEN
          WRITE(IOUTLIST,514) Z_SOURCE,RBEAM,RBEAM/0.42466, UINC,VINC,WI
     *    NC
514       FORMAT(T20,'PARALLEL BEAM WITH 2-D GAUSSIAN X-Y DISTRIBUTION'/
     *T20,'ON FRONT FACE at Z=',F9.4,' cm'/ T20,'BEAM SIGMA=',F9.4,' cm 
     *(FWHM=',F9.4,' cm)'/ T17,' X,Y,Z DIRECTION COSINES = (',3(F10.5),'
     *)')
      ELSE IF((ISOURC .EQ. 21 .OR. ISOURC.EQ.24)) THEN
          WRITE(IOUTLIST,640) SPCNAM,Z_SOURCE,INIT_ICM,NNPHSP, NPHOTSRC,
     *    EKMAXSRC, EKMINSRCE,NINCSRC,NRCYCL
640       FORMAT(T20,'FULL PHASE SPACE INPUT FOR EACH INCIDENT PARTICLE.
     * '/ T5,' SOURCE DATA FILE: ',A/ T5,'             SOURCE INCIDENT O
     *N FRONT FACE, Z =',F13.2,' cm'/ T5,'                SOURCE INCIDEN
     *T ON MODULE ICM =',I13, / T5,'             Total # of particles in
     * the file =',I13,/ T5,'                     # of photons in the fi
     *le =',I13,/ T5,'                  Maximum energy of particles =',F
     *13.3,' MeV'/ T5,'                  Minimum energy of electrons =',
     *F13.3,' MeV'/ T5,' # of particles incident from original source ='
     *,F13.1/ T5,'    # of times each particle will be recycled =',I13,/
     *)
          IF ((ISOURC.EQ.24)) THEN
              WRITE(IOUTLIST,647)ALPHA24,BETA24,DIST24
647           FORMAT(T5, ' Phase space plane incident from user-specifie
     *d direction (Source 24):'/ T5,'                angle of rotation w
     *rt the X-axis =',F8.3,' degrees'/ T5,'                angle of rot
     *ation wrt the Y-axis =',F8.3,' degrees'/ T5,' distance of point of
     * rotation above incident CM =',F8.3,' cm'/)
          END IF
          IF ((ISRC_DBS.EQ.1)) THEN
              WRITE(IOUTLIST,644)RSRC_DBS,SSDSRC_DBS,ZSRC_DBS
644           FORMAT(T5,' Directional Bremsstrahlung Splitting (DBS) use
     *d'/ T5,' in BEAM simulation to generate phase space source with:'/
     *T10,'    DBS splitting radius =',F10.4,' cm'/ T10,'SSD where radiu
     *s defined =',F10.4,' cm'/ T10,'   Z where source scored =',F10.4, 
     *'cm'/ T5,' Photons whose trajectory takes them outside the DBS spl
     *itting'/ T5,' radius at the SSD will be rejected.'/)
          END IF
          IF ((IPARALLEL.GT.1 .AND. PARNUM.GT.0)) THEN
              WRITE(IOUTLIST,643) IPARALLEL,INT((PARNUM-1)*NNPHSP/IPARAL
     *        LEL)+1, INT(PARNUM*NNPHSP/IPARALLEL)
643           FORMAT( T5,' This is one of ',I4, ' parallel runs and will
     * use from'/ T5,' particle ',I12,' to particle ',I12,' in phase spa
     *ce source'/)
          END IF
      ELSE IF((ISOURC .EQ. 23)) THEN
          WRITE(IOUTLIST,646) Z_SOURCE,INIT_ICM, the_beam_code(:lnblnk1(
     *    the_beam_code)), the_input_file(:lnblnk1(the_input_file)), the
     *    _pegs_file(:lnblnk1(the_pegs_file)), EKMAXSRC,ALPHA24,BETA24,D
     *    IST24
646       FORMAT(T20,'BEAM SIMULATION SOURCE. '/ T5,'             SOURCE
     * INCIDENT ON FRONT FACE, Z =',F13.2,' cm'/ T5,'                SOU
     *RCE INCIDENT ON MODULE ICM =',I13, / T32,'BEAMnrc simulation:  ',A
     */ T40,'input file:  ',A/ T36,'pegs data file:  ',A/ T23,'Maximum e
     *nergy of particles =',F13.3,' MeV'/ T5,' angle of rotation of sour
     *ce plane wrt the X-axis =',F8.3,' degrees'/ T5,' angle of rotation
     * of source plane wrt the Y-axis =',F8.3,' degrees'/ T5,'  distance
     * of point of rotation above incident CM =',F8.3,' cm'/)
          IF ((ISRC_DBS.EQ.1)) THEN
              WRITE(IOUTLIST,645)
645           FORMAT(T5,' Fat photons from DBS will be rejected.'/)
          END IF
      END IF
      IF ((MONOEN.EQ.0.AND.ISOURC.NE.31)) THEN
          WRITE(IOUTLIST,641) EIN
641       FORMAT(/T20,'KINETIC ENERGY OF SOURCE =',F10.3,' MeV')
      ELSE IF((MONOEN.EQ.1)) THEN
          WRITE(IOUTLIST,642) FILNAM, ENMIN, ENSRCD(NENSRC), NENSRC
          IF ((IMODE.EQ.0)) THEN
              WRITE(IOUTLIST,'(T20,''FILE CONTAINS COUNTS/BIN'')')
          ELSE IF((IMODE.EQ.1)) THEN
              WRITE(IOUTLIST,'(T20,''FILE CONTAINS COUNTS/MeV'')')
          END IF
642       FORMAT(/T20,'INCIDENT ENERGY SPECTRUM READ FROM:'/A/ T20,'MINI
     *MUM KINETIC ENERGY OF SPECTRUM = ',F10.3,' MeV'/ T20,'MAXIMUM KINE
     *TIC ENERGY OF SPECTRUM = ',F10.3,' MeV'/ T20,'        NUMBER OF BI
     *NS IN SPECTRUM = ',I10)
      END IF
      RETURN
      END
      SUBROUTINE SRCHST(XIN,YIN,ZIN,UIN,VIN,WIN,IRIN,WEIGHT)
      implicit none
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/GEOM/ NREG
      INTEGER NREG
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/SOURCE/ COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,
     *COSTHETA,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SI
     *GN2,RIN1_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA
     *24, NNPHSP,NPHOTSRC,WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEA
     *M,YBEAM,ZBEAM,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL
     *2,PROBFC,PROBSD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z
     *_SOURCE,E_ph_sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT1
     *00,XSCAN_UNIT,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YIN
     *DEL, EKMAXSRC, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9, Y_SRC9, PR
     *OB_SRC9, ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN,RDISTF,RPDF,RCDF, F
     *NORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COSRNG,SINRNG,WEIGHTOLD,UINOL
     *D,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RSRC_DBS,SSDSRC_DBS,ZSRC_DBS
     *,sigma_src19,DIST24,ALPHA24,BETA24,RBEAMY, xo_src19, yo_src19, NRD
     *IST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p, NPASS_ph_s
     *p, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRATIO_YXF, OL
     *DSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUNT, IERROR,
     *RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB,MONOEN, NR
     *CYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE_FLAG, INIT
     *_ICMOLD,I_MUPHSP_IN,SPCNAM, the_beam_code,the_input_file,the_pegs_
     *file,SPEC_TITLE,phsp_open
      REAL*8 COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,COSTHETA
     *,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SIGN2,RIN1
     *_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA24
      integer*8 NNPHSP, NPHOTSRC
      real*8 WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEAM,YBEAM,ZBEAM
     *,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL2,PROBFC,PROB
     *SD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z_SOURCE,E_ph_
     *sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT100,XSCAN_UNIT
     *,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YINDEL, EKMAXSRC
     *, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9(10), Y_SRC9(10), PROB_SR
     *C9(10), ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN(1000,2),RDISTF(1000)
     *, RPDF(1000),RCDF(1000), FNORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COS
     *RNG,SINRNG,WEIGHTOLD,UINOLD,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RS
     *RC_DBS,SSDSRC_DBS,ZSRC_DBS,sigma_src19,DIST24,ALPHA24,BETA24,RBEAM
     *Y, xo_src19, yo_src19
      INTEGER NRDIST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p,
     * NPASS_ph_sp, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRA
     *TIO_YXF, OLDSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUN
     *T, IERROR, RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB
     *,MONOEN, NRCYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE
     *_FLAG, INIT_ICMOLD,I_MUPHSP_IN
      CHARACTER*256 SPCNAM
      CHARACTER*80 the_beam_code,the_input_file,the_pegs_file,SPEC_TITLE
      logical phsp_open
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/RWPHSP/ STRING_TEMP_ZLAST_OUT,  STRING_TEMP_OUT,  IHSTRY_PH
     *SP,   iaea_dummy_long,  NHSTRY_DOS,   ESHORT,  WEIGHTTMP,  WT_PHSP
     *_SHORT,  X_PHSP_SHORT,  Y_PHSP_SHORT,  Z_PHSP_SHORT,  U_PHSP_SHORT
     *,  V_PHSP_SHORT,  W_PHSP_SHORT,  ZLAST_PHSP_SHORT,  MUIDX_PHSP_SHO
     *RT,  EKMAX_PHSP_SHORT,  EKMINE_PHSP_SHORT,  NINC_PHSP_SHORT,  dosx
     *yz2beam_index,  iaea_extra_floats,  NUM_PHSP_TOT,  PHOT_PHSP_TOT,
     *iaea_result,   iaea_n_stat,  iaea_q_typ,  iaea_typ_q,  iaea_q_inde
     *x,  I_PHSP,  IERR_PHSP,  LATCHTMP,  WRITE_PHSP_COUNTER,  WRITE_PHS
     *P_SOFAR,  PHSP_RESTART,  PHSP_RECL,  PHSP_RECL_OLD,  iaea_extra_in
     *ts,  iaea_extra_int_types,iaea_extra_float_types,   iaea_i_zlast,
     * iaea_i_latch,  iaea_i_muidx,  iaea_n_extra_ints,  iaea_n_extra_fl
     *oats,  i_iaea_open_for_write,   iaea_i_zlast_out,  iaea_i_latch_ou
     *t,  iaea_i_muidx_out,  dosxyz2beam_izscore,  MODE_RW
      CHARACTER*32000 STRING_TEMP_ZLAST_OUT(3)
      CHARACTER*28000 STRING_TEMP_OUT(3)
      integer*8 IHSTRY_PHSP(3),iaea_dummy_long,NHSTRY_DOS
      REAL*4 ESHORT,WEIGHTTMP,WT_PHSP_SHORT,X_PHSP_SHORT,Y_PHSP_SHORT, Z
     *_PHSP_SHORT,U_PHSP_SHORT, V_PHSP_SHORT,W_PHSP_SHORT,ZLAST_PHSP_SHO
     *RT, MUIDX_PHSP_SHORT, EKMAX_PHSP_SHORT,EKMINE_PHSP_SHORT,NINC_PHSP
     *_SHORT,dosxyz2beam_index, iaea_extra_floats(10)
      INTEGER NUM_PHSP_TOT,PHOT_PHSP_TOT, iaea_result,iaea_n_stat,iaea_q
     *_typ(3),iaea_typ_q(3),iaea_q_index,I_PHSP, IERR_PHSP,LATCHTMP, WRI
     *TE_PHSP_COUNTER(3),WRITE_PHSP_SOFAR(3), PHSP_RESTART,PHSP_RECL,PHS
     *P_RECL_OLD,iaea_extra_ints(10), iaea_extra_int_types(10),iaea_extr
     *a_float_types(10),iaea_i_zlast, iaea_i_latch,iaea_i_muidx,iaea_n_e
     *xtra_ints,iaea_n_extra_floats, i_iaea_open_for_write,iaea_i_zlast_
     *out,iaea_i_latch_out, iaea_i_muidx_out,dosxyz2beam_izscore
      CHARACTER*5 MODE_RW
      INTEGER LATCH_TEMP_OUT,NUM_PHSP_TOFLUSH,TEMP_PHSP_COUNTER,REM_PHSP
      REAL*4 REAL_TEMP_OUT(7)
      CHARACTER*32 REC_TEMP_OUT
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      INTEGER IDIR,   IRIN,  IND_SCAN,  I
      real*8 DIST_RAY,  R2,  WEIGHT,  UIN,VIN,WIN, XIN,YIN,ZIN, XINPP,YI
     *NPP,XINP,YINP,    ZZZ,RNG,  DELX,DELY,  PHI, DISTSRC_DBS,  RXYZ,FW
     *,  rand_dsb,  TEMP
      real*8 x_dsb, y_dsb, z_dsb, u_dsb(1000), v_dsb(1000),w_dsb(1000),
     *wt_dsb(1000),wthin,xj,yj,disti,tcheck
      integer*4 phat_dsb(1000),np_dsb,nthin,phatj,j
      logical take_it
      DOUBLE PRECISION COS_THETA,SIN_THETA
      DOUBLE PRECISION EREAD
      data np_dsb/0/
      save x_dsb, y_dsb, z_dsb, u_dsb, v_dsb, w_dsb, wt_dsb, phat_dsb, n
     *p_dsb
      weight = 1
      IF ((dosxyz2beam_index.LT.0)) THEN
          GOTO 8550
      END IF
      IF ((ISOURC .EQ. 0)) THEN
          IF ((RBEAM .EQ. 0.0)) THEN
              XIN=0.0
              YIN=0.0
          ELSE
8561          CONTINUE
                  IF((rng_seed .GT. 128))call ranmar_get
                  XIN = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  XIN=(2.0*XIN-1.0)*RBEAM
                  IF((rng_seed .GT. 128))call ranmar_get
                  YIN = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  YIN=(2.0*YIN-1.0)*RBEAM
                  R2=XIN**2+YIN**2
                  IF((R2 .LE. RBEAM2))GO TO8562
              GO TO 8561
8562          CONTINUE
          END IF
          IF ((IFPB .EQ. 0)) THEN
              WIN=1.0
              UIN=0.0
              VIN=0.0
          ELSE
              UIN=UINC
              VIN=VINC
              WIN=WINC
          END IF
          ZIN=Z_SOURCE
          ICM = 1
          IDIR = 1
      ELSE IF((ISOURC .EQ. 1)) THEN
          IF ((RBEAM .GE. 0.0)) THEN
              IF((rng_seed .GT. 128))call ranmar_get
              RNG = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              COS_THETA = 1D0 - RNG* ONEMCOSGAM
              SIN_THETA = DSQRT(1D0 - COS_THETA**2)
              IF((rng_seed .GT. 128))call ranmar_get
              PHI = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              PHI = 6.283185308*PHI
              UIN = SIN_THETA*COS(PHI)
              VIN = SIN_THETA*SIN(PHI)
              WIN = COS_THETA
              IF ((WIN .NE. 0.0)) THEN
                  ZZZ = DISTZ/WIN
                  XIN = ZZZ * UIN
                  YIN = ZZZ * VIN
              ELSE
                  WRITE(6,8570)
8570              FORMAT(///' ****Initial particle will not hit target**
     **'//)
                  call exit(1)
              END IF
          ELSE
8581          CONTINUE
                  IF((rng_seed .GT. 128))call ranmar_get
                  RNG = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  XIN=RNG*XINDEL+XINL
                  IF((rng_seed .GT. 128))call ranmar_get
                  RNG = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  YIN=RNG*YINDEL+YINL
                  IF((rng_seed .GT. 128))call ranmar_get
                  RNG = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  RXYZ=SQRT(DISTZ*DISTZ+XIN*XIN+YIN*YIN)
                  WIN=DISTZ/RXYZ
                  IF((XINDEL.EQ.0. .AND. YINDEL.EQ.0.))GOTO 8590
                  FW=WIN**3.
                  IF((RNG.LT.FW))GOTO 8590
              GO TO 8581
8582          CONTINUE
8590          CONTINUE
              UIN=XIN/RXYZ
              VIN=YIN/RXYZ
          END IF
          ZIN=Z_SOURCE
          ICM = 1
          IDIR = 1
      ELSE IF((ISOURC .EQ. 3)) THEN
8600      CONTINUE
          IF ((RBEAM.GE.0)) THEN
              IF((rng_seed .GT. 128))call ranmar_get
              ZIN = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              ZIN=ZSOFST+(2.0*ZIN-1.0)*ZBEAM
              IF ((RBEAM .LT. 1.E-4)) THEN
                  XIN=0
                  YIN=0
              ELSE IF((ABS(RBEAM-RMINBM) .LT. 1.E-4)) THEN
                  IF((rng_seed .GT. 128))call ranmar_get
                  XIN = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  XIN=TWOPI*XIN
                  YIN=RBEAM*SIN(XIN)
                  XIN=RBEAM*COS(XIN)
              ELSE
8611              CONTINUE
                      IF((rng_seed .GT. 128))call ranmar_get
                      XIN = rng_array(rng_seed)*twom24
                      rng_seed = rng_seed + 1
                      XIN=(2.0*XIN-1.0)*RBEAM
                      IF((rng_seed .GT. 128))call ranmar_get
                      YIN = rng_array(rng_seed)*twom24
                      rng_seed = rng_seed + 1
                      YIN=(2.0*YIN-1.0)*RBEAM
                      R2=XIN**2+YIN**2
                      IF(((R2 .LE. RBEAM2 .AND. R2 .GE. RMINSQ)))GO TO86
     *                12
                  GO TO 8611
8612              CONTINUE
              END IF
          ELSE
              IF((rng_seed .GT. 128))call ranmar_get
              XIN = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              XIN=ZSOFST+(2.0*XIN-1.0)*ZBEAM
              IF ((ABS(RBEAM).LT.1.E-4)) THEN
                  YIN=0
                  ZIN=RMINBM
              ELSE
8621              CONTINUE
                      IF((rng_seed .GT. 128))call ranmar_get
                      ZIN = rng_array(rng_seed)*twom24
                      rng_seed = rng_seed + 1
                      ZIN=(2.0*ZIN-1.0)*ABS(RBEAM)
                      IF((rng_seed .GT. 128))call ranmar_get
                      YIN = rng_array(rng_seed)*twom24
                      rng_seed = rng_seed + 1
                      YIN=(2.0*YIN-1.0)*ABS(RBEAM)
                      R2=ZIN**2+YIN**2
                      IF(((R2 .LE. RBEAM2)))GO TO8622
                  GO TO 8621
8622              CONTINUE
                  ZIN=RMINBM+ZIN
              END IF
          END IF
          IF (( i_dsb .EQ. 1 )) THEN
              IF (( np_dsb .LT. 1 )) THEN
                  x_dsb = xin
                  y_dsb = yin
                  z_dsb = zin
                  wthin = fs*fs*dsb_aeff*nbrspl/(2*(ssd-zin))**2
                  nthin = wthin
                  wthin = wthin - nthin
                  IF((rng_seed .GT. 128))call ranmar_get
                  rand_dsb = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  IF((rand_dsb .LT. wthin))nthin = nthin + 1
8631              CONTINUE
                      nhstry = nhstry + 1
                      IF((rng_seed .GT. 128))call ranmar_get
                      costhe = rng_array(rng_seed)*twom24
                      rng_seed = rng_seed + 1
                      costhe = 2*costhe-1
                      sinthe = 1 - costhe**2
                      IF (( sinthe .GT. 0 )) THEN
                          sinthe = sqrt(sinthe)
                      ELSE
                          sinthe = 0
                      END IF
                      IF((rng_seed .GT. 128))call ranmar_get
                      phi = rng_array(rng_seed)*twom24
                      rng_seed = rng_seed + 1
                      phi = twopi*phi
                      uin = sinthe*cos(phi)
                      vin = sinthe*sin(phi)
                      win = costhe
                      take_it = .true.
                      IF (( win .GT. 0 )) THEN
                          tcheck = (ssd-zin)/win
                          IF (( (xin+uin*tcheck)**2+(yin+vin*tcheck)**2
     *                    .LT. fs*fs )) THEN
                              take_it = .false.
                          END IF
                      END IF
                      np_dsb = 0
                      IF (( take_it )) THEN
                          u_dsb(1) = uin
                          v_dsb(1) = vin
                          w_dsb(1) = win
                          wt_dsb(1) = 1
                          phat_dsb(1) = nbrspl
                          np_dsb = 1
                      END IF
                      DO 8641 j=1,nthin
                          IF (( dsb_nbin .GT. 1 )) THEN
                              call dsb_get_point(fs,dsb_nbin,dsb_rbin,ds
     *                        b_prob, dsb_ibin,xj,yj,phatj)
                          ELSE
8651                          CONTINUE
                                  IF((rng_seed .GT. 128))call ranmar_get
                                  xj = rng_array(rng_seed)*twom24
                                  rng_seed = rng_seed + 1
                                  xj = 2*xj-1
                                  IF((rng_seed .GT. 128))call ranmar_get
                                  yj = rng_array(rng_seed)*twom24
                                  rng_seed = rng_seed + 1
                                  yj = 2*yj-1
                                  IF((( xj*xj + yj*yj .LT. 1 )))GO TO865
     *                            2
                              GO TO 8651
8652                          CONTINUE
                              phatj = 1
                              xj = xj*fs
                              yj = yj*fs
                          END IF
                          uin = xj-xin
                          vin = yj-yin
                          win = ssd-zin
                          disti = 1/sqrt(uin**2+vin**2+win**2)
                          IF((rng_seed .GT. 128))call ranmar_get
                          rand_dsb = rng_array(rng_seed)*twom24
                          rng_seed = rng_seed + 1
                          win = win*disti
                          IF (( rand_dsb .LT. win**3 )) THEN
                              uin = uin*disti
                              vin = vin*disti
                              np_dsb = np_dsb + 1
                              IF (( np_dsb .GT. 1000 )) THEN
                                  write(i_log,'(/a)') '*****************
     * Error: '
                                  write(i_log,*) 'In SRCHST number of st
     *ored particle ', 'directions exceeds ',1000, ' Increase $DSB_MAX_P
     *ARTICLE and retry'
                                  write(i_log,'(/a)') '*****************
     * Quiting now.'
                                  call exit(1)
                              END IF
                              u_dsb(np_dsb) = uin
                              v_dsb(np_dsb) = vin
                              w_dsb(np_dsb) = win
                              phat_dsb(np_dsb) = phatj
                              wt_dsb(np_dsb) = dble(phatj)/nbrspl
                          END IF
8641                  CONTINUE
8642                  CONTINUE
                      IF(((np_dsb .GT. 0)))GO TO8632
                  GO TO 8631
8632              CONTINUE
              END IF
              xin = x_dsb
              yin = y_dsb
              zin = z_dsb
              uin = u_dsb(np_dsb)
              vin = v_dsb(np_dsb)
              win = w_dsb(np_dsb)
              weight = wt_dsb(np_dsb)
              iphati = phat_dsb(np_dsb)
              np_dsb = np_dsb - 1
          ELSE
              IF((rng_seed .GT. 128))call ranmar_get
              COSTHE = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              COSTHE=2.*COSTHE-1
              SINTHE=SQRT(1.0-COSTHE**2)
              IF((rng_seed .GT. 128))call ranmar_get
              PHI = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              PHI=TWOPI*PHI
              UIN=SINTHE*COS(PHI)
              VIN=SINTHE*SIN(PHI)
              WIN=COSTHE
              WEIGHT=1.0
          END IF
          DO 8661 I=1,MAX_CMs
              IF ((ZIN .LT. Z_min_CM(I+1))) THEN
                  ICM=I
                  GO TO8662
              END IF
8661      CONTINUE
8662      CONTINUE
          IDIR=2
          IAUSFL(6)=0
      ELSE IF((ISOURC .EQ. 5)) THEN
8671      CONTINUE
              IF((rng_seed .GT. 128))call ranmar_get
              XIN = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              XIN=(2.0*XIN-1.0)*RBEAM
              IF((rng_seed .GT. 128))call ranmar_get
              YIN = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              YIN=(2.0*YIN-1.0)*RBEAM
              R2=XIN**2+YIN**2
              IF((R2 .LE. RBEAM2))GO TO8672
          GO TO 8671
8672      CONTINUE
          ZIN=Z_SOURCE
          ICM = 1
          IDIR = 1
          WIN = COSGAMMA
          IF((rng_seed .GT. 128))call ranmar_get
          RNG = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          RNG = TWOPI*RNG
          UIN = COS(RNG)*SINGAMMA
          VIN = SIN(RNG)*SINGAMMA
      ELSE IF((ISOURC .EQ. 6)) THEN
          IF ((RBEAM .EQ. 0.0)) THEN
              XIN=XBEAM0
              YIN=YBEAM0
          ELSE
              IF((rng_seed .GT. 128))call ranmar_get
              XIN = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              XIN=(2.0*XIN-1.0)*XBEAM+XBEAM0
              IF((rng_seed .GT. 128))call ranmar_get
              YIN = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              YIN=(2.0*YIN-1.0)*YBEAM+YBEAM0
          END IF
          UIN=UINC
          VIN=VINC
          WIN=WINC
          ZIN=Z_SOURCE
          ICM = 1
          IDIR = 1
      ELSE IF((ISOURC .EQ. 22)) THEN
          IF ((RBEAM .EQ. 0.0)) THEN
              XIN=XBEAM0
              YIN=YBEAM0
          ELSE
              IF((rng_seed .GT. 128))call ranmar_get
              RNG = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              RNG=(2*RNG-1)*2*(XBEAM+YBEAM)
              IF ((RNG.LE.-2*XBEAM)) THEN
                  YIN=RNG+2*XBEAM+YBEAM+YBEAM0
                  XIN=-XBEAM+YBEAM0
              ELSE IF((RNG.LE.0.)) THEN
                  XIN=RNG+XBEAM+XBEAM0
                  YIN=-YBEAM+YBEAM0
              ELSE IF((RNG.LE.2*YBEAM)) THEN
                  YIN=RNG-YBEAM+YBEAM0
                  XIN=XBEAM+XBEAM0
              ELSE
                  XIN=RNG-2*YBEAM-XBEAM+XBEAM0
                  YIN=YBEAM+YBEAM0
              END IF
          END IF
          UIN=UINC
          VIN=VINC
          WIN=WINC
          ZIN=Z_SOURCE
          ICM = 1
          IDIR = 1
      ELSE IF((ISOURC.EQ.7)) THEN
          IF((rng_seed .GT. 128))call ranmar_get
          RNG = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IND_SCAN=RNG*IRATIO_YXF
          IF (( IND_SCAN .GE.IRATIO_YXF )) THEN
              IND_SCAN=IRATIO_YXF-1
          END IF
          IF((rng_seed .GT. 128))call ranmar_get
          XIN = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          XIN=XSCAN_UNIT*XIN
          IF (( MOD(IND_SCAN, 2) .EQ. 0 )) THEN
              YIN=XIN*IRATIO_YXF/2.0
          ELSE IF(( MOD(IND_SCAN, 2) .EQ. 1 )) THEN
              YIN=-XIN*IRATIO_YXF/2.0+FD_AT100
          END IF
          XIN=XIN+IND_SCAN*XSCAN_UNIT
          IF ((XIN.GT.FD_AT100)) THEN
              XIN=-XIN+2.0*FD_AT100
          END IF
          XIN=XIN-FD_AT100/2.0
          YIN=YIN-FD_AT100/2.0
          DIST_RAY=SQRT( XIN*XIN+YIN*YIN+(100.0)**2)
          WIN=(100.0)/DIST_RAY
          UIN=XIN/DIST_RAY
          VIN=YIN/DIST_RAY
8681      CONTINUE
              IF((rng_seed .GT. 128))call ranmar_get
              XIN = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              XIN=(2.0*XIN-1.0)*RBEAM
              IF((rng_seed .GT. 128))call ranmar_get
              YIN = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              YIN=(2.0*YIN-1.0)*RBEAM
              R2=XIN**2+YIN**2
              IF((R2 .LE. RBEAM2))GO TO8682
          GO TO 8681
8682      CONTINUE
          ZIN=Z_SOURCE
          ICM = 1
          IDIR = 1
      ELSE IF((ISOURC .EQ. 8)) THEN
8691      CONTINUE
              IF((rng_seed .GT. 128))call ranmar_get
              XIN = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              XIN=(2.0*XIN-1.0)*RBEAM
              IF((rng_seed .GT. 128))call ranmar_get
              YIN = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              YIN=(2.0*YIN-1.0)*RBEAM
              R2=XIN**2+YIN**2
              IF((R2 .LE. RBEAM2))GO TO8692
          GO TO 8691
8692      CONTINUE
          ZZZ = SQRT(XIN**2 + YIN**2 + DISTZ**2)
          IF ((ZZZ .GT. 0)) THEN
              UIN=XIN/ZZZ
              VIN=YIN/ZZZ
              WIN=DISTZ/ZZZ
          ELSE
              WRITE(6,8700)
8700          FORMAT(///' ****some thing is wrong in source = 8***'//)
              call exit(1)
          END IF
          IF ((RBEAM0.LE.0.)) THEN
              DELX=0.
              DELY=0.
          ELSE
8711          CONTINUE
                  IF((rng_seed .GT. 128))call ranmar_get
                  DELX = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  DELX=(2.0*DELX-1.0)*RBEAM0
                  IF((rng_seed .GT. 128))call ranmar_get
                  DELY = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  DELY=(2.0*DELY-1.0)*RBEAM0
                  R2=DELX**2+DELY**2
                  IF((R2 .LE. RBEAM0**2))GO TO8712
              GO TO 8711
8712          CONTINUE
          END IF
          ZIN=Z_SOURCE
          XIN=XIN*Z_SOURCE/DISTZ+DELX
          YIN=YIN*Z_SOURCE/DISTZ+DELY
          ICM = 1
          IDIR = 1
      ELSE IF((ISOURC .EQ. 9)) THEN
          IF((rng_seed .GT. 128))call ranmar_get
          XIN = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          DO 8721 I=1,NPTS_SRC9
              IF ((XIN.LT.PROB_SRC9(I))) THEN
                  XIN=X_SRC9(I)
                  YIN=Y_SRC9(I)
                  GO TO8722
              END IF
8721      CONTINUE
8722      CONTINUE
          ZZZ = SQRT(XIN**2 + YIN**2 + DISTZ**2)
          IF ((ZZZ .GT. 0)) THEN
              UIN=XIN/ZZZ
              VIN=YIN/ZZZ
              WIN=DISTZ/ZZZ
          ELSE
              WRITE(6,8730)
8730          FORMAT(///' ****some thing is wrong on the source = 9***'/
     */)
              call exit(1)
          END IF
          ZIN=Z_SOURCE
          XIN=XIN*Z_SOURCE/DISTZ
          YIN=YIN*Z_SOURCE/DISTZ
          ICM = 1
          IDIR = 1
      ELSE IF((ISOURC .EQ. 10)) THEN
          IF ((XTUBE_EXISTS .NE. 1)) THEN
              WRITE(6,8740)
8740          FORMAT(////'   SORRY, MY FRIEND, THIS SOURCE CAN ONLY BE U
     *SED'/ '   TOGETHER WITH THE COMPONENT MODULE XTUBE FOR THE'/ '   S
     *IMULATION OF THE TARGET OF AN X-RAY TUBE !!!!!!')
              GOTO 8750
          END IF
          IF ((RBEAM .EQ. 0.0)) THEN
              YIN=0.0
              XIN=0.0
              ZIN=0.0
          ELSE
8761          CONTINUE
                  IF((rng_seed .GT. 128))call ranmar_get
                  ZIN = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  ZIN=(2.0*ZIN-1.0)*RBEAM
                  IF((rng_seed .GT. 128))call ranmar_get
                  YIN = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  YIN=(2.0*YIN-1.0)*RBEAM
                  R2=ZIN**2+YIN**2
                  IF((R2 .LE. RBEAM2))GO TO8762
              GO TO 8761
8762          CONTINUE
          END IF
          XIN=-ZIN*TAN(ANGLE)
          ZIN=Z_min_CM(1)+(Z_min_CM(2)-Z_min_CM(1))/2.+ZIN
          UIN=UINC
          VIN=VINC
          WIN=WINC
          ICM = 1
          IDIR = 0
      ELSE IF((ISOURC .EQ. 13)) THEN
          IF ((XTUBE_EXISTS .NE. 1)) THEN
              WRITE(6,8770)
8770          FORMAT(////'   SORRY, MY FRIEND, THIS SOURCE CAN ONLY BE U
     *SED'/ '   TOGETHER WITH THE COMPONENT MODULE XTUBE FOR THE'/ '   S
     *IMULATION OF THE TARGET OF AN X-RAY TUBE !!!!!!')
              GOTO 8750
          END IF
          IF (((YBEAM .EQ. 0.0).AND.(ZBEAM .EQ. 0.0))) THEN
              YIN=0.0
              XIN=0.0
              ZIN=Z_min_CM(1)+(Z_min_CM(2)-Z_min_CM(1))/2.
          ELSE
              IF((rng_seed .GT. 128))call ranmar_get
              ZIN = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              ZIN=(2.0*ZIN-1.0)*ZBEAM
              IF((rng_seed .GT. 128))call ranmar_get
              YIN = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              YIN=(2.0*YIN-1.0)*YBEAM
              XIN=-ZIN*TAN(ANGLE)
              ZIN=Z_min_CM(1)+(Z_min_CM(2)-Z_min_CM(1))/2.+ZIN
              UIN=UINC
              VIN=VINC
              WIN=WINC
              ICM = 1
              IDIR = 0
          END IF
      ELSE IF((ISOURC .EQ. 15)) THEN
8780      CONTINUE
          IF((rng_seed .GT. 128))call ranmar_get
          RNNO1 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF((rng_seed .GT. 128))call ranmar_get
          RNNO2 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          DO 8791 IB20=1,NRDIST
              RNNO1=RNNO1 - RCDF(IB20)
              IF((RNNO1 .LE. 0))GO TO8792
8791      CONTINUE
8792      CONTINUE
          RIN=SQRT(RCDFIN(IB20,1)+RNNO2*RCDFIN(IB20,2))
          IF ((RIN .LT. 0)) THEN
              IF ((RIN .LT. -0.0001)) THEN
                  WRITE(6,8800)
8800              FORMAT(//' ****WARNING IN SOURCE 15:'/ ' Sampled radiu
     *s < 0.0'//)
              END IF
              GOTO 8780
          END IF
          IF ((RIN .GT. RDISTF(NRDIST))) THEN
              IF ((RIN .GT. 1.0001*RDISTF(NRDIST))) THEN
                  WRITE(6,8810)
8810              FORMAT(//' ****WARNING IN SOURCE 15:'/ ' Sampled radiu
     *s > max. radius'//)
              END IF
              GOTO 8780
          END IF
          ZIN=Z_min_CM(1)
          ICM = 1
          THETAI = DATAN( RIN/RTHETAIN * DTAN(THETAIN/57.29578))
          COSTHETA = DCOS(THETAI)
          SINTHETA = DSIN(THETAI)
          WINP = COSTHETA
          IF((rng_seed .GT. 128))call ranmar_get
          RNG = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          RNG = TWOPI*RNG
          XINPP = RIN * COS(RNG)
          YINPP = RIN * SIN(RNG)
          UINP = COS(RNG) * SINTHETA
          VINP = SIN(RNG) * SINTHETA
          IF((rng_seed .GT. 128))call ranmar_get
          RNG = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          RNG = TWOPI*RNG
          COSRNG = COS(RNG)
          SINRNG = SIN(RNG)
          UIN = UINP * COSRNG + VINP * SINRNG * COSGAMMA + WINP * SINRNG
     *     * SINGAMMA
          VIN = -1.0 * UINP * SINRNG + VINP * COSRNG * COSGAMMA + WINP *
     *     COSRNG * SINGAMMA
          WIN = -1.0 * VINP * SINGAMMA + WINP * COSGAMMA
          XINP = XINPP*COSRNG + YINPP*SINRNG
          YINP = -1.0 * XINPP*SINRNG + YINPP*COSRNG
          XIN = XINP - (ZFOCUS - ZIN)/WIN*UIN
          YIN = YINP - (ZFOCUS - ZIN)/WIN*VIN
      ELSE IF((ISOURC .EQ. 18)) THEN
          IF ((RBEAM .EQ. 0.0)) THEN
              XIN=0.0
              YIN=0.0
          ELSE
              IF ((CHOSEN_SRC18.EQ.0)) THEN
8821              CONTINUE
                      IF((rng_seed .GT. 128))call ranmar_get
                      ZIN = rng_array(rng_seed)*twom24
                      rng_seed = rng_seed + 1
                      ZIN=RBEAM*SQRT(-2*LOG(1-ZIN))
                      IF((ZIN.LE.RINMAX))GO TO8822
                  GO TO 8821
8822              CONTINUE
                  IF((rng_seed .GT. 128))call ranmar_get
                  XIN = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  XIN=2.*3.1415926*XIN
                  RIN1_SRC18=ZIN*COS(XIN)
                  RIN2_SRC18=ZIN*SIN(XIN)
                  ZIN=RIN1_SRC18
                  CHOSEN_SRC18=1
              ELSE
                  ZIN=RIN2_SRC18
                  CHOSEN_SRC18=0
              END IF
              IF((rng_seed .GT. 128))call ranmar_get
              YIN = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              YIN = 2.*3.1415926*YIN
              XIN = ZIN*COS(YIN)
              YIN = ZIN*SIN(YIN)
          END IF
          IF ((IFPB .EQ. 0)) THEN
              WIN=1.0
              UIN=0.0
              VIN=0.0
          ELSE
              UIN=UINC
              VIN=VINC
              WIN=WINC
          END IF
          ZIN=Z_SOURCE
          ICM = 1
          IDIR = 1
      ELSE IF((ISOURC .EQ. 19)) THEN
          IF ((RBEAM .EQ. 0.0)) THEN
              XIN=0.0
              YIN=0.0
          ELSE
8831          CONTINUE
                  IF((rng_seed .GT. 128))call ranmar_get
                  ZIN = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  ZIN=SQRT(-2*LOG(1.-ZIN))
                  IF((rng_seed .GT. 128))call ranmar_get
                  YIN = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  YIN = 2.*3.1415926*YIN
                  XIN = xo_src19 + RBEAM*ZIN*COS(YIN)
                  YIN = yo_src19 + RBEAMY*ZIN*SIN(YIN)
                  IF(((ABS(XIN).LT.RINMAX.AND.ABS(YIN).LT.RINMAX.AND.XIN
     *            *XIN+YIN*YIN.LT.RINMAX*RINMAX)))GO TO8832
              GO TO 8831
8832          CONTINUE
          END IF
          IF (( sigma_src19 .GT. 0 )) THEN
8841          CONTINUE
                  IF((rng_seed .GT. 128))call ranmar_get
                  win = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  win = 1 + sigma_src19*log(1-win)
                  IF(((win .GT. 0)))GO TO8842
              GO TO 8841
8842          CONTINUE
              uin = sqrt((1-win)*(1+win))
              IF((rng_seed .GT. 128))call ranmar_get
              PHI = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              PHI = 6.283185308*PHI
              vin = uin*sin(phi)
              uin = uin*cos(phi)
          ELSE
              IF ((IFPB .EQ. 0)) THEN
                  WIN=1.0
                  UIN=0.0
                  VIN=0.0
              ELSE
                  UIN=UINC
                  VIN=VINC
                  WIN=WINC
              END IF
          END IF
          ZIN=Z_SOURCE
          ICM = 1
          IDIR = 1
      ELSE IF((ISOURC .EQ. 21 .OR. ISOURC.EQ.24)) THEN
          IF ((NRCYCL.GT.0 .AND. CYCLNUM.GT.0 .AND. CYCLNUM.LE.NRCYCL))
     *    THEN
              CYCLNUM=CYCLNUM+1
              XIN=XINOLD
              YIN=YINOLD
              UIN=UINOLD
              VIN=VINOLD
              WIN=WINOLD
              WEIGHT=WEIGHTOLD
              ICM=INIT_ICMOLD
              ZIN=ZINOLD
              IF ((I_MUPHSP_IN.NE.0)) THEN
                  BEAM_MU_INDEX_OLD=BEAM_MU_INDEX - 1.1
              END IF
          ELSE
              INPHSP=INPHSP+1
8850          CONTINUE
#ifdef HAVE_C_COMPILER
              IF ((n_parallel.GT.0 .AND. INPHSP.GT.INPHSP_MAX)) THEN
                  INPHSP=INPHSP_MIN
                  OUTCNT=OUTCNT+1
                  WRITE(6,8860)
8860              FORMAT(///' ***WARNING*** USED ALL PARTICLES FROM CHUN
     *K IN SOURCE FILE!'/ '               RESTARTING FROM FIRST PARTICLE
     * IN THIS CHUNK.'// /1x,79('*')//)
                  IF ((i_iaea_in.EQ.1)) THEN
                      NHSTRY=OUTCNT*NINCSRC/(n_parallel*10)
                      iaea_dummy_long=INPHSP
                      call iaea_set_record(IINSRC,iaea_dummy_long,iaea_r
     *                esult)
                      IF ((iaea_result.LT.0)) THEN
                          WRITE(i_log,*)' Error going to record ',INPHSP
     *                    ,' in IAEA phsp file.'
                          call exit(1)
                      END IF
                  END IF
              END IF
#endif
              IF ((IPARALLEL.GT.1 .AND. PARNUM.GT.0 .AND. INPHSP .GT. IN
     *        T(PARNUM*NNPHSP/IPARALLEL))) THEN
                  INPHSP=INT((PARNUM-1)*NNPHSP/IPARALLEL)+1
                  OUTCNT=OUTCNT+1
                  WRITE(6,8870)
8870              FORMAT(///' ***WARNING*** USED ALL PARTICLES FROM PART
     *ITION IN SOURCE FILE!'/ '               RESTARTING FROM FIRST PART
     *ICLE IN THIS PARTITION.'// /1x,79('*')//)
                  IF ((i_iaea_in.EQ.1)) THEN
                      NHSTRY=OUTCNT*NINCSRC/IPARALLEL
                      iaea_dummy_long=INPHSP
                      call iaea_set_record(IINSRC,iaea_dummy_long,iaea_r
     *                esult)
                      IF ((iaea_result.LT.0)) THEN
                          WRITE(i_log,*)' Error going to record ',INPHSP
     *                    ,' in IAEA phsp file.'
                          call exit(1)
                      END IF
                  END IF
              ELSE IF((INPHSP.GT.NNPHSP)) THEN
                  INPHSP=1
                  OUTCNT=OUTCNT+1
                  WRITE(6,8880)
8880              FORMAT(///' ***WARNING*** USED ALL PARTICLES FROM SOUR
     *CE FILE!'/ '               RESTARTING FROM FIRST PARTICLE IN FILE.
     *'// /1x,79('*')//)
                  IF ((i_iaea_in.EQ.1)) THEN
                      NHSTRY=OUTCNT*NINCSRC
                      iaea_dummy_long=1
                      call iaea_set_record(IINSRC,iaea_dummy_long,iaea_r
     *                esult)
                      IF ((iaea_result.LT.0)) THEN
                          WRITE(i_log,*)' Error going to record ',1,' in
     * IAEA phsp file.'
                          call exit(1)
                      END IF
                  END IF
              END IF
              IF ((i_iaea_in.EQ.1)) THEN
                  NPASSI=0
                  call iaea_get_particle(IINSRC,iaea_n_stat,iaea_q_index
     *            ,ESHORT,WT_PHSP_SHORT, X_PHSP_SHORT,Y_PHSP_SHORT,Z_PHS
     *            P_SHORT,U_PHSP_SHORT, V_PHSP_SHORT,W_PHSP_SHORT,iaea_e
     *            xtra_floats,iaea_extra_ints)
                  IF ((iaea_n_stat.EQ.-1)) THEN
                      WRITE(i_log,*)' Error getting particle data from I
     *AEA phsp file.'
                      call exit(1)
                  ELSE IF((iaea_n_stat.EQ.-2)) THEN
                      WRITE(i_log,*)' WARNING: Reached end of IAEA phsp
     *file.  File restarted.'
                  ELSE IF((iaea_n_stat.GE.0)) THEN
                      NHSTRY=NHSTRY+iaea_n_stat
                      IF ((iaea_i_latch.EQ.-99)) THEN
                          LATCHI=0
                      ELSE
                          LATCHI=iaea_extra_ints(iaea_i_latch)
                      END IF
                      IQIN=iaea_typ_q(iaea_q_index)
                      IF (( (IQIN.EQ.1) .OR. (IQIN.EQ.-1) )) THEN
                          ESHORT = ESHORT + 0.5109989461
                      END IF
                      EREAD=ESHORT
                      IF ((iaea_i_zlast.EQ.-99)) THEN
                          ZLAST_PHSP_SHORT=0
                      ELSE
                          ZLAST_PHSP_SHORT= iaea_extra_floats(iaea_i_zla
     *                    st)
                      END IF
                      IF ((iaea_i_muidx.EQ.-99)) THEN
                          MUIDX_PHSP_SHORT=0
                      ELSE
                          MUIDX_PHSP_SHORT= iaea_extra_floats(iaea_i_mui
     *                    dx)
                      END IF
                      WEIGHT=WT_PHSP_SHORT
                      XIN=X_PHSP_SHORT
                      YIN=Y_PHSP_SHORT
                      ZIN=Z_PHSP_SHORT
                      UIN=U_PHSP_SHORT
                      VIN=V_PHSP_SHORT
                      WIN=W_PHSP_SHORT
                      ZLAST(1)=ZLAST_PHSP_SHORT
                      BEAM_MU_INDEX=MUIDX_PHSP_SHORT
                  END IF
                  IF((I_MUPHSP_IN.EQ.0))BEAM_MU_INDEX=BEAM_MU_INDEX_OLD
              ELSE
                  IF ((IZLAST.NE.0)) THEN
                      READ(IINSRC,REC=INPHSP+1,IOSTAT=IERR_PHSP) LATCHI,
     *                ESHORT,X_PHSP_SHORT,Y_PHSP_SHORT, U_PHSP_SHORT,V_P
     *                HSP_SHORT,WT_PHSP_SHORT,ZLAST_PHSP_SHORT
                  ELSE
                      READ(IINSRC,REC=INPHSP+1,IOSTAT=IERR_PHSP) LATCHI,
     *                ESHORT,X_PHSP_SHORT,Y_PHSP_SHORT, U_PHSP_SHORT,V_P
     *                HSP_SHORT,WT_PHSP_SHORT
                  END IF
                  IF ((INPHSP+1.EQ.76695869)) THEN
                      write(*,*)' x,y,u,v,wt,eshort,latch', X_PHSP_SHORT
     *                ,Y_PHSP_SHORT,U_PHSP_SHORT,V_PHSP_SHORT, WT_PHSP_S
     *                HORT,ESHORT,LATCHI
                  END IF
                  IF ((ESHORT.LT.0.0)) THEN
                      NHSTRY=NHSTRY+1
                      ESHORT=ABS(ESHORT)
                  END IF
                  EREAD=ESHORT
                  WEIGHT=WT_PHSP_SHORT
                  XIN=X_PHSP_SHORT
                  YIN=Y_PHSP_SHORT
                  UIN=U_PHSP_SHORT
                  VIN=V_PHSP_SHORT
                  IF((IZLAST.NE.0))ZLAST(1)=ZLAST_PHSP_SHORT
                  IF ((IERR_PHSP.EQ.0)) THEN
                      EREAD=ESHORT
                      IF ((BTEST(LATCHI, 31))) THEN
                          NPASSI = 1
                          LATCHI = IBCLR(LATCHI,31)
                      ELSE
                          NPASSI = 0
                      END IF
                      IF ((BTEST(LATCHI, 30))) THEN
                          IQIN = -1
                          LATCHI = IBCLR(LATCHI,30)
                          LATCHI = IBCLR(LATCHI,29)
                      ELSE
                          IF ((BTEST(LATCHI, 29))) THEN
                              IQIN = 1
                              LATCHI = IBCLR(LATCHI,29)
                          ELSE
                              IQIN = 0
                          END IF
                      END IF
                      WIN = min( 1., UIN**2 + VIN**2)
                      WIN = sqrt(1. - WIN)
                      WIN = SIGN(WIN,WEIGHT)
                      WEIGHT=ABS(WEIGHT)
                  END IF
              END IF
              IF (((i_iaea_in.EQ.0 .AND. IERR_PHSP.GT.0) .OR. (i_iaea_in
     *        .EQ.1 .AND. iaea_n_stat.EQ.-2))) THEN
                  IF ((IPARALLEL.GT.1 .AND. PARNUM.GT.0)) THEN
                      INPHSP=INT((PARNUM-1)*NNPHSP/IPARALLEL)+1
                      OUTCNT=OUTCNT+1
                      WRITE(6,8890)
8890                  FORMAT(///' ***WARNING*** USED ALL PARTICLES FROMP
     *ARTITION IN SOURCE FILE!'/ '               RESTARTING FROM FIRSTPA
     *RTICLE IN THIS PARTITION.'// /1x,79('*')//)
                  ELSE
                      INPHSP=1
                      OUTCNT=OUTCNT+1
                      WRITE(6,8900)
8900                  FORMAT(///' ***WARNING*** USED ALL PARTICLES FROMS
     *OURCE FILE!'/ '               RESTARTING FROM FIRST PARTICLE IN FI
     *LE.'// /1x,79('*')//)
                  END IF
                  GOTO 8850
              END IF
              IF ((NPASSI .NE. 0)) THEN
                  NPASS_ph_sp = NPASS_ph_sp + 1
                  INPHSP=1+INPHSP
                  GOTO 8850
              ELSE IF((ISRC_DBS.EQ.1 .AND. IQIN.EQ.0)) THEN
                  DISTSRC_DBS=(SSDSRC_DBS-ZSRC_DBS)/WIN
                  IF (((XIN+UIN*DISTSRC_DBS)**2+(YIN+VIN*DISTSRC_DBS)**2
     *            .GT.RSRC_DBS**2)) THEN
                      NFAT_ph_sp=NFAT_ph_sp+1
                      INPHSP=1+INPHSP
                      GOTO 8850
                  END IF
              END IF
              EIN = EREAD
              IF ((IQIN .EQ. -1)) THEN
                  N_ph_sp_e = N_ph_sp_e + 1
                  E_ph_sp_e = E_ph_sp_e+EIN
              END IF
              IF ((IQIN .EQ. 0)) THEN
                  N_ph_sp_g = N_ph_sp_g + 1
                  E_ph_sp_g = E_ph_sp_g+EIN
              END IF
              IF ((IQIN .EQ. +1)) THEN
                  N_ph_sp_p = N_ph_sp_p + 1
                  E_ph_sp_p = E_ph_sp_p+EIN
              END IF
              E_MAX_ph_sp = MAX(E_MAX_ph_sp,EIN)
              IF ((ISOURC.EQ.24 .AND. (ALPHA24.NE.0 .OR. BETA24 .NE.0)))
     *         THEN
                  ZIN = Z_SOURCE-DIST24 - XIN*CALPHA24*SBETA24 - YIN*SAL
     *            PHA24 + DIST24*CALPHA24*CBETA24
                  YIN = -XIN*SALPHA24*SBETA24 + YIN*CALPHA24 + DIST24*SA
     *            LPHA24*CBETA24
                  XIN = XIN*CBETA24 + DIST24*SBETA24
                  TEMP = WIN
                  WIN = -UIN*CALPHA24*SBETA24 - VIN*SALPHA24 + WIN*CALPH
     *            A24*CBETA24
                  VIN = -UIN*SALPHA24*SBETA24 + VIN*CALPHA24 + TEMP*SALP
     *            HA24*CBETA24
                  UIN = UIN*CBETA24 + TEMP*SBETA24
                  DO 8911 I=1,MAX_CMs
                      IF ((ZIN .LT. Z_min_CM(I+1))) THEN
                          ICM=I
                          GO TO8912
                      END IF
8911              CONTINUE
8912              CONTINUE
                  IF ((CMTYPE(ICM).NE.'SLABS' .AND. CMTYPE(ICM).NE.'FLAT
     *FILT' .AND. CMTYPE(ICM).NE.'SIDETUBE')) THEN
                      WRITE(6,8920)
8920                  FORMAT(/' Error in source 24: Particle not inciden
     *t within a'/ ' CM capable of handling internal sources (SLABS, FLA
     *TFILT'/ ' or SIDETUBE)'//)
                      STOP
                  END IF
                  IDIR=2
                  IAUSFL(6)=0
              ELSE IF((IZSCORE.EQ.1)) THEN
                  DO 8931 I=1,MAX_CMs
                      IF ((ZIN .LT. Z_min_CM(I+1))) THEN
                          ICM=I
                          GO TO8932
                      END IF
8931              CONTINUE
8932              CONTINUE
                  IF ((CMTYPE(ICM).NE.'SLABS' .AND. CMTYPE(ICM).NE.'FLAT
     *FILT' .AND. CMTYPE(ICM).NE.'SIDETUBE')) THEN
                      WRITE(6,8940)
8940                  FORMAT(/' Error in source 21: Particle not inciden
     *t within a'/ ' CM capable of handling internal sources (SLABS, FLA
     *TFILT'/ ' or SIDETUBE)'//)
                      STOP
                  END IF
                  IDIR=2
                  IAUSFL(6)=0
              ELSE
                  ZIN=Z_SOURCE
                  ICM = INIT_ICM
                  IDIR=1
              END IF
              IF ((NRCYCL.GT.0)) THEN
                  CYCLNUM=1
                  XINOLD=XIN
                  YINOLD=YIN
                  ZINOLD=ZIN
                  INIT_ICMOLD=ICM
                  UINOLD=UIN
                  VINOLD=VIN
                  WINOLD=WIN
                  WEIGHTOLD=WEIGHT
              END IF
          END IF
      ELSE IF((ISOURC.EQ.23)) THEN
8950      CONTINUE
          call sample_beamsource(ein,xin,yin,zin,uin,vin,win,weight, iqi
     *    n,latchi,nhstry,iphati)
          IF ((ISRC_DBS.EQ.1 .AND. iqin.EQ.0 .AND. iphati.GT.1)) THEN
              NFAT_ph_sp=NFAT_ph_sp+1
              GOTO 8950
          END IF
          IF ((IQIN .EQ. -1)) THEN
              N_ph_sp_e = N_ph_sp_e + 1
              E_ph_sp_e = E_ph_sp_e+EIN
          END IF
          IF ((IQIN .EQ. 0)) THEN
              N_ph_sp_g = N_ph_sp_g + 1
              E_ph_sp_g = E_ph_sp_g+EIN
          END IF
          IF ((IQIN .EQ. +1)) THEN
              N_ph_sp_p = N_ph_sp_p + 1
              E_ph_sp_p = E_ph_sp_p+EIN
          END IF
          E_MAX_ph_sp = MAX(E_MAX_ph_sp,EIN)
          IF ((ALPHA24 .NE. 0 .OR. BETA24 .NE. 0)) THEN
              ZIN = Z_SOURCE-DIST24 - XIN*CALPHA24*SBETA24 - YIN*SALPHA2
     *        4 + DIST24*CALPHA24*CBETA24
              YIN = -XIN*SALPHA24*SBETA24 + YIN*CALPHA24 + DIST24*SALPHA
     *        24*CBETA24
              XIN = XIN*CBETA24 + DIST24*SBETA24
              TEMP = WIN
              WIN = -UIN*CALPHA24*SBETA24 - VIN*SALPHA24 + WIN*CALPHA24*
     *        CBETA24
              VIN = -UIN*SALPHA24*SBETA24 + VIN*CALPHA24 + TEMP*SALPHA24
     *        *CBETA24
              UIN = UIN*CBETA24 + TEMP*SBETA24
              DO 8961 I=1,MAX_CMs
                  IF ((ZIN .LT. Z_min_CM(I+1))) THEN
                      ICM=I
                      GO TO8962
                  END IF
8961          CONTINUE
8962          CONTINUE
              IF ((CMTYPE(ICM).NE.'SLABS' .AND. CMTYPE(ICM).NE.'FLATFILT
     *' .AND. CMTYPE(ICM).NE.'SIDETUBE')) THEN
                  WRITE(6,8970)
8970              FORMAT(/' Error in source 23: Particle not incident wi
     *thin a'/ ' CM capable of handling internal sources (SLABS, FLATFIL
     *T'/ ' or SIDETUBE)'//)
                  STOP
              END IF
              IDIR=2
              IAUSFL(6)=0
          ELSE
              ZIN=Z_SOURCE
              ICM = INIT_ICM
              IDIR=1
          END IF
      ELSE IF((ISOURC .EQ. 31)) THEN
          WRITE(6,8980)
8980      FORMAT(///' BEAM CHARACTERIZATION MODELS NOT IMPLEMENTED'///)
      END IF
      NP = 1
      X(NP) = XIN
      Y(NP) = YIN
      Z(NP) = ZIN
      IQ(NP)= IQIN
      U(NP)=UIN
      V(NP)=VIN
      W(NP)=WIN
      USTEP=0.0
      IF ((ISOURC.NE.21 .AND. ISOURC.NE.23 .AND. ISOURC.NE.24)) THEN
          LATCHI=0
      END IF
      LATCH(NP)=LATCHI
8550  CONTINUE
      IF ((dosxyz2beam_index.LT.0)) THEN
          NP=1
          EIN=E(NP)
          IQIN=IQ(NP)
          XIN=X(NP)
          YIN=Y(NP)
          IF ((dosxyz2beam_izscore.EQ.1)) THEN
              ZIN=Z(NP)
              DO 8991 I=1,MAX_CMs
                  IF ((ZIN .LT. Z_min_CM(I+1))) THEN
                      ICM=I
                      GO TO8992
                  END IF
8991          CONTINUE
8992          CONTINUE
              IF ((CMTYPE(ICM).NE.'SLABS' .AND. CMTYPE(ICM).NE.'FLATFILT
     *' .AND. CMTYPE(ICM).NE.'SIDETUBE')) THEN
                  WRITE(6,9000)
9000              FORMAT(/' Error in source 24: Particle not incident wi
     *thin a'/ ' CM capable of handling internal sources (SLABS, FLATFIL
     *T'/ ' or SIDETUBE)'//)
                  STOP
              END IF
              IDIR=2
              IAUSFL(6)=0
          ELSE
              ZIN=Z_SOURCE
              Z(NP)=Z_SOURCE
              IF ((ISOURC.EQ.21 .OR. ISOURC.EQ.23 .OR. ISOURC.EQ.24)) TH
     *        EN
                  ICM = INIT_ICM
              ELSE
                  ICM=1
              END IF
              IDIR=1
          END IF
          UIN=U(NP)
          VIN=V(NP)
          WIN=W(NP)
          WEIGHT=WT(NP)
          USTEP=0.0
          LATCHI=LATCH(NP)
      END IF
      IF (( INSIDE_FLAG .GT. 0 )) THEN
          IRNEW = INSIDE_FLAG
      ELSE
          IF ((ISOURC.EQ.3 .OR. ISOURC.EQ.10 .OR. ISOURC.EQ.13 .OR. (ISO
     *    URC.EQ.24 .AND. (ALPHA24 .NE. 0 .OR. BETA24 .NE. 0)) .OR. (ISO
     *    URC.EQ.23 .AND. (ALPHA24 .NE. 0 .OR. BETA24 .NE. 0)) .OR. (ISO
     *    URC.EQ.21 .AND. IZSCORE.EQ.1) .OR. dosxyz2beam_izscore.EQ.1))
     *    THEN
              GOTO (9010,9020,9030,9040,9050,9060,9070,9080) ICM
9080          CONTINUE
              CALL WHERE_AM_I_APPLICAT(IDIR)
              GOTO 9090
9070          CONTINUE
              CALL WHERE_AM_I_MAINJAWS(IDIR)
              GOTO 9090
9060          CONTINUE
              CALL WHERE_AM_I_MIRROR(IDIR)
              GOTO 9090
9050          CONTINUE
              CALL WHERE_AM_I_RING(IDIR)
              GOTO 9090
9040          CONTINUE
              CALL WHERE_AM_I_IONCHAM(IDIR)
              GOTO 9090
9030          CONTINUE
              CALL WHERE_AM_I_SCATFOIL(IDIR)
              GOTO 9090
9020          CONTINUE
              CALL WHERE_AM_I_COLLIMAT(IDIR)
              GOTO 9090
9010          CONTINUE
              CALL WHERE_AM_I_XITWIN(IDIR)
              GOTO 9090
9090          CONTINUE
          ELSE
              CALL WHERE_AM_I(ICM-1,1)
          END IF
      END IF
      IF ((BTEST(LATCH(NP), 30))) THEN
          LATCHI=IBSET(LATCHI,30)
      END IF
      IRIN=IRNEW
      RETURN
8750  CONTINUE
      WRITE(6,9100)
9100  FORMAT(////' *** SIMULATION STOPS DUE TO THE USE OF WRONG SOURCE/C
     *M ***'//)
      call exit(1)
      END
      SUBROUTINE WHERE_AM_I(IICM,IDIR)
      implicit none
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      INTEGER IICM,  IDIR
      ICMNEW = IICM+IDIR
      IAUSFL(6) = 1
      IDIRG=IDIR
      IF ((ICMNEW .GT. MAX_CMs .OR. ICMNEW .LE. 0 )) THEN
          ICMNEW=0
          IRNEW=1
          RETURN
      END IF
      IF ((RMAX_CM_FLAG(ICMNEW).EQ.1 .AND. (X(NP)+USTEP*U(NP))**2+(Y(NP)
     *+USTEP*V(NP))**2.GT.RMAX_CM2(ICMNEW))) THEN
          ICMNEW=0
          IRNEW=1
          RETURN
      ELSE IF((RMAX_CM_FLAG(ICMNEW).EQ.2 .AND. (ABS(X(NP)+USTEP*U(NP)).G
     *T.RMAX_CM(ICMNEW) .OR. ABS(Y(NP)+USTEP*V(NP)).GT.RMAX_CM(ICMNEW)))
     *) THEN
          ICMNEW=0
          IRNEW=1
          RETURN
      END IF
      IF ((ITDOSE_ON .EQ. 1)) THEN
          IF ((ICMNEW.EQ.ICM_CONTAM .AND. ABS(IQ(NP)).EQ.ABS(IQ_CONTAM)
     *    .AND. (IDIR .EQ. 1))) THEN
              LATCH(NP)=IBSET(LATCH(NP),30)
          END IF
      END IF
      GOTO (9010,9020,9030,9040,9050,9060,9070,9080) ICMNEW
9080  CONTINUE
      CALL WHERE_AM_I_APPLICAT(IDIR)
      GOTO 9090
9070  CONTINUE
      CALL WHERE_AM_I_MAINJAWS(IDIR)
      GOTO 9090
9060  CONTINUE
      CALL WHERE_AM_I_MIRROR(IDIR)
      GOTO 9090
9050  CONTINUE
      CALL WHERE_AM_I_RING(IDIR)
      GOTO 9090
9040  CONTINUE
      CALL WHERE_AM_I_IONCHAM(IDIR)
      GOTO 9090
9030  CONTINUE
      CALL WHERE_AM_I_SCATFOIL(IDIR)
      GOTO 9090
9020  CONTINUE
      CALL WHERE_AM_I_COLLIMAT(IDIR)
      GOTO 9090
9010  CONTINUE
      CALL WHERE_AM_I_XITWIN(IDIR)
      GOTO 9090
9090  CONTINUE
      RETURN
      END
      SUBROUTINE DATETIME(DUMMY)
      implicit none
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      INTEGER DUMMY
      call egs_get_fdate(DNTIME)
      daten(1:7)=dntime(5:11)
      daten(8:11)=dntime(21:24)
      timen(1:8)=dntime(12:19)
      RETURN
      END
      SUBROUTINE SELECT_PHOTON_MFP(DDPMFP)
      implicit none
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      COMMON/PHOTIN/ EBINDA(12), GE0(12),GE1(12), GMFP0(2000,12),GMFP1(2
     *000,12),GBR10(2000,12),GBR11(2000,12),GBR20(2000,12),GBR21(2000,12
     *), RCO0(12),RCO1(12), RSCT0(100,12),RSCT1(100,12), COHE0(2000,12),
     *COHE1(2000,12),  PHOTONUC0(2000,12),PHOTONUC1(2000,12), DPMFP, MPG
     *EM(1,12), NGR(12)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 RNNO35,  DDPMFP,  COHFAC
      integer*4 LGLE
      IF((rng_seed .GT. 128))call ranmar_get
      RNNO35 = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      IF((RNNO35 .EQ. 0.0))RNNO35=1.E-30
      IF ((IFORCE .EQ. 0)) THEN
          DDPMFP=-LOG(RNNO35)
      ELSE IF((NP_INC(NP) .EQ. 0)) THEN
          NFTIME(NP)=NFTIME(NP)+1
          IF (((NFTIME(NP) .GT. NFMAX) .OR. (IR_TO_CM(IR(NP)).LT.NFCMIN)
     *     .OR. (IR_TO_CM(IR(NP)).GT.NFCMAX) .OR. (NP.EQ.10000))) THEN
              IF (((IR_TO_CM(IR(NP)).LT.NFCMIN) .OR. (IR_TO_CM(IR(NP)).G
     *        T.NFCMAX) )) THEN
                  NFTIME(NP)=NFTIME(NP)-1
              ELSE IF((NP.EQ.10000)) THEN
                  WRITE(6,9110)
9110              FORMAT(' WARNING: MAXIMUM STACK NUMBER REACHED ', /' P
     *HOTON INTERACTION FORCING IGNORED THIS TIME!!')
                  NFTIME(NP)=NFTIME(NP)-1
              END IF
              DDPMFP=-LOG(RNNO35)
          ELSE
              NP_INC(NP)=1
              NP=NP+1
              X(NP)=X(NP-1)
              Y(NP)=Y(NP-1)
              Z(NP)=Z(NP-1)
              IR(NP)=IR(NP-1)
              WT(NP)=WT(NP-1)
              DNEAR(NP)=DNEAR(NP-1)
              LATCH(NP)=LATCH(NP-1)
              ZLAST(NP)=ZLAST(NP-1)
              NFTIME(NP)=NFTIME(NP-1)
              DO 9121 ISCORE=1,3
                  NPASS(NP,ISCORE)=NPASS(NP-1,ISCORE)
9121          CONTINUE
9122          CONTINUE
              NSPLIT(NP)=NSPLIT(NP-1)
              IPHAT(NP)=IPHAT(NP-1)
              U(NP)=U(NP-1)
              V(NP)=V(NP-1)
              W(NP)=W(NP-1)
              E(NP)=E(NP-1)
              IQ(NP)=IQ(NP-1)
              DUMU=USTEP
              IRODUM=IROLD
              IRNDUM=IRNEW
              ICMNEWDUM=ICMNEW
              ICMOLDDUM=ICM
              MEDDUM=MEDIUM
              IDUM=IDISC
              PATHL=0.0
              MEDTMP=0
              IF ((IWATCH .EQ. 1 .OR. IWATCH .EQ.2)) THEN
                  WRITE(6,9130)NP
9130              FORMAT(' Ficticious photon put on stack with NP =',I4)
              END IF
9141          CONTINUE
                  USTEP=VACDST
                  IROLD=IR(NP)
                  MEDIUM=MED(IROLD)
                  IF ((MEDIUM.EQ.0)) THEN
                      DELTAP=0.
                  ELSE
                      IF ((MEDTMP .NE. MEDIUM)) THEN
                          MEDTMP=MEDIUM
                          LGLE=GE1(MEDIUM)*GLE+GE0(MEDIUM)
                          DELTAP=GMFP1(LGLE,MEDIUM)*GLE+GMFP0(LGLE,MEDIU
     *                    M)
                      END IF
                      IF ((IRAYLR(IROLD) .EQ. 1)) THEN
                          COHFAC=COHE1(LGLE,MEDIUM)*GLE+COHE0(LGLE,MEDIU
     *                    M)
                      ELSE
                          COHFAC=1.0
                      END IF
                  END IF
                  CALL HOWFAR
                  IF((DELTAP.NE.0))PATHL=PATHL+USTEP/(DELTAP*COHFAC)
                  IF(((IR_to_CM(IRNEW).LT.NFCMIN) .OR. (IR_to_CM(IRNEW).
     *            GT.NFCMAX) .OR. (IRNEW.EQ.1)))GO TO9142
                  IF ((E(NP).LT.PCUT(IRNEW))) THEN
                      IF ((MFORCF.EQ.0)) THEN
                          MFORCF=1
                          WRITE(6,9150)IRNEW,IRNEW,PCUT(IRNEW),E(NP),IRO
     *                    DUM,IR(NP)
9150                      FORMAT(/ /' *** NO photon interaction forcingi
     *n region',I4/ '     for particles of energies < PCUT(',I4,') =',F8
     *.3,'MeV'/ '     which differs from the pcutvalues elsewhere.'// ' 
     *    This photon (E=',F8.3,'MeV) is forced to interact in'/ '     r
     *egions',I4,' TO',I4,'.'//)
                          WRITE(IOUTLIST, '(//'' *** NO photon interacti
     *on forcing in region'',I4/                        ''     for parti
     *cles of energies < PCUT('',I4,'') ='',F8.3,''MeV''/             ''
     *     which differs from the pcut values elsewhere.''//
     *            ''     This photon (E='',F8.3,''MeV) is forced to inte
     *ract in''/                ''     regions'',I4,'' TO '',I4//)') IRN
     *                    EW,IRNEW,PCUT(IRNEW), E(NP),IRODUM,IR(NP)
                      END IF
                      GO TO9142
                  END IF
                  IR(NP)=IRNEW
                  X(NP)=X(NP)+USTEP*U(NP)
                  Y(NP)=Y(NP)+USTEP*V(NP)
                  Z(NP)=Z(NP)+USTEP*W(NP)
              GO TO 9141
9142          CONTINUE
              X(NP)=X(NP-1)
              Y(NP)=Y(NP-1)
              Z(NP)=Z(NP-1)
              IR(NP)=IR(NP-1)
              WT(NP)=WT(NP-1)
              DNEAR(NP)=DNEAR(NP-1)
              LATCH(NP)=LATCH(NP-1)
              ZLAST(NP)=ZLAST(NP-1)
              NFTIME(NP)=NFTIME(NP-1)
              DO 9161 ISCORE=1,3
                  NPASS(NP,ISCORE)=NPASS(NP-1,ISCORE)
9161          CONTINUE
9162          CONTINUE
              NSPLIT(NP)=NSPLIT(NP-1)
              IPHAT(NP)=IPHAT(NP-1)
              U(NP)=U(NP-1)
              V(NP)=V(NP-1)
              W(NP)=W(NP-1)
              E(NP)=E(NP-1)
              USTEP=DUMU
              IROLD=IRODUM
              IRNEW=IRNDUM
              ICMNEW=ICMNEWDUM
              ICM=ICMOLDDUM
              MEDIUM=MEDDUM
              IDISC=IDUM
              IF ((PATHL .LE. 1.0E-3)) THEN
                  GWAIT(NP-1)=PATHL*(1.-0.5*PATHL)
              ELSE
                  GWAIT(NP-1)=1.-EXP(-PATHL)
              END IF
              GWTOLD=WT(NP-1)
              WT(NP-1)=GWTOLD*GWAIT(NP-1)
              GWAIT(NP)=1.-GWAIT(NP-1)
              WT(NP)=GWTOLD*GWAIT(NP)
              EPSLON=RNNO35*GWAIT(NP)
              IF (( (1.-GWAIT(NP)+EPSLON) .LE. 1.0E-3)) THEN
                  DDPMFP=(1.-GWAIT(NP)+EPSLON)*(1.+0.5*(1.-GWAIT(NP)+EPS
     *            LON))
              ELSE
                  IF ((GWAIT(NP).EQ.EPSLON)) THEN
                      DDPMFP=1.0E30
                  ELSE
                      DDPMFP=-LOG(GWAIT(NP)-EPSLON)
                  END IF
              END IF
          END IF
      ELSE
          NP_INC(NP)=0
          IAUSFL(6)=0
          EPSLON=RNNO35*GWAIT(NP)
          IF ((EPSLON .LE. 1.0E-3)) THEN
              DDPMFP=EPSLON*(1.+0.5*EPSLON)
          ELSE
              ARG=1./(1.-EPSLON)
              DDPMFP=LOG(ARG)
          END IF
      END IF
      RETURN
      END
      subroutine kill_the_photons(nstart,kill_electrons)
      implicit none
      integer*4 nstart,kill_electrons,rrprobi
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      IDBS=nstart
      count_kill_tmp = 0
      IF (( nstart .GT. np )) THEN
          return
      END IF
9171  CONTINUE
          IF ((IQ(IDBS).EQ.0)) THEN
              PLAYRR_DBS=0
              IF ((W(IDBS).LE.0)) THEN
                  PLAYRR_DBS=1
                  rrprobi = nbrspl
              ELSE
                  DIST_DBS=(SSD-Z(IDBS))/W(IDBS)
                  R2_DBS=(X(IDBS)+DIST_DBS*U(IDBS))**2 + (Y(IDBS)+DIST_D
     *            BS*V(IDBS))**2
                  IF ((R2_DBS .GE. FS**2)) THEN
                      PLAYRR_DBS=1
                      rrprobi = nbrspl
                  ELSE IF(( do_dsb .EQ. 1 )) THEN
                      r2_dbs = r2_dbs/fs**2
                      DO 9181 k_dsb=1,dsb_nbin
                          IF((r2_dbs .LT. dsb_rbin(k_dsb+1)))GO TO9182
9181                  CONTINUE
9182                  CONTINUE
                      rrprobi = k_dsb
                      PLAYRR_DBS=1
                  END IF
              END IF
              IF ((PLAYRR_DBS.EQ.1)) THEN
                  IF((rng_seed .GT. 128))call ranmar_get
                  RNNO_DBS = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  IF ((RNNO_DBS*rrprobi .GT. 1)) THEN
                      count_kill_tmp =count_kill_tmp + 1
                      IF ((IDBS.LT.NP)) THEN
                          IF ((IWATCH.EQ.1 .OR. IWATCH.EQ.2)) THEN
                              WRITE(6,9190)1./NBRSPL,IDBS,E(IDBS),IQ(IDB
     *                        S),IR(IDBS),X(IDBS), Y(IDBS),Z(IDBS),U(IDB
     *                        S),V(IDBS),W(IDBS),LATCH(IDBS),WT(IDBS)
9190                          FORMAT(T10,'Eliminating photon with probab
     *ility ',F8.5,' :'/ T36,I5,F9.3,2I4,3F8.3,3F7.3,I10,1PE10.3)
                          END IF
                          E(IDBS)=E(NP)
                          IQ(IDBS)=IQ(NP)
                          WT(IDBS)=WT(NP)
                          U(IDBS)=U(NP)
                          V(IDBS)=V(NP)
                          W(IDBS)=W(NP)
                          iphat(idbs) = iphat(np)
                      ELSE
                          IF ((IWATCH.EQ.1 .OR. IWATCH.EQ.2)) THEN
                              WRITE(6,9200)1./NBRSPL,NP,E(NP),IQ(NP),IR(
     *                        NP),X(NP),Y(NP), Z(NP),U(NP),V(NP),W(NP),L
     *                        ATCH(NP),WT(NP)
9200                          FORMAT(T10,'Eliminating photon with probab
     *ility ',F8.5,' :'/ T36,I5,F9.3,2I4,3F8.3,3F7.3,I10,1PE10.3)
                          END IF
                      END IF
                      NP=NP-1
                  ELSE
                      WT(IDBS)=WT(IDBS)*rrprobi
                      IPHAT(IDBS)=rrprobi
                      IF ((IWATCH.EQ.1 .OR. IWATCH.EQ.2)) THEN
                          WRITE(6,9210)IDBS,E(IDBS),IQ(IDBS),IR(IDBS),X(
     *                    IDBS), Y(IDBS),Z(IDBS),U(IDBS),V(IDBS),W(IDBS)
     *                    ,LATCH(IDBS),WT(IDBS)
9210                      FORMAT(T10,'Photon survives Russian Roulette :
     *'/ T36,I5,F9.3,2I4,3F8.3,3F7.3,I10,1PE10.3)
                      END IF
                      IDBS=IDBS+1
                  END IF
              ELSE
                  idbs=idbs+1
              END IF
          ELSE
              IF (( kill_electrons .EQ. 0 )) THEN
                  IDBS=IDBS+1
              ELSE
                  IF((rng_seed .GT. 128))call ranmar_get
                  RNNO_DBS = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  IF ((RNNO_DBS*NBRSPL .GT. 1)) THEN
                      IF ((IDBS.LT.NP)) THEN
                          E(IDBS)=E(NP)
                          IQ(IDBS)=IQ(NP)
                          WT(IDBS)=WT(NP)
                          U(IDBS)=U(NP)
                          V(IDBS)=V(NP)
                          W(IDBS)=W(NP)
                      END IF
                      np=np-1
                  ELSE
                      WT(IDBS)=WT(IDBS)*NBRSPL
                      IPHAT(IDBS)=NBRSPL
                      IDBS=IDBS+1
                  END IF
              END IF
          END IF
          IF(((IDBS.GT.NP)))GO TO9172
      GO TO 9171
9172  CONTINUE
      return
      end
      subroutine uniform_photons(nsample,energy)
      implicit none
      integer*4 nsample
      real*8 energy
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 ro,d,aux,ct_min,ct_max,an_split,rnno,weight,cost,sint,xx,yy
     *,cphi,sphi
      real*8 xphi,xphi2,yphi,yphi2,rhophi2
      integer*4 n_split,i,ns
      ro = sqrt(x(np)*x(np)+y(np)*y(np))
      d = ssd - z(np)
      aux = (ro + fs)/d
      ct_min = 1./sqrt(1+aux*aux)
      IF (( ro .LE. fs )) THEN
          ct_max = 1
      ELSE
          aux = (fs-ro)/d
          ct_max = 1./sqrt(1+aux*aux)
      END IF
      an_split = 0.5*(ct_max - ct_min)*nsample
      n_split = an_split
      an_split = an_split - n_split
      IF((rng_seed .GT. 128))call ranmar_get
      rnno = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      IF (( rnno .LT. an_split )) THEN
          n_split = n_split + 1
      END IF
      count_kill_tmp = nsample - n_split
      weight = wt(npold)/nbrspl
      np = np-1
      DO 9221 i=1,n_split
          IF((rng_seed .GT. 128))call ranmar_get
          rnno = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          cost = ct_min + rnno*(ct_max - ct_min)
          sint = 1-cost*cost
          IF (( sint .GT. 0 )) THEN
              sint = sqrt(sint)
          ELSE
              sint = 0
          END IF
9231      CONTINUE
              IF((rng_seed .GT. 128))call ranmar_get
              xphi = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              xphi = 2*xphi - 1
              xphi2 = xphi*xphi
              IF((rng_seed .GT. 128))call ranmar_get
              yphi = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              yphi2 = yphi*yphi
              rhophi2 = xphi2 + yphi2
              IF(rhophi2.LE.1)GO TO9232
          GO TO 9231
9232      CONTINUE
          rhophi2 = 1/rhophi2
          cphi = (xphi2 - yphi2)*rhophi2
          sphi = 2*xphi*yphi*rhophi2
          aux = d/cost*sint
          xx = x(npold) + aux*cphi
          yy = y(npold) + aux*sphi
          ns = 0
          rsq_dsb = xx*xx + yy*yy
          IF (( rsq_dsb .LT. fs*fs )) THEN
              ns = 1
              IF (( do_dsb .EQ. 1 )) THEN
                  rsq_dsb = rsq_dsb/fs**2
                  DO 9241 k_dsb=1,dsb_nbin
                      IF((rsq_dsb .LT. dsb_rbin(k_dsb+1)))GO TO9242
9241              CONTINUE
9242              CONTINUE
                  ns = k_dsb
              END IF
          ELSE
              ns = nbrspl
          END IF
          IF (( ns .GT. 1 )) THEN
              IF((rng_seed .GT. 128))call ranmar_get
              rnno = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF (( rnno*ns .GT. 1 )) THEN
                  ns = 0
              END IF
          END IF
          IF (( ns .GT. 0 )) THEN
              np = np+1
              IF (( np .GT. 10000 )) THEN
                  write(i_log,'(/a)') '***************** Error: '
                  write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','un
     *iform_photons', ' stack size exceeded! ',' $MAXSTACK = ',10000,' n
     *p = ',np
                  write(i_log,'(/a)') '***************** Quiting now.'
                  call exit(1)
              END IF
              X(np)=X(NPold)
              Y(np)=Y(NPold)
              Z(np)=Z(NPold)
              IR(np)=IR(NPold)
              WT(np)=WT(NPold)
              DNEAR(np)=DNEAR(NPold)
              LATCH(np)=LATCH(NPold)
              ZLAST(np)=ZLAST(NPold)
              NFTIME(np)=NFTIME(NPold)
              DO 9251 ISCORE=1,3
                  NPASS(np,ISCORE)=NPASS(NPold,ISCORE)
9251          CONTINUE
9252          CONTINUE
              NSPLIT(np)=NSPLIT(NPold)
              IPHAT(np)=IPHAT(NPold)
              e(np) = energy
              iq(np) = 0
              wt(np) = weight*ns
              u(np) = sint*cphi
              v(np) = sint*sphi
              w(np) = cost
              iphat(np) = ns
          ELSE
              count_kill_tmp = count_kill_tmp + 1
          END IF
9221  CONTINUE
9222  CONTINUE
      n_split = nsample/nbrspl
      DO 9261 i=1,n_split
          IF((rng_seed .GT. 128))call ranmar_get
          rnno = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          cost = 2*rnno-1
          IF (( cost .LT. ct_min .OR. cost .GT. ct_max )) THEN
              sint = 1-cost*cost
              IF (( sint .GT. 0 )) THEN
                  sint = sqrt(sint)
              ELSE
                  sint = 0
              END IF
9271          CONTINUE
                  IF((rng_seed .GT. 128))call ranmar_get
                  xphi = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  xphi = 2*xphi - 1
                  xphi2 = xphi*xphi
                  IF((rng_seed .GT. 128))call ranmar_get
                  yphi = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  yphi2 = yphi*yphi
                  rhophi2 = xphi2 + yphi2
                  IF(rhophi2.LE.1)GO TO9272
              GO TO 9271
9272          CONTINUE
              rhophi2 = 1/rhophi2
              cphi = (xphi2 - yphi2)*rhophi2
              sphi = 2*xphi*yphi*rhophi2
              np = np+1
              IF (( np .GT. 10000 )) THEN
                  write(i_log,'(/a)') '***************** Error: '
                  write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','un
     *iform_photons', ' stack size exceeded! ',' $MAXSTACK = ',10000,' n
     *p = ',np
                  write(i_log,'(/a)') '***************** Quiting now.'
                  call exit(1)
              END IF
              X(np)=X(NPold)
              Y(np)=Y(NPold)
              Z(np)=Z(NPold)
              IR(np)=IR(NPold)
              WT(np)=WT(NPold)
              DNEAR(np)=DNEAR(NPold)
              LATCH(np)=LATCH(NPold)
              ZLAST(np)=ZLAST(NPold)
              NFTIME(np)=NFTIME(NPold)
              DO 9281 ISCORE=1,3
                  NPASS(np,ISCORE)=NPASS(NPold,ISCORE)
9281          CONTINUE
9282          CONTINUE
              NSPLIT(np)=NSPLIT(NPold)
              IPHAT(np)=IPHAT(NPold)
              e(np) = energy
              iq(np) = 0
              wt(np) = weight*nbrspl
              u(np) = sint*cphi
              v(np) = sint*sphi
              w(np) = cost
              iphat(np) = nbrspl
          ELSE
              count_kill_tmp = count_kill_tmp + 1
          END IF
9261  CONTINUE
9262  CONTINUE
      return
      end
      subroutine do_compton
      implicit none
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer*4 np_save,i,j,kill_electrons,nps
      np_save = np
      iphat(np) = 1
      wt(np) = wt(np)/nbrspl
      IF ((ICM_DBS.GT.0 .AND. Z(NP).GT.ZRR_DBS)) THEN
          kill_electrons=0
      ELSE
          kill_electrons=1
      END IF
      x_dbs=x(np)
      y_dbs=y(np)
      z_dbs=z(np)
      ir_dbs=ir(np)
      wt_dbs=wt(np)
      dnear_dbs=dnear(np)
      latch_dbs=latch(np)
      zlast_dbs=zlast(np)
      nftime_dbs=nftime(np)
      nsplit_dbs=nsplit(np)
      DO 9291 j=1,3
          npass_dbs(j) = npass(np,j)
9291  CONTINUE
9292  CONTINUE
      u_dbs=u(np)
      v_dbs=v(np)
      w_dbs=w(np)
      e_dbs=e(np)
      DO 9301 i=1,nbrspl
          IF (( i .GT. 1 )) THEN
              np=np+1
              IF (( np .GT. 10000 )) THEN
                  write(i_log,'(/a)') '***************** Error: '
                  write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','do
     *_compton', ' stack size exceeded! ',' $MAXSTACK = ',10000,' np = '
     *            ,np
                  write(i_log,'(/a)') '***************** Quiting now.'
                  call exit(1)
              END IF
              x(np)=x_dbs
              y(np)=y_dbs
              z(np)=z_dbs
              wt(np)=wt_dbs
              iq(np)=0
              ir(np)=ir_dbs
              dnear(np)=dnear_dbs
              latch(np)=latch_dbs
              zlast(np)=zlast_dbs
              nftime(np)=nftime_dbs
              nsplit(np)=nsplit_dbs
              DO 9311 j=1,3
                  npass(np,j)=npass_dbs(j)
9311          CONTINUE
9312          CONTINUE
              u(np)=u_dbs
              v(np)=v_dbs
              w(np)=w_dbs
              e(np)=e_dbs
              iphat(np)=1
          END IF
          nps = np
          IF((LATCH_OPTION.EQ.2 .OR. LATCH_OPTION.EQ.3))LATCH(np)= LATCH
     *    OUT
          IF((IZLAST.EQ.1))zlast(np)=z(np)
          call compt
          IF ((LATCH_OPTION.EQ.2 .OR. LATCH_OPTION.EQ.3)) THEN
              IF ((np.GT.npold)) THEN
                  LATCH(npold)=LATCHIN
              ELSE
                  LATCH(npold)=LATCHOLD
              END IF
          END IF
          IF((IZLAST.EQ.1 .AND. np.EQ.npold))zlast(npold)=zlastold
          call kill_the_photons(nps,kill_electrons)
          IF ((IZLAST.EQ.2)) THEN
              DO 9321 j=NPold,NP
                  ZLAST(j)=Z(j)
                  XLAST(j)=X(j)
                  YLAST(j)=Y(j)
9321          CONTINUE
9322          CONTINUE
          END IF
9301  CONTINUE
9302  CONTINUE
      npold = np_save
      return
      end
      subroutine do_pair
      implicit none
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer*4 np_save,i,j
      np_save = np
      iphat(np)=1
      wt(np) = wt(np)/nbrspl
      x_dbs=x(np)
      y_dbs=y(np)
      z_dbs=z(np)
      ir_dbs=ir(np)
      wt_dbs=wt(np)
      dnear_dbs=dnear(np)
      latch_dbs=latch(np)
      zlast_dbs=zlast(np)
      nftime_dbs=nftime(np)
      nsplit_dbs=nsplit(np)
      DO 9331 j=1,3
          npass_dbs(j) = npass(np,j)
9331  CONTINUE
9332  CONTINUE
      u_dbs=u(np)
      v_dbs=v(np)
      w_dbs=w(np)
      e_dbs=e(np)
      DO 9341 i=1,nbrspl
          IF (( i .GT. 1 )) THEN
              np=np+1
              IF (( np .GT. 10000 )) THEN
                  write(i_log,'(/a)') '***************** Error: '
                  write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','do
     *_pair', ' stack size exceeded! ',' $MAXSTACK = ',10000,' np = ',np
                  write(i_log,'(/a)') '***************** Quiting now.'
                  call exit(1)
              END IF
              x(np)=x_dbs
              y(np)=y_dbs
              z(np)=z_dbs
              wt(np)=wt_dbs
              iq(np)=0
              ir(np)=ir_dbs
              dnear(np)=dnear_dbs
              latch(np)=latch_dbs
              zlast(np)=zlast_dbs
              nftime(np)=nftime_dbs
              nsplit(np)=nsplit_dbs
              DO 9351 j=1,3
                  npass(np,j)=npass_dbs(j)
9351          CONTINUE
9352          CONTINUE
              u(np)=u_dbs
              v(np)=v_dbs
              w(np)=w_dbs
              e(np)=e_dbs
              iphat(np)=1
          END IF
          call pair
9341  CONTINUE
9342  CONTINUE
      npold = np_save
      return
      end
      subroutine do_photo
      implicit none
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer*4 np_save,i,j
      np_save = np
      iphat(np) = 1
      wt(np) = wt(np)/nbrspl
      x_dbs=x(np)
      y_dbs=y(np)
      z_dbs=z(np)
      ir_dbs=ir(np)
      wt_dbs=wt(np)
      dnear_dbs=dnear(np)
      latch_dbs=latch(np)
      zlast_dbs=zlast(np)
      nftime_dbs=nftime(np)
      nsplit_dbs=nsplit(np)
      DO 9361 j=1,3
          npass_dbs(j) = npass(np,j)
9361  CONTINUE
9362  CONTINUE
      u_dbs=u(np)
      v_dbs=v(np)
      w_dbs=w(np)
      e_dbs=e(np)
      DO 9371 i=1,nbrspl
          IF (( i .GT. 1 )) THEN
              np=np+1
              IF (( np .GT. 10000 )) THEN
                  write(i_log,'(/a)') '***************** Error: '
                  write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','do
     *_photo', ' stack size exceeded! ',' $MAXSTACK = ',10000,' np = ',n
     *            p
                  write(i_log,'(/a)') '***************** Quiting now.'
                  call exit(1)
              END IF
              x(np)=x_dbs
              y(np)=y_dbs
              z(np)=z_dbs
              wt(np)=wt_dbs
              iq(np)=0
              ir(np)=ir_dbs
              dnear(np)=dnear_dbs
              latch(np)=latch_dbs
              zlast(np)=zlast_dbs
              nftime(np)=nftime_dbs
              nsplit(np)=nsplit_dbs
              DO 9381 j=1,3
                  npass(np,j)=npass_dbs(j)
9381          CONTINUE
9382          CONTINUE
              u(np)=u_dbs
              v(np)=v_dbs
              w(np)=w_dbs
              e(np)=e_dbs
              iphat(np)=1
          END IF
          call photo
9371  CONTINUE
9372  CONTINUE
      npold = np_save
      return
      end
      subroutine do_old_rayleigh(nsample)
      implicit none
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/PHOTIN/ EBINDA(12), GE0(12),GE1(12), GMFP0(2000,12),GMFP1(2
     *000,12),GBR10(2000,12),GBR11(2000,12),GBR20(2000,12),GBR21(2000,12
     *), RCO0(12),RCO1(12), RSCT0(100,12),RSCT1(100,12), COHE0(2000,12),
     *COHE1(2000,12),  PHOTONUC0(2000,12),PHOTONUC1(2000,12), DPMFP, MPG
     *EM(1,12), NGR(12)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      integer*4 np_save,i,j,lxxx,nsample,nps
      real*8 xxx,x2,q2,csqthe,rejf,rnnorj
      np_save = np
      iphat(np) = 1
      wt(np) = wt(np)/nsample
      x_dbs=x(np)
      y_dbs=y(np)
      z_dbs=z(np)
      ir_dbs=ir(np)
      wt_dbs=wt(np)
      dnear_dbs=dnear(np)
      latch_dbs=latch(np)
      zlast_dbs=zlast(np)
      nftime_dbs=nftime(np)
      nsplit_dbs=nsplit(np)
      DO 9391 j=1,3
          npass_dbs(j) = npass(np,j)
9391  CONTINUE
9392  CONTINUE
      u_dbs=u(np)
      v_dbs=v(np)
      w_dbs=w(np)
      e_dbs=e(np)
      DO 9401 i=1,nsample
          IF (( i .GT. 1 )) THEN
              np=np+1
              IF (( np .GT. 10000 )) THEN
                  write(i_log,'(/a)') '***************** Error: '
                  write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','do
     *_old_rayleigh', ' stack size exceeded! ',' $MAXSTACK = ',10000,' n
     *p = ',np
                  write(i_log,'(/a)') '***************** Quiting now.'
                  call exit(1)
              END IF
              x(np)=x_dbs
              y(np)=y_dbs
              z(np)=z_dbs
              wt(np)=wt_dbs
              iq(np)=0
              ir(np)=ir_dbs
              dnear(np)=dnear_dbs
              latch(np)=latch_dbs
              zlast(np)=zlast_dbs
              nftime(np)=nftime_dbs
              nsplit(np)=nsplit_dbs
              DO 9411 j=1,3
                  npass(np,j)=npass_dbs(j)
9411          CONTINUE
9412          CONTINUE
              u(np)=u_dbs
              v(np)=v_dbs
              w(np)=w_dbs
              e(np)=e_dbs
              iphat(np)=1
          END IF
9420      CONTINUE
9421          CONTINUE
              IF((rng_seed .GT. 128))call ranmar_get
              xxx = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              LXXX=RCO1(MEDIUM)*XXX+RCO0(MEDIUM)
              X2=RSCT1(LXXX,MEDIUM)*XXX+RSCT0(LXXX,MEDIUM)
              Q2=X2*RMSQ/(20.60744*20.60744)
              COSTHE=1.-Q2/(2.*E(NP)*E(NP))
              IF((ABS(COSTHE).GT.1.0))GO TO 9420
              CSQTHE=COSTHE*COSTHE
              REJF=(1.0+CSQTHE)/2.0
              IF((rng_seed .GT. 128))call ranmar_get
              RNNORJ = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF(((RNNORJ .LE. REJF)))GO TO9422
          GO TO 9421
9422      CONTINUE
          SINTHE=SQRT(1.0-CSQTHE)
          CALL UPHI(2,1)
          nps = np
          call kill_the_photons(nps,0)
9401  CONTINUE
9402  CONTINUE
      npold = np_save
      return
      end
      subroutine do_rayleigh(nsample)
      implicit none
      integer*4 np_save,i,j,lxxx,nsample,nps,lgle
      real*8 loge
      COMMON/PHOTIN/ EBINDA(12), GE0(12),GE1(12), GMFP0(2000,12),GMFP1(2
     *000,12),GBR10(2000,12),GBR11(2000,12),GBR20(2000,12),GBR21(2000,12
     *), RCO0(12),RCO1(12), RSCT0(100,12),RSCT1(100,12), COHE0(2000,12),
     *COHE1(2000,12),  PHOTONUC0(2000,12),PHOTONUC1(2000,12), DPMFP, MPG
     *EM(1,12), NGR(12)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      np_save = np
      iphat(np) = 1
      wt(np) = wt(np)/nsample
      x_dbs=x(np)
      y_dbs=y(np)
      z_dbs=z(np)
      ir_dbs=ir(np)
      wt_dbs=wt(np)
      dnear_dbs=dnear(np)
      latch_dbs=latch(np)
      zlast_dbs=zlast(np)
      nftime_dbs=nftime(np)
      nsplit_dbs=nsplit(np)
      DO 9431 j=1,3
          npass_dbs(j) = npass(np,j)
9431  CONTINUE
9432  CONTINUE
      u_dbs=u(np)
      v_dbs=v(np)
      w_dbs=w(np)
      e_dbs=e(np)
      loge = gle
      LGLE=GE1(MEDIUM)*loge+GE0(MEDIUM)
      DO 9441 i=1,nsample
          IF (( i .GT. 1 )) THEN
              np=np+1
              IF (( np .GT. 10000 )) THEN
                  write(i_log,'(/a)') '***************** Error: '
                  write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','do
     *_rayleigh', ' stack size exceeded! ',' $MAXSTACK = ',10000,' np =
     *',np
                  write(i_log,'(/a)') '***************** Quiting now.'
                  call exit(1)
              END IF
              x(np)=x_dbs
              y(np)=y_dbs
              z(np)=z_dbs
              wt(np)=wt_dbs
              iq(np)=0
              ir(np)=ir_dbs
              dnear(np)=dnear_dbs
              latch(np)=latch_dbs
              zlast(np)=zlast_dbs
              nftime(np)=nftime_dbs
              nsplit(np)=nsplit_dbs
              DO 9451 j=1,3
                  npass(np,j)=npass_dbs(j)
9451          CONTINUE
9452          CONTINUE
              u(np)=u_dbs
              v(np)=v_dbs
              w(np)=w_dbs
              e(np)=e_dbs
              iphat(np)=1
          END IF
          call egs_rayleigh_sampling(medium,e(np),gle,lgle,costhe,sinthe
     *    )
          call uphi(2,1)
          nps = np
          call kill_the_photons(nps,0)
9441  CONTINUE
9442  CONTINUE
      npold = np_save
      return
      end
      subroutine do_smart_compton
      implicit none
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/PHOTIN/ EBINDA(12), GE0(12),GE1(12), GMFP0(2000,12),GMFP1(2
     *000,12),GBR10(2000,12),GBR11(2000,12),GBR20(2000,12),GBR21(2000,12
     *), RCO0(12),RCO1(12), RSCT0(100,12),RSCT1(100,12), COHE0(2000,12),
     *COHE1(2000,12),  PHOTONUC0(2000,12),PHOTONUC1(2000,12), DPMFP, MPG
     *EM(1,12), NGR(12)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 xphi,xphi2,yphi,yphi2,rhophi2
      real*8 ctmin,ctmax,ko,ko2,eps1,eps2,w1,w2,wc,broi,alpha1_t,alpha2_
     *t, alpha_t,alpha1,alpha2,alpha,eps1_t,eps2_t,eps1_0,eps2_0, rnno,r
     *nno1,rnno2,rnno3,rej1,rej2,rejmax,rejf,asample, weight,br,cost,sin
     *t,temp,cphi,sphi,us,vs,un,vn,wn,x1,y1, eps12_t,eps12,sindel,cosdel
     *,sinpsi,aux,ro
      real*8 peig,pese,pesg
      integer*4 nsample,i,ns
      logical need_rotation
      integer*4 ntest
      call get_ctminmax(x(np),y(np),z(np),u(np),v(np),w(np),ro,fs,ssd,ct
     *min,ctmax)
      npold = np
      peig = e(np)
      ko = peig/rm
      broi = 1 + 2*ko
      ko2 = ko*ko
      alpha1_t = Log(broi)
      eps1_t = 1./broi
      eps2_t = 1
      w2 = alpha1_t*(Ko2-2*Ko-2)+(eps2_t-eps1_t)*(1./eps1_t/eps2_t + bro
     *i + Ko2*(eps1_t+eps2_t)/2)
      eps12_t = eps1_t*eps1_t
      alpha2_t = (eps2_t*eps2_t-eps12_t)
      alpha_t = alpha1_t/(alpha1_t+alpha2_t/2)
      eps1 = 1./(1+Ko*(1-ctmin))
      eps2 = 1./(1+Ko*(1-ctmax))
      eps1_0 = eps1
      eps2_0 = eps2
      alpha1 = log(eps2/eps1)
      w1 = alpha1*(Ko2-2*Ko-2)+(eps2-eps1)*(1./eps1/eps2 + broi + Ko2*(e
     *ps1+eps2)/2)
      eps12 = eps1*eps1
      alpha2 = (eps2*eps2-eps12)
      alpha = alpha1/(alpha1+alpha2/2)
      rej1 = 1-(1-eps1)*(broi*eps1-1)/(Ko*Ko*eps1*(1+eps1*eps1))
      rej2 = 1-(1-eps2)*(broi*eps2-1)/(Ko*Ko*eps2*(1+eps2*eps2))
      rejmax = MAX(rej1,rej2)
      wc = w1/w2
      asample = wc*nbrspl
      nsample = asample
      asample = asample - nsample
      IF((rng_seed .GT. 128))call ranmar_get
      rnno = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      IF (( rnno .LT. asample )) THEN
          nsample = nsample + 1
      END IF
      nsample = nsample + 1
      sinpsi = u(npold)*u(npold)+v(npold)*v(npold)
      IF (( sinpsi .GT. 1e-20 )) THEN
          sinpsi = sqrt(sinpsi)
          sindel = v(npold)/sinpsi
          cosdel = u(npold)/sinpsi
          need_rotation = .true.
      ELSE
          need_rotation = .false.
      END IF
      weight = wt(npold)/nbrspl
      DO 9461 i=1,nsample
          IF (( i .EQ. nsample )) THEN
              eps1 = eps1_t
              eps2 = 1
              eps12 = eps12_t
              alpha1 = alpha1_t
              alpha2 = alpha2_t
              alpha = alpha_t
              rejmax = 1
          END IF
9471      CONTINUE
              IF((rng_seed .GT. 128))call ranmar_get
              rnno1 = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF((rng_seed .GT. 128))call ranmar_get
              rnno2 = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF((rng_seed .GT. 128))call ranmar_get
              rnno3 = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF (( rnno1 .LT. alpha )) THEN
                  br = eps1*exp(alpha1*rnno2)
              ELSE
                  br = sqrt(eps12 + rnno2*alpha2)
              END IF
              Temp = (1-Br)/Ko/Br
              Sint = Temp*(2-Temp)
              rejf = 1 - Br*Sint/(1+Br*Br)
              IF(rnno3*rejmax.LE.rejf)GO TO9472
          GO TO 9471
9472      CONTINUE
          pesg = br*peig
          pese = prm + peig - pesg
          IF (( Temp .LT. 2 )) THEN
              cost = 1 - Temp
              sint = sqrt(Sint)
          ELSE
              cost = -1
              sint = 0
          END IF
9481      CONTINUE
              IF((rng_seed .GT. 128))call ranmar_get
              xphi = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              xphi = 2*xphi - 1
              xphi2 = xphi*xphi
              IF((rng_seed .GT. 128))call ranmar_get
              yphi = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              yphi2 = yphi*yphi
              rhophi2 = xphi2 + yphi2
              IF(rhophi2.LE.1)GO TO9482
          GO TO 9481
9482      CONTINUE
          rhophi2 = 1/rhophi2
          cphi = (xphi2 - yphi2)*rhophi2
          sphi = 2*xphi*yphi*rhophi2
          IF (( i .EQ. nsample )) THEN
              IF((br .GT. eps1_0 .AND. br .LT. eps2_0))goto 9490
              ns = nbrspl
          END IF
          IF (( need_rotation )) THEN
              us = sint*cphi
              vs = sint*sphi
              un = w(npold)*cosdel*us - sindel*vs + u(npold)*cost
              vn = w(npold)*sindel*us + cosdel*vs + v(npold)*cost
              wn = w(npold)*cost - sinpsi*us
          ELSE
              un = sint*cphi
              vn = sint*sphi
              wn = w(npold)*cost
          END IF
          IF (( i .LT. nsample )) THEN
              ns = nbrspl
              IF (( wn .GT. 0 )) THEN
                  aux = (ssd-z(npold))/wn
                  x1 = x(npold) + un*aux
                  y1 = y(npold) + vn*aux
                  rsq_dsb = x1*x1+y1*y1
                  IF (( rsq_dsb .LT. fs*fs )) THEN
                      ns = 1
                      IF (( do_dsb .EQ. 1 )) THEN
                          rsq_dsb = rsq_dsb/fs**2
                          DO 9501 k_dsb=1,dsb_nbin
                              IF((rsq_dsb .LT. dsb_rbin(k_dsb+1)))GO TO9
     *                        502
9501                      CONTINUE
9502                      CONTINUE
                          ns = k_dsb
                      END IF
                  END IF
              END IF
              IF (( ns .GT. 1 )) THEN
                  IF((rng_seed .GT. 128))call ranmar_get
                  rnno = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  IF (( rnno*ns .GT. 1 )) THEN
                      ns = 0
                  END IF
              END IF
          END IF
          IF (( ns .GT. 0 )) THEN
              np = np+1
              IF (( np .GT. 10000 )) THEN
                  write(i_log,'(/a)') '***************** Error: '
                  write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','do
     *_smart_compton', ' stack size exceeded! ',' $MAXSTACK = ',10000,'
     *np = ',np
                  write(i_log,'(/a)') '***************** Quiting now.'
                  call exit(1)
              END IF
              X(np)=X(npold)
              Y(np)=Y(npold)
              Z(np)=Z(npold)
              IR(np)=IR(npold)
              WT(np)=WT(npold)
              DNEAR(np)=DNEAR(npold)
              LATCH(np)=LATCH(npold)
              ZLAST(np)=ZLAST(npold)
              NFTIME(np)=NFTIME(npold)
              DO 9511 ISCORE=1,3
                  NPASS(np,ISCORE)=NPASS(npold,ISCORE)
9511          CONTINUE
9512          CONTINUE
              NSPLIT(np)=NSPLIT(npold)
              IPHAT(np)=IPHAT(npold)
              u(np) = un
              v(np) = vn
              w(np) = wn
              iq(np) = 0
              wt(np) = weight*ns
              e(np)=pesg
              iphat(np) = ns
          END IF
9461  CONTINUE
9462  CONTINUE
9490  aux = 1 + Br*Br - 2*Br*cost
      IF (( aux .GT. 1e-8 )) THEN
          cost = (1-Br*cost)/sqrt(aux)
          sint = 1 - cost*cost
          IF (( sint .GT. 0 )) THEN
              sint = -sqrt(sint)
          ELSE
              sint = 0
          END IF
          us = sint*cphi
          vs = sint*sphi
          u(npold) = w(npold)*cosdel*us - sindel*vs + u(npold)*cost
          v(npold) = w(npold)*sindel*us + cosdel*vs + v(npold)*cost
          w(npold) = w(npold)*cost - sinpsi*us
      END IF
      e(npold) = pese
      iq(npold) = -1
      iphat(npold) = nbrspl
      return
      end
      subroutine do_smart_brems
      implicit none
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/PHOTIN/ EBINDA(12), GE0(12),GE1(12), GMFP0(2000,12),GMFP1(2
     *000,12),GBR10(2000,12),GBR11(2000,12),GBR20(2000,12),GBR21(2000,12
     *), RCO0(12),RCO1(12), RSCT0(100,12),RSCT1(100,12), COHE0(2000,12),
     *COHE1(2000,12),  PHOTONUC0(2000,12),PHOTONUC1(2000,12), DPMFP, MPG
     *EM(1,12), NGR(12)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      common/egs_vr/ e_max_rr(3000),  prob_RR,  nbr_split,  i_play_RR,
     *    i_survived_RR,
     *        n_RR_warning,                                        i_do_
     *rr(3000)
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      common/nist_brems/ nb_fdata(0:50,100,12), nb_xdata(0:50,100,12), n
     *b_wdata(50,100,12), nb_idata(50,100,12), nb_emin(12),nb_emax(12),
     *nb_lemin(12),nb_lemax(12), nb_dle(12),nb_dlei(12), log_ap(12)
      real*8 nb_fdata,nb_xdata,nb_wdata,nb_emin,nb_emax,nb_lemin,nb_lema
     *x, nb_dle,nb_dlei,log_ap
      integer*4 nb_idata
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 xphi,xphi2,yphi,yphi2,rhophi2
      real*8 ener, tau, beta2, beta, ct_min, ct_max, wprob, asample, aux
     *1, aux2, sinpsi, sindel, cosdel, rnno, cost, sint, cphi, sphi, r1,
     * us, vs, un, vn, wn, weight, eie, ekin, ese, esg, brmin, waux, ajj
     *,br,alias_sample1,rnno06,rnno07,delta,phi1,phi2,rejf,x1,y1,aux
      real*8 r,ro,d,dmin,wprob1,dist,disti,rnno_o
      integer*4 nsample,i,ibr,ns,jj,l,l1,ip,j
      logical need_rotation,method1
      real*8 peie,pese,pesg
      npold = np
      ener = e(np) - rm
      tau = ener/rm
      beta2 = tau*(tau+2)/(tau+1)**2
      beta = sqrt(beta2)
      call get_ctminmax(x(np),y(np),z(np),u(np),v(np),w(np),ro,fs,ssd,ct
     *_min,ct_max)
      wprob = (ct_max - ct_min)/((1-beta*ct_max)*(1-beta*ct_min)*2* (tau
     *+1)*(tau+1))
      d = ssd - z(np)
      IF (( ro .LE. fs )) THEN
          dmin = d
      ELSE
          dmin = sqrt(d*d + (ro-fs)*(ro-fs))
      END IF
      wprob1 = fs*fs*d/(2*dmin*dmin*dmin)
      aux = (tau+1)*(1-beta*ct_max)
      wprob1 = wprob1/(2*aux*aux)
      IF (( wprob1 .LT. wprob )) THEN
          method1 = .true.
          wprob = wprob1
      ELSE
          method1 = .false.
      END IF
      IF (( wprob .LT. 1 )) THEN
          asample = wprob*nbrspl
          nsample = asample
          asample = asample - nsample
          IF((rng_seed .GT. 128))call ranmar_get
          rnno = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF (( rnno .LT. asample )) THEN
              nsample = nsample + 1
          END IF
      ELSE
          ct_max = 1
          ct_min = -1
          nsample = nbrspl
          method1 = .false.
      END IF
      aux1 = ct_max - ct_min
      aux2 = 1 - beta*ct_max
      weight = wt(np)/nbrspl
      sinpsi = u(npold)*u(npold)+v(npold)*v(npold)
      IF (( sinpsi .GT. 1e-20 )) THEN
          sinpsi = sqrt(sinpsi)
          sindel = v(npold)/sinpsi
          cosdel = u(npold)/sinpsi
          need_rotation = .true.
      ELSE
          need_rotation = .false.
      END IF
      DO 9521 i=1,nsample
          IF (( method1 )) THEN
              IF((rng_seed .GT. 128))call ranmar_get
              r = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF((rng_seed .GT. 128))call ranmar_get
              rnno = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF((rnno .GT. r))r = rnno
9531          CONTINUE
                  IF((rng_seed .GT. 128))call ranmar_get
                  xphi = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  xphi = 2*xphi - 1
                  xphi2 = xphi*xphi
                  IF((rng_seed .GT. 128))call ranmar_get
                  yphi = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  yphi2 = yphi*yphi
                  rhophi2 = xphi2 + yphi2
                  IF(rhophi2.LE.1)GO TO9532
              GO TO 9531
9532          CONTINUE
              rhophi2 = 1/rhophi2
              cphi = (xphi2 - yphi2)*rhophi2
              sphi = 2*xphi*yphi*rhophi2
              x1 = fs*r*cphi
              y1 = fs*r*sphi
              un = x1 - x(npold)
              vn = y1 - y(npold)
              wn = d
              dist = sqrt(un*un + vn*vn + wn*wn)
              disti = 1/dist
              cost = (u(npold)*un + v(npold)*vn + w(npold)*wn)*disti
              rejf = (1-beta*ct_max)*dmin*disti/(1-beta*cost)
              rejf = rejf*rejf*dmin*disti
              IF((rng_seed .GT. 128))call ranmar_get
              rnno = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF (( rnno .LT. rejf )) THEN
                  ns = 1
                  un = un*disti
                  vn = vn*disti
                  wn = wn*disti
              ELSE
                  ns = 0
              END IF
          ELSE
              IF((rng_seed .GT. 128))call ranmar_get
              rnno = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              rnno = rnno*aux1
              cost = (ct_min*aux2+rnno)/(aux2+beta*rnno)
              sint = 1-cost*cost
              IF (( sint .GT. 0 )) THEN
                  sint = sqrt(sint)
              ELSE
                  sint = 0
              END IF
9541          CONTINUE
                  IF((rng_seed .GT. 128))call ranmar_get
                  xphi = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  xphi = 2*xphi - 1
                  xphi2 = xphi*xphi
                  IF((rng_seed .GT. 128))call ranmar_get
                  yphi = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  yphi2 = yphi*yphi
                  rhophi2 = xphi2 + yphi2
                  IF(rhophi2.LE.1)GO TO9542
              GO TO 9541
9542          CONTINUE
              rhophi2 = 1/rhophi2
              cphi = (xphi2 - yphi2)*rhophi2
              sphi = 2*xphi*yphi*rhophi2
              IF (( need_rotation )) THEN
                  us = sint*cphi
                  vs = sint*sphi
                  un = w(npold)*cosdel*us - sindel*vs + u(npold)*cost
                  vn = w(npold)*sindel*us + cosdel*vs + v(npold)*cost
                  wn = w(npold)*cost - sinpsi*us
              ELSE
                  un = sint*cphi
                  vn = sint*sphi
                  wn = w(npold)*cost
              END IF
              ns = 0
              IF (( wn .GT. 0 )) THEN
                  aux = (ssd-z(npold))/wn
                  x1 = x(npold) + un*aux
                  y1 = y(npold) + vn*aux
                  rsq_dsb = x1*x1+y1*y1
                  IF (( rsq_dsb .LE. fs*fs )) THEN
                      ns = 1
                      IF (( do_dsb .EQ. 1 )) THEN
                          rsq_dsb = rsq_dsb/fs**2
                          DO 9551 k_dsb=1,dsb_nbin
                              IF((rsq_dsb .LT. dsb_rbin(k_dsb+1)))GO TO9
     *                        552
9551                      CONTINUE
9552                      CONTINUE
                          ns = k_dsb
                      END IF
                  END IF
              END IF
              IF (( ns .GT. 1 )) THEN
                  IF((rng_seed .GT. 128))call ranmar_get
                  rnno = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  IF (( rnno*ns .GT. 1 )) THEN
                      ns = 0
                  END IF
              END IF
          END IF
          IF (( ns .GT. 0 )) THEN
              np = np+1
              IF (( np .GT. 10000 )) THEN
                  write(i_log,'(/a)') '***************** Error: '
                  write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','do
     *_smart_brems', ' stack size exceeded! ',' $MAXSTACK = ',10000,' np
     * = ',np
                  write(i_log,'(/a)') '***************** Quiting now.'
                  call exit(1)
              END IF
              X(np)=X(npold)
              Y(np)=Y(npold)
              Z(np)=Z(npold)
              IR(np)=IR(npold)
              WT(np)=WT(npold)
              DNEAR(np)=DNEAR(npold)
              LATCH(np)=LATCH(npold)
              ZLAST(np)=ZLAST(npold)
              NFTIME(np)=NFTIME(npold)
              DO 9561 ISCORE=1,3
                  NPASS(np,ISCORE)=NPASS(npold,ISCORE)
9561          CONTINUE
9562          CONTINUE
              NSPLIT(np)=NSPLIT(npold)
              IPHAT(np)=IPHAT(npold)
              u(np) = un
              v(np) = vn
              w(np) = wn
              iq(np) = 0
              wt(np) = weight*ns
              iphat(np) = ns
          END IF
9521  CONTINUE
9522  CONTINUE
      aux1 = 2
      aux2 = 1 - beta
      IF((rng_seed .GT. 128))call ranmar_get
      rnno = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      rnno = rnno*aux1
      cost = (rnno-aux2)/(aux2+beta*rnno)
      sint = 1-cost*cost
      IF (( sint .GT. 0 )) THEN
          sint = sqrt(sint)
      ELSE
          sint = 0
      END IF
9571  CONTINUE
          IF((rng_seed .GT. 128))call ranmar_get
          xphi = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          xphi = 2*xphi - 1
          xphi2 = xphi*xphi
          IF((rng_seed .GT. 128))call ranmar_get
          yphi = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          yphi2 = yphi*yphi
          rhophi2 = xphi2 + yphi2
          IF(rhophi2.LE.1)GO TO9572
      GO TO 9571
9572  CONTINUE
      rhophi2 = 1/rhophi2
      cphi = (xphi2 - yphi2)*rhophi2
      sphi = 2*xphi*yphi*rhophi2
      IF (( need_rotation )) THEN
          us = sint*cphi
          vs = sint*sphi
          un = w(npold)*cosdel*us - sindel*vs + u(npold)*cost
          vn = w(npold)*sindel*us + cosdel*vs + v(npold)*cost
          wn = w(npold)*cost - sinpsi*us
      ELSE
          un = sint*cphi
          vn = sint*sphi
          wn = w(npold)*cost
      END IF
      ns = nbrspl
      IF (( wn .GT. 0 )) THEN
          aux = (ssd-z(npold))/wn
          x1 = x(npold) + un*aux
          y1 = y(npold) + vn*aux
          rsq_dsb = x1*x1+y1*y1
          IF((rsq_dsb .LE. fs*fs))ns = 0
      END IF
      IF (( ns .GT. 0 )) THEN
          np = np+1
          IF (( np .GT. 10000 )) THEN
              write(i_log,'(/a)') '***************** Error: '
              write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','do_sma
     *rt_brems', ' stack size exceeded! ',' $MAXSTACK = ',10000,' np = '
     *        ,np
              write(i_log,'(/a)') '***************** Quiting now.'
              call exit(1)
          END IF
          X(np)=X(npold)
          Y(np)=Y(npold)
          Z(np)=Z(npold)
          IR(np)=IR(npold)
          WT(np)=WT(npold)
          DNEAR(np)=DNEAR(npold)
          LATCH(np)=LATCH(npold)
          ZLAST(np)=ZLAST(npold)
          NFTIME(np)=NFTIME(npold)
          DO 9581 ISCORE=1,3
              NPASS(np,ISCORE)=NPASS(npold,ISCORE)
9581      CONTINUE
9582      CONTINUE
          NSPLIT(np)=NSPLIT(npold)
          IPHAT(np)=IPHAT(npold)
          u(np) = un
          v(np) = vn
          w(np) = wn
          iq(np) = 0
          wt(np) = weight*ns
          iphat(np) = ns
      END IF
      nsample = np - npold
      IF((nsample .LT. 1))nsample = 1
      PEIE=E(NPold)
      EIE=PEIE
      IF ((EIE.LT.50.0)) THEN
          L=1
      ELSE
          L=3
      END IF
      L1 = L+1
      ekin = peie-prm
      brmin = ap(medium)/ekin
      waux = elke - log_ap(medium)
      IF (( ibr_nist .EQ. 1 )) THEN
          ajj = 1 + (waux + log_ap(medium) - nb_lemin(medium))*nb_dlei(m
     *    edium)
          jj = ajj
          ajj = ajj - jj
          IF (( jj .GT. 100 )) THEN
              jj = 100
              ajj = -1
          END IF
      END IF
      ip = npold
      DO 9591 ibr=1,nsample
          ip = ip+1
          IF (( ibr_nist .EQ. 1 )) THEN
              IF (( ekin .GT. nb_emin(medium) )) THEN
                  IF((rng_seed .GT. 128))call ranmar_get
                  r1 = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  IF (( r1 .LT. ajj )) THEN
                      j = jj+1
                  ELSE
                      j = jj
                  END IF
                  br = alias_sample1(50,nb_xdata(0,j,medium), nb_fdata(0
     *            ,j,medium), nb_wdata(1,j,medium),nb_idata(1,j,medium))
              ELSE
                  IF((rng_seed .GT. 128))call ranmar_get
                  br = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
              END IF
              esg = ap(medium)*exp(br*waux)
              pesg = esg
              pese = peie - pesg
              ese = pese
          ELSE
9601          CONTINUE
                  IF((rng_seed .GT. 128))call ranmar_get
                  rnno06 = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  IF((rng_seed .GT. 128))call ranmar_get
                  rnno07 = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  br = brmin*exp(rnno06*waux)
                  esg = ekin*br
                  pesg = esg
                  pese = peie - pesg
                  ese = pese
                  delta = esg/eie/ese*delcm(medium)
                  aux = ese/eie
                  IF (( delta .LT. 1 )) THEN
                      phi1 = dl1(l,medium)+delta*(dl2(l,medium)+delta*dl
     *                3(l,medium))
                      phi2 = dl1(l1,medium)+delta*(dl2(l1,medium)+ delta
     *                *dl3(l1,medium))
                  ELSE
                      phi1 = dl4(l,medium)+dl5(l,medium)*log(delta+dl6(l
     *                ,medium))
                      phi2 = phi1
                  END IF
                  rejf = (1+aux*aux)*phi1 - 2*aux*phi2/3
                  IF(((rnno07 .LT. rejf)))GO TO9602
              GO TO 9601
9602          CONTINUE
          END IF
          IF (( ip .LE. np )) THEN
              e(ip) = pesg
          END IF
9591  CONTINUE
9592  CONTINUE
      e(npold) = pese
      return
      end
      subroutine get_ctminmax(xo,yo,zo,uo,vo,wo,ro,fs,ssd,ct_min,ct_max)
      implicit none
      real*8 xo,yo,zo,uo,vo,wo,ro,fs,ssd,ct_min,ct_max
      real*8 d,d2,st,dmin,dmax,aux
      d = ssd - zo
      d2 = d*d
      ro = sqrt(xo*xo+yo*yo)
      st = 1-wo*wo
      IF (( st .GT. 0 )) THEN
          st = sqrt(st)
      ELSE
          st = 0
      END IF
      IF (( ro .LE. fs )) THEN
          dmin = d
      ELSE
          dmin = sqrt(d2+(fs-ro)*(fs-ro))
      END IF
      dmax = sqrt(d2+(fs+ro)*(fs+ro))
      aux = wo*d-xo*uo-yo*vo
      ct_max = aux+fs*st
      IF (( ct_max .GT. 0 )) THEN
          ct_max = ct_max/dmin
      ELSE
          ct_max = ct_max/dmax
      END IF
      IF((ct_max .GT. 1))ct_max = 1
      ct_min = aux-fs*st
      IF (( ct_min .GT. 0 )) THEN
          ct_min = ct_min/dmax
      ELSE
          ct_min = ct_min/dmin
      END IF
      IF((ct_min .LT. -1))ct_min = -1
      return
      end
      subroutine old_get_ctminmax(x,y,z,u,v,w,fs,ssd,ct_min,ct_max)
      implicit none
      real*8 x,y,z,u,v,w,fs,ssd,ct_min,ct_max
      real*8 ro,aw,d,d2,taux,x1,y1,r,tmp
      ro = sqrt(x*x+y*y)
      d = ssd - z
      d2 = d*d
      IF (( abs(w) .GT. 1e-6 )) THEN
          taux = d/w
          x1 = x+taux*u
          y1 = y+taux*v
          r = sqrt(x1*x1+y1*y1)
          IF (( r .LT. fs )) THEN
              ct_max = 1
          ELSE
              ct_max = (d2+(fs-ro)*(r-ro))/ sqrt((d2+(r-ro)*(r-ro))*(d2+
     *        (fs-ro)*(fs-ro)))
          END IF
          ct_min = (d2-(r-ro)*(fs+ro))/ sqrt((d2+(r-ro)*(r-ro))*(d2+(fs+
     *    ro)*(fs+ro)))
          IF (( w .LT. 0 )) THEN
              tmp = ct_min
              ct_min = -ct_max
              ct_max = -tmp
          END IF
      ELSE
          ct_min = -(fs+ro)/sqrt(d2+(fs+ro)*(fs+ro))
          ct_max = (fs-ro)/sqrt(d2+(fs-ro)*(fs-ro))
      END IF
      return
      end
      subroutine combine_results(file_name)
      implicit none
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/SOURCE/ COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,
     *COSTHETA,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SI
     *GN2,RIN1_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA
     *24, NNPHSP,NPHOTSRC,WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEA
     *M,YBEAM,ZBEAM,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL
     *2,PROBFC,PROBSD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z
     *_SOURCE,E_ph_sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT1
     *00,XSCAN_UNIT,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YIN
     *DEL, EKMAXSRC, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9, Y_SRC9, PR
     *OB_SRC9, ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN,RDISTF,RPDF,RCDF, F
     *NORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COSRNG,SINRNG,WEIGHTOLD,UINOL
     *D,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RSRC_DBS,SSDSRC_DBS,ZSRC_DBS
     *,sigma_src19,DIST24,ALPHA24,BETA24,RBEAMY, xo_src19, yo_src19, NRD
     *IST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p, NPASS_ph_s
     *p, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRATIO_YXF, OL
     *DSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUNT, IERROR,
     *RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB,MONOEN, NR
     *CYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE_FLAG, INIT
     *_ICMOLD,I_MUPHSP_IN,SPCNAM, the_beam_code,the_input_file,the_pegs_
     *file,SPEC_TITLE,phsp_open
      REAL*8 COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,COSTHETA
     *,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SIGN2,RIN1
     *_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA24
      integer*8 NNPHSP, NPHOTSRC
      real*8 WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEAM,YBEAM,ZBEAM
     *,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL2,PROBFC,PROB
     *SD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z_SOURCE,E_ph_
     *sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT100,XSCAN_UNIT
     *,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YINDEL, EKMAXSRC
     *, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9(10), Y_SRC9(10), PROB_SR
     *C9(10), ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN(1000,2),RDISTF(1000)
     *, RPDF(1000),RCDF(1000), FNORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COS
     *RNG,SINRNG,WEIGHTOLD,UINOLD,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RS
     *RC_DBS,SSDSRC_DBS,ZSRC_DBS,sigma_src19,DIST24,ALPHA24,BETA24,RBEAM
     *Y, xo_src19, yo_src19
      INTEGER NRDIST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p,
     * NPASS_ph_sp, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRA
     *TIO_YXF, OLDSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUN
     *T, IERROR, RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB
     *,MONOEN, NRCYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE
     *_FLAG, INIT_ICMOLD,I_MUPHSP_IN
      CHARACTER*256 SPCNAM
      CHARACTER*80 the_beam_code,the_input_file,the_pegs_file,SPEC_TITLE
      logical phsp_open
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common/CH_steps/ count_pII_steps,count_all_steps,is_ch_step
      real*8 count_pII_steps,count_all_steps
      logical is_ch_step
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      character*(*) file_name
      integer*4 egs_get_unit,lnblnk1
      integer*4 IS,I1,I2,I3,I4,TEMPNPASS_ph_sp,TEMPNFAT_ph_sp,IT,ITMAX
      integer*8 TEMPSCFLU_NUM(3,3,5+1,2), TEMPNCASE, TEMPNHSTRY, TEMPNPP
     *HSP(3)
      real*8 TEMPTMCPU
      REAL*8 TEMPSCSTP,TEMPSCSTP2, TEMPSCDSTP,TEMPSCDSTP2,TEMPPIISTP, TE
     *MPSCDOSE(1500,12), TEMPSCDOSE2(1500,12), TEMPSCFLU(3,3,5+1,8), TEM
     *PSCFLU2(3,3,5+1,8), TEMPSCFLU_COV(3,3,5+1,4)
      logical first_time
      data first_time/.true./
      save first_time
      ITMAX=3+LNEXC+LNINC
      IF ((first_time)) THEN
          first_time = .false.
          DATCOUNT = 0
          DO 9611 IS=1,NSC_PLANES
              NPPHSP(IS)=0
              NPFLU(IS)=0
              EKMAXPHSP(IS)=0.
              EKMINPHSPE(IS)=0.
              NPHOTPHSP(IS)=0
9611      CONTINUE
9612      CONTINUE
          NINCPHSP=0
          SCSTP=0
          SCSTP2=0
          SCDSTP=0
          SCDSTP2=0
          PIISTP=0
          SCSTP_LAST=0
          SCDSTP_LAST=0
          count_pII_steps=0
          DO 9621 IT=1,ITMAX
              DO 9631 ID=1,NDOSE_ZONE
                  SCDOSE_LAST(ID,IT)=0
                  SCDOSE(ID,IT)=0.0
                  SCDOSE2(ID,IT)=0.0
                  SCDOSE_TMP(ID,IT)=0.0
9631          CONTINUE
9632          CONTINUE
9621      CONTINUE
9622      CONTINUE
          DO 9641 I1 = 1,3
              DO 9651 I2 = 1,3
                  DO 9661 I3 = 1,5+1
                      SCFLU_LAST(I1,I2,I3,1)=0
                      SCFLU_LAST(I1,I2,I3,2)=0
                      SCFLU_NUM(I1,I2,I3,1)=0
                      SCFLU_NUM(I1,I2,I3,2)=0
                      SCFLU_NOCOV(I1,I2,I3,1)=0
                      SCFLU_NOCOV(I1,I2,I3,2)=0
                      DO 9671 I4=1,4
                          SCFLU_COV(I1,I2,I3,I4)=0.
9671                  CONTINUE
9672                  CONTINUE
                      DO 9681 I4 = 1,8
                          SCFLU(I1,I2,I3,I4)=0.
                          SCFLU2(I1,I2,I3,I4)=0.
                          SCFLU_TMP(I1,I2,I3,I4)=0.
9681                  CONTINUE
9682                  CONTINUE
9661              CONTINUE
9662              CONTINUE
9651          CONTINUE
9652          CONTINUE
9641      CONTINUE
9642      CONTINUE
          NCASEO=0
          TMCPUO=0
          NHSTRYO=0
          NPASS_ph_spO=0
          NFAT_ph_spO=0
          WRITE(6,9690)
9690      FORMAT(/1X,'Summing the following .egsdat files')
          WRITE(6,9700)
9700      FORMAT(1X,'------------------------------------'/)
          WRITE(IOUTLIST,'(/1X,''Summing the following .egsdat files'')'
     *    )
          WRITE(IOUTLIST,'(1X,''------------------------------------''/)
     *')
      END IF
      IORSTRT=egs_get_unit(IORSTRT)
      WRITE(IOUTLIST,'(A)') file_name(:lnblnk1(file_name))
      WRITE(i_log,'(A)') file_name(:lnblnk1(file_name))
      open(IORSTRT,file=file_name,status='old',err=2600)
      DATCOUNT=DATCOUNT+1
      READ(IORSTRT,*,err=7920,end=7920) TEMPSCSTP,TEMPSCSTP2, TEMPSCDSTP
     *,TEMPSCDSTP2,TEMPPIISTP
      READ(IORSTRT,*,err=7920,end=7920) ((TEMPSCDOSE(ID,IT),TEMPSCDOSE2(
     *ID,IT),IT=1,ITMAX),ID=1,NDOSE_ZONE)
      READ(IORSTRT,*,err=7920,end=7920) ((((TEMPSCFLU(I1,I2,I3,I4),TEMPS
     *CFLU2(I1,I2,I3,I4),I1=1,3),I3=1,NSC_ZONES(I2)+1),I2=1,NSC_PLANES),
     *I4=1,8)
      READ(IORSTRT,*,err=7920,end=7920) ((((TEMPSCFLU_COV(I1,I2,I3,I4),I
     *1=1,3),I3=1,NSC_ZONES(I2)+1),I2=1,NSC_PLANES),I4=1,4)
      READ(IORSTRT,*,err=7920,end=7920) ((((TEMPSCFLU_NUM(I1,I2,I3,I4),I
     *1=1,3),I3=1,NSC_ZONES(I2)+1),I2=1,NSC_PLANES),I4=1,2)
      read(IORSTRT,*) urndm,crndm,cdrndm, cmrndm, ixx, jxx, rng_seed, rn
     *g_array
      twom24 = 1./16777216.
      READ(IORSTRT,*,err=7920,end=7920)TEMPNCASE,TEMPNHSTRY,TEMPTMCPU, (
     *TEMPNPPHSP(IS),IS=1,NSC_PLANES),TEMPNPASS_ph_sp,TEMPNFAT_ph_sp
      write(i_log,*) '   ncase = ',TEMPNCASE,' cpu time = ',TEMPTMCPU
      write(IOUTLIST,*) '   ncase = ',TEMPNCASE,' cpu time = ',TEMPTMCPU
      SCSTP=SCSTP+TEMPSCSTP
      SCSTP2=SCSTP2+TEMPSCSTP2
      SCDSTP=SCDSTP+TEMPSCDSTP
      SCDSTP2=SCDSTP2+TEMPSCDSTP2
      PIISTP=PIISTP+TEMPPIISTP
      DO 9711 ID=1,NDOSE_ZONE
          DO 9721 IT=1,ITMAX
              SCDOSE(ID,IT)=SCDOSE(ID,IT)+TEMPSCDOSE(ID,IT)
              SCDOSE2(ID,IT)=SCDOSE2(ID,IT)+TEMPSCDOSE2(ID,IT)
9721      CONTINUE
9722      CONTINUE
9711  CONTINUE
9712  CONTINUE
      DO 9731 I1=1,3
          DO 9741 I2=1,NSC_PLANES
              DO 9751 I3=1,NSC_ZONES(I2)+1
                  SCFLU_NUM(I1,I2,I3,1)=SCFLU_NUM(I1,I2,I3,1)+ TEMPSCFLU
     *            _NUM(I1,I2,I3,1)
                  SCFLU_NUM(I1,I2,I3,2)=SCFLU_NUM(I1,I2,I3,2)+ TEMPSCFLU
     *            _NUM(I1,I2,I3,2)
                  NPFLU(I2)=NPFLU(I2)+TEMPSCFLU_NUM(I1,I2,I3,1)+ TEMPSCF
     *            LU_NUM(I1,I2,I3,2)
                  DO 9761 I4=1,4
                      SCFLU_COV(I1,I2,I3,I4)=SCFLU_COV(I1,I2,I3,I4)+ TEM
     *                PSCFLU_COV(I1,I2,I3,I4)
9761              CONTINUE
9762              CONTINUE
                  DO 9771 I4=1,8
                      SCFLU(I1,I2,I3,I4)=SCFLU(I1,I2,I3,I4)+ TEMPSCFLU(I
     *                1,I2,I3,I4)
                      SCFLU2(I1,I2,I3,I4)=SCFLU2(I1,I2,I3,I4)+ TEMPSCFLU
     *                2(I1,I2,I3,I4)
9771              CONTINUE
9772              CONTINUE
9751          CONTINUE
9752          CONTINUE
9741      CONTINUE
9742      CONTINUE
9731  CONTINUE
9732  CONTINUE
      NCASEO=NCASEO+TEMPNCASE
      NHSTRYO=NHSTRYO+TEMPNHSTRY
      TMCPUO=TMCPUO+TEMPTMCPU
      DO 9781 IS=1,NSC_PLANES
          NPPHSP(IS)=NPPHSP(IS)+TEMPNPPHSP(IS)
9781  CONTINUE
9782  CONTINUE
      NPASS_ph_spO=NPASS_ph_spO+TEMPNPASS_ph_sp
      NFAT_ph_spO=NFAT_ph_spO+TEMPNFAT_ph_sp
      CLOSE(UNIT=IORSTRT)
      return
2600  CONTINUE
      WRITE(i_log,*) 'Error opening file '
      return
7920  CONTINUE
      write(i_log,*) 'Error reading file '
      close(UNIT=IORSTRT)
      return
      end
      subroutine get_cse_factors
      implicit none
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/GetInput/ ALLOWED_INPUTS(100,0:5),   VALUES_SOUGHT(100),  C
     *HAR_VALUE(100,100),  VALUE(100,100),  DEFAULT(100),  VALUE_MIN(100
     *),  VALUE_MAX(100),  NVALUE(100),  TYPE(100),      ERROR_FLAGS(100
     *),   i_errors,  NMIN, NMAX,   ERROR_FLAG,  DELIMETER
      character ALLOWED_INPUTS*64,VALUES_SOUGHT*64, CHAR_VALUE*256,DELIM
     *ETER*64
      real*8 VALUE,DEFAULT,VALUE_MIN,VALUE_MAX
      integer*4 NVALUE,TYPE,NMIN,NMAX,ERROR_FLAG,ERROR_FLAGS,i_errors
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/ELECIN/ esig_e(12),psig_e(12), esige_max, psige_max, range_
     *ep(0:1,500,12), E_array(500,12), etae_ms0(500,12),etae_ms1(500,12)
     *,etap_ms0(500,12),etap_ms1(500,12),q1ce_ms0(500,12),q1ce_ms1(500,1
     *2),q1cp_ms0(500,12),q1cp_ms1(500,12),q2ce_ms0(500,12),q2ce_ms1(500
     *,12),q2cp_ms0(500,12),q2cp_ms1(500,12),blcce0(500,12),blcce1(500,1
     *2), EKE0(12),EKE1(12), XR0(12),TEFF0(12),BLCC(12),XCC(12), ESIG0(5
     *00,12),ESIG1(500,12),PSIG0(500,12),PSIG1(500,12),EDEDX0(500,12),ED
     *EDX1(500,12),PDEDX0(500,12),PDEDX1(500,12),EBR10(500,12),EBR11(500
     *,12),PBR10(500,12),PBR11(500,12),PBR20(500,12),PBR21(500,12),TMXS0
     *(500,12),TMXS1(500,12), expeke1(12), IUNRST(12),EPSTFL(12),IAPRIM(
     *12), sig_ismonotone(0:1,12)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer*4 i,ival,n,imed
      DO 9791 i=1,25
          cs_enhance(i) = 0
9791  CONTINUE
9792  CONTINUE
      use_cs_enhance = .false.
      ival = 1
      values_sought(ival) = 'SCALE XCC MEDIUM'
      nvalue(ival) = 0
      type(ival) = 0
      value_min(ival) = 0
      value_max(ival) = nmed
      default(ival) = 0
      ival = ival + 1
      values_sought(ival) = 'SCALE XCC FACTOR'
      nvalue(ival) = 0
      type(ival) = 1
      value_min(ival) = 0
      value_max(ival) = 1e10
      default(ival) = 1
      ival = ival + 1
      values_sought(ival) = 'CSE IN CMS'
      nvalue(ival) = 0
      type(ival) = 0
      value_min(ival) = 1
      value_max(ival) = 25
      default(ival) = 25
      ival = ival + 1
      values_sought(ival) = 'CSE FACTORS'
      nvalue(ival) = 0
      type(ival) = 1
      value_min(ival) = 1
      value_max(ival) = 1e10
      default(ival) = 1
      Nmin = ival-3
      Nmax = ival
      delimeter = 'USER INPUTS'
      call get_input
      error_flag = 0
      IF (( error_flags(ival-3) .EQ. 0 .AND. error_flags(ival-2) .EQ. 0
     *)) THEN
          n = min(nvalue(ival-3),nvalue(ival-2))
          DO 9801 i=1,n
              imed = value(ival-3,i)
              IF (( imed .GT. 0 .AND. imed .LE. nmed )) THEN
                  write(i_log,*) '*** Scaling xcc of medium ',imed,' wit
     *h ', value(ival-2,i)
                  xcc(imed) = xcc(imed)*value(ival-2,i)
              END IF
9801      CONTINUE
9802      CONTINUE
      END IF
      IF (( error_flags(ival-1) .EQ. 0 .AND. error_flags(ival) .EQ. 0 ))
     * THEN
          n = min(nvalue(ival-1),nvalue(ival))
          IF (( n .GT. 0 )) THEN
              DO 9811 i=1,n
                  cs_enhance(int(value(ival-1,i))) = value(ival,i)
9811          CONTINUE
9812          CONTINUE
              DO 9821 i=1,25
                  IF (( cs_enhance(i) .GT. 1 )) THEN
                      use_cs_enhance = .true.
                      GO TO9822
                  END IF
9821          CONTINUE
9822          CONTINUE
              IF (( use_cs_enhance )) THEN
                  WRITE(6,9830)
9830              FORMAT(//'********** Photon cross section enhancementw
     *ill be used', ' in the following CMs: ******')
                  DO 9841 i=1,25
                      IF (( cs_enhance(i) .GT. 1 )) THEN
                          WRITE(6,9850)i,cs_enhance(i)
9850                      FORMAT('   ',i3,5x,f12.4)
                      END IF
9841              CONTINUE
9842              CONTINUE
                  WRITE(6,9860)
9860              FORMAT(//'********************************************
     ******', '*****************************'//)
                  return
              END IF
          END IF
      END IF
      WRITE(6,9870)
9870  FORMAT(//'************* Photon cross section enhancement will notb
     *e used'//)
      return
      end
      subroutine beamlib_max_energy(E)
      implicit none
      real*8 E
      COMMON/SOURCE/ COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,
     *COSTHETA,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SI
     *GN2,RIN1_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA
     *24, NNPHSP,NPHOTSRC,WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEA
     *M,YBEAM,ZBEAM,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL
     *2,PROBFC,PROBSD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z
     *_SOURCE,E_ph_sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT1
     *00,XSCAN_UNIT,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YIN
     *DEL, EKMAXSRC, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9, Y_SRC9, PR
     *OB_SRC9, ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN,RDISTF,RPDF,RCDF, F
     *NORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COSRNG,SINRNG,WEIGHTOLD,UINOL
     *D,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RSRC_DBS,SSDSRC_DBS,ZSRC_DBS
     *,sigma_src19,DIST24,ALPHA24,BETA24,RBEAMY, xo_src19, yo_src19, NRD
     *IST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p, NPASS_ph_s
     *p, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRATIO_YXF, OL
     *DSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUNT, IERROR,
     *RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB,MONOEN, NR
     *CYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE_FLAG, INIT
     *_ICMOLD,I_MUPHSP_IN,SPCNAM, the_beam_code,the_input_file,the_pegs_
     *file,SPEC_TITLE,phsp_open
      REAL*8 COSGAMMA,GAMMA,ONEMCOSGAM,THETAIN,RTHETAIN, THETAI,COSTHETA
     *,SINTHETA, DUMMY15,DUMMY11,DUMMY22,UINP,VINP,WINP,SIGN1,SIGN2,RIN1
     *_SRC18, RIN2_SRC18,RINMAX,SALPHA24,CALPHA24,SBETA24, CBETA24
      integer*8 NNPHSP, NPHOTSRC
      real*8 WBEAM, RBEAM,RBEAM0,RBEAM2,UINC,VINC,WINC,XBEAM,YBEAM,ZBEAM
     *,DISTRH,DSTRH2, DISTZ,DISTZ2, DISTB,DISTB2,RCYL1,RCYL2,PROBFC,PROB
     *SD,PROBBK,ASIDE,ZCOFST,ZSOFST, RMINBM,RMINSQ,EINSRC,Z_SOURCE,E_ph_
     *sp_e,E_ph_sp_g,E_ph_sp_p,E_MAX_ph_sp, SINGAMMA,FD_AT100,XSCAN_UNIT
     *,XYBEAM,XBEAM0,YBEAM0, XINL,XINU,YINL,YINU,XINDEL,YINDEL, EKMAXSRC
     *, EKMAX, EKMINSRCE, NINCSRC, ZSRC, X_SRC9(10), Y_SRC9(10), PROB_SR
     *C9(10), ZSMIN, ZSMAX, RNNO1, RNNO2,AK, RCDFIN(1000,2),RDISTF(1000)
     *, RPDF(1000),RCDF(1000), FNORM20, IBNSOK, GRIDSZ, RIN, ZFOCUS, COS
     *RNG,SINRNG,WEIGHTOLD,UINOLD,VINOLD,WINOLD,XINOLD,YINOLD,ZINOLD, RS
     *RC_DBS,SSDSRC_DBS,ZSRC_DBS,sigma_src19,DIST24,ALPHA24,BETA24,RBEAM
     *Y, xo_src19, yo_src19
      INTEGER NRDIST,NSRCRG,NSHIST,NSLEFT,N_ph_sp_e,N_ph_sp_g,N_ph_sp_p,
     * NPASS_ph_sp, NPASS_ph_spO, NFAT_ph_sp, NFAT_ph_spO, INIT_ICM, IRA
     *TIO_YXF, OLDSRC,NPTS_SRC9, MIN_CM_SRC3, MAX_CM_SRC3, MODEIN, ICOUN
     *T, IERROR, RLAST, IB20, K20,IRDIST,CHOSEN_SRC18,ISOURC,OUTCNT,IFPB
     *,MONOEN, NRCYCL,CYCLNUM,IPARALLEL,PARNUM,ISRC_DBS,i_iaea_in,INSIDE
     *_FLAG, INIT_ICMOLD,I_MUPHSP_IN
      CHARACTER*256 SPCNAM
      CHARACTER*80 the_beam_code,the_input_file,the_pegs_file,SPEC_TITLE
      logical phsp_open
      E = EKMAX
      return
      end
      subroutine dsb_init_sampling(dsb_delta,fs,dsb_aeff,nbin_max,dsb_nb
     *in,dsb_rbin, dsb_prob,dsb_ibin)
      implicit none
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 dsb_delta,fs,dsb_aeff,dsb_rbin(*),dsb_prob(*)
      integer*4 nbin_max,dsb_nbin,dsb_ibin(*)
      integer*4 j,jh,jl
      real*8 sum,aux,pi2,dphi
      parameter (pi2=6.283185307179586477025617918812372408865)
      IF (( dsb_delta .GE. fs )) THEN
          dsb_delta = 0
          dsb_nbin = 1
          return
      END IF
      dsb_nbin = pi2/acos(1-(dsb_delta/fs)**2/2)-1
      IF (( dsb_nbin .LT. 1 )) THEN
          dsb_nbin = 1
          dsb_delta = 0
          return
      END IF
      IF (( dsb_nbin .GT. nbin_max )) THEN
          WRITE(6,9880)dsb_delta,fs,dsb_nbin,nbin_max
9880      FORMAT(/'In subroutine dsb_init_sampling: '/ '  for delta = ',
     *f10.4,' and FS = ',f10.4,' one needs ',i4,/, '  sampling bins. Thi
     *s is more than the maximum ',i4,/, '  => adjusting number of sampl
     *ing bins to maximum'/)
          dsb_nbin = nbin_max
      END IF
      dsb_delta = sqrt(2*(1-cos(pi2/(dsb_nbin+1))))
      dsb_rbin(1) = 0
      sum = 0
      DO 9891 j=2,dsb_nbin
          dphi = pi2/j
          dsb_rbin(j) = (dsb_delta/sqrt(2*(1-cos(dphi))))**2
          dsb_prob(j-1) = (dsb_rbin(j)-dsb_rbin(j-1))/(j-1)
          sum = sum + dsb_prob(j-1)
          dsb_ibin(j-1) = -1
9891  CONTINUE
9892  CONTINUE
      dsb_rbin(dsb_nbin+1) = 1
      dsb_prob(dsb_nbin) = (1 - dsb_rbin(dsb_nbin))/dsb_nbin
      sum = sum + dsb_prob(dsb_nbin)
      dsb_aeff = sum
      sum = sum/dsb_nbin
      DO 9901 j=1,dsb_nbin-1
          DO 9911 jh=1,dsb_nbin-1
              IF((dsb_ibin(jh) .LT. 0 .AND. dsb_prob(jh) .GT. sum))GO TO
     *        9912
9911      CONTINUE
9912      CONTINUE
          DO 9921 jl=1,dsb_nbin-1
              IF((dsb_ibin(jl) .LT. 0 .AND. dsb_prob(jl) .LT. sum))GO TO
     *        9922
9921      CONTINUE
9922      CONTINUE
          aux = sum - dsb_prob(jl)
          dsb_prob(jh) = dsb_prob(jh) - aux
          dsb_prob(jl) = dsb_prob(jl)/sum
          dsb_ibin(jl) = jh
9901  CONTINUE
9902  CONTINUE
      DO 9931 j=1,dsb_nbin
          IF (( dsb_ibin(j) .LT. 0 )) THEN
              dsb_prob(j) = dsb_prob(j)/sum
              dsb_ibin(j) = j
          END IF
9931  CONTINUE
9932  CONTINUE
      return
      end
      subroutine dsb_get_point(fs,nbin,rbin,prob,ibin,x,y,phat)
      implicit none
      real*8 fs,rbin(*),prob(*),x,y
      integer*4 nbin,ibin(*),phat
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      real*8 rnno1,rnno2,rnno3,rnno4,r,phi,pi2
      integer*4 j
      parameter (pi2=6.283185307179586477025617918812372408865)
      IF((rng_seed .GT. 128))call ranmar_get
      rnno1 = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      IF((rng_seed .GT. 128))call ranmar_get
      rnno2 = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      IF((rng_seed .GT. 128))call ranmar_get
      rnno3 = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      IF((rng_seed .GT. 128))call ranmar_get
      rnno4 = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      j = 1 + rnno1*nbin
      IF((rnno2 .GT. prob(j)))j = ibin(j)
      r = fs*sqrt(rbin(j)*rnno3 + rbin(j+1)*(1-rnno3))
      phi = pi2*rnno4
      x = r*cos(phi)
      y = r*sin(phi)
      phat = j
      return
      end
      SUBROUTINE GET_BCSE_PARAMETERS
      IMPLICIT NONE
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/ELECIN/ esig_e(12),psig_e(12), esige_max, psige_max, range_
     *ep(0:1,500,12), E_array(500,12), etae_ms0(500,12),etae_ms1(500,12)
     *,etap_ms0(500,12),etap_ms1(500,12),q1ce_ms0(500,12),q1ce_ms1(500,1
     *2),q1cp_ms0(500,12),q1cp_ms1(500,12),q2ce_ms0(500,12),q2ce_ms1(500
     *,12),q2cp_ms0(500,12),q2cp_ms1(500,12),blcce0(500,12),blcce1(500,1
     *2), EKE0(12),EKE1(12), XR0(12),TEFF0(12),BLCC(12),XCC(12), ESIG0(5
     *00,12),ESIG1(500,12),PSIG0(500,12),PSIG1(500,12),EDEDX0(500,12),ED
     *EDX1(500,12),PDEDX0(500,12),PDEDX1(500,12),EBR10(500,12),EBR11(500
     *,12),PBR10(500,12),PBR11(500,12),PBR20(500,12),PBR21(500,12),TMXS0
     *(500,12),TMXS1(500,12), expeke1(12), IUNRST(12),EPSTFL(12),IAPRIM(
     *12), sig_ismonotone(0:1,12)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/GetInput/ ALLOWED_INPUTS(100,0:5),   VALUES_SOUGHT(100),  C
     *HAR_VALUE(100,100),  VALUE(100,100),  DEFAULT(100),  VALUE_MIN(100
     *),  VALUE_MAX(100),  NVALUE(100),  TYPE(100),      ERROR_FLAGS(100
     *),   i_errors,  NMIN, NMAX,   ERROR_FLAG,  DELIMETER
      character ALLOWED_INPUTS*64,VALUES_SOUGHT*64, CHAR_VALUE*256,DELIM
     *ETER*64
      real*8 VALUE,DEFAULT,VALUE_MIN,VALUE_MAX
      integer*4 NVALUE,TYPE,NMIN,NMAX,ERROR_FLAG,ERROR_FLAGS,i_errors
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      common/egs_vr/ e_max_rr(3000),  prob_RR,  nbr_split,  i_play_RR,
     *    i_survived_RR,
     *        n_RR_warning,                                        i_do_
     *rr(3000)
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 EIL, SIGT_OLD,SIGT_NEW_I,SIGT_NEW_II, BR1_OLD,BR2_OLD,BR1_N
     *EW_I,BR1_NEW_II,BR2_NEW_I,BR2_NEW_II, SIG_BREM_NEW,SIG_BHABHA, SIG
     *E_I,SIGE_II,SIGP_I,SIGP_II,EDEDX,PDEDX
      logical is_ok
      integer*4 I,k,MEDIUM,egs_add_medium,nmed_i,lnblnk1,nlen
      DO 9941 I=1,12
          is_bcse_medium(i) = .false.
9941  CONTINUE
9942  CONTINUE
      NMIN = 1
      NMAX = 5
      DELIMETER = 'BCSE'
      I = 1
      VALUES_SOUGHT(I) = 'Use BCSE'
      NVALUE(I) = 1
      TYPE(I) = 3
      ALLOWED_INPUTS(I,0) = 'Off'
      ALLOWED_INPUTS(I,1) = 'On'
      I = I+1
      VALUES_SOUGHT(I) = 'Media to enhance'
      NVALUE(I) = 0
      TYPE(I) = 2
      I = I+1
      VALUES_SOUGHT(I) = 'Enhancement constant'
      NVALUE(I) = 1
      TYPE(I) = 1
      VALUE_MIN(I) = 1e-30
      VALUE_MAX(I) = 1e+30
      DEFAULT(I) = 1
      I = I+1
      VALUES_SOUGHT(I) = 'Enhancement power'
      NVALUE(I) = 1
      TYPE(I) = 1
      VALUE_MIN(I) = -10
      VALUE_MAX(I) = 10
      DEFAULT(I) = 0
      I = I+1
      VALUES_SOUGHT(I) = 'Russian Roulette'
      NVALUE(I) = 1
      TYPE(I) = 3
      ALLOWED_INPUTS(I,0) = 'Off'
      ALLOWED_INPUTS(I,1) = 'On'
      CALL GET_INPUT
      IF ((ERROR_FLAGS(1) .NE. 0 .OR. ERROR_FLAGS(2) .NE. 0 .OR. ERROR_F
     *LAGS(3) .NE. 0 .OR. ERROR_FLAGS(4) .NE. 0 .OR. VALUE(1,1) .NE. 1))
     * THEN
          WRITE(6,9950)
9950      FORMAT(//'*** Brem. cross section enhancement WILL NOT be used
     * ***'//)
          USE_BCSE = .FALSE.
          RETURN
      END IF
      nmed_i = nmed
      nmed_enhance = 0
      DO 9961 i=1,nvalue(2)
          nlen = lnblnk1(char_value(2,i))
          IF((nlen .LT. 80))char_value(2,i)(nlen+1:nlen+1) = char(0)
          medium = egs_add_medium(char_value(2,i))
          IF (( medium .GT. 0 .AND. medium .LE. nmed_i )) THEN
              IF((.NOT.is_bcse_medium(medium)))nmed_enhance = nmed_enhan
     *        ce + 1
              is_bcse_medium(medium) = .true.
          ELSE
              write(i_log,'(/a)') '***************** Warning: '
              write(i_log,*) 'BCSE inputs: no medium ',char_value(2,i),'
     * defined'
              nmed = nmed_i
          END IF
9961  CONTINUE
9962  CONTINUE
      IF (( nmed_enhance .LT. 1 )) THEN
          WRITE(6,9970)
9970      FORMAT(//'*** No valid BCSE media defined -->')
          WRITE(6,9980)
9980      FORMAT('*** Brem. cross section enhancement WILL NOT be used *
     ***'//)
          USE_BCSE = .FALSE.
          RETURN
      END IF
      USE_BCSE = .TRUE.
      BCSE_FACTOR_C = VALUE(3,1)
      BCSE_POWER_N = VALUE(4,1)
      IF ((IBRSPL .GT. 0)) THEN
          NBRSPL_ORGNL = NBRSPL
      ELSE
          NBRSPL_ORGNL = BCSE_FACTOR_C
      END IF
      IF ((VALUE(5,1) .EQ. 1)) THEN
          IF ((IBRSPL.EQ.0)) THEN
              I_PLAY_RR=1
              PROB_RR=1./BCSE_FACTOR_C
          ELSE IF((IBRSPL.EQ.1)) THEN
              IRRLTT=2
              I_PLAY_RR=1
              PROB_RR=1/FLOAT(NBRSPL)
          END IF
      END IF
      IF ((IBRSPL.EQ.2)) THEN
          I_PLAY_RR=0
      END IF
      WRITE(6,9990)
9990  FORMAT(//' *** Brem. cross section enhancement WILL be used ***')
      WRITE(6,10000)nmed_enhance
10000 FORMAT(' *** The following ',I2,' media will be enhanced:')
      DO 10011 i=1,12
          IF((is_bcse_medium(i)))write(i_log,'(9x,24a1)') (media(k,i),k=
     *    1,24)
10011 CONTINUE
10012 CONTINUE
      IF (( BCSE_POWER_N .GT. 0 )) THEN
          WRITE(6,10020)BCSE_FACTOR_C,BCSE_POWER_N
10020     FORMAT('     Enhancement factor will be 1 + C*E**N WITH C = ',
     *E14.6,' N = ', F9.2)
      ELSE
          WRITE(6,10030)BCSE_FACTOR_C
10030     FORMAT('     Constant enhancement factor  =',F12.2)
      END IF
      WRITE(6,10040)I_PLAY_RR, PROB_RR
10040 FORMAT('     Play Russian Roulette  =',I2, ' with probability ',E1
     *0.2)
      RETURN
      END
      SUBROUTINE UNIFORM_PHOTONS_4PI(NSAMPLE,ENERGY)
      IMPLICIT NONE
      integer*4 NSAMPLE,I
      double precision energy
      real*8 WEIGHT,RNNO,PHI,SINT
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      WEIGHT = WT(NPOLD)/NSAMPLE
      NP=NP-1
      DO 10051 I=1,NSAMPLE
          NP = NP+1
          IF (( NP .GT. 10000 )) THEN
              write(i_log,'(/a)') '***************** Error: '
              write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','UNIFOR
     *M_PHOTONS_4PI', ' stack size exceeded! ',' $MAXSTACK = ',10000,' n
     *p = ',NP
              write(i_log,'(/a)') '***************** Quiting now.'
              call exit(1)
          END IF
          X(NP)=X(NPOLD)
          Y(NP)=Y(NPOLD)
          Z(NP)=Z(NPOLD)
          IR(NP)=IR(NPOLD)
          WT(NP)=WT(NPOLD)
          DNEAR(NP)=DNEAR(NPOLD)
          LATCH(NP)=LATCH(NPOLD)
          ZLAST(NP)=ZLAST(NPOLD)
          NFTIME(NP)=NFTIME(NPOLD)
          DO 10061 ISCORE=1,3
              NPASS(NP,ISCORE)=NPASS(NPOLD,ISCORE)
10061     CONTINUE
10062     CONTINUE
          NSPLIT(NP)=NSPLIT(NPOLD)
          IPHAT(NP)=IPHAT(NPOLD)
          E(NP) = ENERGY
          IQ(NP) = 0
          WT(NP) = WEIGHT
          IF((rng_seed .GT. 128))call ranmar_get
          RNNO = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          PHI=3.1415927*(2.0*RNNO-1.0)
          IF((rng_seed .GT. 128))call ranmar_get
          RNNO = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          W(NP) = 2.0*RNNO-1.0
          SINT = 1.0-W(NP)*W(NP)
          IF (( SINT .GT. 0 )) THEN
              SINT = SQRT(SINT)
          ELSE
              SINT = 0
          END IF
          U(NP)=SINT*COS(PHI)
          V(NP)=SINT*SIN(PHI)
10051 CONTINUE
10052 CONTINUE
      RETURN
      END
      SUBROUTINE GET_REJPLN
      IMPLICIT NONE
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      COMMON/GetInput/ ALLOWED_INPUTS(100,0:5),   VALUES_SOUGHT(100),  C
     *HAR_VALUE(100,100),  VALUE(100,100),  DEFAULT(100),  VALUE_MIN(100
     *),  VALUE_MAX(100),  NVALUE(100),  TYPE(100),      ERROR_FLAGS(100
     *),   i_errors,  NMIN, NMAX,   ERROR_FLAG,  DELIMETER
      character ALLOWED_INPUTS*64,VALUES_SOUGHT*64, CHAR_VALUE*256,DELIM
     *ETER*64
      real*8 VALUE,DEFAULT,VALUE_MIN,VALUE_MAX
      integer*4 NVALUE,TYPE,NMIN,NMAX,ERROR_FLAG,ERROR_FLAGS,i_errors
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      IF ((IBRSPL.EQ.2)) THEN
          NMIN = 1
          NMAX = 1
          DELIMETER = 'DBS REJECTION PLANE'
          VALUES_SOUGHT(1) = 'Use a rejection plane'
          NVALUE(1) = 1
          TYPE(1) = 3
          ALLOWED_INPUTS(1,0) = 'Off'
          ALLOWED_INPUTS(1,1) = 'On'
          CALL GET_INPUT
          IF ((ERROR_FLAGS(1) .NE. 0 .OR. VALUE(1,1) .NE. 1)) THEN
              WRITE(6,10070)
10070         FORMAT(//'*** No rejection plane will be used with DBS ***
     *'/ '*** Correlated-particle warning ***'//)
              USE_REJPLN = .FALSE.
          ELSE
              VALUES_SOUGHT(1) = 'Z(cm) from zero reference plane'
              NVALUE(1) = 1
              TYPE(1) = 1
              VALUE_MIN(1) = 0
              VALUE_MAX(1) = SSD
              DEFAULT(1) = SSD
              CALL GET_INPUT
              USE_REJPLN = .TRUE.
              Z_REJPLN = VALUE(1,1)
              FLAG_REJPLN=0
              WRITE(6,10080)Z_REJPLN
10080         FORMAT(//'** A rejection plane will be used with DBS **'/'
     *Z(cm) from zero reference plane =',F12.2//)
          END IF
      END IF
      RETURN
      END
#define HAVE_LOAD_DSO
#ifndef HAVE_LOAD_DSO
      subroutine init_beamsource(i_parallel,n_parallel,i_log,conf_name,
     *hen_house,egs_home,the_beam_code, the_pegs_file,the_input_file)
      integer*4 i_parallel,n_parallel
      character*(*) conf_name
      character*(*) hen_house,egs_home,the_beam_code,the_pegs_file,the_i
     *nput_file
      write(6,*) 'You need a working C compiler to use source 9!'
      call exit(1)
      end
      subroutine sample_beamsource(einsrc,xsrc,ysrc,zsrc,usrc,vsrc,wsrc,
     *weight, iqin,latchi,nhist,iphatsrc)
      return
      end
      subroutine finish_beamsource
      return
      end
#endif
      SUBROUTINE XVGRPLOT (X, Y, ERRY, NPTS, CURVENUM, SERIESTITLE, XTIT
     *LE, YTITLE, GRAPHTITLE, SUBTITLE, UNITNUM, TYPE, HISTXMIN, AXISTYP
     *E)
      IMPLICIT NONE
      integer*4 MAX, IDEBUG
      PARAMETER (MAX = 400)
      integer*4 NPTS,NPTS1,CURVENUM, COUNT,UNITNUM,TYPE,AXISTYPE
      real*8 X(NPTS),Y(NPTS),ERRY(NPTS),YMIN,HISTXMIN,ERRYOLD,SMALLESTX,
     * SMALLESTY,FUDGE
      integer*4 TITLELENGTH,SUBLENGTH,XAXISLENGTH,YAXISLENGTH,SERIESLENG
     *TH
      integer*4 LOGX, LOGY, LOGDY,ZEROYCOUNT
      CHARACTER*(*) SUBTITLE
      CHARACTER*(*) GRAPHTITLE,XTITLE,YTITLE,SERIESTITLE
      CHARACTER*10 INDEX
      CHARACTER*3 INDEXNUM
      logical TESTFILE, ALLPOS
      real*8 one
      parameter (one = 1)
      FUDGE = 1.e-10
      IDEBUG = 0
      IF ((IDEBUG .EQ. 1)) THEN
        write(6,'(//'' Entering xvgrplot ''/)')
        write(6,'('' Curve'',I3,'' to go to unit'',I3)')CURVENUM,UNITNUM
        write(6,'(''SERIESTITLE: '',a60)') SERIESTITLE
        write(6,'(''XTITLE:      '',a60)') XTITLE
        write(6,'(''YTITLE       '',a60)') YTITLE
        write(6,'(''GRAPHTILE:   '',a60)') graphtitle
        write(6,'(''SUBTITLE:    '',a80)') subtitle
      END IF
      IF (( NPTS .gt. MAX)) THEN
        WRITE(6,10090)NPTS, MAX
10090   FORMAT(//' **************************'/ ' Number of points asked
     * for =', I5, ' is greater than max allowed of', I4/ ' Setting NPTS
     * to MAX, you could adjust MAX in xvgrplot.mortran'/ ' ************
     ***************'//)
        NPTS1 = MAX
      ELSE
        NPTS1 = NPTS
      END IF
      INQUIRE(UNIT = UNITNUM,OPENED=TESTFILE)
      IF ((.NOT.TESTFILE)) THEN
        WRITE(6,10100) UNITNUM
10100   FORMAT (//'  ---------Error in Subroutine XVGRPLOT---------' ,/'
     *   Unit specified (',I2,') is not open.' ,/'   Unit must be opened
     * before using subroutine.' ,/'   Data not written to file.' ,/'  -
     *---------------------------------------------'//)
        RETURN
      END IF
      IF ((GRAPHTITLE .EQ. ' ')) THEN
        GRAPHTITLE = 'Untitled Graph - No title specified in subroutine'
      END IF
      IF ((XTITLE .EQ. ' ')) THEN
        XTITLE = 'X-axis not titled in subroutine'
      END IF
      IF ((YTITLE .EQ. ' ')) THEN
        YTITLE = 'Y-axis not titled in subroutine'
      END IF
      IF ((SERIESTITLE .EQ. ' ')) THEN
        SERIESTITLE = 'series # '
        INDEX = '0123456789'
        INDEXNUM = INDEX(CURVENUM+1:CURVENUM+1)
        SERIESTITLE(9:9) = INDEXNUM
      END IF
      TITLELENGTH = 61
      SUBLENGTH = 61
      XAXISLENGTH = 61
      YAXISLENGTH = 61
      SERIESLENGTH = 61
10111 CONTINUE
        TITLELENGTH = TITLELENGTH - 1
        IF(((GRAPHTITLE(TITLELENGTH:TITLELENGTH) .NE. ' ')))GO TO10112
      GO TO 10111
10112 CONTINUE
10121 CONTINUE
        SUBLENGTH = SUBLENGTH - 1
        IF(((SUBTITLE(SUBLENGTH:SUBLENGTH) .NE. ' ')))GO TO10122
      GO TO 10121
10122 CONTINUE
10131 CONTINUE
        XAXISLENGTH = XAXISLENGTH - 1
        IF(((XTITLE(XAXISLENGTH:XAXISLENGTH) .NE. ' ')))GO TO10132
      GO TO 10131
10132 CONTINUE
10141 CONTINUE
        YAXISLENGTH = YAXISLENGTH - 1
        IF(((YTITLE(YAXISLENGTH:YAXISLENGTH) .NE. ' ')))GO TO10142
      GO TO 10141
10142 CONTINUE
10151 CONTINUE
        SERIESLENGTH = SERIESLENGTH - 1
        IF(((SERIESTITLE(SERIESLENGTH:SERIESLENGTH) .NE. ' ')))GO TO1015
     *  2
      GO TO 10151
10152 CONTINUE
      IF (( IDEBUG .EQ. 1)) THEN
        WRITE(6,10160)SERIESLENGTH,YAXISLENGTH,XAXISLENGTH,SUBLENGTH,TIT
     *  LELENGTH
10160   FORMAT(' SERIESLENGTH,YAXISLENGTH,XAXISLENGTH,SUBLENGTH,TITLELEN
     *GTH'/ 5I10)
      END IF
      LOGX = 0
      LOGY = 0
      LOGDY = 0
      ZEROYCOUNT=0
      ALLPOS=.TRUE.
      IF (( X(1).EQ.0.0 )) THEN
        SMALLESTX = 0.1
      ELSE
        SMALLESTX=X(1)
      END IF
      IF (( Y(1).EQ.0.0 )) THEN
        SMALLESTY = 0.1
      ELSE
        SMALLESTY=Y(1)
      END IF
      DO 10171 COUNT=1,NPTS1
        IF (((X(COUNT) .LT. SMALLESTX) .AND. (X(COUNT).NE.0.))) THEN
          SMALLESTX=X(COUNT)
        END IF
        IF (((Y(COUNT) .LT. SMALLESTY) .AND. (Y(COUNT).NE.0.))) THEN
          SMALLESTY=Y(COUNT)
        END IF
        IF (((X(COUNT) .LT. 0.).OR.(Y(COUNT) .LT. 0.))) THEN
          ALLPOS=.FALSE.
        END IF
10171 CONTINUE
10172 CONTINUE
      IF ((ALLPOS)) THEN
        DO 10181 COUNT=1,NPTS1
          IF ((X(COUNT).EQ.0.)) THEN
            X(COUNT)=SMALLESTX*FUDGE
          END IF
          IF ((Y(COUNT).EQ.0.)) THEN
            Y(COUNT)=SMALLESTY*FUDGE
          END IF
10181   CONTINUE
10182   CONTINUE
      END IF
      IF ((AXISTYPE .GT. 0)) THEN
        DO 10191 COUNT=1,NPTS1
          IF ((X(COUNT) .LE. 0.)) THEN
            LOGX = 1
          END IF
          IF ((Y(COUNT) .LE. 0.)) THEN
            LOGY = 1
          END IF
          IF (((Y(COUNT)-ERRY(COUNT)) .LE. 0.)) THEN
            LOGDY = 1
          END IF
10191   CONTINUE
10192   CONTINUE
      ELSE
        DO 10201 COUNT=1,NPTS1
          IF ((Y(COUNT)-ERRY(COUNT) .LT. Y(COUNT)-0.9999*Y(COUNT) .AND.
     *    Y(COUNT).GT.0.)) THEN
            ZEROYCOUNT=ZEROYCOUNT+1
            IF ((ZEROYCOUNT.EQ.1)) THEN
              WRITE(6,10210)
10210         FORMAT (/' ------------WARNING from Subroutine XVGRPLOT---
     *--------' ,/'  Some errors give 0 value and so are adjusted so   '
     * ,/'  that you can switch to a log Y scale while in xmgr.   ',/' -
     *------------------------------------------------------'/)
            END IF
            ERRYOLD=ERRY(COUNT)
            ERRY(COUNT) = 0.9999*Y(COUNT)
          END IF
10201   CONTINUE
10202   CONTINUE
      END IF
      IF ((CURVENUM .EQ. 0)) THEN
        IF ((AXISTYPE .EQ. 0)) THEN
          WRITE(UNITNUM,10220) 'xy'
        ELSE IF((AXISTYPE .EQ. 1)) THEN
          WRITE(UNITNUM,10220) 'logy'
          WRITE(UNITNUM,10230)
        ELSE IF((AXISTYPE .EQ. 2)) THEN
          WRITE(UNITNUM,10220) 'logx'
          WRITE(UNITNUM,10230)
        ELSE IF((AXISTYPE .EQ. 3)) THEN
          WRITE(UNITNUM,10220) 'logxy'
          WRITE(UNITNUM,10230)
          WRITE(UNITNUM,10240)
        ELSE
          WRITE(6,10250) AXISTYPE
10250     FORMAT (//'  ------------Error in Subroutine XVGRPLOT---------
     *--' ,/'   AXISTYPE specified (',I2,') is not a valid option.' ,/' 
     *----------------------------------------------'//)
          RETURN
        END IF
10220   FORMAT ('@g0 type ',A,' ')
10230   FORMAT ('@    xaxis  ticklabel format exponential')
10240   FORMAT ('@    yaxis  ticklabel format exponential')
        WRITE(UNITNUM,10260) GRAPHTITLE(1:TITLELENGTH) ,SUBTITLE(1:SUBLE
     *  NGTH) ,XTITLE(1:XAXISLENGTH) ,YTITLE(1:YAXISLENGTH)
10260   FORMAT ('@    title "',A,'"'/ ,'@    subtitle "',A,'"'/ ,'@    l
     *egend on'/ ,'@    legend box linestyle 0'/ ,'@    legend x1 0.6'/,
     *'@    legend y1 0.75'/ ,'@    view xmin 0.250000'/ ,'@    xaxis  l
     *abel "',A,'"'/ ,'@    timestamp on'/ ,'@    yaxis  label "',A,'"')
      END IF
      IF ((AXISTYPE .EQ. 1 .AND. LOGY .EQ. 1)) THEN
        WRITE(UNITNUM,10220) 'xy'
        WRITE(6,10270)
10270   FORMAT (/' ----------WARNING from Subroutine XVGRPLOT---------',
     */'  Log scale requested for Y axis when one or more   ' ,/'  Ydata
     * points are 0 or negative.                  ' ,//'  Y axis scale c
     *hanged to linear.                   ' ,/' ------------------------
     *---------------------------'/)
      END IF
      IF ((AXISTYPE .EQ. 2 .AND. LOGX .EQ. 1)) THEN
        WRITE(UNITNUM,10220) 'xy'
        WRITE(6,10280)
10280   FORMAT (/' ----------WARNING from Subroutine XVGRPLOT---------',
     */'  Log scale requested for X axis when one or more   ' ,/'  Xdata
     * points are 0 or negative.                  ' ,//'  X axis scale c
     *hanged to linear.                   ' ,/' ------------------------
     *---------------------------'/)
      END IF
      IF ((AXISTYPE .EQ. 3 .AND. (LOGX .EQ. 1 .OR. LOGY .EQ. 1))) THEN
        IF ((LOGX .EQ. 1 .AND. LOGY .EQ. 1)) THEN
          WRITE(UNITNUM,10220) 'xy'
          WRITE(6,10290)
10290     FORMAT (/' ----------WARNING from Subroutine XVGRPLOT---------
     *' ,/'  Log scale requested for X axis and Y axis when    ' ,/'  on
     *e or more X and Y data points are 0 or negative.' ,//'  X and Y ax
     *es scales changed to linear.            ' ,/' --------------------
     *-------------------------------'/)
        ELSE IF((LOGX .EQ. 1)) THEN
          WRITE(UNITNUM,10220) 'logy'
          WRITE(6,10280)
        ELSE
          WRITE(UNITNUM,10220) 'logx'
          WRITE(6,10270)
        END IF
      END IF
      IF ((LOGDY .EQ. 1 .AND. LOGY .NE. 1 .AND. (AXISTYPE .EQ. 3 .OR. AX
     *ISTYPE .EQ. 1))) THEN
        WRITE(6,10300)
10300   FORMAT (/' ------------WARNING from Subroutine XVGRPLOT---------
     *--' ,/'  Log scale requested for Y axis, and Y value less      ' ,
     */'  error gives 0 or negative value.                      ' ,//'  
     *Error adjusted to aviod negavite values on log scale. ' ,/' ------
     *-------------------------------------------------'/)
        DO 10311 COUNT=1,NPTS1
          IF ((Y(COUNT)-ERRY(COUNT) .LT. Y(COUNT)-0.9999*Y(COUNT))) THEN
            ERRYOLD = ERRY(COUNT)
            ERRY(COUNT) = 0.9999*Y(COUNT)
            WRITE(6,10320) COUNT,ERRYOLD,ERRY(COUNT)
10320       FORMAT (/'  Error adjusted on point #',I2,' from',1PE11.4, '
     * to' /'        ',1PE11.4,'.')
          END IF
10311   CONTINUE
10312   CONTINUE
        WRITE(6,10330)
10330   FORMAT (/' -----------------------------------------------------
     *--'/)
      END IF
      IF ((CURVENUM .LT. 10 )) THEN
        WRITE(UNITNUM,'(''@    s'',I1,'' on'')') CURVENUM
      ELSE
        WRITE(UNITNUM,'(''@    s'',I2,'' on'')') CURVENUM
      END IF
      WRITE(UNITNUM,10340) CURVENUM,SERIESTITLE(1:SERIESLENGTH)
10340 FORMAT ('@    legend string ',I2,' "',A,'"')
      IF ((TYPE .EQ. 0)) THEN
        DO 10351 COUNT=1,NPTS1
          IF ((ERRY(COUNT) .NE. 0)) THEN
            GOTO 10360
          END IF
10351   CONTINUE
10352   CONTINUE
        WRITE(UNITNUM,10370)
10370   FORMAT ('@TYPE xy')
        IF ((CURVENUM .LT. 10)) THEN
          WRITE(UNITNUM,10380) CURVENUM
          IF ((CURVENUM .EQ. 9)) THEN
            WRITE(UNITNUM,10390) CURVENUM, CURVENUM+1
          ELSE
            WRITE(UNITNUM,10400) CURVENUM, CURVENUM+1
          END IF
        ELSE
          WRITE(UNITNUM,10410) CURVENUM
          WRITE(UNITNUM,10420) CURVENUM, CURVENUM+1
        END IF
10380   FORMAT ('@    s',I1,' errorbar length 0.000000')
10410   FORMAT ('@    s',I2,' errorbar length 0.000000')
10390   FORMAT ('@    s',I1,' symbol color ',I2)
10400   FORMAT ('@    s',I1,' symbol color ',I1)
10420   FORMAT ('@    s',I2,' symbol color ',I2)
        DO 10431 COUNT=1,NPTS1
          WRITE(UNITNUM,10440) X(COUNT),Y(COUNT)
10431   CONTINUE
10432   CONTINUE
10440   FORMAT (1PE15.4,1PE15.4)
        GOTO 10450
10360   CONTINUE
        WRITE(UNITNUM,10460)
10460   FORMAT ('@TYPE xydy')
        IF ((CURVENUM .LT. 10)) THEN
          WRITE(UNITNUM,10380) CURVENUM
          IF ((CURVENUM .EQ. 9)) THEN
            WRITE(UNITNUM,10390) CURVENUM, CURVENUM+1
          ELSE
            WRITE(UNITNUM,10400) CURVENUM, CURVENUM+1
          END IF
        ELSE
          WRITE(UNITNUM,10410) CURVENUM
          WRITE(UNITNUM,10420) CURVENUM, CURVENUM+1
        END IF
        DO 10471 COUNT=1,NPTS1
          WRITE(UNITNUM,10480) X(COUNT),Y(COUNT),ERRY(COUNT)
10471   CONTINUE
10472   CONTINUE
10480   FORMAT (1PE15.4,1PE15.4,1PE15.4)
10450   CONTINUE
      ELSE
        YMIN = ABS(1.E5 * Y(1))
        DO 10491 COUNT=1,NPTS1
          IF ((ABS(Y(COUNT)) .LT. YMIN)) THEN
            YMIN = ABS(Y(COUNT))
          END IF
10491   CONTINUE
10492   CONTINUE
        YMIN = SIGN(one,Y(1)) * 1.E-5 * YMIN
        Y(NPTS1+1) = YMIN
        IF (((AXISTYPE .EQ. 2 .OR. AXISTYPE .EQ. 3) .AND. HISTXMIN .EQ.
     *  0)) THEN
          IF ((X(1) .EQ. (X(2)-X(1)))) THEN
            HISTXMIN = X(1)-0.5*(X(2)-X(1))
          ELSE
            HISTXMIN = X(1)-(X(2)-X(1))
          END IF
          WRITE(6,10500) HISTXMIN
10500     FORMAT (/' ---------WARNING from Subroutine XVGRPLOT--------',
     */'  Minimum bin for X specified as 0 with log scale  ' ,/'  on X a
     *xis.  Minimum X bin set to ',1PE10.3,'.' ,/' ---------------------
     *----------------------------'/)
        END IF
        DO 10511 COUNT=1,NPTS1
          IF ((ERRY(COUNT) .NE. 0.)) THEN
            GOTO 10520
          END IF
10511   CONTINUE
10512   CONTINUE
        IF ((CURVENUM .LT. 10)) THEN
          WRITE(UNITNUM,10380) CURVENUM
          IF ((CURVENUM .EQ. 9)) THEN
            WRITE(UNITNUM,10390) CURVENUM, CURVENUM+1
          ELSE
            WRITE(UNITNUM,10400) CURVENUM, CURVENUM+1
          END IF
        ELSE
          WRITE(UNITNUM,10410) CURVENUM
          WRITE(UNITNUM,10420) CURVENUM, CURVENUM+1
        END IF
        WRITE(UNITNUM,10370)
        WRITE(UNITNUM,10440) HISTXMIN,YMIN
        WRITE(UNITNUM,10440) HISTXMIN,Y(1)
        DO 10531 COUNT=1,NPTS1
          WRITE(UNITNUM,10440) X(COUNT),Y(COUNT)
          WRITE(UNITNUM,10440) X(COUNT),Y(COUNT+1)
10531   CONTINUE
10532   CONTINUE
        GOTO 10540
10520   CONTINUE
        ERRY(NPTS1+1) = 0.0
        IF ((CURVENUM .LT. 10)) THEN
          WRITE(UNITNUM,10380) CURVENUM
          IF ((CURVENUM .EQ. 9)) THEN
            WRITE(UNITNUM,10390) CURVENUM, CURVENUM+1
          ELSE
            WRITE(UNITNUM,10400) CURVENUM, CURVENUM+1
          END IF
        ELSE
          WRITE(UNITNUM,10410) CURVENUM
          WRITE(UNITNUM,10420) CURVENUM, CURVENUM+1
        END IF
        WRITE(UNITNUM,10460)
        IF ((HISTXMIN .EQ. 0.0)) THEN
          HISTXMIN = SMALLESTX*FUDGE
        END IF
        WRITE(UNITNUM,10480) HISTXMIN, YMIN, 0.
        WRITE(UNITNUM,10480) HISTXMIN, Y(1), 0.
        WRITE(UNITNUM,10480) (X(1)+HISTXMIN)/2., Y(1), ERRY(1)
        DO 10551 COUNT=1,NPTS1
          WRITE (UNITNUM,10480) X(COUNT),Y(COUNT),0.
          WRITE (UNITNUM,10480) X(COUNT),Y(COUNT+1),0.
          IF ((COUNT .LT. NPTS1)) THEN
            WRITE (UNITNUM,10480) (X(COUNT)+X(COUNT+1))/2.,Y(COUNT+1),ER
     *      RY(COUNT+1)
          END IF
10551   CONTINUE
10552   CONTINUE
10540   CONTINUE
      END IF
      WRITE(UNITNUM,'(''&'')')
      RETURN
      END
      SUBROUTINE INPUT_XITWIN
      IMPLICIT NONE
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/CM_XITWIN/ICM_XITWIN,IRSTART_XITWIN,IREND_XITWIN, N_XITWIN,
     *N_GAP_XITWIN,TITLE_XITWIN,ZBACK_XITWIN,ZFRONT_XITWIN, ZTHICK_XITWI
     *N,IR_XITWIN
      INTEGER ICM_XITWIN,IRSTART_XITWIN,IREND_XITWIN,N_XITWIN, N_GAP_XIT
     *WIN,IR_XITWIN
      real*8 ZBACK_XITWIN(30),ZFRONT_XITWIN(30), ZTHICK_XITWIN(30)
      CHARACTER*1 TITLE_XITWIN(60)
      COMMON/GEOM/ NREG
      INTEGER NREG
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 ZMIN_XITWIN,  ESAVEIN
      INTEGER I,J,  IRA,  MED_FLAG,  MED_INDEX,  NDO
      ICM_XITWIN = ICM
      IRSTART_XITWIN = IR_start_CM(ICM_XITWIN)
      IERR_GEOM(ICM_XITWIN) = 0
      RMAX_CM_FLAG(ICM_XITWIN) = 2
      WRITE(6,10560)
10560 FORMAT(/' XITWIN (SLABS)')
      WRITE(6,10570)RMAX_CM(ICM)
10570 FORMAT(' This component is a set of planar slabs'/ '      Outer bo
     *undary is a square with |x| & |y| <',F10.2,' cm')
      IF ((ICM_XITWIN .EQ. 1)) THEN
        WRITE(6,10580)Z_min_CM(ICM_XITWIN)
10580   FORMAT(' This is first component -- starts at ',F11.4,' cm fromr
     *eference plane')
      ELSE
        WRITE(6,10590)Z_min_CM(ICM_XITWIN)
10590   FORMAT(' Previous CM ends at:',F12.5,' cm')
      END IF
      WRITE(6,10600)
10600 FORMAT(' TITLE: ',$)
      READ(i_input,10610,END=10620,ERR=10630)TITLE_XITWIN
10610 FORMAT(60A1)
      WRITE(6,10640)TITLE_XITWIN
10640 FORMAT(' ',60A1)
      WRITE(6,10650)30
10650 FORMAT(' NUMBER OF SLABS (MINIMUM 1, MAXIMUM',I3,'): ',$)
      READ(i_input,10660,END=10620,ERR=10630)N_XITWIN
10660 FORMAT (I5)
      WRITE(6,10670)N_XITWIN
10670 FORMAT(I5)
      IF ((N_XITWIN .LT. 1)) THEN
        N_XITWIN=1
        WRITE(6,10680)ICM_XITWIN
10680   FORMAT(//'***ERROR IN CM ',I4,' (SLABS):'/ '# of slabs < 1'/ '#o
     *f slabs set to 1 for now.'//)
        IERR_GEOM(ICM_XITWIN)=IERR_GEOM(ICM_XITWIN)+1
      ELSE IF((N_XITWIN .GT. 30)) THEN
        N_XITWIN=30
        WRITE(6,10690)ICM_XITWIN, N_XITWIN
10690   FORMAT(//'***ERROR IN CM ',I4,' (SLABS):'/ '# of slabs > max. al
     *lowed'/ '# of slabs reduced to ',I4,' for now'//)
        IERR_GEOM(ICM_XITWIN)=IERR_GEOM(ICM_XITWIN)+1
      END IF
      WRITE(6,10700)
10700 FORMAT(' DISTANCE FROM FRONT OF SLABS (excluding air gap) TO REF P
     *LANE (z=0): ',$)
      READ(i_input,10710,END=10620,ERR=10630)ZMIN_XITWIN
10710 FORMAT(F15.0)
      WRITE(6,10720)ZMIN_XITWIN
10720 FORMAT(F10.5)
      IF ((ZMIN_XITWIN .LT. Z_min_CM(ICM_XITWIN))) THEN
        IF ((ICM_XITWIN .EQ. 1)) THEN
          WRITE(6,10730)ICM_XITWIN, ZMIN_XITWIN,Z_min_CM(ICM_XITWIN)
10730     FORMAT(//' ***WARNING IN CM ',I4,' (XITWIN):'/ ' Z_min_CM(1) (
     *=front of the accelerator) is past front of first slab'/ ' Z_min_C
     *M(1) reset to value just input =',F8.5,' cm'/ ' from ',F8.5,' cm'/
     */)
          WRITE(IOUTLIST,10740) ICM_XITWIN, ZMIN_XITWIN, Z_min_CM(ICM_XI
     *    TWIN)
10740     FORMAT(//' ***WARNING IN CM ',I4,' (XITWIN):'/ ' Z_min_CM(1) (
     *=front of the accelerator) is past front of first slab'/ ' Z_min_C
     *M(1) reset to value just input =',F8.5,' cm'/ ' from ',F8.5,' cm'/
     */)
          Z_min_CM(ICM_XITWIN) = ZMIN_XITWIN
        ELSE
          WRITE(6,10750)ICM_XITWIN
10750     FORMAT(//'***ERROR IN CM ',I4,' (XITWIN):'/ 'Overlaps with pre
     *vious CM.'//)
          IERR_GEOM(ICM_XITWIN)=IERR_GEOM(ICM_XITWIN)+1
        END IF
      END IF
      IRA = IRSTART_XITWIN-1
      DO 10761 IR_XITWIN=1,N_XITWIN
        IRA = IRA+1
        WRITE(6,10770)IR_XITWIN
10770   FORMAT(//' Inputs for slab # ',I5)
        WRITE(6,10780)
10780   FORMAT(' SLAB THICKNESS(cm), ECUT, PCUT,', ' DOSE ZONE(0=>DONT S
     *CORE), IREGION_TO_BIT,ESAVE'/' :',$)
        READ(i_input,10790,END=10620,ERR=10630)ZTHICK_XITWIN(IR_XITWIN),
     *  ECUT(IRA),PCUT(IRA), DOSE_ZONE(IRA),IREGION_TO_BIT(IRA),ESAVEIN
10790   FORMAT (3F15.0,2I5,F15.0)
        IF((ECUT(IRA) .LT. ECUTIN))ECUT(IRA)=ECUTIN
        IF((PCUT(IRA) .LT. PCUTIN))PCUT(IRA)=PCUTIN
        IF ((ESAVEIN .GT. 0.511)) THEN
          ESAVE(IRA) = ESAVEIN
        ELSE
          ESAVE(IRA)=ESAVE_GLOBAL
        END IF
        WRITE(6,10800)ZTHICK_XITWIN(IR_XITWIN),ECUT(IRA),PCUT(IRA), DOSE
     *  _ZONE(IRA),IREGION_TO_BIT(IRA), ESAVE(IRA)
10800   FORMAT(3F11.5,I9,I20,F11.5)
        IF ((ZTHICK_XITWIN(IR_XITWIN).LT.0.0)) THEN
          WRITE(6,10810)ICM_XITWIN, IR_XITWIN
10810     FORMAT(//'***ERROR IN CM ',I4,' (SLABS):'/ 'ZTHICK(',I4,') < 0
     *.0'//)
          IERR_GEOM(ICM_XITWIN)=IERR_GEOM(ICM_XITWIN)+1
        END IF
        WRITE(6,10820)
10820   FORMAT(' SLAB ',$)
        WRITE(6,10830)
10830   FORMAT(' MEDIUM (left justify): ',$)
        READ(i_input,'(24A1)',END=10620,ERR=10630) (MED_IN(J),J=1,24)
        WRITE(6,10840)(MED_IN(J),J=1,24)
10840   FORMAT(' ',24A1)
        IF ((MED_IN(1) .EQ. 'V' .AND. MED_IN(2).EQ.'A' .AND. MED_IN(3).E
     *  Q.'C' .AND. MED_IN(4) .EQ. 'U' .AND. MED_IN(5).EQ.'U' .AND. MED_
     *  IN(6).EQ.'M')) THEN
          MED_INDEX=0
        ELSE
          IF ((NMED .NE. 0)) THEN
            DO 10851 I=1,NMED
              MED_FLAG = 0
              DO 10861 J=1,24
                IF ((MEDIA(J,I) .NE. MED_IN(J))) THEN
                  MED_FLAG = 1
                  GO TO10862
                END IF
10861         CONTINUE
10862         CONTINUE
              IF ((MED_FLAG .EQ. 0)) THEN
                MED_INDEX = I
                GO TO10852
              END IF
              IF ((I .EQ. NMED)) THEN
                NMED = NMED+1
                MED_INDEX = NMED
                DO 10871 J=1,24
                  MEDIA(J,NMED) = MED_IN(J)
10871           CONTINUE
10872           CONTINUE
                GO TO10852
              END IF
10851       CONTINUE
10852       CONTINUE
          ELSE
            NMED = 1
            MED_INDEX = NMED
            DO 10881 J=1,24
              MEDIA(J,NMED) = MED_IN(J)
10881       CONTINUE
10882       CONTINUE
          END IF
        END IF
        MED(IRA) = MED_INDEX
10761 CONTINUE
10762 CONTINUE
      ZFRONT_XITWIN(1) = ZMIN_XITWIN
      IF ((N_XITWIN .GT. 1)) THEN
        DO 10891 IR_XITWIN=1,N_XITWIN-1
          ZBACK_XITWIN(IR_XITWIN) = ZFRONT_XITWIN(IR_XITWIN) + ZTHICK_XI
     *    TWIN(IR_XITWIN)
          ZFRONT_XITWIN(IR_XITWIN+1) = ZBACK_XITWIN(IR_XITWIN)
10891   CONTINUE
10892   CONTINUE
      END IF
      ZBACK_XITWIN(N_XITWIN) = ZFRONT_XITWIN(N_XITWIN) + ZTHICK_XITWIN(N
     *_XITWIN)
      Z_min_CM(ICM_XITWIN+1) = ZBACK_XITWIN(N_XITWIN)
      Z_gap_THICK(ICM_XITWIN) = ZMIN_XITWIN-Z_min_CM(ICM_XITWIN)
      IF ((Z_gap_THICK(ICM_XITWIN) .LT. 0.01)) THEN
        Z_gap_THICK(ICM_XITWIN) = 0.
        ZFRONT_XITWIN(1)=Z_min_CM(ICM_XITWIN)
        N_GAP_XITWIN = 0
      ELSE
        N_GAP_XITWIN = 1
        IRA = IRSTART_XITWIN+N_XITWIN
        MED(IRA) = AIR_INDEX
        ESAVE(IRA)=ESAVE_GLOBAL
        ECUT(IRA) = ECUTIN
        PCUT(IRA) = PCUTIN
        ZFRONT_XITWIN(N_XITWIN+1) = Z_min_CM(ICM_XITWIN)
      END IF
      IREND_XITWIN = IRSTART_XITWIN+N_XITWIN+N_GAP_XITWIN-1
      NREG = NREG+N_XITWIN+N_GAP_XITWIN
      IF ((NREG .LE. 3000)) THEN
        IR_start_CM(ICM_XITWIN+1) = IREND_XITWIN+1
      ELSE
        WRITE(6,10900)ICM_XITWIN,NREG,3000
10900   FORMAT(//'***ERROR IN CM ',I4,' (SLABS):'/ I4,' regions requeste
     *d, only', I4,' available'/ '    Change $MXREG in beam_user_macros.
     *mortran'//)
        IERR_GEOM(ICM_XITWIN)=IERR_GEOM(ICM_XITWIN)+1
      END IF
      IRA = IRSTART_XITWIN-1
      DO 10911 IR_XITWIN=1,N_XITWIN
        IRA = IRA+1
        NDOSE_ZONE = MAX(DOSE_ZONE(IRA),NDOSE_ZONE)
        MAX_BIT = MAX(IREGION_TO_BIT(IRA),MAX_BIT)
10911 CONTINUE
10912 CONTINUE
      NDO = MIN(5,N_XITWIN)
      DO 10921 IR_XITWIN=N_XITWIN,N_XITWIN-NDO+1, -1
        IRA = IR_XITWIN + IRSTART_XITWIN-1
        Z_min_thick(ICM,N_XITWIN+1 - IR_XITWIN) = ZTHICK_XITWIN(IR_XITWI
     *  N)
        MED_min_thick(ICM,N_XITWIN+1 - IR_XITWIN) = MED(IRA)
10921 CONTINUE
10922 CONTINUE
      IF ((NDO .LT. 5)) THEN
        IF ((N_GAP_XITWIN .EQ. 1)) THEN
          Z_min_thick(ICM,NDO+1) = Z_gap_thick(ICM_XITWIN)
          MED_min_thick(ICM,NDO+1) = 1
          WRITE(6,10930)ICM,NDO+1,Z_min_thick(ICM,NDO+1),ICM,NDO+1, MED_
     *    min_thick(ICM,NDO+1)
10930     FORMAT(' Front air gap',T20,' Z_min_thick(',I2,',',I2,')=',F10
     *.3, '  MED_min_thick(',I2,',',I2,')=',I5)
          NDO = NDO +1
        END IF
        IF ((NDO .LT. 5 )) THEN
          DO 10941 I=NDO+1,5
            Z_min_thick(ICM,I) = 0.0
            MED_min_thick(ICM,I) = 0
10941     CONTINUE
10942     CONTINUE
        END IF
      END IF
      RETURN
10620 CONTINUE
      WRITE(6,10950)ICM
10950 FORMAT(//' *** ERROR in XITWIN *** unexpected end of file readingi
     *nput for CM',I3)
      STOP
10630 CONTINUE
      WRITE(6,10960)ICM
10960 FORMAT(//' *** ERROR  in XITWIN *** format error on input for CM',
     *I3)
      STOP
      END
      SUBROUTINE ISUMRY_XITWIN
      IMPLICIT NONE
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/CM_XITWIN/ICM_XITWIN,IRSTART_XITWIN,IREND_XITWIN, N_XITWIN,
     *N_GAP_XITWIN,TITLE_XITWIN,ZBACK_XITWIN,ZFRONT_XITWIN, ZTHICK_XITWI
     *N,IR_XITWIN
      INTEGER ICM_XITWIN,IRSTART_XITWIN,IREND_XITWIN,N_XITWIN, N_GAP_XIT
     *WIN,IR_XITWIN
      real*8 ZBACK_XITWIN(30),ZFRONT_XITWIN(30), ZTHICK_XITWIN(30)
      CHARACTER*1 TITLE_XITWIN(60)
      COMMON/GEOM/ NREG
      INTEGER NREG
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      INTEGER ICOLOUR,  IDD,  IRA,  J
      IRA = IRSTART_XITWIN-1
      DO 10971 IR_XITWIN=1,N_XITWIN+N_GAP_XITWIN
        IRA = IRA+1
        IF ((DOSE_ZONE(IRA).NE.0)) THEN
          IDD=DOSE_ZONE(IRA)
          AMASS(IDD)=AMASS(IDD) + RHOR(IRA)* (ZBACK_XITWIN(IR_XITWIN) -
     *    ZFRONT_XITWIN(IR_XITWIN))*4*(RMAX_CM2(ICM_XITWIN))
        END IF
10971 CONTINUE
10972 CONTINUE
      WRITE(IOUTLIST,110) ICM_XITWIN,TITLE_XITWIN
      WRITE(IOUTLIST,120) Z_min_CM(ICM_XITWIN),RMAX_CM(ICM_XITWIN)
      WRITE(IOUTLIST,122)
      IF ((N_GAP_XITWIN.NE.0)) THEN
        WRITE(IOUTLIST,124) 'airgap',Z_min_CM(ICM_XITWIN), ZFRONT_XITWIN
     *  (1)-Z_min_CM(ICM_XITWIN)
      END IF
      DO 10981 IR_XITWIN=1,N_XITWIN
        WRITE(IOUTLIST,123) IR_XITWIN,ZFRONT_XITWIN(IR_XITWIN), ZTHICK_X
     *  ITWIN(IR_XITWIN)
10981 CONTINUE
10982 CONTINUE
      WRITE(IOUTLIST,130)
      IRA = IRSTART_XITWIN-1
      DO 10991 IR_XITWIN=1,N_XITWIN + N_GAP_XITWIN
        IRA = IRA+1
        IF ((IR_XITWIN.LE.N_XITWIN)) THEN
          IF ((MED(IRA).EQ.0)) THEN
            WRITE(IOUTLIST,140) IR_XITWIN,IR_XITWIN,'slab',ECUT(IRA),PCU
     *      T(IRA), ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA), IREGION_TO_BI
     *      T(IRA),'V','a','c','u','u','m'
          ELSE
            WRITE(IOUTLIST,140) IR_XITWIN,IR_XITWIN,'slab',ECUT(IRA),PCU
     *      T(IRA), ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),IREGION_TO_BIT
     *      (IRA), (MEDIA(J,MED(IRA)),J=1,9)
          END IF
        ELSE
          IF ((MED(IRA).EQ.0)) THEN
            WRITE(IOUTLIST,142) IR_XITWIN,'NA','airgap',ECUT(IRA),PCUT(I
     *      RA), ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA), IREGION_TO_BIT(I
     *      RA),'V','a','c','u','u','m'
          ELSE
            WRITE(IOUTLIST,142) IR_XITWIN,'NA','airgap',ECUT(IRA),PCUT(I
     *      RA), ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),IREGION_TO_BIT(IR
     *      A), (MEDIA(J,MED(IRA)),J=1,9)
          END IF
          WRITE(IOUTLIST,141)'at top'
        END IF
10991 CONTINUE
10992 CONTINUE
110   FORMAT(///1x,79('-')/ '  Component module',I3,' is one or more pla
     *nar slabs  ', '(SLABS)' /1x,79('-') //T5,'Title: ',68A1)
120   FORMAT(/T2,'XITWIN geometry parameters:', /T2,'-------------------
     *----------', /T2,'Distance of front of CM from reference plane = '
     *, F15.5,' cm', /T2,'Half-width of outer boundary of CM = ',F15.5,'
     * cm')
122   FORMAT(/T2, 'slab #    Z front    thickness', /T2, '           fac
     *e               ', /T2, '           (cm)        (cm)   ')
123   FORMAT(T2,I4,F12.3,F11.3)
124   FORMAT(T2,A6,F10.3,F11.3)
130   FORMAT(/T2,'XITWIN region parameters:', /T2,'---------------------
     *------', /T2,'local  slab #  location  electron  photon', '  range
     *-rejection  dose  bit  medium' /T2,'region                    cuto
     *ff   cutoff', '   level     max   zone  set' /T2,'           (MeV)
     *    (MeV)', '   (MeV)    (MeV)')
140   FORMAT(T2,I3,I7,5X,A7,F10.3,F9.3,F8.3,F9.3,I5,I5,2X,9A1)
141   FORMAT(T17,A7)
142   FORMAT(T2,I3,5X,A2,5X,A7,F10.3,F9.3,F8.3,F9.3,I5,I5,2X,9A1)
      IF ((IWATCH .EQ. 4 .OR. IZLAST .EQ. 2)) THEN
        ICOLOUR = MOD(ICM_XITWIN,4)+1
        DO 11001 IR_XITWIN=1,N_XITWIN
          WRITE(IOUTGEOM,200) ICOLOUR,'DISK',0.,0., ZFRONT_XITWIN(IR_XIT
     *    WIN),RMAX_CM(ICM_XITWIN)
11001   CONTINUE
11002   CONTINUE
        WRITE(IOUTGEOM,200) ICOLOUR,'DISK',0.,0., ZBACK_XITWIN(N_XITWIN)
     *  ,RMAX_CM(ICM_XITWIN)
200     FORMAT(' ',I1,A4,10(F7.2,','))
      END IF
      RETURN
      END
      SUBROUTINE HOWFAR_XITWIN
      IMPLICIT NONE
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/CM_XITWIN/ICM_XITWIN,IRSTART_XITWIN,IREND_XITWIN, N_XITWIN,
     *N_GAP_XITWIN,TITLE_XITWIN,ZBACK_XITWIN,ZFRONT_XITWIN, ZTHICK_XITWI
     *N,IR_XITWIN
      INTEGER ICM_XITWIN,IRSTART_XITWIN,IREND_XITWIN,N_XITWIN, N_GAP_XIT
     *WIN,IR_XITWIN
      real*8 ZBACK_XITWIN(30),ZFRONT_XITWIN(30), ZTHICK_XITWIN(30)
      CHARACTER*1 TITLE_XITWIN(60)
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      INTEGER IRL
      real*8 DIST,  DMIN_XITWIN,  ZNEAR
      IRL = IR(NP)
      CALL HOWNEAR_XITWIN(DMIN_XITWIN)
      DNEAR(NP) = DMIN_XITWIN
      IF ((IR_XITWIN.GT.0 .AND. IR_XITWIN.LT.N_XITWIN+1)) THEN
        IF ((W(NP).GT.0.0)) THEN
          ZNEAR = ZBACK_XITWIN(IR_XITWIN)-Z(NP)
          DIST = ZNEAR/W(NP)
          IF ((DIST .LT. 0.)) THEN
            DIST=0.
          END IF
          IF ((DIST.EQ.0. .AND. IR_XITWIN.EQ.N_XITWIN)) THEN
            DIST=1.E-16
          END IF
          IF ((DIST .LE. USTEP )) THEN
            USTEP = DIST
            IF ((IR_XITWIN.LT.N_XITWIN)) THEN
              IRNEW = IR(NP)+1
            ELSE
              CALL WHERE_AM_I(ICM_XITWIN,1)
            END IF
          END IF
        ELSE IF((W(NP).LT.0.0)) THEN
          ZNEAR = Z(NP)-ZFRONT_XITWIN(IR_XITWIN)
          DIST = -ZNEAR/W(NP)
          IF ((DIST .LT. 0.)) THEN
            DIST=0.
          END IF
          IF ((DIST.EQ.0. .AND. N_GAP_XITWIN.EQ.0 .AND. IR_XITWIN.EQ.1))
     *     THEN
            DIST=1.E-16
          END IF
          IF ((DIST .LE. USTEP)) THEN
            USTEP = DIST
            IF ((IR_XITWIN.GT.1)) THEN
              IRNEW = IR(NP)-1
            ELSE IF((IR_XITWIN.EQ.1 .AND. N_GAP_XITWIN.EQ.1)) THEN
              IRNEW = IREND_XITWIN
            ELSE
              CALL WHERE_AM_I(ICM_XITWIN,-1)
            END IF
          END IF
        END IF
      ELSE IF((IR_XITWIN.EQ.N_XITWIN+1 .AND. N_GAP_XITWIN.EQ.1)) THEN
        IF ((W(NP).GT.0.0)) THEN
          ZNEAR = ZFRONT_XITWIN(1)-Z(NP)
          DIST = ZNEAR/W(NP)
          IF ((DIST .LT. 0.)) THEN
            DIST=0.
          END IF
          IF ((DIST .LE. USTEP )) THEN
            USTEP = DIST
            IRNEW = IRSTART_XITWIN
          END IF
        ELSE IF((W(NP).LT.0.0 )) THEN
          ZNEAR = Z(NP)-Z_min_CM(ICM_XITWIN)
          DIST = -ZNEAR/W(NP)
          IF ((DIST .LE. 0.)) THEN
            DIST=1.E-16
          END IF
          IF ((DIST .LE. USTEP)) THEN
            USTEP = DIST
            CALL WHERE_AM_I(ICM_XITWIN,-1)
          END IF
        END IF
      ELSE
        WRITE(6,11010)IR(NP)-IRSTART_XITWIN+1, IR(NP), ICM_XITWIN, IR_st
     *  art_CM(ICM_XITWIN)
11010   FORMAT(//' ************'//' HOWFAR_XITWIN error'/ '    Region, l
     *ocal, absolute =',2I5/ '    CM number=',I5,' start region =',I5/'*
     *********'//)
        STOP
      END IF
      RETURN
      END
      SUBROUTINE WHERE_AM_I_XITWIN(IDIR)
      IMPLICIT NONE
      COMMON/CM_XITWIN/ICM_XITWIN,IRSTART_XITWIN,IREND_XITWIN, N_XITWIN,
     *N_GAP_XITWIN,TITLE_XITWIN,ZBACK_XITWIN,ZFRONT_XITWIN, ZTHICK_XITWI
     *N,IR_XITWIN
      INTEGER ICM_XITWIN,IRSTART_XITWIN,IREND_XITWIN,N_XITWIN, N_GAP_XIT
     *WIN,IR_XITWIN
      real*8 ZBACK_XITWIN(30),ZFRONT_XITWIN(30), ZTHICK_XITWIN(30)
      CHARACTER*1 TITLE_XITWIN(60)
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      INTEGER IDIR,I
      IF ((IDIR.EQ.1)) THEN
        IF ((N_GAP_XITWIN.EQ.0)) THEN
          IRNEW = IRSTART_XITWIN
        ELSE
          IRNEW = IREND_XITWIN
        END IF
      ELSE IF((IDIR.EQ.2)) THEN
        IF ((N_GAP_XITWIN.EQ.1 .AND. Z(NP).LT. ZFRONT_XITWIN(1))) THEN
          IRNEW = IREND_XITWIN
        ELSE
          IRNEW=IRSTART_XITWIN+N_XITWIN-1
          DO 11021 I=1,N_XITWIN
            IF ((Z(NP).LT.ZFRONT_XITWIN(I)+ZTHICK_XITWIN(I))) THEN
              IRNEW=IRSTART_XITWIN+I-1
              GO TO11022
            END IF
11021     CONTINUE
11022     CONTINUE
        END IF
      ELSE
        IRNEW = IRSTART_XITWIN+N_XITWIN-1
      END IF
      RETURN
      END
      SUBROUTINE HOWNEAR_XITWIN(DIST)
      implicit none
      COMMON/CM_XITWIN/ICM_XITWIN,IRSTART_XITWIN,IREND_XITWIN, N_XITWIN,
     *N_GAP_XITWIN,TITLE_XITWIN,ZBACK_XITWIN,ZFRONT_XITWIN, ZTHICK_XITWI
     *N,IR_XITWIN
      INTEGER ICM_XITWIN,IRSTART_XITWIN,IREND_XITWIN,N_XITWIN, N_GAP_XIT
     *WIN,IR_XITWIN
      real*8 ZBACK_XITWIN(30),ZFRONT_XITWIN(30), ZTHICK_XITWIN(30)
      CHARACTER*1 TITLE_XITWIN(60)
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      real*8 DIST
      IR_XITWIN = IR(NP)-IRSTART_XITWIN+1
      IF ((IR_XITWIN.EQ.N_XITWIN+1 .AND. N_GAP_XITWIN.EQ.1)) THEN
        DIST=MIN(Z(NP)-Z_min_CM(ICM_XITWIN),ZFRONT_XITWIN(1)-Z(NP))
      ELSE
        DIST=MIN(Z(NP)-ZFRONT_XITWIN(IR_XITWIN), ZBACK_XITWIN(IR_XITWIN)
     *  -Z(NP))
      END IF
      RETURN
      END
      SUBROUTINE HOWFAR_COLLIMAT
      IMPLICIT NONE
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/CM_COLLIMAT/ ICM_COLLIMAT, IRSTART_COLLIMAT, IREND_COLLIMAT
     *, N_COLLIMAT, N_GAP_COLLIMAT, IR_COLLIMAT, COUNT1_COLLIMAT, TITLE_
     *COLLIMAT, ZMIN_COLLIMAT, ZMAX_COLLIMAT, ZFRONT_COLLIMAT, NUM_NODE_
     *COLLIMAT, INDEX_COLLIMAT, ZCORNER_COLLIMAT, RCORNER_COLLIMAT, RCOR
     *NER2_COLLIMAT, SURPARA_COLLIMAT, RMIN_COLLIMAT, RMIN2_COLLIMAT, CR
     *ITOLD_COLLIMAT
      INTEGER ICM_COLLIMAT, IRSTART_COLLIMAT, IREND_COLLIMAT, N_COLLIMAT
     *, N_GAP_COLLIMAT, IR_COLLIMAT, COUNT1_COLLIMAT, NUM_NODE_COLLIMAT,
     *INDEX_COLLIMAT
      real*8 ZMIN_COLLIMAT, ZMAX_COLLIMAT, ZFRONT_COLLIMAT, ZCORNER_COLL
     *IMAT(15),RCORNER_COLLIMAT(15), RCORNER2_COLLIMAT(15), SURPARA_COLL
     *IMAT(15-1,4), RMIN_COLLIMAT, RMIN2_COLLIMAT, CRITOLD_COLLIMAT
      CHARACTER*1 TITLE_COLLIMAT(60)
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      INTEGER IRL,  I, J, K,  IU_D,  DIRTMP
      real*8 DIST,  DIST_TMP,  RF_COLLIMAT,  RF2_COLLIMAT,  R0SQ,  R0DEL
     *R,  DELRSQ,  RV_COLLIMAT,  RV2_COLLIMAT,  CRITERIOR_IR, R0SQ_2,CRI
     *TERIOR_IR_2,  A, B, B2, C, TEMP1, CUT_COE1, CUT_COE2, CUT_COE,STEP
     *_UNIT, STEP_UNITOLD,  XPLN,YPLN,ZPLN
      real*8 one
      parameter (one = 1)
      IRL = IR(NP)
      IR_COLLIMAT = IRL - IRSTART_COLLIMAT + 1
      R0SQ=X(NP)**2+Y(NP)**2
      STEP_UNIT=0.0
      STEP_UNITOLD=0.0
      IF ((N_GAP_COLLIMAT .EQ. 1 .AND. IR_COLLIMAT .EQ. 3 )) THEN
        IF ((W(NP).GT.0.0)) THEN
          DIST = (ZMIN_COLLIMAT - Z(NP))/W(NP)
          IF ((DIST .LT. 0.0)) THEN
            USTEP = 0.
            IF (( R0SQ.LT.RCORNER2_COLLIMAT(1) )) THEN
              IRNEW =IRSTART_COLLIMAT
              RETURN
            ELSE
              IRNEW =IRSTART_COLLIMAT+1
              RETURN
            END IF
          END IF
        ELSE IF((W(NP).LT.0.0)) THEN
          DIST = (ZFRONT_COLLIMAT - Z(NP))/W(NP)
          IF ((DIST .LE. 0.0)) THEN
            USTEP=1.e-16
            CALL WHERE_AM_I(ICM_COLLIMAT,-1)
            RETURN
          END IF
        END IF
      ELSE IF((IR_COLLIMAT.EQ.1 .OR. IR_COLLIMAT.EQ.2)) THEN
        IF ((W(NP) .GT. 0.0)) THEN
          DIST = (ZMAX_COLLIMAT - Z(NP))/W(NP)
          IF ((DIST.GT.USTEP)) THEN
            STEP_UNIT=USTEP
            IU_D=0
          ELSE
            STEP_UNIT=DIST
            IU_D=1
          END IF
          IF ((DIST .LE.0.0)) THEN
            USTEP=1.e-16
            CALL WHERE_AM_I(ICM_COLLIMAT,1)
            RETURN
          END IF
        ELSE IF((W(NP) .LT. 0.0)) THEN
          DIST = (ZMIN_COLLIMAT - Z(NP))/W(NP)
          IF ((DIST.GT.USTEP)) THEN
            STEP_UNIT=USTEP
            IU_D=0
          ELSE
            STEP_UNIT=DIST
            IU_D=1
          END IF
          IF ((DIST .LE. 0.)) THEN
            IF ((N_GAP_COLLIMAT .EQ. 1)) THEN
              USTEP=0.
              IRNEW =IREND_COLLIMAT
              RETURN
            ELSE
              USTEP=1.e-16
              CALL WHERE_AM_I(ICM_COLLIMAT,-1)
              RETURN
            END IF
          END IF
        END IF
      END IF
      IF ((IR_COLLIMAT.EQ.1 .OR.IR_COLLIMAT.EQ.2 )) THEN
        IF ((W(NP).GE.0.0)) THEN
          DO 11031 I=1,NUM_NODE_COLLIMAT
            IF ((Z(NP).LT.ZCORNER_COLLIMAT(I))) THEN
              GO TO11032
            END IF
11031     CONTINUE
11032     CONTINUE
          J=I-1
        ELSE
          DO 11041 I=NUM_NODE_COLLIMAT,1,-1
            IF ((Z(NP).GT.ZCORNER_COLLIMAT(I))) THEN
              GO TO11042
            END IF
11041     CONTINUE
11042     CONTINUE
          J=I
        END IF
        IF ((SURPARA_COLLIMAT(J,4).LT.1.0E29)) THEN
          IF ((COUNT1_COLLIMAT.GT.0)) THEN
            CRITERIOR_IR=CRITOLD_COLLIMAT
          ELSE
            CRITERIOR_IR=SQRT(R0SQ)-(RCORNER_COLLIMAT(J) +SURPARA_COLLIM
     *      AT(J,4)*(Z(NP)-ZCORNER_COLLIMAT(J)))
          END IF
          IF ((CRITERIOR_IR.GT.0.0 .AND. IR_COLLIMAT .EQ.1 )) THEN
            IF((USTEP .GE. 1.0E-5 .OR. USTEP .EQ. 0))USTEP=1.0E-5
            XPLN=X(NP)+U(NP)*USTEP
            YPLN=Y(NP)+V(NP)*USTEP
            ZPLN=Z(NP)+W(NP)*USTEP
            R0SQ_2=XPLN**2 + YPLN**2
            IF ((W(NP).GE.0.0)) THEN
              DO 11051 I=1,NUM_NODE_COLLIMAT
                IF ((ZPLN.LT.ZCORNER_COLLIMAT(I))) THEN
                  GO TO11052
                END IF
11051         CONTINUE
11052         CONTINUE
              K=I-1
            ELSE
              DO 11061 I=NUM_NODE_COLLIMAT,1,-1
                IF ((ZPLN.GT.ZCORNER_COLLIMAT(I))) THEN
                  GO TO11062
                END IF
11061         CONTINUE
11062         CONTINUE
              K=I
            END IF
            CRITERIOR_IR_2=SQRT(R0SQ_2)-(RCORNER_COLLIMAT(K)+ SURPARA_CO
     *      LLIMAT(K,4)*(ZPLN-ZCORNER_COLLIMAT(K)))
            IF ((CRITERIOR_IR_2.GT.0.0)) THEN
              IRNEW=IRSTART_COLLIMAT+1
            ELSE
              IRNEW=IRSTART_COLLIMAT
            END IF
            COUNT1_COLLIMAT=COUNT1_COLLIMAT+1
            IF ((COUNT1_COLLIMAT.GT.100)) THEN
              WRITE(6,11070)X(NP),Y(NP),X(NP)**2+Y(NP)**2,Z(NP),U(NP), V
     *        (NP),W(NP),E(NP),IQ(NP)
11070         FORMAT(/' WARNING FROM CONS3R (COLLIMAT):', ' TAKEN USTEP=
     * 1.0E-5 FOR 100 TIMES, '/ ' BUT THE PARTICLE STILL ENDS UP IN THE 
     *WRONG REGION'/ ' (ie INSIDE CONE WHEN IT SHOULD BE OUTSIDE OR VICE
     * VERSA)'/ ' THE PARTICLE HAS BEEN DISCARDED.'/ ' OUTPUT: x,y,r**2,
     *z,u,v,w,E,IQ '/ 8F11.6,I3)
              IDISC=1
              COUNT1_COLLIMAT=0
              USTEP=0.0
            END IF
            RETURN
          ELSE IF((CRITERIOR_IR.LT.0.0 .AND. IR_COLLIMAT.EQ.2 )) THEN
            IF((USTEP .GE. 1.0E-5 .OR. USTEP .EQ. 0))USTEP=1.0E-5
            XPLN=X(NP)+U(NP)*USTEP
            YPLN=Y(NP)+V(NP)*USTEP
            ZPLN=Z(NP)+W(NP)*USTEP
            R0SQ_2=XPLN**2 + YPLN**2
            IF ((W(NP).GE.0.0)) THEN
              DO 11081 I=1,NUM_NODE_COLLIMAT
                IF ((ZPLN.LT.ZCORNER_COLLIMAT(I))) THEN
                  GO TO11082
                END IF
11081         CONTINUE
11082         CONTINUE
              K=I-1
            ELSE
              DO 11091 I=NUM_NODE_COLLIMAT,1,-1
                IF ((ZPLN.GT.ZCORNER_COLLIMAT(I))) THEN
                  GO TO11092
                END IF
11091         CONTINUE
11092         CONTINUE
              K=I
            END IF
            CRITERIOR_IR_2=SQRT(R0SQ_2)-(RCORNER_COLLIMAT(K)+ SURPARA_CO
     *      LLIMAT(K,4)*(ZPLN-ZCORNER_COLLIMAT(K)))
            IF ((CRITERIOR_IR_2.LT.0.0)) THEN
              IRNEW=IRSTART_COLLIMAT
            ELSE
              IRNEW=IRSTART_COLLIMAT+1
            END IF
            COUNT1_COLLIMAT=COUNT1_COLLIMAT+1
            IF ((COUNT1_COLLIMAT.GT.100)) THEN
              WRITE(6,11100)X(NP),Y(NP),X(NP)**2+Y(NP)**2,Z(NP),U(NP), V
     *        (NP),W(NP),E(NP),IQ(NP)
11100         FORMAT(/' WARNING FROM CONS3R (COLLIMAT):', ' TAKEN USTEP=
     * 1.0E-5 FOR 100 TIMES, '/ ' BUT THE PARTICLE STILL ENDS UP IN THE 
     *WRONG REGION'/ ' (ie INSIDE CONE WHEN IT SHOULD BE OUTSIDE OR VICE
     * VERSA)'/ ' THE PARTICLE HAS BEEN DISCARDED.'/ ' OUTPUT: x,y,r**2,
     *z,u,v,w,E,IQ '/ 8F11.6,I3)
              IDISC=1
              COUNT1_COLLIMAT=0
              USTEP=0.0
            END IF
            RETURN
          ELSE
            COUNT1_COLLIMAT=0
          END IF
        END IF
      END IF
      IF ((IR_COLLIMAT .EQ. 1)) THEN
        RF2_COLLIMAT=(X(NP)+STEP_UNIT*U(NP))**2+(Y(NP)+STEP_UNIT*V(NP))*
     *  *2
        IF ((W(NP) .GT. 0.0)) THEN
          IF ((RF2_COLLIMAT.LT.RMIN2_COLLIMAT)) THEN
            IF ((IU_D.EQ.0)) THEN
              RETURN
            ELSE
              IF ((STEP_UNIT+1.0E-5.LT. USTEP)) THEN
                STEP_UNIT=STEP_UNIT+1.0E-5
              END IF
              USTEP=STEP_UNIT
              CALL WHERE_AM_I(ICM_COLLIMAT,1)
              RETURN
            END IF
          ELSE
            DO 11111 J=I-1,NUM_NODE_COLLIMAT-1
              CUT_COE=0.0
              CUT_COE1=0.0
              CUT_COE2=0.0
              DIST_TMP=(ZCORNER_COLLIMAT(J+1)-Z(NP))/W(NP)
              DIRTMP = 1
              IF ((DIST_TMP.GT.USTEP)) THEN
                STEP_UNIT=USTEP
                IU_D=0
              ELSE
                STEP_UNIT=DIST_TMP
                IU_D=1
              END IF
              RF2_COLLIMAT=(X(NP)+STEP_UNIT*U(NP))**2 +(Y(NP)+STEP_UNIT*
     *        V(NP))**2
              IF ((STEP_UNIT.LT.1.0E-5)) THEN
              ELSE IF((SURPARA_COLLIMAT(J,4).GT.1.0E29)) THEN
                IF ((IU_D.EQ.1)) THEN
                  RF_COLLIMAT=SQRT(RF2_COLLIMAT)
                  IF (( RF_COLLIMAT.LT.MAX(RCORNER_COLLIMAT(J), RCORNER_
     *            COLLIMAT(J+1)) .AND. RF_COLLIMAT.GT.MIN(RCORNER_COLLIM
     *            AT(J), RCORNER_COLLIMAT(J+1)))) THEN
                    IF ((STEP_UNIT+1.0E-5.LT. USTEP)) THEN
                      STEP_UNIT=STEP_UNIT+1.0E-5
                    END IF
                    USTEP=STEP_UNIT
                    IRNEW = IRSTART_COLLIMAT + 1
                    RETURN
                  END IF
                ELSE
                  USTEP=STEP_UNIT
                  RETURN
                END IF
              ELSE
                RV_COLLIMAT=RCORNER_COLLIMAT(J)+SURPARA_COLLIMAT(J,4) *(
     *          Z(NP)+STEP_UNIT*W(NP)-ZCORNER_COLLIMAT(J))
                RV2_COLLIMAT=RV_COLLIMAT**2
                IF ((RV2_COLLIMAT.LE.RF2_COLLIMAT)) THEN
                  RV_COLLIMAT=RCORNER_COLLIMAT(J) +SURPARA_COLLIMAT(J,4)
     *            *(Z(NP)-ZCORNER_COLLIMAT(J))
                  RV2_COLLIMAT=RV_COLLIMAT**2
                  R0DELR=X(NP)*U(NP)+Y(NP)*V(NP)
                  DELRSQ=U(NP)*U(NP)+V(NP)*V(NP)
                  A=DELRSQ-(SURPARA_COLLIMAT(J,4)**2)*(W(NP)**2)
                  B=R0DELR-SURPARA_COLLIMAT(J,4)*RV_COLLIMAT*W(NP)
                  B2=B*B
                  C=R0SQ-RV2_COLLIMAT
                  IF ((A.EQ.0.0)) THEN
                    IF ((B.NE.0.0)) THEN
                      CUT_COE=-0.5*C/B
                    ELSE
                      CUT_COE=-1.0E5
                    END IF
                  ELSE
                    TEMP1=B2-A*C
                    IF ((TEMP1.GE.0.0)) THEN
                      TEMP1=-(B+SIGN(one,B)*SQRT(TEMP1) )
                      CUT_COE1=TEMP1/A
                      CUT_COE2=C/TEMP1
                      IF ((CUT_COE1.GT.STEP_UNITOLD .AND. CUT_COE2.GT.ST
     *                EP_UNITOLD)) THEN
                        CUT_COE=MIN(CUT_COE1,CUT_COE2)
                      ELSE
                        CUT_COE=MAX(CUT_COE1,CUT_COE2)
                      END IF
                    END IF
                  END IF
                  IF ((CUT_COE.GT.STEP_UNITOLD .AND. CUT_COE.LT.STEP_UNI
     *            T)) THEN
                    IF ((CUT_COE+1.0E-5.LT. STEP_UNIT)) THEN
                      CUT_COE=CUT_COE+1.0E-5
                    END IF
                    USTEP=CUT_COE
                    IRNEW = IRSTART_COLLIMAT + 1
                    RETURN
                  ELSE IF(( CUT_COE .EQ. STEP_UNIT .AND. IU_D.EQ.1 )) TH
     *            EN
                    IF ((CUT_COE+1.0E-5.LT. USTEP)) THEN
                      CUT_COE=CUT_COE+1.0E-5
                    END IF
                    USTEP=CUT_COE
                    IF ((DIRTMP.EQ.1 .AND. J+1.EQ.NUM_NODE_COLLIMAT)) TH
     *              EN
                      CALL WHERE_AM_I(ICM_COLLIMAT,1)
                      RETURN
                    ELSE IF(( DIRTMP.EQ.-1 .AND. J.EQ.1 )) THEN
                      IF ((N_GAP_COLLIMAT.EQ.0)) THEN
                        IRNEW=IREND_COLLIMAT
                        RETURN
                      ELSE
                        CALL WHERE_AM_I(ICM_COLLIMAT,1)
                        RETURN
                      END IF
                    END IF
                  ELSE
                    USTEP=STEP_UNIT
                    IRNEW =IRSTART_COLLIMAT+1
                    RETURN
                  END IF
                ELSE IF((IU_D.EQ.0)) THEN
                  USTEP=STEP_UNIT
                  RETURN
                END IF
              END IF
              STEP_UNITOLD=STEP_UNIT
11111       CONTINUE
11112       CONTINUE
            IF ((IU_D.EQ.1)) THEN
              IF ((DIST+1.0E-5.LT. USTEP)) THEN
                DIST=DIST+1.0E-5
              END IF
              USTEP=DIST
              CALL WHERE_AM_I(ICM_COLLIMAT,1)
              RETURN
            ELSE
              RETURN
            END IF
          END IF
        END IF
        IF ((W(NP) .LT. 0.0)) THEN
          IF ((RF2_COLLIMAT.LT.RMIN2_COLLIMAT)) THEN
            IF ((IU_D.EQ.0)) THEN
              RETURN
            ELSE
              IF ((STEP_UNIT+1.0E-5.LT. USTEP)) THEN
                STEP_UNIT=STEP_UNIT+1.0E-5
              END IF
              USTEP=STEP_UNIT
              IF ((N_GAP_COLLIMAT .EQ. 1)) THEN
                IRNEW =IREND_COLLIMAT
                RETURN
              ELSE
                CALL WHERE_AM_I(ICM_COLLIMAT,-1)
                RETURN
              END IF
            END IF
          ELSE
            DO 11121 J=I,1, -1
              CUT_COE=0.0
              CUT_COE1=0.0
              CUT_COE2=0.0
              DIST_TMP=(ZCORNER_COLLIMAT(J)-Z(NP))/W(NP)
              DIRTMP = -1
              IF ((DIST_TMP.GT.USTEP)) THEN
                STEP_UNIT=USTEP
                IU_D=0
              ELSE
                STEP_UNIT=DIST_TMP
                IU_D=1
              END IF
              RF2_COLLIMAT=(X(NP)+STEP_UNIT*U(NP))**2 +(Y(NP)+STEP_UNIT*
     *        V(NP))**2
              IF ((STEP_UNIT.LT.1.0E-5)) THEN
              ELSE IF((SURPARA_COLLIMAT(J,4).GT.1.0E29)) THEN
                IF ((IU_D.EQ.1)) THEN
                  RF_COLLIMAT=SQRT(RF2_COLLIMAT)
                  IF (( RF_COLLIMAT.LT.MAX(RCORNER_COLLIMAT(J), RCORNER_
     *            COLLIMAT(J+1)) .AND. RF_COLLIMAT.GT.MIN(RCORNER_COLLIM
     *            AT(J), RCORNER_COLLIMAT(J+1)))) THEN
                    IF ((STEP_UNIT+1.0E-5.LT. USTEP)) THEN
                      STEP_UNIT=STEP_UNIT+1.0E-5
                    END IF
                    USTEP=STEP_UNIT
                    IRNEW = IRSTART_COLLIMAT + 1
                    RETURN
                  END IF
                ELSE
                  USTEP=STEP_UNIT
                  RETURN
                END IF
              ELSE
                RV_COLLIMAT=RCORNER_COLLIMAT(J)+SURPARA_COLLIMAT(J,4) *(
     *          Z(NP)+STEP_UNIT*W(NP)-ZCORNER_COLLIMAT(J))
                RV2_COLLIMAT=RV_COLLIMAT**2
                IF ((RV2_COLLIMAT.LE.RF2_COLLIMAT)) THEN
                  RV_COLLIMAT=RCORNER_COLLIMAT(J) +SURPARA_COLLIMAT(J,4)
     *            *(Z(NP)-ZCORNER_COLLIMAT(J))
                  RV2_COLLIMAT=RV_COLLIMAT**2
                  R0DELR=X(NP)*U(NP)+Y(NP)*V(NP)
                  DELRSQ=U(NP)*U(NP)+V(NP)*V(NP)
                  A=DELRSQ-(SURPARA_COLLIMAT(J,4)**2)*(W(NP)**2)
                  B=R0DELR-SURPARA_COLLIMAT(J,4)*RV_COLLIMAT*W(NP)
                  B2=B*B
                  C=R0SQ-RV2_COLLIMAT
                  IF ((A.EQ.0.0)) THEN
                    IF ((B.NE.0.0)) THEN
                      CUT_COE=-0.5*C/B
                    ELSE
                      CUT_COE=-1.0E5
                    END IF
                  ELSE
                    TEMP1=B2-A*C
                    IF ((TEMP1.GE.0.0)) THEN
                      TEMP1=-(B+SIGN(one,B)*SQRT(TEMP1) )
                      CUT_COE1=TEMP1/A
                      CUT_COE2=C/TEMP1
                      IF ((CUT_COE1.GT.STEP_UNITOLD .AND. CUT_COE2.GT.ST
     *                EP_UNITOLD)) THEN
                        CUT_COE=MIN(CUT_COE1,CUT_COE2)
                      ELSE
                        CUT_COE=MAX(CUT_COE1,CUT_COE2)
                      END IF
                    END IF
                  END IF
                  IF ((CUT_COE.GT.STEP_UNITOLD .AND. CUT_COE.LT.STEP_UNI
     *            T)) THEN
                    IF ((CUT_COE+1.0E-5.LT. STEP_UNIT)) THEN
                      CUT_COE=CUT_COE+1.0E-5
                    END IF
                    USTEP=CUT_COE
                    IRNEW = IRSTART_COLLIMAT + 1
                    RETURN
                  ELSE IF(( CUT_COE .EQ. STEP_UNIT .AND. IU_D.EQ.1 )) TH
     *            EN
                    IF ((CUT_COE+1.0E-5.LT. USTEP)) THEN
                      CUT_COE=CUT_COE+1.0E-5
                    END IF
                    USTEP=CUT_COE
                    IF ((DIRTMP.EQ.1 .AND. J+1.EQ.NUM_NODE_COLLIMAT)) TH
     *              EN
                      CALL WHERE_AM_I(ICM_COLLIMAT,-1)
                      RETURN
                    ELSE IF(( DIRTMP.EQ.-1 .AND. J.EQ.1 )) THEN
                      IF ((N_GAP_COLLIMAT.EQ.0)) THEN
                        IRNEW=IREND_COLLIMAT
                        RETURN
                      ELSE
                        CALL WHERE_AM_I(ICM_COLLIMAT,-1)
                        RETURN
                      END IF
                    END IF
                  ELSE
                    USTEP=STEP_UNIT
                    IRNEW =IRSTART_COLLIMAT+1
                    RETURN
                  END IF
                ELSE IF((IU_D.EQ.0)) THEN
                  USTEP=STEP_UNIT
                  RETURN
                END IF
              END IF
              STEP_UNITOLD=STEP_UNIT
11121       CONTINUE
11122       CONTINUE
            IF ((IU_D.EQ.1)) THEN
              IF ((DIST+1.0E-5.LT. USTEP)) THEN
                DIST=DIST+1.0E-5
              END IF
              USTEP=DIST
              IF ((N_GAP_COLLIMAT .EQ. 1)) THEN
                IRNEW =IREND_COLLIMAT
                RETURN
              ELSE
                CALL WHERE_AM_I(ICM_COLLIMAT,-1)
                RETURN
              END IF
            ELSE
              RETURN
            END IF
          END IF
        ELSE
          J=I-1
          RV_COLLIMAT=RCORNER_COLLIMAT(J) +SURPARA_COLLIMAT(J,4)*(Z(NP)-
     *    ZCORNER_COLLIMAT(J))
          RV2_COLLIMAT=RV_COLLIMAT**2
          RF2_COLLIMAT=(X(NP)+USTEP*U(NP))**2+(Y(NP)+USTEP*V(NP))**2
          IF ((RF2_COLLIMAT.LT.RV2_COLLIMAT)) THEN
            RETURN
          ELSE
            R0DELR=X(NP)*U(NP)+Y(NP)*V(NP)
            DELRSQ=U(NP)*U(NP)+V(NP)*V(NP)
            CUT_COE=(SQRT(R0DELR*R0DELR+DELRSQ*(RV2_COLLIMAT-R0SQ))-R0DE
     *      LR)/ DELRSQ
            IF ((CUT_COE.GT.0.0 .AND. CUT_COE.LE. USTEP)) THEN
              IF ((CUT_COE+1.0E-5.LT. USTEP)) THEN
                CUT_COE=CUT_COE+1.0E-5
              END IF
              USTEP=CUT_COE
              IRNEW=IRSTART_COLLIMAT+1
              RETURN
            ELSE
              IRNEW=IRSTART_COLLIMAT+1
              RETURN
            END IF
          END IF
        END IF
      ELSE IF((IR_COLLIMAT .EQ. 2)) THEN
        IF ((W(NP) .GT. 0.0)) THEN
          DO 11131 J=I-1,NUM_NODE_COLLIMAT-1
            CUT_COE=0.0
            CUT_COE1=0.0
            CUT_COE2=0.0
            DIST_TMP=(ZCORNER_COLLIMAT(J+1)-Z(NP))/W(NP)
            DIRTMP=1
            IF ((DIST_TMP.GT.USTEP)) THEN
              STEP_UNIT=USTEP
              IU_D=0
            ELSE
              STEP_UNIT=DIST_TMP
              IU_D=1
            END IF
            IF ((SURPARA_COLLIMAT(J,4).GT.1.0E29)) THEN
              IF ((IU_D.EQ.1)) THEN
                RF2_COLLIMAT=(X(NP)+STEP_UNIT*U(NP))**2+(Y(NP) +STEP_UNI
     *          T*V(NP))**2
                RF_COLLIMAT=SQRT(RF2_COLLIMAT)
                IF (( RF_COLLIMAT.LT.MAX(RCORNER_COLLIMAT(J), RCORNER_CO
     *          LLIMAT(J+1)) .AND. RF_COLLIMAT.GT.MIN(RCORNER_COLLIMAT(J
     *          ), RCORNER_COLLIMAT(J+1)))) THEN
                  IF ((STEP_UNIT+1.0E-5.LT. USTEP)) THEN
                    STEP_UNIT=STEP_UNIT+1.0E-5
                  END IF
                  USTEP=STEP_UNIT
                  IRNEW = IRSTART_COLLIMAT+0
                  RETURN
                END IF
              ELSE
                USTEP=STEP_UNIT
                RETURN
              END IF
            ELSE
              RV_COLLIMAT=RCORNER_COLLIMAT(J) +SURPARA_COLLIMAT(J,4)*(Z(
     *        NP)-ZCORNER_COLLIMAT(J))
              RV2_COLLIMAT=RV_COLLIMAT**2
              R0DELR=X(NP)*U(NP)+Y(NP)*V(NP)
              DELRSQ=U(NP)*U(NP)+V(NP)*V(NP)
              A=DELRSQ-(SURPARA_COLLIMAT(J,4)**2)*(W(NP)**2)
              B=R0DELR-SURPARA_COLLIMAT(J,4)*RV_COLLIMAT*W(NP)
              B2=B*B
              C=R0SQ-RV2_COLLIMAT
              IF ((A.GT.0.0 .AND. B.GT.0.0 .AND. C.GT.0.0)) THEN
                IF ((IU_D.EQ.0)) THEN
                  USTEP=STEP_UNIT
                  RETURN
                END IF
              END IF
              IF ((A.EQ.0.0)) THEN
                IF ((B.NE.0.0)) THEN
                  CUT_COE=-0.5*C/B
                ELSE
                  CUT_COE=-1.0E5
                END IF
              ELSE
                TEMP1=B2-A*C
                IF ((TEMP1.GE.0.0)) THEN
                  TEMP1=-(B+SIGN(one,B)*SQRT(TEMP1) )
                  CUT_COE1=TEMP1/A
                  CUT_COE2=C/TEMP1
                  IF ((CUT_COE1.GT.STEP_UNITOLD .AND. CUT_COE2.GT.STEP_U
     *            NITOLD)) THEN
                    CUT_COE=MIN(CUT_COE1,CUT_COE2)
                  ELSE
                    CUT_COE=MAX(CUT_COE1,CUT_COE2)
                  END IF
                END IF
              END IF
              IF ((CUT_COE.GT.STEP_UNITOLD .AND. CUT_COE.LT.STEP_UNIT))
     *        THEN
                IF ((CUT_COE+1.0E-5.LT. STEP_UNIT)) THEN
                  CUT_COE=CUT_COE+1.0E-5
                END IF
                USTEP=CUT_COE
                IRNEW = IRSTART_COLLIMAT+0
                RETURN
              ELSE IF(( CUT_COE .EQ. STEP_UNIT .AND. IU_D.EQ.1 )) THEN
                IF ((CUT_COE+1.0E-5.LT. USTEP)) THEN
                  CUT_COE=CUT_COE+1.0E-5
                END IF
                USTEP=CUT_COE
                IF ((DIRTMP.EQ.1 .AND. J+1.EQ.NUM_NODE_COLLIMAT )) THEN
                  CALL WHERE_AM_I(ICM_COLLIMAT,1)
                  RETURN
                ELSE IF(( DIRTMP.EQ.-1 .AND. J.EQ.1 )) THEN
                  IF ((N_GAP_COLLIMAT.EQ.1)) THEN
                    IRNEW=IREND_COLLIMAT
                    RETURN
                  ELSE
                    CALL WHERE_AM_I(ICM_COLLIMAT,1)
                    RETURN
                  END IF
                END IF
              ELSE IF((CUT_COE .EQ. STEP_UNIT .AND. IU_D.EQ.0 )) THEN
                IRNEW=IRSTART_COLLIMAT+0
                USTEP=STEP_UNIT
                RETURN
              ELSE IF((IU_D.EQ.0)) THEN
                USTEP=STEP_UNIT
                RETURN
              END IF
            END IF
            STEP_UNITOLD=STEP_UNIT
11131     CONTINUE
11132     CONTINUE
          IF ((IU_D.EQ.1)) THEN
            IF ((DIST+1.0E-5.LT. USTEP)) THEN
              DIST=DIST+1.0E-5
            END IF
            USTEP=DIST
            CALL WHERE_AM_I(ICM_COLLIMAT,1)
            RETURN
          ELSE
            RETURN
          END IF
        END IF
        IF ((W(NP) .LT. 0.0)) THEN
          DO 11141 J=I,1, -1
            CUT_COE=0.0
            CUT_COE1=0.0
            CUT_COE2=0.0
            DIST_TMP=(ZCORNER_COLLIMAT(J)-Z(NP))/W(NP)
            DIRTMP=-1
            IF ((DIST_TMP.GT.USTEP)) THEN
              STEP_UNIT=USTEP
              IU_D=0
            ELSE
              STEP_UNIT=DIST_TMP
              IU_D=1
            END IF
            IF ((SURPARA_COLLIMAT(J,4).GT.1.0E29)) THEN
              IF ((IU_D.EQ.1)) THEN
                RF2_COLLIMAT=(X(NP)+STEP_UNIT*U(NP))**2+(Y(NP) +STEP_UNI
     *          T*V(NP))**2
                RF_COLLIMAT=SQRT(RF2_COLLIMAT)
                IF (( RF_COLLIMAT.LT.MAX(RCORNER_COLLIMAT(J), RCORNER_CO
     *          LLIMAT(J+1)) .AND. RF_COLLIMAT.GT.MIN(RCORNER_COLLIMAT(J
     *          ), RCORNER_COLLIMAT(J+1)))) THEN
                  IF ((STEP_UNIT+1.0E-5.LT. USTEP)) THEN
                    STEP_UNIT=STEP_UNIT+1.0E-5
                  END IF
                  USTEP=STEP_UNIT
                  IRNEW = IRSTART_COLLIMAT+0
                  RETURN
                END IF
              ELSE
                USTEP=STEP_UNIT
                RETURN
              END IF
            ELSE
              RV_COLLIMAT=RCORNER_COLLIMAT(J) +SURPARA_COLLIMAT(J,4)*(Z(
     *        NP)-ZCORNER_COLLIMAT(J))
              RV2_COLLIMAT=RV_COLLIMAT**2
              R0DELR=X(NP)*U(NP)+Y(NP)*V(NP)
              DELRSQ=U(NP)*U(NP)+V(NP)*V(NP)
              A=DELRSQ-(SURPARA_COLLIMAT(J,4)**2)*(W(NP)**2)
              B=R0DELR-SURPARA_COLLIMAT(J,4)*RV_COLLIMAT*W(NP)
              B2=B*B
              C=R0SQ-RV2_COLLIMAT
              IF ((A.GT.0.0 .AND. B.GT.0.0 .AND. C.GT.0.0)) THEN
                IF ((IU_D.EQ.0)) THEN
                  USTEP=STEP_UNIT
                  RETURN
                END IF
              END IF
              IF ((A.EQ.0.0)) THEN
                IF ((B.NE.0.0)) THEN
                  CUT_COE=-0.5*C/B
                ELSE
                  CUT_COE=-1.0E5
                END IF
              ELSE
                TEMP1=B2-A*C
                IF ((TEMP1.GE.0.0)) THEN
                  TEMP1=-(B+SIGN(one,B)*SQRT(TEMP1) )
                  CUT_COE1=TEMP1/A
                  CUT_COE2=C/TEMP1
                  IF ((CUT_COE1.GT.STEP_UNITOLD .AND. CUT_COE2.GT.STEP_U
     *            NITOLD)) THEN
                    CUT_COE=MIN(CUT_COE1,CUT_COE2)
                  ELSE
                    CUT_COE=MAX(CUT_COE1,CUT_COE2)
                  END IF
                END IF
              END IF
              IF ((CUT_COE.GT.STEP_UNITOLD .AND. CUT_COE.LT.STEP_UNIT))
     *        THEN
                IF ((CUT_COE+1.0E-5.LT. STEP_UNIT)) THEN
                  CUT_COE=CUT_COE+1.0E-5
                END IF
                USTEP=CUT_COE
                IRNEW = IRSTART_COLLIMAT+0
                RETURN
              ELSE IF(( CUT_COE .EQ. STEP_UNIT .AND. IU_D.EQ.1 )) THEN
                IF ((CUT_COE+1.0E-5.LT. USTEP)) THEN
                  CUT_COE=CUT_COE+1.0E-5
                END IF
                USTEP=CUT_COE
                IF ((DIRTMP.EQ.1 .AND. J+1.EQ.NUM_NODE_COLLIMAT )) THEN
                  CALL WHERE_AM_I(ICM_COLLIMAT,-1)
                  RETURN
                ELSE IF(( DIRTMP.EQ.-1 .AND. J.EQ.1 )) THEN
                  IF ((N_GAP_COLLIMAT.EQ.1)) THEN
                    IRNEW=IREND_COLLIMAT
                    RETURN
                  ELSE
                    CALL WHERE_AM_I(ICM_COLLIMAT,-1)
                    RETURN
                  END IF
                END IF
              ELSE IF((CUT_COE .EQ. STEP_UNIT .AND. IU_D.EQ.0 )) THEN
                IRNEW=IRSTART_COLLIMAT+0
                USTEP=STEP_UNIT
                RETURN
              ELSE IF((IU_D.EQ.0)) THEN
                USTEP=STEP_UNIT
                RETURN
              END IF
            END IF
            STEP_UNITOLD=STEP_UNIT
11141     CONTINUE
11142     CONTINUE
          IF ((IU_D.EQ.1)) THEN
            IF ((DIST+1.0E-5.LT. USTEP)) THEN
              DIST=DIST+1.0E-5
            END IF
            USTEP=DIST
            IF ((N_GAP_COLLIMAT .EQ. 1)) THEN
              IRNEW =IREND_COLLIMAT
              RETURN
            ELSE
              CALL WHERE_AM_I(ICM_COLLIMAT,-1)
              RETURN
            END IF
          ELSE
            RETURN
          END IF
        ELSE
          J=I-1
          RV_COLLIMAT=RCORNER_COLLIMAT(J) +SURPARA_COLLIMAT(J,4)*(Z(NP)-
     *    ZCORNER_COLLIMAT(J))
          RV2_COLLIMAT=RV_COLLIMAT**2
          R0DELR=X(NP)*U(NP)+Y(NP)*V(NP)
          DELRSQ=U(NP)*U(NP)+V(NP)*V(NP)
          IF ((R0DELR*R0DELR+DELRSQ*(RV2_COLLIMAT-R0SQ) .LT. 0.)) THEN
            RETURN
          END IF
          CUT_COE=(-SQRT(R0DELR*R0DELR+DELRSQ*(RV2_COLLIMAT-R0SQ))-R0DEL
     *    R)/ DELRSQ
          IF ((CUT_COE.GT.0.0 .AND. CUT_COE.LE. USTEP)) THEN
            IF ((CUT_COE+1.0E-5.LT. USTEP)) THEN
              CUT_COE=CUT_COE+1.0E-5
            END IF
            USTEP=CUT_COE
            IRNEW = IRSTART_COLLIMAT
            RETURN
          ELSE
            RETURN
          END IF
        END IF
      ELSE IF((IR_COLLIMAT .EQ. 3)) THEN
        IF ((W(NP) .GT. 0.0)) THEN
          IF ((DIST .LE. USTEP )) THEN
            IF ((DIST+1.0E-5.LT. USTEP)) THEN
              DIST=DIST+1.0E-5
            END IF
            USTEP = DIST
            IF (( ( (X(NP)+DIST*U(NP))**2+(Y(NP)+DIST*V(NP))**2) .LE.RCO
     *      RNER2_COLLIMAT(1) )) THEN
              IRNEW =IRSTART_COLLIMAT
              RETURN
            ELSE
              IRNEW =IRSTART_COLLIMAT+1
              RETURN
            END IF
          ELSE
            RETURN
          END IF
        ELSE IF((W(NP) .LT. 0.0)) THEN
          IF ((DIST .LE. USTEP )) THEN
            IF ((DIST+1.0E-5.LT. USTEP)) THEN
              DIST=DIST+1.0E-5
            END IF
            USTEP = DIST
            CALL WHERE_AM_I(ICM_COLLIMAT,-1)
            RETURN
          ELSE
            RETURN
          END IF
        END IF
      ELSE
        WRITE(6,11150)IR(NP)-IRSTART_COLLIMAT+1, IR(NP), ICM_COLLIMAT, I
     *  R_start_CM(ICM_COLLIMAT)
11150   FORMAT(//' ************'//' HOWFAR_COLLIMAT error'/ '    Region,
     * local, absolute =',2I5/ '    CM number=',I5,' start region =',I5/
     *' *********'//)
        STOP
      END IF
      RETURN
      END
      SUBROUTINE WHERE_AM_I_COLLIMAT(IDIR)
      IMPLICIT NONE
      COMMON/CM_COLLIMAT/ ICM_COLLIMAT, IRSTART_COLLIMAT, IREND_COLLIMAT
     *, N_COLLIMAT, N_GAP_COLLIMAT, IR_COLLIMAT, COUNT1_COLLIMAT, TITLE_
     *COLLIMAT, ZMIN_COLLIMAT, ZMAX_COLLIMAT, ZFRONT_COLLIMAT, NUM_NODE_
     *COLLIMAT, INDEX_COLLIMAT, ZCORNER_COLLIMAT, RCORNER_COLLIMAT, RCOR
     *NER2_COLLIMAT, SURPARA_COLLIMAT, RMIN_COLLIMAT, RMIN2_COLLIMAT, CR
     *ITOLD_COLLIMAT
      INTEGER ICM_COLLIMAT, IRSTART_COLLIMAT, IREND_COLLIMAT, N_COLLIMAT
     *, N_GAP_COLLIMAT, IR_COLLIMAT, COUNT1_COLLIMAT, NUM_NODE_COLLIMAT,
     *INDEX_COLLIMAT
      real*8 ZMIN_COLLIMAT, ZMAX_COLLIMAT, ZFRONT_COLLIMAT, ZCORNER_COLL
     *IMAT(15),RCORNER_COLLIMAT(15), RCORNER2_COLLIMAT(15), SURPARA_COLL
     *IMAT(15-1,4), RMIN_COLLIMAT, RMIN2_COLLIMAT, CRITOLD_COLLIMAT
      CHARACTER*1 TITLE_COLLIMAT(60)
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      INTEGER IDIR
      real*8 XBDY_COLLIMAT,YBDY_COLLIMAT,RBDY2_COLLIMAT
      XBDY_COLLIMAT = X(NP) + U(NP)*USTEP
      YBDY_COLLIMAT = Y(NP) + V(NP)*USTEP
      RBDY2_COLLIMAT = XBDY_COLLIMAT**2 + YBDY_COLLIMAT**2
      IF (((IRSTART_COLLIMAT .EQ. 2) .AND. (IDIR .EQ.1))) THEN
        RBDY2_COLLIMAT = X(NP)*X(NP) + Y(NP)*Y(NP)
      END IF
      IF ((IDIR.EQ.1)) THEN
        IF ((N_GAP_COLLIMAT .EQ. 0)) THEN
          IF ((RBDY2_COLLIMAT .LT. RCORNER2_COLLIMAT(1))) THEN
            IRNEW = IRSTART_COLLIMAT
          ELSE
            IRNEW = IRSTART_COLLIMAT + 1
          END IF
        ELSE
          IRNEW = IREND_COLLIMAT
        END IF
      ELSE
        IF ((RBDY2_COLLIMAT .LT. RCORNER2_COLLIMAT(NUM_NODE_COLLIMAT)))
     *  THEN
          IRNEW = IRSTART_COLLIMAT
        ELSE
          IRNEW = IRSTART_COLLIMAT + 1
        END IF
      END IF
      RETURN
      END
      SUBROUTINE INPUT_COLLIMAT
      IMPLICIT NONE
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/CM_COLLIMAT/ ICM_COLLIMAT, IRSTART_COLLIMAT, IREND_COLLIMAT
     *, N_COLLIMAT, N_GAP_COLLIMAT, IR_COLLIMAT, COUNT1_COLLIMAT, TITLE_
     *COLLIMAT, ZMIN_COLLIMAT, ZMAX_COLLIMAT, ZFRONT_COLLIMAT, NUM_NODE_
     *COLLIMAT, INDEX_COLLIMAT, ZCORNER_COLLIMAT, RCORNER_COLLIMAT, RCOR
     *NER2_COLLIMAT, SURPARA_COLLIMAT, RMIN_COLLIMAT, RMIN2_COLLIMAT, CR
     *ITOLD_COLLIMAT
      INTEGER ICM_COLLIMAT, IRSTART_COLLIMAT, IREND_COLLIMAT, N_COLLIMAT
     *, N_GAP_COLLIMAT, IR_COLLIMAT, COUNT1_COLLIMAT, NUM_NODE_COLLIMAT,
     *INDEX_COLLIMAT
      real*8 ZMIN_COLLIMAT, ZMAX_COLLIMAT, ZFRONT_COLLIMAT, ZCORNER_COLL
     *IMAT(15),RCORNER_COLLIMAT(15), RCORNER2_COLLIMAT(15), SURPARA_COLL
     *IMAT(15-1,4), RMIN_COLLIMAT, RMIN2_COLLIMAT, CRITOLD_COLLIMAT
      CHARACTER*1 TITLE_COLLIMAT(60)
      COMMON/GEOM/ NREG
      INTEGER NREG
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 ZTHICK_COLLIMAT
      INTEGER I,J,  IRA,  MED_FLAG,  MED_INDEX,  IREJCTIN
      N_COLLIMAT = 2
      ICM_COLLIMAT = ICM
      IRSTART_COLLIMAT = IR_start_CM(ICM_COLLIMAT)
      IERR_GEOM(ICM_COLLIMAT) = 0
      COUNT1_COLLIMAT=0
      WRITE(6,11160)
11160 FORMAT(/' COLLIMAT (CONS3R)')
      WRITE(6,11170)
11170 FORMAT(/' This component is a set of stacked cones with 3 regions'
     *)
      WRITE(6,11180)RMAX_CM(ICM)
11180 FORMAT('    Outer boundary is a cylinder of radius',F12.3,' cm')
      IF ((ICM .EQ. 1)) THEN
        WRITE(6,11190)Z_min_CM(1)
11190   FORMAT(' This is first component -- starts at',F10.4,' cm from z
     *=0 ref plane')
      ELSE
        WRITE(6,11200)Z_min_CM(ICM)
11200   FORMAT(' This CM starts at back of previous CM at', F12.5,' cm')
      END IF
      WRITE(6,11210)
11210 FORMAT(' TITLE: ',$)
      READ(i_input,11220,END=11230,ERR=11240)TITLE_COLLIMAT
11220 FORMAT(60A1)
      WRITE(6,11250)TITLE_COLLIMAT
11250 FORMAT(' ',60A1)
      WRITE(6,11260)Z_min_CM(ICM_COLLIMAT)
11260 FORMAT(' Air gap/front of this  CM starts at:',F10.4, ' cm')
      WRITE(6,11270)
11270 FORMAT(' Distance from front of cones(not air gap) to z = 0.0 plan
     *e: ',$)
      READ(i_input,11280,END=11230,ERR=11240)ZMIN_COLLIMAT
11280 FORMAT(F15.0)
      WRITE(6,11290)ZMIN_COLLIMAT
11290 FORMAT(F15.5)
      IF ((Z_min_CM(ICM_COLLIMAT).GT.ZMIN_COLLIMAT)) THEN
        IF ((ICM_COLLIMAT.EQ.1)) THEN
          WRITE(6,11300)ICM_COLLIMAT, Z_min_CM(ICM_COLLIMAT),ZMIN_COLLIM
     *    AT
11300     FORMAT(//' ***WARNING IN CM ',I4,' (CONS3R):'/ ' Z_min_CM(1) >
     * distance to front of cones'/ ' Z_min_CM(1) reset to ',F8.5,' cm f
     *rom ',F8.5,' cm'//)
          WRITE(IOUTLIST,100)ICM_COLLIMAT, Z_min_CM(ICM_COLLIMAT),ZMIN_C
     *    OLLIMAT
100       FORMAT(//' ***WARNING IN CM ',I4,' (CONS3R):'/ ' Z_min_CM(1) >
     * distance to front of cones'/ ' Z_min_CM(1) reset to ',F8.5,' cm f
     *rom ',F8.5,' cm'//)
          Z_min_CM(ICM_COLLIMAT)=ZMIN_COLLIMAT
        ELSE
          WRITE(6,11310)ICM_COLLIMAT
11310     FORMAT(//'***ERROR IN CM ',I4,' (CONS3R):'/ 'Overlaps with pre
     *vious CM'//)
          IERR_GEOM(ICM_COLLIMAT)=IERR_GEOM(ICM_COLLIMAT)+1
        END IF
      END IF
      WRITE(6,11320)
11320 FORMAT(' CONS3R total thickness (in cm, excluding front air): ',$)
      READ(i_input,11330,END=11230,ERR=11240)ZTHICK_COLLIMAT
11330 FORMAT (F15.0)
      WRITE(6,11340)ZTHICK_COLLIMAT
11340 FORMAT(F15.5)
      IF ((ZTHICK_COLLIMAT.LT.0.0)) THEN
        WRITE(6,11350)ICM_COLLIMAT
11350   FORMAT(//'***ERROR IN CM ',I4,' (CONS3R):'/ 'ZTHICK < 0.0'//)
        IERR_GEOM(ICM_COLLIMAT)=IERR_GEOM(ICM_COLLIMAT)+1
      END IF
      WRITE(6,11360)15 +1
11360 FORMAT(' INPUT THE # OF NODES (VERTICES) DEFINING THE CONES ' / '(
     *1 < # NODES < ',I4,'):',$)
      READ(i_input,11370,END=11230,ERR=11240)NUM_NODE_COLLIMAT
11370 FORMAT (I5)
      WRITE(6,11380)NUM_NODE_COLLIMAT
11380 FORMAT(I5)
      IF ((NUM_NODE_COLLIMAT .GT. 15)) THEN
        WRITE(6,11390)ICM_COLLIMAT, 15
11390   FORMAT(//'***ERROR IN CM ',I4,' (CONS3R):'/ '# of nodes input >m
     *ax. # of nodes allowed',/ '# of nodes reduced to ',I4,' for now'//
     *)
        NUM_NODE_COLLIMAT=15
        IERR_GEOM(ICM_COLLIMAT)=IERR_GEOM(ICM_COLLIMAT)+1
      ELSE IF((NUM_NODE_COLLIMAT .LT. 2)) THEN
        WRITE(6,11400)ICM_COLLIMAT
11400   FORMAT(//'***ERROR IN CM ',I4,' (CONS3R):'/ '# nodes input < 2',
     */ '# of nodes set to 2 for now'//)
        NUM_NODE_COLLIMAT=2
        IERR_GEOM(ICM_COLLIMAT)=IERR_GEOM(ICM_COLLIMAT)+1
      END IF
      WRITE(6,11410)NUM_NODE_COLLIMAT
11410 FORMAT(' INPUT THE  COORDINATES PAIRS (Z, R) FOR ', I5, ' NODES, O
     *NE PAIR/LINE'/ ' RECALL THAT Z(i+1) >= Z(i)')
      DO 11421 I=1,NUM_NODE_COLLIMAT
        WRITE(6,11430)I
11430   FORMAT(' INPUT COORDINATES OF NODE',I3, ' AS Z, R: ', $)
        READ(i_input,11440,END=11230,ERR=11240)ZCORNER_COLLIMAT(I), RCOR
     *  NER_COLLIMAT(I)
11440   FORMAT (2F15.0)
        WRITE(6,11450)ZCORNER_COLLIMAT(I), RCORNER_COLLIMAT(I)
11450   FORMAT(2F15.5)
        IF (( ZCORNER_COLLIMAT(1).NE.ZMIN_COLLIMAT)) THEN
          WRITE(6,11460)ICM_COLLIMAT, ZMIN_COLLIMAT,ZCORNER_COLLIMAT(1)
11460     FORMAT(//' ***WARNING IN CM ',I4,' (CONS3R):'/ ' Z(1) must =',
     *F15.5,' cm so value changed '/ ' from',F15.5,' cm'//)
          WRITE(IOUTLIST,101)ICM_COLLIMAT,ZMIN_COLLIMAT,ZCORNER_COLLIMAT
     *    (1)
101       FORMAT(//' ***WARNING IN CM ',I4,' (CONS3R):'/ ' Z(1) must =',
     *F15.5,' cm so value changed '/ ' from',F15.5,' cm'//)
          ZCORNER_COLLIMAT(1)=ZMIN_COLLIMAT
        END IF
        IF ((I.GT.1)) THEN
          IF ((ZCORNER_COLLIMAT(I-1).GT.ZCORNER_COLLIMAT(I))) THEN
            WRITE(6,11470)ICM_COLLIMAT, I, I-1
11470       FORMAT(//'***ERROR IN CM ',I4,' (CONS3R):'/ 'Z(',I4,') < Z('
     *,I4,')'//)
            IERR_GEOM(ICM_COLLIMAT)=IERR_GEOM(ICM_COLLIMAT)+1
          END IF
        END IF
        IF ((RCORNER_COLLIMAT(I) .GT. RMAX_CM(ICM_COLLIMAT))) THEN
          WRITE(6,11480)ICM_COLLIMAT, I
11480     FORMAT(//'***WARNING IN CM ',I4,' (CONS3R):'/ 'R(',I4,') > RMA
     *X_CM'//)
          WRITE(IOUTLIST,'(//''***WARNING IN CM '',I4,'' (CONS3R):''/
     *                                        ''R('',I4,'') > RMAX_CM''/
     */)') ICM_COLLIMAT, I
        END IF
11421 CONTINUE
11422 CONTINUE
      IF ((ZCORNER_COLLIMAT(NUM_NODE_COLLIMAT).NE.ZMIN_COLLIMAT+ZTHICK_C
     *OLLIMAT)) THEN
        IF ((ABS(ZCORNER_COLLIMAT(NUM_NODE_COLLIMAT) - (ZMIN_COLLIMAT+ZT
     *  HICK_COLLIMAT)) .GT. 0.001)) THEN
          WRITE(6,11490)ICM_COLLIMAT, ZMIN_COLLIMAT+ZTHICK_COLLIMAT, ZCO
     *    RNER_COLLIMAT(NUM_NODE_COLLIMAT)
11490     FORMAT(//' ***WARNING IN CM ',I4,' (CONS3R):'/ ' Last Z must =
     *',F15.5,' cm, so value changed'/ ' from',F15.5,' cm'//)
          WRITE(IOUTLIST,102)ICM_COLLIMAT, ZMIN_COLLIMAT+ZTHICK_COLLIMAT
     *    , ZCORNER_COLLIMAT(NUM_NODE_COLLIMAT)
102       FORMAT(//' ***WARNING IN CM ',I4,' (CONS3R):'/ ' Last Z must =
     *',F15.5,' cm, so value changed'/ ' from',F15.5,' cm'//)
        END IF
        ZCORNER_COLLIMAT(NUM_NODE_COLLIMAT) = ZMIN_COLLIMAT+ZTHICK_COLLI
     *  MAT
      END IF
      IF (( ZCORNER_COLLIMAT(1).EQ.ZCORNER_COLLIMAT(2) .OR. ZCORNER_COLL
     *IMAT(NUM_NODE_COLLIMAT).EQ.ZCORNER_COLLIMAT(NUM_NODE_COLLIMAT-1)))
     * THEN
        WRITE(6,11500)
11500   FORMAT(/ 1X,79('*')/' NOTE: the input is not economical becauseo
     *f', ' 0 thickness regions, please, rearrange it for next run' / 1X
     *,79('*'))
      END IF
      DO 11511 I=1,NUM_NODE_COLLIMAT
        RCORNER_COLLIMAT(I)=ABS(RCORNER_COLLIMAT(I))
11511 CONTINUE
11512 CONTINUE
      RMIN_COLLIMAT=RCORNER_COLLIMAT(1)
      DO 11521 I=2,NUM_NODE_COLLIMAT
        RMIN_COLLIMAT=MIN(RCORNER_COLLIMAT(I),RMIN_COLLIMAT)
11521 CONTINUE
11522 CONTINUE
      RMIN2_COLLIMAT=RMIN_COLLIMAT**2
      IRA = IRSTART_COLLIMAT-1
      WRITE(6,11530)
11530 FORMAT(/' For this CM, the inner region is 1, the outer 2')
      DO 11541 IR_COLLIMAT=1,N_COLLIMAT
        IRA = IRA+1
        WRITE(6,11550)IR_COLLIMAT,IREJCT_GLOBAL
11550   FORMAT(' For region',I3,/' ECUT, PCUT(MeV),', ' DOSE ZONE (0=> N
     *O DOSE), IREGION_TO_BIT, IREJCT(0=>',I2, ' -1=>0)' /' : ',$)
        READ(i_input,11560,END=11230,ERR=11240)ECUT(IRA), PCUT(IRA), DOS
     *  E_ZONE(IRA), IREGION_TO_BIT(IRA),IREJCTIN
11560   FORMAT (2F15.0,3I5)
        IF ((ECUT(IRA) .LT. ECUTIN)) THEN
          ECUT(IRA)=ECUTIN
        END IF
        IF ((PCUT(IRA) .LT. PCUTIN)) THEN
          PCUT(IRA)=PCUTIN
        END IF
        IF ((IREJCTIN .LT. 0)) THEN
          IREJCT(IRA) = 0
        END IF
        WRITE(6,11570)ECUT(IRA),PCUT(IRA),DOSE_ZONE(IRA), IREGION_TO_BIT
     *  (IRA),IREJCTIN
11570   FORMAT(2F15.5,3I10)
        WRITE(6,11580)IR_COLLIMAT
11580   FORMAT(' material of region ',I3,' ',$)
        WRITE(6,11590)
11590   FORMAT(' MEDIUM (left justify): ',$)
        READ(i_input,'(24A1)',END=11230,ERR=11240) (MED_IN(J),J=1,24)
        WRITE(6,11600)(MED_IN(J),J=1,24)
11600   FORMAT(' ',24A1)
        IF ((MED_IN(1) .EQ. 'V' .AND. MED_IN(2).EQ.'A' .AND. MED_IN(3).E
     *  Q.'C' .AND. MED_IN(4) .EQ. 'U' .AND. MED_IN(5).EQ.'U' .AND. MED_
     *  IN(6).EQ.'M')) THEN
          MED_INDEX=0
        ELSE
          IF ((NMED .NE. 0)) THEN
            DO 11611 I=1,NMED
              MED_FLAG = 0
              DO 11621 J=1,24
                IF ((MEDIA(J,I) .NE. MED_IN(J))) THEN
                  MED_FLAG = 1
                  GO TO11622
                END IF
11621         CONTINUE
11622         CONTINUE
              IF ((MED_FLAG .EQ. 0)) THEN
                MED_INDEX = I
                GO TO11612
              END IF
              IF ((I .EQ. NMED)) THEN
                NMED = NMED+1
                MED_INDEX = NMED
                DO 11631 J=1,24
                  MEDIA(J,NMED) = MED_IN(J)
11631           CONTINUE
11632           CONTINUE
                GO TO11612
              END IF
11611       CONTINUE
11612       CONTINUE
          ELSE
            NMED = 1
            MED_INDEX = NMED
            DO 11641 J=1,24
              MEDIA(J,NMED) = MED_IN(J)
11641       CONTINUE
11642       CONTINUE
          END IF
        END IF
        MED(IRA) = MED_INDEX
11541 CONTINUE
11542 CONTINUE
      ZMAX_COLLIMAT = ZMIN_COLLIMAT + ZTHICK_COLLIMAT
      DO 11651 I=1,NUM_NODE_COLLIMAT-1
        IF ((ZCORNER_COLLIMAT(I).EQ.ZCORNER_COLLIMAT(I+1))) THEN
          SURPARA_COLLIMAT(I,4)=1.0E30
          SURPARA_COLLIMAT(I,1)=0.0
          SURPARA_COLLIMAT(I,2)=-1.0
          SURPARA_COLLIMAT(I,3)=ZCORNER_COLLIMAT(I)
        ELSE
          SURPARA_COLLIMAT(I,4)=(RCORNER_COLLIMAT(I+1)-RCORNER_COLLIMAT(
     *    I)) /(ZCORNER_COLLIMAT(I+1)-ZCORNER_COLLIMAT(I))
          SURPARA_COLLIMAT(I,1)= 1.0/SQRT(1.0+SURPARA_COLLIMAT(I,4)**2)
          SURPARA_COLLIMAT(I,2)= -SURPARA_COLLIMAT(I,4)/ SQRT(1.0+SURPAR
     *    A_COLLIMAT(I,4)**2)
          SURPARA_COLLIMAT(I,3)= (SURPARA_COLLIMAT(I,4)*ZCORNER_COLLIMAT
     *    (I)-RCORNER_COLLIMAT(I)) /SQRT(1.0+SURPARA_COLLIMAT(I,4)**2)
        END IF
11651 CONTINUE
11652 CONTINUE
      DO 11661 I=1,NUM_NODE_COLLIMAT
        RCORNER2_COLLIMAT(I)=RCORNER_COLLIMAT(I)**2
11661 CONTINUE
11662 CONTINUE
      ZFRONT_COLLIMAT = Z_min_CM(ICM_COLLIMAT)
      Z_min_CM(ICM_COLLIMAT+1) = ZMAX_COLLIMAT
      Z_gap_THICK(ICM_COLLIMAT) = ZMIN_COLLIMAT - Z_min_CM(ICM_COLLIMAT)
      IF ((Z_gap_THICK(ICM_COLLIMAT) .LE. 0.0)) THEN
        Z_gap_THICK(ICM_COLLIMAT) = 0.
        N_GAP_COLLIMAT = 0
      ELSE
        N_GAP_COLLIMAT = 1
        IRA = IRSTART_COLLIMAT+N_COLLIMAT
        MED(IRA) = AIR_INDEX
        ESAVE(IRA)=ESAVE_GLOBAL
        ECUT(IRA)=ECUTIN
        PCUT(IRA)=PCUTIN
        ECUTRR(IRA)=ECUT(IRA)
      END IF
      IREND_COLLIMAT = (IRSTART_COLLIMAT -1) +N_COLLIMAT+N_GAP_COLLIMAT
      NREG = NREG+N_COLLIMAT+N_GAP_COLLIMAT
      IF ((NREG .LE. 3000)) THEN
        IR_start_CM(ICM_COLLIMAT+1) = IREND_COLLIMAT+1
      ELSE
        WRITE(6,11670)ICM_COLLIMAT,NREG,3000
11670   FORMAT(//'***ERROR IN CM ',I4,' (CONS3R):'/ I4,' regions request
     *ed, only ',I4,' available')
        IERR_GEOM(ICM_COLLIMAT)=IERR_GEOM(ICM_COLLIMAT)+1
      END IF
      RMAX_CM_FLAG(ICM_COLLIMAT) = 1
      IRA = IRSTART_COLLIMAT-1
      DO 11681 IR_COLLIMAT=1,N_COLLIMAT
        IRA = IRA+1
        NDOSE_ZONE = MAX(DOSE_ZONE(IRA),NDOSE_ZONE)
        MAX_BIT = MAX(IREGION_TO_BIT(IRA),MAX_BIT)
        ESAVE(IRA)=ESAVE_GLOBAL
        ECUTRR(IRA)=ECUT(IRA)
        E_min_out(ICM_COLLIMAT)=ECUT(IRA)
11681 CONTINUE
11682 CONTINUE
      RETURN
11230 CONTINUE
      WRITE(6,11690)ICM
11690 FORMAT(//' *** ERROR *** unexpected end of file reading input forC
     *ONS3R--CM',I3)
      STOP
11240 CONTINUE
      WRITE(6,11700)ICM
11700 FORMAT(//' *** ERROR *** format error on input for CONS3R--CM',I3)
      STOP
      END
      SUBROUTINE ISUMRY_COLLIMAT
      IMPLICIT NONE
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/CM_COLLIMAT/ ICM_COLLIMAT, IRSTART_COLLIMAT, IREND_COLLIMAT
     *, N_COLLIMAT, N_GAP_COLLIMAT, IR_COLLIMAT, COUNT1_COLLIMAT, TITLE_
     *COLLIMAT, ZMIN_COLLIMAT, ZMAX_COLLIMAT, ZFRONT_COLLIMAT, NUM_NODE_
     *COLLIMAT, INDEX_COLLIMAT, ZCORNER_COLLIMAT, RCORNER_COLLIMAT, RCOR
     *NER2_COLLIMAT, SURPARA_COLLIMAT, RMIN_COLLIMAT, RMIN2_COLLIMAT, CR
     *ITOLD_COLLIMAT
      INTEGER ICM_COLLIMAT, IRSTART_COLLIMAT, IREND_COLLIMAT, N_COLLIMAT
     *, N_GAP_COLLIMAT, IR_COLLIMAT, COUNT1_COLLIMAT, NUM_NODE_COLLIMAT,
     *INDEX_COLLIMAT
      real*8 ZMIN_COLLIMAT, ZMAX_COLLIMAT, ZFRONT_COLLIMAT, ZCORNER_COLL
     *IMAT(15),RCORNER_COLLIMAT(15), RCORNER2_COLLIMAT(15), SURPARA_COLL
     *IMAT(15-1,4), RMIN_COLLIMAT, RMIN2_COLLIMAT, CRITOLD_COLLIMAT
      CHARACTER*1 TITLE_COLLIMAT(60)
      COMMON/GEOM/ NREG
      INTEGER NREG
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      INTEGER ICOLOUR,  IRA,  I,J
      real*8 VOL_COLLIMAT(3), PIL
      PIL=3.14159
      VOL_COLLIMAT(1)=0.0
      VOL_COLLIMAT(2)=0.0
      VOL_COLLIMAT(3)=0.0
      IF ((N_GAP_COLLIMAT.EQ.1)) THEN
        VOL_COLLIMAT(3)=PIL*(ZMIN_COLLIMAT-Z_min_CM(ICM_COLLIMAT)) *RMAX
     *  _CM(ICM_COLLIMAT)**2
      END IF
      DO 11711 I=1,NUM_NODE_COLLIMAT-1
        IF ((ZCORNER_COLLIMAT(I).NE.ZCORNER_COLLIMAT(I+1) )) THEN
          VOL_COLLIMAT(1)=VOL_COLLIMAT(1)+ PIL/3.0*(ZCORNER_COLLIMAT(I+1
     *    )-ZCORNER_COLLIMAT(I))* ( RCORNER_COLLIMAT(I+1)**2 + RCORNER_C
     *    OLLIMAT(I)**2 +RCORNER_COLLIMAT(I+1)*RCORNER_COLLIMAT(I) )
        END IF
11711 CONTINUE
11712 CONTINUE
      VOL_COLLIMAT(2)=PIL*(ZMAX_COLLIMAT-ZMIN_COLLIMAT)* RMAX_CM(ICM_COL
     *LIMAT)**2-VOL_COLLIMAT(1)
      IRA = IRSTART_COLLIMAT-1
      DO 11721 IR_COLLIMAT=1,N_COLLIMAT+N_GAP_COLLIMAT
        IRA = IRA+1
        IF ((DOSE_ZONE(IRA) .NE. 0)) THEN
          ID=DOSE_ZONE(IRA)
          AMASS(ID)=AMASS(ID)+VOL_COLLIMAT(IR_COLLIMAT)*RHOR(IRA)
        END IF
11721 CONTINUE
11722 CONTINUE
      WRITE(IOUTLIST,110) ICM_COLLIMAT,TITLE_COLLIMAT
      WRITE(IOUTLIST,120) Z_min_CM(ICM_COLLIMAT),RMAX_CM(ICM_COLLIMAT)
      IF ((N_GAP_COLLIMAT.NE.0)) THEN
        WRITE(IOUTLIST,124) Z_min_CM(ICM_COLLIMAT), ZCORNER_COLLIMAT(1)-
     *  Z_min_CM(ICM_COLLIMAT)
      END IF
      IRA = IRSTART_COLLIMAT-1
      WRITE(IOUTLIST,122)
      DO 11731 I=1,NUM_NODE_COLLIMAT
        WRITE(IOUTLIST,123) I, ZCORNER_COLLIMAT(I), RCORNER_COLLIMAT(I)
11731 CONTINUE
11732 CONTINUE
      WRITE(IOUTLIST,130)
      DO 11741 IR_COLLIMAT=1,N_COLLIMAT
        IRA = IRA+1
        IF ((IR_COLLIMAT.EQ.1)) THEN
          IF ((MED(IRA).EQ.0)) THEN
            WRITE(IOUTLIST,140) IR_COLLIMAT,'inside',ECUT(IRA),PCUT(IRA)
     *      , ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),IREGION_TO_BIT(IRA),
     *       'V','a','c','u','u','m'
          ELSE
            WRITE(IOUTLIST,140) IR_COLLIMAT,'inside',ECUT(IRA),PCUT(IRA)
     *      , ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),IREGION_TO_BIT(IRA),
     *       (MEDIA(J,MED(IRA)),J=1,9)
          END IF
        ELSE IF((IR_COLLIMAT.EQ.2)) THEN
          IF ((MED(IRA).EQ.0)) THEN
            WRITE(IOUTLIST,140) IR_COLLIMAT,'outside',ECUT(IRA),PCUT(IRA
     *      ), ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),IREGION_TO_BIT(IRA)
     *      , 'V','a','c','u','u','m'
          ELSE
            WRITE(IOUTLIST,140) IR_COLLIMAT,'outside',ECUT(IRA),PCUT(IRA
     *      ), ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),IREGION_TO_BIT(IRA)
     *      , (MEDIA(J,MED(IRA)),J=1,9)
          END IF
        END IF
11741 CONTINUE
11742 CONTINUE
      IF ((N_GAP_COLLIMAT .NE.0)) THEN
        IRA=IRSTART_COLLIMAT+N_COLLIMAT
        WRITE(IOUTLIST,140) IR_COLLIMAT,'airgap',ECUT(IRA),PCUT(IRA), EC
     *  UTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),IREGION_TO_BIT(IRA), (MEDIA(
     *  J,MED(IRA)),J=1,9)
        WRITE(IOUTLIST,141)'at top'
      END IF
110   FORMAT(///1X,79('-')/'  Component module',I3,' - stacked truncated
     *', ' cones (3 regions CONS3R)' /1X,79('-') //T5,'Title: ',68A1)
120   FORMAT(/T2,'COLLIMAT geometry parameters:', /T2,'-----------------
     *---------', /T2,'Distance from front of CM from reference plane ='
     *, F15.5,' cm', /T2,'Radius of outer boundary of CM = ',F15.5,' cm'
     *)
122   FORMAT(/T2,'node      Z(cm)     r(cm)')
123   FORMAT(T2,I3,F11.3,F10.3)
124   FORMAT(T2,'There is an airgap which starts at Z=',F8.5,' cm and is
     * ', F8.5,' cm thick.')
130   FORMAT(/T2,'COLLIMAT region parameters:', /T2,'-------------------
     *------', /T2,'local  location  electron  photon', '  range-rejecti
     *on   dose  bit  medium' /T2,'region            cutoff   cutoff', '
     *   level     max    zone  set' /T2,'                   (MeV)    (M
     *eV)', '   (MeV)    (MeV)')
140   FORMAT(T2,I3,4X,A7,F10.3,F9.3,F8.3,F9.3,I6,I5,3X,9A1)
141   FORMAT(T9,A7)
      IF ((IWATCH .EQ. 4 .OR. IZLAST .EQ. 2)) THEN
        ICOLOUR=4
        IF ((NUM_NODE_COLLIMAT .GT. 10)) THEN
          WRITE(IOUTGEOM,201)ICOLOUR,'GROT',0.0,0.0,0.0,0.0, (ZCORNER_CO
     *    LLIMAT(I),RCORNER_COLLIMAT(I),I=1,10),0.0,0.0
          WRITE(IOUTGEOM,201)ICOLOUR,'GROT',0.0,0.0,0.0,0.0, (ZCORNER_CO
     *    LLIMAT(I),RCORNER_COLLIMAT(I),I=10,NUM_NODE_COLLIMAT),0.0,0.0
        ELSE
          WRITE(IOUTGEOM,201)ICOLOUR,'GROT',0.0,0.0,0.0,0.0, (ZCORNER_CO
     *    LLIMAT(I),RCORNER_COLLIMAT(I),I=1,NUM_NODE_COLLIMAT),0.0,0.0
        END IF
      END IF
201   FORMAT(' ',I1,A4,4(F7.2,','),15(F7.2,','), 15(F7.2,','))
      RETURN
      END
      SUBROUTINE HOWNEAR_COLLIMAT(DIST)
      implicit none
      COMMON/CM_COLLIMAT/ ICM_COLLIMAT, IRSTART_COLLIMAT, IREND_COLLIMAT
     *, N_COLLIMAT, N_GAP_COLLIMAT, IR_COLLIMAT, COUNT1_COLLIMAT, TITLE_
     *COLLIMAT, ZMIN_COLLIMAT, ZMAX_COLLIMAT, ZFRONT_COLLIMAT, NUM_NODE_
     *COLLIMAT, INDEX_COLLIMAT, ZCORNER_COLLIMAT, RCORNER_COLLIMAT, RCOR
     *NER2_COLLIMAT, SURPARA_COLLIMAT, RMIN_COLLIMAT, RMIN2_COLLIMAT, CR
     *ITOLD_COLLIMAT
      INTEGER ICM_COLLIMAT, IRSTART_COLLIMAT, IREND_COLLIMAT, N_COLLIMAT
     *, N_GAP_COLLIMAT, IR_COLLIMAT, COUNT1_COLLIMAT, NUM_NODE_COLLIMAT,
     *INDEX_COLLIMAT
      real*8 ZMIN_COLLIMAT, ZMAX_COLLIMAT, ZFRONT_COLLIMAT, ZCORNER_COLL
     *IMAT(15),RCORNER_COLLIMAT(15), RCORNER2_COLLIMAT(15), SURPARA_COLL
     *IMAT(15-1,4), RMIN_COLLIMAT, RMIN2_COLLIMAT, CRITOLD_COLLIMAT
      CHARACTER*1 TITLE_COLLIMAT(60)
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      real*8 DIST,  R_COLLIMAT
      integer*4 I_COLLIMAT
      IR_COLLIMAT = IR(NP) - IRSTART_COLLIMAT + 1
      R_COLLIMAT=SQRT(X(NP)**2+Y(NP)**2)
      IF ((IR_COLLIMAT .EQ. 1)) THEN
        DIST=MIN( Z(NP)-ZMIN_COLLIMAT, ZMAX_COLLIMAT-Z(NP), RMAX_CM(ICM_
     *  COLLIMAT) -R_COLLIMAT )
        DO 11751 I_COLLIMAT=1,NUM_NODE_COLLIMAT-1
          DIST=MIN(DIST, ABS(SURPARA_COLLIMAT(I_COLLIMAT,1)*R_COLLIMAT +
     *    SURPARA_COLLIMAT(I_COLLIMAT,2)*Z(NP) +SURPARA_COLLIMAT(I_COLLI
     *    MAT,3)) )
11751   CONTINUE
11752   CONTINUE
      ELSE IF((IR_COLLIMAT .EQ. 2)) THEN
        DIST=MIN( Z(NP)-ZMIN_COLLIMAT,ZMAX_COLLIMAT-Z(NP), RMAX_CM(ICM_C
     *  OLLIMAT) -R_COLLIMAT )
        DO 11761 I_COLLIMAT=1,NUM_NODE_COLLIMAT-1
          DIST=MIN(DIST, ABS(SURPARA_COLLIMAT(I_COLLIMAT,1)*R_COLLIMAT +
     *    SURPARA_COLLIMAT(I_COLLIMAT,2)*Z(NP) +SURPARA_COLLIMAT(I_COLLI
     *    MAT,3)) )
11761   CONTINUE
11762   CONTINUE
      ELSE
        DIST=0.0
      END IF
      RETURN
      END
      SUBROUTINE HOWFAR_SCATFOIL
      IMPLICIT NONE
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/CM_SCATFOIL/ ICM_SCATFOIL, IRSTART_SCATFOIL, IREND_SCATFOIL
     *, N_SCATFOIL, N_GAP_SCATFOIL, ISCM_SCATFOIL, ISCM_MAX_SCATFOIL, IR
     *_SCATFOIL, ZFRONT_SCATFOIL, ZMIN_SCATFOIL, ZMAX_SCATFOIL, RMIN_SCA
     *TFOIL, RMAX_SCATFOIL, RBN_SCATFOIL, RBNT_SCATFOIL, RBN2_SCATFOIL,
     *RBN2T_SCATFOIL, RMINT_SCATFOIL, RMAXT_SCATFOIL, RMIN2_SCATFOIL, RM
     *IN2T_SCATFOIL, RMAX2_SCATFOIL, RMAX2T_SCATFOIL, ALO_SCATFOIL, BLO_
     *SCATFOIL, BLOT_SCATFOIL, COSA_SCATFOIL, NOWALL_SCATFOIL, TITLE_SCA
     *TFOIL
      INTEGER ICM_SCATFOIL,IRSTART_SCATFOIL, IREND_SCATFOIL,N_SCATFOIL,N
     *_GAP_SCATFOIL, ISCM_SCATFOIL,ISCM_MAX_SCATFOIL,IR_SCATFOIL, NOWALL
     *_SCATFOIL
      real*8 ZFRONT_SCATFOIL, ZMIN_SCATFOIL(15), ZMAX_SCATFOIL(15), RMIN
     *_SCATFOIL(15), RMAX_SCATFOIL(15), RBN_SCATFOIL, RBNT_SCATFOIL(2),
     *RBN2_SCATFOIL, RBN2T_SCATFOIL(2), RMINT_SCATFOIL(15,2), RMAXT_SCAT
     *FOIL(15,2), RMIN2_SCATFOIL(15), RMIN2T_SCATFOIL(15,2), RMAX2_SCATF
     *OIL(15), RMAX2T_SCATFOIL(15,2), ALO_SCATFOIL(15), BLO_SCATFOIL(15)
     *, BLOT_SCATFOIL(15,2), COSA_SCATFOIL(15)
      CHARACTER*1 TITLE_SCATFOIL(60)
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      INTEGER IRNEW_SCATFOIL,  IB_SCATFOIL,  IHIT
      real*8 DIST,  XF_SCATFOIL,  YF_SCATFOIL,  ZF_SCATFOIL,  TCON_SCATF
     *OIL,  SQXY_SCATFOIL
      real*8 AUP_SCATFOIL, CUP_SCATFOIL, TQ_SCATFOIL, A_SCATFOIL, B_SCAT
     *FOIL, B2_SCATFOIL, C_SCATFOIL, COUT_SCATFOIL, RAD_SCATFOIL, BUP_SC
     *ATFOIL, DUP_SCATFOIL, T1_SCATFOIL, T2_SCATFOIL, I1, I2
      real*8 one
      parameter (one = 1)
      CALL HOWNEAR_SCATFOIL(DNEAR(NP))
      IF ((IR_SCATFOIL .EQ. 3*ISCM_MAX_SCATFOIL + 1)) THEN
        IF ((W(NP) .GT. 0.0)) THEN
          DIST = (ZMIN_SCATFOIL(1) - Z(NP))/W(NP)
          IRNEW_SCATFOIL = IRSTART_SCATFOIL
          XF_SCATFOIL = X(NP)+DIST*U(NP)
          YF_SCATFOIL = Y(NP)+DIST*V(NP)
          SQXY_SCATFOIL = XF_SCATFOIL*XF_SCATFOIL + YF_SCATFOIL*YF_SCATF
     *    OIL
          IF ((SQXY_SCATFOIL .GT. RBN2_SCATFOIL)) THEN
            IRNEW_SCATFOIL = IRSTART_SCATFOIL + 2
          ELSE IF((SQXY_SCATFOIL .GT. RMIN2_SCATFOIL(1))) THEN
            IRNEW_SCATFOIL = IRSTART_SCATFOIL + 1
          END IF
          IF ((DIST .LE. USTEP )) THEN
            USTEP = DIST
            IRNEW = IRNEW_SCATFOIL
          END IF
        ELSE IF((W(NP) .LT. 0.0)) THEN
          DIST = (ZFRONT_SCATFOIL - Z(NP))/W(NP)
          IF ((DIST.LE.0.)) THEN
            DIST=1.E-16
          END IF
          IF ((DIST .LE. USTEP )) THEN
            USTEP = DIST
            CALL WHERE_AM_I(ICM_SCATFOIL,-1)
          END IF
        END IF
      ELSE IF((IR_SCATFOIL .EQ. 3*(ISCM_SCATFOIL-1)+1)) THEN
        IB_SCATFOIL=1
        IF ((Z(NP) .GT. ZMAX_SCATFOIL(ISCM_SCATFOIL) + 1.E-5 .OR. Z(NP)
     *  .LT. ZMIN_SCATFOIL(ISCM_SCATFOIL) - 1.E-5 )) THEN
          I1 = I1 +1
          IF ((I1 .GT. 1000)) THEN
            WRITE(6,11770)ISCM_SCATFOIL
11770       FORMAT(' ***WARNING in inner cone of layer ',I4,' in SCATFOI
     *L'/ ' Z of particle outside the layer.')
          END IF
          IRNEW = 1
          USTEP = 0.0
          RETURN
        END IF
        IF ((X(NP)**2+Y(NP)**2 -(Z(NP)*ALO_SCATFOIL(ISCM_SCATFOIL)+ BLOT
     *  _SCATFOIL(ISCM_SCATFOIL,IB_SCATFOIL))**2 .GE. 0.0)) THEN
          IF ((SQRT(X(NP)**2+Y(NP)**2)-Z(NP)*ALO_SCATFOIL(ISCM_SCATFOIL)
     *    - BLOT_SCATFOIL(ISCM_SCATFOIL,IB_SCATFOIL).GT.1.E-5)) THEN
            I1 = I1 +1
            IF ((I1 .GT. 1000)) THEN
              WRITE(6,11780)ISCM_SCATFOIL
11780         FORMAT(' ***WARNING in inner cone of layer ',I4,' in SCATF
     *OIL'/ ' Particle radius > radius of cone.')
              IF ((ABS(Z(NP)*ALO_SCATFOIL(ISCM_SCATFOIL)+BLO_SCATFOIL(IS
     *        CM_SCATFOIL) - RBN_SCATFOIL) .LT. 1.E-5)) THEN
                WRITE(6,11790)
11790           FORMAT(/' Confusion could be because cone touches outerw
     *all.')
              END IF
            END IF
          END IF
          IRNEW = IRSTART_SCATFOIL + 3*(ISCM_SCATFOIL-1) + 1
          USTEP = 0.0
          RETURN
        END IF
        IF ((W(NP) .GT. 0.0)) THEN
          DIST = (ZMAX_SCATFOIL(ISCM_SCATFOIL) - Z(NP))/W(NP)
          IF ((DIST .LT. 0)) THEN
            DIST=0.
          END IF
          IF ((DIST.EQ.0. .AND. ISCM_SCATFOIL.EQ.ISCM_MAX_SCATFOIL)) THE
     *    N
            DIST=1.E-16
          END IF
          IRNEW_SCATFOIL = 1
          XF_SCATFOIL = X(NP)+DIST*U(NP)
          YF_SCATFOIL = Y(NP)+DIST*V(NP)
          SQXY_SCATFOIL = XF_SCATFOIL*XF_SCATFOIL + YF_SCATFOIL*YF_SCATF
     *    OIL
          IF ((SQXY_SCATFOIL .LE. RMAX2T_SCATFOIL(ISCM_SCATFOIL,IB_SCATF
     *    OIL))) THEN
            IF ((ISCM_SCATFOIL .NE. ISCM_MAX_SCATFOIL)) THEN
              IF ((SQXY_SCATFOIL .LT. RMIN2_SCATFOIL(ISCM_SCATFOIL+1)))
     *        THEN
                IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*ISCM_SCATFOIL
              ELSE
                IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*ISCM_SCATFOIL + 1
              END IF
            END IF
          ELSE
            AUP_SCATFOIL = U(NP)**2 + V(NP)**2 - W(NP)**2*ALO_SCATFOIL(I
     *      SCM_SCATFOIL)**2
            BUP_SCATFOIL = U(NP)*X(NP)+V(NP)*Y(NP) - ALO_SCATFOIL(ISCM_S
     *      CATFOIL)**2*W(NP)*Z(NP) - ALO_SCATFOIL(ISCM_SCATFOIL)*BLOT_S
     *      CATFOIL(ISCM_SCATFOIL,IB_SCATFOIL)*W(NP)
            CUP_SCATFOIL = X(NP)**2+Y(NP)**2 -(Z(NP)*ALO_SCATFOIL(ISCM_S
     *      CATFOIL)+BLOT_SCATFOIL(ISCM_SCATFOIL,IB_SCATFOIL))**2
            DUP_SCATFOIL = BUP_SCATFOIL*BUP_SCATFOIL - AUP_SCATFOIL*CUP_
     *      SCATFOIL
            IF ((AUP_SCATFOIL .NE. 0.0 .AND. DUP_SCATFOIL .GE. 0.0)) THE
     *      N
              TQ_SCATFOIL = -BUP_SCATFOIL - SIGN(one,BUP_SCATFOIL)*SQRT(
     *        DUP_SCATFOIL)
              T1_SCATFOIL = TQ_SCATFOIL/AUP_SCATFOIL
              T2_SCATFOIL = CUP_SCATFOIL/TQ_SCATFOIL
              IF ((T1_SCATFOIL .GT. 0.0 .AND. T2_SCATFOIL .GT. 0.0 )) TH
     *        EN
                TCON_SCATFOIL = MIN(T1_SCATFOIL, T2_SCATFOIL)
              ELSE
                TCON_SCATFOIL = MAX(T1_SCATFOIL, T2_SCATFOIL)
              END IF
            ELSE
              TCON_SCATFOIL=1E5
            END IF
            DIST = TCON_SCATFOIL
            IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*(ISCM_SCATFOIL-1) + 1
          END IF
          IF ((DIST .LE. USTEP)) THEN
            USTEP = DIST
            IF ((IRNEW_SCATFOIL .EQ. 1)) THEN
              CALL WHERE_AM_I(ICM_SCATFOIL,1)
            ELSE
              IRNEW = IRNEW_SCATFOIL
            END IF
          END IF
        ELSE IF((W(NP) .LT. 0.0)) THEN
          DIST = (ZMIN_SCATFOIL(ISCM_SCATFOIL) - Z(NP))/W(NP)
          IF ((DIST .LT. 0)) THEN
            DIST=0.
          END IF
          IF ((DIST.EQ.0. .AND. ISCM_SCATFOIL.EQ.1 .AND. N_GAP_SCATFOIL.
     *    EQ.0)) THEN
            DIST=1.E-16
          END IF
          XF_SCATFOIL = X(NP)+DIST*U(NP)
          YF_SCATFOIL = Y(NP)+DIST*V(NP)
          SQXY_SCATFOIL = XF_SCATFOIL*XF_SCATFOIL + YF_SCATFOIL*YF_SCATF
     *    OIL
          IF ((SQXY_SCATFOIL .GT. RMIN2T_SCATFOIL(ISCM_SCATFOIL,IB_SCATF
     *    OIL) )) THEN
            AUP_SCATFOIL = U(NP)**2 + V(NP)**2 - W(NP)**2*ALO_SCATFOIL(I
     *      SCM_SCATFOIL)**2
            BUP_SCATFOIL = U(NP)*X(NP)+V(NP)*Y(NP) - ALO_SCATFOIL(ISCM_S
     *      CATFOIL)**2*W(NP)*Z(NP) - ALO_SCATFOIL(ISCM_SCATFOIL)*BLOT_S
     *      CATFOIL(ISCM_SCATFOIL,IB_SCATFOIL)*W(NP)
            CUP_SCATFOIL = X(NP)**2+Y(NP)**2 -(Z(NP)*ALO_SCATFOIL(ISCM_S
     *      CATFOIL)+BLOT_SCATFOIL(ISCM_SCATFOIL,IB_SCATFOIL))**2
            DUP_SCATFOIL = BUP_SCATFOIL*BUP_SCATFOIL - AUP_SCATFOIL*CUP_
     *      SCATFOIL
            IF ((AUP_SCATFOIL .NE. 0.0 .AND. DUP_SCATFOIL .GE. 0.0)) THE
     *      N
              TQ_SCATFOIL = -BUP_SCATFOIL - SIGN(one,BUP_SCATFOIL)*SQRT(
     *        DUP_SCATFOIL)
              T1_SCATFOIL = TQ_SCATFOIL/AUP_SCATFOIL
              T2_SCATFOIL = CUP_SCATFOIL/TQ_SCATFOIL
              IF ((T1_SCATFOIL .GT. 0.0 .AND. T2_SCATFOIL .GT. 0.0 )) TH
     *        EN
                TCON_SCATFOIL = MIN(T1_SCATFOIL, T2_SCATFOIL)
              ELSE
                TCON_SCATFOIL = MAX(T1_SCATFOIL, T2_SCATFOIL)
              END IF
            ELSE
              TCON_SCATFOIL=1E5
            END IF
            DIST = TCON_SCATFOIL
            IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*(ISCM_SCATFOIL-1) + 1
          ELSE
            IF ((ISCM_SCATFOIL .EQ. 1)) THEN
              IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*ISCM_MAX_SCATFOIL
              IF ((N_GAP_SCATFOIL .EQ. 0)) THEN
                IRNEW_SCATFOIL = 1
              END IF
            ELSE
              XF_SCATFOIL = X(NP)+DIST*U(NP)
              YF_SCATFOIL = Y(NP)+DIST*V(NP)
              SQXY_SCATFOIL = XF_SCATFOIL*XF_SCATFOIL + YF_SCATFOIL*YF_S
     *        CATFOIL
              IF ((SQXY_SCATFOIL .LT. RMAX2_SCATFOIL(ISCM_SCATFOIL-1)))
     *        THEN
                IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*(ISCM_SCATFOIL-2)
              ELSE
                IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*(ISCM_SCATFOIL-2)
     *          + 1
              END IF
            END IF
          END IF
          IF ((DIST .LE. USTEP)) THEN
            USTEP = DIST
            IF ((IRNEW_SCATFOIL .EQ. 1)) THEN
              CALL WHERE_AM_I(ICM_SCATFOIL,-1)
            ELSE
              IRNEW = IRNEW_SCATFOIL
            END IF
          END IF
        ELSE
          AUP_SCATFOIL = U(NP)**2 + V(NP)**2 - W(NP)**2*ALO_SCATFOIL(ISC
     *    M_SCATFOIL)**2
          BUP_SCATFOIL = U(NP)*X(NP)+V(NP)*Y(NP) - ALO_SCATFOIL(ISCM_SCA
     *    TFOIL)**2*W(NP)*Z(NP) - ALO_SCATFOIL(ISCM_SCATFOIL)*BLOT_SCATF
     *    OIL(ISCM_SCATFOIL,IB_SCATFOIL)*W(NP)
          CUP_SCATFOIL = X(NP)**2+Y(NP)**2 -(Z(NP)*ALO_SCATFOIL(ISCM_SCA
     *    TFOIL)+BLOT_SCATFOIL(ISCM_SCATFOIL,IB_SCATFOIL))**2
          DUP_SCATFOIL = BUP_SCATFOIL*BUP_SCATFOIL - AUP_SCATFOIL*CUP_SC
     *    ATFOIL
          IF ((AUP_SCATFOIL .NE. 0.0 .AND. DUP_SCATFOIL .GE. 0.0)) THEN
            TQ_SCATFOIL = -BUP_SCATFOIL - SIGN(one,BUP_SCATFOIL)*SQRT(DU
     *      P_SCATFOIL)
            T1_SCATFOIL = TQ_SCATFOIL/AUP_SCATFOIL
            T2_SCATFOIL = CUP_SCATFOIL/TQ_SCATFOIL
            IF ((T1_SCATFOIL .GT. 0.0 .AND. T2_SCATFOIL .GT. 0.0 )) THEN
              TCON_SCATFOIL = MIN(T1_SCATFOIL, T2_SCATFOIL)
            ELSE
              TCON_SCATFOIL = MAX(T1_SCATFOIL, T2_SCATFOIL)
            END IF
          ELSE
            TCON_SCATFOIL=1E5
          END IF
          DIST = TCON_SCATFOIL
          IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*(ISCM_SCATFOIL-1) + 1
          IF ((DIST .LE. USTEP)) THEN
            USTEP = DIST
            IRNEW = IRNEW_SCATFOIL
          END IF
        END IF
      ELSE IF((IR_SCATFOIL .EQ. 3*(ISCM_SCATFOIL-1)+2)) THEN
        IB_SCATFOIL=2
        IF ((Z(NP) .GT. ZMAX_SCATFOIL(ISCM_SCATFOIL) + 1.E-5 .OR. Z(NP)
     *  .LT. ZMIN_SCATFOIL(ISCM_SCATFOIL) - 1.E-5 )) THEN
          I2 = I2 +1
          IF ((I2 .GT. 1000)) THEN
            WRITE(6,11800)ISCM_SCATFOIL
11800       FORMAT(' ***WARNING in outer cone of layer ',I4,' in SCATFOI
     *L'/ ' Z of particle outside the layer.')
          END IF
          IRNEW = 1
          USTEP = 0.0
          RETURN
        END IF
        IF ((X(NP)**2+Y(NP)**2 -(Z(NP)*ALO_SCATFOIL(ISCM_SCATFOIL)+ BLOT
     *  _SCATFOIL(ISCM_SCATFOIL,IB_SCATFOIL))**2 .LE. 0.0)) THEN
          IF ((Z(NP)*ALO_SCATFOIL(ISCM_SCATFOIL)+BLOT_SCATFOIL(ISCM_SCAT
     *    FOIL,IB_SCATFOIL)- SQRT(X(NP)**2+Y(NP)**2).GT.1.E-5)) THEN
            I2 = I2 +1
            IF ((I2 .GT. 1000)) THEN
              WRITE(6,11810)ISCM_SCATFOIL
11810         FORMAT(' ***WARNING in outer cone of layer ',I4,' in SCATF
     *OIL'/ ' Particle radius < radius of inner cone.')
              IF ((ABS(Z(NP)*ALO_SCATFOIL(ISCM_SCATFOIL)+BLO_SCATFOIL(IS
     *        CM_SCATFOIL) - RBN_SCATFOIL) .LT. 1.E-5)) THEN
                WRITE(6,11820)
11820           FORMAT(/' Confusion could be because cone touches outerw
     *all.')
              END IF
            END IF
          END IF
          IRNEW = IRSTART_SCATFOIL + 3*(ISCM_SCATFOIL-1)
          USTEP = 0.0
          RETURN
        END IF
        IF ((W(NP) .GT. 0.0)) THEN
          DIST = (ZMAX_SCATFOIL(ISCM_SCATFOIL) - Z(NP))/W(NP)
          IF ((DIST .LT. 0)) THEN
            DIST=0.
          END IF
          IF ((DIST.EQ.0. .AND. ISCM_SCATFOIL.EQ.ISCM_MAX_SCATFOIL)) THE
     *    N
            DIST=1.E-16
          END IF
          IHIT=1
          AUP_SCATFOIL = U(NP)**2+V(NP)**2 - W(NP)*W(NP)*ALO_SCATFOIL(IS
     *    CM_SCATFOIL)**2
          BUP_SCATFOIL = U(NP)*X(NP)+V(NP)*Y(NP) - ALO_SCATFOIL(ISCM_SCA
     *    TFOIL)**2*W(NP)*Z(NP) - ALO_SCATFOIL(ISCM_SCATFOIL)*BLOT_SCATF
     *    OIL(ISCM_SCATFOIL,IB_SCATFOIL)*W(NP)
          CUP_SCATFOIL = X(NP)**2+Y(NP)**2 -(Z(NP)*ALO_SCATFOIL(ISCM_SCA
     *    TFOIL) + BLOT_SCATFOIL(ISCM_SCATFOIL,IB_SCATFOIL))**2
          DUP_SCATFOIL = BUP_SCATFOIL**2 - AUP_SCATFOIL*CUP_SCATFOIL
          IF ((DUP_SCATFOIL .LE. 0.0 .OR. AUP_SCATFOIL .EQ. 0.0 )) THEN
            IHIT = 0
          ELSE
            TQ_SCATFOIL = -BUP_SCATFOIL - SIGN(one,BUP_SCATFOIL)*SQRT(DU
     *      P_SCATFOIL)
            T1_SCATFOIL = TQ_SCATFOIL/AUP_SCATFOIL
            T2_SCATFOIL = CUP_SCATFOIL/TQ_SCATFOIL
            TCON_SCATFOIL = MIN(T1_SCATFOIL, T2_SCATFOIL)
            IF ((TCON_SCATFOIL .LT. 0.0)) THEN
              TCON_SCATFOIL = MAX(T1_SCATFOIL, T2_SCATFOIL)
            END IF
            IF ((TCON_SCATFOIL .LE. 0.0)) THEN
              IHIT = 0
            END IF
          END IF
          IF ((IHIT .EQ. 1)) THEN
            ZF_SCATFOIL = Z(NP) + TCON_SCATFOIL * W(NP)
            IF ((ZF_SCATFOIL .LT. ZMAX_SCATFOIL(ISCM_SCATFOIL) .AND. ZF_
     *      SCATFOIL .GT. ZMIN_SCATFOIL(ISCM_SCATFOIL))) THEN
              DIST = TCON_SCATFOIL
              IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*(ISCM_SCATFOIL-1)
            ELSE
              XF_SCATFOIL = X(NP)+DIST*U(NP)
              YF_SCATFOIL = Y(NP)+DIST*V(NP)
              SQXY_SCATFOIL = XF_SCATFOIL*XF_SCATFOIL + YF_SCATFOIL*YF_S
     *        CATFOIL
              IF ((ISCM_SCATFOIL .LT. ISCM_MAX_SCATFOIL)) THEN
                IF ((SQXY_SCATFOIL .LT. RMIN2_SCATFOIL(ISCM_SCATFOIL+1))
     *          ) THEN
                  IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*ISCM_SCATFOIL
                ELSE IF((SQXY_SCATFOIL .LT. RBN2T_SCATFOIL(IB_SCATFOIL))
     *          ) THEN
                  IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*ISCM_SCATFOIL +
     *            1
                ELSE
                  IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*ISCM_SCATFOIL +
     *            1
                  A_SCATFOIL = U(NP)**2+V(NP)**2
                  B_SCATFOIL = X(NP)*U(NP)+Y(NP)*V(NP)
                  B2_SCATFOIL = B_SCATFOIL**2
                  C_SCATFOIL = X(NP)**2+Y(NP)**2
                  COUT_SCATFOIL = C_SCATFOIL - RBN2T_SCATFOIL(IB_SCATFOI
     *            L)
                  IF ((COUT_SCATFOIL .GT. 0.0)) THEN
                    IF ((IWATCH .GT. 0)) THEN
                      WRITE(6,11830)COUT_SCATFOIL
11830                 FORMAT(' COUT=',E11.3)
                    END IF
                    COUT_SCATFOIL = 0.0
                  END IF
                  IF ((B_SCATFOIL .GT. 0.0)) THEN
                    IF (((COUT_SCATFOIL/B2_SCATFOIL) .GT. (-1.0E-3))) TH
     *              EN
                      TCON_SCATFOIL=-0.5*COUT_SCATFOIL/B_SCATFOIL
                    ELSE
                      TCON_SCATFOIL=-COUT_SCATFOIL/(SQRT(B2_SCATFOIL- A_
     *                SCATFOIL*COUT_SCATFOIL)+B_SCATFOIL)
                    END IF
                  ELSE IF((B_SCATFOIL .LT. 0.0)) THEN
                    IF ((COUT_SCATFOIL/B2_SCATFOIL .GT. (-1.0E-3))) THEN
                      TCON_SCATFOIL = -2.*B_SCATFOIL/A_SCATFOIL*(1.- 0.2
     *                5*A_SCATFOIL*COUT_SCATFOIL/B2_SCATFOIL)
                    ELSE
                      TCON_SCATFOIL=(SQRT(B2_SCATFOIL-A_SCATFOIL*COUT_SC
     *                ATFOIL)- B_SCATFOIL)/A_SCATFOIL
                    END IF
                  ELSE IF((A_SCATFOIL .EQ. 0.0)) THEN
                    TCON_SCATFOIL = 1E30
                  ELSE
                    TCON_SCATFOIL=SQRT(-COUT_SCATFOIL/A_SCATFOIL)
                  END IF
                  DIST = TCON_SCATFOIL
                  IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*(ISCM_SCATFOIL-1
     *            ) + 2
                END IF
              ELSE
                IRNEW_SCATFOIL = 1
                IF ((SQXY_SCATFOIL .GT. RBN2T_SCATFOIL(IB_SCATFOIL))) TH
     *          EN
                  A_SCATFOIL = U(NP)**2+V(NP)**2
                  B_SCATFOIL = X(NP)*U(NP)+Y(NP)*V(NP)
                  B2_SCATFOIL = B_SCATFOIL**2
                  C_SCATFOIL = X(NP)**2+Y(NP)**2
                  COUT_SCATFOIL = C_SCATFOIL - RBN2T_SCATFOIL(IB_SCATFOI
     *            L)
                  IF ((COUT_SCATFOIL .GT. 0.0)) THEN
                    IF ((IWATCH .GT. 0)) THEN
                      WRITE(6,11840)COUT_SCATFOIL
11840                 FORMAT(' COUT=',E11.3)
                    END IF
                    COUT_SCATFOIL = 0.0
                  END IF
                  IF ((B_SCATFOIL .GT. 0.0)) THEN
                    IF (((COUT_SCATFOIL/B2_SCATFOIL) .GT. (-1.0E-3))) TH
     *              EN
                      TCON_SCATFOIL=-0.5*COUT_SCATFOIL/B_SCATFOIL
                    ELSE
                      TCON_SCATFOIL=-COUT_SCATFOIL/(SQRT(B2_SCATFOIL- A_
     *                SCATFOIL*COUT_SCATFOIL)+B_SCATFOIL)
                    END IF
                  ELSE IF((B_SCATFOIL .LT. 0.0)) THEN
                    IF ((COUT_SCATFOIL/B2_SCATFOIL .GT. (-1.0E-3))) THEN
                      TCON_SCATFOIL = -2.*B_SCATFOIL/A_SCATFOIL*(1.- 0.2
     *                5*A_SCATFOIL*COUT_SCATFOIL/B2_SCATFOIL)
                    ELSE
                      TCON_SCATFOIL=(SQRT(B2_SCATFOIL-A_SCATFOIL*COUT_SC
     *                ATFOIL)- B_SCATFOIL)/A_SCATFOIL
                    END IF
                  ELSE IF((A_SCATFOIL .EQ. 0.0)) THEN
                    TCON_SCATFOIL = 1E30
                  ELSE
                    TCON_SCATFOIL=SQRT(-COUT_SCATFOIL/A_SCATFOIL)
                  END IF
                  DIST = TCON_SCATFOIL
                  IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*(ISCM_SCATFOIL-1
     *            ) + 2
                END IF
              END IF
            END IF
          ELSE
            XF_SCATFOIL = X(NP)+DIST*U(NP)
            YF_SCATFOIL = Y(NP)+DIST*V(NP)
            SQXY_SCATFOIL = XF_SCATFOIL*XF_SCATFOIL + YF_SCATFOIL*YF_SCA
     *      TFOIL
            IF ((ISCM_SCATFOIL .LT. ISCM_MAX_SCATFOIL)) THEN
              IF ((SQXY_SCATFOIL .LT. RMIN2_SCATFOIL(ISCM_SCATFOIL+1)))
     *        THEN
                IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*ISCM_SCATFOIL
              ELSE IF((SQXY_SCATFOIL .LT. RBN2T_SCATFOIL(IB_SCATFOIL)))
     *        THEN
                IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*ISCM_SCATFOIL + 1
              ELSE
                IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*ISCM_SCATFOIL + 1
                A_SCATFOIL = U(NP)**2+V(NP)**2
                B_SCATFOIL = X(NP)*U(NP)+Y(NP)*V(NP)
                B2_SCATFOIL = B_SCATFOIL**2
                C_SCATFOIL = X(NP)**2+Y(NP)**2
                COUT_SCATFOIL = C_SCATFOIL - RBN2T_SCATFOIL(IB_SCATFOIL)
                IF ((COUT_SCATFOIL .GT. 0.0)) THEN
                  IF ((IWATCH .GT. 0)) THEN
                    WRITE(6,11850)COUT_SCATFOIL
11850               FORMAT(' COUT=',E11.3)
                  END IF
                  COUT_SCATFOIL = 0.0
                END IF
                IF ((B_SCATFOIL .GT. 0.0)) THEN
                  IF (((COUT_SCATFOIL/B2_SCATFOIL) .GT. (-1.0E-3))) THEN
                    TCON_SCATFOIL=-0.5*COUT_SCATFOIL/B_SCATFOIL
                  ELSE
                    TCON_SCATFOIL=-COUT_SCATFOIL/(SQRT(B2_SCATFOIL- A_SC
     *              ATFOIL*COUT_SCATFOIL)+B_SCATFOIL)
                  END IF
                ELSE IF((B_SCATFOIL .LT. 0.0)) THEN
                  IF ((COUT_SCATFOIL/B2_SCATFOIL .GT. (-1.0E-3))) THEN
                    TCON_SCATFOIL = -2.*B_SCATFOIL/A_SCATFOIL*(1.- 0.25*
     *              A_SCATFOIL*COUT_SCATFOIL/B2_SCATFOIL)
                  ELSE
                    TCON_SCATFOIL=(SQRT(B2_SCATFOIL-A_SCATFOIL*COUT_SCAT
     *              FOIL)- B_SCATFOIL)/A_SCATFOIL
                  END IF
                ELSE IF((A_SCATFOIL .EQ. 0.0)) THEN
                  TCON_SCATFOIL = 1E30
                ELSE
                  TCON_SCATFOIL=SQRT(-COUT_SCATFOIL/A_SCATFOIL)
                END IF
                DIST = TCON_SCATFOIL
                IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*(ISCM_SCATFOIL-1)
     *          + 2
              END IF
            ELSE
              IRNEW_SCATFOIL = 1
              IF ((SQXY_SCATFOIL .GT. RBN2T_SCATFOIL(IB_SCATFOIL))) THEN
                A_SCATFOIL = U(NP)**2+V(NP)**2
                B_SCATFOIL = X(NP)*U(NP)+Y(NP)*V(NP)
                B2_SCATFOIL = B_SCATFOIL**2
                C_SCATFOIL = X(NP)**2+Y(NP)**2
                COUT_SCATFOIL = C_SCATFOIL - RBN2T_SCATFOIL(IB_SCATFOIL)
                IF ((COUT_SCATFOIL .GT. 0.0)) THEN
                  IF ((IWATCH .GT. 0)) THEN
                    WRITE(6,11860)COUT_SCATFOIL
11860               FORMAT(' COUT=',E11.3)
                  END IF
                  COUT_SCATFOIL = 0.0
                END IF
                IF ((B_SCATFOIL .GT. 0.0)) THEN
                  IF (((COUT_SCATFOIL/B2_SCATFOIL) .GT. (-1.0E-3))) THEN
                    TCON_SCATFOIL=-0.5*COUT_SCATFOIL/B_SCATFOIL
                  ELSE
                    TCON_SCATFOIL=-COUT_SCATFOIL/(SQRT(B2_SCATFOIL- A_SC
     *              ATFOIL*COUT_SCATFOIL)+B_SCATFOIL)
                  END IF
                ELSE IF((B_SCATFOIL .LT. 0.0)) THEN
                  IF ((COUT_SCATFOIL/B2_SCATFOIL .GT. (-1.0E-3))) THEN
                    TCON_SCATFOIL = -2.*B_SCATFOIL/A_SCATFOIL*(1.- 0.25*
     *              A_SCATFOIL*COUT_SCATFOIL/B2_SCATFOIL)
                  ELSE
                    TCON_SCATFOIL=(SQRT(B2_SCATFOIL-A_SCATFOIL*COUT_SCAT
     *              FOIL)- B_SCATFOIL)/A_SCATFOIL
                  END IF
                ELSE IF((A_SCATFOIL .EQ. 0.0)) THEN
                  TCON_SCATFOIL = 1E30
                ELSE
                  TCON_SCATFOIL=SQRT(-COUT_SCATFOIL/A_SCATFOIL)
                END IF
                DIST = TCON_SCATFOIL
                IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*(ISCM_SCATFOIL-1)
     *          + 2
              END IF
            END IF
          END IF
          IF ((DIST .LE. USTEP)) THEN
            USTEP = DIST
            IF (( IRNEW_SCATFOIL .EQ. 1 )) THEN
              CALL WHERE_AM_I(ICM_SCATFOIL,1)
            ELSE
              IRNEW = IRNEW_SCATFOIL
            END IF
          END IF
        ELSE IF((W(NP) .LT. 0.0)) THEN
          DIST = (ZMIN_SCATFOIL(ISCM_SCATFOIL) - Z(NP))/W(NP)
          IF ((DIST .LT. 0)) THEN
            DIST=0.
          END IF
          IF ((ISCM_SCATFOIL .EQ. 1)) THEN
            IHIT=1
            AUP_SCATFOIL = U(NP)**2+V(NP)**2 - W(NP)*W(NP)*ALO_SCATFOIL(
     *      ISCM_SCATFOIL)**2
            BUP_SCATFOIL = U(NP)*X(NP)+V(NP)*Y(NP) - ALO_SCATFOIL(ISCM_S
     *      CATFOIL)**2*W(NP)*Z(NP) - ALO_SCATFOIL(ISCM_SCATFOIL)*BLOT_S
     *      CATFOIL(ISCM_SCATFOIL,IB_SCATFOIL)*W(NP)
            CUP_SCATFOIL = X(NP)**2+Y(NP)**2 -(Z(NP)*ALO_SCATFOIL(ISCM_S
     *      CATFOIL) + BLOT_SCATFOIL(ISCM_SCATFOIL,IB_SCATFOIL))**2
            DUP_SCATFOIL = BUP_SCATFOIL**2 - AUP_SCATFOIL*CUP_SCATFOIL
            IF ((DUP_SCATFOIL .LE. 0.0 .OR. AUP_SCATFOIL .EQ. 0.0 )) THE
     *      N
              IHIT = 0
            ELSE
              TQ_SCATFOIL = -BUP_SCATFOIL - SIGN(one,BUP_SCATFOIL)*SQRT(
     *        DUP_SCATFOIL)
              T1_SCATFOIL = TQ_SCATFOIL/AUP_SCATFOIL
              T2_SCATFOIL = CUP_SCATFOIL/TQ_SCATFOIL
              TCON_SCATFOIL = MIN(T1_SCATFOIL, T2_SCATFOIL)
              IF ((TCON_SCATFOIL .LT. 0.0)) THEN
                TCON_SCATFOIL = MAX(T1_SCATFOIL, T2_SCATFOIL)
              END IF
              IF ((TCON_SCATFOIL .LE. 0.0)) THEN
                IHIT = 0
              END IF
            END IF
            IF ((IHIT .EQ. 0 .AND. DIST.EQ.0.)) THEN
              IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*ISCM_MAX_SCATFOIL
            ELSE IF((IHIT .EQ. 1)) THEN
              ZF_SCATFOIL = Z(NP) + TCON_SCATFOIL * W(NP)
              IF ((ZF_SCATFOIL .GT. ZMIN_SCATFOIL(ISCM_SCATFOIL) .AND. Z
     *        F_SCATFOIL .LT. ZMAX_SCATFOIL(ISCM_SCATFOIL))) THEN
                DIST = TCON_SCATFOIL
                IRNEW_SCATFOIL = IRSTART_SCATFOIL
              ELSE
                IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*ISCM_MAX_SCATFOIL
              END IF
            ELSE
              IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*ISCM_MAX_SCATFOIL
              XF_SCATFOIL = X(NP)+DIST*U(NP)
              YF_SCATFOIL = Y(NP)+DIST*V(NP)
              SQXY_SCATFOIL = XF_SCATFOIL*XF_SCATFOIL + YF_SCATFOIL*YF_S
     *        CATFOIL
              IF ((SQXY_SCATFOIL .GT. RBN2T_SCATFOIL(IB_SCATFOIL))) THEN
                A_SCATFOIL = U(NP)**2+V(NP)**2
                B_SCATFOIL = X(NP)*U(NP)+Y(NP)*V(NP)
                B2_SCATFOIL = B_SCATFOIL**2
                C_SCATFOIL = X(NP)**2+Y(NP)**2
                COUT_SCATFOIL = C_SCATFOIL - RBN2T_SCATFOIL(IB_SCATFOIL)
                IF ((COUT_SCATFOIL .GT. 0.0)) THEN
                  IF ((IWATCH .GT. 0)) THEN
                    WRITE(6,11870)COUT_SCATFOIL
11870               FORMAT(' COUT=',E11.3)
                  END IF
                  COUT_SCATFOIL = 0.0
                END IF
                IF ((B_SCATFOIL .GT. 0.0)) THEN
                  IF (((COUT_SCATFOIL/B2_SCATFOIL) .GT. (-1.0E-3))) THEN
                    TCON_SCATFOIL=-0.5*COUT_SCATFOIL/B_SCATFOIL
                  ELSE
                    TCON_SCATFOIL=-COUT_SCATFOIL/(SQRT(B2_SCATFOIL- A_SC
     *              ATFOIL*COUT_SCATFOIL)+B_SCATFOIL)
                  END IF
                ELSE IF((B_SCATFOIL .LT. 0.0)) THEN
                  IF ((COUT_SCATFOIL/B2_SCATFOIL .GT. (-1.0E-3))) THEN
                    TCON_SCATFOIL = -2.*B_SCATFOIL/A_SCATFOIL*(1.- 0.25*
     *              A_SCATFOIL*COUT_SCATFOIL/B2_SCATFOIL)
                  ELSE
                    TCON_SCATFOIL=(SQRT(B2_SCATFOIL-A_SCATFOIL*COUT_SCAT
     *              FOIL)- B_SCATFOIL)/A_SCATFOIL
                  END IF
                ELSE IF((A_SCATFOIL .EQ. 0.0)) THEN
                  TCON_SCATFOIL = 1E30
                ELSE
                  TCON_SCATFOIL=SQRT(-COUT_SCATFOIL/A_SCATFOIL)
                END IF
                IF ((TCON_SCATFOIL*W(NP)+Z(NP) .GT. ZMIN_SCATFOIL(ISCM_S
     *          CATFOIL) .AND. TCON_SCATFOIL*W(NP)+Z(NP) .LT. ZMAX_SCATF
     *          OIL(ISCM_SCATFOIL))) THEN
                  DIST = TCON_SCATFOIL
                  IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*(ISCM_SCATFOIL-1
     *            ) + 2
                END IF
              END IF
            END IF
            IF ((IRNEW_SCATFOIL .EQ. IRSTART_SCATFOIL + 3*ISCM_MAX_SCATF
     *      OIL .AND. N_GAP_SCATFOIL.EQ.0 .AND. DIST.EQ.0.)) THEN
              DIST=1.0E-16
            END IF
          ELSE
            IHIT=1
            AUP_SCATFOIL = U(NP)**2+V(NP)**2 - W(NP)*W(NP)*ALO_SCATFOIL(
     *      ISCM_SCATFOIL)**2
            BUP_SCATFOIL = U(NP)*X(NP)+V(NP)*Y(NP) - ALO_SCATFOIL(ISCM_S
     *      CATFOIL)**2*W(NP)*Z(NP) - ALO_SCATFOIL(ISCM_SCATFOIL)*BLOT_S
     *      CATFOIL(ISCM_SCATFOIL,IB_SCATFOIL)*W(NP)
            CUP_SCATFOIL = X(NP)**2+Y(NP)**2 -(Z(NP)*ALO_SCATFOIL(ISCM_S
     *      CATFOIL) + BLOT_SCATFOIL(ISCM_SCATFOIL,IB_SCATFOIL))**2
            DUP_SCATFOIL = BUP_SCATFOIL**2 - AUP_SCATFOIL*CUP_SCATFOIL
            IF ((DUP_SCATFOIL .LE. 0.0 .OR. AUP_SCATFOIL .EQ. 0.0 )) THE
     *      N
              IHIT = 0
            ELSE
              TQ_SCATFOIL = -BUP_SCATFOIL - SIGN(one,BUP_SCATFOIL)*SQRT(
     *        DUP_SCATFOIL)
              T1_SCATFOIL = TQ_SCATFOIL/AUP_SCATFOIL
              T2_SCATFOIL = CUP_SCATFOIL/TQ_SCATFOIL
              TCON_SCATFOIL = MIN(T1_SCATFOIL, T2_SCATFOIL)
              IF ((TCON_SCATFOIL .LT. 0.0)) THEN
                TCON_SCATFOIL = MAX(T1_SCATFOIL, T2_SCATFOIL)
              END IF
              IF ((TCON_SCATFOIL .LE. 0.0)) THEN
                IHIT = 0
              END IF
            END IF
            IF ((IHIT .EQ. 1)) THEN
              ZF_SCATFOIL = Z(NP) + TCON_SCATFOIL * W(NP)
              IF ((ZF_SCATFOIL .GT. ZMIN_SCATFOIL(ISCM_SCATFOIL) .AND. Z
     *        F_SCATFOIL .LT. ZMAX_SCATFOIL(ISCM_SCATFOIL))) THEN
                DIST = TCON_SCATFOIL
                IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*(ISCM_SCATFOIL -1)
              ELSE
                XF_SCATFOIL = X(NP)+DIST*U(NP)
                YF_SCATFOIL = Y(NP)+DIST*V(NP)
                SQXY_SCATFOIL = XF_SCATFOIL*XF_SCATFOIL + YF_SCATFOIL*YF
     *          _SCATFOIL
                IF ((SQXY_SCATFOIL .LT. RBN2T_SCATFOIL(IB_SCATFOIL))) TH
     *          EN
                  IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*(ISCM_SCATFOIL-2
     *            ) + 1
                ELSE IF((SQXY_SCATFOIL .GT. RBN2T_SCATFOIL(IB_SCATFOIL))
     *          ) THEN
                  IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*(ISCM_SCATFOIL-2
     *            ) + 1
                  A_SCATFOIL = U(NP)**2+V(NP)**2
                  B_SCATFOIL = X(NP)*U(NP)+Y(NP)*V(NP)
                  B2_SCATFOIL = B_SCATFOIL**2
                  C_SCATFOIL = X(NP)**2+Y(NP)**2
                  COUT_SCATFOIL = C_SCATFOIL - RBN2T_SCATFOIL(IB_SCATFOI
     *            L)
                  IF ((COUT_SCATFOIL .GT. 0.0)) THEN
                    IF ((IWATCH .GT. 0)) THEN
                      WRITE(6,11880)COUT_SCATFOIL
11880                 FORMAT(' COUT=',E11.3)
                    END IF
                    COUT_SCATFOIL = 0.0
                  END IF
                  IF ((B_SCATFOIL .GT. 0.0)) THEN
                    IF (((COUT_SCATFOIL/B2_SCATFOIL) .GT. (-1.0E-3))) TH
     *              EN
                      TCON_SCATFOIL=-0.5*COUT_SCATFOIL/B_SCATFOIL
                    ELSE
                      TCON_SCATFOIL=-COUT_SCATFOIL/(SQRT(B2_SCATFOIL- A_
     *                SCATFOIL*COUT_SCATFOIL)+B_SCATFOIL)
                    END IF
                  ELSE IF((B_SCATFOIL .LT. 0.0)) THEN
                    IF ((COUT_SCATFOIL/B2_SCATFOIL .GT. (-1.0E-3))) THEN
                      TCON_SCATFOIL = -2.*B_SCATFOIL/A_SCATFOIL*(1.- 0.2
     *                5*A_SCATFOIL*COUT_SCATFOIL/B2_SCATFOIL)
                    ELSE
                      TCON_SCATFOIL=(SQRT(B2_SCATFOIL-A_SCATFOIL*COUT_SC
     *                ATFOIL)- B_SCATFOIL)/A_SCATFOIL
                    END IF
                  ELSE IF((A_SCATFOIL .EQ. 0.0)) THEN
                    TCON_SCATFOIL = 1E30
                  ELSE
                    TCON_SCATFOIL=SQRT(-COUT_SCATFOIL/A_SCATFOIL)
                  END IF
                  DIST = TCON_SCATFOIL
                  IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*(ISCM_SCATFOIL-1
     *            ) + 2
                END IF
              END IF
            ELSE
              XF_SCATFOIL = X(NP)+DIST*U(NP)
              YF_SCATFOIL = Y(NP)+DIST*V(NP)
              SQXY_SCATFOIL = XF_SCATFOIL*XF_SCATFOIL + YF_SCATFOIL*YF_S
     *        CATFOIL
              IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*(ISCM_SCATFOIL-2) +
     *        1
              IF ((SQXY_SCATFOIL .GT. RBN2T_SCATFOIL(IB_SCATFOIL))) THEN
                A_SCATFOIL = U(NP)**2+V(NP)**2
                B_SCATFOIL = X(NP)*U(NP)+Y(NP)*V(NP)
                B2_SCATFOIL = B_SCATFOIL**2
                C_SCATFOIL = X(NP)**2+Y(NP)**2
                COUT_SCATFOIL = C_SCATFOIL - RBN2T_SCATFOIL(IB_SCATFOIL)
                IF ((COUT_SCATFOIL .GT. 0.0)) THEN
                  IF ((IWATCH .GT. 0)) THEN
                    WRITE(6,11890)COUT_SCATFOIL
11890               FORMAT(' COUT=',E11.3)
                  END IF
                  COUT_SCATFOIL = 0.0
                END IF
                IF ((B_SCATFOIL .GT. 0.0)) THEN
                  IF (((COUT_SCATFOIL/B2_SCATFOIL) .GT. (-1.0E-3))) THEN
                    TCON_SCATFOIL=-0.5*COUT_SCATFOIL/B_SCATFOIL
                  ELSE
                    TCON_SCATFOIL=-COUT_SCATFOIL/(SQRT(B2_SCATFOIL- A_SC
     *              ATFOIL*COUT_SCATFOIL)+B_SCATFOIL)
                  END IF
                ELSE IF((B_SCATFOIL .LT. 0.0)) THEN
                  IF ((COUT_SCATFOIL/B2_SCATFOIL .GT. (-1.0E-3))) THEN
                    TCON_SCATFOIL = -2.*B_SCATFOIL/A_SCATFOIL*(1.- 0.25*
     *              A_SCATFOIL*COUT_SCATFOIL/B2_SCATFOIL)
                  ELSE
                    TCON_SCATFOIL=(SQRT(B2_SCATFOIL-A_SCATFOIL*COUT_SCAT
     *              FOIL)- B_SCATFOIL)/A_SCATFOIL
                  END IF
                ELSE IF((A_SCATFOIL .EQ. 0.0)) THEN
                  TCON_SCATFOIL = 1E30
                ELSE
                  TCON_SCATFOIL=SQRT(-COUT_SCATFOIL/A_SCATFOIL)
                END IF
                DIST = TCON_SCATFOIL
                IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*(ISCM_SCATFOIL-1)
     *          + 2
              END IF
            END IF
          END IF
          IF ((DIST .LE. USTEP)) THEN
            USTEP = DIST
            IF ((N_GAP_SCATFOIL .EQ. 0 )) THEN
              IF ((IRNEW_SCATFOIL .GE. IRSTART_SCATFOIL + 3*ISCM_MAX_SCA
     *        TFOIL)) THEN
                CALL WHERE_AM_I(ICM_SCATFOIL,-1)
              ELSE
                IRNEW = IRNEW_SCATFOIL
              END IF
            ELSE
              IRNEW = IRNEW_SCATFOIL
            END IF
          END IF
        ELSE
          IHIT=1
          AUP_SCATFOIL = U(NP)**2+V(NP)**2 - W(NP)*W(NP)*ALO_SCATFOIL(IS
     *    CM_SCATFOIL)**2
          BUP_SCATFOIL = U(NP)*X(NP)+V(NP)*Y(NP) - ALO_SCATFOIL(ISCM_SCA
     *    TFOIL)**2*W(NP)*Z(NP) - ALO_SCATFOIL(ISCM_SCATFOIL)*BLOT_SCATF
     *    OIL(ISCM_SCATFOIL,IB_SCATFOIL)*W(NP)
          CUP_SCATFOIL = X(NP)**2+Y(NP)**2 -(Z(NP)*ALO_SCATFOIL(ISCM_SCA
     *    TFOIL) + BLOT_SCATFOIL(ISCM_SCATFOIL,IB_SCATFOIL))**2
          DUP_SCATFOIL = BUP_SCATFOIL**2 - AUP_SCATFOIL*CUP_SCATFOIL
          IF ((DUP_SCATFOIL .LE. 0.0 .OR. AUP_SCATFOIL .EQ. 0.0 )) THEN
            IHIT = 0
          ELSE
            TQ_SCATFOIL = -BUP_SCATFOIL - SIGN(one,BUP_SCATFOIL)*SQRT(DU
     *      P_SCATFOIL)
            T1_SCATFOIL = TQ_SCATFOIL/AUP_SCATFOIL
            T2_SCATFOIL = CUP_SCATFOIL/TQ_SCATFOIL
            TCON_SCATFOIL = MIN(T1_SCATFOIL, T2_SCATFOIL)
            IF ((TCON_SCATFOIL .LT. 0.0)) THEN
              TCON_SCATFOIL = MAX(T1_SCATFOIL, T2_SCATFOIL)
            END IF
            IF ((TCON_SCATFOIL .LE. 0.0)) THEN
              IHIT = 0
            END IF
          END IF
          IF ((IHIT .EQ. 1)) THEN
            DIST = TCON_SCATFOIL
            IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*(ISCM_SCATFOIL-1)
          ELSE
            A_SCATFOIL = U(NP)**2+V(NP)**2
            B_SCATFOIL = X(NP)*U(NP)+Y(NP)*V(NP)
            B2_SCATFOIL = B_SCATFOIL**2
            C_SCATFOIL = X(NP)**2+Y(NP)**2
            COUT_SCATFOIL = C_SCATFOIL - RBN2T_SCATFOIL(IB_SCATFOIL)
            IF ((COUT_SCATFOIL .GT. 0.0)) THEN
              IF ((IWATCH .GT. 0)) THEN
                WRITE(6,11900)COUT_SCATFOIL
11900           FORMAT(' COUT=',E11.3)
              END IF
              COUT_SCATFOIL = 0.0
            END IF
            IF ((B_SCATFOIL .GT. 0.0)) THEN
              IF (((COUT_SCATFOIL/B2_SCATFOIL) .GT. (-1.0E-3))) THEN
                TCON_SCATFOIL=-0.5*COUT_SCATFOIL/B_SCATFOIL
              ELSE
                TCON_SCATFOIL=-COUT_SCATFOIL/(SQRT(B2_SCATFOIL- A_SCATFO
     *          IL*COUT_SCATFOIL)+B_SCATFOIL)
              END IF
            ELSE IF((B_SCATFOIL .LT. 0.0)) THEN
              IF ((COUT_SCATFOIL/B2_SCATFOIL .GT. (-1.0E-3))) THEN
                TCON_SCATFOIL = -2.*B_SCATFOIL/A_SCATFOIL*(1.- 0.25*A_SC
     *          ATFOIL*COUT_SCATFOIL/B2_SCATFOIL)
              ELSE
                TCON_SCATFOIL=(SQRT(B2_SCATFOIL-A_SCATFOIL*COUT_SCATFOIL
     *          )- B_SCATFOIL)/A_SCATFOIL
              END IF
            ELSE IF((A_SCATFOIL .EQ. 0.0)) THEN
              TCON_SCATFOIL = 1E30
            ELSE
              TCON_SCATFOIL=SQRT(-COUT_SCATFOIL/A_SCATFOIL)
            END IF
            DIST = TCON_SCATFOIL
            IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*(ISCM_SCATFOIL-1) + 2
          END IF
          IF ((DIST .LE. USTEP)) THEN
            USTEP = DIST
            IRNEW = IRNEW_SCATFOIL
          END IF
        END IF
      ELSE IF((IR_SCATFOIL .EQ. 3*(ISCM_SCATFOIL-1)+3)) THEN
        IB_SCATFOIL = 1
        IF ((W(NP) .GT. 0.0)) THEN
          DIST = (ZMAX_SCATFOIL(ISCM_SCATFOIL) - Z(NP))/W(NP)
          IF ((DIST .LT. 0)) THEN
            DIST=0.
          END IF
          IF ((DIST.EQ.0. .AND. ISCM_SCATFOIL.EQ.ISCM_MAX_SCATFOIL)) THE
     *    N
            DIST=1.E-16
          END IF
          IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*ISCM_SCATFOIL + 2
          IF ((ISCM_SCATFOIL .EQ. ISCM_MAX_SCATFOIL)) THEN
            IRNEW_SCATFOIL = 1
          END IF
          IF ((U(NP)*X(NP)+V(NP)*Y(NP) .LT. 0)) THEN
            A_SCATFOIL = U(NP)**2+V(NP)**2
            B_SCATFOIL = X(NP)*U(NP)+Y(NP)*V(NP)
            B2_SCATFOIL = B_SCATFOIL**2
            C_SCATFOIL = X(NP)**2+Y(NP)**2
            IF ((B_SCATFOIL.GE.0.0 .OR. A_SCATFOIL .EQ. 0.0)) THEN
              IHIT=0
              TCON_SCATFOIL=1.0E20
            ELSE
              COUT_SCATFOIL = C_SCATFOIL - RBN2T_SCATFOIL(IB_SCATFOIL)
              IF ((COUT_SCATFOIL .LT. 0.0)) THEN
                IF ((IWATCH.GT.0)) THEN
                  WRITE(6,11910)COUT_SCATFOIL
11910             FORMAT(' CIN=',E11.3)
                END IF
                COUT_SCATFOIL=0.0
              END IF
              RAD_SCATFOIL = B2_SCATFOIL - A_SCATFOIL*COUT_SCATFOIL
              IF ((RAD_SCATFOIL .LT. 0.0)) THEN
                IHIT = 0
                TCON_SCATFOIL=1E20
              ELSE
                IHIT=1
                IF ((COUT_SCATFOIL/B2_SCATFOIL .LT. 1.0E-3)) THEN
                  TCON_SCATFOIL=-0.5*COUT_SCATFOIL/B_SCATFOIL
                ELSE
                  IF (((SQRT(RAD_SCATFOIL)-B_SCATFOIL) .NE. 0.0)) THEN
                    TCON_SCATFOIL = COUT_SCATFOIL/(SQRT(RAD_SCATFOIL)-B_
     *              SCATFOIL)
                  ELSE
                    TCON_SCATFOIL = 1.0E30
                  END IF
                END IF
              END IF
            END IF
            IF ((IHIT .EQ. 1)) THEN
              ZF_SCATFOIL = Z(NP) + TCON_SCATFOIL * W(NP)
              IF ((ZF_SCATFOIL .LT. ZMAX_SCATFOIL(ISCM_SCATFOIL).AND. ZF
     *        _SCATFOIL .GT. ZMIN_SCATFOIL(ISCM_SCATFOIL))) THEN
                IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*(ISCM_SCATFOIL-1)
     *          + 1
                DIST = TCON_SCATFOIL
              END IF
            END IF
          END IF
          IF ((DIST .LE. USTEP)) THEN
            USTEP = DIST
            IF ((IRNEW_SCATFOIL .EQ. 1 )) THEN
              CALL WHERE_AM_I(ICM_SCATFOIL,1)
            ELSE
              IRNEW = IRNEW_SCATFOIL
            END IF
          END IF
        ELSE IF((W(NP) .LT. 0.0)) THEN
          DIST = (ZMIN_SCATFOIL(ISCM_SCATFOIL) - Z(NP))/W(NP)
          IF ((DIST .LT. 0)) THEN
            DIST=0.
          END IF
          IF ((DIST.EQ.0. .AND. N_GAP_SCATFOIL .EQ. 0 .AND. ISCM_SCATFOI
     *    L .EQ. 1)) THEN
            DIST=1.E-16
          END IF
          IF ((ISCM_SCATFOIL .EQ. 1)) THEN
            IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*ISCM_MAX_SCATFOIL
            IF ((N_GAP_SCATFOIL .EQ. 0)) THEN
              IRNEW_SCATFOIL = 1
            END IF
            IF ((U(NP)*X(NP)+V(NP)*Y(NP) .LT. 0)) THEN
              A_SCATFOIL = U(NP)**2+V(NP)**2
              B_SCATFOIL = X(NP)*U(NP)+Y(NP)*V(NP)
              B2_SCATFOIL = B_SCATFOIL**2
              C_SCATFOIL = X(NP)**2+Y(NP)**2
              IF ((B_SCATFOIL.GE.0.0 .OR. A_SCATFOIL .EQ. 0.0)) THEN
                IHIT=0
                TCON_SCATFOIL=1.0E20
              ELSE
                COUT_SCATFOIL = C_SCATFOIL - RBN2T_SCATFOIL(IB_SCATFOIL)
                IF ((COUT_SCATFOIL .LT. 0.0)) THEN
                  IF ((IWATCH.GT.0)) THEN
                    WRITE(6,11920)COUT_SCATFOIL
11920               FORMAT(' CIN=',E11.3)
                  END IF
                  COUT_SCATFOIL=0.0
                END IF
                RAD_SCATFOIL = B2_SCATFOIL - A_SCATFOIL*COUT_SCATFOIL
                IF ((RAD_SCATFOIL .LT. 0.0)) THEN
                  IHIT = 0
                  TCON_SCATFOIL=1E20
                ELSE
                  IHIT=1
                  IF ((COUT_SCATFOIL/B2_SCATFOIL .LT. 1.0E-3)) THEN
                    TCON_SCATFOIL=-0.5*COUT_SCATFOIL/B_SCATFOIL
                  ELSE
                    IF (((SQRT(RAD_SCATFOIL)-B_SCATFOIL) .NE. 0.0)) THEN
                      TCON_SCATFOIL = COUT_SCATFOIL/(SQRT(RAD_SCATFOIL)-
     *                B_SCATFOIL)
                    ELSE
                      TCON_SCATFOIL = 1.0E30
                    END IF
                  END IF
                END IF
              END IF
              IF ((IHIT .EQ. 1 .AND. (Z(NP) + TCON_SCATFOIL * W(NP)) .GE
     *        . ZMIN_SCATFOIL(1) .AND. (Z(NP) + TCON_SCATFOIL * W(NP)) .
     *        LE. ZMAX_SCATFOIL(1))) THEN
                DIST = TCON_SCATFOIL
                IRNEW_SCATFOIL = IRSTART_SCATFOIL + 1
              END IF
            END IF
          ELSE
            IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*(ISCM_SCATFOIL-2) + 2
            IF ((U(NP)*X(NP)+V(NP)*Y(NP) .LT. 0)) THEN
              A_SCATFOIL = U(NP)**2+V(NP)**2
              B_SCATFOIL = X(NP)*U(NP)+Y(NP)*V(NP)
              B2_SCATFOIL = B_SCATFOIL**2
              C_SCATFOIL = X(NP)**2+Y(NP)**2
              IF ((B_SCATFOIL.GE.0.0 .OR. A_SCATFOIL .EQ. 0.0)) THEN
                IHIT=0
                TCON_SCATFOIL=1.0E20
              ELSE
                COUT_SCATFOIL = C_SCATFOIL - RBN2T_SCATFOIL(IB_SCATFOIL)
                IF ((COUT_SCATFOIL .LT. 0.0)) THEN
                  IF ((IWATCH.GT.0)) THEN
                    WRITE(6,11930)COUT_SCATFOIL
11930               FORMAT(' CIN=',E11.3)
                  END IF
                  COUT_SCATFOIL=0.0
                END IF
                RAD_SCATFOIL = B2_SCATFOIL - A_SCATFOIL*COUT_SCATFOIL
                IF ((RAD_SCATFOIL .LT. 0.0)) THEN
                  IHIT = 0
                  TCON_SCATFOIL=1E20
                ELSE
                  IHIT=1
                  IF ((COUT_SCATFOIL/B2_SCATFOIL .LT. 1.0E-3)) THEN
                    TCON_SCATFOIL=-0.5*COUT_SCATFOIL/B_SCATFOIL
                  ELSE
                    IF (((SQRT(RAD_SCATFOIL)-B_SCATFOIL) .NE. 0.0)) THEN
                      TCON_SCATFOIL = COUT_SCATFOIL/(SQRT(RAD_SCATFOIL)-
     *                B_SCATFOIL)
                    ELSE
                      TCON_SCATFOIL = 1.0E30
                    END IF
                  END IF
                END IF
              END IF
              IF ((IHIT .EQ. 1 .AND. (Z(NP) + TCON_SCATFOIL * W(NP)) .GE
     *        . ZMIN_SCATFOIL(ISCM_SCATFOIL) .AND. (Z(NP) + TCON_SCATFOI
     *        L * W(NP)) .LE. ZMAX_SCATFOIL(ISCM_SCATFOIL))) THEN
                DIST = TCON_SCATFOIL
                IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*(ISCM_SCATFOIL-1)
     *          + 1
              END IF
            END IF
          END IF
          IF ((DIST .LE. USTEP)) THEN
            USTEP = DIST
            IF ((IRNEW_SCATFOIL .EQ. 1)) THEN
              CALL WHERE_AM_I(ICM_SCATFOIL,-1)
            ELSE
              IRNEW = IRNEW_SCATFOIL
            END IF
          END IF
        ELSE
          DIST=1E10
          A_SCATFOIL = U(NP)**2+V(NP)**2
          B_SCATFOIL = X(NP)*U(NP)+Y(NP)*V(NP)
          B2_SCATFOIL = B_SCATFOIL**2
          C_SCATFOIL = X(NP)**2+Y(NP)**2
          IF ((B_SCATFOIL.GE.0.0 .OR. A_SCATFOIL .EQ. 0.0)) THEN
            IHIT=0
            TCON_SCATFOIL=1.0E20
          ELSE
            COUT_SCATFOIL = C_SCATFOIL - RBN2T_SCATFOIL(IB_SCATFOIL)
            IF ((COUT_SCATFOIL .LT. 0.0)) THEN
              IF ((IWATCH.GT.0)) THEN
                WRITE(6,11940)COUT_SCATFOIL
11940           FORMAT(' CIN=',E11.3)
              END IF
              COUT_SCATFOIL=0.0
            END IF
            RAD_SCATFOIL = B2_SCATFOIL - A_SCATFOIL*COUT_SCATFOIL
            IF ((RAD_SCATFOIL .LT. 0.0)) THEN
              IHIT = 0
              TCON_SCATFOIL=1E20
            ELSE
              IHIT=1
              IF ((COUT_SCATFOIL/B2_SCATFOIL .LT. 1.0E-3)) THEN
                TCON_SCATFOIL=-0.5*COUT_SCATFOIL/B_SCATFOIL
              ELSE
                IF (((SQRT(RAD_SCATFOIL)-B_SCATFOIL) .NE. 0.0)) THEN
                  TCON_SCATFOIL = COUT_SCATFOIL/(SQRT(RAD_SCATFOIL)-B_SC
     *            ATFOIL)
                ELSE
                  TCON_SCATFOIL = 1.0E30
                END IF
              END IF
            END IF
          END IF
          IF ((IHIT .EQ. 1)) THEN
            DIST = TCON_SCATFOIL
            IRNEW_SCATFOIL = IRSTART_SCATFOIL + 3*(ISCM_SCATFOIL-1) + 1
          END IF
          IF ((DIST .LE. USTEP)) THEN
            USTEP = DIST
            IRNEW = IRNEW_SCATFOIL
          END IF
        END IF
      ELSE
        WRITE(6,11950)IR(NP)-IRSTART_SCATFOIL+1,IR(NP),ICM_SCATFOIL, IR_
     *  start_CM(ICM_SCATFOIL)
11950   FORMAT(//' ************'//' HOWFAR_SCATFOIL error'/ '    Region,
     * local, absolute =',2I5/ '    CM number=',I5,' start region =',I5/
     *' *********'//)
        STOP
      END IF
      RETURN
      END
      SUBROUTINE WHERE_AM_I_SCATFOIL(IDIR)
      IMPLICIT NONE
      COMMON/CM_SCATFOIL/ ICM_SCATFOIL, IRSTART_SCATFOIL, IREND_SCATFOIL
     *, N_SCATFOIL, N_GAP_SCATFOIL, ISCM_SCATFOIL, ISCM_MAX_SCATFOIL, IR
     *_SCATFOIL, ZFRONT_SCATFOIL, ZMIN_SCATFOIL, ZMAX_SCATFOIL, RMIN_SCA
     *TFOIL, RMAX_SCATFOIL, RBN_SCATFOIL, RBNT_SCATFOIL, RBN2_SCATFOIL,
     *RBN2T_SCATFOIL, RMINT_SCATFOIL, RMAXT_SCATFOIL, RMIN2_SCATFOIL, RM
     *IN2T_SCATFOIL, RMAX2_SCATFOIL, RMAX2T_SCATFOIL, ALO_SCATFOIL, BLO_
     *SCATFOIL, BLOT_SCATFOIL, COSA_SCATFOIL, NOWALL_SCATFOIL, TITLE_SCA
     *TFOIL
      INTEGER ICM_SCATFOIL,IRSTART_SCATFOIL, IREND_SCATFOIL,N_SCATFOIL,N
     *_GAP_SCATFOIL, ISCM_SCATFOIL,ISCM_MAX_SCATFOIL,IR_SCATFOIL, NOWALL
     *_SCATFOIL
      real*8 ZFRONT_SCATFOIL, ZMIN_SCATFOIL(15), ZMAX_SCATFOIL(15), RMIN
     *_SCATFOIL(15), RMAX_SCATFOIL(15), RBN_SCATFOIL, RBNT_SCATFOIL(2),
     *RBN2_SCATFOIL, RBN2T_SCATFOIL(2), RMINT_SCATFOIL(15,2), RMAXT_SCAT
     *FOIL(15,2), RMIN2_SCATFOIL(15), RMIN2T_SCATFOIL(15,2), RMAX2_SCATF
     *OIL(15), RMAX2T_SCATFOIL(15,2), ALO_SCATFOIL(15), BLO_SCATFOIL(15)
     *, BLOT_SCATFOIL(15,2), COSA_SCATFOIL(15)
      CHARACTER*1 TITLE_SCATFOIL(60)
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      INTEGER IDIR,  I
      real*8 XBDY_SCATFOIL,YBDY_SCATFOIL,RBDY2_SCATFOIL
      XBDY_SCATFOIL = X(NP) + U(NP)*USTEP
      YBDY_SCATFOIL = Y(NP) + V(NP)*USTEP
      RBDY2_SCATFOIL = XBDY_SCATFOIL*XBDY_SCATFOIL + YBDY_SCATFOIL*YBDY_
     *SCATFOIL
      IF ((IRSTART_SCATFOIL .EQ. 2)) THEN
        IF ((IDIR .EQ.1)) THEN
          RBDY2_SCATFOIL = X(NP)**2 + Y(NP)**2
        END IF
      END IF
      IF ((IDIR.EQ.1)) THEN
        IF ((N_GAP_SCATFOIL .EQ. 0)) THEN
          IRNEW = IRSTART_SCATFOIL
          IF ((RBDY2_SCATFOIL .GT. RBN2_SCATFOIL)) THEN
            IRNEW = IRSTART_SCATFOIL + 2
          ELSE IF((RBDY2_SCATFOIL .GT. RMIN2_SCATFOIL(1))) THEN
            IRNEW = IRSTART_SCATFOIL + 1
          END IF
        ELSE
          IRNEW = IREND_SCATFOIL
        END IF
      ELSE IF((IDIR.EQ.-1)) THEN
        IRNEW = IRSTART_SCATFOIL + 3*(ISCM_MAX_SCATFOIL-1)
        IF ((RBDY2_SCATFOIL .GT. RBN2_SCATFOIL)) THEN
          IRNEW = IRSTART_SCATFOIL + 3*(ISCM_MAX_SCATFOIL-1) + 2
        ELSE IF((RBDY2_SCATFOIL .GT. RMAX2_SCATFOIL(ISCM_MAX_SCATFOIL)))
     *   THEN
          IRNEW = IRSTART_SCATFOIL + 3*(ISCM_MAX_SCATFOIL-1) + 1
        END IF
      ELSE IF((IDIR.EQ.2)) THEN
        IF ((Z(NP).LT.ZMIN_SCATFOIL(1))) THEN
          IRNEW = IREND_SCATFOIL
        ELSE
          DO 11961 I=1,ISCM_MAX_SCATFOIL
            IF ((Z(NP).LE.ZMAX_SCATFOIL(I) .AND. Z(NP).GE.ZMIN_SCATFOIL(
     *      I))) THEN
              IRNEW = IRSTART_SCATFOIL + 3*(I-1)
              IF ((SQRT(X(NP)**2+Y(NP)**2) .GT. RBN_SCATFOIL)) THEN
                IRNEW = IRSTART_SCATFOIL + 3*(I-1) + 2
              ELSE IF((SQRT(X(NP)**2+Y(NP)**2) .GT. Z(NP)*ALO_SCATFOIL(I
     *        )+BLO_SCATFOIL(I))) THEN
                IRNEW = IRSTART_SCATFOIL + 3*(I-1) + 1
              END IF
              GO TO11962
            END IF
11961     CONTINUE
11962     CONTINUE
        END IF
      END IF
      RETURN
      END
      SUBROUTINE INPUT_SCATFOIL
      IMPLICIT NONE
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/CM_SCATFOIL/ ICM_SCATFOIL, IRSTART_SCATFOIL, IREND_SCATFOIL
     *, N_SCATFOIL, N_GAP_SCATFOIL, ISCM_SCATFOIL, ISCM_MAX_SCATFOIL, IR
     *_SCATFOIL, ZFRONT_SCATFOIL, ZMIN_SCATFOIL, ZMAX_SCATFOIL, RMIN_SCA
     *TFOIL, RMAX_SCATFOIL, RBN_SCATFOIL, RBNT_SCATFOIL, RBN2_SCATFOIL,
     *RBN2T_SCATFOIL, RMINT_SCATFOIL, RMAXT_SCATFOIL, RMIN2_SCATFOIL, RM
     *IN2T_SCATFOIL, RMAX2_SCATFOIL, RMAX2T_SCATFOIL, ALO_SCATFOIL, BLO_
     *SCATFOIL, BLOT_SCATFOIL, COSA_SCATFOIL, NOWALL_SCATFOIL, TITLE_SCA
     *TFOIL
      INTEGER ICM_SCATFOIL,IRSTART_SCATFOIL, IREND_SCATFOIL,N_SCATFOIL,N
     *_GAP_SCATFOIL, ISCM_SCATFOIL,ISCM_MAX_SCATFOIL,IR_SCATFOIL, NOWALL
     *_SCATFOIL
      real*8 ZFRONT_SCATFOIL, ZMIN_SCATFOIL(15), ZMAX_SCATFOIL(15), RMIN
     *_SCATFOIL(15), RMAX_SCATFOIL(15), RBN_SCATFOIL, RBNT_SCATFOIL(2),
     *RBN2_SCATFOIL, RBN2T_SCATFOIL(2), RMINT_SCATFOIL(15,2), RMAXT_SCAT
     *FOIL(15,2), RMIN2_SCATFOIL(15), RMIN2T_SCATFOIL(15,2), RMAX2_SCATF
     *OIL(15), RMAX2T_SCATFOIL(15,2), ALO_SCATFOIL(15), BLO_SCATFOIL(15)
     *, BLOT_SCATFOIL(15,2), COSA_SCATFOIL(15)
      CHARACTER*1 TITLE_SCATFOIL(60)
      COMMON/GEOM/ NREG
      INTEGER NREG
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 ZTHICK_SCATFOIL(20),  BDYTOL,  AIRGAPMIN_SCATFOIL
      INTEGER I,J,  IRA,  MED_FLAG,  IRA_WALL,  MED_INDEX_WALL,  MED_IND
     *EX
      ICM_SCATFOIL = ICM
      IRSTART_SCATFOIL = IR_start_CM(ICM_SCATFOIL)
      IERR_GEOM(ICM_SCATFOIL) = 0
      AIRGAPMIN_SCATFOIL = 0.1
      WRITE(6,11970)
11970 FORMAT(/' Next component is a stacked set of truncated cones ')
      WRITE(6,11980)
11980 FORMAT(/' SCATFOIL (CONESTAK)')
      IF ((ICM_SCATFOIL .EQ. 1)) THEN
        WRITE(6,11990)Z_min_CM(1)
11990   FORMAT(' This is the first component and starts at Z=',F11.4,' c
     *m')
      ELSE
        WRITE(6,12000)Z_min_CM(ICM_SCATFOIL)
12000   FORMAT(' Previous CM ends at:',F12.5,' cm'/)
      END IF
      WRITE(6,12010)
12010 FORMAT(' TITLE: ',$)
      READ(i_input,12020,END=12030,ERR=12040)TITLE_SCATFOIL
12020 FORMAT(60A1)
      WRITE(6,12050)TITLE_SCATFOIL
12050 FORMAT(' ',60A1)
      NOWALL_SCATFOIL = 0
      WRITE(6,12060)
12060 FORMAT(' Distance front 1st cone to ref plane(z=0), inner radius o
     *uter wall(0=>none)'/ ' : ',$)
      READ(i_input,12070,END=12030,ERR=12040)ZMIN_SCATFOIL(1),RBN_SCATFO
     *IL
12070 FORMAT(2F15.0)
      WRITE(6,12080)ZMIN_SCATFOIL(1),RBN_SCATFOIL
12080 FORMAT(2F25.5)
      IF ((Z_min_CM(ICM_SCATFOIL).GT.ZMIN_SCATFOIL(1))) THEN
        IF ((ICM_SCATFOIL.EQ.1)) THEN
          WRITE(6,12090)ICM_SCATFOIL, ZMIN_SCATFOIL(1),Z_min_CM(1)
12090     FORMAT(//' ***WARNING IN CM ',I4,' (CONESTAK):'/ ' Z_min_CM(1)
     * < ZMIN(1)'/ ' Z_min_CM(1) reset to ',F8.5,' cm from ',F8.5,' cm'/
     */)
          WRITE(IOUTLIST,100)ICM_SCATFOIL, ZMIN_SCATFOIL(1), Z_min_CM(1)
100       FORMAT(//' ***WARNING IN CM ',I4,' (CONESTAK):'/ ' Z_min_CM(1)
     * < ZMIN(1)'/ ' Z_min_CM(1) reset to ',F8.5,' cm from ',F8.5,' cm'/
     */)
          Z_min_CM(1)=ZMIN_SCATFOIL(1)
        ELSE
          WRITE(6,12100)ICM_SCATFOIL
12100     FORMAT(//'***ERROR IN CM ',I4,' (CONESTAK):'/ 'Overlaps with p
     *revious CM'//)
          IERR_GEOM(ICM_SCATFOIL)=IERR_GEOM(ICM_SCATFOIL)+1
        END IF
      END IF
      IF ((RBN_SCATFOIL .EQ. 0)) THEN
        NOWALL_SCATFOIL = 1
        WRITE(6,12110)ZMIN_SCATFOIL(1),RBN_SCATFOIL
12110   FORMAT(2F25.5,',  No outer wall!!')
      ELSE IF((RBN_SCATFOIL .GT. RMAX_CM(ICM_SCATFOIL))) THEN
        WRITE(6,12120)ICM_SCATFOIL
12120   FORMAT(//'***ERROR IN CM ',I4,' (CONESTAK):'/ 'inner radius of o
     *uter wall > RMAX_CM'//)
        IERR_GEOM(ICM_SCATFOIL)=IERR_GEOM(ICM_SCATFOIL)+1
      END IF
      IF ((RBN_SCATFOIL .EQ. 0)) THEN
        RBN_SCATFOIL = RMAX_CM(ICM_SCATFOIL)
      END IF
      ISCM_MAX_SCATFOIL = 15
      WRITE(6,12130)ISCM_MAX_SCATFOIL
12130 FORMAT(' NUMBER OF layers (MINIMUM 1, MAXIMUM',I3,'): ',$)
      READ(i_input,12140,END=12030,ERR=12040)ISCM_MAX_SCATFOIL
12140 FORMAT (I5)
      WRITE(6,12150)ISCM_MAX_SCATFOIL
12150 FORMAT(I5)
      IF ((ISCM_MAX_SCATFOIL .GT. 15)) THEN
        WRITE(6,12160)ICM_SCATFOIL, 15
12160   FORMAT(//'***ERROR IN CM ',I4,' (CONESTAK):'/ '# of layers > max
     *. allowed.'/ '# of layers reduced to ',I4,' for now.'//)
        IERR_GEOM(ICM_SCATFOIL)=IERR_GEOM(ICM_SCATFOIL)+1
        ISCM_MAX_SCATFOIL=15
      ELSE IF((ISCM_MAX_SCATFOIL.LT.1)) THEN
        ISCM_MAX_SCATFOIL=1
        WRITE(6,12170)ICM_SCATFOIL
12170   FORMAT(//'***ERROR IN CM ',I4,' (CONESTAK):'/ '# of layers < 1'/
     *'# of layers reset to 1 for now'//)
        IERR_GEOM(ICM_SCATFOIL)=IERR_GEOM(ICM_SCATFOIL)+1
      END IF
      N_SCATFOIL = 3*ISCM_MAX_SCATFOIL
      DO 12181 I=1,ISCM_MAX_SCATFOIL
        WRITE(6,12190)I
12190   FORMAT(/' Cone layer No:',I3, /' Thickness of conical layer,  to
     *p(r1) and  bottom(r2) radii (r1<=r2)'/ ' : ',$)
        READ(i_input,12200,END=12030,ERR=12040)ZTHICK_SCATFOIL(I), RMIN_
     *  SCATFOIL(I),RMAX_SCATFOIL(I)
12200   FORMAT (3F15.0)
        WRITE(6,12210)ZTHICK_SCATFOIL(I),RMIN_SCATFOIL(I),RMAX_SCATFOIL(
     *  I)
12210   FORMAT(3F15.5)
        IF ((ZTHICK_SCATFOIL(I) .LT. 0.0)) THEN
          WRITE(6,12220)ICM_SCATFOIL, I
12220     FORMAT(//'***ERROR IN CM ',I4,' (CONESTAK):'/ 'ZTHICK(',I4,')<
     * 0.0'//)
          IERR_GEOM(ICM_SCATFOIL)=IERR_GEOM(ICM_SCATFOIL)+1
        END IF
        IF ((RMIN_SCATFOIL(I) .GT. RMAX_SCATFOIL(I))) THEN
          WRITE(6,12230)ICM_SCATFOIL, I, I
12230     FORMAT(//'***ERROR IN CM ',I4,' (CONESTAK):'/ 'RMIN(',I4,') >R
     *MAX(',I4,')'//)
          IERR_GEOM(ICM_SCATFOIL)=IERR_GEOM(ICM_SCATFOIL)+1
        END IF
        IF ((RMIN_SCATFOIL(I).EQ.RMAX_SCATFOIL(I) .AND. RMIN_SCATFOIL(I)
     *  .LT.1.E-5)) THEN
          RMIN_SCATFOIL(I)=1.E-5
          RMAX_SCATFOIL(I)=1.E-5
          WRITE(6,12240)ICM_SCATFOIL, I,1.E-5
12240     FORMAT(//' ***WARNING IN CM ',I4,' (CONESTAK):'/ ' RMIN=RMAX<$
     *BDY_TOL (BOUNDARY TOLERANCE) IN LAYER ',I4/ ' THIS CAN CAUSE ENDLE
     *SS LOOPS'/ ' RMIN AND RMAX HAVE BEEN RESET TO ',F8.5//)
          WRITE(IOUTLIST,12250) ICM_SCATFOIL, I,1.E-5
12250     FORMAT(//' ***WARNING IN CM ',I4,' (CONESTAK):'/ ' RMIN=RMAX<$
     *BDY_TOL (BOUNDARY TOLERANCE) IN LAYER ',I4/ ' THIS CAN CAUSE ENDLE
     *SS LOOPS'/ ' RMIN AND RMAX HAVE BEEN RESET TO ',F8.5//)
        END IF
        IF ((NOWALL_SCATFOIL.EQ.1 .AND. RMIN_SCATFOIL(I).GT.RMAX_CM(ICM_
     *  SCATFOIL))) THEN
          WRITE(6,12260)ICM_SCATFOIL, I
12260     FORMAT(//'***WARNING IN CM ',I4,' (CONESTAK):'/ 'RMIN(',I4,')>
     * RMAX_CM'//)
          WRITE(IOUTLIST,'(//''***WARNING IN CM '',I4,'' (CONESTAK):''/
     *                       ''RMIN('',I4,'') > RMAX_CM''//)') ICM_SCATF
     *    OIL, I
        END IF
        IF ((NOWALL_SCATFOIL.EQ.1 .AND. RMAX_SCATFOIL(I).GT.RMAX_CM(ICM_
     *  SCATFOIL))) THEN
          WRITE(6,12270)ICM_SCATFOIL, I
12270     FORMAT(//'***WARNING IN CM ',I4,' (CONESTAK):'/ 'RMAX(',I4,')>
     * RMAX_CM'//)
          WRITE(IOUTLIST,'(//''***WARNING IN CM '',I4,'' (CONESTAK):''/
     *                       ''RMAX('',I4,'') > RMAX_CM''//)') ICM_SCATF
     *    OIL, I
        END IF
        IF ((I .GT. 1 .AND. RMAX_SCATFOIL(I-1) .GT. RMIN_SCATFOIL(I))) T
     *  HEN
          WRITE(6,12280)ICM_SCATFOIL, I, I-1
12280     FORMAT(//'***ERROR IN CM ',I4,' (CONESTAK):'/ 'RMIN(',I4,') <R
     *MAX(',I4,')'//)
          IERR_GEOM(ICM_SCATFOIL)=IERR_GEOM(ICM_SCATFOIL)+1
        END IF
12181 CONTINUE
12182 CONTINUE
      IF ((NOWALL_SCATFOIL .EQ. 0 .AND. RBN_SCATFOIL .LT. RMAX_SCATFOIL(
     *ISCM_MAX_SCATFOIL))) THEN
        WRITE(6,12290)ICM_SCATFOIL
12290   FORMAT(//'***ERROR IN CM ',I4,' (CONESTAK):'/ 'Inner radius of o
     *uter wall < max. cone radius.'//)
        IERR_GEOM(ICM_SCATFOIL)=IERR_GEOM(ICM_SCATFOIL)+1
      END IF
      IRA = IRSTART_SCATFOIL-1
      DO 12301 IR_SCATFOIL=1,N_SCATFOIL
        IRA = IRA+1
        IF ((NOWALL_SCATFOIL .EQ. 0 .AND. IR_SCATFOIL .EQ. 1)) THEN
          WRITE(6,12310)
12310     FORMAT(/' For outer wall:'/ ' ECUT, PCUT (MeV), DOSE ZONE (0=D
     *O NOT SCORE DOSE), IREGION_TO_BIT'/' : ',$)
          READ(i_input,12320,END=12030,ERR=12040)ECUT(IRA+2),PCUT(IRA+2)
     *    ,DOSE_ZONE(IRA+2),IREGION_TO_BIT(IRA+2)
12320     FORMAT (2F15.0,2I5)
          IRA_WALL = IRA+2
          IF ((ECUT(IRA+2) .LT. ECUTIN)) THEN
            ECUT(IRA+2)=ECUTIN
          END IF
          IF ((PCUT(IRA+2) .LT. PCUTIN)) THEN
            PCUT(IRA+2)=PCUTIN
          END IF
          WRITE(6,12330)ECUT(IRA+2),PCUT(IRA+2),DOSE_ZONE(IRA+2), IREGIO
     *    N_TO_BIT(IRA+2)
12330     FORMAT(F10.5,F10.3,I12,I20)
          WRITE(6,12340)
12340     FORMAT(' Material of outer wall ',$)
          WRITE(6,12350)
12350     FORMAT(' MEDIUM (left justify): ',$)
          READ(i_input,'(24A1)',END=12030,ERR=12040) (MED_IN(J),J=1,24)
          WRITE(6,12360)(MED_IN(J),J=1,24)
12360     FORMAT(' ',24A1)
          IF ((MED_IN(1) .EQ. 'V' .AND. MED_IN(2).EQ.'A' .AND. MED_IN(3)
     *    .EQ.'C' .AND. MED_IN(4) .EQ. 'U' .AND. MED_IN(5).EQ.'U' .AND.
     *    MED_IN(6).EQ.'M')) THEN
            MED_INDEX=0
          ELSE
            IF ((NMED .NE. 0)) THEN
              DO 12371 I=1,NMED
                MED_FLAG = 0
                DO 12381 J=1,24
                  IF ((MEDIA(J,I) .NE. MED_IN(J))) THEN
                    MED_FLAG = 1
                    GO TO12382
                  END IF
12381           CONTINUE
12382           CONTINUE
                IF ((MED_FLAG .EQ. 0)) THEN
                  MED_INDEX = I
                  GO TO12372
                END IF
                IF ((I .EQ. NMED)) THEN
                  NMED = NMED+1
                  MED_INDEX = NMED
                  DO 12391 J=1,24
                    MEDIA(J,NMED) = MED_IN(J)
12391             CONTINUE
12392             CONTINUE
                  GO TO12372
                END IF
12371         CONTINUE
12372         CONTINUE
            ELSE
              NMED = 1
              MED_INDEX = NMED
              DO 12401 J=1,24
                MEDIA(J,NMED) = MED_IN(J)
12401         CONTINUE
12402         CONTINUE
            END IF
          END IF
          MED(IRA+2) = MED_INDEX
          MED_INDEX_WALL = MED_INDEX
        END IF
        IF ((NOWALL_SCATFOIL .EQ. 1 .AND. IR_SCATFOIL .EQ. 1)) THEN
          IRA_WALL = IRA+2
          ECUT(IRA+2) = ECUTIN
          PCUT(IRA+2) = PCUTIN
          DOSE_ZONE(IRA+2)= 0
          IREGION_TO_BIT(IRA+2) = 0
          MED(IRA+2) = 0
        END IF
        IF ((MOD(IR_SCATFOIL,3) .EQ. 1)) THEN
          WRITE(6,12410)IR_SCATFOIL/3+1
12410     FORMAT(/' For layer',I3)
          WRITE(6,12420)IR_SCATFOIL
12420     FORMAT(' Local region ',I3,' (inside of cone)'/ ' ECUT, PCUT (
     *MeV), DOSE ZONE (0=DO NOT SCORE DOSE), IREGION_TO_BIT'/' : ',$)
        END IF
        IF ((MOD(IR_SCATFOIL,3) .EQ. 2)) THEN
          WRITE(6,12430)IR_SCATFOIL
12430     FORMAT(' Local region ',I3,' (outside of cone)'/ ' ECUT, PCUT(
     *MeV), DOSE ZONE (0=DO NOT SCORE DOSE), IREGION_TO_BIT'/' : ',$)
        END IF
        IF ((MOD(IR_SCATFOIL,3) .NE. 0)) THEN
          READ(i_input,12440,END=12030,ERR=12040)ECUT(IRA),PCUT(IRA),DOS
     *    E_ZONE(IRA),IREGION_TO_BIT(IRA)
12440     FORMAT (2F15.0,2I5)
          IF ((ECUT(IRA) .LT. ECUTIN)) THEN
            ECUT(IRA)=ECUTIN
          END IF
          IF ((PCUT(IRA) .LT. PCUTIN)) THEN
            PCUT(IRA)=PCUTIN
          END IF
          WRITE(6,12450)ECUT(IRA),PCUT(IRA),DOSE_ZONE(IRA), IREGION_TO_B
     *    IT(IRA)
12450     FORMAT(F10.5,F10.3,I12,I20)
          WRITE(6,12460)IR_SCATFOIL
12460     FORMAT(' Material of region ',I3,' ',$)
          WRITE(6,12470)
12470     FORMAT(' MEDIUM (left justify): ',$)
          READ(i_input,'(24A1)',END=12030,ERR=12040) (MED_IN(J),J=1,24)
          WRITE(6,12480)(MED_IN(J),J=1,24)
12480     FORMAT(' ',24A1)
          IF ((MED_IN(1) .EQ. 'V' .AND. MED_IN(2).EQ.'A' .AND. MED_IN(3)
     *    .EQ.'C' .AND. MED_IN(4) .EQ. 'U' .AND. MED_IN(5).EQ.'U' .AND.
     *    MED_IN(6).EQ.'M')) THEN
            MED_INDEX=0
          ELSE
            IF ((NMED .NE. 0)) THEN
              DO 12491 I=1,NMED
                MED_FLAG = 0
                DO 12501 J=1,24
                  IF ((MEDIA(J,I) .NE. MED_IN(J))) THEN
                    MED_FLAG = 1
                    GO TO12502
                  END IF
12501           CONTINUE
12502           CONTINUE
                IF ((MED_FLAG .EQ. 0)) THEN
                  MED_INDEX = I
                  GO TO12492
                END IF
                IF ((I .EQ. NMED)) THEN
                  NMED = NMED+1
                  MED_INDEX = NMED
                  DO 12511 J=1,24
                    MEDIA(J,NMED) = MED_IN(J)
12511             CONTINUE
12512             CONTINUE
                  GO TO12492
                END IF
12491         CONTINUE
12492         CONTINUE
            ELSE
              NMED = 1
              MED_INDEX = NMED
              DO 12521 J=1,24
                MEDIA(J,NMED) = MED_IN(J)
12521         CONTINUE
12522         CONTINUE
            END IF
          END IF
          MED(IRA) = MED_INDEX
        END IF
        IF ((MOD(IR_SCATFOIL,3) .EQ. 0)) THEN
          ECUT(IRA) = ECUT(IRA_WALL)
          PCUT(IRA) = PCUT(IRA_WALL)
          DOSE_ZONE(IRA)= DOSE_ZONE(IRA_WALL)
          IREGION_TO_BIT(IRA) = IREGION_TO_BIT(IRA_WALL)
          MED(IRA) = MED_INDEX_WALL
          IF ((NOWALL_SCATFOIL .EQ. 1)) THEN
            MED(IRA) = 0
          END IF
        END IF
12301 CONTINUE
12302 CONTINUE
      Z_gap_THICK(ICM_SCATFOIL) = ZMIN_SCATFOIL(1) - Z_min_CM(ICM_SCATFO
     *IL)
      IF ((Z_gap_THICK(ICM_SCATFOIL) .LT. 0.01)) THEN
        Z_gap_THICK(ICM_SCATFOIL) = 0.
        ZMIN_SCATFOIL(1)=Z_min_CM(ICM_SCATFOIL)
        N_GAP_SCATFOIL = 0
      ELSE
        N_GAP_SCATFOIL = 1
        IRA = IRSTART_SCATFOIL+N_SCATFOIL
        MED(IRA) = AIR_INDEX
        ECUT(IRA) = ECUTIN
        PCUT(IRA)=PCUTIN
        ESAVE(IRA)=ESAVE_GLOBAL
        ECUTRR(IRA)=ECUT(IRA)
      END IF
      BDYTOL= 1.E-5
      ZMAX_SCATFOIL(1) = ZMIN_SCATFOIL(1) + ZTHICK_SCATFOIL(1)
      DO 12531 I=2,ISCM_MAX_SCATFOIL
        ZMIN_SCATFOIL(I) = ZMIN_SCATFOIL(I-1) + ZTHICK_SCATFOIL(I-1)
        ZMAX_SCATFOIL(I) = ZMIN_SCATFOIL(I) + ZTHICK_SCATFOIL(I)
12531 CONTINUE
12532 CONTINUE
      DO 12541 I=1,ISCM_MAX_SCATFOIL
        ALO_SCATFOIL(I) = (RMAX_SCATFOIL(I)- RMIN_SCATFOIL(I))/(ZMAX_SCA
     *  TFOIL(I) - ZMIN_SCATFOIL(I))
        BLO_SCATFOIL(I) = RMIN_SCATFOIL(I) - ZMIN_SCATFOIL(I)*ALO_SCATFO
     *  IL(I)
        RMINT_SCATFOIL(I,1) = RMIN_SCATFOIL(I) + BDYTOL
        RMINT_SCATFOIL(I,2) = RMIN_SCATFOIL(I) - BDYTOL
        RMAXT_SCATFOIL(I,1) = RMAX_SCATFOIL(I) + BDYTOL
        RMAXT_SCATFOIL(I,2) = RMAX_SCATFOIL(I) - BDYTOL
        RMIN2_SCATFOIL(I) = RMIN_SCATFOIL(I)**2
        RMAX2_SCATFOIL(I) = RMAX_SCATFOIL(I)**2
        RMIN2T_SCATFOIL(I,1) = RMINT_SCATFOIL(I,1)**2
        RMIN2T_SCATFOIL(I,2) = RMINT_SCATFOIL(I,2)**2
        RMAX2T_SCATFOIL(I,1) = RMAXT_SCATFOIL(I,1)**2
        RMAX2T_SCATFOIL(I,2) = RMAXT_SCATFOIL(I,2)**2
        BLOT_SCATFOIL(I,1) = BLO_SCATFOIL(I) + BDYTOL
        BLOT_SCATFOIL(I,2) = BLO_SCATFOIL(I) - BDYTOL
        COSA_SCATFOIL(I) = (ZMAX_SCATFOIL(I) - ZMIN_SCATFOIL(I))/ SQRT(
     *  (ZMAX_SCATFOIL(I) - ZMIN_SCATFOIL(I))**2 +(RMAX_SCATFOIL(I) - RM
     *  IN_SCATFOIL(I))**2 )
12541 CONTINUE
12542 CONTINUE
      RBN2_SCATFOIL = RBN_SCATFOIL**2
      RBNT_SCATFOIL(1) = RBN_SCATFOIL - BDYTOL
      RBNT_SCATFOIL(2) = RBN_SCATFOIL + BDYTOL
      RBN2T_SCATFOIL(1) = RBNT_SCATFOIL(1)**2
      RBN2T_SCATFOIL(2) = RBNT_SCATFOIL(2)**2
      ZFRONT_SCATFOIL = Z_min_CM(ICM_SCATFOIL)
      Z_min_CM(ICM_SCATFOIL+1) = ZMAX_SCATFOIL(ISCM_MAX_SCATFOIL)
      IREND_SCATFOIL = IRSTART_SCATFOIL + N_SCATFOIL+ N_GAP_SCATFOIL - 1
      NREG = NREG+N_SCATFOIL+N_GAP_SCATFOIL
      IF ((NREG .LE. 3000)) THEN
        IR_start_CM(ICM_SCATFOIL+1) = IREND_SCATFOIL+1
      ELSE
        WRITE(6,12550)ICM_SCATFOIL,NREG,3000
12550   FORMAT(//'***ERROR IN CM ',I4,' (CONESTAK):'/ I4,' regions reque
     *sted, only ',I4,' available'//)
        IERR_GEOM(ICM_SCATFOIL)=IERR_GEOM(ICM_SCATFOIL)+1
      END IF
      RMAX_CM_FLAG(ICM_SCATFOIL) = 1
      IRA = IRSTART_SCATFOIL-1
      DO 12561 IR_SCATFOIL=1,N_SCATFOIL
        IRA = IRA+1
        NDOSE_ZONE = MAX(DOSE_ZONE(IRA),NDOSE_ZONE)
        IF ((NDOSE_ZONE .GT. 1500)) THEN
          WRITE(6,12570)NDOSE_ZONE
12570     FORMAT(' Too many dose zone !', 'NDOSE_ZONE =',I5, ' > $MAX_DO
     *SE_ZONE')
          STOP
        END IF
        MAX_BIT = MAX(IREGION_TO_BIT(IRA),MAX_BIT)
        ESAVE(IRA)=ESAVE_GLOBAL
        ECUTRR(IRA)=ECUT(IRA)
        E_min_out(ICM_SCATFOIL)=ECUT(IRA)
12561 CONTINUE
12562 CONTINUE
      RETURN
12030 CONTINUE
      WRITE(6,12580)ICM
12580 FORMAT(//' *** ERROR *** unexpected end of file reading input forC
     *M',I3)
      STOP
12040 CONTINUE
      WRITE(6,12590)ICM
12590 FORMAT(//' *** ERROR *** format error on input for CM',I3)
      STOP
      END
      SUBROUTINE ISUMRY_SCATFOIL
      IMPLICIT NONE
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/CM_SCATFOIL/ ICM_SCATFOIL, IRSTART_SCATFOIL, IREND_SCATFOIL
     *, N_SCATFOIL, N_GAP_SCATFOIL, ISCM_SCATFOIL, ISCM_MAX_SCATFOIL, IR
     *_SCATFOIL, ZFRONT_SCATFOIL, ZMIN_SCATFOIL, ZMAX_SCATFOIL, RMIN_SCA
     *TFOIL, RMAX_SCATFOIL, RBN_SCATFOIL, RBNT_SCATFOIL, RBN2_SCATFOIL,
     *RBN2T_SCATFOIL, RMINT_SCATFOIL, RMAXT_SCATFOIL, RMIN2_SCATFOIL, RM
     *IN2T_SCATFOIL, RMAX2_SCATFOIL, RMAX2T_SCATFOIL, ALO_SCATFOIL, BLO_
     *SCATFOIL, BLOT_SCATFOIL, COSA_SCATFOIL, NOWALL_SCATFOIL, TITLE_SCA
     *TFOIL
      INTEGER ICM_SCATFOIL,IRSTART_SCATFOIL, IREND_SCATFOIL,N_SCATFOIL,N
     *_GAP_SCATFOIL, ISCM_SCATFOIL,ISCM_MAX_SCATFOIL,IR_SCATFOIL, NOWALL
     *_SCATFOIL
      real*8 ZFRONT_SCATFOIL, ZMIN_SCATFOIL(15), ZMAX_SCATFOIL(15), RMIN
     *_SCATFOIL(15), RMAX_SCATFOIL(15), RBN_SCATFOIL, RBNT_SCATFOIL(2),
     *RBN2_SCATFOIL, RBN2T_SCATFOIL(2), RMINT_SCATFOIL(15,2), RMAXT_SCAT
     *FOIL(15,2), RMIN2_SCATFOIL(15), RMIN2T_SCATFOIL(15,2), RMAX2_SCATF
     *OIL(15), RMAX2T_SCATFOIL(15,2), ALO_SCATFOIL(15), BLO_SCATFOIL(15)
     *, BLOT_SCATFOIL(15,2), COSA_SCATFOIL(15)
      CHARACTER*1 TITLE_SCATFOIL(60)
      COMMON/GEOM/ NREG
      INTEGER NREG
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      INTEGER ICOLOUR,  IRA,  I,J
      real*8 VOL_SCATFOIL(3*15+1),PIL
      PIL=4.0*ATAN(1.0)
      DO 12601 I=1,ISCM_MAX_SCATFOIL
        VOL_SCATFOIL(3*(I-1)+1) = PIL/3.0*(ZMAX_SCATFOIL(I)-ZMIN_SCATFOI
     *  L(I))* ( RMIN_SCATFOIL(I)**2 + RMAX_SCATFOIL(I)**2 +RMIN_SCATFOI
     *  L(I)*RMAX_SCATFOIL(I) )
        VOL_SCATFOIL(3*(I-1)+2) = PIL*(ZMAX_SCATFOIL(I)-ZMIN_SCATFOIL(I)
     *  )*RBN_SCATFOIL**2- VOL_SCATFOIL(3*(I-1)+1)
        VOL_SCATFOIL(3*(I-1)+3) = PIL*(ZMAX_SCATFOIL(I)- ZMIN_SCATFOIL(I
     *  ))*(RMAX_CM(ICM_SCATFOIL)**2- RBN_SCATFOIL**2)
12601 CONTINUE
12602 CONTINUE
      IRA = IRSTART_SCATFOIL-1
      DO 12611 IR_SCATFOIL=1,N_SCATFOIL+N_GAP_SCATFOIL
        IRA = IRA+1
        IF ((DOSE_ZONE(IRA).NE.0)) THEN
          ID=DOSE_ZONE(IRA)
          AMASS(ID)=AMASS(ID)+VOL_SCATFOIL(IR_SCATFOIL)*RHOR(IRA)
          IF ((AMASS(ID).LT.0.0 .AND. ABS(AMASS(ID)).LT.0.000001)) THEN
            AMASS(ID)=0.0
          END IF
        END IF
12611 CONTINUE
12612 CONTINUE
      WRITE(IOUTLIST,110) ICM_SCATFOIL,TITLE_SCATFOIL
      WRITE(IOUTLIST,120) Z_min_CM(ICM_SCATFOIL),RMAX_CM(ICM_SCATFOIL)
      IF ((NOWALL_SCATFOIL.EQ.1)) THEN
        WRITE(IOUTLIST,122)
      ELSE
        WRITE(IOUTLIST,121)RBN_SCATFOIL
      END IF
      WRITE(IOUTLIST,123)
      IF ((N_GAP_SCATFOIL.NE.0)) THEN
        WRITE(IOUTLIST,124)'airgap',Z_min_CM(ICM_SCATFOIL), ZMIN_SCATFOI
     *  L(1)-Z_min_CM(ICM_SCATFOIL), RMAX_CM(ICM_SCATFOIL),RMAX_CM(ICM_S
     *  CATFOIL)
      END IF
      DO 12621 I=1,ISCM_MAX_SCATFOIL
        WRITE(IOUTLIST,130)I,ZMIN_SCATFOIL(I),ZMAX_SCATFOIL(I)- ZMIN_SCA
     *  TFOIL(I), RMIN_SCATFOIL(I),RMAX_SCATFOIL(I)
12621 CONTINUE
12622 CONTINUE
      WRITE(IOUTLIST,140)
      IRA = IRSTART_SCATFOIL - 1
      DO 12631 IR_SCATFOIL=1,N_SCATFOIL-1,3
        ISCM_SCATFOIL = (IR_SCATFOIL - 1)/3 + 1
        IRA = IRSTART_SCATFOIL + IR_SCATFOIL - 1
        IF ((MED(IRA).NE.0)) THEN
          WRITE(IOUTLIST,150) IR_SCATFOIL,ISCM_SCATFOIL,'inside', ECUT(I
     *    RA),PCUT(IRA), ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA), IREGION_
     *    TO_BIT(IRA),(MEDIA(J,MED(IRA)),J=1,9)
        ELSE IF((MED(IRA).EQ.0)) THEN
          WRITE(IOUTLIST,150) IR_SCATFOIL,ISCM_SCATFOIL,'inside', ECUT(I
     *    RA),PCUT(IRA), ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA), IREGION_
     *    TO_BIT(IRA),'V','a','c','u','u','m'
        END IF
        IF ((MED(IRA+1).NE.0)) THEN
          WRITE(IOUTLIST,150) IR_SCATFOIL+1,ISCM_SCATFOIL,'outside', ECU
     *    T(IRA+1),PCUT(IRA+1),ECUTRR(IRA+1),ESAVE(IRA+1), DOSE_ZONE(IRA
     *    +1),IREGION_TO_BIT(IRA+1),(MEDIA(J,MED(IRA+1)),J=1,9)
        ELSE IF((MED(IRA+1).EQ.0)) THEN
          WRITE(IOUTLIST,150) IR_SCATFOIL+1,ISCM_SCATFOIL,'outside', ECU
     *    T(IRA+1),PCUT(IRA+1),ECUTRR(IRA+1),ESAVE(IRA+1), DOSE_ZONE(IRA
     *    +1),IREGION_TO_BIT(IRA+1),'V','a','c','u','u','m'
        END IF
        IF ((NOWALL_SCATFOIL.NE.1)) THEN
          IF ((MED(IRA+2).NE.0)) THEN
            WRITE(IOUTLIST,150) IR_SCATFOIL+2,ISCM_SCATFOIL,'wall', ECUT
     *      (IRA+2),PCUT(IRA+2),ECUTRR(IRA+2),ESAVE(IRA+2), DOSE_ZONE(IR
     *      A+2),IREGION_TO_BIT(IRA+2),(MEDIA(J,MED(IRA+2)),J=1,9)
          ELSE IF((MED(IRA+2).EQ.0)) THEN
            WRITE(IOUTLIST,150) IR_SCATFOIL+2,ISCM_SCATFOIL,'wall', ECUT
     *      (IRA+2),PCUT(IRA+2),ECUTRR(IRA+2),ESAVE(IRA+2), DOSE_ZONE(IR
     *      A+2),IREGION_TO_BIT(IRA+2),'V','a','c','u','u','m'
          END IF
        ELSE
          WRITE(IOUTLIST,153) IR_SCATFOIL+2,ISCM_SCATFOIL,'nowall', 'NA'
     *    ,'NA','NA','NA','NA','NA','V','a','c','u','u','m'
        END IF
12631 CONTINUE
12632 CONTINUE
      IF ((N_GAP_SCATFOIL .NE. 0 )) THEN
        IRA = IRSTART_SCATFOIL+N_SCATFOIL
        WRITE(IOUTLIST,151) N_SCATFOIL+N_GAP_SCATFOIL,'NA','airgap', ECU
     *  T(IRA),PCUT(IRA),ECUTRR(IRA),ESAVE(IRA), DOSE_ZONE(IRA),IREGION_
     *  TO_BIT(IRA),(MEDIA(J,MED(IRA)),J=1,9)
        WRITE(IOUTLIST,152)'at top'
      END IF
110   FORMAT(///1x,79('-')/ '  Component module',I3, ' is stacked set of
     * truncated cones (CONESTAK)' /1x,79('-') //T2,'Title: ',68A1)
120   FORMAT(/T2,'SCATFOIL geometry parameters:', /T2,'-----------------
     *------------', /T2,'Distance of front of CM from reference plane =
     * ', F15.5,' cm', /T2,'Radius of outer boundary of CM = ',F15.5,' c
     *m')
121   FORMAT(T2,'Inner radius of outer wall = ',F8.5,' cm')
122   FORMAT(T2,'There is no outer wall.')
123   FORMAT(/T2,'layer    Z front   thickness   top radius   bottom rad
     *ius', /T2,'  #       face', /T2,'          (cm)       (cm) (cm)   
     *      (cm)')
140   FORMAT(/T2,'SCATFOIL region parameters:', /T2,'-------------------
     *--------', /T2,'local  layer  location  electron  photon', '  rang
     *e-rejection   dose  bit  medium' /T2,'region                   cut
     *off   cutoff', '   level     max    zone  set' /T2,'            (M
     *eV)    (MeV)', '   (MeV)    (MeV)')
150   FORMAT(T2,I3,I7,4X,A7,F10.3,F9.3,F8.3,F9.3,I6,I5,2X,9A1)
151   FORMAT(T2,I3,4X,A3,4X,A7,F10.3,F9.3,F8.3,F9.3,I6,I5,2X,9A1)
152   FORMAT(T16,A7)
153   FORMAT(T2,I3,I7,4X,A7,A10,A9,A8,A9,A6,A5,2X,9A1)
130   FORMAT(T2,I3,F12.3,F12.3,F12.3,F13.3)
124   FORMAT(T2,A6,F9.3,F12.3,F12.3,F13.3)
      IF ((IWATCH .EQ. 4 .OR. IZLAST .EQ. 2)) THEN
        ICOLOUR=4
        DO 12641 I=1,ISCM_MAX_SCATFOIL
          WRITE(IOUTGEOM,201)ICOLOUR,'CYLZ',ZMIN_SCATFOIL(I), RMIN_SCATF
     *    OIL(I),ZMAX_SCATFOIL(I),RMAX_SCATFOIL(I),0.0,0.0
201       FORMAT(' ',I1,A4,10(F7.2,','))
12641   CONTINUE
12642   CONTINUE
      END IF
      RETURN
      END
      SUBROUTINE HOWNEAR_SCATFOIL(DIST)
      implicit none
      COMMON/CM_SCATFOIL/ ICM_SCATFOIL, IRSTART_SCATFOIL, IREND_SCATFOIL
     *, N_SCATFOIL, N_GAP_SCATFOIL, ISCM_SCATFOIL, ISCM_MAX_SCATFOIL, IR
     *_SCATFOIL, ZFRONT_SCATFOIL, ZMIN_SCATFOIL, ZMAX_SCATFOIL, RMIN_SCA
     *TFOIL, RMAX_SCATFOIL, RBN_SCATFOIL, RBNT_SCATFOIL, RBN2_SCATFOIL,
     *RBN2T_SCATFOIL, RMINT_SCATFOIL, RMAXT_SCATFOIL, RMIN2_SCATFOIL, RM
     *IN2T_SCATFOIL, RMAX2_SCATFOIL, RMAX2T_SCATFOIL, ALO_SCATFOIL, BLO_
     *SCATFOIL, BLOT_SCATFOIL, COSA_SCATFOIL, NOWALL_SCATFOIL, TITLE_SCA
     *TFOIL
      INTEGER ICM_SCATFOIL,IRSTART_SCATFOIL, IREND_SCATFOIL,N_SCATFOIL,N
     *_GAP_SCATFOIL, ISCM_SCATFOIL,ISCM_MAX_SCATFOIL,IR_SCATFOIL, NOWALL
     *_SCATFOIL
      real*8 ZFRONT_SCATFOIL, ZMIN_SCATFOIL(15), ZMAX_SCATFOIL(15), RMIN
     *_SCATFOIL(15), RMAX_SCATFOIL(15), RBN_SCATFOIL, RBNT_SCATFOIL(2),
     *RBN2_SCATFOIL, RBN2T_SCATFOIL(2), RMINT_SCATFOIL(15,2), RMAXT_SCAT
     *FOIL(15,2), RMIN2_SCATFOIL(15), RMIN2T_SCATFOIL(15,2), RMAX2_SCATF
     *OIL(15), RMAX2T_SCATFOIL(15,2), ALO_SCATFOIL(15), BLO_SCATFOIL(15)
     *, BLOT_SCATFOIL(15,2), COSA_SCATFOIL(15)
      CHARACTER*1 TITLE_SCATFOIL(60)
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      real*8 DIST
      IR_SCATFOIL = IR(NP) - IRSTART_SCATFOIL + 1
      ISCM_SCATFOIL = (IR_SCATFOIL-1)/3 + 1
      IF ((IR_SCATFOIL .EQ. 3*(ISCM_SCATFOIL-1) + 1)) THEN
        DIST = (ALO_SCATFOIL(ISCM_SCATFOIL)*Z(NP) + BLO_SCATFOIL(ISCM_SC
     *  ATFOIL) - SQRT(X(NP)**2 + Y(NP)**2))*COSA_SCATFOIL(ISCM_SCATFOIL
     *  )
        DIST = MIN(DIST,Z(NP)-ZMIN_SCATFOIL(ISCM_SCATFOIL), ZMAX_SCATFOI
     *  L(ISCM_SCATFOIL)-Z(NP))
      ELSE IF((IR_SCATFOIL .EQ. 3*(ISCM_SCATFOIL-1)+2)) THEN
        IF ((NOWALL_SCATFOIL.EQ.1)) THEN
          DIST = (SQRT(X(NP)*X(NP) + Y(NP)*Y(NP)) - ALO_SCATFOIL(ISCM_SC
     *    ATFOIL)*Z(NP) - BLO_SCATFOIL(ISCM_SCATFOIL))*COSA_SCATFOIL(ISC
     *    M_SCATFOIL)
        ELSE
          DIST = MIN((SQRT(X(NP)*X(NP) + Y(NP)*Y(NP)) - ALO_SCATFOIL(ISC
     *    M_SCATFOIL)*Z(NP) - BLO_SCATFOIL(ISCM_SCATFOIL)) *COSA_SCATFOI
     *    L(ISCM_SCATFOIL), RBN_SCATFOIL-SQRT(X(NP)*X(NP) + Y(NP)*Y(NP))
     *    )
        END IF
        DIST = MIN(DIST,Z(NP)-ZMIN_SCATFOIL(ISCM_SCATFOIL), ZMAX_SCATFOI
     *  L(ISCM_SCATFOIL)-Z(NP))
      ELSE IF((IR_SCATFOIL .EQ. 3*(ISCM_SCATFOIL-1)+3)) THEN
        DIST = MIN(SQRT(X(NP)*X(NP) + Y(NP)*Y(NP)) - RBN_SCATFOIL, Z(NP)
     *  -ZMIN_SCATFOIL(ISCM_SCATFOIL), ZMAX_SCATFOIL(ISCM_SCATFOIL)-Z(NP
     *  ))
      ELSE
        DIST=0.0
      END IF
      RETURN
      END
      SUBROUTINE HOWFAR_IONCHAM
      IMPLICIT NONE
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/CM_IONCHAM/ Z_IONCHAM, ZFRONT_IONCHAM, ZBACK_IONCHAM, ZMIN_
     *IONCHAM, ZMAX_IONCHAM, RCYS_IONCHAM, RCYS2_IONCHAM, TITLE_IONCHAM,
     * ICM_IONCHAM,IRSTART_IONCHAM,IREND_IONCHAM, N_IONCHAM,N_GAP_IONCHA
     *M, N_CHM_IONCHAM, N_TOP_IONCHAM, N_BOT_IONCHAM, IR_IONCHAM
      INTEGER ICM_IONCHAM,IRSTART_IONCHAM,IREND_IONCHAM, N_IONCHAM ,N_GA
     *P_IONCHAM, N_CHM_IONCHAM, N_TOP_IONCHAM, N_BOT_IONCHAM, IR_IONCHAM
      real*8 ZFRONT_IONCHAM, ZBACK_IONCHAM, ZMIN_IONCHAM, ZMAX_IONCHAM,
     *RCYS_IONCHAM(200,3), RCYS2_IONCHAM(200,3)
      REAL*8 Z_IONCHAM(1:200+1)
      CHARACTER*1 TITLE_IONCHAM(60)
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      INTEGER IRL,  I, IIR, JDEBUG, LAYER, IU_D
      real*8 DIST,  RF2_IONCHAM,  DMIN_IONCHAM,  R0SQ,  CRITERIOR_IR,ZNP
     *, STEP_UNIT, CUT_COE, CUTCOE_IONCHAM, SHIFT_COUNT_IONCHAM
      ZNP=Z(NP)
      IRL = IR(NP)
      JDEBUG=JDEBUG+1
      IR_IONCHAM = IRL - IRSTART_IONCHAM + 1
      CALL HOWNEAR_IONCHAM(DMIN_IONCHAM)
      DNEAR(NP) = DMIN_IONCHAM
      IF (( IR_IONCHAM.LE.N_CHM_IONCHAM )) THEN
          LAYER=IR_IONCHAM
      ELSE IF((IR_IONCHAM.LE.N_CHM_IONCHAM+3 )) THEN
          LAYER=1
      ELSE
          LAYER=N_CHM_IONCHAM+ (IR_IONCHAM-N_CHM_IONCHAM-3+1)/2
      END IF
      R0SQ=X(NP)**2+Y(NP)**2
      CUT_COE=0.0
      IF ((N_GAP_IONCHAM.EQ.1 .AND. IRL.EQ.IREND_IONCHAM )) THEN
          IF ((W(NP).GT.0.0)) THEN
              DIST = (ZMIN_IONCHAM - Z(NP))/W(NP)
              IF ((DIST.GT.USTEP)) THEN
                  STEP_UNIT=USTEP
                  IU_D=0
              ELSE
                  STEP_UNIT=DIST
                  IU_D=1
              END IF
              IF ((DIST .LE. 0.0)) THEN
                  USTEP=0.0
                  IF ((N_TOP_IONCHAM.EQ.0)) THEN
                      IF ((R0SQ.LT.RCYS2_IONCHAM(1,1))) THEN
                          IRNEW =IRSTART_IONCHAM
                      ELSE IF((R0SQ.LT.RCYS2_IONCHAM(1,2))) THEN
                          IRNEW =IRSTART_IONCHAM+N_CHM_IONCHAM
                      ELSE IF(( R0SQ.LT.RCYS2_IONCHAM(1,3) )) THEN
                          IRNEW =IRSTART_IONCHAM+N_CHM_IONCHAM+1
                      ELSE
                          IRNEW =IRSTART_IONCHAM+N_CHM_IONCHAM+2
                      END IF
                  ELSE
                      IF (( R0SQ.LT.RCYS2_IONCHAM(N_CHM_IONCHAM+1,1) ))
     *                THEN
                          IRNEW =IRSTART_IONCHAM+N_CHM_IONCHAM+3
                      ELSE
                          IRNEW =IRSTART_IONCHAM+N_CHM_IONCHAM+4
                      END IF
                  END IF
                  RETURN
              ELSE
                  IF (( IU_D.EQ.0 )) THEN
                      RETURN
                  ELSE
                      IF ((STEP_UNIT+1.0E-5.LT. USTEP)) THEN
                          STEP_UNIT=STEP_UNIT+1.0E-5
                      END IF
                      USTEP=STEP_UNIT
                      RF2_IONCHAM= (X(NP)+USTEP*U(NP))**2 +(Y(NP)+USTEP*
     *                V(NP))**2
                      IF ((N_TOP_IONCHAM.EQ.0)) THEN
                          IF (( RF2_IONCHAM.LT.RCYS2_IONCHAM(1,1) )) THE
     *                    N
                              IRNEW =IRSTART_IONCHAM
                          ELSE IF(( RF2_IONCHAM.LT.RCYS2_IONCHAM(1,2) ))
     *                     THEN
                              IRNEW =IRSTART_IONCHAM+N_CHM_IONCHAM
                          ELSE IF(( RF2_IONCHAM.LT.RCYS2_IONCHAM(1,3) ))
     *                     THEN
                              IRNEW =IRSTART_IONCHAM+1+N_CHM_IONCHAM
                          ELSE
                              IRNEW =IRSTART_IONCHAM+2+N_CHM_IONCHAM
                          END IF
                      ELSE
                          IF (( RF2_IONCHAM.LT.RCYS2_IONCHAM(N_CHM_IONCH
     *                    AM+1,1) )) THEN
                              IRNEW =IRSTART_IONCHAM+N_CHM_IONCHAM+3
                          ELSE
                              IRNEW =IRSTART_IONCHAM+N_CHM_IONCHAM+4
                          END IF
                      END IF
                      RETURN
                  END IF
              END IF
          ELSE IF((W(NP).LT.0.0)) THEN
              DIST = (ZFRONT_IONCHAM - Z(NP))/W(NP)
              IF ((DIST.GT.USTEP)) THEN
                  STEP_UNIT=USTEP
                  IU_D=0
              ELSE
                  STEP_UNIT=DIST
                  IU_D=1
              END IF
              IF ((DIST .LE. 0.0)) THEN
                  USTEP=1.E-16
                  CALL WHERE_AM_I(ICM_IONCHAM,-1)
                  RETURN
              ELSE
                  IF (( IU_D.EQ.0 )) THEN
                      RETURN
                  ELSE
                      IF ((STEP_UNIT+1.0E-5.LT. USTEP)) THEN
                          STEP_UNIT=STEP_UNIT+1.0E-5
                      END IF
                      USTEP=STEP_UNIT
                      CALL WHERE_AM_I(ICM_IONCHAM,-1)
                      RETURN
                  END IF
              END IF
          ELSE
              RETURN
          END IF
      ELSE IF((IR_IONCHAM.LE.N_CHM_IONCHAM)) THEN
          IF ((W(NP) .GT. 0.0)) THEN
              DIST = (Z_IONCHAM(IR_IONCHAM+1) - Z(NP))/W(NP)
              IF ((DIST.GT.USTEP)) THEN
                  STEP_UNIT=USTEP
                  IU_D=0
              ELSE
                  STEP_UNIT=DIST
                  IU_D=1
              END IF
              IF ((DIST .LE.0.0)) THEN
                  USTEP=0.0
                  IF ((IR_IONCHAM.EQ.N_CHM_IONCHAM .AND. N_BOT_IONCHAM.E
     *            Q.0 )) THEN
                      USTEP=1.E-16
                      CALL WHERE_AM_I(ICM_IONCHAM,1)
                  ELSE IF(( IR_IONCHAM.EQ.N_CHM_IONCHAM )) THEN
                      IF ((R0SQ.LT. RCYS2_IONCHAM(N_CHM_IONCHAM+N_TOP_IO
     *                NCHAM+1,1))) THEN
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3+2*N_TOP_
     *                    IONCHAM
                      ELSE
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3+2*N_TOP_
     *                    IONCHAM+1
                      END IF
                  ELSE
                      IRNEW = IR(NP)+1
                  END IF
                  RETURN
              END IF
              CRITERIOR_IR=R0SQ-RCYS2_IONCHAM(1,1)
              IF ((CRITERIOR_IR.GT.0.0)) THEN
                  USTEP=MIN( USTEP, SHIFT_COUNT_IONCHAM(IR_IONCHAM) )
                  IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM
                  RETURN
              END IF
              RF2_IONCHAM=(X(NP)+STEP_UNIT*U(NP))**2 +(Y(NP)+STEP_UNIT*V
     *        (NP))**2
              IF ((RF2_IONCHAM .GT. RCYS2_IONCHAM(1,1))) THEN
                  CUT_COE=CUTCOE_IONCHAM( R0SQ, RCYS2_IONCHAM(1,1) )
              END IF
              IF (((CUT_COE.GT.0.0.AND.CUT_COE.LT.STEP_UNIT).OR.(CUT_COE
     *        .EQ.STEP_UNIT.AND.IU_D.EQ.0))) THEN
                  IF ((CUT_COE+1.0E-5.LT. STEP_UNIT)) THEN
                      CUT_COE=CUT_COE+1.0E-5
                  END IF
                  USTEP=CUT_COE
                  IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM
                  RETURN
              ELSE IF((IU_D.EQ.1)) THEN
                  IF ((STEP_UNIT+1.0E-5.LT. USTEP)) THEN
                      STEP_UNIT=STEP_UNIT+1.0E-5
                  END IF
                  USTEP=STEP_UNIT
                  IF ((IR_IONCHAM.EQ.N_CHM_IONCHAM .AND. N_BOT_IONCHAM.E
     *            Q.0 )) THEN
                      CALL WHERE_AM_I(ICM_IONCHAM,1)
                  ELSE IF(( IR_IONCHAM.EQ.N_CHM_IONCHAM )) THEN
                      RF2_IONCHAM= (X(NP)+USTEP*U(NP))**2 +(Y(NP)+USTEP*
     *                V(NP))**2
                      IF ((RF2_IONCHAM.LT.RCYS2_IONCHAM(N_CHM_IONCHAM+ N
     *                _TOP_IONCHAM+1,1))) THEN
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3+2*N_TOP_
     *                    IONCHAM
                      ELSE
                          IRNEW=IRSTART_IONCHAM+ N_CHM_IONCHAM+3+2*N_TOP
     *                    _IONCHAM+1
                      END IF
                  ELSE
                      IRNEW = IR(NP)+1
                  END IF
                  RETURN
              ELSE
                  RETURN
              END IF
          ELSE IF((W(NP).LT. 0.0)) THEN
              DIST = (Z_IONCHAM(IR_IONCHAM) - Z(NP))/W(NP)
              IF ((DIST.GT.USTEP)) THEN
                  STEP_UNIT=USTEP
                  IU_D=0
              ELSE
                  STEP_UNIT=DIST
                  IU_D=1
              END IF
              IF ((DIST .LE. 0.0)) THEN
                  USTEP=0.0
                  IF ((IR_IONCHAM.EQ.1 .AND. N_TOP_IONCHAM.EQ.0 )) THEN
                      IF ((N_GAP_IONCHAM .EQ. 1)) THEN
                          IRNEW =IREND_IONCHAM
                      ELSE
                          USTEP=1.E-16
                          CALL WHERE_AM_I(ICM_IONCHAM,-1)
                      END IF
                  ELSE IF((IR_IONCHAM.EQ.1)) THEN
                      IF ((R0SQ.LT.RCYS2_IONCHAM(N_CHM_IONCHAM+N_TOP_ION
     *                CHAM,1))) THEN
                          IRNEW=IRSTART_IONCHAM+ N_CHM_IONCHAM+3+2*(N_TO
     *                    P_IONCHAM-1)
                      ELSE
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3+ 2*(N_TO
     *                    P_IONCHAM-1)+1
                      END IF
                  ELSE
                      IRNEW = IR(NP)-1
                  END IF
                  RETURN
              END IF
              CRITERIOR_IR=R0SQ-RCYS2_IONCHAM(1,1)
              IF ((CRITERIOR_IR.GT.0.0)) THEN
                  USTEP=MIN( USTEP, SHIFT_COUNT_IONCHAM(IR_IONCHAM) )
                  IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM
                  RETURN
              END IF
              RF2_IONCHAM=(X(NP)+STEP_UNIT*U(NP))**2 +(Y(NP)+STEP_UNIT*V
     *        (NP))**2
              IF (( RF2_IONCHAM .GT. RCYS2_IONCHAM(1,1) )) THEN
                  CUT_COE=CUTCOE_IONCHAM( R0SQ, RCYS2_IONCHAM(1,1) )
              END IF
              IF (( ( CUT_COE.GT.0.0 .AND. CUT_COE .LT. STEP_UNIT ) .OR.
     *        ( CUT_COE.EQ.STEP_UNIT .AND. IU_D.EQ.0 ) )) THEN
                  IF ((CUT_COE+1.0E-5.LT. STEP_UNIT)) THEN
                      CUT_COE=CUT_COE+1.0E-5
                  END IF
                  USTEP=CUT_COE
                  IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM
                  RETURN
              ELSE IF((IU_D.EQ.1)) THEN
                  IF ((STEP_UNIT+1.0E-5.LT. USTEP)) THEN
                      STEP_UNIT=STEP_UNIT+1.0E-5
                  END IF
                  USTEP=STEP_UNIT
                  IF ((IR_IONCHAM.EQ.1 .AND. N_TOP_IONCHAM.EQ.0 .AND. N_
     *            GAP_IONCHAM.EQ.0 )) THEN
                      CALL WHERE_AM_I(ICM_IONCHAM,-1)
                  ELSE IF((IR_IONCHAM.EQ.1 .AND. N_TOP_IONCHAM.EQ.0)) TH
     *            EN
                      IRNEW=IREND_IONCHAM
                  ELSE IF(( IR_IONCHAM.EQ.1 )) THEN
                      RF2_IONCHAM= (X(NP)+USTEP*U(NP))*(X(NP)+USTEP*U(NP
     *                )) +(Y(NP)+USTEP*V(NP))*(Y(NP)+USTEP*V(NP))
                      IF ((RF2_IONCHAM.LT.RCYS2_IONCHAM(N_CHM_IONCHAM+N_
     *                TOP_IONCHAM,1))) THEN
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3+2*(N_TOP
     *                    _IONCHAM-1)
                      ELSE
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3+ 2*(N_TO
     *                    P_IONCHAM-1)+1
                      END IF
                  ELSE
                      IRNEW = IR(NP)-1
                  END IF
                  RETURN
              ELSE
                  RETURN
              END IF
          ELSE
              CUT_COE=CUTCOE_IONCHAM( R0SQ, RCYS2_IONCHAM(1,1) )
              IF (( CUT_COE.GT.0.0 .AND. CUT_COE.LE.USTEP )) THEN
                  IF ((CUT_COE+1.0E-5.LT. USTEP)) THEN
                      CUT_COE=CUT_COE+1.0E-5
                  END IF
                  USTEP=CUT_COE
                  IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM
              END IF
              RETURN
          END IF
      ELSE IF((IR_IONCHAM.LE.N_CHM_IONCHAM+3)) THEN
          IIR=IR_IONCHAM-N_CHM_IONCHAM
          IF ((W(NP) .GT. 0.0)) THEN
              DIST = (Z_IONCHAM(N_CHM_IONCHAM+1) - Z(NP))/W(NP)
              IF ((DIST.GT.USTEP)) THEN
                  STEP_UNIT=USTEP
                  IU_D=0
              ELSE
                  STEP_UNIT=DIST
                  IU_D=1
              END IF
              IF ((DIST .LE.0.0)) THEN
                  USTEP=0.0
                  IF (( N_BOT_IONCHAM.EQ.0 )) THEN
                      USTEP=1.E-16
                      CALL WHERE_AM_I(ICM_IONCHAM,1)
                  ELSE
                      IF ((R0SQ.LT. RCYS2_IONCHAM(N_CHM_IONCHAM+N_TOP_IO
     *                NCHAM+1,1))) THEN
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3+2*N_TOP_
     *                    IONCHAM
                      ELSE
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3+ 2*N_TOP
     *                    _IONCHAM+1
                      END IF
                  END IF
                  RETURN
              END IF
              CRITERIOR_IR=R0SQ-RCYS2_IONCHAM(1,IIR)
              IF ((CRITERIOR_IR.LT.0.0)) THEN
                  USTEP=MIN(USTEP, SHIFT_COUNT_IONCHAM(IR_IONCHAM))
                  IF ((IIR.EQ.1)) THEN
                      DO 12651 I=1,N_CHM_IONCHAM
                          IF (( Z(NP).LT.Z_IONCHAM(I+1) )) THEN
                              GO TO12652
                          END IF
12651                 CONTINUE
12652                 CONTINUE
                      I=MIN(I, N_CHM_IONCHAM)
                      IRNEW=IRSTART_IONCHAM+I-1
                  ELSE
                      IRNEW = IRL-1
                  END IF
                  RETURN
              END IF
              IF (( IIR.NE.3)) THEN
                  CRITERIOR_IR=R0SQ-RCYS2_IONCHAM(1,IIR+1)
                  IF ((CRITERIOR_IR.GT.0.0)) THEN
                      USTEP=MIN( USTEP, SHIFT_COUNT_IONCHAM(IR_IONCHAM)
     *                )
                      IRNEW=IRL+1
                      RETURN
                  END IF
              END IF
              CUT_COE=CUTCOE_IONCHAM(R0SQ, RCYS2_IONCHAM(1,IIR))
              IF (( ( CUT_COE.GT.0.0 .AND. CUT_COE .LT. STEP_UNIT ) .OR.
     *        ( CUT_COE.EQ.STEP_UNIT .AND. IU_D.EQ.0 ) )) THEN
                  IF ((CUT_COE+1.0E-5.LT. STEP_UNIT)) THEN
                      CUT_COE=CUT_COE+1.0E-5
                  END IF
                  USTEP=CUT_COE
                  IF ((IIR.EQ.1)) THEN
                      DO 12661 I=1,N_CHM_IONCHAM
                          IF (( Z(NP)+USTEP*W(NP).LT.Z_IONCHAM(I+1) )) T
     *                    HEN
                              GO TO12662
                          END IF
12661                 CONTINUE
12662                 CONTINUE
                      I=MIN(I, N_CHM_IONCHAM)
                      IRNEW = IRSTART_IONCHAM+I-1
                  ELSE
                      IRNEW=IRL-1
                  END IF
                  RETURN
              END IF
              IF ((CUT_COE.LE.0.0 .AND. IIR.NE.3)) THEN
                  CUT_COE=CUTCOE_IONCHAM(R0SQ, RCYS2_IONCHAM(1,IIR+1))
                  IF (( ( CUT_COE.GT.0.0 .AND. CUT_COE .LT. STEP_UNIT )
     *            .OR.( CUT_COE.EQ.STEP_UNIT .AND. IU_D.EQ.0 ) )) THEN
                      IF ((CUT_COE+1.0E-5.LT. STEP_UNIT)) THEN
                          CUT_COE=CUT_COE+1.0E-5
                      END IF
                      USTEP=CUT_COE
                      IRNEW=IR(NP)+1
                      RETURN
                  END IF
              END IF
              IF ((IU_D.EQ.1)) THEN
                  IF ((STEP_UNIT+1.0E-5.LT. USTEP)) THEN
                      STEP_UNIT=STEP_UNIT+1.0E-5
                  END IF
                  USTEP=STEP_UNIT
                  IF ((N_BOT_IONCHAM.EQ.0 )) THEN
                      CALL WHERE_AM_I(ICM_IONCHAM,1)
                  ELSE
                      RF2_IONCHAM= (X(NP)+USTEP*U(NP))**2 +(Y(NP)+USTEP*
     *                V(NP))**2
                      IF (( RF2_IONCHAM.LT. RCYS2_IONCHAM(N_CHM_IONCHAM+
     *                 N_TOP_IONCHAM+1,1) )) THEN
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3+2*N_TOP_
     *                    IONCHAM
                      ELSE
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3+ 2*N_TOP
     *                    _IONCHAM+1
                      END IF
                  END IF
                  RETURN
              ELSE
                  RETURN
              END IF
          ELSE IF((W(NP) .LT. 0.0)) THEN
              DIST = (Z_IONCHAM(1) - Z(NP))/W(NP)
              IF ((DIST.GT.USTEP)) THEN
                  STEP_UNIT=USTEP
                  IU_D=0
              ELSE
                  STEP_UNIT=DIST
                  IU_D=1
              END IF
              IF ((DIST .LE. 0.0)) THEN
                  USTEP=0.0
                  IF ((N_TOP_IONCHAM.EQ.0 )) THEN
                      IF ((N_GAP_IONCHAM .EQ. 1)) THEN
                          IRNEW =IREND_IONCHAM
                      ELSE
                          USTEP=1.E-16
                          CALL WHERE_AM_I(ICM_IONCHAM,-1)
                      END IF
                  ELSE
                      IF ((R0SQ.LT.RCYS2_IONCHAM(N_CHM_IONCHAM+N_TOP_ION
     *                CHAM,1) )) THEN
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3+2*(N_TOP
     *                    _IONCHAM-1)
                      ELSE
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3+ 2*(N_TO
     *                    P_IONCHAM-1)+1
                      END IF
                  END IF
                  RETURN
              END IF
              CRITERIOR_IR=R0SQ-RCYS2_IONCHAM(1,IIR)
              IF ((CRITERIOR_IR.LT.0.0)) THEN
                  USTEP=MIN( USTEP, SHIFT_COUNT_IONCHAM(IR_IONCHAM) )
                  IF ((IIR.EQ.1)) THEN
                      DO 12671 I=1,N_CHM_IONCHAM
                          IF ((Z(NP).LT.Z_IONCHAM(I+1))) THEN
                              GO TO12672
                          END IF
12671                 CONTINUE
12672                 CONTINUE
                      I=MIN(I, N_CHM_IONCHAM)
                      IRNEW=IRSTART_IONCHAM +I-1
                  ELSE
                      IRNEW=IRL-1
                  END IF
                  RETURN
              END IF
              IF (( IIR.NE.3)) THEN
                  CRITERIOR_IR=R0SQ-RCYS2_IONCHAM(1,IIR+1)
                  IF ((CRITERIOR_IR.GT.0.0)) THEN
                      USTEP=MIN(USTEP,SHIFT_COUNT_IONCHAM(IR_IONCHAM))
                      IRNEW=IRL+1
                      RETURN
                  END IF
              END IF
              CUT_COE=CUTCOE_IONCHAM(R0SQ, RCYS2_IONCHAM(1,IIR))
              IF (( ( CUT_COE.GT.0.0 .AND. CUT_COE .LT. STEP_UNIT ) .OR.
     *        ( CUT_COE.EQ.STEP_UNIT .AND. IU_D.EQ.0 ) )) THEN
                  IF ((CUT_COE+1.0E-5.LT. STEP_UNIT)) THEN
                      CUT_COE=CUT_COE+1.0E-5
                  END IF
                  USTEP=CUT_COE
                  IF ((IIR.EQ.1)) THEN
                      DO 12681 I=1,N_CHM_IONCHAM
                          IF (( Z(NP)+USTEP*W(NP).LT.Z_IONCHAM(I+1) )) T
     *                    HEN
                              GO TO12682
                          END IF
12681                 CONTINUE
12682                 CONTINUE
                      I=MIN(I, N_CHM_IONCHAM)
                      IRNEW=IRSTART_IONCHAM+I-1
                  ELSE
                      IRNEW=IRL-1
                  END IF
                  RETURN
              END IF
              IF ((CUT_COE.LE.0.0 .AND. IIR.NE.3)) THEN
                  CUT_COE=CUTCOE_IONCHAM( R0SQ, RCYS2_IONCHAM(1,IIR+1))
                  IF (( ( CUT_COE.GT.0.0 .AND. CUT_COE .LT. STEP_UNIT )
     *            .OR.( CUT_COE.EQ.STEP_UNIT .AND. IU_D.EQ.0 ) )) THEN
                      IF ((CUT_COE+1.0E-5.LT. STEP_UNIT)) THEN
                          CUT_COE=CUT_COE+1.0E-5
                      END IF
                      USTEP=CUT_COE
                      IRNEW=IRL+1
                      RETURN
                  END IF
              END IF
              IF ((IU_D.EQ.1)) THEN
                  IF ((STEP_UNIT+1.0E-5.LT. USTEP)) THEN
                      STEP_UNIT=STEP_UNIT+1.0E-5
                  END IF
                  USTEP=STEP_UNIT
                  IF ((N_TOP_IONCHAM.EQ.0 )) THEN
                      IF ((N_GAP_IONCHAM.EQ.0)) THEN
                          CALL WHERE_AM_I(ICM_IONCHAM,-1)
                      ELSE
                          IRNEW=IREND_IONCHAM
                      END IF
                  ELSE
                      RF2_IONCHAM= (X(NP)+USTEP*U(NP))**2 +(Y(NP)+USTEP*
     *                V(NP))**2
                      IF ((RF2_IONCHAM.LT.RCYS2_IONCHAM(N_CHM_IONCHAM+N_
     *                TOP_IONCHAM,1))) THEN
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3+ 2*(N_TO
     *                    P_IONCHAM-1)
                      ELSE
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3+ 2*(N_TO
     *                    P_IONCHAM-1)+1
                      END IF
                  END IF
                  RETURN
              ELSE
                  RETURN
              END IF
          ELSE
              CUT_COE=CUTCOE_IONCHAM( R0SQ, RCYS2_IONCHAM(1,IIR))
              IF (( CUT_COE.GT.0.0 .AND. CUT_COE .LE. USTEP )) THEN
                  IF ((CUT_COE+1.0E-5.LT. USTEP)) THEN
                      CUT_COE=CUT_COE+1.0E-5
                  END IF
                  USTEP=CUT_COE
                  IF ((IIR.EQ.1)) THEN
                      DO 12691 I=1,N_CHM_IONCHAM
                          IF (( Z(NP)+USTEP*W(NP).LT.Z_IONCHAM(I+1) )) T
     *                    HEN
                              GO TO12692
                          END IF
12691                 CONTINUE
12692                 CONTINUE
                      I=MIN(I, N_CHM_IONCHAM)
                      IRNEW=IRSTART_IONCHAM+I-1
                  ELSE
                      IRNEW=IRL-1
                  END IF
              END IF
              IF ((CUT_COE.LE.0.0 .AND. IIR.NE.3)) THEN
                  CUT_COE=CUTCOE_IONCHAM( R0SQ, RCYS2_IONCHAM(1,IIR+1))
                  IF (( CUT_COE.GT.0.0 .AND. CUT_COE .LE. USTEP )) THEN
                      IF ((CUT_COE+1.0E-5.LT. USTEP)) THEN
                          CUT_COE=CUT_COE+1.0E-5
                      END IF
                      USTEP=CUT_COE
                      IRNEW=IRL+1
                  END IF
              END IF
              RETURN
          END IF
      ELSE IF((IR_IONCHAM.LE.N_CHM_IONCHAM+3+2*N_TOP_IONCHAM )) THEN
          IIR=IR_IONCHAM-(N_CHM_IONCHAM+3)
          IIR=MOD(IIR, 2)
          IF ((W(NP) .GT. 0.0)) THEN
              DIST = (Z_IONCHAM(LAYER+1) - Z(NP))/W(NP)
              IF ((DIST.GT.USTEP)) THEN
                  STEP_UNIT=USTEP
                  IU_D=0
              ELSE
                  STEP_UNIT=DIST
                  IU_D=1
              END IF
              IF ((DIST .LE.0.0)) THEN
                  USTEP=0.0
                  IF ((LAYER.EQ.N_CHM_IONCHAM+N_TOP_IONCHAM )) THEN
                      IF (( R0SQ.LT.RCYS2_IONCHAM(1,1) )) THEN
                          IRNEW =IRSTART_IONCHAM
                      ELSE IF(( R0SQ.LT.RCYS2_IONCHAM(1,2) )) THEN
                          IRNEW =IRSTART_IONCHAM+N_CHM_IONCHAM
                      ELSE IF(( R0SQ.LT.RCYS2_IONCHAM(1,3) )) THEN
                          IRNEW =IRSTART_IONCHAM+N_CHM_IONCHAM+1
                      ELSE
                          IRNEW =IRSTART_IONCHAM+N_CHM_IONCHAM+2
                      END IF
                  ELSE
                      IF (( R0SQ.LT. RCYS2_IONCHAM(LAYER+1,1) )) THEN
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3 +2*(LAYE
     *                    R-N_CHM_IONCHAM)
                      ELSE
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3 +2*(LAYE
     *                    R-N_CHM_IONCHAM)+1
                      END IF
                  END IF
                  RETURN
              END IF
              CRITERIOR_IR=R0SQ-RCYS2_IONCHAM(LAYER, 1)
              IF ((CRITERIOR_IR.GT.0.0 .AND. IIR.EQ.1)) THEN
                  USTEP=MIN( USTEP, SHIFT_COUNT_IONCHAM(IR_IONCHAM) )
                  IRNEW=IRL+1
                  RETURN
              ELSE IF((CRITERIOR_IR.LT.0.0 .AND. IIR.EQ.0)) THEN
                  USTEP=MIN( USTEP, SHIFT_COUNT_IONCHAM(IR_IONCHAM) )
                  IRNEW=IRL-1
                  RETURN
              END IF
              RF2_IONCHAM=(X(NP)+STEP_UNIT*U(NP))**2 +(Y(NP)+STEP_UNIT*V
     *        (NP))**2
              IF (( ( RF2_IONCHAM .GT. RCYS2_IONCHAM(LAYER,1) .AND. IIR.
     *        EQ.1 ) .OR. IIR.EQ.0 )) THEN
                  CUT_COE=CUTCOE_IONCHAM( R0SQ, RCYS2_IONCHAM(LAYER,1))
              END IF
              IF (( ( CUT_COE.GT.0.0 .AND. CUT_COE .LT. STEP_UNIT ) .OR.
     *        ( CUT_COE.EQ.STEP_UNIT .AND. IU_D.EQ.0 ) )) THEN
                  IF ((CUT_COE+1.0E-5.LT. STEP_UNIT)) THEN
                      CUT_COE=CUT_COE+1.0E-5
                  END IF
                  USTEP=CUT_COE
                  IF ((IIR.EQ.1)) THEN
                      IRNEW=IRL+1
                  ELSE
                      IRNEW=IRL-1
                  END IF
                  RETURN
              ELSE IF((IU_D.EQ.1)) THEN
                  IF ((STEP_UNIT+1.0E-5.LT. USTEP)) THEN
                      STEP_UNIT=STEP_UNIT+1.0E-5
                  END IF
                  USTEP=STEP_UNIT
                  RF2_IONCHAM= (X(NP)+USTEP*U(NP))**2 +(Y(NP)+USTEP*V(NP
     *            ))**2
                  IF ((LAYER.EQ.N_CHM_IONCHAM+N_TOP_IONCHAM)) THEN
                      IF (( RF2_IONCHAM.LT. RCYS2_IONCHAM(1,1) )) THEN
                          IRNEW=IRSTART_IONCHAM
                      ELSE IF(( RF2_IONCHAM.LT. RCYS2_IONCHAM(1,2) )) TH
     *                EN
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM
                      ELSE IF(( RF2_IONCHAM.LT. RCYS2_IONCHAM(1,3) )) TH
     *                EN
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+1
                      ELSE
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+2
                      END IF
                  ELSE
                      IF (( RF2_IONCHAM.LT. RCYS2_IONCHAM(LAYER+1,1) ))
     *                THEN
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3 +2*(LAYE
     *                    R-N_CHM_IONCHAM)
                      ELSE
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3 +2*(LAYE
     *                    R-N_CHM_IONCHAM)+1
                      END IF
                  END IF
                  RETURN
              ELSE
                  RETURN
              END IF
          ELSE IF((W(NP) .LT. 0.0)) THEN
              IF ((LAYER.EQ.N_CHM_IONCHAM+1)) THEN
                  DIST=( ZMIN_IONCHAM-Z(NP) )/W(NP)
              ELSE
                  DIST = (Z_IONCHAM(LAYER) - Z(NP))/W(NP)
              END IF
              IF ((DIST.GT.USTEP)) THEN
                  STEP_UNIT=USTEP
                  IU_D=0
              ELSE
                  STEP_UNIT=DIST
                  IU_D=1
              END IF
              IF ((DIST .LE. 0.0)) THEN
                  USTEP=0.0
                  IF ((LAYER.EQ.N_CHM_IONCHAM +1)) THEN
                      IF ((N_GAP_IONCHAM .EQ. 1)) THEN
                          IRNEW =IREND_IONCHAM
                      ELSE
                          USTEP=1.E-16
                          CALL WHERE_AM_I(ICM_IONCHAM,-1)
                      END IF
                  ELSE
                      IF ((R0SQ.LT.RCYS2_IONCHAM(LAYER-1,1) )) THEN
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3 +2*(LAYE
     *                    R-2-N_CHM_IONCHAM)
                      ELSE
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3 +2*(LAYE
     *                    R-2-N_CHM_IONCHAM)+1
                      END IF
                  END IF
                  RETURN
              END IF
              CRITERIOR_IR=R0SQ-RCYS2_IONCHAM(LAYER, 1)
              IF ((CRITERIOR_IR.GT.0.0 .AND. IIR.EQ.1)) THEN
                  USTEP=MIN( USTEP, SHIFT_COUNT_IONCHAM(IR_IONCHAM) )
                  IRNEW=IRL+1
                  RETURN
              ELSE IF((CRITERIOR_IR.LT.0.0 .AND. IIR.EQ.0)) THEN
                  USTEP=MIN( USTEP, SHIFT_COUNT_IONCHAM(IR_IONCHAM) )
                  IRNEW=IRL-1
                  RETURN
              END IF
              RF2_IONCHAM=(X(NP)+STEP_UNIT*U(NP))**2 +(Y(NP)+STEP_UNIT*V
     *        (NP))**2
              IF (( ( RF2_IONCHAM .GT. RCYS2_IONCHAM(LAYER,1) .AND. IIR.
     *        EQ.1 ) .OR. IIR.EQ.0 )) THEN
                  CUT_COE=CUTCOE_IONCHAM(R0SQ, RCYS2_IONCHAM(LAYER,1))
              END IF
              IF (( ( CUT_COE.GT.0.0 .AND. CUT_COE .LT. STEP_UNIT ) .OR.
     *        ( CUT_COE.EQ.STEP_UNIT .AND. IU_D.EQ.0 ) )) THEN
                  IF ((CUT_COE+1.0E-5.LT. STEP_UNIT)) THEN
                      CUT_COE=CUT_COE+1.0E-5
                  END IF
                  USTEP=CUT_COE
                  IF ((IIR.EQ.1)) THEN
                      IRNEW=IRL+1
                  ELSE
                      IRNEW=IRL-1
                  END IF
                  RETURN
              ELSE IF((IU_D.EQ.1)) THEN
                  IF ((STEP_UNIT+1.0E-5.LT. USTEP)) THEN
                      STEP_UNIT=STEP_UNIT+1.0E-5
                  END IF
                  USTEP=STEP_UNIT
                  RF2_IONCHAM= (X(NP)+USTEP*U(NP))**2 +(Y(NP)+USTEP*V(NP
     *            ))**2
                  IF ((LAYER.EQ.N_CHM_IONCHAM+1)) THEN
                      IF (( N_GAP_IONCHAM.EQ.1 )) THEN
                          IRNEW=IREND_IONCHAM
                      ELSE
                          CALL WHERE_AM_I(ICM_IONCHAM, -1)
                      END IF
                  ELSE
                      IF (( RF2_IONCHAM.LT. RCYS2_IONCHAM(LAYER-1,1) ))
     *                THEN
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3 +2*(LAYE
     *                    R-N_CHM_IONCHAM-2)
                      ELSE
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3 +2*(LAYE
     *                    R-N_CHM_IONCHAM-2)+1
                      END IF
                  END IF
                  RETURN
              ELSE
                  RETURN
              END IF
          ELSE
              CUT_COE=CUTCOE_IONCHAM(R0SQ, RCYS2_IONCHAM(LAYER,1))
              IF (( CUT_COE.GT.0.0 .AND. CUT_COE .LE. USTEP )) THEN
                  IF ((CUT_COE+1.0E-5.LT. USTEP)) THEN
                      CUT_COE=CUT_COE+1.0E-5
                  END IF
                  USTEP=CUT_COE
                  IF ((IIR.EQ.1)) THEN
                      IRNEW=IRL+1
                  ELSE
                      IRNEW=IRL-1
                  END IF
              END IF
              RETURN
          END IF
      ELSE IF((IR_IONCHAM.LE.N_CHM_IONCHAM+3+2*N_TOP_IONCHAM+2*N_BOT_ION
     *CHAM )) THEN
          IIR=IR_IONCHAM-(N_CHM_IONCHAM+3)
          IIR=MOD(IIR, 2)
          IF ((W(NP) .GT. 0.0)) THEN
              DIST = (Z_IONCHAM(LAYER+1) - Z(NP))/W(NP)
              IF ((DIST.GT.USTEP)) THEN
                  STEP_UNIT=USTEP
                  IU_D=0
              ELSE
                  STEP_UNIT=DIST
                  IU_D=1
              END IF
              IF ((DIST .LE.0.0)) THEN
                  USTEP=0.0
                  IF ((LAYER.EQ.N_CHM_IONCHAM+N_TOP_IONCHAM+N_BOT_IONCHA
     *            M)) THEN
                      USTEP=1.E-16
                      CALL WHERE_AM_I(ICM_IONCHAM, 1)
                  ELSE
                      IF (( R0SQ.LT. RCYS2_IONCHAM(LAYER+1,1) )) THEN
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3 +2*(LAYE
     *                    R-N_CHM_IONCHAM)
                      ELSE
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3 +2*(LAYE
     *                    R-N_CHM_IONCHAM)+1
                      END IF
                  END IF
                  RETURN
              END IF
              CRITERIOR_IR=R0SQ-RCYS2_IONCHAM(LAYER, 1)
              IF ((CRITERIOR_IR.GT.0.0 .AND. IIR.EQ.1)) THEN
                  USTEP=MIN( USTEP, SHIFT_COUNT_IONCHAM(IR_IONCHAM) )
                  IRNEW=IRL+1
                  RETURN
              ELSE IF((CRITERIOR_IR.LT.0.0 .AND. IIR.EQ.0)) THEN
                  USTEP=MIN( USTEP, SHIFT_COUNT_IONCHAM(IR_IONCHAM) )
                  IRNEW=IRL-1
                  RETURN
              END IF
              RF2_IONCHAM=(X(NP)+STEP_UNIT*U(NP))**2 +(Y(NP)+STEP_UNIT*V
     *        (NP))**2
              IF (( ( RF2_IONCHAM .GT. RCYS2_IONCHAM(LAYER,1) .AND. IIR.
     *        EQ.1 ) .OR. IIR.EQ.0 )) THEN
                  CUT_COE=CUTCOE_IONCHAM( R0SQ, RCYS2_IONCHAM(LAYER,1))
              END IF
              IF (( ( CUT_COE.GT.0.0 .AND. CUT_COE .LT. STEP_UNIT ) .OR.
     *        ( CUT_COE.EQ.STEP_UNIT .AND. IU_D.EQ.0 ) )) THEN
                  IF ((CUT_COE+1.0E-5.LT. STEP_UNIT)) THEN
                      CUT_COE=CUT_COE+1.0E-5
                  END IF
                  USTEP=CUT_COE
                  IF ((IIR.EQ.1)) THEN
                      IRNEW=IRL+1
                  ELSE
                      IRNEW=IRL-1
                  END IF
                  RETURN
              ELSE IF((IU_D.EQ.1)) THEN
                  IF ((STEP_UNIT+1.0E-5.LT. USTEP)) THEN
                      STEP_UNIT=STEP_UNIT+1.0E-5
                  END IF
                  USTEP=STEP_UNIT
                  RF2_IONCHAM= (X(NP)+USTEP*U(NP))**2 +(Y(NP)+USTEP*V(NP
     *            ))**2
                  IF ((LAYER.EQ.N_CHM_IONCHAM+N_TOP_IONCHAM+N_BOT_IONCHA
     *            M )) THEN
                      CALL WHERE_AM_I(ICM_IONCHAM, 1)
                  ELSE
                      IF (( RF2_IONCHAM.LT. RCYS2_IONCHAM(LAYER+1,1) ))
     *                THEN
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3 +2*(LAYE
     *                    R-N_CHM_IONCHAM)
                      ELSE
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3 +2*(LAYE
     *                    R-N_CHM_IONCHAM)+1
                      END IF
                  END IF
                  RETURN
              ELSE
                  RETURN
              END IF
          ELSE IF((W(NP) .LT. 0.0)) THEN
              IF ((LAYER.EQ.N_CHM_IONCHAM+N_TOP_IONCHAM+1)) THEN
                  DIST=( Z_IONCHAM(N_CHM_IONCHAM+1)-Z(NP) )/W(NP)
              ELSE
                  DIST = (Z_IONCHAM(LAYER-1+1) - Z(NP))/W(NP)
              END IF
              IF ((DIST.GT.USTEP)) THEN
                  STEP_UNIT=USTEP
                  IU_D=0
              ELSE
                  STEP_UNIT=DIST
                  IU_D=1
              END IF
              IF ((DIST .LE. 0.0)) THEN
                  USTEP=0.0
                  IF (( LAYER.EQ.N_CHM_IONCHAM+N_TOP_IONCHAM+1 )) THEN
                      IF (( R0SQ.LT.RCYS2_IONCHAM(1,1) )) THEN
                          IRNEW =IRSTART_IONCHAM+N_CHM_IONCHAM-1
                      ELSE IF(( R0SQ.LT.RCYS2_IONCHAM(1,2) )) THEN
                          IRNEW =IRSTART_IONCHAM+N_CHM_IONCHAM
                      ELSE IF(( R0SQ.LT.RCYS2_IONCHAM(1,3) )) THEN
                          IRNEW =IRSTART_IONCHAM+N_CHM_IONCHAM+1
                      ELSE
                          IRNEW =IRSTART_IONCHAM+N_CHM_IONCHAM+2
                      END IF
                  ELSE
                      IF ((R0SQ.LT.RCYS2_IONCHAM(LAYER-1,1) )) THEN
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3 +2*(LAYE
     *                    R-2-N_CHM_IONCHAM)
                      ELSE
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3 +2*(LAYE
     *                    R-2-N_CHM_IONCHAM)+1
                      END IF
                  END IF
                  RETURN
              END IF
              CRITERIOR_IR=R0SQ-RCYS2_IONCHAM(LAYER, 1)
              IF ((CRITERIOR_IR.GT.0.0 .AND. IIR.EQ.1)) THEN
                  USTEP=MIN( USTEP, SHIFT_COUNT_IONCHAM(IR_IONCHAM) )
                  IRNEW=IRL+1
                  RETURN
              ELSE IF((CRITERIOR_IR.LT.0.0 .AND. IIR.EQ.0)) THEN
                  USTEP=MIN( USTEP, SHIFT_COUNT_IONCHAM(IR_IONCHAM) )
                  IRNEW=IRL-1
                  RETURN
              END IF
              RF2_IONCHAM=(X(NP)+STEP_UNIT*U(NP))**2 +(Y(NP)+STEP_UNIT*V
     *        (NP))**2
              IF (( ( RF2_IONCHAM .GT. RCYS2_IONCHAM(LAYER,1) .AND. IIR.
     *        EQ.1 ) .OR. IIR.EQ.0 )) THEN
                  CUT_COE=CUTCOE_IONCHAM( R0SQ, RCYS2_IONCHAM(LAYER,1))
              END IF
              IF (( ( CUT_COE.GT.0.0 .AND. CUT_COE .LT. STEP_UNIT ) .OR.
     *        ( CUT_COE.EQ.STEP_UNIT .AND. IU_D.EQ.0 ) )) THEN
                  IF ((CUT_COE+1.0E-5.LT. STEP_UNIT)) THEN
                      CUT_COE=CUT_COE+1.0E-5
                  END IF
                  USTEP=CUT_COE
                  IF ((IIR.EQ.1)) THEN
                      IRNEW=IRL+1
                  ELSE
                      IRNEW=IRL-1
                  END IF
                  RETURN
              ELSE IF((IU_D.EQ.1)) THEN
                  IF ((STEP_UNIT+1.0E-5.LT. USTEP)) THEN
                      STEP_UNIT=STEP_UNIT+1.0E-5
                  END IF
                  USTEP=STEP_UNIT
                  RF2_IONCHAM= (X(NP)+USTEP*U(NP))**2 +(Y(NP)+USTEP*V(NP
     *            ))**2
                  IF ((LAYER.EQ.N_CHM_IONCHAM+N_TOP_IONCHAM+1)) THEN
                      IF (( RF2_IONCHAM.LT.RCYS2_IONCHAM(1,1) )) THEN
                          IRNEW =IRSTART_IONCHAM+N_CHM_IONCHAM-1
                      ELSE IF(( RF2_IONCHAM.LT.RCYS2_IONCHAM(1,2) )) THE
     *                N
                          IRNEW =IRSTART_IONCHAM+N_CHM_IONCHAM
                      ELSE IF(( RF2_IONCHAM.LT.RCYS2_IONCHAM(1,3) )) THE
     *                N
                          IRNEW =IRSTART_IONCHAM+N_CHM_IONCHAM+1
                      ELSE
                          IRNEW =IRSTART_IONCHAM+N_CHM_IONCHAM+2
                      END IF
                  ELSE
                      IF (( RF2_IONCHAM.LT. RCYS2_IONCHAM(LAYER-1,1))) T
     *                HEN
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3 +2*(LAYE
     *                    R-N_CHM_IONCHAM-2)
                      ELSE
                          IRNEW=IRSTART_IONCHAM+N_CHM_IONCHAM+3 +2*(LAYE
     *                    R-N_CHM_IONCHAM-2)+1
                      END IF
                  END IF
                  RETURN
              ELSE
                  RETURN
              END IF
          ELSE
              CUT_COE=CUTCOE_IONCHAM( R0SQ, RCYS2_IONCHAM(LAYER,1))
              IF (( CUT_COE.GT.0.0 .AND. CUT_COE .LE. USTEP )) THEN
                  IF ((CUT_COE+1.0E-5.LT. USTEP)) THEN
                      CUT_COE=CUT_COE+1.0E-5
                  END IF
                  USTEP=CUT_COE
                  IF ((IIR.EQ.1)) THEN
                      IRNEW=IRL+1
                  ELSE
                      IRNEW=IRL-1
                  END IF
              END IF
              RETURN
          END IF
      ELSE
          WRITE(6,12700)IR(NP)-IRSTART_IONCHAM+1,IR(NP),ICM_IONCHAM, IR_
     *    start_CM(ICM_IONCHAM)
12700     FORMAT(//' ************'//' HOWFAR-CHAMBER error'/ '    Region
     *, local, absolute =',2I5/ '    CM number=',I5,' start region =',I5
     */ ' *********'//)
          STOP
      END IF
      END
      real*8 FUNCTION SHIFT_COUNT_IONCHAM(IDUMP)
      IMPLICIT NONE
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/CM_IONCHAM/ Z_IONCHAM, ZFRONT_IONCHAM, ZBACK_IONCHAM, ZMIN_
     *IONCHAM, ZMAX_IONCHAM, RCYS_IONCHAM, RCYS2_IONCHAM, TITLE_IONCHAM,
     * ICM_IONCHAM,IRSTART_IONCHAM,IREND_IONCHAM, N_IONCHAM,N_GAP_IONCHA
     *M, N_CHM_IONCHAM, N_TOP_IONCHAM, N_BOT_IONCHAM, IR_IONCHAM
      INTEGER ICM_IONCHAM,IRSTART_IONCHAM,IREND_IONCHAM, N_IONCHAM ,N_GA
     *P_IONCHAM, N_CHM_IONCHAM, N_TOP_IONCHAM, N_BOT_IONCHAM, IR_IONCHAM
      real*8 ZFRONT_IONCHAM, ZBACK_IONCHAM, ZMIN_IONCHAM, ZMAX_IONCHAM,
     *RCYS_IONCHAM(200,3), RCYS2_IONCHAM(200,3)
      REAL*8 Z_IONCHAM(1:200+1)
      CHARACTER*1 TITLE_IONCHAM(60)
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer*8 IHSTRYOLD
      INTEGER IDUMP, COUNT1, COUNT
      real*8 XYZNEW,XYZOLD,xyzoldsave
      save xyzold,count1,count
      DATA count1,count/0,0/
      XYZNEW=X(NP)+Y(NP)+Z(NP)
      IF (( XYZNEW.NE.XYZOLD.OR.IHSTRY.NE.IHSTRYOLD)) THEN
          COUNT1=0
      ELSE
          COUNT1=COUNT1+1
          IF (( COUNT1.EQ.20 )) THEN
              WRITE(6,12710)IDUMP,X(NP),Y(NP),X(NP)**2+Y(NP)**2,Z(NP),U(
     *        NP), V(NP),W(NP),E(NP),IQ(NP)
12710         FORMAT(/' WARNING FROM CHAMBER REGION ', I5,': TAKEN USTEP
     * = 1.0E-5 ', ' FOR 20 TIMES, STILL CANNOT FIND ITS REGION'/ ' THEP
     *ARTICLE HAS BEEN DISCARDED.'/ ' OUTPUT: x,y,r**2,z,u,v,w,E,IQ '/8F
     *11.6,I3)
              IDISC=1
              COUNT1=0
              SHIFT_COUNT_IONCHAM=0.0
              COUNT=COUNT+1
              IF (( COUNT .GT.10000 )) THEN
                  WRITE(6,12720)
12720             FORMAT(//' ChAMBER: 10000 PARTICLES HAVE BEEN DISCARDE
     *D DUE TO'/ ' WRONG REGION #/BOUNDARY CROSSING ERROR. STOP!!!'//)
                  STOP
              END IF
          END IF
      END IF
      XYZOLD=XYZNEW
      IHSTRYOLD=IHSTRY
      SHIFT_COUNT_IONCHAM=1.0E-5
      RETURN
      END
      SUBROUTINE WARN_MES_IONCHAM(IDUMP, DUMP1, DUMP2)
      IMPLICIT NONE
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      INTEGER IDUMP, COUNT
      real*8 DUMP1, DUMP2
      WRITE(6,12730)IDUMP, DUMP1, DUMP2
12730 FORMAT(/' WARNING MESSAGE: ' , I5, 2F15.8)
      COUNT=COUNT+1
      RETURN
      END
      real*8 FUNCTION CUTCOE_IONCHAM( DUMP1, DUMP2 )
      IMPLICIT NONE
      real*8 DUMP1, DUMP2
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/CM_IONCHAM/ Z_IONCHAM, ZFRONT_IONCHAM, ZBACK_IONCHAM, ZMIN_
     *IONCHAM, ZMAX_IONCHAM, RCYS_IONCHAM, RCYS2_IONCHAM, TITLE_IONCHAM,
     * ICM_IONCHAM,IRSTART_IONCHAM,IREND_IONCHAM, N_IONCHAM,N_GAP_IONCHA
     *M, N_CHM_IONCHAM, N_TOP_IONCHAM, N_BOT_IONCHAM, IR_IONCHAM
      INTEGER ICM_IONCHAM,IRSTART_IONCHAM,IREND_IONCHAM, N_IONCHAM ,N_GA
     *P_IONCHAM, N_CHM_IONCHAM, N_TOP_IONCHAM, N_BOT_IONCHAM, IR_IONCHAM
      real*8 ZFRONT_IONCHAM, ZBACK_IONCHAM, ZMIN_IONCHAM, ZMAX_IONCHAM,
     *RCYS_IONCHAM(200,3), RCYS2_IONCHAM(200,3)
      REAL*8 Z_IONCHAM(1:200+1)
      CHARACTER*1 TITLE_IONCHAM(60)
      real*8 A, B, B2, C, TEMP, CUT_COE1, CUT_COE2,one
      parameter (one=1)
      A=U(NP)**2+V(NP)**2
      B=X(NP)*U(NP)+Y(NP)*V(NP)
      B2=B**2
      C=DUMP1-DUMP2
      IF ((A.EQ.0.0)) THEN
          IF ((B.NE.0.0)) THEN
              CUTCOE_IONCHAM=-0.5*C/B
          ELSE
              CUTCOE_IONCHAM=-1.0E5
          END IF
      ELSE
          TEMP=B2-A*C
          IF ((TEMP.GE.0.0)) THEN
              TEMP=-(B+SIGN(one,B)*SQRT(TEMP) )
              CUT_COE1=TEMP/A
              CUT_COE2=C/TEMP
              IF (( CUT_COE1.GT.0.0 .AND. CUT_COE2.GT.0.0)) THEN
                  CUTCOE_IONCHAM=MIN(CUT_COE1,CUT_COE2)
              ELSE
                  CUTCOE_IONCHAM=MAX(CUT_COE1,CUT_COE2)
              END IF
          ELSE
              CUTCOE_IONCHAM=-1.0E5
          END IF
      END IF
      RETURN
      END
      SUBROUTINE WHERE_AM_I_IONCHAM(IDIR)
      IMPLICIT NONE
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/CM_IONCHAM/ Z_IONCHAM, ZFRONT_IONCHAM, ZBACK_IONCHAM, ZMIN_
     *IONCHAM, ZMAX_IONCHAM, RCYS_IONCHAM, RCYS2_IONCHAM, TITLE_IONCHAM,
     * ICM_IONCHAM,IRSTART_IONCHAM,IREND_IONCHAM, N_IONCHAM,N_GAP_IONCHA
     *M, N_CHM_IONCHAM, N_TOP_IONCHAM, N_BOT_IONCHAM, IR_IONCHAM
      INTEGER ICM_IONCHAM,IRSTART_IONCHAM,IREND_IONCHAM, N_IONCHAM ,N_GA
     *P_IONCHAM, N_CHM_IONCHAM, N_TOP_IONCHAM, N_BOT_IONCHAM, IR_IONCHAM
      real*8 ZFRONT_IONCHAM, ZBACK_IONCHAM, ZMIN_IONCHAM, ZMAX_IONCHAM,
     *RCYS_IONCHAM(200,3), RCYS2_IONCHAM(200,3)
      REAL*8 Z_IONCHAM(1:200+1)
      CHARACTER*1 TITLE_IONCHAM(60)
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      INTEGER IDIR
      real*8 XBDY_IONCHAM,YBDY_IONCHAM,RBDY2_IONCHAM
      XBDY_IONCHAM = X(NP) + U(NP)*USTEP
      YBDY_IONCHAM = Y(NP) + V(NP)*USTEP
      RBDY2_IONCHAM = XBDY_IONCHAM*XBDY_IONCHAM + YBDY_IONCHAM*YBDY_IONC
     *HAM
      IF (((IRSTART_IONCHAM .EQ. 2) .AND. (IDIR .EQ.1))) THEN
          RBDY2_IONCHAM = X(NP)*X(NP) + Y(NP)*Y(NP)
      END IF
      IF ((IDIR.EQ.1)) THEN
          IF ((N_GAP_IONCHAM .EQ. 0)) THEN
              IF ((N_TOP_IONCHAM.EQ.0)) THEN
                  IF ((RBDY2_IONCHAM .LT. RCYS2_IONCHAM(1,1))) THEN
                      IRNEW = IRSTART_IONCHAM
                  ELSE IF((RBDY2_IONCHAM .LT. RCYS2_IONCHAM(1, 2))) THEN
                      IRNEW = IRSTART_IONCHAM + N_CHM_IONCHAM
                  ELSE IF((RBDY2_IONCHAM .LT. RCYS2_IONCHAM(1, 3))) THEN
                      IRNEW = IRSTART_IONCHAM + N_CHM_IONCHAM+1
                  ELSE
                      IRNEW = IRSTART_IONCHAM +N_CHM_IONCHAM+2
                  END IF
              ELSE
                  IF ((RBDY2_IONCHAM .LT. RCYS2_IONCHAM(N_CHM_IONCHAM+1,
     *            1))) THEN
                      IRNEW = IRSTART_IONCHAM + N_CHM_IONCHAM +3
                  ELSE
                      IRNEW = IRSTART_IONCHAM + N_CHM_IONCHAM +3 +1
                  END IF
              END IF
          ELSE
              IRNEW = IREND_IONCHAM
          END IF
      ELSE
          IF (( N_BOT_IONCHAM.EQ.0 )) THEN
              IF ((RBDY2_IONCHAM .LT. RCYS2_IONCHAM(1,1))) THEN
                  IRNEW = IRSTART_IONCHAM-1+N_CHM_IONCHAM
              ELSE IF((RBDY2_IONCHAM .LT. RCYS2_IONCHAM(1, 2))) THEN
                  IRNEW = IRSTART_IONCHAM+N_CHM_IONCHAM
              ELSE IF((RBDY2_IONCHAM .LT. RCYS2_IONCHAM(1, 3))) THEN
                  IRNEW = IRSTART_IONCHAM +N_CHM_IONCHAM+ 1
              ELSE
                  IRNEW = IRSTART_IONCHAM+N_CHM_IONCHAM + 2
              END IF
          ELSE
              IF ((RBDY2_IONCHAM .LT. RCYS2_IONCHAM(N_CHM_IONCHAM+N_TOP_
     *        IONCHAM+N_BOT_IONCHAM,1))) THEN
                  IRNEW = IREND_IONCHAM-N_GAP_IONCHAM-1
              ELSE
                  IRNEW =IREND_IONCHAM-N_GAP_IONCHAM
              END IF
          END IF
      END IF
      RETURN
      END
      SUBROUTINE INPUT_IONCHAM
      IMPLICIT NONE
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/CM_IONCHAM/ Z_IONCHAM, ZFRONT_IONCHAM, ZBACK_IONCHAM, ZMIN_
     *IONCHAM, ZMAX_IONCHAM, RCYS_IONCHAM, RCYS2_IONCHAM, TITLE_IONCHAM,
     * ICM_IONCHAM,IRSTART_IONCHAM,IREND_IONCHAM, N_IONCHAM,N_GAP_IONCHA
     *M, N_CHM_IONCHAM, N_TOP_IONCHAM, N_BOT_IONCHAM, IR_IONCHAM
      INTEGER ICM_IONCHAM,IRSTART_IONCHAM,IREND_IONCHAM, N_IONCHAM ,N_GA
     *P_IONCHAM, N_CHM_IONCHAM, N_TOP_IONCHAM, N_BOT_IONCHAM, IR_IONCHAM
      real*8 ZFRONT_IONCHAM, ZBACK_IONCHAM, ZMIN_IONCHAM, ZMAX_IONCHAM,
     *RCYS_IONCHAM(200,3), RCYS2_IONCHAM(200,3)
      REAL*8 Z_IONCHAM(1:200+1)
      CHARACTER*1 TITLE_IONCHAM(60)
      COMMON/GEOM/ NREG
      INTEGER NREG
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 ZTHICK_IONCHAM,  ZTHICK,  THICK1, THICK2, THICK3,  Zminthic
     *k,  RCYSTEMP(200),  ZTEMP(200),  ECUTTEMP(3000),  PCUTTEMP(3000)
      INTEGER I,IM,J,JM, II, III,  MRNGE,   IRA,  MED_FLAG,  MED_INDEX,
     * N_CHAM,  DOSE_ZONETEMP(3000),  IREGION_TO_BITTEMP(3000),  MEDTEMP
     *(3000),  IRM
      ICM_IONCHAM = ICM
      IRSTART_IONCHAM = IR_start_CM(ICM_IONCHAM)
      IERR_GEOM(ICM_IONCHAM) = 0
      DO 12741 I=1,NDOSE_ZONE
          ZPLOTCHM(I)=-1000.
12741 CONTINUE
12742 CONTINUE
      WRITE(6,12750)
12750 FORMAT(/' IONCHAM  (CHAMBER)')
      WRITE(6,12760)RMAX_CM(ICM)
12760 FORMAT(/' This component is an ion chamber or for scoring dose com
     *ponents'/ '       Outer boundary is a cylinder of radius',F10.4,'c
     *m' //' TITLE: ',$)
      READ(i_input,12770,END=12780,ERR=12790)TITLE_IONCHAM
12770 FORMAT(60A1)
      WRITE(6,12800)TITLE_IONCHAM
12800 FORMAT(' ',60A1)
      IF ((ICM_IONCHAM .EQ. 1)) THEN
          WRITE(6,12810)Z_min_CM(1)
12810     FORMAT(' This is first component module -- starts at',F12.4, '
     * cm from ref plane(z=0)')
      ELSE
          WRITE(6,12820)Z_min_CM(ICM_IONCHAM)
12820     FORMAT(' This CM, including air gap, starts at end of previous
     * CM at', F10.5, ' cm')
      END IF
      WRITE(6,12830)
12830 FORMAT(/' Distance from front of IONCHAM(not air gap) to ref plane
     *(z=0):',$)
      READ(i_input,12840,END=12780,ERR=12790)ZMIN_IONCHAM
12840 FORMAT(F15.0)
      WRITE(6,12850)ZMIN_IONCHAM
12850 FORMAT(F11.5)
      IF ((ZMIN_IONCHAM .LT. Z_min_CM(ICM_IONCHAM))) THEN
          IF ((ICM_IONCHAM.EQ.1)) THEN
              WRITE(6,12860)ICM_IONCHAM, ZMIN_IONCHAM,Z_min_CM(ICM_IONCH
     *        AM)
12860         FORMAT(//' ***WARNING IN CM ',I4,' (CHAMBER):'/ ' Z_min_CM
     *(1) > distance to top of chamber'/ ' Z_min_CM(1) reset to ',F8.5,'
     * cm from ',F8.5,' cm '//)
              WRITE(IOUTLIST,100) ICM_IONCHAM, ZMIN_IONCHAM,Z_min_CM(ICM
     *        _IONCHAM)
100           FORMAT(//' ***WARNING IN CM ',I4,' (CHAMBER):'/ ' Z_min_CM
     *(1) > distance to top of chamber'/ ' Z_min_CM(1) reset to ',F8.5,'
     * cm from ',F8.5,' cm '//)
              Z_min_CM(ICM_IONCHAM)=ZMIN_IONCHAM
          ELSE
              WRITE(6,12870)ICM_IONCHAM
12870         FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'Overlaps wit
     *h previous CM'//)
              IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
          END IF
      END IF
      WRITE(6,12880)
12880 FORMAT(/' This module consists of 3 partS:', /'   1 --- top part,'
     *, /'   2 --- main part: the chamber/phantom central part, ', /' 3 
     *--- bottom part.')
      WRITE(6,12890)200-1
12890 FORMAT(/' Input the number of layers for each part: '/ ' N-TOP (>=
     *0), N-CHAM (>0 to input chamber layers individually or <0 to'/ ' i
     *nput -N-CHAM groups of layers), N-BOT (>=0) (N-TOP + total numbero
     *f'/ ' chamber layers + N-BOT <= ',I4,') on one line'/ ' : ',$)
      READ(i_input,12900,END=12780,ERR=12790)N_TOP_IONCHAM, N_CHM_IONCHA
     *M, N_BOT_IONCHAM
12900 FORMAT(3I5)
      WRITE(6,12910)N_TOP_IONCHAM, N_CHM_IONCHAM, N_BOT_IONCHAM
12910 FORMAT(3I9)
      IF ((N_CHM_IONCHAM.EQ.0)) THEN
          WRITE(6,12920)ICM_IONCHAM
12920     FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER)'/ 'N-CHAM = 0'/ 'N-C
     *HAM reset to 1 for now.'//)
          N_CHM_IONCHAM=1
          IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
      END IF
      IF ((N_TOP_IONCHAM .LT. 0)) THEN
          WRITE(6,12930)ICM_IONCHAM
12930     FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER)'/ 'N-TOP < 0'/ 'N-TO
     *P reset to 0 for now.'//)
          N_TOP_IONCHAM=0
          IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
      END IF
      IF ((N_BOT_IONCHAM .LT. 0)) THEN
          WRITE(6,12940)ICM_IONCHAM
12940     FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER)'/ 'N-BOT < 0'/ 'N-BO
     *T reset to 0 for now.'//)
          N_BOT_IONCHAM=0
          IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
      END IF
      IF ((N_CHM_IONCHAM.GT.0 .AND. N_CHM_IONCHAM+N_TOP_IONCHAM+N_BOT_IO
     *NCHAM .GT. 200-1)) THEN
          N_BOT_IONCHAM=0
          N_TOP_IONCHAM=0
          N_CHM_IONCHAM=200-1
          WRITE(6,12950)ICM_IONCHAM, 200-1
12950     FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'N-CHAM + N-TOP +
     * N-BOT > max. # of layers allowed.'/ 'N-TOP set to 0, N-BOT set to
     * 0, N-CHAM set to ',I4,' for now.'//)
          IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
      END IF
      IF ((N_CHM_IONCHAM.GT.0)) THEN
          N_IONCHAM = N_CHM_IONCHAM+3+ 2*N_TOP_IONCHAM+2*N_BOT_IONCHAM
      END IF
      IF ((N_TOP_IONCHAM.NE.0)) THEN
          WRITE(6,12960)N_TOP_IONCHAM
12960     FORMAT(/' Input thickness (ZTHICK) & inner radius (RCYL) for e
     *ach of', ' the',I3,' layers'/' for the top part.' /' Note that the
     * inner radius, RCYL divides each layer into 2', ' regions,'/ ' ani
     *nner disc-shaped region and an outer annular region.', /' The oute
     *r boundary of the annular region is RMAX_CM.')
          WRITE(6,12970)
12970     FORMAT(/ ' For layers of equal thickness, inner radius and med
     *ium, '/ ' Input ZTHICK,RCYL & N-TOP, in one line)'/ ' Otherwise, i
     *nput ZTHICK & RCYL for each layer starting from 1ST', ' layer'/ ':
     * ',$)
          IM=1
          READ(i_input,12980,END=12780,ERR=12790)ZTHICK, RCYSTEMP(IM),JM
12980     FORMAT(2F15.0,I5)
          WRITE(6,12990)ZTHICK, RCYSTEMP(IM),JM
12990     FORMAT(2F15.5,I5)
          IF ((ZTHICK.LT.0.0)) THEN
              WRITE(6,13000)ICM_IONCHAM
13000         FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'Thickness of
     * layer 1 in top part < 0.0.'//)
              IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
          END IF
          IF ((RCYSTEMP(IM).LT.0.0)) THEN
              WRITE(6,13010)ICM_IONCHAM
13010         FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'RCYS of laye
     *r 1, top part < 0.0'//)
              IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
          ELSE IF((RCYSTEMP(IM) .GT. RMAX_CM(ICM_IONCHAM))) THEN
              WRITE(6,13020)ICM_IONCHAM
13020         FORMAT(//'***WARNING IN CM ',I4,' (CHAMBER):'/ 'RCYS of la
     *yer 1, top part > RMAX_CM'//)
              WRITE(IOUTLIST,'(//''***WARNING IN CM '',I4,
     *                        '' (CHAMBER):''/ ''RCYS of layer 1, top pa
     *rt > RMAX_CM''//)') ICM_IONCHAM
          END IF
          ZTEMP(IM)=ZMIN_IONCHAM+ZTHICK
          IF ((JM .EQ. N_TOP_IONCHAM)) THEN
              IRM=1
              WRITE(6,13030)N_TOP_IONCHAM
13030         FORMAT(/' All the',I5,' layers have the same thickness, in
     *ner radius'/)
              WRITE(6,13040)
13040         FORMAT(' ECUT,PCUT,DOSE ZONE(0=>do not score dose)', ',IRE
     *GION_TO_BIT for inner regions'/' :',$)
              READ(i_input,13050,END=12780,ERR=12790)ECUTTEMP(IRM),PCUTT
     *        EMP(IRM),DOSE_ZONETEMP(IRM), IREGION_TO_BITTEMP(IRM)
13050         FORMAT (2F15.0,2I5)
              IF ((ECUTTEMP(IRM) .LT. ECUTIN)) THEN
                  ECUTTEMP(IRM)=ECUTIN
              END IF
              IF ((PCUTTEMP(IRM) .LT. PCUTIN)) THEN
                  PCUTTEMP(IRM)=PCUTIN
              END IF
              WRITE(6,13060)ECUTTEMP(IRM),PCUTTEMP(IRM), DOSE_ZONETEMP(I
     *        M), IREGION_TO_BITTEMP(IM)
13060         FORMAT(2F10.4, I5,I15)
              WRITE(6,13070)
13070         FORMAT(/' For inner regions:',$)
              WRITE(6,13080)
13080         FORMAT(' MEDIUM (left justify): ',$)
              READ(i_input,'(24A1)',END=12780,ERR=12790) (MED_IN(J),J=1,
     *        24)
              WRITE(6,13090)(MED_IN(J),J=1,24)
13090         FORMAT(' ',24A1)
              IF ((MED_IN(1) .EQ. 'V' .AND. MED_IN(2).EQ.'A' .AND. MED_I
     *        N(3).EQ.'C' .AND. MED_IN(4) .EQ. 'U' .AND. MED_IN(5).EQ.'U
     *' .AND. MED_IN(6).EQ.'M')) THEN
                  MED_INDEX=0
              ELSE
                  IF ((NMED .NE. 0)) THEN
                      DO 13101 I=1,NMED
                          MED_FLAG = 0
                          DO 13111 J=1,24
                              IF ((MEDIA(J,I) .NE. MED_IN(J))) THEN
                                  MED_FLAG = 1
                                  GO TO13112
                              END IF
13111                     CONTINUE
13112                     CONTINUE
                          IF ((MED_FLAG .EQ. 0)) THEN
                              MED_INDEX = I
                              GO TO13102
                          END IF
                          IF ((I .EQ. NMED)) THEN
                              NMED = NMED+1
                              MED_INDEX = NMED
                              DO 13121 J=1,24
                                  MEDIA(J,NMED) = MED_IN(J)
13121                         CONTINUE
13122                         CONTINUE
                              GO TO13102
                          END IF
13101                 CONTINUE
13102                 CONTINUE
                  ELSE
                      NMED = 1
                      MED_INDEX = NMED
                      DO 13131 J=1,24
                          MEDIA(J,NMED) = MED_IN(J)
13131                 CONTINUE
13132                 CONTINUE
                  END IF
              END IF
              MEDTEMP(IRM) = MED_INDEX
              IF (( DOSE_ZONETEMP(IRM) .GT. 1500 )) THEN
                  WRITE(6,13140)ICM_IONCHAM, 1500
13140             FORMAT(/'***ERROR IN CM ',I4,' (CHAMBER):'/ 'DOSE_ZONE
     * # of inner cylinders in top part > $MAX_DOSE_ZONE.'/ 'DOSE_ZONE s
     *et to ',I4,' for now.'/ 'Probably need to change $MAX_DOSE_ZONE in
     * beam_user_macros.mortran'//)
                  DOSE_ZONETEMP(IRM)=1500
                  IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
              END IF
              IRM = IRM+1
              WRITE(6,13150)
13150         FORMAT(' ECUT,PCUT,DOSE ZONE(0=>do not score dose),IREGION
     *_TO_BIT', ' for outer regions'/' :',$)
              READ(i_input,13160,END=12780,ERR=12790)ECUTTEMP(IRM),PCUTT
     *        EMP(IRM),DOSE_ZONETEMP(IRM), IREGION_TO_BITTEMP(IRM)
13160         FORMAT (2F15.0,2I5)
              IF ((ECUTTEMP(IRM) .LT. ECUTIN)) THEN
                  ECUTTEMP(IRM)=ECUTIN
              END IF
              IF ((PCUTTEMP(IRM) .LT. PCUTIN)) THEN
                  PCUTTEMP(IRM)=PCUTIN
              END IF
              WRITE(6,13170)ECUTTEMP(IRM),PCUTTEMP(IRM), DOSE_ZONETEMP(I
     *        RM), IREGION_TO_BITTEMP(IRM)
13170         FORMAT(2F10.4, I5,I15)
              WRITE(6,13180)
13180         FORMAT(/' For outer regions:',$)
              WRITE(6,13190)
13190         FORMAT(' MEDIUM (left justify): ',$)
              READ(i_input,'(24A1)',END=12780,ERR=12790) (MED_IN(J),J=1,
     *        24)
              WRITE(6,13200)(MED_IN(J),J=1,24)
13200         FORMAT(' ',24A1)
              IF ((MED_IN(1) .EQ. 'V' .AND. MED_IN(2).EQ.'A' .AND. MED_I
     *        N(3).EQ.'C' .AND. MED_IN(4) .EQ. 'U' .AND. MED_IN(5).EQ.'U
     *' .AND. MED_IN(6).EQ.'M')) THEN
                  MED_INDEX=0
              ELSE
                  IF ((NMED .NE. 0)) THEN
                      DO 13211 I=1,NMED
                          MED_FLAG = 0
                          DO 13221 J=1,24
                              IF ((MEDIA(J,I) .NE. MED_IN(J))) THEN
                                  MED_FLAG = 1
                                  GO TO13222
                              END IF
13221                     CONTINUE
13222                     CONTINUE
                          IF ((MED_FLAG .EQ. 0)) THEN
                              MED_INDEX = I
                              GO TO13212
                          END IF
                          IF ((I .EQ. NMED)) THEN
                              NMED = NMED+1
                              MED_INDEX = NMED
                              DO 13231 J=1,24
                                  MEDIA(J,NMED) = MED_IN(J)
13231                         CONTINUE
13232                         CONTINUE
                              GO TO13212
                          END IF
13211                 CONTINUE
13212                 CONTINUE
                  ELSE
                      NMED = 1
                      MED_INDEX = NMED
                      DO 13241 J=1,24
                          MEDIA(J,NMED) = MED_IN(J)
13241                 CONTINUE
13242                 CONTINUE
                  END IF
              END IF
              MEDTEMP(IRM) = MED_INDEX
              IF (( DOSE_ZONETEMP(IRM) .GT. 1500 )) THEN
                  WRITE(6,13250)ICM_IONCHAM, 1500
13250             FORMAT(/'***ERROR IN CM ',I4,' (CHAMBER):'/ 'DOSE_ZONE
     * # of annuli in top part > $MAX_DOSE_ZONE.'/ 'DOSE_ZONE set to ',I
     *4,' for now.'/ 'Probably need to change $MAX_DOSE_ZONE in beam_use
     *r_macros.mortran'//)
                  DOSE_ZONETEMP(IRM)=1500
                  IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
              END IF
              DO 13261 IM=2,N_TOP_IONCHAM
                  ZTEMP(IM)=ZTEMP(IM-1)+ZTHICK
                  RCYSTEMP(IM)=RCYSTEMP(1)
                  IRM = IRM+1
                  ECUTTEMP(IRM)=ECUTTEMP(1)
                  PCUTTEMP(IRM)=PCUTTEMP(1)
                  DOSE_ZONETEMP(IRM)=DOSE_ZONETEMP(1)
                  IREGION_TO_BITTEMP(IRM)=IREGION_TO_BIT(1)
                  MEDTEMP(IRM) = MED(1)
                  IRM = IRM+1
                  ECUTTEMP(IRM)=ECUTTEMP(2)
                  PCUTTEMP(IRM)=PCUTTEMP(2)
                  DOSE_ZONETEMP(IRM)=DOSE_ZONETEMP(2)
                  IREGION_TO_BITTEMP(IRM)=IREGION_TO_BIT(2)
                  MEDTEMP(IRM) = MED(2)
13261         CONTINUE
13262         CONTINUE
          ELSE
              IF ((N_TOP_IONCHAM.GT.1)) THEN
                  WRITE(6,13270)N_TOP_IONCHAM
13270             FORMAT(/' The',I5,' layers have different inner radii,
     * thickness,', /' and/or media')
              END IF
              WRITE(6,13280)1
13280         FORMAT(/' For layer',I4,' in top part:')
              WRITE(6,13290)ZTHICK,RCYSTEMP(IM)
13290         FORMAT(/' ZTHICK & RCYL =',2F15.5)
              IRM=1
              WRITE(6,13300)
13300         FORMAT(' ECUT,PCUT,DOSE ZONE(0=>do not score dose)', ',IRE
     *GION_TO_BIT for inner region'/' :',$)
              READ(i_input,13310,END=12780,ERR=12790)ECUTTEMP(IRM),PCUTT
     *        EMP(IRM),DOSE_ZONETEMP(IRM), IREGION_TO_BITTEMP(IRM)
13310         FORMAT (2F15.0,2I5)
              IF ((ECUTTEMP(IRM) .LT. ECUTIN)) THEN
                  ECUTTEMP(IRM)=ECUTIN
              END IF
              IF ((PCUTTEMP(IRM) .LT. PCUTIN)) THEN
                  PCUTTEMP(IRM)=PCUTIN
              END IF
              WRITE(6,13320)ECUTTEMP(IRM),PCUTTEMP(IRM), DOSE_ZONETEMP(I
     *        RM), IREGION_TO_BITTEMP(IRM)
13320         FORMAT(2F10.4, I5,I15)
              WRITE(6,13330)
13330         FORMAT(/' For inner region:',$)
              WRITE(6,13340)
13340         FORMAT(' MEDIUM (left justify): ',$)
              READ(i_input,'(24A1)',END=12780,ERR=12790) (MED_IN(J),J=1,
     *        24)
              WRITE(6,13350)(MED_IN(J),J=1,24)
13350         FORMAT(' ',24A1)
              IF ((MED_IN(1) .EQ. 'V' .AND. MED_IN(2).EQ.'A' .AND. MED_I
     *        N(3).EQ.'C' .AND. MED_IN(4) .EQ. 'U' .AND. MED_IN(5).EQ.'U
     *' .AND. MED_IN(6).EQ.'M')) THEN
                  MED_INDEX=0
              ELSE
                  IF ((NMED .NE. 0)) THEN
                      DO 13361 I=1,NMED
                          MED_FLAG = 0
                          DO 13371 J=1,24
                              IF ((MEDIA(J,I) .NE. MED_IN(J))) THEN
                                  MED_FLAG = 1
                                  GO TO13372
                              END IF
13371                     CONTINUE
13372                     CONTINUE
                          IF ((MED_FLAG .EQ. 0)) THEN
                              MED_INDEX = I
                              GO TO13362
                          END IF
                          IF ((I .EQ. NMED)) THEN
                              NMED = NMED+1
                              MED_INDEX = NMED
                              DO 13381 J=1,24
                                  MEDIA(J,NMED) = MED_IN(J)
13381                         CONTINUE
13382                         CONTINUE
                              GO TO13362
                          END IF
13361                 CONTINUE
13362                 CONTINUE
                  ELSE
                      NMED = 1
                      MED_INDEX = NMED
                      DO 13391 J=1,24
                          MEDIA(J,NMED) = MED_IN(J)
13391                 CONTINUE
13392                 CONTINUE
                  END IF
              END IF
              MEDTEMP(IRM) = MED_INDEX
              IF (( DOSE_ZONETEMP(IRM) .GT. 1500 )) THEN
                  WRITE(6,13400)ICM_IONCHAM, 1500
13400             FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'DOSE_ZON
     *E # of inner cylinder in 1st layer, top part > $MAX_DOSE_ZONE.'/ '
     *DOSE_ZONE # set to ',I4,' for now.'/ 'Probably need to change $MAX
     *_DOSE_ZONE in beam_user_macros.mortran'//)
                  DOSE_ZONETEMP(IRM)=1500
                  IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
              END IF
              IRM = IRM+1
              WRITE(6,13410)
13410         FORMAT(' ECUT,PCUT,DOSE ZONE(0=>do not score dose),IREGION
     *_TO_BIT', ' for outer region'/' :',$)
              READ(i_input,13420,END=12780,ERR=12790)ECUTTEMP(IRM),PCUTT
     *        EMP(IRM),DOSE_ZONETEMP(IRM), IREGION_TO_BITTEMP(IRM)
13420         FORMAT (2F15.0,2I5)
              IF ((ECUTTEMP(IRM) .LT. ECUTIN)) THEN
                  ECUTTEMP(IRM)=ECUTIN
              END IF
              IF ((PCUTTEMP(IRM) .LT. PCUTIN)) THEN
                  PCUTTEMP(IRM)=PCUTIN
              END IF
              WRITE(6,13430)ECUTTEMP(IRM),PCUTTEMP(IRM), DOSE_ZONETEMP(I
     *        RM), IREGION_TO_BITTEMP(IRM)
13430         FORMAT(2F10.4, I5,I15)
              WRITE(6,13440)
13440         FORMAT(' For outer region:',$)
              WRITE(6,13450)
13450         FORMAT(' MEDIUM (left justify): ',$)
              READ(i_input,'(24A1)',END=12780,ERR=12790) (MED_IN(J),J=1,
     *        24)
              WRITE(6,13460)(MED_IN(J),J=1,24)
13460         FORMAT(' ',24A1)
              IF ((MED_IN(1) .EQ. 'V' .AND. MED_IN(2).EQ.'A' .AND. MED_I
     *        N(3).EQ.'C' .AND. MED_IN(4) .EQ. 'U' .AND. MED_IN(5).EQ.'U
     *' .AND. MED_IN(6).EQ.'M')) THEN
                  MED_INDEX=0
              ELSE
                  IF ((NMED .NE. 0)) THEN
                      DO 13471 I=1,NMED
                          MED_FLAG = 0
                          DO 13481 J=1,24
                              IF ((MEDIA(J,I) .NE. MED_IN(J))) THEN
                                  MED_FLAG = 1
                                  GO TO13482
                              END IF
13481                     CONTINUE
13482                     CONTINUE
                          IF ((MED_FLAG .EQ. 0)) THEN
                              MED_INDEX = I
                              GO TO13472
                          END IF
                          IF ((I .EQ. NMED)) THEN
                              NMED = NMED+1
                              MED_INDEX = NMED
                              DO 13491 J=1,24
                                  MEDIA(J,NMED) = MED_IN(J)
13491                         CONTINUE
13492                         CONTINUE
                              GO TO13472
                          END IF
13471                 CONTINUE
13472                 CONTINUE
                  ELSE
                      NMED = 1
                      MED_INDEX = NMED
                      DO 13501 J=1,24
                          MEDIA(J,NMED) = MED_IN(J)
13501                 CONTINUE
13502                 CONTINUE
                  END IF
              END IF
              MEDTEMP(IRM) = MED_INDEX
              IF (( DOSE_ZONETEMP(IRM) .GT. 1500 )) THEN
                  WRITE(6,13510)ICM_IONCHAM, 1500
13510             FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'DOSE_ZON
     *E # of outer annulus in 1st layer, top part > $MAX_DOSE_ZONE.'/ 'D
     *OSE_ZONE # set to ',I4,' for now.'/ 'Probably need to change $MAX_
     *DOSE_ZONE in beam_user_macros.mortran'//)
                  DOSE_ZONETEMP(IRM)=1500
                  IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
              END IF
              DO 13521 IM=2,N_TOP_IONCHAM
                  WRITE(6,13530)IM
13530             FORMAT(/' FOR LAYER',I4,' IN TOP PART:')
                  WRITE(6,13540)
13540             FORMAT(/' ZTHICK & RCYL:',$)
                  READ(i_input,13550,END=12780,ERR=12790)ZTHICK, RCYSTEM
     *            P(IM)
13550             FORMAT(2F15.0)
                  WRITE(6,13560)ZTHICK, RCYSTEMP(IM)
13560             FORMAT(2F15.5)
                  IF (( RCYSTEMP(IM).LT.0.0 )) THEN
                      WRITE(6,13570)ICM_IONCHAM, IM-N_CHM_IONCHAM
13570                 FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'Radi
     *us of inner cylinder in layer ',I4,' of top part < 0.0'//)
                      IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
                  ELSE IF((RCYSTEMP(IM) .GT. RMAX_CM(ICM_IONCHAM))) THEN
                      WRITE(6,13580)ICM_IONCHAM, IM-N_CHM_IONCHAM
13580                 FORMAT(//'***WARNING IN CM ',I4,' (CHAMBER):'/ 'Ra
     *dius of inner cylinder in layer ',I4,' of top part > RMAX_CM'//)
                      WRITE(IOUTLIST,'(//''***WARNING IN CM '',
     *                              I4,'' (CHAMBER):''/
     *                                            ''Radius of inner cyli
     *nder in layer '',                                         I4,'' of
     * top part > RMAX_CM''//)') ICM_IONCHAM, IM-N_CHM_IONCHAM
                  END IF
                  IF ((ZTHICK.LT.0.0)) THEN
                      WRITE(6,13590)ICM_IONCHAM, IM-N_CHM_IONCHAM
13590                 FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'Thic
     *kness of layer ',I4,' in top part < 0.0'//)
                      IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
                  END IF
                  ZTEMP(IM)=ZTEMP(IM-1)+ZTHICK
                  WRITE(6,13600)ZTHICK, RCYSTEMP(IM)
13600             FORMAT(2F15.5)
                  IRM = IRM+1
                  WRITE(6,13610)
13610             FORMAT(' ECUT,PCUT,DOSE ZONE(0=>do not score dose)', '
     *,IREGION_TO_BIT for inner region'/' :',$)
                  READ(i_input,13620,END=12780,ERR=12790)ECUTTEMP(IRM),P
     *            CUTTEMP(IRM),DOSE_ZONETEMP(IRM), IREGION_TO_BITTEMP(IR
     *            M)
13620             FORMAT (2F15.0,2I5)
                  IF ((ECUTTEMP(IRM) .LT. ECUTIN)) THEN
                      ECUTTEMP(IRM)=ECUTIN
                  END IF
                  IF ((PCUTTEMP(IRM) .LT. PCUTIN)) THEN
                      PCUTTEMP(IRM)=PCUTIN
                  END IF
                  WRITE(6,13630)ECUTTEMP(IRM),PCUTTEMP(IRM), DOSE_ZONETE
     *            MP(IRM), IREGION_TO_BITTEMP(IRM)
13630             FORMAT(2F10.4, I5,I15)
                  WRITE(6,13640)
13640             FORMAT(/' For inner region:',$)
                  WRITE(6,13650)
13650             FORMAT(' MEDIUM (left justify): ',$)
                  READ(i_input,'(24A1)',END=12780,ERR=12790) (MED_IN(J),
     *            J=1,24)
                  WRITE(6,13660)(MED_IN(J),J=1,24)
13660             FORMAT(' ',24A1)
                  IF ((MED_IN(1) .EQ. 'V' .AND. MED_IN(2).EQ.'A' .AND. M
     *            ED_IN(3).EQ.'C' .AND. MED_IN(4) .EQ. 'U' .AND. MED_IN(
     *            5).EQ.'U' .AND. MED_IN(6).EQ.'M')) THEN
                      MED_INDEX=0
                  ELSE
                      IF ((NMED .NE. 0)) THEN
                          DO 13671 I=1,NMED
                              MED_FLAG = 0
                              DO 13681 J=1,24
                                  IF ((MEDIA(J,I) .NE. MED_IN(J))) THEN
                                      MED_FLAG = 1
                                      GO TO13682
                                  END IF
13681                         CONTINUE
13682                         CONTINUE
                              IF ((MED_FLAG .EQ. 0)) THEN
                                  MED_INDEX = I
                                  GO TO13672
                              END IF
                              IF ((I .EQ. NMED)) THEN
                                  NMED = NMED+1
                                  MED_INDEX = NMED
                                  DO 13691 J=1,24
                                      MEDIA(J,NMED) = MED_IN(J)
13691                             CONTINUE
13692                             CONTINUE
                                  GO TO13672
                              END IF
13671                     CONTINUE
13672                     CONTINUE
                      ELSE
                          NMED = 1
                          MED_INDEX = NMED
                          DO 13701 J=1,24
                              MEDIA(J,NMED) = MED_IN(J)
13701                     CONTINUE
13702                     CONTINUE
                      END IF
                  END IF
                  MEDTEMP(IRM) = MED_INDEX
                  IF (( DOSE_ZONETEMP(IRM) .GT. 1500 )) THEN
                      WRITE(6,13710)ICM_IONCHAM, IM,1500
13710                 FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'DOSE
     *_ZONE # of inner cylinder in layer ',I4, ' of top part > $MAX_DOSE
     *_ZONE.'/ 'DOSE_ZONE # set to ',I4,' for now.'/ 'Probably need to c
     *hange $MAX_DOSE_ZONE in beamnrc_user_macros.mortran'//)
                      DOSE_ZONETEMP(IRM)=1500
                      IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
                  END IF
                  IRM = IRM+1
                  WRITE(6,13720)
13720             FORMAT(' ECUT,PCUT,DOSE ZONE(0=>do not score dose),IRE
     *GION_TO_BIT', ' for outer region'/' :',$)
                  READ(i_input,13730,END=12780,ERR=12790)ECUTTEMP(IRM),P
     *            CUTTEMP(IRM),DOSE_ZONETEMP(IRM), IREGION_TO_BITTEMP(IR
     *            M)
13730             FORMAT (2F15.0,2I5)
                  IF ((ECUTTEMP(IRM) .LT. ECUTIN)) THEN
                      ECUTTEMP(IRM)=ECUTIN
                  END IF
                  IF ((PCUTTEMP(IRM) .LT. PCUTIN)) THEN
                      PCUTTEMP(IRM)=PCUTIN
                  END IF
                  WRITE(6,13740)ECUTTEMP(IRM),PCUTTEMP(IRM), DOSE_ZONETE
     *            MP(IRM), IREGION_TO_BITTEMP(IRM)
13740             FORMAT(2F10.4, I5,I15)
                  WRITE(6,13750)
13750             FORMAT(' For outer region:',$)
                  WRITE(6,13760)
13760             FORMAT(' MEDIUM (left justify): ',$)
                  READ(i_input,'(24A1)',END=12780,ERR=12790) (MED_IN(J),
     *            J=1,24)
                  WRITE(6,13770)(MED_IN(J),J=1,24)
13770             FORMAT(' ',24A1)
                  IF ((MED_IN(1) .EQ. 'V' .AND. MED_IN(2).EQ.'A' .AND. M
     *            ED_IN(3).EQ.'C' .AND. MED_IN(4) .EQ. 'U' .AND. MED_IN(
     *            5).EQ.'U' .AND. MED_IN(6).EQ.'M')) THEN
                      MED_INDEX=0
                  ELSE
                      IF ((NMED .NE. 0)) THEN
                          DO 13781 I=1,NMED
                              MED_FLAG = 0
                              DO 13791 J=1,24
                                  IF ((MEDIA(J,I) .NE. MED_IN(J))) THEN
                                      MED_FLAG = 1
                                      GO TO13792
                                  END IF
13791                         CONTINUE
13792                         CONTINUE
                              IF ((MED_FLAG .EQ. 0)) THEN
                                  MED_INDEX = I
                                  GO TO13782
                              END IF
                              IF ((I .EQ. NMED)) THEN
                                  NMED = NMED+1
                                  MED_INDEX = NMED
                                  DO 13801 J=1,24
                                      MEDIA(J,NMED) = MED_IN(J)
13801                             CONTINUE
13802                             CONTINUE
                                  GO TO13782
                              END IF
13781                     CONTINUE
13782                     CONTINUE
                      ELSE
                          NMED = 1
                          MED_INDEX = NMED
                          DO 13811 J=1,24
                              MEDIA(J,NMED) = MED_IN(J)
13811                     CONTINUE
13812                     CONTINUE
                      END IF
                  END IF
                  MEDTEMP(IRM) = MED_INDEX
                  IF (( DOSE_ZONETEMP(IRM) .GT. 1500 )) THEN
                      WRITE(6,13820)ICM_IONCHAM, IM,1500
13820                 FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'DOSE
     *_ZONE # of outer annulus in layer ',I4, ' of top part > $MAX_DOSE_
     *ZONE.'/ 'DOSE_ZONE # set to ',I4,' for now.'/ 'Probably need to ch
     *ange $MAX_DOSE_ZONE in beam_user_macros.mortran'//)
                      DOSE_ZONETEMP(IRM)=1500
                      IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
                  END IF
13521         CONTINUE
13522         CONTINUE
          END IF
          THICK2=ZTEMP(N_TOP_IONCHAM)-ZMIN_IONCHAM
      ELSE
          THICK2=0.0
      END IF
      WRITE(6,13830)
13830 FORMAT(/'          INPUTS FOR THE Central CHAMBER PART')
      WRITE(6,13840)
13840 FORMAT(/' INPUT THE INNER RADIUS OF THE CHAMBER WALL (R_INNER),' /
     *' THE OUTER RADIUS OF THE CHAMBER WALL (R_WALL), AND THE OUTER RAD
     *IUS,' /' OF THE GAP BETWEEN THE CHAMBER WALL AND CONTAINER WALL (R
     *_OUTER),' /' ALL ON ONE LINE.'/' : ',$)
      READ(i_input,13850,END=12780,ERR=12790)RCYS_IONCHAM(1, 1), RCYS_IO
     *NCHAM(1, 2), RCYS_IONCHAM(1, 3)
13850 FORMAT(3F15.0)
      WRITE(6,13860)RCYS_IONCHAM(1, 1), RCYS_IONCHAM(1, 2), RCYS_IONCHAM
     *(1, 3)
13860 FORMAT(3F13.5)
      WRITE(6,13870)
13870 FORMAT(/' Note that R_OUTER also defines the inner radius of the c
     *ontainer.' /' The outer radius of the container is defined by RMAX
     *_CM.')
      IF ((RCYS_IONCHAM(1,1).LT.0.0)) THEN
          WRITE(6,13880)ICM_IONCHAM
13880     FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'Inner radius ofc
     *hamber wall < 0.0'//)
          IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
      ELSE IF((RCYS_IONCHAM(1,1).GT.RMAX_CM(ICM_IONCHAM))) THEN
          WRITE(6,13890)ICM_IONCHAM
13890     FORMAT(//'***WARNING IN CM ',I4,' (CHAMBER):'/ 'Inner radius o
     *f chamber wall > RMAX_CM'//)
          WRITE(IOUTLIST,'(//''***WARNING IN CM '',I4,'' (CHAMBER):''/
     *                        ''Inner radius of chamber wall > RMAX_CM''
     *//)') ICM_IONCHAM
      END IF
      IF ((RCYS_IONCHAM(1,2).LT.0.0)) THEN
          WRITE(6,13900)ICM_IONCHAM
13900     FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'Outer radius ofc
     *hamber wall < 0.0'//)
          IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
      ELSE IF((RCYS_IONCHAM(1,2).GT.RMAX_CM(ICM_IONCHAM))) THEN
          WRITE(6,13910)ICM_IONCHAM
13910     FORMAT(//'***WARNING IN CM ',I4,' (CHAMBER):'/ 'Outer radius o
     *f chamber wall > RMAX_CM'//)
          WRITE(IOUTLIST,'(//''***WARNING IN CM '',I4,'' (CHAMBER):''/
     *                        ''Outer radius of chamber wall > RMAX_CM''
     *//)') ICM_IONCHAM
      END IF
      IF ((RCYS_IONCHAM(1,3).LT.0.0)) THEN
          WRITE(6,13920)ICM_IONCHAM
13920     FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'Inner radius ofc
     *ontainer wall < 0.0'//)
          IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
      ELSE IF((RCYS_IONCHAM(1,3).GT.RMAX_CM(ICM_IONCHAM))) THEN
          WRITE(6,13930)ICM_IONCHAM
13930     FORMAT(//'***WARNING IN CM ',I4,' (CHAMBER):'/ 'Inner radius o
     *f container wall > RMAX_CM'//)
          WRITE(IOUTLIST,'(//''***WARNING IN CM '',I4,'' (CHAMBER):''/
     *                        ''Inner radius of container wall > RMAX_CM
     *''//)') ICM_IONCHAM
      END IF
      IF ((RCYS_IONCHAM(1,2).LT.RCYS_IONCHAM(1,1))) THEN
          WRITE(6,13940)ICM_IONCHAM
13940     FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'Outer radius ofc
     *hamber wall < inner radius of chamber wall'//)
          IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
      END IF
      IF ((RCYS_IONCHAM(1,3).LT.RCYS_IONCHAM(1,1))) THEN
          WRITE(6,13950)ICM_IONCHAM
13950     FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'Inner radius ofc
     *ontainer wall < inner radius of chamber wall'//)
          IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
      END IF
      IF ((RCYS_IONCHAM(1,3).LT.RCYS_IONCHAM(1,2))) THEN
          WRITE(6,13960)ICM_IONCHAM
13960     FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'Inner radius ofc
     *ontainer wall < outer radius of chamber wall'//)
          IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
      END IF
      RCYS2_IONCHAM(1,1)=RCYS_IONCHAM(1,1)**2
      RCYS2_IONCHAM(1,2)=RCYS_IONCHAM(1,2)**2
      RCYS2_IONCHAM(1,3)=RCYS_IONCHAM(1,3)**2
      Z_IONCHAM(1)=ZMIN_IONCHAM+THICK2
      IF ((N_CHM_IONCHAM.LT.0)) THEN
          WRITE(6,13970)-N_CHM_IONCHAM
13970     FORMAT(/' THIS CHAMBER HAS ',I4,' GROUPS OF LAYERS WITH EQUALT
     *HICKNESS (ZTHICK).'/ ' FOR EACH GROUP, INPUT ZTHICK,I (on one line
     *), WHERE I IS THE NUMBER OF'/ ' LAYERS IN THE GROUP'/' : ',$)
          N_CHAM=0
          DO 13981 II=1,-N_CHM_IONCHAM
              WRITE(6,13990)II
13990         FORMAT(/' FOR LAYER GROUP ',I4,' :')
              READ(i_input,14000,END=12780,ERR=12790)ZTHICK,I
14000         FORMAT(F15.0,I5)
              WRITE(6,14010)ZTHICK,I
14010         FORMAT(F15.5,I5)
              IF ((ZTHICK.LT.0.0)) THEN
                  WRITE(6,14020)ICM_IONCHAM
14020             FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'Layers i
     *n chamber part have thickness < 0.0'//)
                  IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
              END IF
              IF ((I.LE.0)) THEN
                  WRITE(6,14030)ICM_IONCHAM
14030             FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'Cannot h
     *ave a group with <= 0 layers'//)
                  IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
              END IF
              N_CHAM=N_CHAM+I
              IF ((N_CHAM+N_TOP_IONCHAM+N_BOT_IONCHAM .GT. 200-1)) THEN
                  WRITE(6,14040)ICM_IONCHAM
14040             FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'N-CHAM +
     * N-TOP + N-BOT > max. # of layers allowed.'/)
                  IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
              END IF
              WRITE(6,14050)N_CHAM-I+1,N_CHAM,ZTHICK
14050         FORMAT(/' LAYERS ',I4,' - ',I4,' HAVE EQUAL THICKNESS OF',
     *F15.5,' cm.'/)
              Z_IONCHAM(N_CHAM-I+2)=Z_IONCHAM(N_CHAM-I+1)+ZTHICK
              DO 14061 IM=N_CHAM-I+2,N_CHAM
                  Z_IONCHAM(IM+1)=Z_IONCHAM(IM)+ZTHICK
14061         CONTINUE
14062         CONTINUE
13981     CONTINUE
13982     CONTINUE
          IM=1
          IRA = IRSTART_IONCHAM
          N_CHM_IONCHAM=N_CHAM
          N_IONCHAM = N_CHM_IONCHAM+3+ 2*N_TOP_IONCHAM+2*N_BOT_IONCHAM
          WRITE(6,14070)N_CHM_IONCHAM
14070     FORMAT(' If a dose zone is input, it is the first of',I4,' ins
     *equence')
          WRITE(6,14080)
14080     FORMAT(' ECUT,PCUT,INITIAL DOSE ZONE(0=>do not score dose),','
     * IREGION_TO_BIT'/ ' FOR ALL LAYERS: ',$)
          READ(i_input,14090,END=12780,ERR=12790)ECUT(IRA),PCUT(IRA),DOS
     *    E_ZONE(IRA),IREGION_TO_BIT(IRA)
14090     FORMAT (2F15.0,2I5)
          IF ((ECUT(IRA) .LT. ECUTIN)) THEN
              ECUT(IRA)=ECUTIN
          END IF
          IF ((PCUT(IRA) .LT. PCUTIN)) THEN
              PCUT(IRA)=PCUTIN
          END IF
          WRITE(6,14100)ECUT(IRA),PCUT(IRA), DOSE_ZONE(IRA), IREGION_TO_
     *    BIT(IRA)
14100     FORMAT(2F10.4,I5,I15)
          WRITE(6,14110)
14110     FORMAT(' For all layers :',$)
          WRITE(6,14120)
14120     FORMAT(' MEDIUM (left justify): ',$)
          READ(i_input,'(24A1)',END=12780,ERR=12790) (MED_IN(J),J=1,24)
          WRITE(6,14130)(MED_IN(J),J=1,24)
14130     FORMAT(' ',24A1)
          IF ((MED_IN(1) .EQ. 'V' .AND. MED_IN(2).EQ.'A' .AND. MED_IN(3)
     *    .EQ.'C' .AND. MED_IN(4) .EQ. 'U' .AND. MED_IN(5).EQ.'U' .AND.
     *    MED_IN(6).EQ.'M')) THEN
              MED_INDEX=0
          ELSE
              IF ((NMED .NE. 0)) THEN
                  DO 14141 I=1,NMED
                      MED_FLAG = 0
                      DO 14151 J=1,24
                          IF ((MEDIA(J,I) .NE. MED_IN(J))) THEN
                              MED_FLAG = 1
                              GO TO14152
                          END IF
14151                 CONTINUE
14152                 CONTINUE
                      IF ((MED_FLAG .EQ. 0)) THEN
                          MED_INDEX = I
                          GO TO14142
                      END IF
                      IF ((I .EQ. NMED)) THEN
                          NMED = NMED+1
                          MED_INDEX = NMED
                          DO 14161 J=1,24
                              MEDIA(J,NMED) = MED_IN(J)
14161                     CONTINUE
14162                     CONTINUE
                          GO TO14142
                      END IF
14141             CONTINUE
14142             CONTINUE
              ELSE
                  NMED = 1
                  MED_INDEX = NMED
                  DO 14171 J=1,24
                      MEDIA(J,NMED) = MED_IN(J)
14171             CONTINUE
14172             CONTINUE
              END IF
          END IF
          MED(IRA) = MED_INDEX
          IF (( DOSE_ZONE(IRA) .GT. 1500 )) THEN
              WRITE(6,14180)ICM_IONCHAM,1500
14180         FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'DOSE_ZONE #o
     *f layer 1 of chamber part > $MAX_DOSE_ZONE.'/ 'DOSE_ZONE # set to 
     *',I4,' for now.'/ 'Probably need to change $MAX_DOSE_ZONE in beam_
     *user_macros.mortran'//)
              DOSE_ZONE(IRA)=1500
              IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
          ELSE IF((DOSE_ZONE(IRA).NE.0)) THEN
              IPLOTFLAG=1
              ZPLOTCHM(DOSE_ZONE(IRA))=Z_IONCHAM(IM)
              ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_IONCHAM(IM+1)
          END IF
          DO 14191 IM=2,N_CHM_IONCHAM
              IRA = IRA+1
              ECUT(IRA)=ECUT(IRSTART_IONCHAM)
              PCUT(IRA)=PCUT(IRSTART_IONCHAM)
              DOSE_ZONE(IRA)=DOSE_ZONE(IRSTART_IONCHAM) + (IM-1)
              IF (( DOSE_ZONE(IRA) .GT. 1500 )) THEN
                  WRITE(6,14200)ICM_IONCHAM,IM,1500
14200             FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'DOSE_ZON
     *E # of layer ',I4,' of chamber part > $MAX_DOSE_ZONE.'/ 'DOSE_ZONE
     * # set to ',I4,' for now.'/ 'Probably need to change $MAX_DOSE_ZON
     *E in beam_user_macros.mortran'//)
                  DOSE_ZONE(IRA)=1500
                  IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
              ELSE IF((DOSE_ZONE(IRA).NE.0)) THEN
                  IPLOTFLAG=1
                  ZPLOTCHM(DOSE_ZONE(IRA))=Z_IONCHAM(IM)
                  ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_IONCHAM(IM+1)
              END IF
              IREGION_TO_BIT(IRA)=IREGION_TO_BIT(IRSTART_IONCHAM)
              MED(IRA) = MED(IRSTART_IONCHAM)
14191     CONTINUE
14192     CONTINUE
      ELSE
          WRITE(6,14210)
14210     FORMAT(/' INPUT THICKNESS FOR EACH LAYER WITHIN THE CHAMBER'/'
     * FOR LAYERS OF EQUAL THICKNESS (ZTHICK) AND MEDIUM, '/ ' INPUT ZTH
     *ICK,N-CHAM (in one line)' /' OTHERWISE, INPUT ZTHICK FOR EACH LAYE
     *R STARTING FROM 1ST LAYER'/' : ',$)
          READ(i_input,14220,END=12780,ERR=12790)ZTHICK,I
14220     FORMAT(F15.0,I5)
          WRITE(6,14230)ZTHICK,I
14230     FORMAT(F15.5,I5)
          IF ((I .EQ. N_CHM_IONCHAM)) THEN
              IF ((ZTHICK.LT.0.0)) THEN
                  WRITE(6,14240)ICM_IONCHAM
14240             FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'Layers i
     *n chamber part have thickness < 0.0'//)
                  IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
              END IF
              WRITE(6,14250)I,ZTHICK
14250         FORMAT(/' ALL THE ',I5,' LAYERS HAVE EQUAL THICKNESS OF',F
     *15.5,' cm.'/)
              IRA = IRSTART_IONCHAM
              IM=1
              WRITE(6,14260)I
14260         FORMAT(' If a dose zone is input, it is the first of',I4,'
     * in sequence')
              WRITE(6,14270)
14270         FORMAT(' ECUT,PCUT,INITIAL DOSE ZONE(0=>do not score dose)
     *,', ' IREGION_TO_BIT'/ ' FOR THE LAYERS: ',$)
              READ(i_input,14280,END=12780,ERR=12790)ECUT(IRA),PCUT(IRA)
     *        ,DOSE_ZONE(IRA),IREGION_TO_BIT(IRA)
14280         FORMAT (2F15.0,2I5)
              IF ((ECUT(IRA) .LT. ECUTIN)) THEN
                  ECUT(IRA)=ECUTIN
              END IF
              IF ((PCUT(IRA) .LT. PCUTIN)) THEN
                  PCUT(IRA)=PCUTIN
              END IF
              WRITE(6,14290)ECUT(IRA),PCUT(IRA), DOSE_ZONE(IRA), IREGION
     *        _TO_BIT(IRA)
14290         FORMAT(2F10.4,I5,I15)
              WRITE(6,14300)
14300         FORMAT(' For all layers :',$)
              WRITE(6,14310)
14310         FORMAT(' MEDIUM (left justify): ',$)
              READ(i_input,'(24A1)',END=12780,ERR=12790) (MED_IN(J),J=1,
     *        24)
              WRITE(6,14320)(MED_IN(J),J=1,24)
14320         FORMAT(' ',24A1)
              IF ((MED_IN(1) .EQ. 'V' .AND. MED_IN(2).EQ.'A' .AND. MED_I
     *        N(3).EQ.'C' .AND. MED_IN(4) .EQ. 'U' .AND. MED_IN(5).EQ.'U
     *' .AND. MED_IN(6).EQ.'M')) THEN
                  MED_INDEX=0
              ELSE
                  IF ((NMED .NE. 0)) THEN
                      DO 14331 I=1,NMED
                          MED_FLAG = 0
                          DO 14341 J=1,24
                              IF ((MEDIA(J,I) .NE. MED_IN(J))) THEN
                                  MED_FLAG = 1
                                  GO TO14342
                              END IF
14341                     CONTINUE
14342                     CONTINUE
                          IF ((MED_FLAG .EQ. 0)) THEN
                              MED_INDEX = I
                              GO TO14332
                          END IF
                          IF ((I .EQ. NMED)) THEN
                              NMED = NMED+1
                              MED_INDEX = NMED
                              DO 14351 J=1,24
                                  MEDIA(J,NMED) = MED_IN(J)
14351                         CONTINUE
14352                         CONTINUE
                              GO TO14332
                          END IF
14331                 CONTINUE
14332                 CONTINUE
                  ELSE
                      NMED = 1
                      MED_INDEX = NMED
                      DO 14361 J=1,24
                          MEDIA(J,NMED) = MED_IN(J)
14361                 CONTINUE
14362                 CONTINUE
                  END IF
              END IF
              MED(IRA) = MED_INDEX
              IF (( DOSE_ZONE(IRA) .GT. 1500 )) THEN
                  WRITE(6,14370)ICM_IONCHAM,1500
14370             FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'DOSE_ZON
     *E # of layer 1 of chamber part > $MAX_DOSE_ZONE.'/ 'DOSE_ZONE # se
     *t to ',I4,' for now.'/ 'Probably need to change $MAX_DOSE_ZONE inb
     *eam_user_macros.mortran'//)
                  DOSE_ZONE(IRA)=1500
                  IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
              ELSE IF((DOSE_ZONE(IRA).NE.0)) THEN
                  IPLOTFLAG=1
                  ZPLOTCHM(DOSE_ZONE(IRA))=Z_IONCHAM(IM)
                  ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_IONCHAM(IM+1)
              END IF
              Z_IONCHAM(2)=Z_IONCHAM(1)+ZTHICK
              DO 14381 IM=2,N_CHM_IONCHAM
                  Z_IONCHAM(IM+1)=Z_IONCHAM(IM)+ZTHICK
                  IRA = IRA+1
                  ECUT(IRA)=ECUT(IRSTART_IONCHAM)
                  PCUT(IRA)=PCUT(IRSTART_IONCHAM)
                  DOSE_ZONE(IRA)=DOSE_ZONE(IRSTART_IONCHAM) + (IM-1)
                  IF (( DOSE_ZONE(IRA) .GT. 1500 )) THEN
                      WRITE(6,14390)ICM_IONCHAM,IM,1500
14390                 FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'DOSE
     *_ZONE # of layer ',I4,' of chamber part > $MAX_DOSE_ZONE.'/ 'DOSE_
     *ZONE # set to ',I4,' for now.'/ 'Probably need to change $MAX_DOSE
     *_ZONE in beam_user_macros.mortran'//)
                      DOSE_ZONE(IRA)=1500
                      IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
                  ELSE IF((DOSE_ZONE(IRA).NE.0)) THEN
                      IPLOTFLAG=1
                      ZPLOTCHM(DOSE_ZONE(IRA))=Z_IONCHAM(IM)
                      ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_IONCHAM(IM+1)
                  END IF
                  IREGION_TO_BIT(IRA)=IREGION_TO_BIT(IRSTART_IONCHAM)
                  MED(IRA) = MED(IRSTART_IONCHAM)
14381         CONTINUE
14382         CONTINUE
          ELSE
              IF ((N_CHM_IONCHAM.GT.1)) THEN
                  WRITE(6,14400)N_CHM_IONCHAM
14400             FORMAT(/' THE',I4,' LAYERS HAVE DIFFERENT ZTHICK AND/O
     *R MEDIA.')
              END IF
              WRITE(6,14410)1
14410         FORMAT(/' FOR LAYER',I4,' IN THE CHAMBER:')
              WRITE(6,14420)ZTHICK
14420         FORMAT(/' ZTHICK =',F15.5)
              IF ((ZTHICK.LT.0.0)) THEN
                  WRITE(6,14430)ICM_IONCHAM
14430             FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'Thicknes
     *s of layer 1 in chamber part < 0.0'//)
                  IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
              END IF
              IRA = IRSTART_IONCHAM
              IM=1
              WRITE(6,14440)
14440         FORMAT(' ECUT,PCUT,DOSE ZONE(0=>do not score dose),IREGION
     *_TO_BIT'/' :',$)
              READ(i_input,14450,END=12780,ERR=12790)ECUT(IRA),PCUT(IRA)
     *        ,DOSE_ZONE(IRA),IREGION_TO_BIT(IRA)
14450         FORMAT (2F15.0,2I5)
              IF ((ECUT(IRA) .LT. ECUTIN)) THEN
                  ECUT(IRA)=ECUTIN
              END IF
              IF ((PCUT(IRA) .LT. PCUTIN)) THEN
                  PCUT(IRA)=PCUTIN
              END IF
              WRITE(6,14460)ECUT(IRA),PCUT(IRA), DOSE_ZONE(IRA),IREGION_
     *        TO_BIT(IRA)
14460         FORMAT(2F10.4,I5,I15)
              WRITE(6,14470)
14470         FORMAT(' For this layer :')
              WRITE(6,14480)
14480         FORMAT(' MEDIUM (left justify): ',$)
              READ(i_input,'(24A1)',END=12780,ERR=12790) (MED_IN(J),J=1,
     *        24)
              WRITE(6,14490)(MED_IN(J),J=1,24)
14490         FORMAT(' ',24A1)
              IF ((MED_IN(1) .EQ. 'V' .AND. MED_IN(2).EQ.'A' .AND. MED_I
     *        N(3).EQ.'C' .AND. MED_IN(4) .EQ. 'U' .AND. MED_IN(5).EQ.'U
     *' .AND. MED_IN(6).EQ.'M')) THEN
                  MED_INDEX=0
              ELSE
                  IF ((NMED .NE. 0)) THEN
                      DO 14501 I=1,NMED
                          MED_FLAG = 0
                          DO 14511 J=1,24
                              IF ((MEDIA(J,I) .NE. MED_IN(J))) THEN
                                  MED_FLAG = 1
                                  GO TO14512
                              END IF
14511                     CONTINUE
14512                     CONTINUE
                          IF ((MED_FLAG .EQ. 0)) THEN
                              MED_INDEX = I
                              GO TO14502
                          END IF
                          IF ((I .EQ. NMED)) THEN
                              NMED = NMED+1
                              MED_INDEX = NMED
                              DO 14521 J=1,24
                                  MEDIA(J,NMED) = MED_IN(J)
14521                         CONTINUE
14522                         CONTINUE
                              GO TO14502
                          END IF
14501                 CONTINUE
14502                 CONTINUE
                  ELSE
                      NMED = 1
                      MED_INDEX = NMED
                      DO 14531 J=1,24
                          MEDIA(J,NMED) = MED_IN(J)
14531                 CONTINUE
14532                 CONTINUE
                  END IF
              END IF
              MED(IRA) = MED_INDEX
              IF (( DOSE_ZONE(IRA) .GT. 1500 )) THEN
                  WRITE(6,14540)ICM_IONCHAM,1500
14540             FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'DOSE_ZON
     *E # of layer 1 of chamber part > $MAX_DOSE_ZONE.'/ 'DOSE_ZONE # se
     *t to ',I4,' for now.'/ 'Probably need to change $MAX_DOSE_ZONE inb
     *eam_user_macros.mortran'//)
                  DOSE_ZONE(IRA)=1500
                  IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
              ELSE IF((DOSE_ZONE(IRA).NE.0)) THEN
                  IPLOTFLAG=1
                  ZPLOTCHM(DOSE_ZONE(IRA))=Z_IONCHAM(IM)
                  ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_IONCHAM(IM+1)
              END IF
              Z_IONCHAM(2)=Z_IONCHAM(1)+ZTHICK
              DO 14551 IM=2,N_CHM_IONCHAM
                  WRITE(6,14560)IM
14560             FORMAT(/' FOR LAYER',I4,' IN THE CHAMBER:')
                  WRITE(6,14570)
14570             FORMAT(/' ZTHICK: ',$)
                  READ(i_input,14580,END=12780,ERR=12790)ZTHICK
14580             FORMAT(F15.0)
                  WRITE(6,14590)ZTHICK
14590             FORMAT(F15.5)
                  IF ((ZTHICK.LT.0.0)) THEN
                      WRITE(6,14600)ICM_IONCHAM, IM
14600                 FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'Thic
     *kness of layer ',I4,' in chamber part < 0.0'//)
                      IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
                  END IF
                  Z_IONCHAM(IM+1)=Z_IONCHAM(IM)+ZTHICK
                  IRA = IRA+1
                  WRITE(6,14610)
14610             FORMAT(' ECUT,PCUT,DOSE ZONE(0=>do not score dose),IRE
     *GION_TO_BIT'/ ':',$)
                  READ(i_input,14620,END=12780,ERR=12790)ECUT(IRA),PCUT(
     *            IRA),DOSE_ZONE(IRA),IREGION_TO_BIT(IRA)
14620             FORMAT (2F15.0,2I5)
                  IF ((ECUT(IRA) .LT. ECUTIN)) THEN
                      ECUT(IRA)=ECUTIN
                  END IF
                  IF ((PCUT(IRA) .LT. PCUTIN)) THEN
                      PCUT(IRA)=PCUTIN
                  END IF
                  WRITE(6,14630)ECUT(IRA),PCUT(IRA), DOSE_ZONE(IRA), IRE
     *            GION_TO_BIT(IRA)
14630             FORMAT(2F10.4,I5,I15)
                  WRITE(6,14640)
14640             FORMAT(' For this layer :',$)
                  WRITE(6,14650)
14650             FORMAT(' MEDIUM (left justify): ',$)
                  READ(i_input,'(24A1)',END=12780,ERR=12790) (MED_IN(J),
     *            J=1,24)
                  WRITE(6,14660)(MED_IN(J),J=1,24)
14660             FORMAT(' ',24A1)
                  IF ((MED_IN(1) .EQ. 'V' .AND. MED_IN(2).EQ.'A' .AND. M
     *            ED_IN(3).EQ.'C' .AND. MED_IN(4) .EQ. 'U' .AND. MED_IN(
     *            5).EQ.'U' .AND. MED_IN(6).EQ.'M')) THEN
                      MED_INDEX=0
                  ELSE
                      IF ((NMED .NE. 0)) THEN
                          DO 14671 I=1,NMED
                              MED_FLAG = 0
                              DO 14681 J=1,24
                                  IF ((MEDIA(J,I) .NE. MED_IN(J))) THEN
                                      MED_FLAG = 1
                                      GO TO14682
                                  END IF
14681                         CONTINUE
14682                         CONTINUE
                              IF ((MED_FLAG .EQ. 0)) THEN
                                  MED_INDEX = I
                                  GO TO14672
                              END IF
                              IF ((I .EQ. NMED)) THEN
                                  NMED = NMED+1
                                  MED_INDEX = NMED
                                  DO 14691 J=1,24
                                      MEDIA(J,NMED) = MED_IN(J)
14691                             CONTINUE
14692                             CONTINUE
                                  GO TO14672
                              END IF
14671                     CONTINUE
14672                     CONTINUE
                      ELSE
                          NMED = 1
                          MED_INDEX = NMED
                          DO 14701 J=1,24
                              MEDIA(J,NMED) = MED_IN(J)
14701                     CONTINUE
14702                     CONTINUE
                      END IF
                  END IF
                  MED(IRA) = MED_INDEX
                  IF (( DOSE_ZONE(IRA) .GT. 1500 )) THEN
                      WRITE(6,14710)ICM_IONCHAM,IM,1500
14710                 FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'DOSE
     *_ZONE # of layer ',I4,' of chamber part > $MAX_DOSE_ZONE.'/ 'DOSE_
     *ZONE # set to ',I4,' for now.'/ 'Probably need to change $MAX_DOSE
     *_ZONE in beam_user_macros.mortran'//)
                      DOSE_ZONE(IRA)=1500
                      IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
                  ELSE IF((DOSE_ZONE(IRA).NE.0)) THEN
                      IPLOTFLAG=1
                      ZPLOTCHM(DOSE_ZONE(IRA))=Z_IONCHAM(IM)
                      ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_IONCHAM(IM+1)
                  END IF
14551         CONTINUE
14552         CONTINUE
          END IF
      END IF
      DO 14721 I=1,N_CHM_IONCHAM
          RCYS_IONCHAM(I,1)=RCYS_IONCHAM(1,1)
          RCYS_IONCHAM(I,2)=RCYS_IONCHAM(1,2)
          RCYS_IONCHAM(I,3)=RCYS_IONCHAM(1,3)
          RCYS2_IONCHAM(I,1)=RCYS2_IONCHAM(1,1)
          RCYS2_IONCHAM(I,2)=RCYS2_IONCHAM(1,2)
          RCYS2_IONCHAM(I,3)=RCYS2_IONCHAM(1,3)
14721 CONTINUE
14722 CONTINUE
      THICK1=Z_IONCHAM(N_CHM_IONCHAM+1)-Z_IONCHAM(1)
      DO 14731 IR_IONCHAM=1+N_CHM_IONCHAM,N_CHM_IONCHAM +3
          IRA = IRA+1
          IF ((IR_IONCHAM.EQ.1+N_CHM_IONCHAM)) THEN
              WRITE(6,14740)
14740         FORMAT(/' FOR THE CHAMBER WALL:')
          ELSE IF((IR_IONCHAM.EQ.2+N_CHM_IONCHAM)) THEN
              WRITE(6,14750)
14750         FORMAT(/' FOR THE GAP BETWEEN THE CHAMBER WALL AND THE'/ '
     *CONTAINER WALL:')
          ELSE
              WRITE(6,14760)
14760         FORMAT(/' FOR THE CONTAINER WALL:')
          END IF
          WRITE(6,14770)
14770     FORMAT(/' ECUT,PCUT, DOSE ZONE(0=>do not score dose),IREGION_T
     *O_BIT'/ ' : ',$)
          READ(i_input,14780,END=12780,ERR=12790)ECUT(IRA),PCUT(IRA),DOS
     *    E_ZONE(IRA), IREGION_TO_BIT(IRA)
14780     FORMAT (2F15.0,2I5)
          IF ((ECUT(IRA) .LT. ECUTIN)) THEN
              ECUT(IRA)=ECUTIN
          END IF
          IF ((PCUT(IRA) .LT. PCUTIN)) THEN
              PCUT(IRA)=PCUTIN
          END IF
          WRITE(6,14790)ECUT(IRA),PCUT(IRA),DOSE_ZONE(IRA), IREGION_TO_B
     *    IT(IRA)
14790     FORMAT(2F10.4,I5,I15)
          WRITE(6,14800)
14800     FORMAT(' For this region: ',$)
          WRITE(6,14810)
14810     FORMAT(' MEDIUM (left justify): ',$)
          READ(i_input,'(24A1)',END=12780,ERR=12790) (MED_IN(J),J=1,24)
          WRITE(6,14820)(MED_IN(J),J=1,24)
14820     FORMAT(' ',24A1)
          IF ((MED_IN(1) .EQ. 'V' .AND. MED_IN(2).EQ.'A' .AND. MED_IN(3)
     *    .EQ.'C' .AND. MED_IN(4) .EQ. 'U' .AND. MED_IN(5).EQ.'U' .AND.
     *    MED_IN(6).EQ.'M')) THEN
              MED_INDEX=0
          ELSE
              IF ((NMED .NE. 0)) THEN
                  DO 14831 I=1,NMED
                      MED_FLAG = 0
                      DO 14841 J=1,24
                          IF ((MEDIA(J,I) .NE. MED_IN(J))) THEN
                              MED_FLAG = 1
                              GO TO14842
                          END IF
14841                 CONTINUE
14842                 CONTINUE
                      IF ((MED_FLAG .EQ. 0)) THEN
                          MED_INDEX = I
                          GO TO14832
                      END IF
                      IF ((I .EQ. NMED)) THEN
                          NMED = NMED+1
                          MED_INDEX = NMED
                          DO 14851 J=1,24
                              MEDIA(J,NMED) = MED_IN(J)
14851                     CONTINUE
14852                     CONTINUE
                          GO TO14832
                      END IF
14831             CONTINUE
14832             CONTINUE
              ELSE
                  NMED = 1
                  MED_INDEX = NMED
                  DO 14861 J=1,24
                      MEDIA(J,NMED) = MED_IN(J)
14861             CONTINUE
14862             CONTINUE
              END IF
          END IF
          MED(IRA) = MED_INDEX
          IF (( DOSE_ZONE(IRA) .GT. 1500 )) THEN
              WRITE(6,14870)ICM_IONCHAM,1500
14870         FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'DOSE_ZONE #c
     *hamber wall, gap, and/or container wall > $MAX_DOSE_ZONE.'/ 'DOSE_
     *ZONE # set to ',I4,' for now.'/ 'Probably need to change $MAX_DOSE
     *_ZONE in beam_user_macros.mortran'//)
              DOSE_ZONE(IRA)=1500
              IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
          ELSE IF((DOSE_ZONE(IRA).NE.0)) THEN
              IPLOTFLAG=1
              ZPLOTCHM(DOSE_ZONE(IRA))=Z_IONCHAM(IM)
              ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_IONCHAM(IM+1)
          END IF
14731 CONTINUE
14732 CONTINUE
      IRM=0
      DO 14881 I=1,N_TOP_IONCHAM
          IM=N_CHM_IONCHAM+I
          RCYS_IONCHAM(IM, 1)=RCYSTEMP(I)
          RCYS2_IONCHAM(IM,1)=RCYS_IONCHAM(IM,1)**2
          Z_IONCHAM(IM+1)=ZTEMP(I)
          IRA = IRA+1
          IRM=IRM+1
          IR_IONCHAM = IR_IONCHAM+1
          ECUT(IRA)=ECUTTEMP(IRM)
          PCUT(IRA)=PCUTTEMP(IRM)
          DOSE_ZONE(IRA)=DOSE_ZONETEMP(IRM)
          IREGION_TO_BIT(IRA)=IREGION_TO_BITTEMP(IRM)
          MED(IRA)=MEDTEMP(IRM)
          IF ((DOSE_ZONE(IRA).NE.0)) THEN
              IPLOTFLAG=1
              ZPLOTCHM(DOSE_ZONE(IRA))=Z_IONCHAM(IM)
              ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_IONCHAM(IM+1)
          END IF
          IRA = IRA+1
          IR_IONCHAM =IR_IONCHAM +1
          IRM=IRM+1
          ECUT(IRA)=ECUTTEMP(IRM)
          PCUT(IRA)=PCUTTEMP(IRM)
          DOSE_ZONE(IRA)=DOSE_ZONETEMP(IRM)
          IREGION_TO_BIT(IRA)=IREGION_TO_BITTEMP(IRM)
          MED(IRA)=MEDTEMP(IRM)
          IF ((DOSE_ZONE(IRA).NE.0)) THEN
              IPLOTFLAG=1
              ZPLOTCHM(DOSE_ZONE(IRA))=Z_IONCHAM(IM)
              ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_IONCHAM(IM+1)
          END IF
14881 CONTINUE
14882 CONTINUE
      THICK3=0.
      IF ((N_BOT_IONCHAM.NE.0)) THEN
          WRITE(6,14890)N_BOT_IONCHAM
14890     FORMAT(/' INPUTS FOR THE BOTTOM PART (ALTOGETHER ',I4,' LAYERS
     *):')
          WRITE(6,14900)
14900     FORMAT(/' SIMILAR TO THE TOP PART, EACH LAYER OF THE BOTTOM PA
     *RT'/ ' IS DIVIDED INTO AN INNER DISC-SHAPED REGION AND AN OUTER AN
     *NULAR'/ ' REGION BY THE INNER RADIUS, RCYL.'/ ' FOR LAYERS OF EQUA
     *L THICKNESS, INNER RADIUS & MEDIA,'/ ' INPUT ZTHICK,RCYL & N-BOT (
     *2F15.0,I5, in one line)'/ ' OTHERWISE, INPUT ZTHICK & RCYL FOR EAC
     *H LAYER STARTING FROM 1ST', ' LAYER'/ ' (2F15.0)',$)
          IM=N_CHM_IONCHAM+N_TOP_IONCHAM+1
          READ(i_input,14910,END=12780,ERR=12790)ZTHICK, RCYS_IONCHAM(IM
     *    , 1),JM
14910     FORMAT(2F15.0,I5)
          WRITE(6,14920)ZTHICK, RCYS_IONCHAM(IM, 1),JM
14920     FORMAT(2F15.5,I5)
          IF ((ZTHICK.LT.0.0)) THEN
              WRITE(6,14930)ICM_IONCHAM
14930         FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'Thickness of
     * layer 1 in bottom part < 0.0.'//)
              IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
          END IF
          IF ((RCYS_IONCHAM(IM, 1).LT.0.0)) THEN
              WRITE(6,14940)ICM_IONCHAM
14940         FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'RCYS of laye
     *r 1, bottom part < 0.0'//)
              IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
          ELSE IF((RCYS_IONCHAM(IM,1) .GT. RMAX_CM(ICM_IONCHAM))) THEN
              WRITE(6,14950)ICM_IONCHAM
14950         FORMAT(//'***WARNING IN CM ',I4,' (CHAMBER):'/ 'RCYS of la
     *yer 1, bottom part > RMAX_CM'//)
              WRITE(IOUTLIST,'(//''***WARNING IN CM '',I4,
     *                        '' (CHAMBER):''/
     *                                      ''RCYS of layer 1, bottom pa
     *rt > RMAX_CM''//)') ICM_IONCHAM
          END IF
          RCYS2_IONCHAM(IM,1)=RCYS_IONCHAM(IM,1)**2
          Z_IONCHAM(IM+1)=Z_IONCHAM(N_CHM_IONCHAM+1)+ZTHICK
          IF ((JM.EQ.N_BOT_IONCHAM)) THEN
              IRA = IRSTART_IONCHAM+N_CHM_IONCHAM+3+2*N_TOP_IONCHAM
              IR_IONCHAM = N_CHM_IONCHAM+3+2*N_TOP_IONCHAM+1
              WRITE(6,14960)N_BOT_IONCHAM
14960         FORMAT(/' ALL THE',I5,' LAYERS HAVE THE SAME THICKNESS & R
     *ADIUS'/)
              WRITE(6,14970)ZTHICK, RCYS_IONCHAM(IM,1)
14970         FORMAT(/' FOR ALL LAYERS, ZTHICK, RCYL = ',2F15.5)
              WRITE(6,14980)
14980         FORMAT(/ ' ECUT,PCUT,DOSE ZONE(0=>do not score dose),IREGI
     *ON_TO_BIT',/ ' for inner regions'/ ' : ',$)
              READ(i_input,14990,END=12780,ERR=12790)ECUT(IRA),PCUT(IRA)
     *        ,DOSE_ZONE(IRA), IREGION_TO_BIT(IRA)
14990         FORMAT (2F15.0,2I5)
              IF ((ECUT(IRA) .LT. ECUTIN)) THEN
                  ECUT(IRA)=ECUTIN
              END IF
              IF ((PCUT(IRA) .LT. PCUTIN)) THEN
                  PCUT(IRA)=PCUTIN
              END IF
              WRITE(6,15000)ECUT(IRA),PCUT(IRA), DOSE_ZONE(IRA), IREGION
     *        _TO_BIT(IRA)
15000         FORMAT(2F10.4,I5,I15)
              WRITE(6,15010)
15010         FORMAT(' For inner region :',$)
              WRITE(6,15020)
15020         FORMAT(' MEDIUM (left justify): ',$)
              READ(i_input,'(24A1)',END=12780,ERR=12790) (MED_IN(J),J=1,
     *        24)
              WRITE(6,15030)(MED_IN(J),J=1,24)
15030         FORMAT(' ',24A1)
              IF ((MED_IN(1) .EQ. 'V' .AND. MED_IN(2).EQ.'A' .AND. MED_I
     *        N(3).EQ.'C' .AND. MED_IN(4) .EQ. 'U' .AND. MED_IN(5).EQ.'U
     *' .AND. MED_IN(6).EQ.'M')) THEN
                  MED_INDEX=0
              ELSE
                  IF ((NMED .NE. 0)) THEN
                      DO 15041 I=1,NMED
                          MED_FLAG = 0
                          DO 15051 J=1,24
                              IF ((MEDIA(J,I) .NE. MED_IN(J))) THEN
                                  MED_FLAG = 1
                                  GO TO15052
                              END IF
15051                     CONTINUE
15052                     CONTINUE
                          IF ((MED_FLAG .EQ. 0)) THEN
                              MED_INDEX = I
                              GO TO15042
                          END IF
                          IF ((I .EQ. NMED)) THEN
                              NMED = NMED+1
                              MED_INDEX = NMED
                              DO 15061 J=1,24
                                  MEDIA(J,NMED) = MED_IN(J)
15061                         CONTINUE
15062                         CONTINUE
                              GO TO15042
                          END IF
15041                 CONTINUE
15042                 CONTINUE
                  ELSE
                      NMED = 1
                      MED_INDEX = NMED
                      DO 15071 J=1,24
                          MEDIA(J,NMED) = MED_IN(J)
15071                 CONTINUE
15072                 CONTINUE
                  END IF
              END IF
              MED(IRA) = MED_INDEX
              IF (( DOSE_ZONE(IRA) .GT. 1500 )) THEN
                  WRITE(6,15080)ICM_IONCHAM, 1500
15080             FORMAT(/'***ERROR IN CM ',I4,' (CHAMBER):'/ 'DOSE_ZONE
     * # of inner cylinders in bottom part > $MAX_DOSE_ZONE.'/ 'DOSE_ZON
     *E set to ',I4,' for now.'/ 'Probably need to change $MAX_DOSE_ZONE
     * in beam_user_macros.mortran'//)
                  DOSE_ZONE(IRA)=1500
                  IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
              ELSE IF((DOSE_ZONE(IRA).NE.0)) THEN
                  IPLOTFLAG=1
                  ZPLOTCHM(DOSE_ZONE(IRA))=Z_IONCHAM(IM)
                  ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_IONCHAM(IM+1)
              END IF
              IRA=IRA+1
              IR_IONCHAM=IR_IONCHAM+1
              WRITE(6,15090)
15090         FORMAT(' ECUT,PCUT,DOSE ZONE(0=>do not score dose),IREGION
     *_TO_BIT', ' for outer regions'/' :',$)
              READ(i_input,15100,END=12780,ERR=12790)ECUT(IRA),PCUT(IRA)
     *        ,DOSE_ZONE(IRA), IREGION_TO_BIT(IRA)
15100         FORMAT (2F15.0,2I5)
              IF ((ECUT(IRA) .LT. ECUTIN)) THEN
                  ECUT(IRA)=ECUTIN
              END IF
              IF ((PCUT(IRA) .LT. PCUTIN)) THEN
                  PCUT(IRA)=PCUTIN
              END IF
              WRITE(6,15110)ECUT(IRA),PCUT(IRA), DOSE_ZONE(IRA), IREGION
     *        _TO_BIT(IRA)
15110         FORMAT(2F10.4,I5,I15)
              WRITE(6,15120)
15120         FORMAT(' For outer region :',$)
              WRITE(6,15130)
15130         FORMAT(' MEDIUM (left justify): ',$)
              READ(i_input,'(24A1)',END=12780,ERR=12790) (MED_IN(J),J=1,
     *        24)
              WRITE(6,15140)(MED_IN(J),J=1,24)
15140         FORMAT(' ',24A1)
              IF ((MED_IN(1) .EQ. 'V' .AND. MED_IN(2).EQ.'A' .AND. MED_I
     *        N(3).EQ.'C' .AND. MED_IN(4) .EQ. 'U' .AND. MED_IN(5).EQ.'U
     *' .AND. MED_IN(6).EQ.'M')) THEN
                  MED_INDEX=0
              ELSE
                  IF ((NMED .NE. 0)) THEN
                      DO 15151 I=1,NMED
                          MED_FLAG = 0
                          DO 15161 J=1,24
                              IF ((MEDIA(J,I) .NE. MED_IN(J))) THEN
                                  MED_FLAG = 1
                                  GO TO15162
                              END IF
15161                     CONTINUE
15162                     CONTINUE
                          IF ((MED_FLAG .EQ. 0)) THEN
                              MED_INDEX = I
                              GO TO15152
                          END IF
                          IF ((I .EQ. NMED)) THEN
                              NMED = NMED+1
                              MED_INDEX = NMED
                              DO 15171 J=1,24
                                  MEDIA(J,NMED) = MED_IN(J)
15171                         CONTINUE
15172                         CONTINUE
                              GO TO15152
                          END IF
15151                 CONTINUE
15152                 CONTINUE
                  ELSE
                      NMED = 1
                      MED_INDEX = NMED
                      DO 15181 J=1,24
                          MEDIA(J,NMED) = MED_IN(J)
15181                 CONTINUE
15182                 CONTINUE
                  END IF
              END IF
              MED(IRA) = MED_INDEX
              IF (( DOSE_ZONE(IRA) .GT. 1500 )) THEN
                  WRITE(6,15190)ICM_IONCHAM, 1500
15190             FORMAT(/'***ERROR IN CM ',I4,' (CHAMBER):'/ 'DOSE_ZONE
     * # of annuli in bottom part > $MAX_DOSE_ZONE.'/ 'DOSE_ZONE set to'
     *,I4,' for now.'/ 'Probably need to change $MAX_DOSE_ZONE in beam_u
     *ser_macros.mortran'//)
                  DOSE_ZONE(IRA)=1500
                  IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
              ELSE IF((DOSE_ZONE(IRA).NE.0)) THEN
                  IPLOTFLAG=1
                  ZPLOTCHM(DOSE_ZONE(IRA))=Z_IONCHAM(IM)
                  ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_IONCHAM(IM+1)
              END IF
              DO 15201 IM=N_CHM_IONCHAM+N_TOP_IONCHAM+2,N_CHM_IONCHAM+N_
     *        TOP_IONCHAM+N_BOT_IONCHAM
                  Z_IONCHAM(IM+1)=Z_IONCHAM(IM)+ZTHICK
                  RCYS2_IONCHAM(IM,1)= RCYS2_IONCHAM(N_CHM_IONCHAM+N_TOP
     *            _IONCHAM+1,1)
                  IRA = IRA+1
                  ECUT(IRA)=ECUT(IRSTART_IONCHAM+N_CHM_IONCHAM+3+2*N_TOP
     *            _IONCHAM)
                  PCUT(IRA)=PCUT(IRSTART_IONCHAM+N_CHM_IONCHAM+3+2*N_TOP
     *            _IONCHAM)
                  DOSE_ZONE(IRA)= DOSE_ZONE(IRSTART_IONCHAM+N_CHM_IONCHA
     *            M+3+2*N_TOP_IONCHAM)
                  IF ((DOSE_ZONE(IRA).NE.0)) THEN
                      IPLOTFLAG=1
                      ZPLOTCHM(DOSE_ZONE(IRA))=Z_IONCHAM(IM)
                      ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_IONCHAM(IM+1)
                  END IF
                  MED(IRA)=MED(IRSTART_IONCHAM+N_CHM_IONCHAM+3+2*N_TOP_I
     *            ONCHAM)
                  IRA = IRA+1
                  ECUT(IRA)=ECUT(IRSTART_IONCHAM+N_CHM_IONCHAM+4+2*N_TOP
     *            _IONCHAM)
                  PCUT(IRA)=PCUT(IRSTART_IONCHAM+N_CHM_IONCHAM+4+2*N_TOP
     *            _IONCHAM)
                  DOSE_ZONE(IRA)= DOSE_ZONE(IRSTART_IONCHAM+N_CHM_IONCHA
     *            M+4+2*N_TOP_IONCHAM)
                  IF ((DOSE_ZONE(IRA).NE.0)) THEN
                      IPLOTFLAG=1
                      ZPLOTCHM(DOSE_ZONE(IRA))=Z_IONCHAM(IM)
                      ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_IONCHAM(IM+1)
                  END IF
                  MED(IRA)=MED(IRSTART_IONCHAM+N_CHM_IONCHAM+4+2*N_TOP_I
     *            ONCHAM)
15201         CONTINUE
15202         CONTINUE
              THICK3=ZTHICK*FLOAT(N_BOT_IONCHAM)
          ELSE
              IRA = IRSTART_IONCHAM+N_CHM_IONCHAM+3+2*N_TOP_IONCHAM
              IR_IONCHAM = N_CHM_IONCHAM+3+2*N_TOP_IONCHAM+1
              IF ((N_BOT_IONCHAM.GT.1)) THEN
                  WRITE(6,15210)N_BOT_IONCHAM
15210             FORMAT(/' THE',I4, ' LAYERS IN THE BOTTOM PART HAVE DI
     *FFERENT'/ ' INNER RADII, THICKNESS, AND/OR MEDIA.')
              END IF
              WRITE(6,15220)1
15220         FORMAT(/' FOR LAYER',I4,' IN BOTTOM PART:')
              WRITE(6,15230)ZTHICK,RCYS_IONCHAM(IM, 1)
15230         FORMAT(/' ZTHICK, RCYL =',2F15.5)
              THICK3=ZTHICK
              WRITE(6,15240)
15240         FORMAT(/' ECUT,PCUT,DOSE ZONE(0=>do not score dose),'/ ' I
     *REGION_TO_BIT for inner region'/ ' : ',$)
              READ(i_input,15250,END=12780,ERR=12790)ECUT(IRA),PCUT(IRA)
     *        ,DOSE_ZONE(IRA), IREGION_TO_BIT(IRA)
15250         FORMAT (2F15.0,2I5)
              IF ((ECUT(IRA) .LT. ECUTIN)) THEN
                  ECUT(IRA)=ECUTIN
              END IF
              IF ((PCUT(IRA) .LT. PCUTIN)) THEN
                  PCUT(IRA)=PCUTIN
              END IF
              WRITE(6,15260)ECUT(IRA),PCUT(IRA), DOSE_ZONE(IRA), IREGION
     *        _TO_BIT(IRA)
15260         FORMAT(2F10.4,I5,I15)
              WRITE(6,15270)
15270         FORMAT(' For inner region :',$)
              WRITE(6,15280)
15280         FORMAT(' MEDIUM (left justify): ',$)
              READ(i_input,'(24A1)',END=12780,ERR=12790) (MED_IN(J),J=1,
     *        24)
              WRITE(6,15290)(MED_IN(J),J=1,24)
15290         FORMAT(' ',24A1)
              IF ((MED_IN(1) .EQ. 'V' .AND. MED_IN(2).EQ.'A' .AND. MED_I
     *        N(3).EQ.'C' .AND. MED_IN(4) .EQ. 'U' .AND. MED_IN(5).EQ.'U
     *' .AND. MED_IN(6).EQ.'M')) THEN
                  MED_INDEX=0
              ELSE
                  IF ((NMED .NE. 0)) THEN
                      DO 15301 I=1,NMED
                          MED_FLAG = 0
                          DO 15311 J=1,24
                              IF ((MEDIA(J,I) .NE. MED_IN(J))) THEN
                                  MED_FLAG = 1
                                  GO TO15312
                              END IF
15311                     CONTINUE
15312                     CONTINUE
                          IF ((MED_FLAG .EQ. 0)) THEN
                              MED_INDEX = I
                              GO TO15302
                          END IF
                          IF ((I .EQ. NMED)) THEN
                              NMED = NMED+1
                              MED_INDEX = NMED
                              DO 15321 J=1,24
                                  MEDIA(J,NMED) = MED_IN(J)
15321                         CONTINUE
15322                         CONTINUE
                              GO TO15302
                          END IF
15301                 CONTINUE
15302                 CONTINUE
                  ELSE
                      NMED = 1
                      MED_INDEX = NMED
                      DO 15331 J=1,24
                          MEDIA(J,NMED) = MED_IN(J)
15331                 CONTINUE
15332                 CONTINUE
                  END IF
              END IF
              MED(IRA) = MED_INDEX
              IF (( DOSE_ZONE(IRA) .GT. 1500 )) THEN
                  WRITE(6,15340)ICM_IONCHAM, 1500
15340             FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'DOSE_ZON
     *E # of inner cylinder in 1st layer, bottom part > $MAX_DOSE_ZONE.'
     */ 'DOSE_ZONE # set to ',I4,' for now.'/ 'Probably need to change $
     *MAX_DOSE_ZONE in beam_user_macros.mortran'//)
                  DOSE_ZONE(IRA)=1500
                  IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
              ELSE IF((DOSE_ZONE(IRA).NE.0)) THEN
                  IPLOTFLAG=1
                  ZPLOTCHM(DOSE_ZONE(IRA))=Z_IONCHAM(IM)
                  ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_IONCHAM(IM+1)
              END IF
              IRA = IRA+1
              IR_IONCHAM =IR_IONCHAM +1
              WRITE(6,15350)
15350         FORMAT(' ECUT,PCUT,DOSE ZONE(0=>do not score dose),IREGION
     *_TO_BIT', ' for outer region'/' :',$)
              READ(i_input,15360,END=12780,ERR=12790)ECUT(IRA),PCUT(IRA)
     *        ,DOSE_ZONE(IRA), IREGION_TO_BIT(IRA)
15360         FORMAT (2F15.0,2I5)
              IF ((ECUT(IRA) .LT. ECUTIN)) THEN
                  ECUT(IRA)=ECUTIN
              END IF
              IF ((PCUT(IRA) .LT. PCUTIN)) THEN
                  PCUT(IRA)=PCUTIN
              END IF
              WRITE(6,15370)ECUT(IRA),PCUT(IRA), DOSE_ZONE(IRA), IREGION
     *        _TO_BIT(IRA)
15370         FORMAT(2F10.4,I5,I15)
              WRITE(6,15380)
15380         FORMAT(' For outer region :',$)
              WRITE(6,15390)
15390         FORMAT(' MEDIUM (left justify): ',$)
              READ(i_input,'(24A1)',END=12780,ERR=12790) (MED_IN(J),J=1,
     *        24)
              WRITE(6,15400)(MED_IN(J),J=1,24)
15400         FORMAT(' ',24A1)
              IF ((MED_IN(1) .EQ. 'V' .AND. MED_IN(2).EQ.'A' .AND. MED_I
     *        N(3).EQ.'C' .AND. MED_IN(4) .EQ. 'U' .AND. MED_IN(5).EQ.'U
     *' .AND. MED_IN(6).EQ.'M')) THEN
                  MED_INDEX=0
              ELSE
                  IF ((NMED .NE. 0)) THEN
                      DO 15411 I=1,NMED
                          MED_FLAG = 0
                          DO 15421 J=1,24
                              IF ((MEDIA(J,I) .NE. MED_IN(J))) THEN
                                  MED_FLAG = 1
                                  GO TO15422
                              END IF
15421                     CONTINUE
15422                     CONTINUE
                          IF ((MED_FLAG .EQ. 0)) THEN
                              MED_INDEX = I
                              GO TO15412
                          END IF
                          IF ((I .EQ. NMED)) THEN
                              NMED = NMED+1
                              MED_INDEX = NMED
                              DO 15431 J=1,24
                                  MEDIA(J,NMED) = MED_IN(J)
15431                         CONTINUE
15432                         CONTINUE
                              GO TO15412
                          END IF
15411                 CONTINUE
15412                 CONTINUE
                  ELSE
                      NMED = 1
                      MED_INDEX = NMED
                      DO 15441 J=1,24
                          MEDIA(J,NMED) = MED_IN(J)
15441                 CONTINUE
15442                 CONTINUE
                  END IF
              END IF
              MED(IRA) = MED_INDEX
              IF (( DOSE_ZONE(IRA) .GT. 1500 )) THEN
                  WRITE(6,15450)ICM_IONCHAM, 1500
15450             FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'DOSE_ZON
     *E # of outer annulus in 1st layer, bottom part > $MAX_DOSE_ZONE.'/
     *'DOSE_ZONE # set to ',I4,' for now.'/ 'Probably needto change $MAX
     *_DOSE_ZONE in beam_user_macros.mortran'//)
                  DOSE_ZONE(IRA)=1500
                  IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
              ELSE IF((DOSE_ZONE(IRA).NE.0)) THEN
                  IPLOTFLAG=1
                  ZPLOTCHM(DOSE_ZONE(IRA))=Z_IONCHAM(IM)
                  ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_IONCHAM(IM+1)
              END IF
              DO 15461 IM=N_CHM_IONCHAM+N_TOP_IONCHAM+2,N_CHM_IONCHAM+N_
     *        TOP_IONCHAM+ N_BOT_IONCHAM
                  WRITE(6,15470)IM-N_CHM_IONCHAM-N_TOP_IONCHAM
15470             FORMAT(/' FOR LAYER',I4,' OF THE BOTTOM PART:')
                  WRITE(6,15480)
15480             FORMAT(/' INPUT ZTHICK & RADIUS:',$)
                  READ(i_input,15490,END=12780,ERR=12790)ZTHICK, RCYS_IO
     *            NCHAM(IM, 1)
15490             FORMAT(2F15.0)
                  WRITE(6,15500)ZTHICK, RCYS_IONCHAM(IM, 1)
15500             FORMAT(2F12.5)
                  IF ((ZTHICK.LT.0.0)) THEN
                      WRITE(6,15510)ICM_IONCHAM, IM-N_CHM_IONCHAM-N_TOP_
     *                IONCHAM
15510                 FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'Thic
     *kness of layer ',I4,' in bottom part < 0.0'//)
                      IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
                  END IF
                  Z_IONCHAM(IM+1)=Z_IONCHAM(IM)+ZTHICK
                  THICK3=THICK3+ZTHICK
                  IF (( RCYS_IONCHAM(IM,1).LT.0.0 )) THEN
                      WRITE(6,15520)ICM_IONCHAM, IM-N_CHM_IONCHAM-N_TOP_
     *                IONCHAM
15520                 FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'Radi
     *us of inner cylinder in layer ',I4,' of bottom part < 0.0'//)
                      IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
                  ELSE IF((RCYS_IONCHAM(IM,1) .GT. RMAX_CM(ICM_IONCHAM))
     *            ) THEN
                      WRITE(6,15530)ICM_IONCHAM, IM-N_CHM_IONCHAM-N_TOP_
     *                IONCHAM
15530                 FORMAT(//'***WARNING IN CM ',I4,' (CHAMBER):'/ 'Ra
     *dius of inner cylinder in layer ',I4,' of bottom part > RMAX_CM'//
     *)
                      WRITE(IOUTLIST,'(//''***WARNING IN CM '',
     *                              I4,'' (CHAMBER):''/
     *                                            ''Radius of inner cyli
     *nder in layer '',                                         I4,'' of
     * bottom part > RMAX_CM''//)') ICM_IONCHAM, IM-N_CHM_IONCHAM-N_TOP_
     *                IONCHAM
                  END IF
                  RCYS2_IONCHAM(IM,1)=RCYS_IONCHAM(IM,1)**2
                  IRA = IRA+1
                  IR_IONCHAM =IR_IONCHAM +1
                  WRITE(6,15540)
15540             FORMAT(' ECUT,PCUT,DOSE ZONE(0=>do not score dose),','
     *IREGION_TO_BIT for inner region'/' :',$)
                  READ(i_input,15550,END=12780,ERR=12790)ECUT(IRA),PCUT(
     *            IRA),DOSE_ZONE(IRA), IREGION_TO_BIT(IRA)
15550             FORMAT (2F15.0,2I5)
                  IF ((ECUT(IRA) .LT. ECUTIN)) THEN
                      ECUT(IRA)=ECUTIN
                  END IF
                  IF ((PCUT(IRA) .LT. PCUTIN)) THEN
                      PCUT(IRA)=PCUTIN
                  END IF
                  WRITE(6,15560)ECUT(IRA),PCUT(IRA), DOSE_ZONE(IRA), IRE
     *            GION_TO_BIT(IRA)
15560             FORMAT(2F10.4,I5,I15)
                  WRITE(6,15570)
15570             FORMAT(' For inner region :',$)
                  WRITE(6,15580)
15580             FORMAT(' MEDIUM (left justify): ',$)
                  READ(i_input,'(24A1)',END=12780,ERR=12790) (MED_IN(J),
     *            J=1,24)
                  WRITE(6,15590)(MED_IN(J),J=1,24)
15590             FORMAT(' ',24A1)
                  IF ((MED_IN(1) .EQ. 'V' .AND. MED_IN(2).EQ.'A' .AND. M
     *            ED_IN(3).EQ.'C' .AND. MED_IN(4) .EQ. 'U' .AND. MED_IN(
     *            5).EQ.'U' .AND. MED_IN(6).EQ.'M')) THEN
                      MED_INDEX=0
                  ELSE
                      IF ((NMED .NE. 0)) THEN
                          DO 15601 I=1,NMED
                              MED_FLAG = 0
                              DO 15611 J=1,24
                                  IF ((MEDIA(J,I) .NE. MED_IN(J))) THEN
                                      MED_FLAG = 1
                                      GO TO15612
                                  END IF
15611                         CONTINUE
15612                         CONTINUE
                              IF ((MED_FLAG .EQ. 0)) THEN
                                  MED_INDEX = I
                                  GO TO15602
                              END IF
                              IF ((I .EQ. NMED)) THEN
                                  NMED = NMED+1
                                  MED_INDEX = NMED
                                  DO 15621 J=1,24
                                      MEDIA(J,NMED) = MED_IN(J)
15621                             CONTINUE
15622                             CONTINUE
                                  GO TO15602
                              END IF
15601                     CONTINUE
15602                     CONTINUE
                      ELSE
                          NMED = 1
                          MED_INDEX = NMED
                          DO 15631 J=1,24
                              MEDIA(J,NMED) = MED_IN(J)
15631                     CONTINUE
15632                     CONTINUE
                      END IF
                  END IF
                  MED(IRA) = MED_INDEX
                  IF (( DOSE_ZONE(IRA) .GT. 1500 )) THEN
                      WRITE(6,15640)ICM_IONCHAM, IM-N_CHM_IONCHAM-N_TOP_
     *                IONCHAM,1500
15640                 FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'DOSE
     *_ZONE # of inner cylinder in layer ',I4, ' of bottom part > $MAX_D
     *OSE_ZONE.'/ 'DOSE_ZONE # set to ',I4,' for now.'/ 'Probably need t
     *o change $MAX_DOSE_ZONE in beam_user_macros.mortran'//)
                      DOSE_ZONE(IRA)=1500
                      IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
                  ELSE IF((DOSE_ZONE(IRA).NE.0)) THEN
                      IPLOTFLAG=1
                      ZPLOTCHM(DOSE_ZONE(IRA))=Z_IONCHAM(IM)
                      ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_IONCHAM(IM+1)
                  END IF
                  IRA = IRA+1
                  IR_IONCHAM =IR_IONCHAM +1
                  WRITE(6,15650)
15650             FORMAT(' ECUT,PCUT,DOSE ZONE(0=>do not score dose),','
     *IREGION_TO_BIT for outer region'/' :',$)
                  READ(i_input,15660,END=12780,ERR=12790)ECUT(IRA),PCUT(
     *            IRA),DOSE_ZONE(IRA), IREGION_TO_BIT(IRA)
15660             FORMAT (2F15.0,2I5)
                  IF ((ECUT(IRA) .LT. ECUTIN)) THEN
                      ECUT(IRA)=ECUTIN
                  END IF
                  IF ((PCUT(IRA) .LT. PCUTIN)) THEN
                      PCUT(IRA)=PCUTIN
                  END IF
                  WRITE(6,15670)ECUT(IRA),PCUT(IRA), DOSE_ZONE(IRA), IRE
     *            GION_TO_BIT(IRA)
15670             FORMAT(2F10.4,I5,I15)
                  WRITE(6,15680)
15680             FORMAT(' For outer region :',$)
                  WRITE(6,15690)
15690             FORMAT(' MEDIUM (left justify): ',$)
                  READ(i_input,'(24A1)',END=12780,ERR=12790) (MED_IN(J),
     *            J=1,24)
                  WRITE(6,15700)(MED_IN(J),J=1,24)
15700             FORMAT(' ',24A1)
                  IF ((MED_IN(1) .EQ. 'V' .AND. MED_IN(2).EQ.'A' .AND. M
     *            ED_IN(3).EQ.'C' .AND. MED_IN(4) .EQ. 'U' .AND. MED_IN(
     *            5).EQ.'U' .AND. MED_IN(6).EQ.'M')) THEN
                      MED_INDEX=0
                  ELSE
                      IF ((NMED .NE. 0)) THEN
                          DO 15711 I=1,NMED
                              MED_FLAG = 0
                              DO 15721 J=1,24
                                  IF ((MEDIA(J,I) .NE. MED_IN(J))) THEN
                                      MED_FLAG = 1
                                      GO TO15722
                                  END IF
15721                         CONTINUE
15722                         CONTINUE
                              IF ((MED_FLAG .EQ. 0)) THEN
                                  MED_INDEX = I
                                  GO TO15712
                              END IF
                              IF ((I .EQ. NMED)) THEN
                                  NMED = NMED+1
                                  MED_INDEX = NMED
                                  DO 15731 J=1,24
                                      MEDIA(J,NMED) = MED_IN(J)
15731                             CONTINUE
15732                             CONTINUE
                                  GO TO15712
                              END IF
15711                     CONTINUE
15712                     CONTINUE
                      ELSE
                          NMED = 1
                          MED_INDEX = NMED
                          DO 15741 J=1,24
                              MEDIA(J,NMED) = MED_IN(J)
15741                     CONTINUE
15742                     CONTINUE
                      END IF
                  END IF
                  MED(IRA) = MED_INDEX
                  IF (( DOSE_ZONE(IRA) .GT. 1500 )) THEN
                      WRITE(6,15750)ICM_IONCHAM, IM-N_CHM_IONCHAM-N_TOP_
     *                IONCHAM,1500
15750                 FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ 'DOSE
     *_ZONE # of outer annulus in layer ',I4, ' of bottom part > $MAX_DO
     *SE_ZONE.'/ 'DOSE_ZONE # set to ',I4,' for now.'/ 'Probably need to
     * change $MAX_DOSE_ZONE in beam_user_macros.mortran'//)
                      DOSE_ZONE(IRA)=1500
                      IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
                  ELSE IF((DOSE_ZONE(IRA).NE.0)) THEN
                      IPLOTFLAG=1
                      ZPLOTCHM(DOSE_ZONE(IRA))=Z_IONCHAM(IM)
                      ZPLOTCHM(DOSE_ZONE(IRA)+1)=Z_IONCHAM(IM+1)
                  END IF
15461         CONTINUE
15462         CONTINUE
          END IF
      END IF
      ZTHICK_IONCHAM=THICK1+THICK2+THICK3
      ZMAX_IONCHAM=ZMIN_IONCHAM+ZTHICK_IONCHAM
      ZFRONT_IONCHAM = Z_min_CM(ICM_IONCHAM)
      Z_min_CM(ICM_IONCHAM+1) = ZMAX_IONCHAM
      Z_gap_THICK(ICM_IONCHAM) = ZMIN_IONCHAM - Z_min_CM(ICM_IONCHAM)
      IF ((Z_gap_THICK(ICM_IONCHAM) .EQ. 0.0)) THEN
          Z_gap_THICK(ICM_IONCHAM) = 0.
          N_GAP_IONCHAM = 0
      ELSE
          N_GAP_IONCHAM = 1
          WRITE(6,15760)Z_min_CM(ICM_IONCHAM),ZMIN_IONCHAM
15760     FORMAT(/' THERE WILL BE AN AIR GAP SET UP BETWEEN Z=',F8.4,' A
     *ND Z=',F8.4/)
          IRA = IRSTART_IONCHAM+N_IONCHAM
          MED(IRA) = AIR_INDEX
          ECUT(IRA)=ECUTIN
          PCUT(IRA)=PCUTIN
          ESAVE(IRA)=ESAVE_GLOBAL
          ECUTRR(IRA)=ECUT(IRA)
      END IF
      IREND_IONCHAM = (IRSTART_IONCHAM -1) +N_IONCHAM+N_GAP_IONCHAM
      NREG = NREG+N_IONCHAM+N_GAP_IONCHAM
      IF ((NREG .LE. 3000)) THEN
          IR_start_CM(ICM_IONCHAM+1) = IREND_IONCHAM+1
      ELSE
          WRITE(6,15770)ICM_IONCHAM,NREG,3000
15770     FORMAT(//'***ERROR IN CM ',I4,' (CHAMBER):'/ I4,' regions requ
     *ested, only ',I4,' available'//)
          IERR_GEOM(ICM_IONCHAM)=IERR_GEOM(ICM_IONCHAM)+1
      END IF
      RMAX_CM_FLAG(ICM_IONCHAM) = 1
      IRA = IRSTART_IONCHAM-1
      DO 15781 IR_IONCHAM=1,N_IONCHAM
          IRA = IRA+1
          NDOSE_ZONE = MAX(DOSE_ZONE(IRA),NDOSE_ZONE)
          IF ((NDOSE_ZONE.GT.1500)) THEN
              WRITE(6,15790)
15790         FORMAT(///' IN CHAMBER, NDOSE_ZONE OUT OF RANGE!!!'///)
              STOP
          END IF
          MAX_BIT = MAX(IREGION_TO_BIT(IRA),MAX_BIT)
          ESAVE(IRA)=ESAVE_GLOBAL
          ECUTRR(IRA)=ECUT(IRA)
          E_min_out(ICM_IONCHAM)=ECUT(IRA)
15781 CONTINUE
15782 CONTINUE
      I=1
      J=1
15801 CONTINUE
          Z_min_thick(ICM,J)=0.0
          IRA = I + IRSTART_IONCHAM-1
          IF (( MED(IRA).NE.1)) THEN
              MED_min_thick(ICM, J)=MED(IRA)
              Z_min_thick(ICM,J) = Z_IONCHAM(I+1)-Z_IONCHAM(I)
          END IF
          DO 15811 IR_IONCHAM=I+1,N_CHM_IONCHAM
              IRA = IR_IONCHAM + IRSTART_IONCHAM-1
              IF (( MED(IRA).EQ.MED_min_thick(ICM, J) )) THEN
                  Z_min_thick(ICM,J) =Z_min_thick(ICM,J)+ (Z_IONCHAM(IR_
     *            IONCHAM+1)-Z_IONCHAM(IR_IONCHAM-1+1))
              END IF
15811     CONTINUE
15812     CONTINUE
          DO 15821 IR_IONCHAM=I+1,N_CHM_IONCHAM
              IRA = IR_IONCHAM + IRSTART_IONCHAM-1
              III=0
              DO 15831 II=J,1, -1
                  IF ((MED(IRA).NE.MED_min_thick(ICM, II) .AND. MED(IRA)
     *            .NE.1)) THEN
                      III=III+1
                  END IF
15831         CONTINUE
15832         CONTINUE
              IF (( III.EQ.J )) THEN
                  I=IR_IONCHAM
                  J=J+1
                  GO TO15822
              END IF
15821     CONTINUE
15822     CONTINUE
          IF(I.GT.N_CHM_IONCHAM.OR.J.GT.5.OR.IR_IONCHAM.GT.N_CHM_IONCHAM
     *    )GO TO15802
      GO TO 15801
15802 CONTINUE
      IF ((J .LT. 5 )) THEN
          DO 15841 I=1,N_TOP_IONCHAM+N_BOT_IONCHAM
              IRA = N_CHM_IONCHAM+3+2*(I-1)+1+IRSTART_IONCHAM-1
              IF (( RCYS_IONCHAM(N_CHM_IONCHAM+I, 1) .GE. RMAX_CM(ICM_IO
     *        NCHAM) .AND. MED(IRA).NE.1 )) THEN
                  IF ((J.LT.5)) THEN
                      J=J+1
                  ELSE
                      GO TO15842
                  END IF
                  MED_min_thick(ICM, J)=MED(IRA)
                  IF ((I.EQ.1 .AND. N_TOP_IONCHAM.NE.0 )) THEN
                      Z_min_thick(ICM,J) = ( Z_IONCHAM(I+N_CHM_IONCHAM+1
     *                ) -ZMIN_IONCHAM)
                  ELSE IF((I.EQ.N_TOP_IONCHAM+1)) THEN
                      Z_min_thick(ICM,J) = ( Z_IONCHAM(I+N_CHM_IONCHAM+1
     *                ) -Z_IONCHAM(N_CHM_IONCHAM+1) )
                  ELSE
                      Z_min_thick(ICM,J) = ( Z_IONCHAM(I+N_CHM_IONCHAM+1
     *                ) -Z_IONCHAM(I-1+N_CHM_IONCHAM+1) )
                  END IF
              END IF
15841     CONTINUE
15842     CONTINUE
      END IF
      IF ((J .LT. 5)) THEN
          Zminthick=0.0
          DO 15851 I=1,J
              Zminthick=Zminthick+Z_min_thick(ICM, I)
15851     CONTINUE
15852     CONTINUE
          J=J+1
          Z_min_thick(ICM, J)=ZTHICK_IONCHAM+Z_gap_thick(ICM_IONCHAM)-Zm
     *    inthick
          MED_min_thick(ICM,J) = AIR_INDEX
          DO 15861 I=J+1,5
              Z_min_thick(ICM,I) = 0.0
              MED_min_thick(ICM,I) = 0
15861     CONTINUE
15862     CONTINUE
      END IF
      WRITE(6,15870)
15870 FORMAT(/' MRNGE: ENTER 1 to estimate thickness of IONCHAM for ECUT
     *RR'/ ' calculations in automated range rejection; otherwise, do'/'
     * not calculate ECUTRR',$)
      READ(i_input,15880,END=12780,ERR=12790)MRNGE
15880 FORMAT (I5)
      WRITE(6,15890)MRNGE
15890 FORMAT(I5)
      WRITE(6,15900)
15900 FORMAT(' ')
      IF ((MRNGE.NE.1)) THEN
          DO 15911 I=1,5
              Z_min_thick(ICM,I)=0.0
              MED_min_thick(ICM,I)=0
15911     CONTINUE
15912     CONTINUE
      ELSE
          WRITE(6,15920)
15920     FORMAT(/'          Z_min_thick ,     MED_min_thick  ')
          DO 15931 I=1,5
              IF (( Z_min_thick(ICM,I).NE.0.0 )) THEN
                  WRITE(6,15940)Z_min_thick(ICM,I), MED_min_thick(ICM,I)
15940             FORMAT(10X, F8.4, 10X, I5)
              END IF
15931     CONTINUE
15932     CONTINUE
      END IF
      RETURN
12780 CONTINUE
      WRITE(6,15950)ICM
15950 FORMAT(//' *** ERROR *** unexpected end of file reading input forC
     *M',I3)
      STOP
12790 CONTINUE
      WRITE(6,15960)ICM
15960 FORMAT(//' *** ERROR *** format error on input for CM',I3)
      STOP
      END
      SUBROUTINE ISUMRY_IONCHAM
      IMPLICIT NONE
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/CM_IONCHAM/ Z_IONCHAM, ZFRONT_IONCHAM, ZBACK_IONCHAM, ZMIN_
     *IONCHAM, ZMAX_IONCHAM, RCYS_IONCHAM, RCYS2_IONCHAM, TITLE_IONCHAM,
     * ICM_IONCHAM,IRSTART_IONCHAM,IREND_IONCHAM, N_IONCHAM,N_GAP_IONCHA
     *M, N_CHM_IONCHAM, N_TOP_IONCHAM, N_BOT_IONCHAM, IR_IONCHAM
      INTEGER ICM_IONCHAM,IRSTART_IONCHAM,IREND_IONCHAM, N_IONCHAM ,N_GA
     *P_IONCHAM, N_CHM_IONCHAM, N_TOP_IONCHAM, N_BOT_IONCHAM, IR_IONCHAM
      real*8 ZFRONT_IONCHAM, ZBACK_IONCHAM, ZMIN_IONCHAM, ZMAX_IONCHAM,
     *RCYS_IONCHAM(200,3), RCYS2_IONCHAM(200,3)
      REAL*8 Z_IONCHAM(1:200+1)
      CHARACTER*1 TITLE_IONCHAM(60)
      COMMON/GEOM/ NREG
      INTEGER NREG
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      INTEGER ICOLOUR,  IRA,  LAYER, I,J
      real*8 PIL,VOL_IONCHAM(200)
      PIL=4.0*ATAN(1.0)
      I=0
15971 CONTINUE
          I = I+1
          IF (( I.LE.N_CHM_IONCHAM )) THEN
              LAYER=I
          ELSE IF((I.LE.N_CHM_IONCHAM+3 )) THEN
              LAYER=1
          ELSE
              LAYER=N_CHM_IONCHAM+(I-N_CHM_IONCHAM-3+1)/2
          END IF
          IF ((I.LE.N_CHM_IONCHAM)) THEN
              VOL_IONCHAM(I)=PIL*RCYS2_IONCHAM(1,1)*(Z_IONCHAM(I+1)- Z_I
     *        ONCHAM(I))
          ELSE IF(( I.EQ.N_CHM_IONCHAM+1 )) THEN
              VOL_IONCHAM(I)=PIL*(RCYS2_IONCHAM(1,2)-RCYS2_IONCHAM(1,1))
     *         *(Z_IONCHAM(N_CHM_IONCHAM+1)-Z_IONCHAM(1))
          ELSE IF(( I.EQ.N_CHM_IONCHAM+2 )) THEN
              VOL_IONCHAM(I)=PIL*(RCYS2_IONCHAM(1,3)-RCYS2_IONCHAM(1,2))
     *         *(Z_IONCHAM(N_CHM_IONCHAM+1)-Z_IONCHAM(1))
          ELSE IF(( I.EQ.N_CHM_IONCHAM+3 )) THEN
              VOL_IONCHAM(I)=PIL*( RMAX_CM(ICM_IONCHAM)*RMAX_CM(ICM_IONC
     *        HAM) -RCYS2_IONCHAM(1,3)) *(Z_IONCHAM(N_CHM_IONCHAM+1)-Z_I
     *        ONCHAM(1))
          ELSE
              IF (( (LAYER.EQ.N_CHM_IONCHAM+1) .AND. (N_TOP_IONCHAM.NE.0
     *        ))) THEN
                  VOL_IONCHAM(I)=PIL*RCYS2_IONCHAM(LAYER,1)*(Z_IONCHAM(L
     *            AYER+1) -ZMIN_IONCHAM)
              ELSE IF(( LAYER.EQ.N_CHM_IONCHAM+N_TOP_IONCHAM+1 )) THEN
                  VOL_IONCHAM(I)=PIL*RCYS2_IONCHAM(LAYER,1) *(Z_IONCHAM(
     *            LAYER+1)-Z_IONCHAM(N_CHM_IONCHAM+1))
              ELSE
                  VOL_IONCHAM(I)=PIL*RCYS2_IONCHAM(LAYER,1)*(Z_IONCHAM(L
     *            AYER+1) -Z_IONCHAM(LAYER-1+1))
              END IF
              I=I+1
              IF (( (LAYER.EQ.N_CHM_IONCHAM+1) .AND. (N_TOP_IONCHAM.NE.0
     *        ))) THEN
                  VOL_IONCHAM(I)=PIL*( RMAX_CM(ICM_IONCHAM)*RMAX_CM(ICM_
     *            IONCHAM) -RCYS2_IONCHAM(LAYER,1) ) *(Z_IONCHAM(LAYER+1
     *            )-ZMIN_IONCHAM)
              ELSE IF(( LAYER.EQ.N_CHM_IONCHAM+N_TOP_IONCHAM+1 )) THEN
                  VOL_IONCHAM(I)=PIL*( RMAX_CM(ICM_IONCHAM)*RMAX_CM(ICM_
     *            IONCHAM) -RCYS2_IONCHAM(LAYER,1) ) *(Z_IONCHAM(LAYER+1
     *            )-Z_IONCHAM(N_CHM_IONCHAM+1))
              ELSE
                  VOL_IONCHAM(I)=PIL*( RMAX_CM(ICM_IONCHAM)*RMAX_CM(ICM_
     *            IONCHAM) -RCYS2_IONCHAM(LAYER,1) ) *(Z_IONCHAM(LAYER+1
     *            )-Z_IONCHAM(LAYER-1+1))
              END IF
          END IF
          IF(((I.GE.N_IONCHAM)))GO TO15972
      GO TO 15971
15972 CONTINUE
      DO 15981 I=1,N_IONCHAM
          IF (( VOL_IONCHAM(I) .LE.0.0 )) THEN
              WRITE(6,15990)I
15990         FORMAT(/' LOCAL REGION',I4,' IN CHAMBER HAS ZERO VOLUME!'/
     *)
          END IF
15981 CONTINUE
15982 CONTINUE
      IRA = IRSTART_IONCHAM-1
      DO 16001 IR_IONCHAM=1,N_IONCHAM+N_GAP_IONCHAM
          IRA = IRA+1
          IF ((DOSE_ZONE(IRA).NE.0)) THEN
              ID=DOSE_ZONE(IRA)
              AMASS(ID)=AMASS(ID)+VOL_IONCHAM(IR_IONCHAM)*RHOR(IRA)
          END IF
16001 CONTINUE
16002 CONTINUE
      WRITE(IOUTLIST,110) ICM_IONCHAM,TITLE_IONCHAM
      WRITE(IOUTLIST,111) Z_min_CM(ICM_IONCHAM),RMAX_CM(ICM_IONCHAM)
      IF ((N_GAP_IONCHAM.NE.0)) THEN
          IRA=IRSTART_IONCHAM+N_IONCHAM
          WRITE(IOUTLIST,1501)
          WRITE(IOUTLIST,1504)N_IONCHAM+1, 'NA',Z_min_CM(ICM_IONCHAM),ZM
     *    IN_IONCHAM- Z_min_CM(ICM_IONCHAM),RMAX_CM(ICM_IONCHAM), ECUT(I
     *    RA),PCUT(IRA), ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA), (MEDIA(J
     *    ,MED(IRA)),J=1,9)
          WRITE(IOUTLIST,1505)
      END IF
      IRA = IRSTART_IONCHAM-1+3+N_CHM_IONCHAM
      IF (( N_TOP_IONCHAM.NE.0)) THEN
          WRITE(IOUTLIST,1204)
      END IF
      DO 16011 IR_IONCHAM=N_CHM_IONCHAM+1,N_CHM_IONCHAM+N_TOP_IONCHAM
          IRA = IRA+1
          I=(IR_IONCHAM-N_CHM_IONCHAM-1)*2+N_CHM_IONCHAM+3+1
          IF (( IR_IONCHAM.EQ.N_CHM_IONCHAM+1 )) THEN
              IF ((MED(IRA).EQ.0)) THEN
                  ECUT(IRA)=0.0
                  PCUT(IRA)=0.0
                  WRITE(IOUTLIST,1304) I,IR_IONCHAM-N_CHM_IONCHAM, ZMIN_
     *            IONCHAM,Z_IONCHAM(IR_IONCHAM+1)-ZMIN_IONCHAM, RCYS_ION
     *            CHAM(IR_IONCHAM,1), ECUT(IRA),PCUT(IRA), ECUTRR(IRA),E
     *            SAVE(IRA),DOSE_ZONE(IRA),'V','a','c','u','u','m'
              ELSE
                  WRITE(IOUTLIST,1304)I,IR_IONCHAM-N_CHM_IONCHAM, ZMIN_I
     *            ONCHAM,Z_IONCHAM(IR_IONCHAM+1)-ZMIN_IONCHAM, RCYS_IONC
     *            HAM(IR_IONCHAM,1), ECUT(IRA),PCUT(IRA), ECUTRR(IRA),ES
     *            AVE(IRA),DOSE_ZONE(IRA), (MEDIA(J,MED(IRA)),J=1,9)
              END IF
          ELSE
              IF ((MED(IRA).EQ.0)) THEN
                  ECUT(IRA)=0.0
                  PCUT(IRA)=0.0
                  WRITE(IOUTLIST,1304)I,IR_IONCHAM-N_CHM_IONCHAM, Z_IONC
     *            HAM(IR_IONCHAM),Z_IONCHAM(IR_IONCHAM+1)- Z_IONCHAM(IR_
     *            IONCHAM), RCYS_IONCHAM(IR_IONCHAM,1), ECUT(IRA),PCUT(I
     *            RA), ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),'V','a','c'
     *            ,'u','u','m'
              ELSE
                  WRITE(IOUTLIST,1304) I,IR_IONCHAM-N_CHM_IONCHAM, Z_ION
     *            CHAM(IR_IONCHAM),Z_IONCHAM(IR_IONCHAM+1)- Z_IONCHAM(IR
     *            _IONCHAM), RCYS_IONCHAM(IR_IONCHAM,1), ECUT(IRA),PCUT(
     *            IRA), ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA), (MEDIA(J,
     *            MED(IRA)),J=1,9)
              END IF
          END IF
          IRA = IRA+1
          I=I+1
          IF (( IR_IONCHAM.EQ.N_CHM_IONCHAM+1 )) THEN
              IF ((MED(IRA).EQ.0)) THEN
                  ECUT(IRA)=0.0
                  PCUT(IRA)=0.0
                  WRITE(IOUTLIST,1305) I,IR_IONCHAM-N_CHM_IONCHAM, ZMIN_
     *            IONCHAM,Z_IONCHAM(IR_IONCHAM+1)- ZMIN_IONCHAM, RCYS_IO
     *            NCHAM(IR_IONCHAM,1), ECUT(IRA),PCUT(IRA), ECUTRR(IRA),
     *            ESAVE(IRA),DOSE_ZONE(IRA),'V','a','c','u','u','m'
              ELSE
                  WRITE(IOUTLIST,1305) I,IR_IONCHAM-N_CHM_IONCHAM, ZMIN_
     *            IONCHAM,Z_IONCHAM(IR_IONCHAM+1)- ZMIN_IONCHAM, RCYS_IO
     *            NCHAM(IR_IONCHAM,1), ECUT(IRA),PCUT(IRA), ECUTRR(IRA),
     *            ESAVE(IRA),DOSE_ZONE(IRA), (MEDIA(J,MED(IRA)),J=1,9)
              END IF
          ELSE
              IF ((MED(IRA).EQ.0)) THEN
                  ECUT(IRA)=0.0
                  PCUT(IRA)=0.0
                  WRITE(IOUTLIST,1305) I,IR_IONCHAM-N_CHM_IONCHAM, Z_ION
     *            CHAM(IR_IONCHAM),Z_IONCHAM(IR_IONCHAM+1)- Z_IONCHAM(IR
     *            _IONCHAM), RCYS_IONCHAM(IR_IONCHAM,1), ECUT(IRA),PCUT(
     *            IRA), ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),'V','a','c
     *','u','u','m'
              ELSE
                  WRITE(IOUTLIST,1305) I,IR_IONCHAM-N_CHM_IONCHAM, Z_ION
     *            CHAM(IR_IONCHAM),Z_IONCHAM(IR_IONCHAM+1)- Z_IONCHAM(IR
     *            _IONCHAM), RCYS_IONCHAM(IR_IONCHAM,1), ECUT(IRA),PCUT(
     *            IRA), ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA), (MEDIA(J,
     *            MED(IRA)),J=1,9)
              END IF
          END IF
16011 CONTINUE
16012 CONTINUE
      WRITE(IOUTLIST,120)
      IRA = IRSTART_IONCHAM-1
      DO 16021 IR_IONCHAM=1,N_CHM_IONCHAM
          IRA = IRA+1
          IF ((MED(IRA).EQ.0)) THEN
              ECUT(IRA)=0.0
              PCUT(IRA)=0.0
              WRITE(IOUTLIST,130) IR_IONCHAM,IR_IONCHAM,'layer', Z_IONCH
     *        AM(IR_IONCHAM), Z_IONCHAM(IR_IONCHAM+1)-Z_IONCHAM(IR_IONCH
     *        AM), RCYS_IONCHAM(IR_IONCHAM,1), ECUT(IRA),PCUT(IRA), ECUT
     *        RR(IRA),ESAVE(IRA),DOSE_ZONE(IRA),'V','a','c','u','u','m'
          ELSE
              WRITE(IOUTLIST,130) IR_IONCHAM,IR_IONCHAM,'layer', Z_IONCH
     *        AM(IR_IONCHAM), Z_IONCHAM(IR_IONCHAM+1)-Z_IONCHAM(IR_IONCH
     *        AM), RCYS_IONCHAM(IR_IONCHAM,1), ECUT(IRA),PCUT(IRA), ECUT
     *        RR(IRA),ESAVE(IRA),DOSE_ZONE(IRA), (MEDIA(J,MED(IRA)),J=1,
     *        9)
          END IF
16021 CONTINUE
16022 CONTINUE
      IRA=IRA+1
      WRITE(IOUTLIST,1201)
      IF ((MED(IRA).EQ.0)) THEN
          ECUT(IRA)=0.0
          PCUT(IRA)=0.0
          WRITE(IOUTLIST,1301) IR_IONCHAM,'NA','entire', Z_IONCHAM(0+1),
     *     Z_IONCHAM(N_CHM_IONCHAM+1)-Z_IONCHAM(0+1), RCYS_IONCHAM(1,1),
     *     RCYS_IONCHAM(1,2),ECUT(IRA),PCUT(IRA), ECUTRR(IRA),ESAVE(IRA)
     *    ,DOSE_ZONE(IRA),'V','a','c','u','u','m'
      ELSE
          WRITE(IOUTLIST,1301) IR_IONCHAM,'NA','entire', Z_IONCHAM(0+1),
     *     Z_IONCHAM(N_CHM_IONCHAM+1)-Z_IONCHAM(0+1), RCYS_IONCHAM(1,1),
     *     RCYS_IONCHAM(1,2),ECUT(IRA),PCUT(IRA), ECUTRR(IRA),ESAVE(IRA)
     *    ,DOSE_ZONE(IRA), (MEDIA(J,MED(IRA)),J=1,8)
      END IF
      WRITE(IOUTLIST,1310)'wall'
      IRA=IRA+1
      WRITE(IOUTLIST,1202)
      IF ((MED(IRA).EQ.0)) THEN
          ECUT(IRA)=0.0
          PCUT(IRA)=0.0
          WRITE(IOUTLIST,1302) IR_IONCHAM+1,'NA','entire', Z_IONCHAM(0+1
     *    ), Z_IONCHAM(N_CHM_IONCHAM+1)-Z_IONCHAM(0+1), RCYS_IONCHAM(1,2
     *    ), RCYS_IONCHAM(1,3), ECUT(IRA),PCUT(IRA), ECUTRR(IRA),ESAVE(I
     *    RA),DOSE_ZONE(IRA),'V','a','c','u','u','m'
      ELSE
          WRITE(IOUTLIST,1302) IR_IONCHAM+1,'NA','entire', Z_IONCHAM(0+1
     *    ), Z_IONCHAM(N_CHM_IONCHAM+1)-Z_IONCHAM(0+1), RCYS_IONCHAM(1,2
     *    ), RCYS_IONCHAM(1,3), ECUT(IRA),PCUT(IRA), ECUTRR(IRA),ESAVE(I
     *    RA),DOSE_ZONE(IRA), (MEDIA(J,MED(IRA)),J=1,8)
      END IF
      WRITE(IOUTLIST,1311)'gap'
      IRA=IRA+1
      WRITE(IOUTLIST,1203)
      IF ((MED(IRA).EQ.0)) THEN
          ECUT(IRA)=0.0
          PCUT(IRA)=0.0
          WRITE(IOUTLIST,1303) IR_IONCHAM+2,'NA','entire', Z_IONCHAM(0+1
     *    ), Z_IONCHAM(N_CHM_IONCHAM+1)-Z_IONCHAM(0+1), RCYS_IONCHAM(1,3
     *    ), RMAX_CM(ICM_IONCHAM), ECUT(IRA),PCUT(IRA), ECUTRR(IRA),ESAV
     *    E(IRA),DOSE_ZONE(IRA),'V','a','c','u','u','m'
      ELSE
          WRITE(IOUTLIST,1303) IR_IONCHAM+2,'NA','entire', Z_IONCHAM(0+1
     *    ), Z_IONCHAM(N_CHM_IONCHAM+1)-Z_IONCHAM(0+1), RCYS_IONCHAM(1,3
     *    ), RMAX_CM(ICM_IONCHAM), ECUT(IRA),PCUT(IRA), ECUTRR(IRA),ESAV
     *    E(IRA),DOSE_ZONE(IRA), (MEDIA(J,MED(IRA)),J=1,8)
      END IF
      WRITE(IOUTLIST,1312)'wall'
      IRA = IRSTART_IONCHAM-1+3+N_CHM_IONCHAM+2*N_TOP_IONCHAM
      IF (( N_BOT_IONCHAM.NE.0 )) THEN
          WRITE(IOUTLIST,1206)
      END IF
      DO 16031 IR_IONCHAM=N_CHM_IONCHAM+N_TOP_IONCHAM+1,N_CHM_IONCHAM+N_
     *TOP_IONCHAM+N_BOT_IONCHAM
          IRA = IRA+1
          I=(IR_IONCHAM-N_CHM_IONCHAM-1)*2+N_CHM_IONCHAM+3+1
          IF (( IR_IONCHAM.EQ.N_CHM_IONCHAM+N_TOP_IONCHAM+1 )) THEN
              IF ((MED(IRA).EQ.0)) THEN
                  ECUT(IRA)=0.0
                  PCUT(IRA)=0.0
                  WRITE(IOUTLIST,1306) I,IR_IONCHAM-N_CHM_IONCHAM-N_TOP_
     *            IONCHAM, Z_IONCHAM(N_CHM_IONCHAM+1),Z_IONCHAM(IR_IONCH
     *            AM+1)- Z_IONCHAM(N_CHM_IONCHAM+1), RCYS_IONCHAM(IR_ION
     *            CHAM,1), ECUT(IRA),PCUT(IRA), ECUTRR(IRA),ESAVE(IRA),D
     *            OSE_ZONE(IRA),'V','a','c','u','u','m'
              ELSE
                  WRITE(IOUTLIST,1306) I,IR_IONCHAM-N_CHM_IONCHAM-N_TOP_
     *            IONCHAM, Z_IONCHAM(N_CHM_IONCHAM+1),Z_IONCHAM(IR_IONCH
     *            AM+1)- Z_IONCHAM(N_CHM_IONCHAM+1), RCYS_IONCHAM(IR_ION
     *            CHAM,1), ECUT(IRA),PCUT(IRA), ECUTRR(IRA),ESAVE(IRA),D
     *            OSE_ZONE(IRA), (MEDIA(J,MED(IRA)),J=1,9)
              END IF
          ELSE
              IF ((MED(IRA).EQ.0)) THEN
                  ECUT(IRA)=0.0
                  PCUT(IRA)=0.0
                  WRITE(IOUTLIST,1306) I,IR_IONCHAM-N_CHM_IONCHAM-N_TOP_
     *            IONCHAM, Z_IONCHAM(IR_IONCHAM),Z_IONCHAM(IR_IONCHAM+1)
     *            - Z_IONCHAM(IR_IONCHAM), RCYS_IONCHAM(IR_IONCHAM,1), E
     *            CUT(IRA),PCUT(IRA), ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(I
     *            RA),'V','a','c','u','u','m'
              ELSE
                  WRITE(IOUTLIST,1306) I,IR_IONCHAM-N_CHM_IONCHAM-N_TOP_
     *            IONCHAM, Z_IONCHAM(IR_IONCHAM),Z_IONCHAM(IR_IONCHAM+1)
     *            - Z_IONCHAM(IR_IONCHAM), RCYS_IONCHAM(IR_IONCHAM,1), E
     *            CUT(IRA),PCUT(IRA), ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(I
     *            RA), (MEDIA(J,MED(IRA)),J=1,9)
              END IF
          END IF
          IRA = IRA+1
          I=I+1
          IF (( IR_IONCHAM.EQ.N_CHM_IONCHAM+N_TOP_IONCHAM+1 )) THEN
              IF ((MED(IRA).EQ.0)) THEN
                  ECUT(IRA)=0.0
                  PCUT(IRA)=0.0
                  WRITE(IOUTLIST,1307) I,IR_IONCHAM-N_CHM_IONCHAM-N_TOP_
     *            IONCHAM, Z_IONCHAM(N_CHM_IONCHAM+1),Z_IONCHAM(IR_IONCH
     *            AM+1)- Z_IONCHAM(N_CHM_IONCHAM+1), RCYS_IONCHAM(IR_ION
     *            CHAM,1), ECUT(IRA),PCUT(IRA), ECUTRR(IRA),ESAVE(IRA),D
     *            OSE_ZONE(IRA),'V','a','c','u','u','m'
              ELSE
                  WRITE(IOUTLIST,1307) I,IR_IONCHAM-N_CHM_IONCHAM-N_TOP_
     *            IONCHAM, Z_IONCHAM(N_CHM_IONCHAM+1),Z_IONCHAM(IR_IONCH
     *            AM+1)- Z_IONCHAM(N_CHM_IONCHAM+1), RCYS_IONCHAM(IR_ION
     *            CHAM,1), ECUT(IRA),PCUT(IRA), ECUTRR(IRA),ESAVE(IRA),D
     *            OSE_ZONE(IRA), (MEDIA(J,MED(IRA)),J=1,9)
              END IF
          ELSE
              IF ((MED(IRA).EQ.0)) THEN
                  ECUT(IRA)=0.0
                  PCUT(IRA)=0.0
                  WRITE(IOUTLIST,1307) I,IR_IONCHAM-N_CHM_IONCHAM-N_TOP_
     *            IONCHAM, Z_IONCHAM(IR_IONCHAM),Z_IONCHAM(IR_IONCHAM+1)
     *            - Z_IONCHAM(IR_IONCHAM), RCYS_IONCHAM(IR_IONCHAM,1), E
     *            CUT(IRA),PCUT(IRA), ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(I
     *            RA),'V','a','c','u','u','m'
              ELSE
                  WRITE(IOUTLIST,1307) I,IR_IONCHAM-N_CHM_IONCHAM-N_TOP_
     *            IONCHAM, Z_IONCHAM(IR_IONCHAM),Z_IONCHAM(IR_IONCHAM+1)
     *            - Z_IONCHAM(IR_IONCHAM), RCYS_IONCHAM(IR_IONCHAM,1), E
     *            CUT(IRA),PCUT(IRA), ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(I
     *            RA), (MEDIA(J,MED(IRA)),J=1,9)
              END IF
          END IF
16031 CONTINUE
16032 CONTINUE
      DO 16041 I=1,N_IONCHAM
          IF ((VOL_IONCHAM(I).LE.0.0 )) THEN
              WRITE(IOUTLIST,141)I
          END IF
16041 CONTINUE
16042 CONTINUE
110   FORMAT(///1x,79('-')/ '  Component module',I3,' is an ion chambero
     *r phantom ', '(CHAMBER)'/ 1x,79('-')//T5,'Title: ',68A1)
111   FORMAT(/T2,'IONCHAM region & geometry parameters:', /T2,'---------
     *----------------------------', /T2,'Distance of front of CM from r
     *eference plane = ', F15.5,' cm', /T2,'Radius of outer boundary ofC
     *M = ',F15.5,' cm')
120   FORMAT(/T5,'IONCHAM CENTRAL PART parameters:', /T5,'--------------
     *------------------', /T1,' local layer loc.   Z    Zthick  rad.  e
     *lectr photon', ' range-reject  dose  medium', /T1,' reg   front   
     *             cutoff cutoff', ' level   max   zone' /T1,'          
     *         (cm)    (cm)  (cm)   (MeV)  (MeV)', ' (MeV)  (MeV)')
130   FORMAT(T1,I3,I5,A7,F8.3,F8.4,F7.3,4F7.3,I3,2X,9A1)
131   FORMAT(T9,A8)
1201  FORMAT(/T5,'IONCHAM WALL parameters:', /T5,'----------------------
     *----', /T1,' local layer loc.  Z    Zthick     rad.     electr pho
     *ton', ' range-reject dose med', /T1,' reg             front  inner
     *  outer cutoff cutoff', ' level  max   zone' /T1,'        (cm)    
     *(cm)      (cm)      (MeV)  (MeV)', ' (MeV) (MeV)')
1301  FORMAT(T1,I3,A4,A7,F8.3,F7.3,2F7.3,2F6.3,F7.3,F6.3,I3,1X,8A1)
1310  FORMAT(T8,A7)
1202  FORMAT(/T5,'IONCHAM side air gap parameters:', /T5,'--------------
     *-------------------', /T1,' local layer loc.  Z    Zthick     rad.
     *     electr photon', ' range-reject dose med', /T1,' reg   front  
     *       inner  outer cutoff cutoff', ' level  max   zone'/T1,'     
     *            (cm)    (cm)      (cm)      (MeV)  (MeV)',' (MeV) (MeV
     *)')
1302  FORMAT(T1,I3,A4,A7,F8.3,F7.3,2F7.3,2F6.3,F7.3,F6.3,I3,1X,8A1)
1311  FORMAT(T8,A7)
1203  FORMAT(/T5,'IONCHAM container wall parameters:', /T5,'------------
     *-----------------------', /T1,' local layer loc.  Z    Zthickrad. 
     *    electr photon', ' range-reject dose med', /T1,' reg       fron
     *t         inner  outer cutoff cutoff', ' level  max   zone' /T1,' 
     *                (cm)    (cm)      (cm)      (MeV)  (MeV)', ' (MeV)
     * (MeV)')
1303  FORMAT(T1,I3,A4,A7,F8.3,F7.3,2F7.3,2F6.3,F7.3,F6.3,I3,1X,8A1)
1312  FORMAT(T8,A7)
1204  FORMAT(/T5,'IONCHAM TOP PART parameters:', /T5,'------------------
     *-----------', /T1,' local layer loc.   Z    Zthick  inner electr p
     *hoton', ' range-reject  dose  medium', /T1,' reg              fron
     *t           rad. cutoff cutoff', ' level   max   zone' /T1,'      
     *       (cm)   (cm)    (cm)  (MeV)  (MeV)', ' (MeV)  (MeV)')
1304  FORMAT(T1,I3,I5,'  inner',F8.3,F8.4,5F7.3,I3,2X,9A1)
1305  FORMAT(T1,I3,I5,'  outer',F8.3,F8.4,5F7.3,I3,2X,9A1)
1206  FORMAT(/T5,'IONCHAM BOTTOM PART parameters:', /T5,'---------------
     *-----------------', /T1,' local layer loc.   Z    Zthick  inner el
     *ectr photon', ' range-reject  dose  medium', /T1,' reg  front     
     *      rad. cutoff cutoff', ' level   max   zone' /T1,'            
     *       (cm)   (cm)    (cm)  (MeV)  (MeV)', ' (MeV)  (MeV)')
1306  FORMAT(T1,I3,I5,'  inner',F8.3,F8.4,5F7.3,I3,2X,9A1)
1307  FORMAT(T1,I3,I5,'  outer',F8.3,F8.4,5F7.3,I3,2X,9A1)
1501  FORMAT(/T5,'Air gap parameters:', /T5,'-------------------', /T1,'
     * local layer loc.   Z    Zthick   rad. electr photon', ' range-rej
     *ect  dose  medium', /T1,' reg              front                cu
     *toff cutoff', ' level   max   zone' /T1,'                   (cm) (
     *cm)    (cm)  (MeV)  (MeV)', ' (MeV)  (MeV)')
1504  FORMAT(T1,I3,A5,'  airgap',F8.3,F7.3,5F7.3,I3,2X,9A1)
1505  FORMAT(T8,'   at top')
141   FORMAT(/' LOCAL REGION',I4,' IN CHAMBER HAS ZERO VOLUME!')
      IF ((IWATCH .EQ. 4 .OR. IZLAST .EQ. 2)) THEN
          ICOLOUR = MOD(ICM,4)+1
          DO 16051 I=1,N_CHM_IONCHAM+N_TOP_IONCHAM+N_BOT_IONCHAM
              WRITE(IOUTGEOM,201)ICOLOUR,'CYLZ',Z_IONCHAM(I-1+1), RCYS_I
     *        ONCHAM(I,1), Z_IONCHAM(I+1),RCYS_IONCHAM(I,1),0.0,0.0
16051     CONTINUE
16052     CONTINUE
      END IF
201   FORMAT(' ',I1,A4,10(F7.2,','))
      RETURN
      END
      SUBROUTINE HOWNEAR_IONCHAM(DIST)
      implicit none
      COMMON/CM_IONCHAM/ Z_IONCHAM, ZFRONT_IONCHAM, ZBACK_IONCHAM, ZMIN_
     *IONCHAM, ZMAX_IONCHAM, RCYS_IONCHAM, RCYS2_IONCHAM, TITLE_IONCHAM,
     * ICM_IONCHAM,IRSTART_IONCHAM,IREND_IONCHAM, N_IONCHAM,N_GAP_IONCHA
     *M, N_CHM_IONCHAM, N_TOP_IONCHAM, N_BOT_IONCHAM, IR_IONCHAM
      INTEGER ICM_IONCHAM,IRSTART_IONCHAM,IREND_IONCHAM, N_IONCHAM ,N_GA
     *P_IONCHAM, N_CHM_IONCHAM, N_TOP_IONCHAM, N_BOT_IONCHAM, IR_IONCHAM
      real*8 ZFRONT_IONCHAM, ZBACK_IONCHAM, ZMIN_IONCHAM, ZMAX_IONCHAM,
     *RCYS_IONCHAM(200,3), RCYS2_IONCHAM(200,3)
      REAL*8 Z_IONCHAM(1:200+1)
      CHARACTER*1 TITLE_IONCHAM(60)
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      INTEGER LAYER
      real*8 RF_IONCHAM, RF2_IONCHAM, DIST
      IR_IONCHAM=IR(NP)-IRSTART_IONCHAM+1
      IF (( IR_IONCHAM.LE.N_CHM_IONCHAM )) THEN
          LAYER=IR_IONCHAM
      ELSE IF((IR_IONCHAM.LE.N_CHM_IONCHAM+3 )) THEN
          LAYER=1
      ELSE IF((IR_IONCHAM.LE.N_IONCHAM)) THEN
          LAYER=N_CHM_IONCHAM+(IR_IONCHAM-N_CHM_IONCHAM-3+1)/2
      END IF
      RF2_IONCHAM=X(NP)**2+Y(NP)**2
      RF_IONCHAM=SQRT(RF2_IONCHAM)
      IF (( IR_IONCHAM.LE.N_CHM_IONCHAM )) THEN
          DIST=MIN( Z(NP)-Z_IONCHAM(LAYER),  Z_IONCHAM(LAYER+1)-Z(NP),
     *    RCYS_IONCHAM(LAYER,1)-RF_IONCHAM )
          RETURN
      ELSE IF(( IR_IONCHAM.LE.N_CHM_IONCHAM +3 )) THEN
          DIST=MIN( Z(NP)-Z_IONCHAM(1),  Z_IONCHAM(N_CHM_IONCHAM+1)-Z(NP
     *    ),  ABS( RF_IONCHAM -RCYS_IONCHAM(1, 1) ), ABS( RF_IONCHAM -RC
     *    YS_IONCHAM(1, 2) ), ABS( RF_IONCHAM -RCYS_IONCHAM(1, 3) ) )
          RETURN
      ELSE IF(( IR_IONCHAM.LE.N_IONCHAM )) THEN
          DIST=MIN( Z(NP)-ZMIN_IONCHAM,  ABS( Z(NP)-Z_IONCHAM(1) ),  ABS
     *    ( Z(NP)-Z_IONCHAM(N_CHM_IONCHAM+1) ),  ZMAX_IONCHAM-Z(NP),  AB
     *    S(Z(NP)-Z_IONCHAM(LAYER)),   ABS(Z_IONCHAM(LAYER+1)-Z(NP)),
     *      ABS( RCYS_IONCHAM(LAYER,1)-RF_IONCHAM ) )
          RETURN
      ELSE IF(( IR(NP).EQ.IREND_IONCHAM .AND. N_GAP_IONCHAM.EQ.1)) THEN
          DIST=MIN(Z(NP)-ZFRONT_IONCHAM, ZMIN_IONCHAM-Z(NP))
          RETURN
      END IF
      RETURN
      END
      SUBROUTINE HOWFAR_RING
      IMPLICIT NONE
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/CM_RING/ ICM_RING, IRSTART_RING, IREND_RING, N_RING, N_GAP_
     *RING, ISCM_RING, ISCM_MAX_RING, IR_RING, ZFRONT_RING, ZMIN_RING, Z
     *MAX_RING, RMIN_RING, RMAX_RING, RBN_RING, RBNT_RING, RBN2_RING, RB
     *N2T_RING, RMINT_RING, RMAXT_RING, RMIN2_RING, RMIN2T_RING, RMAX2_R
     *ING, RMAX2T_RING, ALO_RING, BLO_RING, BLOT_RING, COSA_RING, NOWALL
     *_RING, TITLE_RING
      INTEGER ICM_RING,IRSTART_RING, IREND_RING,N_RING,N_GAP_RING, ISCM_
     *RING,ISCM_MAX_RING,IR_RING, NOWALL_RING
      real*8 ZFRONT_RING, ZMIN_RING(15), ZMAX_RING(15), RMIN_RING(15), R
     *MAX_RING(15), RBN_RING, RBNT_RING(2), RBN2_RING, RBN2T_RING(2), RM
     *INT_RING(15,2), RMAXT_RING(15,2), RMIN2_RING(15), RMIN2T_RING(15,2
     *), RMAX2_RING(15), RMAX2T_RING(15,2), ALO_RING(15), BLO_RING(15),
     *BLOT_RING(15,2), COSA_RING(15)
      CHARACTER*1 TITLE_RING(60)
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      INTEGER IRNEW_RING,  IB_RING,  IHIT
      real*8 DIST,  XF_RING,  YF_RING,  ZF_RING,  TCON_RING,  SQXY_RING
      real*8 AUP_RING, CUP_RING, TQ_RING, A_RING, B_RING, B2_RING, C_RIN
     *G, COUT_RING, RAD_RING, BUP_RING, DUP_RING, T1_RING, T2_RING, I1,
     *I2
      real*8 one
      parameter (one = 1)
      CALL HOWNEAR_RING(DNEAR(NP))
      IF ((IR_RING .EQ. 3*ISCM_MAX_RING + 1)) THEN
          IF ((W(NP) .GT. 0.0)) THEN
              DIST = (ZMIN_RING(1) - Z(NP))/W(NP)
              IRNEW_RING = IRSTART_RING
              XF_RING = X(NP)+DIST*U(NP)
              YF_RING = Y(NP)+DIST*V(NP)
              SQXY_RING = XF_RING*XF_RING + YF_RING*YF_RING
              IF ((SQXY_RING .GT. RBN2_RING)) THEN
                  IRNEW_RING = IRSTART_RING + 2
              ELSE IF((SQXY_RING .GT. RMIN2_RING(1))) THEN
                  IRNEW_RING = IRSTART_RING + 1
              END IF
              IF ((DIST .LE. USTEP )) THEN
                  USTEP = DIST
                  IRNEW = IRNEW_RING
              END IF
          ELSE IF((W(NP) .LT. 0.0)) THEN
              DIST = (ZFRONT_RING - Z(NP))/W(NP)
              IF ((DIST.LE.0.)) THEN
                  DIST=1.E-16
              END IF
              IF ((DIST .LE. USTEP )) THEN
                  USTEP = DIST
                  CALL WHERE_AM_I(ICM_RING,-1)
              END IF
          END IF
      ELSE IF((IR_RING .EQ. 3*(ISCM_RING-1)+1)) THEN
          IB_RING=1
          IF ((Z(NP) .GT. ZMAX_RING(ISCM_RING) + 1.E-5 .OR. Z(NP) .LT. Z
     *    MIN_RING(ISCM_RING) - 1.E-5 )) THEN
              I1 = I1 +1
              IF ((I1 .GT. 1000)) THEN
                  WRITE(6,16060)ISCM_RING
16060             FORMAT(' ***WARNING in inner cone of layer ',I4,' in R
     *ING'/ ' Z of particle outside the layer.')
              END IF
              IRNEW = 1
              USTEP = 0.0
              RETURN
          END IF
          IF ((X(NP)**2+Y(NP)**2 -(Z(NP)*ALO_RING(ISCM_RING)+ BLOT_RING(
     *    ISCM_RING,IB_RING))**2 .GE. 0.0)) THEN
              IF ((SQRT(X(NP)**2+Y(NP)**2)-Z(NP)*ALO_RING(ISCM_RING)- BL
     *        OT_RING(ISCM_RING,IB_RING).GT.1.E-5)) THEN
                  I1 = I1 +1
                  IF ((I1 .GT. 1000)) THEN
                      WRITE(6,16070)ISCM_RING
16070                 FORMAT(' ***WARNING in inner cone of layer ',I4,'i
     *n RING'/ ' Particle radius > radius of cone.')
                      IF ((ABS(Z(NP)*ALO_RING(ISCM_RING)+BLO_RING(ISCM_R
     *                ING) - RBN_RING) .LT. 1.E-5)) THEN
                          WRITE(6,16080)
16080                     FORMAT(/' Confusion could be because cone touc
     *hes outer wall.')
                      END IF
                  END IF
              END IF
              IRNEW = IRSTART_RING + 3*(ISCM_RING-1) + 1
              USTEP = 0.0
              RETURN
          END IF
          IF ((W(NP) .GT. 0.0)) THEN
              DIST = (ZMAX_RING(ISCM_RING) - Z(NP))/W(NP)
              IF ((DIST .LT. 0)) THEN
                  DIST=0.
              END IF
              IF ((DIST.EQ.0. .AND. ISCM_RING.EQ.ISCM_MAX_RING)) THEN
                  DIST=1.E-16
              END IF
              IRNEW_RING = 1
              XF_RING = X(NP)+DIST*U(NP)
              YF_RING = Y(NP)+DIST*V(NP)
              SQXY_RING = XF_RING*XF_RING + YF_RING*YF_RING
              IF ((SQXY_RING .LE. RMAX2T_RING(ISCM_RING,IB_RING))) THEN
                  IF ((ISCM_RING .NE. ISCM_MAX_RING)) THEN
                      IF ((SQXY_RING .LT. RMIN2_RING(ISCM_RING+1))) THEN
                          IRNEW_RING = IRSTART_RING + 3*ISCM_RING
                      ELSE
                          IRNEW_RING = IRSTART_RING + 3*ISCM_RING + 1
                      END IF
                  END IF
              ELSE
                  AUP_RING = U(NP)**2 + V(NP)**2 - W(NP)**2*ALO_RING(ISC
     *            M_RING)**2
                  BUP_RING = U(NP)*X(NP)+V(NP)*Y(NP) - ALO_RING(ISCM_RIN
     *            G)**2*W(NP)*Z(NP) - ALO_RING(ISCM_RING)*BLOT_RING(ISCM
     *            _RING,IB_RING)*W(NP)
                  CUP_RING = X(NP)**2+Y(NP)**2 -(Z(NP)*ALO_RING(ISCM_RIN
     *            G)+BLOT_RING(ISCM_RING,IB_RING))**2
                  DUP_RING = BUP_RING*BUP_RING - AUP_RING*CUP_RING
                  IF ((AUP_RING .NE. 0.0 .AND. DUP_RING .GE. 0.0)) THEN
                      TQ_RING = -BUP_RING - SIGN(one,BUP_RING)*SQRT(DUP_
     *                RING)
                      T1_RING = TQ_RING/AUP_RING
                      T2_RING = CUP_RING/TQ_RING
                      IF ((T1_RING .GT. 0.0 .AND. T2_RING .GT. 0.0 )) TH
     *                EN
                          TCON_RING = MIN(T1_RING, T2_RING)
                      ELSE
                          TCON_RING = MAX(T1_RING, T2_RING)
                      END IF
                  ELSE
                      TCON_RING=1E5
                  END IF
                  DIST = TCON_RING
                  IRNEW_RING = IRSTART_RING + 3*(ISCM_RING-1) + 1
              END IF
              IF ((DIST .LE. USTEP)) THEN
                  USTEP = DIST
                  IF ((IRNEW_RING .EQ. 1)) THEN
                      CALL WHERE_AM_I(ICM_RING,1)
                  ELSE
                      IRNEW = IRNEW_RING
                  END IF
              END IF
          ELSE IF((W(NP) .LT. 0.0)) THEN
              DIST = (ZMIN_RING(ISCM_RING) - Z(NP))/W(NP)
              IF ((DIST .LT. 0)) THEN
                  DIST=0.
              END IF
              IF ((DIST.EQ.0. .AND. ISCM_RING.EQ.1 .AND. N_GAP_RING.EQ.0
     *        )) THEN
                  DIST=1.E-16
              END IF
              XF_RING = X(NP)+DIST*U(NP)
              YF_RING = Y(NP)+DIST*V(NP)
              SQXY_RING = XF_RING*XF_RING + YF_RING*YF_RING
              IF ((SQXY_RING .GT. RMIN2T_RING(ISCM_RING,IB_RING) )) THEN
                  AUP_RING = U(NP)**2 + V(NP)**2 - W(NP)**2*ALO_RING(ISC
     *            M_RING)**2
                  BUP_RING = U(NP)*X(NP)+V(NP)*Y(NP) - ALO_RING(ISCM_RIN
     *            G)**2*W(NP)*Z(NP) - ALO_RING(ISCM_RING)*BLOT_RING(ISCM
     *            _RING,IB_RING)*W(NP)
                  CUP_RING = X(NP)**2+Y(NP)**2 -(Z(NP)*ALO_RING(ISCM_RIN
     *            G)+BLOT_RING(ISCM_RING,IB_RING))**2
                  DUP_RING = BUP_RING*BUP_RING - AUP_RING*CUP_RING
                  IF ((AUP_RING .NE. 0.0 .AND. DUP_RING .GE. 0.0)) THEN
                      TQ_RING = -BUP_RING - SIGN(one,BUP_RING)*SQRT(DUP_
     *                RING)
                      T1_RING = TQ_RING/AUP_RING
                      T2_RING = CUP_RING/TQ_RING
                      IF ((T1_RING .GT. 0.0 .AND. T2_RING .GT. 0.0 )) TH
     *                EN
                          TCON_RING = MIN(T1_RING, T2_RING)
                      ELSE
                          TCON_RING = MAX(T1_RING, T2_RING)
                      END IF
                  ELSE
                      TCON_RING=1E5
                  END IF
                  DIST = TCON_RING
                  IRNEW_RING = IRSTART_RING + 3*(ISCM_RING-1) + 1
              ELSE
                  IF ((ISCM_RING .EQ. 1)) THEN
                      IRNEW_RING = IRSTART_RING + 3*ISCM_MAX_RING
                      IF ((N_GAP_RING .EQ. 0)) THEN
                          IRNEW_RING = 1
                      END IF
                  ELSE
                      XF_RING = X(NP)+DIST*U(NP)
                      YF_RING = Y(NP)+DIST*V(NP)
                      SQXY_RING = XF_RING*XF_RING + YF_RING*YF_RING
                      IF ((SQXY_RING .LT. RMAX2_RING(ISCM_RING-1))) THEN
                          IRNEW_RING = IRSTART_RING + 3*(ISCM_RING-2)
                      ELSE
                          IRNEW_RING = IRSTART_RING + 3*(ISCM_RING-2) +
     *                    1
                      END IF
                  END IF
              END IF
              IF ((DIST .LE. USTEP)) THEN
                  USTEP = DIST
                  IF ((IRNEW_RING .EQ. 1)) THEN
                      CALL WHERE_AM_I(ICM_RING,-1)
                  ELSE
                      IRNEW = IRNEW_RING
                  END IF
              END IF
          ELSE
              AUP_RING = U(NP)**2 + V(NP)**2 - W(NP)**2*ALO_RING(ISCM_RI
     *        NG)**2
              BUP_RING = U(NP)*X(NP)+V(NP)*Y(NP) - ALO_RING(ISCM_RING)**
     *        2*W(NP)*Z(NP) - ALO_RING(ISCM_RING)*BLOT_RING(ISCM_RING,IB
     *        _RING)*W(NP)
              CUP_RING = X(NP)**2+Y(NP)**2 -(Z(NP)*ALO_RING(ISCM_RING)+B
     *        LOT_RING(ISCM_RING,IB_RING))**2
              DUP_RING = BUP_RING*BUP_RING - AUP_RING*CUP_RING
              IF ((AUP_RING .NE. 0.0 .AND. DUP_RING .GE. 0.0)) THEN
                  TQ_RING = -BUP_RING - SIGN(one,BUP_RING)*SQRT(DUP_RING
     *            )
                  T1_RING = TQ_RING/AUP_RING
                  T2_RING = CUP_RING/TQ_RING
                  IF ((T1_RING .GT. 0.0 .AND. T2_RING .GT. 0.0 )) THEN
                      TCON_RING = MIN(T1_RING, T2_RING)
                  ELSE
                      TCON_RING = MAX(T1_RING, T2_RING)
                  END IF
              ELSE
                  TCON_RING=1E5
              END IF
              DIST = TCON_RING
              IRNEW_RING = IRSTART_RING + 3*(ISCM_RING-1) + 1
              IF ((DIST .LE. USTEP)) THEN
                  USTEP = DIST
                  IRNEW = IRNEW_RING
              END IF
          END IF
      ELSE IF((IR_RING .EQ. 3*(ISCM_RING-1)+2)) THEN
          IB_RING=2
          IF ((Z(NP) .GT. ZMAX_RING(ISCM_RING) + 1.E-5 .OR. Z(NP) .LT. Z
     *    MIN_RING(ISCM_RING) - 1.E-5 )) THEN
              I2 = I2 +1
              IF ((I2 .GT. 1000)) THEN
                  WRITE(6,16090)ISCM_RING
16090             FORMAT(' ***WARNING in outer cone of layer ',I4,' in R
     *ING'/ ' Z of particle outside the layer.')
              END IF
              IRNEW = 1
              USTEP = 0.0
              RETURN
          END IF
          IF ((X(NP)**2+Y(NP)**2 -(Z(NP)*ALO_RING(ISCM_RING)+ BLOT_RING(
     *    ISCM_RING,IB_RING))**2 .LE. 0.0)) THEN
              IF ((Z(NP)*ALO_RING(ISCM_RING)+BLOT_RING(ISCM_RING,IB_RING
     *        )- SQRT(X(NP)**2+Y(NP)**2).GT.1.E-5)) THEN
                  I2 = I2 +1
                  IF ((I2 .GT. 1000)) THEN
                      WRITE(6,16100)ISCM_RING
16100                 FORMAT(' ***WARNING in outer cone of layer ',I4,'i
     *n RING'/ ' Particle radius < radius of inner cone.')
                      IF ((ABS(Z(NP)*ALO_RING(ISCM_RING)+BLO_RING(ISCM_R
     *                ING) - RBN_RING) .LT. 1.E-5)) THEN
                          WRITE(6,16110)
16110                     FORMAT(/' Confusion could be because cone touc
     *hes outer wall.')
                      END IF
                  END IF
              END IF
              IRNEW = IRSTART_RING + 3*(ISCM_RING-1)
              USTEP = 0.0
              RETURN
          END IF
          IF ((W(NP) .GT. 0.0)) THEN
              DIST = (ZMAX_RING(ISCM_RING) - Z(NP))/W(NP)
              IF ((DIST .LT. 0)) THEN
                  DIST=0.
              END IF
              IF ((DIST.EQ.0. .AND. ISCM_RING.EQ.ISCM_MAX_RING)) THEN
                  DIST=1.E-16
              END IF
              IHIT=1
              AUP_RING = U(NP)**2+V(NP)**2 - W(NP)*W(NP)*ALO_RING(ISCM_R
     *        ING)**2
              BUP_RING = U(NP)*X(NP)+V(NP)*Y(NP) - ALO_RING(ISCM_RING)**
     *        2*W(NP)*Z(NP) - ALO_RING(ISCM_RING)*BLOT_RING(ISCM_RING,IB
     *        _RING)*W(NP)
              CUP_RING = X(NP)**2+Y(NP)**2 -(Z(NP)*ALO_RING(ISCM_RING) +
     *         BLOT_RING(ISCM_RING,IB_RING))**2
              DUP_RING = BUP_RING**2 - AUP_RING*CUP_RING
              IF ((DUP_RING .LE. 0.0 .OR. AUP_RING .EQ. 0.0 )) THEN
                  IHIT = 0
              ELSE
                  TQ_RING = -BUP_RING - SIGN(one,BUP_RING)*SQRT(DUP_RING
     *            )
                  T1_RING = TQ_RING/AUP_RING
                  T2_RING = CUP_RING/TQ_RING
                  TCON_RING = MIN(T1_RING, T2_RING)
                  IF ((TCON_RING .LT. 0.0)) THEN
                      TCON_RING = MAX(T1_RING, T2_RING)
                  END IF
                  IF ((TCON_RING .LE. 0.0)) THEN
                      IHIT = 0
                  END IF
              END IF
              IF ((IHIT .EQ. 1)) THEN
                  ZF_RING = Z(NP) + TCON_RING * W(NP)
                  IF ((ZF_RING .LT. ZMAX_RING(ISCM_RING) .AND. ZF_RING .
     *            GT. ZMIN_RING(ISCM_RING))) THEN
                      DIST = TCON_RING
                      IRNEW_RING = IRSTART_RING + 3*(ISCM_RING-1)
                  ELSE
                      XF_RING = X(NP)+DIST*U(NP)
                      YF_RING = Y(NP)+DIST*V(NP)
                      SQXY_RING = XF_RING*XF_RING + YF_RING*YF_RING
                      IF ((ISCM_RING .LT. ISCM_MAX_RING)) THEN
                          IF ((SQXY_RING .LT. RMIN2_RING(ISCM_RING+1)))
     *                    THEN
                              IRNEW_RING = IRSTART_RING + 3*ISCM_RING
                          ELSE IF((SQXY_RING .LT. RBN2T_RING(IB_RING)))
     *                    THEN
                              IRNEW_RING = IRSTART_RING + 3*ISCM_RING +
     *                        1
                          ELSE
                              IRNEW_RING = IRSTART_RING + 3*ISCM_RING +
     *                        1
                              A_RING = U(NP)**2+V(NP)**2
                              B_RING = X(NP)*U(NP)+Y(NP)*V(NP)
                              B2_RING = B_RING**2
                              C_RING = X(NP)**2+Y(NP)**2
                              COUT_RING = C_RING - RBN2T_RING(IB_RING)
                              IF ((COUT_RING .GT. 0.0)) THEN
                                  IF ((IWATCH .GT. 0)) THEN
                                      WRITE(6,16120)COUT_RING
16120                                 FORMAT(' COUT=',E11.3)
                                  END IF
                                  COUT_RING = 0.0
                              END IF
                              IF ((B_RING .GT. 0.0)) THEN
                                  IF (((COUT_RING/B2_RING) .GT. (-1.0E-3
     *                            ))) THEN
                                      TCON_RING=-0.5*COUT_RING/B_RING
                                  ELSE
                                      TCON_RING=-COUT_RING/(SQRT(B2_RING
     *                                - A_RING*COUT_RING)+B_RING)
                                  END IF
                              ELSE IF((B_RING .LT. 0.0)) THEN
                                  IF ((COUT_RING/B2_RING .GT. (-1.0E-3))
     *                            ) THEN
                                      TCON_RING = -2.*B_RING/A_RING*(1.-
     *                                 0.25*A_RING*COUT_RING/B2_RING)
                                  ELSE
                                      TCON_RING=(SQRT(B2_RING-A_RING*COU
     *                                T_RING)- B_RING)/A_RING
                                  END IF
                              ELSE IF((A_RING .EQ. 0.0)) THEN
                                  TCON_RING = 1E30
                              ELSE
                                  TCON_RING=SQRT(-COUT_RING/A_RING)
                              END IF
                              DIST = TCON_RING
                              IRNEW_RING = IRSTART_RING + 3*(ISCM_RING-1
     *                        ) + 2
                          END IF
                      ELSE
                          IRNEW_RING = 1
                          IF ((SQXY_RING .GT. RBN2T_RING(IB_RING))) THEN
                              A_RING = U(NP)**2+V(NP)**2
                              B_RING = X(NP)*U(NP)+Y(NP)*V(NP)
                              B2_RING = B_RING**2
                              C_RING = X(NP)**2+Y(NP)**2
                              COUT_RING = C_RING - RBN2T_RING(IB_RING)
                              IF ((COUT_RING .GT. 0.0)) THEN
                                  IF ((IWATCH .GT. 0)) THEN
                                      WRITE(6,16130)COUT_RING
16130                                 FORMAT(' COUT=',E11.3)
                                  END IF
                                  COUT_RING = 0.0
                              END IF
                              IF ((B_RING .GT. 0.0)) THEN
                                  IF (((COUT_RING/B2_RING) .GT. (-1.0E-3
     *                            ))) THEN
                                      TCON_RING=-0.5*COUT_RING/B_RING
                                  ELSE
                                      TCON_RING=-COUT_RING/(SQRT(B2_RING
     *                                - A_RING*COUT_RING)+B_RING)
                                  END IF
                              ELSE IF((B_RING .LT. 0.0)) THEN
                                  IF ((COUT_RING/B2_RING .GT. (-1.0E-3))
     *                            ) THEN
                                      TCON_RING = -2.*B_RING/A_RING*(1.-
     *                                 0.25*A_RING*COUT_RING/B2_RING)
                                  ELSE
                                      TCON_RING=(SQRT(B2_RING-A_RING*COU
     *                                T_RING)- B_RING)/A_RING
                                  END IF
                              ELSE IF((A_RING .EQ. 0.0)) THEN
                                  TCON_RING = 1E30
                              ELSE
                                  TCON_RING=SQRT(-COUT_RING/A_RING)
                              END IF
                              DIST = TCON_RING
                              IRNEW_RING = IRSTART_RING + 3*(ISCM_RING-1
     *                        ) + 2
                          END IF
                      END IF
                  END IF
              ELSE
                  XF_RING = X(NP)+DIST*U(NP)
                  YF_RING = Y(NP)+DIST*V(NP)
                  SQXY_RING = XF_RING*XF_RING + YF_RING*YF_RING
                  IF ((ISCM_RING .LT. ISCM_MAX_RING)) THEN
                      IF ((SQXY_RING .LT. RMIN2_RING(ISCM_RING+1))) THEN
                          IRNEW_RING = IRSTART_RING + 3*ISCM_RING
                      ELSE IF((SQXY_RING .LT. RBN2T_RING(IB_RING))) THEN
                          IRNEW_RING = IRSTART_RING + 3*ISCM_RING + 1
                      ELSE
                          IRNEW_RING = IRSTART_RING + 3*ISCM_RING + 1
                          A_RING = U(NP)**2+V(NP)**2
                          B_RING = X(NP)*U(NP)+Y(NP)*V(NP)
                          B2_RING = B_RING**2
                          C_RING = X(NP)**2+Y(NP)**2
                          COUT_RING = C_RING - RBN2T_RING(IB_RING)
                          IF ((COUT_RING .GT. 0.0)) THEN
                              IF ((IWATCH .GT. 0)) THEN
                                  WRITE(6,16140)COUT_RING
16140                             FORMAT(' COUT=',E11.3)
                              END IF
                              COUT_RING = 0.0
                          END IF
                          IF ((B_RING .GT. 0.0)) THEN
                              IF (((COUT_RING/B2_RING) .GT. (-1.0E-3)))
     *                        THEN
                                  TCON_RING=-0.5*COUT_RING/B_RING
                              ELSE
                                  TCON_RING=-COUT_RING/(SQRT(B2_RING- A_
     *                            RING*COUT_RING)+B_RING)
                              END IF
                          ELSE IF((B_RING .LT. 0.0)) THEN
                              IF ((COUT_RING/B2_RING .GT. (-1.0E-3))) TH
     *                        EN
                                  TCON_RING = -2.*B_RING/A_RING*(1.- 0.2
     *                            5*A_RING*COUT_RING/B2_RING)
                              ELSE
                                  TCON_RING=(SQRT(B2_RING-A_RING*COUT_RI
     *                            NG)- B_RING)/A_RING
                              END IF
                          ELSE IF((A_RING .EQ. 0.0)) THEN
                              TCON_RING = 1E30
                          ELSE
                              TCON_RING=SQRT(-COUT_RING/A_RING)
                          END IF
                          DIST = TCON_RING
                          IRNEW_RING = IRSTART_RING + 3*(ISCM_RING-1) +
     *                    2
                      END IF
                  ELSE
                      IRNEW_RING = 1
                      IF ((SQXY_RING .GT. RBN2T_RING(IB_RING))) THEN
                          A_RING = U(NP)**2+V(NP)**2
                          B_RING = X(NP)*U(NP)+Y(NP)*V(NP)
                          B2_RING = B_RING**2
                          C_RING = X(NP)**2+Y(NP)**2
                          COUT_RING = C_RING - RBN2T_RING(IB_RING)
                          IF ((COUT_RING .GT. 0.0)) THEN
                              IF ((IWATCH .GT. 0)) THEN
                                  WRITE(6,16150)COUT_RING
16150                             FORMAT(' COUT=',E11.3)
                              END IF
                              COUT_RING = 0.0
                          END IF
                          IF ((B_RING .GT. 0.0)) THEN
                              IF (((COUT_RING/B2_RING) .GT. (-1.0E-3)))
     *                        THEN
                                  TCON_RING=-0.5*COUT_RING/B_RING
                              ELSE
                                  TCON_RING=-COUT_RING/(SQRT(B2_RING- A_
     *                            RING*COUT_RING)+B_RING)
                              END IF
                          ELSE IF((B_RING .LT. 0.0)) THEN
                              IF ((COUT_RING/B2_RING .GT. (-1.0E-3))) TH
     *                        EN
                                  TCON_RING = -2.*B_RING/A_RING*(1.- 0.2
     *                            5*A_RING*COUT_RING/B2_RING)
                              ELSE
                                  TCON_RING=(SQRT(B2_RING-A_RING*COUT_RI
     *                            NG)- B_RING)/A_RING
                              END IF
                          ELSE IF((A_RING .EQ. 0.0)) THEN
                              TCON_RING = 1E30
                          ELSE
                              TCON_RING=SQRT(-COUT_RING/A_RING)
                          END IF
                          DIST = TCON_RING
                          IRNEW_RING = IRSTART_RING + 3*(ISCM_RING-1) +
     *                    2
                      END IF
                  END IF
              END IF
              IF ((DIST .LE. USTEP)) THEN
                  USTEP = DIST
                  IF (( IRNEW_RING .EQ. 1 )) THEN
                      CALL WHERE_AM_I(ICM_RING,1)
                  ELSE
                      IRNEW = IRNEW_RING
                  END IF
              END IF
          ELSE IF((W(NP) .LT. 0.0)) THEN
              DIST = (ZMIN_RING(ISCM_RING) - Z(NP))/W(NP)
              IF ((DIST .LT. 0)) THEN
                  DIST=0.
              END IF
              IF ((ISCM_RING .EQ. 1)) THEN
                  IHIT=1
                  AUP_RING = U(NP)**2+V(NP)**2 - W(NP)*W(NP)*ALO_RING(IS
     *            CM_RING)**2
                  BUP_RING = U(NP)*X(NP)+V(NP)*Y(NP) - ALO_RING(ISCM_RIN
     *            G)**2*W(NP)*Z(NP) - ALO_RING(ISCM_RING)*BLOT_RING(ISCM
     *            _RING,IB_RING)*W(NP)
                  CUP_RING = X(NP)**2+Y(NP)**2 -(Z(NP)*ALO_RING(ISCM_RIN
     *            G) + BLOT_RING(ISCM_RING,IB_RING))**2
                  DUP_RING = BUP_RING**2 - AUP_RING*CUP_RING
                  IF ((DUP_RING .LE. 0.0 .OR. AUP_RING .EQ. 0.0 )) THEN
                      IHIT = 0
                  ELSE
                      TQ_RING = -BUP_RING - SIGN(one,BUP_RING)*SQRT(DUP_
     *                RING)
                      T1_RING = TQ_RING/AUP_RING
                      T2_RING = CUP_RING/TQ_RING
                      TCON_RING = MIN(T1_RING, T2_RING)
                      IF ((TCON_RING .LT. 0.0)) THEN
                          TCON_RING = MAX(T1_RING, T2_RING)
                      END IF
                      IF ((TCON_RING .LE. 0.0)) THEN
                          IHIT = 0
                      END IF
                  END IF
                  IF ((IHIT .EQ. 0 .AND. DIST.EQ.0.)) THEN
                      IRNEW_RING = IRSTART_RING + 3*ISCM_MAX_RING
                  ELSE IF((IHIT .EQ. 1)) THEN
                      ZF_RING = Z(NP) + TCON_RING * W(NP)
                      IF ((ZF_RING .GT. ZMIN_RING(ISCM_RING) .AND. ZF_RI
     *                NG .LT. ZMAX_RING(ISCM_RING))) THEN
                          DIST = TCON_RING
                          IRNEW_RING = IRSTART_RING
                      ELSE
                          IRNEW_RING = IRSTART_RING + 3*ISCM_MAX_RING
                      END IF
                  ELSE
                      IRNEW_RING = IRSTART_RING + 3*ISCM_MAX_RING
                      XF_RING = X(NP)+DIST*U(NP)
                      YF_RING = Y(NP)+DIST*V(NP)
                      SQXY_RING = XF_RING*XF_RING + YF_RING*YF_RING
                      IF ((SQXY_RING .GT. RBN2T_RING(IB_RING))) THEN
                          A_RING = U(NP)**2+V(NP)**2
                          B_RING = X(NP)*U(NP)+Y(NP)*V(NP)
                          B2_RING = B_RING**2
                          C_RING = X(NP)**2+Y(NP)**2
                          COUT_RING = C_RING - RBN2T_RING(IB_RING)
                          IF ((COUT_RING .GT. 0.0)) THEN
                              IF ((IWATCH .GT. 0)) THEN
                                  WRITE(6,16160)COUT_RING
16160                             FORMAT(' COUT=',E11.3)
                              END IF
                              COUT_RING = 0.0
                          END IF
                          IF ((B_RING .GT. 0.0)) THEN
                              IF (((COUT_RING/B2_RING) .GT. (-1.0E-3)))
     *                        THEN
                                  TCON_RING=-0.5*COUT_RING/B_RING
                              ELSE
                                  TCON_RING=-COUT_RING/(SQRT(B2_RING- A_
     *                            RING*COUT_RING)+B_RING)
                              END IF
                          ELSE IF((B_RING .LT. 0.0)) THEN
                              IF ((COUT_RING/B2_RING .GT. (-1.0E-3))) TH
     *                        EN
                                  TCON_RING = -2.*B_RING/A_RING*(1.- 0.2
     *                            5*A_RING*COUT_RING/B2_RING)
                              ELSE
                                  TCON_RING=(SQRT(B2_RING-A_RING*COUT_RI
     *                            NG)- B_RING)/A_RING
                              END IF
                          ELSE IF((A_RING .EQ. 0.0)) THEN
                              TCON_RING = 1E30
                          ELSE
                              TCON_RING=SQRT(-COUT_RING/A_RING)
                          END IF
                          IF ((TCON_RING*W(NP)+Z(NP) .GT. ZMIN_RING(ISCM
     *                    _RING) .AND. TCON_RING*W(NP)+Z(NP) .LT. ZMAX_R
     *                    ING(ISCM_RING))) THEN
                              DIST = TCON_RING
                              IRNEW_RING = IRSTART_RING + 3*(ISCM_RING-1
     *                        ) + 2
                          END IF
                      END IF
                  END IF
                  IF ((IRNEW_RING .EQ. IRSTART_RING + 3*ISCM_MAX_RING .A
     *            ND. N_GAP_RING.EQ.0 .AND. DIST.EQ.0.)) THEN
                      DIST=1.0E-16
                  END IF
              ELSE
                  IHIT=1
                  AUP_RING = U(NP)**2+V(NP)**2 - W(NP)*W(NP)*ALO_RING(IS
     *            CM_RING)**2
                  BUP_RING = U(NP)*X(NP)+V(NP)*Y(NP) - ALO_RING(ISCM_RIN
     *            G)**2*W(NP)*Z(NP) - ALO_RING(ISCM_RING)*BLOT_RING(ISCM
     *            _RING,IB_RING)*W(NP)
                  CUP_RING = X(NP)**2+Y(NP)**2 -(Z(NP)*ALO_RING(ISCM_RIN
     *            G) + BLOT_RING(ISCM_RING,IB_RING))**2
                  DUP_RING = BUP_RING**2 - AUP_RING*CUP_RING
                  IF ((DUP_RING .LE. 0.0 .OR. AUP_RING .EQ. 0.0 )) THEN
                      IHIT = 0
                  ELSE
                      TQ_RING = -BUP_RING - SIGN(one,BUP_RING)*SQRT(DUP_
     *                RING)
                      T1_RING = TQ_RING/AUP_RING
                      T2_RING = CUP_RING/TQ_RING
                      TCON_RING = MIN(T1_RING, T2_RING)
                      IF ((TCON_RING .LT. 0.0)) THEN
                          TCON_RING = MAX(T1_RING, T2_RING)
                      END IF
                      IF ((TCON_RING .LE. 0.0)) THEN
                          IHIT = 0
                      END IF
                  END IF
                  IF ((IHIT .EQ. 1)) THEN
                      ZF_RING = Z(NP) + TCON_RING * W(NP)
                      IF ((ZF_RING .GT. ZMIN_RING(ISCM_RING) .AND. ZF_RI
     *                NG .LT. ZMAX_RING(ISCM_RING))) THEN
                          DIST = TCON_RING
                          IRNEW_RING = IRSTART_RING + 3*(ISCM_RING -1)
                      ELSE
                          XF_RING = X(NP)+DIST*U(NP)
                          YF_RING = Y(NP)+DIST*V(NP)
                          SQXY_RING = XF_RING*XF_RING + YF_RING*YF_RING
                          IF ((SQXY_RING .LT. RBN2T_RING(IB_RING))) THEN
                              IRNEW_RING = IRSTART_RING + 3*(ISCM_RING-2
     *                        ) + 1
                          ELSE IF((SQXY_RING .GT. RBN2T_RING(IB_RING)))
     *                    THEN
                              IRNEW_RING = IRSTART_RING + 3*(ISCM_RING-2
     *                        ) + 1
                              A_RING = U(NP)**2+V(NP)**2
                              B_RING = X(NP)*U(NP)+Y(NP)*V(NP)
                              B2_RING = B_RING**2
                              C_RING = X(NP)**2+Y(NP)**2
                              COUT_RING = C_RING - RBN2T_RING(IB_RING)
                              IF ((COUT_RING .GT. 0.0)) THEN
                                  IF ((IWATCH .GT. 0)) THEN
                                      WRITE(6,16170)COUT_RING
16170                                 FORMAT(' COUT=',E11.3)
                                  END IF
                                  COUT_RING = 0.0
                              END IF
                              IF ((B_RING .GT. 0.0)) THEN
                                  IF (((COUT_RING/B2_RING) .GT. (-1.0E-3
     *                            ))) THEN
                                      TCON_RING=-0.5*COUT_RING/B_RING
                                  ELSE
                                      TCON_RING=-COUT_RING/(SQRT(B2_RING
     *                                - A_RING*COUT_RING)+B_RING)
                                  END IF
                              ELSE IF((B_RING .LT. 0.0)) THEN
                                  IF ((COUT_RING/B2_RING .GT. (-1.0E-3))
     *                            ) THEN
                                      TCON_RING = -2.*B_RING/A_RING*(1.-
     *                                 0.25*A_RING*COUT_RING/B2_RING)
                                  ELSE
                                      TCON_RING=(SQRT(B2_RING-A_RING*COU
     *                                T_RING)- B_RING)/A_RING
                                  END IF
                              ELSE IF((A_RING .EQ. 0.0)) THEN
                                  TCON_RING = 1E30
                              ELSE
                                  TCON_RING=SQRT(-COUT_RING/A_RING)
                              END IF
                              DIST = TCON_RING
                              IRNEW_RING = IRSTART_RING + 3*(ISCM_RING-1
     *                        ) + 2
                          END IF
                      END IF
                  ELSE
                      XF_RING = X(NP)+DIST*U(NP)
                      YF_RING = Y(NP)+DIST*V(NP)
                      SQXY_RING = XF_RING*XF_RING + YF_RING*YF_RING
                      IRNEW_RING = IRSTART_RING + 3*(ISCM_RING-2) + 1
                      IF ((SQXY_RING .GT. RBN2T_RING(IB_RING))) THEN
                          A_RING = U(NP)**2+V(NP)**2
                          B_RING = X(NP)*U(NP)+Y(NP)*V(NP)
                          B2_RING = B_RING**2
                          C_RING = X(NP)**2+Y(NP)**2
                          COUT_RING = C_RING - RBN2T_RING(IB_RING)
                          IF ((COUT_RING .GT. 0.0)) THEN
                              IF ((IWATCH .GT. 0)) THEN
                                  WRITE(6,16180)COUT_RING
16180                             FORMAT(' COUT=',E11.3)
                              END IF
                              COUT_RING = 0.0
                          END IF
                          IF ((B_RING .GT. 0.0)) THEN
                              IF (((COUT_RING/B2_RING) .GT. (-1.0E-3)))
     *                        THEN
                                  TCON_RING=-0.5*COUT_RING/B_RING
                              ELSE
                                  TCON_RING=-COUT_RING/(SQRT(B2_RING- A_
     *                            RING*COUT_RING)+B_RING)
                              END IF
                          ELSE IF((B_RING .LT. 0.0)) THEN
                              IF ((COUT_RING/B2_RING .GT. (-1.0E-3))) TH
     *                        EN
                                  TCON_RING = -2.*B_RING/A_RING*(1.- 0.2
     *                            5*A_RING*COUT_RING/B2_RING)
                              ELSE
                                  TCON_RING=(SQRT(B2_RING-A_RING*COUT_RI
     *                            NG)- B_RING)/A_RING
                              END IF
                          ELSE IF((A_RING .EQ. 0.0)) THEN
                              TCON_RING = 1E30
                          ELSE
                              TCON_RING=SQRT(-COUT_RING/A_RING)
                          END IF
                          DIST = TCON_RING
                          IRNEW_RING = IRSTART_RING + 3*(ISCM_RING-1) +
     *                    2
                      END IF
                  END IF
              END IF
              IF ((DIST .LE. USTEP)) THEN
                  USTEP = DIST
                  IF ((N_GAP_RING .EQ. 0 )) THEN
                      IF ((IRNEW_RING .GE. IRSTART_RING + 3*ISCM_MAX_RIN
     *                G)) THEN
                          CALL WHERE_AM_I(ICM_RING,-1)
                      ELSE
                          IRNEW = IRNEW_RING
                      END IF
                  ELSE
                      IRNEW = IRNEW_RING
                  END IF
              END IF
          ELSE
              IHIT=1
              AUP_RING = U(NP)**2+V(NP)**2 - W(NP)*W(NP)*ALO_RING(ISCM_R
     *        ING)**2
              BUP_RING = U(NP)*X(NP)+V(NP)*Y(NP) - ALO_RING(ISCM_RING)**
     *        2*W(NP)*Z(NP) - ALO_RING(ISCM_RING)*BLOT_RING(ISCM_RING,IB
     *        _RING)*W(NP)
              CUP_RING = X(NP)**2+Y(NP)**2 -(Z(NP)*ALO_RING(ISCM_RING) +
     *         BLOT_RING(ISCM_RING,IB_RING))**2
              DUP_RING = BUP_RING**2 - AUP_RING*CUP_RING
              IF ((DUP_RING .LE. 0.0 .OR. AUP_RING .EQ. 0.0 )) THEN
                  IHIT = 0
              ELSE
                  TQ_RING = -BUP_RING - SIGN(one,BUP_RING)*SQRT(DUP_RING
     *            )
                  T1_RING = TQ_RING/AUP_RING
                  T2_RING = CUP_RING/TQ_RING
                  TCON_RING = MIN(T1_RING, T2_RING)
                  IF ((TCON_RING .LT. 0.0)) THEN
                      TCON_RING = MAX(T1_RING, T2_RING)
                  END IF
                  IF ((TCON_RING .LE. 0.0)) THEN
                      IHIT = 0
                  END IF
              END IF
              IF ((IHIT .EQ. 1)) THEN
                  DIST = TCON_RING
                  IRNEW_RING = IRSTART_RING + 3*(ISCM_RING-1)
              ELSE
                  A_RING = U(NP)**2+V(NP)**2
                  B_RING = X(NP)*U(NP)+Y(NP)*V(NP)
                  B2_RING = B_RING**2
                  C_RING = X(NP)**2+Y(NP)**2
                  COUT_RING = C_RING - RBN2T_RING(IB_RING)
                  IF ((COUT_RING .GT. 0.0)) THEN
                      IF ((IWATCH .GT. 0)) THEN
                          WRITE(6,16190)COUT_RING
16190                     FORMAT(' COUT=',E11.3)
                      END IF
                      COUT_RING = 0.0
                  END IF
                  IF ((B_RING .GT. 0.0)) THEN
                      IF (((COUT_RING/B2_RING) .GT. (-1.0E-3))) THEN
                          TCON_RING=-0.5*COUT_RING/B_RING
                      ELSE
                          TCON_RING=-COUT_RING/(SQRT(B2_RING- A_RING*COU
     *                    T_RING)+B_RING)
                      END IF
                  ELSE IF((B_RING .LT. 0.0)) THEN
                      IF ((COUT_RING/B2_RING .GT. (-1.0E-3))) THEN
                          TCON_RING = -2.*B_RING/A_RING*(1.- 0.25*A_RING
     *                    *COUT_RING/B2_RING)
                      ELSE
                          TCON_RING=(SQRT(B2_RING-A_RING*COUT_RING)- B_R
     *                    ING)/A_RING
                      END IF
                  ELSE IF((A_RING .EQ. 0.0)) THEN
                      TCON_RING = 1E30
                  ELSE
                      TCON_RING=SQRT(-COUT_RING/A_RING)
                  END IF
                  DIST = TCON_RING
                  IRNEW_RING = IRSTART_RING + 3*(ISCM_RING-1) + 2
              END IF
              IF ((DIST .LE. USTEP)) THEN
                  USTEP = DIST
                  IRNEW = IRNEW_RING
              END IF
          END IF
      ELSE IF((IR_RING .EQ. 3*(ISCM_RING-1)+3)) THEN
          IB_RING = 1
          IF ((W(NP) .GT. 0.0)) THEN
              DIST = (ZMAX_RING(ISCM_RING) - Z(NP))/W(NP)
              IF ((DIST .LT. 0)) THEN
                  DIST=0.
              END IF
              IF ((DIST.EQ.0. .AND. ISCM_RING.EQ.ISCM_MAX_RING)) THEN
                  DIST=1.E-16
              END IF
              IRNEW_RING = IRSTART_RING + 3*ISCM_RING + 2
              IF ((ISCM_RING .EQ. ISCM_MAX_RING)) THEN
                  IRNEW_RING = 1
              END IF
              IF ((U(NP)*X(NP)+V(NP)*Y(NP) .LT. 0)) THEN
                  A_RING = U(NP)**2+V(NP)**2
                  B_RING = X(NP)*U(NP)+Y(NP)*V(NP)
                  B2_RING = B_RING**2
                  C_RING = X(NP)**2+Y(NP)**2
                  IF ((B_RING.GE.0.0 .OR. A_RING .EQ. 0.0)) THEN
                      IHIT=0
                      TCON_RING=1.0E20
                  ELSE
                      COUT_RING = C_RING - RBN2T_RING(IB_RING)
                      IF ((COUT_RING .LT. 0.0)) THEN
                          IF ((IWATCH.GT.0)) THEN
                              WRITE(6,16200)COUT_RING
16200                         FORMAT(' CIN=',E11.3)
                          END IF
                          COUT_RING=0.0
                      END IF
                      RAD_RING = B2_RING - A_RING*COUT_RING
                      IF ((RAD_RING .LT. 0.0)) THEN
                          IHIT = 0
                          TCON_RING=1E20
                      ELSE
                          IHIT=1
                          IF ((COUT_RING/B2_RING .LT. 1.0E-3)) THEN
                              TCON_RING=-0.5*COUT_RING/B_RING
                          ELSE
                              IF (((SQRT(RAD_RING)-B_RING) .NE. 0.0)) TH
     *                        EN
                                  TCON_RING = COUT_RING/(SQRT(RAD_RING)-
     *                            B_RING)
                              ELSE
                                  TCON_RING = 1.0E30
                              END IF
                          END IF
                      END IF
                  END IF
                  IF ((IHIT .EQ. 1)) THEN
                      ZF_RING = Z(NP) + TCON_RING * W(NP)
                      IF ((ZF_RING .LT. ZMAX_RING(ISCM_RING).AND. ZF_RIN
     *                G .GT. ZMIN_RING(ISCM_RING))) THEN
                          IRNEW_RING = IRSTART_RING + 3*(ISCM_RING-1) +
     *                    1
                          DIST = TCON_RING
                      END IF
                  END IF
              END IF
              IF ((DIST .LE. USTEP)) THEN
                  USTEP = DIST
                  IF ((IRNEW_RING .EQ. 1 )) THEN
                      CALL WHERE_AM_I(ICM_RING,1)
                  ELSE
                      IRNEW = IRNEW_RING
                  END IF
              END IF
          ELSE IF((W(NP) .LT. 0.0)) THEN
              DIST = (ZMIN_RING(ISCM_RING) - Z(NP))/W(NP)
              IF ((DIST .LT. 0)) THEN
                  DIST=0.
              END IF
              IF ((DIST.EQ.0. .AND. N_GAP_RING .EQ. 0 .AND. ISCM_RING .E
     *        Q. 1)) THEN
                  DIST=1.E-16
              END IF
              IF ((ISCM_RING .EQ. 1)) THEN
                  IRNEW_RING = IRSTART_RING + 3*ISCM_MAX_RING
                  IF ((N_GAP_RING .EQ. 0)) THEN
                      IRNEW_RING = 1
                  END IF
                  IF ((U(NP)*X(NP)+V(NP)*Y(NP) .LT. 0)) THEN
                      A_RING = U(NP)**2+V(NP)**2
                      B_RING = X(NP)*U(NP)+Y(NP)*V(NP)
                      B2_RING = B_RING**2
                      C_RING = X(NP)**2+Y(NP)**2
                      IF ((B_RING.GE.0.0 .OR. A_RING .EQ. 0.0)) THEN
                          IHIT=0
                          TCON_RING=1.0E20
                      ELSE
                          COUT_RING = C_RING - RBN2T_RING(IB_RING)
                          IF ((COUT_RING .LT. 0.0)) THEN
                              IF ((IWATCH.GT.0)) THEN
                                  WRITE(6,16210)COUT_RING
16210                             FORMAT(' CIN=',E11.3)
                              END IF
                              COUT_RING=0.0
                          END IF
                          RAD_RING = B2_RING - A_RING*COUT_RING
                          IF ((RAD_RING .LT. 0.0)) THEN
                              IHIT = 0
                              TCON_RING=1E20
                          ELSE
                              IHIT=1
                              IF ((COUT_RING/B2_RING .LT. 1.0E-3)) THEN
                                  TCON_RING=-0.5*COUT_RING/B_RING
                              ELSE
                                  IF (((SQRT(RAD_RING)-B_RING) .NE. 0.0)
     *                            ) THEN
                                      TCON_RING = COUT_RING/(SQRT(RAD_RI
     *                                NG)-B_RING)
                                  ELSE
                                      TCON_RING = 1.0E30
                                  END IF
                              END IF
                          END IF
                      END IF
                      IF ((IHIT .EQ. 1 .AND. (Z(NP) + TCON_RING * W(NP))
     *                 .GE. ZMIN_RING(1) .AND. (Z(NP) + TCON_RING * W(NP
     *                )) .LE. ZMAX_RING(1))) THEN
                          DIST = TCON_RING
                          IRNEW_RING = IRSTART_RING + 1
                      END IF
                  END IF
              ELSE
                  IRNEW_RING = IRSTART_RING + 3*(ISCM_RING-2) + 2
                  IF ((U(NP)*X(NP)+V(NP)*Y(NP) .LT. 0)) THEN
                      A_RING = U(NP)**2+V(NP)**2
                      B_RING = X(NP)*U(NP)+Y(NP)*V(NP)
                      B2_RING = B_RING**2
                      C_RING = X(NP)**2+Y(NP)**2
                      IF ((B_RING.GE.0.0 .OR. A_RING .EQ. 0.0)) THEN
                          IHIT=0
                          TCON_RING=1.0E20
                      ELSE
                          COUT_RING = C_RING - RBN2T_RING(IB_RING)
                          IF ((COUT_RING .LT. 0.0)) THEN
                              IF ((IWATCH.GT.0)) THEN
                                  WRITE(6,16220)COUT_RING
16220                             FORMAT(' CIN=',E11.3)
                              END IF
                              COUT_RING=0.0
                          END IF
                          RAD_RING = B2_RING - A_RING*COUT_RING
                          IF ((RAD_RING .LT. 0.0)) THEN
                              IHIT = 0
                              TCON_RING=1E20
                          ELSE
                              IHIT=1
                              IF ((COUT_RING/B2_RING .LT. 1.0E-3)) THEN
                                  TCON_RING=-0.5*COUT_RING/B_RING
                              ELSE
                                  IF (((SQRT(RAD_RING)-B_RING) .NE. 0.0)
     *                            ) THEN
                                      TCON_RING = COUT_RING/(SQRT(RAD_RI
     *                                NG)-B_RING)
                                  ELSE
                                      TCON_RING = 1.0E30
                                  END IF
                              END IF
                          END IF
                      END IF
                      IF ((IHIT .EQ. 1 .AND. (Z(NP) + TCON_RING * W(NP))
     *                 .GE. ZMIN_RING(ISCM_RING) .AND. (Z(NP) + TCON_RIN
     *                G * W(NP)) .LE. ZMAX_RING(ISCM_RING))) THEN
                          DIST = TCON_RING
                          IRNEW_RING = IRSTART_RING + 3*(ISCM_RING-1) +
     *                    1
                      END IF
                  END IF
              END IF
              IF ((DIST .LE. USTEP)) THEN
                  USTEP = DIST
                  IF ((IRNEW_RING .EQ. 1)) THEN
                      CALL WHERE_AM_I(ICM_RING,-1)
                  ELSE
                      IRNEW = IRNEW_RING
                  END IF
              END IF
          ELSE
              DIST=1E10
              A_RING = U(NP)**2+V(NP)**2
              B_RING = X(NP)*U(NP)+Y(NP)*V(NP)
              B2_RING = B_RING**2
              C_RING = X(NP)**2+Y(NP)**2
              IF ((B_RING.GE.0.0 .OR. A_RING .EQ. 0.0)) THEN
                  IHIT=0
                  TCON_RING=1.0E20
              ELSE
                  COUT_RING = C_RING - RBN2T_RING(IB_RING)
                  IF ((COUT_RING .LT. 0.0)) THEN
                      IF ((IWATCH.GT.0)) THEN
                          WRITE(6,16230)COUT_RING
16230                     FORMAT(' CIN=',E11.3)
                      END IF
                      COUT_RING=0.0
                  END IF
                  RAD_RING = B2_RING - A_RING*COUT_RING
                  IF ((RAD_RING .LT. 0.0)) THEN
                      IHIT = 0
                      TCON_RING=1E20
                  ELSE
                      IHIT=1
                      IF ((COUT_RING/B2_RING .LT. 1.0E-3)) THEN
                          TCON_RING=-0.5*COUT_RING/B_RING
                      ELSE
                          IF (((SQRT(RAD_RING)-B_RING) .NE. 0.0)) THEN
                              TCON_RING = COUT_RING/(SQRT(RAD_RING)-B_RI
     *                        NG)
                          ELSE
                              TCON_RING = 1.0E30
                          END IF
                      END IF
                  END IF
              END IF
              IF ((IHIT .EQ. 1)) THEN
                  DIST = TCON_RING
                  IRNEW_RING = IRSTART_RING + 3*(ISCM_RING-1) + 1
              END IF
              IF ((DIST .LE. USTEP)) THEN
                  USTEP = DIST
                  IRNEW = IRNEW_RING
              END IF
          END IF
      ELSE
          WRITE(6,16240)IR(NP)-IRSTART_RING+1,IR(NP),ICM_RING, IR_start_
     *    CM(ICM_RING)
16240     FORMAT(//' ************'//' HOWFAR_RING error'/ '    Region, l
     *ocal, absolute =',2I5/ '    CM number=',I5,' start region =',I5/ '
     * *********'//)
          STOP
      END IF
      RETURN
      END
      SUBROUTINE WHERE_AM_I_RING(IDIR)
      IMPLICIT NONE
      COMMON/CM_RING/ ICM_RING, IRSTART_RING, IREND_RING, N_RING, N_GAP_
     *RING, ISCM_RING, ISCM_MAX_RING, IR_RING, ZFRONT_RING, ZMIN_RING, Z
     *MAX_RING, RMIN_RING, RMAX_RING, RBN_RING, RBNT_RING, RBN2_RING, RB
     *N2T_RING, RMINT_RING, RMAXT_RING, RMIN2_RING, RMIN2T_RING, RMAX2_R
     *ING, RMAX2T_RING, ALO_RING, BLO_RING, BLOT_RING, COSA_RING, NOWALL
     *_RING, TITLE_RING
      INTEGER ICM_RING,IRSTART_RING, IREND_RING,N_RING,N_GAP_RING, ISCM_
     *RING,ISCM_MAX_RING,IR_RING, NOWALL_RING
      real*8 ZFRONT_RING, ZMIN_RING(15), ZMAX_RING(15), RMIN_RING(15), R
     *MAX_RING(15), RBN_RING, RBNT_RING(2), RBN2_RING, RBN2T_RING(2), RM
     *INT_RING(15,2), RMAXT_RING(15,2), RMIN2_RING(15), RMIN2T_RING(15,2
     *), RMAX2_RING(15), RMAX2T_RING(15,2), ALO_RING(15), BLO_RING(15),
     *BLOT_RING(15,2), COSA_RING(15)
      CHARACTER*1 TITLE_RING(60)
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      INTEGER IDIR,  I
      real*8 XBDY_RING,YBDY_RING,RBDY2_RING
      XBDY_RING = X(NP) + U(NP)*USTEP
      YBDY_RING = Y(NP) + V(NP)*USTEP
      RBDY2_RING = XBDY_RING*XBDY_RING + YBDY_RING*YBDY_RING
      IF ((IRSTART_RING .EQ. 2)) THEN
          IF ((IDIR .EQ.1)) THEN
              RBDY2_RING = X(NP)**2 + Y(NP)**2
          END IF
      END IF
      IF ((IDIR.EQ.1)) THEN
          IF ((N_GAP_RING .EQ. 0)) THEN
              IRNEW = IRSTART_RING
              IF ((RBDY2_RING .GT. RBN2_RING)) THEN
                  IRNEW = IRSTART_RING + 2
              ELSE IF((RBDY2_RING .GT. RMIN2_RING(1))) THEN
                  IRNEW = IRSTART_RING + 1
              END IF
          ELSE
              IRNEW = IREND_RING
          END IF
      ELSE IF((IDIR.EQ.-1)) THEN
          IRNEW = IRSTART_RING + 3*(ISCM_MAX_RING-1)
          IF ((RBDY2_RING .GT. RBN2_RING)) THEN
              IRNEW = IRSTART_RING + 3*(ISCM_MAX_RING-1) + 2
          ELSE IF((RBDY2_RING .GT. RMAX2_RING(ISCM_MAX_RING))) THEN
              IRNEW = IRSTART_RING + 3*(ISCM_MAX_RING-1) + 1
          END IF
      ELSE IF((IDIR.EQ.2)) THEN
          IF ((Z(NP).LT.ZMIN_RING(1))) THEN
              IRNEW = IREND_RING
          ELSE
              DO 16251 I=1,ISCM_MAX_RING
                  IF ((Z(NP).LE.ZMAX_RING(I) .AND. Z(NP).GE.ZMIN_RING(I)
     *            )) THEN
                      IRNEW = IRSTART_RING + 3*(I-1)
                      IF ((SQRT(X(NP)**2+Y(NP)**2) .GT. RBN_RING)) THEN
                          IRNEW = IRSTART_RING + 3*(I-1) + 2
                      ELSE IF((SQRT(X(NP)**2+Y(NP)**2) .GT. Z(NP)*ALO_RI
     *                NG(I)+BLO_RING(I))) THEN
                          IRNEW = IRSTART_RING + 3*(I-1) + 1
                      END IF
                      GO TO16252
                  END IF
16251         CONTINUE
16252         CONTINUE
          END IF
      END IF
      RETURN
      END
      SUBROUTINE INPUT_RING
      IMPLICIT NONE
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/CM_RING/ ICM_RING, IRSTART_RING, IREND_RING, N_RING, N_GAP_
     *RING, ISCM_RING, ISCM_MAX_RING, IR_RING, ZFRONT_RING, ZMIN_RING, Z
     *MAX_RING, RMIN_RING, RMAX_RING, RBN_RING, RBNT_RING, RBN2_RING, RB
     *N2T_RING, RMINT_RING, RMAXT_RING, RMIN2_RING, RMIN2T_RING, RMAX2_R
     *ING, RMAX2T_RING, ALO_RING, BLO_RING, BLOT_RING, COSA_RING, NOWALL
     *_RING, TITLE_RING
      INTEGER ICM_RING,IRSTART_RING, IREND_RING,N_RING,N_GAP_RING, ISCM_
     *RING,ISCM_MAX_RING,IR_RING, NOWALL_RING
      real*8 ZFRONT_RING, ZMIN_RING(15), ZMAX_RING(15), RMIN_RING(15), R
     *MAX_RING(15), RBN_RING, RBNT_RING(2), RBN2_RING, RBN2T_RING(2), RM
     *INT_RING(15,2), RMAXT_RING(15,2), RMIN2_RING(15), RMIN2T_RING(15,2
     *), RMAX2_RING(15), RMAX2T_RING(15,2), ALO_RING(15), BLO_RING(15),
     *BLOT_RING(15,2), COSA_RING(15)
      CHARACTER*1 TITLE_RING(60)
      COMMON/GEOM/ NREG
      INTEGER NREG
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 ZTHICK_RING(20),  BDYTOL,  AIRGAPMIN_RING
      INTEGER I,J,  IRA,  MED_FLAG,  IRA_WALL,  MED_INDEX_WALL,  MED_IND
     *EX
      ICM_RING = ICM
      IRSTART_RING = IR_start_CM(ICM_RING)
      IERR_GEOM(ICM_RING) = 0
      AIRGAPMIN_RING = 0.1
      WRITE(6,16260)
16260 FORMAT(/' Next component is a stacked set of truncated cones ')
      WRITE(6,16270)
16270 FORMAT(/' RING (CONESTAK)')
      IF ((ICM_RING .EQ. 1)) THEN
          WRITE(6,16280)Z_min_CM(1)
16280     FORMAT(' This is the first component and starts at Z=',F11.4,'
     * cm')
      ELSE
          WRITE(6,16290)Z_min_CM(ICM_RING)
16290     FORMAT(' Previous CM ends at:',F12.5,' cm'/)
      END IF
      WRITE(6,16300)
16300 FORMAT(' TITLE: ',$)
      READ(i_input,16310,END=16320,ERR=16330)TITLE_RING
16310 FORMAT(60A1)
      WRITE(6,16340)TITLE_RING
16340 FORMAT(' ',60A1)
      NOWALL_RING = 0
      WRITE(6,16350)
16350 FORMAT(' Distance front 1st cone to ref plane(z=0), inner radius o
     *uter wall(0=>none)'/ ' : ',$)
      READ(i_input,16360,END=16320,ERR=16330)ZMIN_RING(1),RBN_RING
16360 FORMAT(2F15.0)
      WRITE(6,16370)ZMIN_RING(1),RBN_RING
16370 FORMAT(2F25.5)
      IF ((Z_min_CM(ICM_RING).GT.ZMIN_RING(1))) THEN
          IF ((ICM_RING.EQ.1)) THEN
              WRITE(6,16380)ICM_RING, ZMIN_RING(1),Z_min_CM(1)
16380         FORMAT(//' ***WARNING IN CM ',I4,' (CONESTAK):'/ ' Z_min_C
     *M(1) < ZMIN(1)'/ ' Z_min_CM(1) reset to ',F8.5,' cm from ',F8.5,'c
     *m'//)
              WRITE(IOUTLIST,100)ICM_RING, ZMIN_RING(1), Z_min_CM(1)
100           FORMAT(//' ***WARNING IN CM ',I4,' (CONESTAK):'/ ' Z_min_C
     *M(1) < ZMIN(1)'/ ' Z_min_CM(1) reset to ',F8.5,' cm from ',F8.5,'c
     *m'//)
              Z_min_CM(1)=ZMIN_RING(1)
          ELSE
              WRITE(6,16390)ICM_RING
16390         FORMAT(//'***ERROR IN CM ',I4,' (CONESTAK):'/ 'Overlaps wi
     *th previous CM'//)
              IERR_GEOM(ICM_RING)=IERR_GEOM(ICM_RING)+1
          END IF
      END IF
      IF ((RBN_RING .EQ. 0)) THEN
          NOWALL_RING = 1
          WRITE(6,16400)ZMIN_RING(1),RBN_RING
16400     FORMAT(2F25.5,',  No outer wall!!')
      ELSE IF((RBN_RING .GT. RMAX_CM(ICM_RING))) THEN
          WRITE(6,16410)ICM_RING
16410     FORMAT(//'***ERROR IN CM ',I4,' (CONESTAK):'/ 'inner radius of
     * outer wall > RMAX_CM'//)
          IERR_GEOM(ICM_RING)=IERR_GEOM(ICM_RING)+1
      END IF
      IF ((RBN_RING .EQ. 0)) THEN
          RBN_RING = RMAX_CM(ICM_RING)
      END IF
      ISCM_MAX_RING = 15
      WRITE(6,16420)ISCM_MAX_RING
16420 FORMAT(' NUMBER OF layers (MINIMUM 1, MAXIMUM',I3,'): ',$)
      READ(i_input,16430,END=16320,ERR=16330)ISCM_MAX_RING
16430 FORMAT (I5)
      WRITE(6,16440)ISCM_MAX_RING
16440 FORMAT(I5)
      IF ((ISCM_MAX_RING .GT. 15)) THEN
          WRITE(6,16450)ICM_RING, 15
16450     FORMAT(//'***ERROR IN CM ',I4,' (CONESTAK):'/ '# of layers > m
     *ax. allowed.'/ '# of layers reduced to ',I4,' for now.'//)
          IERR_GEOM(ICM_RING)=IERR_GEOM(ICM_RING)+1
          ISCM_MAX_RING=15
      ELSE IF((ISCM_MAX_RING.LT.1)) THEN
          ISCM_MAX_RING=1
          WRITE(6,16460)ICM_RING
16460     FORMAT(//'***ERROR IN CM ',I4,' (CONESTAK):'/ '# of layers < 1
     *'/ '# of layers reset to 1 for now'//)
          IERR_GEOM(ICM_RING)=IERR_GEOM(ICM_RING)+1
      END IF
      N_RING = 3*ISCM_MAX_RING
      DO 16471 I=1,ISCM_MAX_RING
          WRITE(6,16480)I
16480     FORMAT(/' Cone layer No:',I3, /' Thickness of conical layer,to
     *p(r1) and  bottom(r2) radii (r1<=r2)'/ ' : ',$)
          READ(i_input,16490,END=16320,ERR=16330)ZTHICK_RING(I), RMIN_RI
     *    NG(I),RMAX_RING(I)
16490     FORMAT (3F15.0)
          WRITE(6,16500)ZTHICK_RING(I),RMIN_RING(I),RMAX_RING(I)
16500     FORMAT(3F15.5)
          IF ((ZTHICK_RING(I) .LT. 0.0)) THEN
              WRITE(6,16510)ICM_RING, I
16510         FORMAT(//'***ERROR IN CM ',I4,' (CONESTAK):'/ 'ZTHICK(',I4
     *,') < 0.0'//)
              IERR_GEOM(ICM_RING)=IERR_GEOM(ICM_RING)+1
          END IF
          IF ((RMIN_RING(I) .GT. RMAX_RING(I))) THEN
              WRITE(6,16520)ICM_RING, I, I
16520         FORMAT(//'***ERROR IN CM ',I4,' (CONESTAK):'/ 'RMIN(',I4,'
     *) > RMAX(',I4,')'//)
              IERR_GEOM(ICM_RING)=IERR_GEOM(ICM_RING)+1
          END IF
          IF ((RMIN_RING(I).EQ.RMAX_RING(I) .AND. RMIN_RING(I).LT.1.E-5)
     *    ) THEN
              RMIN_RING(I)=1.E-5
              RMAX_RING(I)=1.E-5
              WRITE(6,16530)ICM_RING, I,1.E-5
16530         FORMAT(//' ***WARNING IN CM ',I4,' (CONESTAK):'/ ' RMIN=RM
     *AX<$BDY_TOL (BOUNDARY TOLERANCE) IN LAYER ',I4/ ' THIS CAN CAUSE E
     *NDLESS LOOPS'/ ' RMIN AND RMAX HAVE BEEN RESET TO ',F8.5//)
              WRITE(IOUTLIST,12250) ICM_RING, I,1.E-5
12250         FORMAT(//' ***WARNING IN CM ',I4,' (CONESTAK):'/ ' RMIN=RM
     *AX<$BDY_TOL (BOUNDARY TOLERANCE) IN LAYER ',I4/ ' THIS CAN CAUSE E
     *NDLESS LOOPS'/ ' RMIN AND RMAX HAVE BEEN RESET TO ',F8.5//)
          END IF
          IF ((NOWALL_RING.EQ.1 .AND. RMIN_RING(I).GT.RMAX_CM(ICM_RING))
     *    ) THEN
              WRITE(6,16540)ICM_RING, I
16540         FORMAT(//'***WARNING IN CM ',I4,' (CONESTAK):'/ 'RMIN(',I4
     *,') > RMAX_CM'//)
              WRITE(IOUTLIST,'(//''***WARNING IN CM '',I4,'' (CONESTAK):
     *''/                        ''RMIN('',I4,'') > RMAX_CM''//)') ICM_R
     *        ING, I
          END IF
          IF ((NOWALL_RING.EQ.1 .AND. RMAX_RING(I).GT.RMAX_CM(ICM_RING))
     *    ) THEN
              WRITE(6,16550)ICM_RING, I
16550         FORMAT(//'***WARNING IN CM ',I4,' (CONESTAK):'/ 'RMAX(',I4
     *,') > RMAX_CM'//)
              WRITE(IOUTLIST,'(//''***WARNING IN CM '',I4,'' (CONESTAK):
     *''/                        ''RMAX('',I4,'') > RMAX_CM''//)') ICM_R
     *        ING, I
          END IF
          IF ((I .GT. 1 .AND. RMAX_RING(I-1) .GT. RMIN_RING(I))) THEN
              WRITE(6,16560)ICM_RING, I, I-1
16560         FORMAT(//'***ERROR IN CM ',I4,' (CONESTAK):'/ 'RMIN(',I4,'
     *) < RMAX(',I4,')'//)
              IERR_GEOM(ICM_RING)=IERR_GEOM(ICM_RING)+1
          END IF
16471 CONTINUE
16472 CONTINUE
      IF ((NOWALL_RING .EQ. 0 .AND. RBN_RING .LT. RMAX_RING(ISCM_MAX_RIN
     *G))) THEN
          WRITE(6,16570)ICM_RING
16570     FORMAT(//'***ERROR IN CM ',I4,' (CONESTAK):'/ 'Inner radius of
     * outer wall < max. cone radius.'//)
          IERR_GEOM(ICM_RING)=IERR_GEOM(ICM_RING)+1
      END IF
      IRA = IRSTART_RING-1
      DO 16581 IR_RING=1,N_RING
          IRA = IRA+1
          IF ((NOWALL_RING .EQ. 0 .AND. IR_RING .EQ. 1)) THEN
              WRITE(6,16590)
16590         FORMAT(/' For outer wall:'/ ' ECUT, PCUT (MeV), DOSE ZONE(
     *0=DO NOT SCORE DOSE), IREGION_TO_BIT'/' : ',$)
              READ(i_input,16600,END=16320,ERR=16330)ECUT(IRA+2),PCUT(IR
     *        A+2),DOSE_ZONE(IRA+2),IREGION_TO_BIT(IRA+2)
16600         FORMAT (2F15.0,2I5)
              IRA_WALL = IRA+2
              IF ((ECUT(IRA+2) .LT. ECUTIN)) THEN
                  ECUT(IRA+2)=ECUTIN
              END IF
              IF ((PCUT(IRA+2) .LT. PCUTIN)) THEN
                  PCUT(IRA+2)=PCUTIN
              END IF
              WRITE(6,16610)ECUT(IRA+2),PCUT(IRA+2),DOSE_ZONE(IRA+2), IR
     *        EGION_TO_BIT(IRA+2)
16610         FORMAT(F10.5,F10.3,I12,I20)
              WRITE(6,16620)
16620         FORMAT(' Material of outer wall ',$)
              WRITE(6,16630)
16630         FORMAT(' MEDIUM (left justify): ',$)
              READ(i_input,'(24A1)',END=16320,ERR=16330) (MED_IN(J),J=1,
     *        24)
              WRITE(6,16640)(MED_IN(J),J=1,24)
16640         FORMAT(' ',24A1)
              IF ((MED_IN(1) .EQ. 'V' .AND. MED_IN(2).EQ.'A' .AND. MED_I
     *        N(3).EQ.'C' .AND. MED_IN(4) .EQ. 'U' .AND. MED_IN(5).EQ.'U
     *' .AND. MED_IN(6).EQ.'M')) THEN
                  MED_INDEX=0
              ELSE
                  IF ((NMED .NE. 0)) THEN
                      DO 16651 I=1,NMED
                          MED_FLAG = 0
                          DO 16661 J=1,24
                              IF ((MEDIA(J,I) .NE. MED_IN(J))) THEN
                                  MED_FLAG = 1
                                  GO TO16662
                              END IF
16661                     CONTINUE
16662                     CONTINUE
                          IF ((MED_FLAG .EQ. 0)) THEN
                              MED_INDEX = I
                              GO TO16652
                          END IF
                          IF ((I .EQ. NMED)) THEN
                              NMED = NMED+1
                              MED_INDEX = NMED
                              DO 16671 J=1,24
                                  MEDIA(J,NMED) = MED_IN(J)
16671                         CONTINUE
16672                         CONTINUE
                              GO TO16652
                          END IF
16651                 CONTINUE
16652                 CONTINUE
                  ELSE
                      NMED = 1
                      MED_INDEX = NMED
                      DO 16681 J=1,24
                          MEDIA(J,NMED) = MED_IN(J)
16681                 CONTINUE
16682                 CONTINUE
                  END IF
              END IF
              MED(IRA+2) = MED_INDEX
              MED_INDEX_WALL = MED_INDEX
          END IF
          IF ((NOWALL_RING .EQ. 1 .AND. IR_RING .EQ. 1)) THEN
              IRA_WALL = IRA+2
              ECUT(IRA+2) = ECUTIN
              PCUT(IRA+2) = PCUTIN
              DOSE_ZONE(IRA+2)= 0
              IREGION_TO_BIT(IRA+2) = 0
              MED(IRA+2) = 0
          END IF
          IF ((MOD(IR_RING,3) .EQ. 1)) THEN
              WRITE(6,16690)IR_RING/3+1
16690         FORMAT(/' For layer',I3)
              WRITE(6,16700)IR_RING
16700         FORMAT(' Local region ',I3,' (inside of cone)'/ ' ECUT, PC
     *UT (MeV), DOSE ZONE (0=DO NOT SCORE DOSE), IREGION_TO_BIT'/' : ',$
     *)
          END IF
          IF ((MOD(IR_RING,3) .EQ. 2)) THEN
              WRITE(6,16710)IR_RING
16710         FORMAT(' Local region ',I3,' (outside of cone)'/ ' ECUT, P
     *CUT (MeV), DOSE ZONE (0=DO NOT SCORE DOSE), IREGION_TO_BIT'/' : ',
     *$)
          END IF
          IF ((MOD(IR_RING,3) .NE. 0)) THEN
              READ(i_input,16720,END=16320,ERR=16330)ECUT(IRA),PCUT(IRA)
     *        ,DOSE_ZONE(IRA),IREGION_TO_BIT(IRA)
16720         FORMAT (2F15.0,2I5)
              IF ((ECUT(IRA) .LT. ECUTIN)) THEN
                  ECUT(IRA)=ECUTIN
              END IF
              IF ((PCUT(IRA) .LT. PCUTIN)) THEN
                  PCUT(IRA)=PCUTIN
              END IF
              WRITE(6,16730)ECUT(IRA),PCUT(IRA),DOSE_ZONE(IRA), IREGION_
     *        TO_BIT(IRA)
16730         FORMAT(F10.5,F10.3,I12,I20)
              WRITE(6,16740)IR_RING
16740         FORMAT(' Material of region ',I3,' ',$)
              WRITE(6,16750)
16750         FORMAT(' MEDIUM (left justify): ',$)
              READ(i_input,'(24A1)',END=16320,ERR=16330) (MED_IN(J),J=1,
     *        24)
              WRITE(6,16760)(MED_IN(J),J=1,24)
16760         FORMAT(' ',24A1)
              IF ((MED_IN(1) .EQ. 'V' .AND. MED_IN(2).EQ.'A' .AND. MED_I
     *        N(3).EQ.'C' .AND. MED_IN(4) .EQ. 'U' .AND. MED_IN(5).EQ.'U
     *' .AND. MED_IN(6).EQ.'M')) THEN
                  MED_INDEX=0
              ELSE
                  IF ((NMED .NE. 0)) THEN
                      DO 16771 I=1,NMED
                          MED_FLAG = 0
                          DO 16781 J=1,24
                              IF ((MEDIA(J,I) .NE. MED_IN(J))) THEN
                                  MED_FLAG = 1
                                  GO TO16782
                              END IF
16781                     CONTINUE
16782                     CONTINUE
                          IF ((MED_FLAG .EQ. 0)) THEN
                              MED_INDEX = I
                              GO TO16772
                          END IF
                          IF ((I .EQ. NMED)) THEN
                              NMED = NMED+1
                              MED_INDEX = NMED
                              DO 16791 J=1,24
                                  MEDIA(J,NMED) = MED_IN(J)
16791                         CONTINUE
16792                         CONTINUE
                              GO TO16772
                          END IF
16771                 CONTINUE
16772                 CONTINUE
                  ELSE
                      NMED = 1
                      MED_INDEX = NMED
                      DO 16801 J=1,24
                          MEDIA(J,NMED) = MED_IN(J)
16801                 CONTINUE
16802                 CONTINUE
                  END IF
              END IF
              MED(IRA) = MED_INDEX
          END IF
          IF ((MOD(IR_RING,3) .EQ. 0)) THEN
              ECUT(IRA) = ECUT(IRA_WALL)
              PCUT(IRA) = PCUT(IRA_WALL)
              DOSE_ZONE(IRA)= DOSE_ZONE(IRA_WALL)
              IREGION_TO_BIT(IRA) = IREGION_TO_BIT(IRA_WALL)
              MED(IRA) = MED_INDEX_WALL
              IF ((NOWALL_RING .EQ. 1)) THEN
                  MED(IRA) = 0
              END IF
          END IF
16581 CONTINUE
16582 CONTINUE
      Z_gap_THICK(ICM_RING) = ZMIN_RING(1) - Z_min_CM(ICM_RING)
      IF ((Z_gap_THICK(ICM_RING) .LT. 0.01)) THEN
          Z_gap_THICK(ICM_RING) = 0.
          ZMIN_RING(1)=Z_min_CM(ICM_RING)
          N_GAP_RING = 0
      ELSE
          N_GAP_RING = 1
          IRA = IRSTART_RING+N_RING
          MED(IRA) = AIR_INDEX
          ECUT(IRA) = ECUTIN
          PCUT(IRA)=PCUTIN
          ESAVE(IRA)=ESAVE_GLOBAL
          ECUTRR(IRA)=ECUT(IRA)
      END IF
      BDYTOL= 1.E-5
      ZMAX_RING(1) = ZMIN_RING(1) + ZTHICK_RING(1)
      DO 16811 I=2,ISCM_MAX_RING
          ZMIN_RING(I) = ZMIN_RING(I-1) + ZTHICK_RING(I-1)
          ZMAX_RING(I) = ZMIN_RING(I) + ZTHICK_RING(I)
16811 CONTINUE
16812 CONTINUE
      DO 16821 I=1,ISCM_MAX_RING
          ALO_RING(I) = (RMAX_RING(I)- RMIN_RING(I))/(ZMAX_RING(I) - ZMI
     *    N_RING(I))
          BLO_RING(I) = RMIN_RING(I) - ZMIN_RING(I)*ALO_RING(I)
          RMINT_RING(I,1) = RMIN_RING(I) + BDYTOL
          RMINT_RING(I,2) = RMIN_RING(I) - BDYTOL
          RMAXT_RING(I,1) = RMAX_RING(I) + BDYTOL
          RMAXT_RING(I,2) = RMAX_RING(I) - BDYTOL
          RMIN2_RING(I) = RMIN_RING(I)**2
          RMAX2_RING(I) = RMAX_RING(I)**2
          RMIN2T_RING(I,1) = RMINT_RING(I,1)**2
          RMIN2T_RING(I,2) = RMINT_RING(I,2)**2
          RMAX2T_RING(I,1) = RMAXT_RING(I,1)**2
          RMAX2T_RING(I,2) = RMAXT_RING(I,2)**2
          BLOT_RING(I,1) = BLO_RING(I) + BDYTOL
          BLOT_RING(I,2) = BLO_RING(I) - BDYTOL
          COSA_RING(I) = (ZMAX_RING(I) - ZMIN_RING(I))/ SQRT( (ZMAX_RING
     *    (I) - ZMIN_RING(I))**2 +(RMAX_RING(I) - RMIN_RING(I))**2 )
16821 CONTINUE
16822 CONTINUE
      RBN2_RING = RBN_RING**2
      RBNT_RING(1) = RBN_RING - BDYTOL
      RBNT_RING(2) = RBN_RING + BDYTOL
      RBN2T_RING(1) = RBNT_RING(1)**2
      RBN2T_RING(2) = RBNT_RING(2)**2
      ZFRONT_RING = Z_min_CM(ICM_RING)
      Z_min_CM(ICM_RING+1) = ZMAX_RING(ISCM_MAX_RING)
      IREND_RING = IRSTART_RING + N_RING+ N_GAP_RING - 1
      NREG = NREG+N_RING+N_GAP_RING
      IF ((NREG .LE. 3000)) THEN
          IR_start_CM(ICM_RING+1) = IREND_RING+1
      ELSE
          WRITE(6,16830)ICM_RING,NREG,3000
16830     FORMAT(//'***ERROR IN CM ',I4,' (CONESTAK):'/ I4,' regions req
     *uested, only ',I4,' available'//)
          IERR_GEOM(ICM_RING)=IERR_GEOM(ICM_RING)+1
      END IF
      RMAX_CM_FLAG(ICM_RING) = 1
      IRA = IRSTART_RING-1
      DO 16841 IR_RING=1,N_RING
          IRA = IRA+1
          NDOSE_ZONE = MAX(DOSE_ZONE(IRA),NDOSE_ZONE)
          IF ((NDOSE_ZONE .GT. 1500)) THEN
              WRITE(6,16850)NDOSE_ZONE
16850         FORMAT(' Too many dose zone !', 'NDOSE_ZONE =',I5, ' > $MA
     *X_DOSE_ZONE')
              STOP
          END IF
          MAX_BIT = MAX(IREGION_TO_BIT(IRA),MAX_BIT)
          ESAVE(IRA)=ESAVE_GLOBAL
          ECUTRR(IRA)=ECUT(IRA)
          E_min_out(ICM_RING)=ECUT(IRA)
16841 CONTINUE
16842 CONTINUE
      RETURN
16320 CONTINUE
      WRITE(6,16860)ICM
16860 FORMAT(//' *** ERROR *** unexpected end of file reading input forC
     *M',I3)
      STOP
16330 CONTINUE
      WRITE(6,16870)ICM
16870 FORMAT(//' *** ERROR *** format error on input for CM',I3)
      STOP
      END
      SUBROUTINE ISUMRY_RING
      IMPLICIT NONE
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/CM_RING/ ICM_RING, IRSTART_RING, IREND_RING, N_RING, N_GAP_
     *RING, ISCM_RING, ISCM_MAX_RING, IR_RING, ZFRONT_RING, ZMIN_RING, Z
     *MAX_RING, RMIN_RING, RMAX_RING, RBN_RING, RBNT_RING, RBN2_RING, RB
     *N2T_RING, RMINT_RING, RMAXT_RING, RMIN2_RING, RMIN2T_RING, RMAX2_R
     *ING, RMAX2T_RING, ALO_RING, BLO_RING, BLOT_RING, COSA_RING, NOWALL
     *_RING, TITLE_RING
      INTEGER ICM_RING,IRSTART_RING, IREND_RING,N_RING,N_GAP_RING, ISCM_
     *RING,ISCM_MAX_RING,IR_RING, NOWALL_RING
      real*8 ZFRONT_RING, ZMIN_RING(15), ZMAX_RING(15), RMIN_RING(15), R
     *MAX_RING(15), RBN_RING, RBNT_RING(2), RBN2_RING, RBN2T_RING(2), RM
     *INT_RING(15,2), RMAXT_RING(15,2), RMIN2_RING(15), RMIN2T_RING(15,2
     *), RMAX2_RING(15), RMAX2T_RING(15,2), ALO_RING(15), BLO_RING(15),
     *BLOT_RING(15,2), COSA_RING(15)
      CHARACTER*1 TITLE_RING(60)
      COMMON/GEOM/ NREG
      INTEGER NREG
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      INTEGER ICOLOUR,  IRA,  I,J
      real*8 VOL_RING(3*15+1),PIL
      PIL=4.0*ATAN(1.0)
      DO 16881 I=1,ISCM_MAX_RING
          VOL_RING(3*(I-1)+1) = PIL/3.0*(ZMAX_RING(I)-ZMIN_RING(I))* ( R
     *    MIN_RING(I)**2 + RMAX_RING(I)**2 +RMIN_RING(I)*RMAX_RING(I) )
          VOL_RING(3*(I-1)+2) = PIL*(ZMAX_RING(I)-ZMIN_RING(I))*RBN_RING
     *    **2- VOL_RING(3*(I-1)+1)
          VOL_RING(3*(I-1)+3) = PIL*(ZMAX_RING(I)- ZMIN_RING(I))*(RMAX_C
     *    M(ICM_RING)**2- RBN_RING**2)
16881 CONTINUE
16882 CONTINUE
      IRA = IRSTART_RING-1
      DO 16891 IR_RING=1,N_RING+N_GAP_RING
          IRA = IRA+1
          IF ((DOSE_ZONE(IRA).NE.0)) THEN
              ID=DOSE_ZONE(IRA)
              AMASS(ID)=AMASS(ID)+VOL_RING(IR_RING)*RHOR(IRA)
              IF ((AMASS(ID).LT.0.0 .AND. ABS(AMASS(ID)).LT.0.000001)) T
     *        HEN
                  AMASS(ID)=0.0
              END IF
          END IF
16891 CONTINUE
16892 CONTINUE
      WRITE(IOUTLIST,110) ICM_RING,TITLE_RING
      WRITE(IOUTLIST,120) Z_min_CM(ICM_RING),RMAX_CM(ICM_RING)
      IF ((NOWALL_RING.EQ.1)) THEN
          WRITE(IOUTLIST,122)
      ELSE
          WRITE(IOUTLIST,121)RBN_RING
      END IF
      WRITE(IOUTLIST,123)
      IF ((N_GAP_RING.NE.0)) THEN
          WRITE(IOUTLIST,124)'airgap',Z_min_CM(ICM_RING), ZMIN_RING(1)-Z
     *    _min_CM(ICM_RING), RMAX_CM(ICM_RING),RMAX_CM(ICM_RING)
      END IF
      DO 16901 I=1,ISCM_MAX_RING
          WRITE(IOUTLIST,130)I,ZMIN_RING(I),ZMAX_RING(I)- ZMIN_RING(I),
     *    RMIN_RING(I),RMAX_RING(I)
16901 CONTINUE
16902 CONTINUE
      WRITE(IOUTLIST,140)
      IRA = IRSTART_RING - 1
      DO 16911 IR_RING=1,N_RING-1,3
          ISCM_RING = (IR_RING - 1)/3 + 1
          IRA = IRSTART_RING + IR_RING - 1
          IF ((MED(IRA).NE.0)) THEN
              WRITE(IOUTLIST,150) IR_RING,ISCM_RING,'inside', ECUT(IRA),
     *        PCUT(IRA), ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA), IREGION_
     *        TO_BIT(IRA),(MEDIA(J,MED(IRA)),J=1,9)
          ELSE IF((MED(IRA).EQ.0)) THEN
              WRITE(IOUTLIST,150) IR_RING,ISCM_RING,'inside', ECUT(IRA),
     *        PCUT(IRA), ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA), IREGION_
     *        TO_BIT(IRA),'V','a','c','u','u','m'
          END IF
          IF ((MED(IRA+1).NE.0)) THEN
              WRITE(IOUTLIST,150) IR_RING+1,ISCM_RING,'outside', ECUT(IR
     *        A+1),PCUT(IRA+1),ECUTRR(IRA+1),ESAVE(IRA+1), DOSE_ZONE(IRA
     *        +1),IREGION_TO_BIT(IRA+1),(MEDIA(J,MED(IRA+1)),J=1,9)
          ELSE IF((MED(IRA+1).EQ.0)) THEN
              WRITE(IOUTLIST,150) IR_RING+1,ISCM_RING,'outside', ECUT(IR
     *        A+1),PCUT(IRA+1),ECUTRR(IRA+1),ESAVE(IRA+1), DOSE_ZONE(IRA
     *        +1),IREGION_TO_BIT(IRA+1),'V','a','c','u','u','m'
          END IF
          IF ((NOWALL_RING.NE.1)) THEN
              IF ((MED(IRA+2).NE.0)) THEN
                  WRITE(IOUTLIST,150) IR_RING+2,ISCM_RING,'wall', ECUT(I
     *            RA+2),PCUT(IRA+2),ECUTRR(IRA+2),ESAVE(IRA+2), DOSE_ZON
     *            E(IRA+2),IREGION_TO_BIT(IRA+2),(MEDIA(J,MED(IRA+2)),J=
     *            1,9)
              ELSE IF((MED(IRA+2).EQ.0)) THEN
                  WRITE(IOUTLIST,150) IR_RING+2,ISCM_RING,'wall', ECUT(I
     *            RA+2),PCUT(IRA+2),ECUTRR(IRA+2),ESAVE(IRA+2), DOSE_ZON
     *            E(IRA+2),IREGION_TO_BIT(IRA+2),'V','a','c','u','u','m'
              END IF
          ELSE
              WRITE(IOUTLIST,153) IR_RING+2,ISCM_RING,'nowall', 'NA','NA
     *','NA','NA','NA','NA','V','a','c','u','u','m'
          END IF
16911 CONTINUE
16912 CONTINUE
      IF ((N_GAP_RING .NE. 0 )) THEN
          IRA = IRSTART_RING+N_RING
          WRITE(IOUTLIST,151) N_RING+N_GAP_RING,'NA','airgap', ECUT(IRA)
     *    ,PCUT(IRA),ECUTRR(IRA),ESAVE(IRA), DOSE_ZONE(IRA),IREGION_TO_B
     *    IT(IRA),(MEDIA(J,MED(IRA)),J=1,9)
          WRITE(IOUTLIST,152)'at top'
      END IF
110   FORMAT(///1x,79('-')/ '  Component module',I3, ' is stacked set of
     * truncated cones (CONESTAK)' /1x,79('-') //T2,'Title: ',68A1)
120   FORMAT(/T2,'RING geometry parameters:', /T2,'---------------------
     *--------', /T2,'Distance of front of CM from reference plane = ',F
     *15.5,' cm', /T2,'Radius of outer boundary of CM = ',F15.5,' cm')
121   FORMAT(T2,'Inner radius of outer wall = ',F8.5,' cm')
122   FORMAT(T2,'There is no outer wall.')
123   FORMAT(/T2,'layer    Z front   thickness   top radius   bottom rad
     *ius', /T2,'  #       face', /T2,'          (cm)       (cm) (cm)   
     *      (cm)')
140   FORMAT(/T2,'RING region parameters:', /T2,'-----------------------
     *----', /T2,'local  layer  location  electron  photon', '  range-re
     *jection   dose  bit  medium' /T2,'region                   cutoff 
     * cutoff', '   level     max    zone  set' /T2,'        (MeV)    (M
     *eV)', '   (MeV)    (MeV)')
150   FORMAT(T2,I3,I7,4X,A7,F10.3,F9.3,F8.3,F9.3,I6,I5,2X,9A1)
151   FORMAT(T2,I3,4X,A3,4X,A7,F10.3,F9.3,F8.3,F9.3,I6,I5,2X,9A1)
152   FORMAT(T16,A7)
153   FORMAT(T2,I3,I7,4X,A7,A10,A9,A8,A9,A6,A5,2X,9A1)
130   FORMAT(T2,I3,F12.3,F12.3,F12.3,F13.3)
124   FORMAT(T2,A6,F9.3,F12.3,F12.3,F13.3)
      IF ((IWATCH .EQ. 4 .OR. IZLAST .EQ. 2)) THEN
          ICOLOUR=4
          DO 16921 I=1,ISCM_MAX_RING
              WRITE(IOUTGEOM,201)ICOLOUR,'CYLZ',ZMIN_RING(I), RMIN_RING(
     *        I),ZMAX_RING(I),RMAX_RING(I),0.0,0.0
201           FORMAT(' ',I1,A4,10(F7.2,','))
16921     CONTINUE
16922     CONTINUE
      END IF
      RETURN
      END
      SUBROUTINE HOWNEAR_RING(DIST)
      implicit none
      COMMON/CM_RING/ ICM_RING, IRSTART_RING, IREND_RING, N_RING, N_GAP_
     *RING, ISCM_RING, ISCM_MAX_RING, IR_RING, ZFRONT_RING, ZMIN_RING, Z
     *MAX_RING, RMIN_RING, RMAX_RING, RBN_RING, RBNT_RING, RBN2_RING, RB
     *N2T_RING, RMINT_RING, RMAXT_RING, RMIN2_RING, RMIN2T_RING, RMAX2_R
     *ING, RMAX2T_RING, ALO_RING, BLO_RING, BLOT_RING, COSA_RING, NOWALL
     *_RING, TITLE_RING
      INTEGER ICM_RING,IRSTART_RING, IREND_RING,N_RING,N_GAP_RING, ISCM_
     *RING,ISCM_MAX_RING,IR_RING, NOWALL_RING
      real*8 ZFRONT_RING, ZMIN_RING(15), ZMAX_RING(15), RMIN_RING(15), R
     *MAX_RING(15), RBN_RING, RBNT_RING(2), RBN2_RING, RBN2T_RING(2), RM
     *INT_RING(15,2), RMAXT_RING(15,2), RMIN2_RING(15), RMIN2T_RING(15,2
     *), RMAX2_RING(15), RMAX2T_RING(15,2), ALO_RING(15), BLO_RING(15),
     *BLOT_RING(15,2), COSA_RING(15)
      CHARACTER*1 TITLE_RING(60)
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      real*8 DIST
      IR_RING = IR(NP) - IRSTART_RING + 1
      ISCM_RING = (IR_RING-1)/3 + 1
      IF ((IR_RING .EQ. 3*(ISCM_RING-1) + 1)) THEN
          DIST = (ALO_RING(ISCM_RING)*Z(NP) + BLO_RING(ISCM_RING) - SQRT
     *    (X(NP)**2 + Y(NP)**2))*COSA_RING(ISCM_RING)
          DIST = MIN(DIST,Z(NP)-ZMIN_RING(ISCM_RING), ZMAX_RING(ISCM_RIN
     *    G)-Z(NP))
      ELSE IF((IR_RING .EQ. 3*(ISCM_RING-1)+2)) THEN
          IF ((NOWALL_RING.EQ.1)) THEN
              DIST = (SQRT(X(NP)*X(NP) + Y(NP)*Y(NP)) - ALO_RING(ISCM_RI
     *        NG)*Z(NP) - BLO_RING(ISCM_RING))*COSA_RING(ISCM_RING)
          ELSE
              DIST = MIN((SQRT(X(NP)*X(NP) + Y(NP)*Y(NP)) - ALO_RING(ISC
     *        M_RING)*Z(NP) - BLO_RING(ISCM_RING)) *COSA_RING(ISCM_RING)
     *        , RBN_RING-SQRT(X(NP)*X(NP) + Y(NP)*Y(NP)))
          END IF
          DIST = MIN(DIST,Z(NP)-ZMIN_RING(ISCM_RING), ZMAX_RING(ISCM_RIN
     *    G)-Z(NP))
      ELSE IF((IR_RING .EQ. 3*(ISCM_RING-1)+3)) THEN
          DIST = MIN(SQRT(X(NP)*X(NP) + Y(NP)*Y(NP)) - RBN_RING, Z(NP)-Z
     *    MIN_RING(ISCM_RING), ZMAX_RING(ISCM_RING)-Z(NP))
      ELSE
          DIST=0.0
      END IF
      RETURN
      END
      SUBROUTINE HOWFAR_MIRROR
      IMPLICIT NONE
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/CM_MIRROR/ ICM_MIRROR, IRSTART_MIRROR,IREND_MIRROR, N_MIRRO
     *R,N_GAP_MIRROR, IR_MIRROR, ZFRONT_MIRROR, ZMIN_MIRROR, ZBACK_MIRRO
     *R, A_MIRROR, BMIN_MIRROR, BMAX_MIRROR, BMINT_MIRROR, BMAXT_MIRROR,
     * XFMIN_MIRROR, XFMAX_MIRROR, XBMIN_MIRROR, XBMAX_MIRROR, XFMINT_MI
     *RROR, XFMAXT_MIRROR, XBMINT_MIRROR, XBMAXT_MIRROR, DTHICK_MIRROR,
     *ZTHICK_MIRROR, TITLE_MIRROR
      INTEGER ICM_MIRROR,IRSTART_MIRROR,IREND_MIRROR, N_MIRROR,N_GAP_MIR
     *ROR,IR_MIRROR
      real*8 ZFRONT_MIRROR, ZMIN_MIRROR, ZBACK_MIRROR, A_MIRROR, BMIN_MI
     *RROR(10), BMAX_MIRROR(10), BMINT_MIRROR(10), BMAXT_MIRROR(10), XFM
     *IN_MIRROR(10), XFMAX_MIRROR(10), XBMIN_MIRROR(10), XBMAX_MIRROR(10
     *), XFMINT_MIRROR(10), XFMAXT_MIRROR(10), XBMINT_MIRROR(10), XBMAXT
     *_MIRROR(10),DTHICK_MIRROR(10), ZTHICK_MIRROR
      CHARACTER*1 TITLE_MIRROR(60)
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      INTEGER IRL,  IRNEW_MIRROR,  I,  NERROR_M
      real*8 DIST,  XPLN_MIRROR
      IRL = IR(NP)
      CALL HOWNEAR_MIRROR(DNEAR(NP))
      IF ((IR_MIRROR .GT. 0 .AND. IR_MIRROR .LE. N_MIRROR )) THEN
          IF ((X(NP) .GT. A_MIRROR*Z(NP)+BMAXT_MIRROR(IR_MIRROR))) THEN
              IRNEW = IRSTART_MIRROR + IR_MIRROR
              USTEP = 0
              RETURN
          ELSE IF((X(NP) .LT. A_MIRROR*Z(NP)+BMINT_MIRROR(IR_MIRROR))) T
     *    HEN
              IRNEW = IRSTART_MIRROR + IR_MIRROR - 2
              IF ((IR_MIRROR .EQ. 1)) THEN
                  IRNEW = IRSTART_MIRROR + N_MIRROR + 1
              END IF
              USTEP = 0
              RETURN
          END IF
          IF ((W(NP) .GT. 0.0)) THEN
              DIST = (ZBACK_MIRROR - Z(NP))/W(NP)
              IF ((DIST.LE.0.)) THEN
                  DIST=1.E-16
              END IF
              IRNEW_MIRROR = 1
              XPLN_MIRROR = X(NP) + U(NP)*DIST
              IF ((XPLN_MIRROR .GT. XBMAXT_MIRROR(IR_MIRROR))) THEN
                  IRNEW_MIRROR = IRSTART_MIRROR + IR_MIRROR
                  DIST = (A_MIRROR*Z(NP)+BMAXT_MIRROR(IR_MIRROR) -X(NP))
     *            /(U(NP)-W(NP)*A_MIRROR)
              ELSE IF((XPLN_MIRROR .LT. XBMINT_MIRROR(IR_MIRROR))) THEN
                  IRNEW_MIRROR = IRSTART_MIRROR + IR_MIRROR - 2
                  IF ((IR_MIRROR .EQ. 1)) THEN
                      IRNEW_MIRROR = IRSTART_MIRROR + N_MIRROR + 1
                  END IF
                  DIST = (A_MIRROR*Z(NP)+BMINT_MIRROR(IR_MIRROR) -X(NP))
     *            /(U(NP)-W(NP)*A_MIRROR)
              END IF
          ELSE IF((W(NP) .LT. 0.0)) THEN
              DIST = (ZMIN_MIRROR - Z(NP))/W(NP)
              IF ((DIST.LE.0. .AND. N_GAP_MIRROR.EQ.0)) THEN
                  DIST=1.E-16
              END IF
              XPLN_MIRROR = X(NP) + U(NP)*DIST
              IRNEW_MIRROR = IREND_MIRROR
              IF ((N_GAP_MIRROR .EQ. 0)) THEN
                  IRNEW_MIRROR = 1
              END IF
              IF ((XPLN_MIRROR .GT. XFMAXT_MIRROR(IR_MIRROR))) THEN
                  IRNEW_MIRROR = IRSTART_MIRROR + IR_MIRROR
                  DIST = (A_MIRROR*Z(NP)+BMAXT_MIRROR(IR_MIRROR) -X(NP))
     *            /(U(NP)-W(NP)*A_MIRROR)
              ELSE IF((XPLN_MIRROR .LT. XFMINT_MIRROR(IR_MIRROR))) THEN
                  IRNEW_MIRROR = IRSTART_MIRROR + IR_MIRROR - 2
                  IF ((IR_MIRROR .EQ. 1)) THEN
                      IRNEW_MIRROR = IRSTART_MIRROR + N_MIRROR + 1
                  END IF
                  DIST = (A_MIRROR*Z(NP)+BMINT_MIRROR(IR_MIRROR) -X(NP))
     *            /(U(NP)-W(NP)*A_MIRROR)
              END IF
          ELSE
              IF ((U(NP) .GT. 0.0)) THEN
                  IRNEW_MIRROR = IRSTART_MIRROR + IR_MIRROR
                  DIST = (A_MIRROR*Z(NP)+BMAXT_MIRROR(IR_MIRROR)-X(NP))/
     *            U(NP)
              ELSE IF((U(NP) .LT. 0.0)) THEN
                  IRNEW_MIRROR = IRSTART_MIRROR + IR_MIRROR - 2
                  IF ((IR_MIRROR .EQ. 1)) THEN
                      IRNEW_MIRROR = IRSTART_MIRROR + N_MIRROR + 1
                  END IF
                  DIST = (A_MIRROR*Z(NP)+BMINT_MIRROR(IR_MIRROR)-X(NP))/
     *            U(NP)
              END IF
          END IF
          IF ((DIST .LE. USTEP )) THEN
              USTEP = DIST
              IF ((IRNEW_MIRROR.EQ.1)) THEN
                  IF ((W(NP) .GT. 0.0)) THEN
                      CALL WHERE_AM_I(ICM_MIRROR,1)
                  ELSE IF((W(NP) .LT. 0.0)) THEN
                      CALL WHERE_AM_I(ICM_MIRROR,-1)
                  END IF
              ELSE
                  IRNEW = IRNEW_MIRROR
              END IF
          END IF
      ELSE IF((IR_MIRROR .EQ. N_MIRROR + 1)) THEN
          IF ((X(NP) .LT. A_MIRROR*Z(NP)+BMAX_MIRROR(N_MIRROR))) THEN
              IRNEW = IRSTART_MIRROR + N_MIRROR - 1
              USTEP = 0
              RETURN
          END IF
          IF ((W(NP) .GT. 0.0)) THEN
              DIST = (ZBACK_MIRROR - Z(NP))/W(NP)
              IF ((DIST.LE.0.)) THEN
                  DIST=1.E-16
              END IF
              IRNEW_MIRROR = 1
              XPLN_MIRROR = X(NP) + U(NP)*DIST
              IF ((XPLN_MIRROR .LT. XBMAX_MIRROR(N_MIRROR))) THEN
                  IRNEW_MIRROR = IRSTART_MIRROR + IR_MIRROR - 2
                  DIST = (A_MIRROR*Z(NP)+BMAX_MIRROR(N_MIRROR) -X(NP))/(
     *            U(NP)-W(NP)*A_MIRROR)
              END IF
          ELSE IF((W(NP) .LT. 0.0)) THEN
              DIST = (ZMIN_MIRROR - Z(NP))/W(NP)
              IF ((DIST.LE.0. .AND. N_GAP_MIRROR .EQ. 0)) THEN
                  DIST=1.E-16
              END IF
              IRNEW_MIRROR = IREND_MIRROR
              IF ((N_GAP_MIRROR .EQ. 0)) THEN
                  IRNEW_MIRROR = 1
              END IF
              XPLN_MIRROR = X(NP) + U(NP)*DIST
              IF ((XPLN_MIRROR .LT. XFMAX_MIRROR(N_MIRROR))) THEN
                  IRNEW_MIRROR = IRSTART_MIRROR + IR_MIRROR - 2
                  DIST = (A_MIRROR*Z(NP)+BMAX_MIRROR(N_MIRROR) -X(NP))/(
     *            U(NP)-W(NP)*A_MIRROR)
              END IF
          ELSE
              IF ((U(NP) .LT. 0.0)) THEN
                  IRNEW_MIRROR = IRSTART_MIRROR + IR_MIRROR - 2
                  DIST = (A_MIRROR*Z(NP)+BMAX_MIRROR(N_MIRROR)-X(NP))/U(
     *            NP)
              END IF
          END IF
          IF ((DIST .LE. USTEP )) THEN
              USTEP = DIST
              IF ((IRNEW_MIRROR.EQ.1)) THEN
                  IF ((W(NP) .GT. 0.0)) THEN
                      CALL WHERE_AM_I(ICM_MIRROR,1)
                  ELSE IF((W(NP) .LT. 0.0)) THEN
                      CALL WHERE_AM_I(ICM_MIRROR,-1)
                  END IF
              ELSE
                  IRNEW = IRNEW_MIRROR
              END IF
          END IF
      ELSE IF((IR_MIRROR .EQ. N_MIRROR + 2)) THEN
          IF ((X(NP) .GT. A_MIRROR*Z(NP)+BMIN_MIRROR(1))) THEN
              IRNEW = IRSTART_MIRROR
              USTEP = 0
              RETURN
          END IF
          IF ((W(NP) .GT. 0.0)) THEN
              DIST = (ZBACK_MIRROR - Z(NP))/W(NP)
              IF ((DIST.LE.0.)) THEN
                  DIST=1.E-16
              END IF
              IRNEW_MIRROR = 1
              XPLN_MIRROR = X(NP) + U(NP)*DIST
              IF ((XPLN_MIRROR .GT. XBMIN_MIRROR(1))) THEN
                  IRNEW_MIRROR = IRSTART_MIRROR
                  DIST = (A_MIRROR*Z(NP)+BMIN_MIRROR(1) -X(NP))/(U(NP)-W
     *            (NP)*A_MIRROR)
              END IF
          ELSE IF((W(NP) .LT. 0.0)) THEN
              DIST = (ZMIN_MIRROR - Z(NP))/W(NP)
              IF ((DIST.LE.0. .AND. N_GAP_MIRROR .EQ. 0)) THEN
                  DIST=1.E-16
              END IF
              IRNEW_MIRROR = IREND_MIRROR
              XPLN_MIRROR = X(NP) + U(NP)*DIST
              IF ((N_GAP_MIRROR .EQ. 0)) THEN
                  IRNEW_MIRROR = 1
              END IF
              IF ((XPLN_MIRROR .GT. XFMIN_MIRROR(1))) THEN
                  IRNEW_MIRROR = IRSTART_MIRROR
                  DIST = (A_MIRROR*Z(NP)+BMIN_MIRROR(1) -X(NP))/(U(NP)-W
     *            (NP)*A_MIRROR)
              END IF
          ELSE
              IF ((U(NP) .GT. 0.0)) THEN
                  IRNEW_MIRROR = IRSTART_MIRROR
                  DIST = (A_MIRROR*Z(NP)+BMIN_MIRROR(1)-X(NP))/U(NP)
              END IF
          END IF
          IF ((DIST .LE. USTEP )) THEN
              USTEP = DIST
              IF ((IRNEW_MIRROR.EQ.1)) THEN
                  IF ((W(NP) .GT. 0.0)) THEN
                      CALL WHERE_AM_I(ICM_MIRROR,1)
                  ELSE IF((W(NP) .LT. 0.0)) THEN
                      CALL WHERE_AM_I(ICM_MIRROR,-1)
                  END IF
              ELSE
                  IRNEW = IRNEW_MIRROR
              END IF
          END IF
      ELSE IF((IR_MIRROR .EQ. N_MIRROR + 3)) THEN
          IF ((W(NP) .GT. 0.0)) THEN
              DIST = (ZMIN_MIRROR - Z(NP))/W(NP)
              IF ((DIST .LT. 0.0)) THEN
                  DIST = 0.0
              END IF
              XPLN_MIRROR = X(NP) + U(NP)*DIST
              IF ((XPLN_MIRROR .LT. XFMIN_MIRROR(1))) THEN
                  IRNEW_MIRROR = IRSTART_MIRROR + N_MIRROR + 1
              ELSE IF((XPLN_MIRROR .LT. XFMAX_MIRROR(N_MIRROR))) THEN
                  DO 16931 I=1,N_MIRROR
                      IF ((XPLN_MIRROR .LT. XFMAX_MIRROR(I))) THEN
                          IRNEW_MIRROR = IRSTART_MIRROR + I - 1
                          GO TO16932
                      END IF
16931             CONTINUE
16932             CONTINUE
              ELSE
                  IRNEW_MIRROR = IRSTART_MIRROR + N_MIRROR
              END IF
          ELSE IF((W(NP) .LT. 0.0)) THEN
              DIST = (ZFRONT_MIRROR - Z(NP))/W(NP)
              IF ((DIST .LE. 0.0)) THEN
                  DIST = 1.E-16
              END IF
              IRNEW_MIRROR = 1
          END IF
          IF ((DIST .LE. USTEP )) THEN
              USTEP = DIST
              IF ((IRNEW_MIRROR .EQ. 1)) THEN
                  CALL WHERE_AM_I(ICM_MIRROR,-1)
              ELSE
                  IRNEW = IRNEW_MIRROR
              END IF
          END IF
      ELSE
          WRITE(6,16940)IR(NP)-IRSTART_MIRROR+1,IR(NP), ICM_MIRROR,IR_st
     *    art_CM(ICM_MIRROR)
16940     FORMAT(//' ************'//' HOWFAR_MIRROR error: region # conf
     *used,'/ '    Region, local, absolute =',2I5/ '    CM number=',I5,'
     * start region =',I5/ '    This particle is being terminated on spo
     *t.', ' ************'//)
          NERROR_M=NERROR_M+1
          IDISC=1
          USTEP = 0.
          IRNEW = IRL
          IF ((NERROR_M.EQ.10)) THEN
              WRITE(6,16950)
16950         FORMAT(//' TOO MANY PARTICLES ARE NEGLECTED IN THIS CM!!'/
     */)
              STOP
          END IF
      END IF
      RETURN
      END
      SUBROUTINE INPUT_MIRROR
      IMPLICIT NONE
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/CM_MIRROR/ ICM_MIRROR, IRSTART_MIRROR,IREND_MIRROR, N_MIRRO
     *R,N_GAP_MIRROR, IR_MIRROR, ZFRONT_MIRROR, ZMIN_MIRROR, ZBACK_MIRRO
     *R, A_MIRROR, BMIN_MIRROR, BMAX_MIRROR, BMINT_MIRROR, BMAXT_MIRROR,
     * XFMIN_MIRROR, XFMAX_MIRROR, XBMIN_MIRROR, XBMAX_MIRROR, XFMINT_MI
     *RROR, XFMAXT_MIRROR, XBMINT_MIRROR, XBMAXT_MIRROR, DTHICK_MIRROR,
     *ZTHICK_MIRROR, TITLE_MIRROR
      INTEGER ICM_MIRROR,IRSTART_MIRROR,IREND_MIRROR, N_MIRROR,N_GAP_MIR
     *ROR,IR_MIRROR
      real*8 ZFRONT_MIRROR, ZMIN_MIRROR, ZBACK_MIRROR, A_MIRROR, BMIN_MI
     *RROR(10), BMAX_MIRROR(10), BMINT_MIRROR(10), BMAXT_MIRROR(10), XFM
     *IN_MIRROR(10), XFMAX_MIRROR(10), XBMIN_MIRROR(10), XBMAX_MIRROR(10
     *), XFMINT_MIRROR(10), XFMAXT_MIRROR(10), XBMINT_MIRROR(10), XBMAXT
     *_MIRROR(10),DTHICK_MIRROR(10), ZTHICK_MIRROR
      CHARACTER*1 TITLE_MIRROR(60)
      COMMON/GEOM/ NREG
      INTEGER NREG
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 BDYTOL
      INTEGER I,J,NDO,  IRA,  MED_FLAG,  MED_INDEX
      ICM_MIRROR = ICM
      IRSTART_MIRROR = IR_start_CM(ICM_MIRROR)
      IERR_GEOM(ICM_MIRROR) = 0
      WRITE(6,16960)
16960 FORMAT(/' MIRROR (MIRROR)')
      WRITE(6,16970)RMAX_CM(ICM)
16970 FORMAT(/' Next component is a flat inclined mirror'/ '      Outerb
     *oundary is a square with |x| & |y| <',F10.2,' cm')
      IF ((ICM_MIRROR .EQ. 1)) THEN
          WRITE(6,16980)Z_min_CM(1)
16980     FORMAT(' This component starts at',F10.4,' cm from the ref pla
     *ne(Z=0)')
      ELSE
          WRITE(6,16990)Z_min_CM(ICM_MIRROR)
16990     FORMAT(' Previous CM ends at:',F12.5,' cm')
      END IF
      WRITE(6,17000)
17000 FORMAT(' TITLE: ',$)
      READ(i_input,17010,END=17020,ERR=17030)TITLE_MIRROR
17010 FORMAT(60A1)
      WRITE(6,17040)TITLE_MIRROR
17040 FORMAT(' ',60A1)
      WRITE(6,17050)
17050 FORMAT(' Z position at which mirror (excluding air gap) starts '/'
     *and thickness of mirror in Z direction (on one line)'/' : ',$)
      READ(i_input,17060,END=17020,ERR=17030)ZMIN_MIRROR,ZTHICK_MIRROR
17060 FORMAT(2F15.0)
      WRITE(6,17070)ZMIN_MIRROR,ZTHICK_MIRROR
17070 FORMAT(2F15.5)
      IF ((Z_min_CM(ICM_MIRROR).GT.ZMIN_MIRROR)) THEN
          IF ((ICM_MIRROR.EQ.1)) THEN
              WRITE(6,17080)ICM_MIRROR, ZMIN_MIRROR,Z_min_CM(ICM_MIRROR)
17080         FORMAT(//' ***WARNING IN CM ',I4,' (MIRROR):'/ ' Z_min_CM(
     *1) > Z at which mirror starts'/ ' Z_min_CM(1) reset to ',F8.5,' cm
     * from ',F8.5,' cm'//)
              WRITE(IOUTLIST,100)ICM_MIRROR, ZMIN_MIRROR,Z_min_CM(ICM_MI
     *        RROR)
100           FORMAT(//' ***WARNING IN CM ',I4,' (MIRROR):'/ ' Z_min_CM(
     *1) > Z at which mirror starts'/ ' Z_min_CM(1) reset to ',F8.5,' cm
     * from ',F8.5,' cm'//)
              Z_min_CM(ICM_MIRROR)=ZMIN_MIRROR
          ELSE
              WRITE(6,17090)ICM_MIRROR
17090         FORMAT(//'***ERROR IN CM ',I4,' (MIRROR):'/ 'Overlaps with
     * previous CM'//)
              IERR_GEOM(ICM_MIRROR)=IERR_GEOM(ICM_MIRROR)+1
          END IF
      END IF
      IF ((ZTHICK_MIRROR.LT.0.0)) THEN
          WRITE(6,17100)ICM_MIRROR
17100     FORMAT(//'***ERROR IN CM ',I4,' (MIRROR):'/ 'ZTHICK < 0.0'//)
          IERR_GEOM(ICM_MIRROR)=IERR_GEOM(ICM_MIRROR)+1
      END IF
      WRITE(6,17110)
17110 FORMAT(' XFMIN (X position that front face crosses front of CM) an
     *d'/, ' XBMIN (X position that front face crosses back of CM): ',$)
      READ(i_input,17120,END=17020,ERR=17030)XFMIN_MIRROR(1),XBMIN_MIRRO
     *R(1)
17120 FORMAT(2F15.0)
      WRITE(6,17130)XFMIN_MIRROR(1),XBMIN_MIRROR(1)
17130 FORMAT(2F11.5)
      IF ((XFMIN_MIRROR(1) .LT. XBMIN_MIRROR(1))) THEN
          WRITE(6,17140)ICM_MIRROR
17140     FORMAT(//'***ERROR IN CM ',I4,' (MIRROR):'/ 'XFMIN < XBMIN'//)
          IERR_GEOM(ICM_MIRROR)=IERR_GEOM(ICM_MIRROR)+1
      ELSE IF((ZTHICK_MIRROR.GT.0.0 .AND. ZTHICK_MIRROR/(XFMIN_MIRROR(1)
     * - XBMIN_MIRROR(1)).LT.0.0875)) THEN
          WRITE(6,17150)ICM_MIRROR
17150     FORMAT(//'***ERROR IN CM ',I4,' (MIRROR):'/ 'Mirror angle toos
     *mall which will result in simulation error'/ ' Module SLABS can be
     * used for such small angle simulations.'//)
          IERR_GEOM(ICM_MIRROR)=IERR_GEOM(ICM_MIRROR)+1
      END IF
      IF ((ABS(XFMIN_MIRROR(1)).GT.RMAX_CM(ICM_MIRROR))) THEN
          WRITE(6,17160)ICM_MIRROR
17160     FORMAT(//'***WARNING IN CM ',I4,' (MIRROR):'/ 'XFMIN(1) is out
     *side RMAX_CM'//)
          WRITE(IOUTLIST,'(//''***WARNING IN CM '',I4,'' (MIRROR):''/
     *                      ''XFMIN(1) is outside RMAX_CM''//)') ICM_MIR
     *    ROR
      END IF
      IF ((ABS(XBMIN_MIRROR(1)).GT.RMAX_CM(ICM_MIRROR))) THEN
          WRITE(6,17170)ICM_MIRROR
17170     FORMAT(//'***WARNING IN CM ',I4,' (MIRROR):'/ 'XBMIN(1) is out
     *side RMAX_CM'//)
          WRITE(IOUTLIST,'(//''***WARNING IN CM '',I4,'' (MIRROR):''/
     *                      ''XBMIN(1) is outside RMAX_CM''//)') ICM_MIR
     *    ROR
      END IF
      N_MIRROR = 10
      WRITE(6,17180)N_MIRROR
17180 FORMAT(' Number of layers of the mirror, minimum 1, maximum',I4)
      READ(i_input,17190,END=17020,ERR=17030)N_MIRROR
17190 FORMAT (I10)
      WRITE(6,17200)N_MIRROR
17200 FORMAT(' Number of layers in this mirror is',I4)
      IF ((N_MIRROR.GT.10)) THEN
          N_MIRROR=10
          WRITE(6,17210)ICM_MIRROR, N_MIRROR
17210     FORMAT(//'***ERROR IN CM ',I4,' (MIRROR):'/ '# of layers > max
     *. allowed'/ '# of layers reduced to ',F8.5,' for now'//)
          IERR_GEOM(ICM_MIRROR)=IERR_GEOM(ICM_MIRROR)+1
      ELSE IF((N_MIRROR.LT.1)) THEN
          N_MIRROR=1
          WRITE(6,17220)ICM_MIRROR
17220     FORMAT(//'***ERROR IN CM ',I4,' (MIRROR):'/ '# of layers < 1'/
     *'# of layers reset to 1 for now'//)
          IERR_GEOM(ICM_MIRROR)=IERR_GEOM(ICM_MIRROR)+1
      END IF
      DO 17231 I=1,N_MIRROR
          WRITE(6,17240)I
17240     FORMAT(' Thickness of layer',I3,'(in cm): ',$)
          READ(i_input,17250,END=17020,ERR=17030)DTHICK_MIRROR(I)
17250     FORMAT(F15.0)
          WRITE(6,17260)DTHICK_MIRROR(I)
17260     FORMAT(F15.5)
          IF ((DTHICK_MIRROR(I).LT.0.0)) THEN
              WRITE(6,17270)ICM_MIRROR, I
17270         FORMAT(//'***ERROR IN CM ',I4,' (MIRROR):'/ 'DTHICK(',I4,'
     *) < 0.0'//)
              IERR_GEOM(ICM_MIRROR)=IERR_GEOM(ICM_MIRROR)+1
          END IF
17231 CONTINUE
17232 CONTINUE
      XFMAX_MIRROR(1) = XFMIN_MIRROR(1) + SQRT(ZTHICK_MIRROR**2+(XFMIN_M
     *IRROR(1)- XBMIN_MIRROR(1))**2)/ZTHICK_MIRROR*DTHICK_MIRROR(1)
      XBMAX_MIRROR(1) = XBMIN_MIRROR(1) + SQRT(ZTHICK_MIRROR**2+(XFMIN_M
     *IRROR(1)- XBMIN_MIRROR(1))**2)/ZTHICK_MIRROR*DTHICK_MIRROR(1)
      IF ((N_MIRROR .GT. 1)) THEN
          DO 17281 I=2,N_MIRROR
              XFMIN_MIRROR(I) = XFMIN_MIRROR(I-1) + SQRT(ZTHICK_MIRROR**
     *        2+(XFMIN_MIRROR(1)- XBMIN_MIRROR(1))**2)/ZTHICK_MIRROR*DTH
     *        ICK_MIRROR(I-1)
              XFMAX_MIRROR(I-1) = XFMIN_MIRROR(I)
              XBMIN_MIRROR(I) = XBMIN_MIRROR(I-1) + SQRT(ZTHICK_MIRROR**
     *        2+(XFMIN_MIRROR(1)- XBMIN_MIRROR(1))**2)/ZTHICK_MIRROR*DTH
     *        ICK_MIRROR(I-1)
              XBMAX_MIRROR(I-1) = XBMIN_MIRROR(I)
              XFMAX_MIRROR(I) = XFMAX_MIRROR(I-1) + SQRT(ZTHICK_MIRROR**
     *        2+(XFMIN_MIRROR(1)- XBMIN_MIRROR(1))**2)/ZTHICK_MIRROR*DTH
     *        ICK_MIRROR(I)
              XBMAX_MIRROR(I) = XBMAX_MIRROR(I-1) + SQRT(ZTHICK_MIRROR**
     *        2+(XFMIN_MIRROR(1)- XBMIN_MIRROR(1))**2)/ZTHICK_MIRROR*DTH
     *        ICK_MIRROR(I)
17281     CONTINUE
17282     CONTINUE
      END IF
      IRA = IRSTART_MIRROR-1
      DO 17291 IR_MIRROR=1,N_MIRROR+2
          IRA = IRA+1
          IF ((IR_MIRROR .LE. N_MIRROR)) THEN
              WRITE(6,17300)IR_MIRROR
17300         FORMAT(/' For layer',I3,' of mirror:')
          ELSE IF((IR_MIRROR .EQ. N_MIRROR+1)) THEN
              WRITE(6,17310)
17310         FORMAT(/' For region behind mirror:')
          ELSE IF((IR_MIRROR .EQ. N_MIRROR+2)) THEN
              WRITE(6,17320)
17320         FORMAT(/' For region in front of mirror:')
          END IF
          WRITE(6,17330)
17330     FORMAT(' ECUT, PCUT(MeV), DOSE ZONE(0=DO NOT SCORE DOSE), IREG
     *ION_TO_BIT'/ ' :',$)
          READ(i_input,17340,END=17020,ERR=17030)ECUT(IRA),PCUT(IRA),DOS
     *    E_ZONE(IRA), IREGION_TO_BIT(IRA)
17340     FORMAT (2F15.0,2I5)
          WRITE(6,17350)ECUT(IRA),PCUT(IRA), DOSE_ZONE(IRA), IREGION_TO_
     *    BIT(IRA)
17350     FORMAT(F8.3,F9.3,I15,I19)
          IF ((ECUT(IRA) .LT. ECUTIN)) THEN
              ECUT(IRA)=ECUTIN
          END IF
          IF ((PCUT(IRA) .LT. PCUTIN)) THEN
              PCUT(IRA)=PCUTIN
          END IF
          IF ((IR_MIRROR.EQ.N_MIRROR+1)) THEN
              WRITE(6,17360)
17360         FORMAT(' Material of region behind mirror ',$)
          ELSE IF((IR_MIRROR.EQ.N_MIRROR+2)) THEN
              WRITE(6,17370)
17370         FORMAT(' Material of region in front of mirror ',$)
          ELSE
              WRITE(6,17380)IR_MIRROR
17380         FORMAT(' Material of layer ',I3,' ',$)
          END IF
          WRITE(6,17390)
17390     FORMAT(' MEDIUM (left justify): ',$)
          READ(i_input,'(24A1)',END=17020,ERR=17030) (MED_IN(J),J=1,24)
          WRITE(6,17400)(MED_IN(J),J=1,24)
17400     FORMAT(' ',24A1)
          IF ((MED_IN(1) .EQ. 'V' .AND. MED_IN(2).EQ.'A' .AND. MED_IN(3)
     *    .EQ.'C' .AND. MED_IN(4) .EQ. 'U' .AND. MED_IN(5).EQ.'U' .AND.
     *    MED_IN(6).EQ.'M')) THEN
              MED_INDEX=0
          ELSE
              IF ((NMED .NE. 0)) THEN
                  DO 17411 I=1,NMED
                      MED_FLAG = 0
                      DO 17421 J=1,24
                          IF ((MEDIA(J,I) .NE. MED_IN(J))) THEN
                              MED_FLAG = 1
                              GO TO17422
                          END IF
17421                 CONTINUE
17422                 CONTINUE
                      IF ((MED_FLAG .EQ. 0)) THEN
                          MED_INDEX = I
                          GO TO17412
                      END IF
                      IF ((I .EQ. NMED)) THEN
                          NMED = NMED+1
                          MED_INDEX = NMED
                          DO 17431 J=1,24
                              MEDIA(J,NMED) = MED_IN(J)
17431                     CONTINUE
17432                     CONTINUE
                          GO TO17412
                      END IF
17411             CONTINUE
17412             CONTINUE
              ELSE
                  NMED = 1
                  MED_INDEX = NMED
                  DO 17441 J=1,24
                      MEDIA(J,NMED) = MED_IN(J)
17441             CONTINUE
17442             CONTINUE
              END IF
          END IF
          MED(IRA) = MED_INDEX
17291 CONTINUE
17292 CONTINUE
      Z_gap_THICK(ICM_MIRROR) = ZMIN_MIRROR - Z_min_CM(ICM_MIRROR)
      IF ((Z_gap_THICK(ICM_MIRROR) .LT. 0.01)) THEN
          Z_gap_THICK(ICM_MIRROR) = 0.
          ZMIN_MIRROR=Z_min_CM(ICM_MIRROR)
          N_GAP_MIRROR = 0
      ELSE
          N_GAP_MIRROR = 1
      END IF
      IF ((N_GAP_MIRROR .EQ.1)) THEN
          IRA = IRSTART_MIRROR + N_MIRROR + 2
          ECUT(IRA) = ECUT(IRA-1)
          PCUT(IRA) = PCUT(IRA-1)
          MED(IRA) = AIR_INDEX
          ESAVE(IRA)=ESAVE_GLOBAL
      END IF
      BDYTOL = 1.E-5
      A_MIRROR = (XBMIN_MIRROR(1) - XFMIN_MIRROR(1))/ZTHICK_MIRROR
      DO 17451 I=1,N_MIRROR
          BMIN_MIRROR(I) = XFMIN_MIRROR(I) - A_MIRROR*ZMIN_MIRROR
          BMAX_MIRROR(I) = XFMAX_MIRROR(I) - A_MIRROR*ZMIN_MIRROR
          BMINT_MIRROR(I) = BMIN_MIRROR(I) - BDYTOL
          BMAXT_MIRROR(I) = BMAX_MIRROR(I) + BDYTOL
          XFMINT_MIRROR(I) = XFMIN_MIRROR(I) - BDYTOL
          XFMAXT_MIRROR(I) = XFMAX_MIRROR(I) + BDYTOL
          XBMINT_MIRROR(I) = XBMIN_MIRROR(I) - BDYTOL
          XBMAXT_MIRROR(I) = XBMAX_MIRROR(I) + BDYTOL
17451 CONTINUE
17452 CONTINUE
      ZBACK_MIRROR = ZMIN_MIRROR + ZTHICK_MIRROR
      Z_min_CM(ICM_MIRROR+1) = ZBACK_MIRROR
      ZFRONT_MIRROR = Z_min_CM(ICM_MIRROR)
      IREND_MIRROR = IRSTART_MIRROR + N_MIRROR + N_GAP_MIRROR + 1
      NREG = NREG + N_MIRROR + N_GAP_MIRROR + 2
      IF ((NREG .LE. 3000)) THEN
          IR_start_CM(ICM_MIRROR+1) = IREND_MIRROR + 1
      ELSE
          WRITE(6,17460)ICM_MIRROR,NREG,3000
17460     FORMAT(//'***ERROR IN CM ',I4,' (MIRROR):'/ I4,' regions reque
     *sted, only',I4,' available')
          N_MIRROR=10
          IERR_GEOM(ICM_MIRROR)=IERR_GEOM(ICM_MIRROR)+1
      END IF
      RMAX_CM_FLAG(ICM_MIRROR) = 2
      IRA = IRSTART_MIRROR-1
      DO 17471 IR_MIRROR=1,N_MIRROR+2
          IRA = IRA+1
          NDOSE_ZONE = MAX(DOSE_ZONE(IRA),NDOSE_ZONE)
          IF ((NDOSE_ZONE .GT. 1500)) THEN
              WRITE(6,17480)NDOSE_ZONE
17480         FORMAT(' Too many dose zone !', 'NDOSE_ZONE =',I5, ' > $MA
     *X_DOSE_ZONE')
              STOP
          END IF
          MAX_BIT = MAX(IREGION_TO_BIT(IRA),MAX_BIT)
          ESAVE(IRA)=ESAVE_GLOBAL
17471 CONTINUE
17472 CONTINUE
      NDO = MIN(5,N_MIRROR)
      IF ((IREJCT_GLOBAL .EQ. 1)) THEN
          WRITE(6,17490)
17490     FORMAT(//' ***************************************************
     **********'/ ' NOTE: MIRRORs RANGE REJECTION ALGORITHM ASSUMES THEM
     *IRROR'/ ' INTERSECTS THE ENTIRE BEAM!!!   CHECK IT'/ ' ***********
     *************************************************'//)
          WRITE(IOUTLIST,'(''*******************************************
     ***''/                '' NOTE: MIRRORs RANGE REJECTION ALGORITHM AS
     *SUMES THE MIRROR''/                '' INTERSECTS THE ENTIRE BEAM!!
     *!   CHECK IT''/                                  '' **************
     **********************************************''//)')
          DO 17501 IR_MIRROR=1,NDO
              IRA = IR_MIRROR + IRSTART_MIRROR-1
              Z_min_thick(ICM,IR_MIRROR) = DTHICK_MIRROR(IR_MIRROR)
              MED_min_thick(ICM, IR_MIRROR) = MED(IRA)
17501     CONTINUE
17502     CONTINUE
          IF ((NDO .LT. 5)) THEN
              Z_min_thick(ICM,NDO+1) = ZTHICK_MIRROR + Z_gap_thick(ICM_M
     *        IRROR)
              MED_min_thick(ICM,NDO+1) = AIR_INDEX
              WRITE(6,17510)ICM,NDO+1,Z_min_thick(ICM,NDO+1),ICM,NDO+1,
     *        MED_min_thick(ICM,NDO+1)
17510         FORMAT(' For air in CM ',T25,' Z_min_thick(',2I2,')=',F10.
     *3, '  MED_min_thick(',2I3,')=',I2)
          END IF
      END IF
      RETURN
17020 CONTINUE
      WRITE(6,17520)ICM
17520 FORMAT(//' *** ERROR *** unexpected end of file reading input forC
     *M',I3)
      STOP
17030 CONTINUE
      WRITE(6,17530)ICM
17530 FORMAT(//' *** ERROR *** format error on input for CM',I3)
      STOP
      END
      SUBROUTINE ISUMRY_MIRROR
      IMPLICIT NONE
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/CM_MIRROR/ ICM_MIRROR, IRSTART_MIRROR,IREND_MIRROR, N_MIRRO
     *R,N_GAP_MIRROR, IR_MIRROR, ZFRONT_MIRROR, ZMIN_MIRROR, ZBACK_MIRRO
     *R, A_MIRROR, BMIN_MIRROR, BMAX_MIRROR, BMINT_MIRROR, BMAXT_MIRROR,
     * XFMIN_MIRROR, XFMAX_MIRROR, XBMIN_MIRROR, XBMAX_MIRROR, XFMINT_MI
     *RROR, XFMAXT_MIRROR, XBMINT_MIRROR, XBMAXT_MIRROR, DTHICK_MIRROR,
     *ZTHICK_MIRROR, TITLE_MIRROR
      INTEGER ICM_MIRROR,IRSTART_MIRROR,IREND_MIRROR, N_MIRROR,N_GAP_MIR
     *ROR,IR_MIRROR
      real*8 ZFRONT_MIRROR, ZMIN_MIRROR, ZBACK_MIRROR, A_MIRROR, BMIN_MI
     *RROR(10), BMAX_MIRROR(10), BMINT_MIRROR(10), BMAXT_MIRROR(10), XFM
     *IN_MIRROR(10), XFMAX_MIRROR(10), XBMIN_MIRROR(10), XBMAX_MIRROR(10
     *), XFMINT_MIRROR(10), XFMAXT_MIRROR(10), XBMINT_MIRROR(10), XBMAXT
     *_MIRROR(10),DTHICK_MIRROR(10), ZTHICK_MIRROR
      CHARACTER*1 TITLE_MIRROR(60)
      COMMON/GEOM/ NREG
      INTEGER NREG
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      INTEGER ICOLOUR,  IRA,  I,J
      real*8 VOL_MIRROR(10),  YWIDTH, VOLTOT_MIRROR
      VOLTOT_MIRROR=0.
      IRA=IRSTART_MIRROR-1
      DO 17541 I=1,N_MIRROR + 2
          IRA = IRA+1
          IF ((I.LE.N_MIRROR)) THEN
              VOL_MIRROR(I)=SQRT(ZTHICK_MIRROR**2+(XFMIN_MIRROR(I)- XBMI
     *        N_MIRROR(I))**2)*DTHICK_MIRROR(I)* 2*RMAX_CM(ICM_MIRROR)
              IF ((XBMIN_MIRROR(I).LT.-RMAX_CM(ICM_MIRROR) .AND. XBMAX_M
     *        IRROR(I).GE.-RMAX_CM(ICM_MIRROR))) THEN
                  VOL_MIRROR(I)=VOL_MIRROR(I)-(ABS(XBMIN_MIRROR(I))- RMA
     *            X_CM(ICM_MIRROR))**2*(ZTHICK_MIRROR/ (XFMIN_MIRROR(I)-
     *            XBMIN_MIRROR(I)))* RMAX_CM(ICM_MIRROR)
              ELSE IF((XBMIN_MIRROR(I).LT.-RMAX_CM(ICM_MIRROR) .AND. XBM
     *        AX_MIRROR(I).LT.-RMAX_CM(ICM_MIRROR))) THEN
                  VOL_MIRROR(I)=VOL_MIRROR(I)-(XBMAX_MIRROR(I)- XBMIN_MI
     *            RROR(I))*(ABS(XBMAX_MIRROR(I))- RMAX_CM(ICM_MIRROR))*Z
     *            THICK_MIRROR/ (XFMIN_MIRROR(I)-XBMIN_MIRROR(I))*2* RMA
     *            X_CM(ICM_MIRROR)-(XBMAX_MIRROR(I)- XBMIN_MIRROR(I))**2
     *            *ZTHICK_MIRROR/ (XFMIN_MIRROR(I)-XBMIN_MIRROR(I))* RMA
     *            X_CM(ICM_MIRROR)
              END IF
              IF ((XFMAX_MIRROR(I).GT.RMAX_CM(ICM_MIRROR) .AND. XFMIN_MI
     *        RROR(I).LE.RMAX_CM(ICM_MIRROR))) THEN
                  IF ((XBMAX_MIRROR(I).GT.RMAX_CM(ICM_MIRROR))) THEN
                      VOL_MIRROR(I)=VOL_MIRROR(I)-(XFMAX_MIRROR(I)- XBMA
     *                X_MIRROR(I))*ZTHICK_MIRROR* RMAX_CM(ICM_MIRROR)-(X
     *                BMAX_MIRROR(I)- RMAX_CM(ICM_MIRROR))*ZTHICK_MIRROR
     *                * 2*RMAX_CM(ICM_MIRROR)
                  ELSE
                      VOL_MIRROR(I)=VOL_MIRROR(I)-(ABS(XFMAX_MIRROR(I))-
     *                 RMAX_CM(ICM_MIRROR))**2*ZTHICK_MIRROR/ (XFMIN_MIR
     *                ROR(I)-XBMIN_MIRROR(I))* RMAX_CM(ICM_MIRROR)
                  END IF
              ELSE IF((XFMAX_MIRROR(I).GT.RMAX_CM(ICM_MIRROR) .AND. XFMI
     *        N_MIRROR(I).GT.RMAX_CM(ICM_MIRROR))) THEN
                  IF ((XBMAX_MIRROR(I).GT.RMAX_CM(ICM_MIRROR))) THEN
                      VOL_MIRROR(I)=VOL_MIRROR(I)-(XFMAX_MIRROR(I)- XFMI
     *                N_MIRROR(I))*(XFMIN_MIRROR(I)- RMAX_CM(ICM_MIRROR)
     *                )*ZTHICK_MIRROR/ (XFMIN_MIRROR(I)-XBMIN_MIRROR(I))
     *                *2* RMAX_CM(ICM_MIRROR)-(XFMAX_MIRROR(I)- XFMIN_MI
     *                RROR(I))**2*ZTHICK_MIRROR/ (XFMIN_MIRROR(I)-XBMIN_
     *                MIRROR(I))* RMAX_CM(ICM_MIRROR)+(XBMAX_MIRROR(I)-
     *                RMAX_CM(ICM_MIRROR))**2*ZTHICK_MIRROR/ (XFMIN_MIRR
     *                OR(I)-XBMIN_MIRROR(I))* RMAX_CM(ICM_MIRROR)
                  ELSE
                      VOL_MIRROR(I)=VOL_MIRROR(I)-(XFMAX_MIRROR(I)- XFMI
     *                N_MIRROR(I))*(ABS(XFMIN_MIRROR(I))- RMAX_CM(ICM_MI
     *                RROR))*ZTHICK_MIRROR/ (XFMIN_MIRROR(I)-XBMIN_MIRRO
     *                R(I))*2* RMAX_CM(ICM_MIRROR)-(XFMAX_MIRROR(I)- XFM
     *                IN_MIRROR(I))**2*ZTHICK_MIRROR/ (XFMIN_MIRROR(I)-X
     *                BMIN_MIRROR(I))* RMAX_CM(ICM_MIRROR)
                  END IF
              END IF
              VOLTOT_MIRROR=VOLTOT_MIRROR+VOL_MIRROR(I)
          ELSE IF((I.EQ.N_MIRROR+1)) THEN
              IF ((XBMAX_MIRROR(N_MIRROR).GT.RMAX_CM(ICM_MIRROR))) THEN
                  VOL_MIRROR(I)=0.0
              ELSE
                  VOL_MIRROR(I)=ZTHICK_MIRROR*(XFMAX_MIRROR(N_MIRROR) -X
     *            BMAX_MIRROR(N_MIRROR))* RMAX_CM(ICM_MIRROR)
                  IF ((XFMAX_MIRROR(N_MIRROR).GT.RMAX_CM(ICM_MIRROR))) T
     *            HEN
                      VOL_MIRROR(I)=VOL_MIRROR(I)-(RMAX_CM(ICM_MIRROR)-
     *                XBMAX_MIRROR(N_MIRROR))*ZTHICK_MIRROR/ (XFMAX_MIRR
     *                OR(N_MIRROR)- XBMAX_MIRROR(N_MIRROR))* (XFMAX_MIRR
     *                OR(N_MIRROR)- RMAX_CM(ICM_MIRROR))*2*RMAX_CM(ICM_M
     *                IRROR)- (XFMAX_MIRROR(N_MIRROR)- RMAX_CM(ICM_MIRRO
     *                R))**2*ZTHICK_MIRROR/ (XFMAX_MIRROR(N_MIRROR)- XBM
     *                AX_MIRROR(N_MIRROR))* RMAX_CM(ICM_MIRROR)
                  ELSE
                      VOL_MIRROR(I)=VOL_MIRROR(I)+ZTHICK_MIRROR* (RMAX_C
     *                M(ICM_MIRROR)- XFMAX_MIRROR(N_MIRROR))*2* RMAX_CM(
     *                ICM_MIRROR)
                  END IF
                  IF ((XBMAX_MIRROR(N_MIRROR).LT.-RMAX_CM(ICM_MIRROR)))
     *            THEN
                      VOL_MIRROR(I)=VOL_MIRROR(I)- (ABS(XBMAX_MIRROR(N_M
     *                IRROR))- RMAX_CM(ICM_MIRROR))**2*ZTHICK_MIRROR/ (X
     *                FMAX_MIRROR(N_MIRROR)- XBMAX_MIRROR(N_MIRROR))* RM
     *                AX_CM(ICM_MIRROR)
                  END IF
              END IF
              VOLTOT_MIRROR=VOLTOT_MIRROR+VOL_MIRROR(I)
          ELSE IF((I.EQ.N_MIRROR+2)) THEN
              VOL_MIRROR(I)=ZTHICK_MIRROR*4*RMAX_CM(ICM_MIRROR)**2- VOLT
     *        OT_MIRROR
          END IF
          IF ((DOSE_ZONE(IRA).NE.0)) THEN
              ID=DOSE_ZONE(IRA)
              AMASS(ID)=AMASS(ID)+VOL_MIRROR(I)*RHOR(IRA)
          END IF
17541 CONTINUE
17542 CONTINUE
      WRITE(IOUTLIST,110) ICM_MIRROR,TITLE_MIRROR
      WRITE(IOUTLIST,120) Z_min_CM(ICM_MIRROR),RMAX_CM(ICM_MIRROR), ZMIN
     *_MIRROR,ZTHICK_MIRROR
      WRITE(IOUTLIST,122)
      IF ((N_GAP_MIRROR.NE.0)) THEN
          WRITE(IOUTLIST,126) 'airgap',ZMIN_MIRROR-Z_min_CM(ICM_MIRROR),
     *     'NA','NA','NA','NA'
          WRITE(IOUTLIST,126) 'at top'
      END IF
      DO 17551 I=1,N_MIRROR
          IF ((I.EQ.1)) THEN
              WRITE(IOUTLIST,124) I,'(front)',DTHICK_MIRROR(I), XFMIN_MI
     *        RROR(I),XBMIN_MIRROR(I), XFMAX_MIRROR(I),XBMAX_MIRROR(I)
          ELSE
              WRITE(IOUTLIST,123) I,DTHICK_MIRROR(I), XFMIN_MIRROR(I),XB
     *        MIN_MIRROR(I), XFMAX_MIRROR(I),XBMAX_MIRROR(I)
          END IF
17551 CONTINUE
17552 CONTINUE
      WRITE(IOUTLIST,125) ATAN((XFMIN_MIRROR(1)-XBMIN_MIRROR(1))/ ZTHICK
     *_MIRROR)*180./3.1415926
      WRITE(IOUTLIST,130)
      IRA = IRSTART_MIRROR-1
      DO 17561 IR_MIRROR=1,N_MIRROR+2+N_GAP_MIRROR
          IRA = IRA+1
          IF ((IR_MIRROR.LE.N_MIRROR)) THEN
              IF ((MED(IRA).EQ.0)) THEN
                  WRITE(IOUTLIST,140) IR_MIRROR,IR_MIRROR,'layer', ECUT(
     *            IRA),PCUT(IRA),ECUTRR(IRA),ESAVE(IRA), DOSE_ZONE(IRA),
     *            IREGION_TO_BIT(IRA), 'V','a','c','u','u','m'
              ELSE
                  WRITE(IOUTLIST,140) IR_MIRROR,IR_MIRROR,'layer', ECUT(
     *            IRA),PCUT(IRA),ECUTRR(IRA),ESAVE(IRA), DOSE_ZONE(IRA),
     *            IREGION_TO_BIT(IRA), (MEDIA(J,MED(IRA)),J=1,9)
              END IF
          ELSE IF((IR_MIRROR.LE.N_MIRROR+2)) THEN
              IF ((MED(IRA).EQ.0)) THEN
                  WRITE(IOUTLIST,141) IR_MIRROR,'NA','region', ECUT(IRA)
     *            ,PCUT(IRA),ECUTRR(IRA),ESAVE(IRA), DOSE_ZONE(IRA),IREG
     *            ION_TO_BIT(IRA), 'V','a','c','u','u','m'
              ELSE
                  WRITE(IOUTLIST,141) IR_MIRROR,'NA','region', ECUT(IRA)
     *            ,PCUT(IRA),ECUTRR(IRA),ESAVE(IRA), DOSE_ZONE(IRA),IREG
     *            ION_TO_BIT(IRA), (MEDIA(J,MED(IRA)),J=1,9)
              END IF
              IF ((IR_MIRROR.EQ.N_MIRROR+1)) THEN
                  WRITE(IOUTLIST,142)'behind'
              ELSE IF((IR_MIRROR.EQ.N_MIRROR+2)) THEN
                  WRITE(IOUTLIST,142)'in front'
              END IF
          ELSE IF((IR_MIRROR.EQ.N_MIRROR+2+N_GAP_MIRROR)) THEN
              IF ((MED(IRA).EQ.0)) THEN
                  WRITE(IOUTLIST,141) IR_MIRROR,'NA','airgap', ECUT(IRA)
     *            ,PCUT(IRA),ECUTRR(IRA),ESAVE(IRA), DOSE_ZONE(IRA),IREG
     *            ION_TO_BIT(IRA), 'V','a','c','u','u','m'
              ELSE
                  WRITE(IOUTLIST,141) IR_MIRROR,'NA','airgap', ECUT(IRA)
     *            ,PCUT(IRA),ECUTRR(IRA),ESAVE(IRA), DOSE_ZONE(IRA),IREG
     *            ION_TO_BIT(IRA), (MEDIA(J,MED(IRA)),J=1,9)
              END IF
              WRITE(IOUTLIST,142)'at top'
          END IF
17561 CONTINUE
17562 CONTINUE
110   FORMAT(///1X,79('-')/'  Component module',I3,' is a flat inclined'
     *, ' mirror MIRROR ' /1X,79('-') //T2,'Title: ',68A1)
120   FORMAT(/T2,'MIRROR geometry parameters:', /T2,'-------------------
     *----------', /T2,'Z of front face of CM = ',F15.5,' cm', /T2,'Half
     *-width of outer boundary of CM = ',F15.5,' cm', /T2,'Z at which mi
     *rror starts = ',F15.5, ' cm', /T2,'Z span of mirror = ',F15.5,' cm
     *')
122   FORMAT(/T2, 'layer #      thickness         XFMIN     XBMIN     XF
     *MAX     XBMAX', /T2, '               (cm)   (cm)')
123   FORMAT(T2,I2,F17.3,F17.3,3F10.3)
124   FORMAT(T2,I2,A7,F10.3,F17.3,3F10.3)
126   FORMAT(T2,A7,F12.3,A17,3A10)
125   FORMAT(/T2,'Angle of mirror face wrt z-axis = ',F15.5,' degrees')
130   FORMAT(/T2,'MIRROR region parameters:', /T2,'---------------------
     *------', /T2,'local layer  location   electron   photon', '  range
     *-rejection   dose  bit  medium' /T2,'region                   cuto
     *ff    cutoff', '   level     max    zone  set', /T2,'            (
     *MeV)      (MeV)', '   (MeV)    (MeV)')
140   FORMAT(T2,I3,I7,2X,A8,F11.3,F9.3,F9.3,F9.3,I5,I5,2X,9A1)
141   FORMAT(T2,I3,A7,2X,A8,F11.3,F9.3,F9.3,F9.3,I5,I5,2X,9A1)
142   FORMAT(T14,A8)
      ICOLOUR = 1
      YWIDTH = MIN(RMAX_CM(ICM_MIRROR),3.)
      IF ((IWATCH .EQ. 4 .OR. IZLAST .EQ. 2)) THEN
          ICOLOUR = MOD(ICM,4)+1
          DO 17571 I=1,N_MIRROR
              WRITE(IOUTGEOM,201) ICOLOUR,'QUAD', XFMIN_MIRROR(I), YWIDT
     *        H,ZMIN_MIRROR, XBMIN_MIRROR(I), YWIDTH,ZBACK_MIRROR, XBMIN
     *        _MIRROR(I),-YWIDTH,ZBACK_MIRROR, XFMIN_MIRROR(I),-YWIDTH,Z
     *        MIN_MIRROR
17571     CONTINUE
17572     CONTINUE
          WRITE(IOUTGEOM,201) ICOLOUR,'QUAD', XFMAX_MIRROR(N_MIRROR), YW
     *    IDTH,ZMIN_MIRROR, XBMAX_MIRROR(N_MIRROR), YWIDTH,ZBACK_MIRROR,
     *     XBMAX_MIRROR(N_MIRROR),-YWIDTH,ZBACK_MIRROR, XFMAX_MIRROR(N_M
     *    IRROR),-YWIDTH,ZMIN_MIRROR
201       FORMAT(' ',I1,A4,12(F7.2,','))
      END IF
      RETURN
      END
      SUBROUTINE WHERE_AM_I_MIRROR(IDIR)
      IMPLICIT NONE
      COMMON/CM_MIRROR/ ICM_MIRROR, IRSTART_MIRROR,IREND_MIRROR, N_MIRRO
     *R,N_GAP_MIRROR, IR_MIRROR, ZFRONT_MIRROR, ZMIN_MIRROR, ZBACK_MIRRO
     *R, A_MIRROR, BMIN_MIRROR, BMAX_MIRROR, BMINT_MIRROR, BMAXT_MIRROR,
     * XFMIN_MIRROR, XFMAX_MIRROR, XBMIN_MIRROR, XBMAX_MIRROR, XFMINT_MI
     *RROR, XFMAXT_MIRROR, XBMINT_MIRROR, XBMAXT_MIRROR, DTHICK_MIRROR,
     *ZTHICK_MIRROR, TITLE_MIRROR
      INTEGER ICM_MIRROR,IRSTART_MIRROR,IREND_MIRROR, N_MIRROR,N_GAP_MIR
     *ROR,IR_MIRROR
      real*8 ZFRONT_MIRROR, ZMIN_MIRROR, ZBACK_MIRROR, A_MIRROR, BMIN_MI
     *RROR(10), BMAX_MIRROR(10), BMINT_MIRROR(10), BMAXT_MIRROR(10), XFM
     *IN_MIRROR(10), XFMAX_MIRROR(10), XBMIN_MIRROR(10), XBMAX_MIRROR(10
     *), XFMINT_MIRROR(10), XFMAXT_MIRROR(10), XBMINT_MIRROR(10), XBMAXT
     *_MIRROR(10),DTHICK_MIRROR(10), ZTHICK_MIRROR
      CHARACTER*1 TITLE_MIRROR(60)
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      INTEGER I,  IDIR
      real*8 XF_MIRROR
      XF_MIRROR = X(NP) + USTEP*U(NP)
      IF ((IDIR.EQ.1)) THEN
          IF ((N_GAP_MIRROR .NE. 0)) THEN
              IRNEW = IREND_MIRROR
          ELSE
              IF ((IRSTART_MIRROR .EQ. 2)) THEN
                  XF_MIRROR = X(NP)
              END IF
              IF ((XF_MIRROR .LT. XFMIN_MIRROR(1))) THEN
                  IRNEW = IRSTART_MIRROR + N_MIRROR + 1
              ELSE IF((XF_MIRROR .LT. XFMAX_MIRROR(N_MIRROR))) THEN
                  DO 17581 I=1,N_MIRROR
                      IF ((XF_MIRROR .LT. XFMAX_MIRROR(I))) THEN
                          IRNEW = IRSTART_MIRROR + I - 1
                          RETURN
                      END IF
17581             CONTINUE
17582             CONTINUE
              ELSE
                  IRNEW = IRSTART_MIRROR + N_MIRROR
              END IF
          END IF
      ELSE
          IF ((XF_MIRROR .GT. XBMAX_MIRROR(N_MIRROR))) THEN
              IRNEW = IRSTART_MIRROR + N_MIRROR
          ELSE IF((XF_MIRROR .GT. XBMIN_MIRROR(1))) THEN
              DO 17591 I=1,N_MIRROR
                  IF ((XF_MIRROR .LE. XBMAX_MIRROR(I))) THEN
                      IRNEW = IRSTART_MIRROR + I - 1
                      RETURN
                  END IF
17591         CONTINUE
17592         CONTINUE
          ELSE
              IRNEW = IRSTART_MIRROR + N_MIRROR + 1
          END IF
      END IF
      RETURN
      END
      SUBROUTINE HOWNEAR_MIRROR(DIST)
      implicit none
      COMMON/CM_MIRROR/ ICM_MIRROR, IRSTART_MIRROR,IREND_MIRROR, N_MIRRO
     *R,N_GAP_MIRROR, IR_MIRROR, ZFRONT_MIRROR, ZMIN_MIRROR, ZBACK_MIRRO
     *R, A_MIRROR, BMIN_MIRROR, BMAX_MIRROR, BMINT_MIRROR, BMAXT_MIRROR,
     * XFMIN_MIRROR, XFMAX_MIRROR, XBMIN_MIRROR, XBMAX_MIRROR, XFMINT_MI
     *RROR, XFMAXT_MIRROR, XBMINT_MIRROR, XBMAXT_MIRROR, DTHICK_MIRROR,
     *ZTHICK_MIRROR, TITLE_MIRROR
      INTEGER ICM_MIRROR,IRSTART_MIRROR,IREND_MIRROR, N_MIRROR,N_GAP_MIR
     *ROR,IR_MIRROR
      real*8 ZFRONT_MIRROR, ZMIN_MIRROR, ZBACK_MIRROR, A_MIRROR, BMIN_MI
     *RROR(10), BMAX_MIRROR(10), BMINT_MIRROR(10), BMAXT_MIRROR(10), XFM
     *IN_MIRROR(10), XFMAX_MIRROR(10), XBMIN_MIRROR(10), XBMAX_MIRROR(10
     *), XFMINT_MIRROR(10), XFMAXT_MIRROR(10), XBMINT_MIRROR(10), XBMAXT
     *_MIRROR(10),DTHICK_MIRROR(10), ZTHICK_MIRROR
      CHARACTER*1 TITLE_MIRROR(60)
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      real*8 DIST
      IR_MIRROR = IR(NP) - IRSTART_MIRROR + 1
      IF ((IR_MIRROR .GT. 0 .AND. IR_MIRROR .LE. N_MIRROR )) THEN
          DIST=MIN( Z(NP)-ZMIN_MIRROR,  ZBACK_MIRROR-Z(NP),  (X(NP)-XBMI
     *    N_MIRROR(IR_MIRROR))*(ZTHICK_MIRROR/ SQRT((XBMIN_MIRROR(1) -XF
     *    MIN_MIRROR(1))**2+ZTHICK_MIRROR**2)) -(ZBACK_MIRROR-Z(NP))*((X
     *    FMIN_MIRROR(1)- XBMIN_MIRROR(1))/SQRT((XBMIN_MIRROR(1) -XFMIN_
     *    MIRROR(1))**2+ZTHICK_MIRROR**2)),  (ZBACK_MIRROR-Z(NP))*((XFMI
     *    N_MIRROR(1)- XBMIN_MIRROR(1))/SQRT((XBMIN_MIRROR(1) -XFMIN_MIR
     *    ROR(1))**2+ZTHICK_MIRROR**2)) - (X(NP)-XBMAX_MIRROR(IR_MIRROR)
     *    )*(ZTHICK_MIRROR/ SQRT((XBMIN_MIRROR(1)-XFMIN_MIRROR(1))**2+ZT
     *    HICK_MIRROR**2))  )
      ELSE IF((IR_MIRROR.EQ.N_MIRROR+1)) THEN
          DIST=MIN( Z(NP)-ZMIN_MIRROR,  ZBACK_MIRROR-Z(NP),  (X(NP)-XBMA
     *    X_MIRROR(N_MIRROR))*(ZTHICK_MIRROR /SQRT((XBMIN_MIRROR(1)-XFMI
     *    N_MIRROR(1))**2+ZTHICK_MIRROR**2)) -(ZBACK_MIRROR-Z(NP))*((XFM
     *    IN_MIRROR(1)-XBMIN_MIRROR(1))/ SQRT((XBMIN_MIRROR(1)-XFMIN_MIR
     *    ROR(1))**2+ZTHICK_MIRROR**2))  )
      ELSE IF((IR_MIRROR.EQ.N_MIRROR+2)) THEN
          DIST=MIN( Z(NP)-ZMIN_MIRROR,  ZBACK_MIRROR-Z(NP),  (ZBACK_MIRR
     *    OR-Z(NP))*((XFMIN_MIRROR(1)- XBMIN_MIRROR(1))/SQRT((XBMIN_MIRR
     *    OR(1) -XFMIN_MIRROR(1))**2+ZTHICK_MIRROR**2)) -(X(NP)-XBMIN_MI
     *    RROR(1))*(ZTHICK_MIRROR/SQRT((XFMIN_MIRROR(1) -XBMIN_MIRROR(1)
     *    )**2+ZTHICK_MIRROR**2))  )
      ELSE IF(((N_GAP_MIRROR.EQ.1).AND.(IR_MIRROR.EQ.N_MIRROR+3))) THEN
          DIST=MIN( Z(NP)-ZFRONT_MIRROR,  ZMIN_MIRROR-Z(NP)  )
      END IF
      RETURN
      END
      SUBROUTINE HOWFAR_MAINJAWS
      IMPLICIT NONE
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/CM_MAINJAWS/ IXY_CHOICE_MAINJAWS, APO_MAINJAWS, ANE_MAINJAW
     *S, XFP_MAINJAWS,XFPT_MAINJAWS, XFN_MAINJAWS,XFNT_MAINJAWS, XBP_MAI
     *NJAWS,XBPT_MAINJAWS, XBN_MAINJAWS,XBNT_MAINJAWS, BPO_MAINJAWS,BPOT
     *_MAINJAWS, BNE_MAINJAWS,BNET_MAINJAWS, ZMIN_MAINJAWS, ZMAX_MAINJAW
     *S, ZBACK_MAINJAWS,ZFRONT_MAINJAWS, COSP_MAINJAWS,COSN_MAINJAWS,XY_
     *MAINJAWS,UV_MAINJAWS, ICM_MAINJAWS, IRSTART_MAINJAWS, IREND_MAINJA
     *WS, N_MAINJAWS, ISCM_MAX_MAINJAWS, IR_MAINJAWS, ISCM_MAINJAWS, TIT
     *LE_MAINJAWS
      INTEGER ICM_MAINJAWS,IRSTART_MAINJAWS,IREND_MAINJAWS, N_MAINJAWS,I
     *SCM_MAX_MAINJAWS, IR_MAINJAWS, IXY_CHOICE_MAINJAWS(12), ISCM_MAINJ
     *AWS
      real*8 ZMIN_MAINJAWS(12), ZMAX_MAINJAWS(12), ZBACK_MAINJAWS, ZFRON
     *T_MAINJAWS, XFP_MAINJAWS(12), XFN_MAINJAWS(12), XBP_MAINJAWS(12),
     *XBN_MAINJAWS(12), XFPT_MAINJAWS(12,2), XFNT_MAINJAWS(12,2),XBPT_MA
     *INJAWS(12,2), XBNT_MAINJAWS(12,2),APO_MAINJAWS(12), ANE_MAINJAWS(1
     *2), BPO_MAINJAWS(12), BNE_MAINJAWS(12), BPOT_MAINJAWS(12,2), BNET_
     *MAINJAWS(12,2),COSP_MAINJAWS(12), COSN_MAINJAWS(12), XY_MAINJAWS,U
     *V_MAINJAWS
      CHARACTER*1 TITLE_MAINJAWS(60)
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      INTEGER IRL,  IB_MAINJAWS,  I_tpo,I_tne,  IRNEW_MAINJAWS
      real*8 DIST,  DIST1,  XPLN_MAINJAWS,  ZPLN_MAINJAWS
      DATA I_tpo,I_tne/0,0/
      IRL = IR(NP)
      CALL HOWNEAR_MAINJAWS(DNEAR(NP))
      IF ((IR_MAINJAWS .EQ. 3*ISCM_MAINJAWS-2)) THEN
          IB_MAINJAWS=1
          IF ((W(NP) .GT. 0.0 )) THEN
              IF ((Z(NP) .LT. ZMIN_MAINJAWS(ISCM_MAINJAWS) + 1.E-5)) THE
     *        N
                  DIST = (ZMIN_MAINJAWS(ISCM_MAINJAWS) - Z(NP) + 1.E-5)/
     *            W(NP)
                  XPLN_MAINJAWS = XY_MAINJAWS + UV_MAINJAWS * DIST
                  ZPLN_MAINJAWS = Z(NP)+DIST*W(NP)
                  IF ((XPLN_MAINJAWS .GT. APO_MAINJAWS(ISCM_MAINJAWS)*ZP
     *            LN_MAINJAWS + BPOT_MAINJAWS(ISCM_MAINJAWS,IB_MAINJAWS)
     *            )) THEN
                      IRNEW_MAINJAWS = IRSTART_MAINJAWS + 3*(ISCM_MAINJA
     *                WS-1) + 1
                  ELSE IF((XPLN_MAINJAWS .LT. ANE_MAINJAWS(ISCM_MAINJAWS
     *            )*ZPLN_MAINJAWS + BNET_MAINJAWS(ISCM_MAINJAWS,IB_MAINJ
     *            AWS))) THEN
                      IRNEW_MAINJAWS = IRSTART_MAINJAWS + 3*(ISCM_MAINJA
     *                WS-1) + 2
                  ELSE
                      DIST = (ZMAX_MAINJAWS(ISCM_MAINJAWS)-Z(NP) + 1.E-5
     *                )/W(NP)
                      IF ((DIST .LT. 0)) THEN
                          DIST = 0.0
                      END IF
                      IF ((DIST.EQ.0. .AND. ISCM_MAINJAWS.EQ.ISCM_MAX_MA
     *                INJAWS)) THEN
                          DIST=1.E-16
                      END IF
                      XPLN_MAINJAWS = XY_MAINJAWS + UV_MAINJAWS * DIST
                      ZPLN_MAINJAWS = Z(NP)+DIST*W(NP)
                      IRNEW_MAINJAWS = IRSTART_MAINJAWS + 3*ISCM_MAINJAW
     *                S
                      IF ((ISCM_MAINJAWS .EQ. ISCM_MAX_MAINJAWS)) THEN
                          IRNEW_MAINJAWS =1
                      END IF
                      DIST1=DIST
                      IF ((XPLN_MAINJAWS .GT. APO_MAINJAWS(ISCM_MAINJAWS
     *                )*ZPLN_MAINJAWS + BPOT_MAINJAWS(ISCM_MAINJAWS,IB_M
     *                AINJAWS))) THEN
                          DIST = (APO_MAINJAWS(ISCM_MAINJAWS)*Z(NP) + BP
     *                    OT_MAINJAWS(ISCM_MAINJAWS,IB_MAINJAWS) - XY_MA
     *                    INJAWS)/(UV_MAINJAWS-W(NP)*APO_MAINJAWS(ISCM_M
     *                    AINJAWS))
                          IF ((DIST .LT. 0.0)) THEN
                              I_tpo = I_tpo + 1
                              DIST = 0.0
                              IF ((Z(NP) .LT. ZFRONT_MAINJAWS-0.1 .OR. Z
     *                        (NP) .GT. ZBACK_MAINJAWS+0.1 )) THEN
                                  WRITE(6,17600)
17600                             FORMAT(/' ***WARNING in +ve bar of JAW
     *S'/ ' Particle is well above or below jaw, yet region number '/ 'i
     *ndicates the particle is still in the jaw.'/ ' The particle is bei
     *ng discarded but this is a bug.'/ ' Please contact the NRC.'/)
                                  IDISC=1
                                  RETURN
                              ELSE IF((I_tpo .GT. 20)) THEN
                                  WRITE(6,17610)
17610                             FORMAT(/' ***WARNING in +ve bar of JAW
     *S'/ ' DIST calculated to jaw opening has been -ve and reset to '/'
     * zero for the past 20 steps.  The particle could be assigned'/ ' t
     *o the wrong region number.  The particle is being discarded'/ ' bu
     *t this is a bug.  Please contact theNRC.'/)
                                  IDISC = 1
                                  I_tpo = 0
                                  RETURN
                              END IF
                          ELSE
                              I_tpo = 0
                          END IF
                          IF ((DIST.LT.DIST1)) THEN
                              IRNEW_MAINJAWS = IRSTART_MAINJAWS + 3*(ISC
     *                        M_MAINJAWS-1) + 1
                          ELSE
                              DIST=DIST1
                          END IF
                      ELSE IF((XPLN_MAINJAWS .LT. ANE_MAINJAWS(ISCM_MAIN
     *                JAWS)*ZPLN_MAINJAWS + BNET_MAINJAWS(ISCM_MAINJAWS,
     *                IB_MAINJAWS))) THEN
                          DIST = (ANE_MAINJAWS(ISCM_MAINJAWS)*Z(NP)+ BNE
     *                    T_MAINJAWS(ISCM_MAINJAWS,IB_MAINJAWS) - XY_MAI
     *                    NJAWS)/(UV_MAINJAWS-W(NP)*ANE_MAINJAWS(ISCM_MA
     *                    INJAWS))
                          IF ((DIST .LT. 0.0)) THEN
                              I_tne = I_tne + 1
                              DIST = 0.0
                              IF ((Z(NP) .LT. ZFRONT_MAINJAWS-0.1 .OR. Z
     *                        (NP) .GT. ZBACK_MAINJAWS+0.1 )) THEN
                                  WRITE(6,17620)
17620                             FORMAT(/' ***WARNING in -ve bar of JAW
     *S'/ ' Particle is well above or below jaw, yet region number '/ 'i
     *ndicates the particle is still in the jaw.'/ ' The particle is bei
     *ng discarded but this is a bug.'/ ' Please contact the NRC.'/)
                                  IDISC=1
                                  RETURN
                              ELSE IF((I_tne .GT. 20)) THEN
                                  WRITE(6,17630)
17630                             FORMAT(/' ***WARNING in -ve bar of JAW
     *S'/ ' DIST calculated to jaw opening has been -ve and reset to '/'
     * zero for the past 20 steps.  The particle could be assigned'/ ' t
     *o the wrong region number.  The particle is being discarded'/ ' bu
     *t this is a bug.  Please contact theNRC.'/)
                                  IDISC = 1
                                  I_tne = 0
                                  RETURN
                              END IF
                          ELSE
                              I_tne = 0
                          END IF
                          IF ((DIST.LT.DIST1)) THEN
                              IRNEW_MAINJAWS = IRSTART_MAINJAWS + 3*(ISC
     *                        M_MAINJAWS-1) + 2
                          ELSE
                              DIST=DIST1
                          END IF
                      END IF
                  END IF
              ELSE
                  IF (( XY_MAINJAWS .GT. APO_MAINJAWS(ISCM_MAINJAWS)*Z(N
     *            P) + BPOT_MAINJAWS(ISCM_MAINJAWS,IB_MAINJAWS) .AND. Z(
     *            NP) .GT. ZMIN_MAINJAWS(ISCM_MAINJAWS) + 1.E-5 .AND. Z(
     *            NP) .LT. ZMAX_MAINJAWS(ISCM_MAINJAWS) - 1.E-5 )) THEN
                      IRNEW = IRSTART_MAINJAWS + 3*(ISCM_MAINJAWS-1) + 1
                      USTEP = 0.0
                      RETURN
                  END IF
                  IF (( XY_MAINJAWS .LT. ANE_MAINJAWS(ISCM_MAINJAWS)*Z(N
     *            P) + BNET_MAINJAWS(ISCM_MAINJAWS,IB_MAINJAWS) .AND. Z(
     *            NP) .GT. ZMIN_MAINJAWS(ISCM_MAINJAWS) + 1.E-5 .AND. Z(
     *            NP) .LT. ZMAX_MAINJAWS(ISCM_MAINJAWS) - 1.E-5 )) THEN
                      IRNEW = IRSTART_MAINJAWS + 3*(ISCM_MAINJAWS-1) + 2
                      USTEP = 0.0
                      RETURN
                  END IF
                  DIST = (ZMAX_MAINJAWS(ISCM_MAINJAWS) - Z(NP) + 1.E-5)/
     *            W(NP)
                  IRNEW_MAINJAWS = IRSTART_MAINJAWS + 3*ISCM_MAINJAWS
                  IF ((ISCM_MAINJAWS .EQ. ISCM_MAX_MAINJAWS)) THEN
                      IRNEW_MAINJAWS =1
                  END IF
                  XPLN_MAINJAWS = XY_MAINJAWS + UV_MAINJAWS * DIST
                  ZPLN_MAINJAWS = Z(NP)+DIST*W(NP)
                  DIST1=DIST
                  IF ((XPLN_MAINJAWS .GT. APO_MAINJAWS(ISCM_MAINJAWS)*ZP
     *            LN_MAINJAWS + BPOT_MAINJAWS(ISCM_MAINJAWS,IB_MAINJAWS)
     *            )) THEN
                      DIST = (APO_MAINJAWS(ISCM_MAINJAWS)*Z(NP) + BPOT_M
     *                AINJAWS(ISCM_MAINJAWS,IB_MAINJAWS) - XY_MAINJAWS)/
     *                (UV_MAINJAWS-W(NP)*APO_MAINJAWS(ISCM_MAINJAWS))
                      IF ((DIST .LT. 0.0)) THEN
                          I_tpo = I_tpo + 1
                          DIST = 0.0
                          IF ((Z(NP) .LT. ZFRONT_MAINJAWS-0.1 .OR. Z(NP)
     *                     .GT. ZBACK_MAINJAWS+0.1 )) THEN
                              WRITE(6,17640)
17640                         FORMAT(/' ***WARNING in +ve bar of JAWS'/'
     * Particle is well above or below jaw, yet region number '/ ' indic
     *ates the particle is still in the jaw.'/' The particle is being di
     *scarded but this is a bug.'/ ' Please contact the NRC.'/)
                              IDISC=1
                              RETURN
                          ELSE IF((I_tpo .GT. 20)) THEN
                              WRITE(6,17650)
17650                         FORMAT(/' ***WARNING in +ve bar of JAWS'/'
     * DIST calculated to jaw opening has been-ve and reset to '/ ' zero
     * for the past 20 steps.  The particle could be assigned'/ ' to the
     * wrong region number.  The particle is being discarded'/ ' but thi
     *s is a bug.  Please contact the NRC.'/)
                              IDISC = 1
                              I_tpo = 0
                              RETURN
                          END IF
                      ELSE
                          I_tpo = 0
                      END IF
                      IF ((DIST.LT.DIST1)) THEN
                          IRNEW_MAINJAWS = IRSTART_MAINJAWS + 3*(ISCM_MA
     *                    INJAWS-1) + 1
                      ELSE
                          DIST=DIST1
                      END IF
                  ELSE IF((XPLN_MAINJAWS .LT. ANE_MAINJAWS(ISCM_MAINJAWS
     *            )*ZPLN_MAINJAWS + BNET_MAINJAWS(ISCM_MAINJAWS,IB_MAINJ
     *            AWS))) THEN
                      DIST = (ANE_MAINJAWS(ISCM_MAINJAWS)*Z(NP)+ BNET_MA
     *                INJAWS(ISCM_MAINJAWS,IB_MAINJAWS) - XY_MAINJAWS)/(
     *                UV_MAINJAWS-W(NP)*ANE_MAINJAWS(ISCM_MAINJAWS))
                      IF ((DIST .LT. 0.0)) THEN
                          I_tne = I_tne + 1
                          DIST = 0.0
                          IF ((Z(NP) .LT. ZFRONT_MAINJAWS-0.1 .OR. Z(NP)
     *                     .GT. ZBACK_MAINJAWS+0.1 )) THEN
                              WRITE(6,17660)
17660                         FORMAT(/' ***WARNING in -ve bar of JAWS'/'
     * Particle is well above or below jaw, yet region number '/ ' indic
     *ates the particle is still in the jaw.'/' The particle is being di
     *scarded but this is a bug.'/ ' Please contact the NRC.'/)
                              IDISC=1
                              RETURN
                          ELSE IF((I_tne .GT. 20)) THEN
                              WRITE(6,17670)
17670                         FORMAT(/' ***WARNING in -ve bar of JAWS'/'
     * DIST calculated to jaw opening has been-ve and reset to '/ ' zero
     * for the past 20 steps.  The particle could be assigned'/ ' to the
     * wrong region number.  The particle is being discarded'/ ' but thi
     *s is a bug.  Please contact the NRC.'/)
                              IDISC = 1
                              I_tne = 0
                              RETURN
                          END IF
                      ELSE
                          I_tne = 0
                      END IF
                      IF ((DIST.LT.DIST1)) THEN
                          IRNEW_MAINJAWS = IRSTART_MAINJAWS + 3*(ISCM_MA
     *                    INJAWS-1) + 2
                      ELSE
                          DIST=DIST1
                      END IF
                  END IF
              END IF
              IF ((DIST .LE. USTEP )) THEN
                  USTEP = DIST
                  IF ((IRNEW_MAINJAWS.EQ.1)) THEN
                      CALL WHERE_AM_I(ICM_MAINJAWS,1)
                  ELSE
                      IRNEW = IRNEW_MAINJAWS
                  END IF
              END IF
          ELSE IF((W(NP) .LT. 0.0)) THEN
              IF ((Z(NP) .LT. ZMIN_MAINJAWS(ISCM_MAINJAWS) + 1.E-5)) THE
     *        N
                  IF ((ISCM_MAINJAWS .EQ. 1)) THEN
                      DIST = (ZFRONT_MAINJAWS - Z(NP))/W(NP)
                      IF ((DIST .LE. 0)) THEN
                          DIST = 1.E-16
                      END IF
                      IRNEW_MAINJAWS = 1
                  ELSE
                      XY_MAINJAWS = X(NP)
                      UV_MAINJAWS = U(NP)
                      IF ((IXY_CHOICE_MAINJAWS(ISCM_MAINJAWS-1) .EQ. 1))
     *                 THEN
                          XY_MAINJAWS = Y(NP)
                          UV_MAINJAWS = V(NP)
                      END IF
                      DIST = (ZMAX_MAINJAWS(ISCM_MAINJAWS-1) - Z(NP) - 1
     *                .E-5)/W(NP)
                      XPLN_MAINJAWS = XY_MAINJAWS + UV_MAINJAWS * DIST
                      ZPLN_MAINJAWS = Z(NP) + DIST*W(NP)
                      IRNEW_MAINJAWS = IRSTART_MAINJAWS + 3*(ISCM_MAINJA
     *                WS-2)
                      IF ((XPLN_MAINJAWS .GT. APO_MAINJAWS(ISCM_MAINJAWS
     *                -1)*ZPLN_MAINJAWS + BPOT_MAINJAWS(ISCM_MAINJAWS-1,
     *                IB_MAINJAWS))) THEN
                          IRNEW_MAINJAWS = IRSTART_MAINJAWS + 3*(ISCM_MA
     *                    INJAWS-2) + 1
                      ELSE IF((XPLN_MAINJAWS .LT. ANE_MAINJAWS(ISCM_MAIN
     *                JAWS-1)*ZPLN_MAINJAWS + BNET_MAINJAWS(ISCM_MAINJAW
     *                S-1,IB_MAINJAWS))) THEN
                          IRNEW_MAINJAWS = IRSTART_MAINJAWS + 3*(ISCM_MA
     *                    INJAWS-2) + 2
                      END IF
                  END IF
              ELSE
                  IF (( XY_MAINJAWS .GT. APO_MAINJAWS(ISCM_MAINJAWS)*Z(N
     *            P) + BPOT_MAINJAWS(ISCM_MAINJAWS,IB_MAINJAWS) .AND. Z(
     *            NP) .GT. ZMIN_MAINJAWS(ISCM_MAINJAWS) + 1.E-5 .AND. Z(
     *            NP) .LT. ZMAX_MAINJAWS(ISCM_MAINJAWS) - 1.E-5 )) THEN
                      IRNEW = IRSTART_MAINJAWS + 3*(ISCM_MAINJAWS-1) + 1
                      USTEP = 0.0
                      RETURN
                  END IF
                  IF (( XY_MAINJAWS .LT. ANE_MAINJAWS(ISCM_MAINJAWS)*Z(N
     *            P) + BNET_MAINJAWS(ISCM_MAINJAWS,IB_MAINJAWS) .AND. Z(
     *            NP) .GT. ZMIN_MAINJAWS(ISCM_MAINJAWS) + 1.E-5 .AND. Z(
     *            NP) .LT. ZMAX_MAINJAWS(ISCM_MAINJAWS) - 1.E-5 )) THEN
                      IRNEW = IRSTART_MAINJAWS + 3*(ISCM_MAINJAWS-1) + 2
                      USTEP = 0.0
                      RETURN
                  END IF
                  DIST = (ZMIN_MAINJAWS(ISCM_MAINJAWS)-Z(NP) - 1.E-5)/W(
     *            NP)
                  IF ((DIST .LT. 0)) THEN
                      DIST = 0.0
                  END IF
                  XPLN_MAINJAWS = XY_MAINJAWS + UV_MAINJAWS * DIST
                  ZPLN_MAINJAWS = Z(NP) + DIST*W(NP)
                  DIST1=DIST
                  IF ((XPLN_MAINJAWS .GT. APO_MAINJAWS(ISCM_MAINJAWS)*ZP
     *            LN_MAINJAWS + BPOT_MAINJAWS(ISCM_MAINJAWS,IB_MAINJAWS)
     *            )) THEN
                      DIST = (APO_MAINJAWS(ISCM_MAINJAWS)*Z(NP) + BPOT_M
     *                AINJAWS(ISCM_MAINJAWS,IB_MAINJAWS) - XY_MAINJAWS)/
     *                (UV_MAINJAWS-W(NP)*APO_MAINJAWS(ISCM_MAINJAWS))
                      IF ((DIST .LT. 0.0)) THEN
                          I_tpo = I_tpo + 1
                          DIST = 0.0
                          IF ((Z(NP) .LT. ZFRONT_MAINJAWS-0.1 .OR. Z(NP)
     *                     .GT. ZBACK_MAINJAWS+0.1 )) THEN
                              WRITE(6,17680)
17680                         FORMAT(/' ***WARNING in +ve bar of JAWS'/'
     * Particle is well above or below jaw, yet region number '/ ' indic
     *ates the particle is still in the jaw.'/' The particle is being di
     *scarded but this is a bug.'/ ' Please contact the NRC.'/)
                              IDISC=1
                              RETURN
                          ELSE IF((I_tpo .GT. 20)) THEN
                              WRITE(6,17690)
17690                         FORMAT(/' ***WARNING in +ve bar of JAWS'/'
     * DIST calculated to jaw opening has been-ve and reset to '/ ' zero
     * for the past 20 steps.  The particle could be assigned'/ ' to the
     * wrong region number.  The particle is being discarded'/ ' but thi
     *s is a bug.  Please contact the NRC.'/)
                              IDISC = 1
                              I_tpo = 0
                              RETURN
                          END IF
                      ELSE
                          I_tpo = 0
                      END IF
                      IF ((DIST.LT.DIST1)) THEN
                          IRNEW_MAINJAWS = IRSTART_MAINJAWS + 3*(ISCM_MA
     *                    INJAWS-1) + 1
                      ELSE
                          DIST=DIST1
                      END IF
                  ELSE IF((XPLN_MAINJAWS .LT. ANE_MAINJAWS(ISCM_MAINJAWS
     *            )*ZPLN_MAINJAWS + BNET_MAINJAWS(ISCM_MAINJAWS,IB_MAINJ
     *            AWS))) THEN
                      DIST = (ANE_MAINJAWS(ISCM_MAINJAWS)*Z(NP)+ BNET_MA
     *                INJAWS(ISCM_MAINJAWS,IB_MAINJAWS) - XY_MAINJAWS)/(
     *                UV_MAINJAWS-W(NP)*ANE_MAINJAWS(ISCM_MAINJAWS))
                      IF ((DIST .LT. 0.0)) THEN
                          I_tne = I_tne + 1
                          DIST = 0.0
                          IF ((Z(NP) .LT. ZFRONT_MAINJAWS-0.1 .OR. Z(NP)
     *                     .GT. ZBACK_MAINJAWS+0.1 )) THEN
                              WRITE(6,17700)
17700                         FORMAT(/' ***WARNING in -ve bar of JAWS'/'
     * Particle is well above or below jaw, yet region number '/ ' indic
     *ates the particle is still in the jaw.'/' The particle is being di
     *scarded but this is a bug.'/ ' Please contact the NRC.'/)
                              IDISC=1
                              RETURN
                          ELSE IF((I_tne .GT. 20)) THEN
                              WRITE(6,17710)
17710                         FORMAT(/' ***WARNING in -ve bar of JAWS'/'
     * DIST calculated to jaw opening has been-ve and reset to '/ ' zero
     * for the past 20 steps.  The particle could be assigned'/ ' to the
     * wrong region number.  The particle is being discarded'/ ' but thi
     *s is a bug.  Please contact the NRC.'/)
                              IDISC = 1
                              I_tne = 0
                              RETURN
                          END IF
                      ELSE
                          I_tne = 0
                      END IF
                      IF ((DIST.LT.DIST1)) THEN
                          IRNEW_MAINJAWS = IRSTART_MAINJAWS + 3*(ISCM_MA
     *                    INJAWS-1) + 2
                      ELSE
                          DIST=DIST1
                      END IF
                  ELSE
                      IF ((ISCM_MAINJAWS .EQ. 1)) THEN
                          DIST = (ZFRONT_MAINJAWS - Z(NP))/W(NP)
                          IF ((DIST .LE. 0)) THEN
                              DIST = 1.E-16
                          END IF
                          IRNEW_MAINJAWS = 1
                      ELSE
                          XY_MAINJAWS = X(NP)
                          UV_MAINJAWS = U(NP)
                          IF ((IXY_CHOICE_MAINJAWS(ISCM_MAINJAWS-1) .EQ.
     *                     1)) THEN
                              XY_MAINJAWS = Y(NP)
                              UV_MAINJAWS = V(NP)
                          END IF
                          DIST = (ZMAX_MAINJAWS(ISCM_MAINJAWS-1) - Z(NP)
     *                     - 1.E-5)/W(NP)
                          IF ((DIST .LT. 0)) THEN
                              DIST = 0.0
                          END IF
                          XPLN_MAINJAWS = XY_MAINJAWS + UV_MAINJAWS * DI
     *                    ST
                          ZPLN_MAINJAWS = Z(NP) + DIST*W(NP)
                          IRNEW_MAINJAWS = IRSTART_MAINJAWS + 3*(ISCM_MA
     *                    INJAWS-2)
                          IF ((XPLN_MAINJAWS .GT. APO_MAINJAWS(ISCM_MAIN
     *                    JAWS-1)*ZPLN_MAINJAWS + BPOT_MAINJAWS(ISCM_MAI
     *                    NJAWS-1,IB_MAINJAWS))) THEN
                              IRNEW_MAINJAWS = IRSTART_MAINJAWS + 3*(ISC
     *                        M_MAINJAWS-2) + 1
                          ELSE IF((XPLN_MAINJAWS .LT. ANE_MAINJAWS(ISCM_
     *                    MAINJAWS-1)*ZPLN_MAINJAWS + BNET_MAINJAWS(ISCM
     *                    _MAINJAWS-1,IB_MAINJAWS))) THEN
                              IRNEW_MAINJAWS = IRSTART_MAINJAWS + 3*(ISC
     *                        M_MAINJAWS-2) + 2
                          END IF
                      END IF
                  END IF
              END IF
              IF ((DIST .LE. USTEP )) THEN
                  USTEP = DIST
                  IF ((IRNEW_MAINJAWS .EQ. 1)) THEN
                      CALL WHERE_AM_I(ICM_MAINJAWS,-1)
                  ELSE
                      USTEP = DIST
                      IRNEW = IRNEW_MAINJAWS
                  END IF
              END IF
          ELSE
              DIST=1.0E20
              IF ((Z(NP) .GT. ZMIN_MAINJAWS(ISCM_MAINJAWS) )) THEN
                  IF ((UV_MAINJAWS .GT. 0.0)) THEN
                      IRNEW_MAINJAWS = IRSTART_MAINJAWS + 3*(ISCM_MAINJA
     *                WS-1) + 1
                      DIST = (APO_MAINJAWS(ISCM_MAINJAWS)*Z(NP) + BPOT_M
     *                AINJAWS(ISCM_MAINJAWS,IB_MAINJAWS) - XY_MAINJAWS)/
     *                (UV_MAINJAWS-W(NP)*APO_MAINJAWS(ISCM_MAINJAWS))
                      IF ((DIST .LT. 0.0)) THEN
                          I_tpo = I_tpo + 1
                          DIST = 0.0
                          IF ((Z(NP) .LT. ZFRONT_MAINJAWS-0.1 .OR. Z(NP)
     *                     .GT. ZBACK_MAINJAWS+0.1 )) THEN
                              WRITE(6,17720)
17720                         FORMAT(/' ***WARNING in +ve bar of JAWS'/'
     * Particle is well above or below jaw, yet region number '/ ' indic
     *ates the particle is still in the jaw.'/' The particle is being di
     *scarded but this is a bug.'/ ' Please contact the NRC.'/)
                              IDISC=1
                              RETURN
                          ELSE IF((I_tpo .GT. 20)) THEN
                              WRITE(6,17730)
17730                         FORMAT(/' ***WARNING in +ve bar of JAWS'/'
     * DIST calculated to jaw opening has been-ve and reset to '/ ' zero
     * for the past 20 steps.  The particle could be assigned'/ ' to the
     * wrong region number.  The particle is being discarded'/ ' but thi
     *s is a bug.  Please contact the NRC.'/)
                              IDISC = 1
                              I_tpo = 0
                              RETURN
                          END IF
                      ELSE
                          I_tpo = 0
                      END IF
                  ELSE
                      IRNEW_MAINJAWS = IRSTART_MAINJAWS + 3*(ISCM_MAINJA
     *                WS-1) + 2
                      DIST = (ANE_MAINJAWS(ISCM_MAINJAWS)*Z(NP)+ BNET_MA
     *                INJAWS(ISCM_MAINJAWS,IB_MAINJAWS) - XY_MAINJAWS)/(
     *                UV_MAINJAWS-W(NP)*ANE_MAINJAWS(ISCM_MAINJAWS))
                      IF ((DIST .LT. 0.0)) THEN
                          I_tne = I_tne + 1
                          DIST = 0.0
                          IF ((Z(NP) .LT. ZFRONT_MAINJAWS-0.1 .OR. Z(NP)
     *                     .GT. ZBACK_MAINJAWS+0.1 )) THEN
                              WRITE(6,17740)
17740                         FORMAT(/' ***WARNING in -ve bar of JAWS'/'
     * Particle is well above or below jaw, yet region number '/ ' indic
     *ates the particle is still in the jaw.'/' The particle is being di
     *scarded but this is a bug.'/ ' Please contact the NRC.'/)
                              IDISC=1
                              RETURN
                          ELSE IF((I_tne .GT. 20)) THEN
                              WRITE(6,17750)
17750                         FORMAT(/' ***WARNING in -ve bar of JAWS'/'
     * DIST calculated to jaw opening has been-ve and reset to '/ ' zero
     * for the past 20 steps.  The particle could be assigned'/ ' to the
     * wrong region number.  The particle is being discarded'/ ' but thi
     *s is a bug.  Please contact the NRC.'/)
                              IDISC = 1
                              I_tne = 0
                              RETURN
                          END IF
                      ELSE
                          I_tne = 0
                      END IF
                  END IF
              END IF
              IF ((DIST .LE. USTEP )) THEN
                  USTEP = DIST
                  IRNEW = IRNEW_MAINJAWS
              END IF
          END IF
      ELSE IF((IR_MAINJAWS .EQ. 3*ISCM_MAINJAWS-1)) THEN
          IB_MAINJAWS=2
          IF (( XY_MAINJAWS .LT. APO_MAINJAWS(ISCM_MAINJAWS)*Z(NP) + BPO
     *    T_MAINJAWS(ISCM_MAINJAWS,IB_MAINJAWS) .AND. Z(NP) .GT. ZMIN_MA
     *    INJAWS(ISCM_MAINJAWS) - 1.E-5 .AND. Z(NP) .LT. ZMAX_MAINJAWS(I
     *    SCM_MAINJAWS) + 1.E-5 )) THEN
              IRNEW = IRSTART_MAINJAWS + 3*(ISCM_MAINJAWS-1)
              USTEP = 0.0
              RETURN
          END IF
          IF ((W(NP) .GT. 0.0)) THEN
              DIST = (ZMAX_MAINJAWS(ISCM_MAINJAWS)-Z(NP)+1.E-5)/W(NP)
              IF ((DIST .LT. 0)) THEN
                  DIST = 0.0
              END IF
              IF ((DIST.EQ.0. .AND. ISCM_MAINJAWS .EQ. ISCM_MAX_MAINJAWS
     *        )) THEN
                  DIST=1.E-16
              END IF
              IRNEW_MAINJAWS = IRSTART_MAINJAWS + 3*ISCM_MAINJAWS
              IF ((ISCM_MAINJAWS .EQ. ISCM_MAX_MAINJAWS)) THEN
                  IRNEW_MAINJAWS =1
              END IF
              XPLN_MAINJAWS = XY_MAINJAWS + UV_MAINJAWS * DIST
              ZPLN_MAINJAWS = Z(NP) + DIST*W(NP)
              IF ((XPLN_MAINJAWS .LT. APO_MAINJAWS(ISCM_MAINJAWS)*ZPLN_M
     *        AINJAWS + BPOT_MAINJAWS(ISCM_MAINJAWS,IB_MAINJAWS))) THEN
                  IRNEW_MAINJAWS = IRSTART_MAINJAWS + 3*(ISCM_MAINJAWS-1
     *            )
                  DIST = (APO_MAINJAWS(ISCM_MAINJAWS)*Z(NP) + BPOT_MAINJ
     *            AWS(ISCM_MAINJAWS,IB_MAINJAWS) - XY_MAINJAWS)/(UV_MAIN
     *            JAWS-W(NP)*APO_MAINJAWS(ISCM_MAINJAWS))
                  IF ((DIST .LT. 0.0)) THEN
                      I_tpo = I_tpo + 1
                      DIST = 0.0
                      IF ((Z(NP) .LT. ZFRONT_MAINJAWS-0.1 .OR. Z(NP) .GT
     *                . ZBACK_MAINJAWS+0.1 )) THEN
                          WRITE(6,17760)
17760                     FORMAT(/' ***WARNING in +ve bar of JAWS'/ ' Pa
     *rticle is well above or below jaw, yet region number '/ ' indicate
     *s the particle is still in the jaw.'/ ' The particle is being disc
     *arded but this is a bug.'/ ' Please contact the NRC.'/)
                          IDISC=1
                          RETURN
                      ELSE IF((I_tpo .GT. 20)) THEN
                          WRITE(6,17770)
17770                     FORMAT(/' ***WARNING in +ve bar of JAWS'/ ' DI
     *ST calculated to jaw opening has been -ve and reset to '/ ' zero f
     *or the past 20 steps.  The particle could be assigned'/ ' to the w
     *rong region number.  The particle is being discarded'/ ' but thisi
     *s a bug.  Please contact the NRC.'/)
                          IDISC = 1
                          I_tpo = 0
                          RETURN
                      END IF
                  ELSE
                      I_tpo = 0
                  END IF
              END IF
          ELSE IF((W(NP) .LT. 0.0)) THEN
              DIST = (ZMIN_MAINJAWS(ISCM_MAINJAWS)-Z(NP)-1.E-5)/W(NP)
              IF ((DIST .LT. 0)) THEN
                  DIST = 0.0
              END IF
              IRNEW_MAINJAWS = IRSTART_MAINJAWS + 3*(ISCM_MAINJAWS-1)
              XPLN_MAINJAWS = XY_MAINJAWS + UV_MAINJAWS * DIST
              ZPLN_MAINJAWS = Z(NP) + DIST*W(NP)
              IF ((XPLN_MAINJAWS .LT. APO_MAINJAWS(ISCM_MAINJAWS)*ZPLN_M
     *        AINJAWS + BPOT_MAINJAWS(ISCM_MAINJAWS,IB_MAINJAWS))) THEN
                  DIST = (APO_MAINJAWS(ISCM_MAINJAWS)*Z(NP) + BPOT_MAINJ
     *            AWS(ISCM_MAINJAWS,IB_MAINJAWS) - XY_MAINJAWS)/(UV_MAIN
     *            JAWS-W(NP)*APO_MAINJAWS(ISCM_MAINJAWS))
                  IF ((DIST .LT. 0.0)) THEN
                      I_tpo = I_tpo + 1
                      DIST = 0.0
                      IF ((Z(NP) .LT. ZFRONT_MAINJAWS-0.1 .OR. Z(NP) .GT
     *                . ZBACK_MAINJAWS+0.1 )) THEN
                          WRITE(6,17780)
17780                     FORMAT(/' ***WARNING in +ve bar of JAWS'/ ' Pa
     *rticle is well above or below jaw, yet region number '/ ' indicate
     *s the particle is still in the jaw.'/ ' The particle is being disc
     *arded but this is a bug.'/ ' Please contact the NRC.'/)
                          IDISC=1
                          RETURN
                      ELSE IF((I_tpo .GT. 20)) THEN
                          WRITE(6,17790)
17790                     FORMAT(/' ***WARNING in +ve bar of JAWS'/ ' DI
     *ST calculated to jaw opening has been -ve and reset to '/ ' zero f
     *or the past 20 steps.  The particle could be assigned'/ ' to the w
     *rong region number.  The particle is being discarded'/ ' but thisi
     *s a bug.  Please contact the NRC.'/)
                          IDISC = 1
                          I_tpo = 0
                          RETURN
                      END IF
                  ELSE
                      I_tpo = 0
                  END IF
              END IF
          ELSE
              DIST=1.0E20
              IF ((UV_MAINJAWS .LT. 0.0)) THEN
                  IRNEW_MAINJAWS = IRSTART_MAINJAWS + 3*(ISCM_MAINJAWS-1
     *            )
                  DIST = (APO_MAINJAWS(ISCM_MAINJAWS)*Z(NP) + BPOT_MAINJ
     *            AWS(ISCM_MAINJAWS,IB_MAINJAWS) - XY_MAINJAWS)/(UV_MAIN
     *            JAWS-W(NP)*APO_MAINJAWS(ISCM_MAINJAWS))
                  IF ((DIST .LT. 0.0)) THEN
                      I_tpo = I_tpo + 1
                      DIST = 0.0
                      IF ((Z(NP) .LT. ZFRONT_MAINJAWS-0.1 .OR. Z(NP) .GT
     *                . ZBACK_MAINJAWS+0.1 )) THEN
                          WRITE(6,17800)
17800                     FORMAT(/' ***WARNING in +ve bar of JAWS'/ ' Pa
     *rticle is well above or below jaw, yet region number '/ ' indicate
     *s the particle is still in the jaw.'/ ' The particle is being disc
     *arded but this is a bug.'/ ' Please contact the NRC.'/)
                          IDISC=1
                          RETURN
                      ELSE IF((I_tpo .GT. 20)) THEN
                          WRITE(6,17810)
17810                     FORMAT(/' ***WARNING in +ve bar of JAWS'/ ' DI
     *ST calculated to jaw opening has been -ve and reset to '/ ' zero f
     *or the past 20 steps.  The particle could be assigned'/ ' to the w
     *rong region number.  The particle is being discarded'/ ' but thisi
     *s a bug.  Please contact the NRC.'/)
                          IDISC = 1
                          I_tpo = 0
                          RETURN
                      END IF
                  ELSE
                      I_tpo = 0
                  END IF
              END IF
          END IF
          IF ((DIST .LE. USTEP )) THEN
              USTEP = DIST
              IF ((IRNEW_MAINJAWS.EQ.1)) THEN
                  CALL WHERE_AM_I(ICM_MAINJAWS,1)
              ELSE
                  IRNEW = IRNEW_MAINJAWS
              END IF
          END IF
      ELSE IF((IR_MAINJAWS .EQ. 3*ISCM_MAINJAWS)) THEN
          IB_MAINJAWS=2
          IF (( XY_MAINJAWS .GT. ANE_MAINJAWS(ISCM_MAINJAWS)*Z(NP) + BNE
     *    T_MAINJAWS(ISCM_MAINJAWS,IB_MAINJAWS) .AND. Z(NP) .GT. ZMIN_MA
     *    INJAWS(ISCM_MAINJAWS) - 1.E-5 .AND. Z(NP) .LT. ZMAX_MAINJAWS(I
     *    SCM_MAINJAWS) + 1.E-5 )) THEN
              IRNEW = IRSTART_MAINJAWS + 3*(ISCM_MAINJAWS-1)
              USTEP = 0.0
              RETURN
          END IF
          IF ((W(NP) .GT. 0.0)) THEN
              DIST = (ZMAX_MAINJAWS(ISCM_MAINJAWS)-Z(NP)+1.E-5)/W(NP)
              IF ((DIST .LT. 0)) THEN
                  DIST = 0.0
              END IF
              IF ((DIST.EQ.0. .AND. ISCM_MAINJAWS .EQ. ISCM_MAX_MAINJAWS
     *        )) THEN
                  DIST=1.E-16
              END IF
              IRNEW_MAINJAWS = IRSTART_MAINJAWS + 3*ISCM_MAINJAWS
              IF ((ISCM_MAINJAWS .EQ. ISCM_MAX_MAINJAWS)) THEN
                  IRNEW_MAINJAWS =1
              END IF
              XPLN_MAINJAWS = XY_MAINJAWS + UV_MAINJAWS * DIST
              ZPLN_MAINJAWS = Z(NP) + DIST*W(NP)
              IF ((XPLN_MAINJAWS .GT. ANE_MAINJAWS(ISCM_MAINJAWS)*ZPLN_M
     *        AINJAWS + BNET_MAINJAWS(ISCM_MAINJAWS,IB_MAINJAWS))) THEN
                  IRNEW_MAINJAWS = IRSTART_MAINJAWS + 3*(ISCM_MAINJAWS-1
     *            )
                  DIST = (ANE_MAINJAWS(ISCM_MAINJAWS)*Z(NP)+ BNET_MAINJA
     *            WS(ISCM_MAINJAWS,IB_MAINJAWS) - XY_MAINJAWS)/(UV_MAINJ
     *            AWS-W(NP)*ANE_MAINJAWS(ISCM_MAINJAWS))
                  IF ((DIST .LT. 0.0)) THEN
                      I_tne = I_tne + 1
                      DIST = 0.0
                      IF ((Z(NP) .LT. ZFRONT_MAINJAWS-0.1 .OR. Z(NP) .GT
     *                . ZBACK_MAINJAWS+0.1 )) THEN
                          WRITE(6,17820)
17820                     FORMAT(/' ***WARNING in -ve bar of JAWS'/ ' Pa
     *rticle is well above or below jaw, yet region number '/ ' indicate
     *s the particle is still in the jaw.'/ ' The particle is being disc
     *arded but this is a bug.'/ ' Please contact the NRC.'/)
                          IDISC=1
                          RETURN
                      ELSE IF((I_tne .GT. 20)) THEN
                          WRITE(6,17830)
17830                     FORMAT(/' ***WARNING in -ve bar of JAWS'/ ' DI
     *ST calculated to jaw opening has been -ve and reset to '/ ' zero f
     *or the past 20 steps.  The particle could be assigned'/ ' to the w
     *rong region number.  The particle is being discarded'/ ' but thisi
     *s a bug.  Please contact the NRC.'/)
                          IDISC = 1
                          I_tne = 0
                          RETURN
                      END IF
                  ELSE
                      I_tne = 0
                  END IF
              END IF
          ELSE IF((W(NP) .LT. 0.0)) THEN
              DIST = (ZMIN_MAINJAWS(ISCM_MAINJAWS)-Z(NP)-1.E-5)/W(NP)
              IF ((DIST .LT. 0)) THEN
                  DIST = 0.0
              END IF
              IRNEW_MAINJAWS = IRSTART_MAINJAWS + 3*(ISCM_MAINJAWS-1)
              XPLN_MAINJAWS = XY_MAINJAWS + UV_MAINJAWS * DIST
              ZPLN_MAINJAWS = Z(NP) + DIST*W(NP)
              IF ((XPLN_MAINJAWS .GT. ANE_MAINJAWS(ISCM_MAINJAWS)*ZPLN_M
     *        AINJAWS + BNET_MAINJAWS(ISCM_MAINJAWS,IB_MAINJAWS))) THEN
                  DIST = (ANE_MAINJAWS(ISCM_MAINJAWS)*Z(NP)+ BNET_MAINJA
     *            WS(ISCM_MAINJAWS,IB_MAINJAWS) - XY_MAINJAWS)/(UV_MAINJ
     *            AWS-W(NP)*ANE_MAINJAWS(ISCM_MAINJAWS))
                  IF ((DIST .LT. 0.0)) THEN
                      I_tne = I_tne + 1
                      DIST = 0.0
                      IF ((Z(NP) .LT. ZFRONT_MAINJAWS-0.1 .OR. Z(NP) .GT
     *                . ZBACK_MAINJAWS+0.1 )) THEN
                          WRITE(6,17840)
17840                     FORMAT(/' ***WARNING in -ve bar of JAWS'/ ' Pa
     *rticle is well above or below jaw, yet region number '/ ' indicate
     *s the particle is still in the jaw.'/ ' The particle is being disc
     *arded but this is a bug.'/ ' Please contact the NRC.'/)
                          IDISC=1
                          RETURN
                      ELSE IF((I_tne .GT. 20)) THEN
                          WRITE(6,17850)
17850                     FORMAT(/' ***WARNING in -ve bar of JAWS'/ ' DI
     *ST calculated to jaw opening has been -ve and reset to '/ ' zero f
     *or the past 20 steps.  The particle could be assigned'/ ' to the w
     *rong region number.  The particle is being discarded'/ ' but thisi
     *s a bug.  Please contact the NRC.'/)
                          IDISC = 1
                          I_tne = 0
                          RETURN
                      END IF
                  ELSE
                      I_tne = 0
                  END IF
              END IF
          ELSE
              DIST=1.0E20
              IF ((UV_MAINJAWS .GT. 0.0)) THEN
                  IRNEW_MAINJAWS = IRSTART_MAINJAWS + 3*(ISCM_MAINJAWS-1
     *            )
                  DIST = (ANE_MAINJAWS(ISCM_MAINJAWS)*Z(NP)+ BNET_MAINJA
     *            WS(ISCM_MAINJAWS,IB_MAINJAWS) - XY_MAINJAWS)/(UV_MAINJ
     *            AWS-W(NP)*ANE_MAINJAWS(ISCM_MAINJAWS))
                  IF ((DIST .LT. 0.0)) THEN
                      I_tne = I_tne + 1
                      DIST = 0.0
                      IF ((Z(NP) .LT. ZFRONT_MAINJAWS-0.1 .OR. Z(NP) .GT
     *                . ZBACK_MAINJAWS+0.1 )) THEN
                          WRITE(6,17860)
17860                     FORMAT(/' ***WARNING in -ve bar of JAWS'/ ' Pa
     *rticle is well above or below jaw, yet region number '/ ' indicate
     *s the particle is still in the jaw.'/ ' The particle is being disc
     *arded but this is a bug.'/ ' Please contact the NRC.'/)
                          IDISC=1
                          RETURN
                      ELSE IF((I_tne .GT. 20)) THEN
                          WRITE(6,17870)
17870                     FORMAT(/' ***WARNING in -ve bar of JAWS'/ ' DI
     *ST calculated to jaw opening has been -ve and reset to '/ ' zero f
     *or the past 20 steps.  The particle could be assigned'/ ' to the w
     *rong region number.  The particle is being discarded'/ ' but thisi
     *s a bug.  Please contact the NRC.'/)
                          IDISC = 1
                          I_tne = 0
                          RETURN
                      END IF
                  ELSE
                      I_tne = 0
                  END IF
              END IF
          END IF
          IF ((DIST .LE. USTEP )) THEN
              USTEP = DIST
              IF ((IRNEW_MAINJAWS.EQ.1)) THEN
                  CALL WHERE_AM_I(ICM_MAINJAWS,1)
              ELSE
                  IRNEW = IRNEW_MAINJAWS
              END IF
          END IF
      ELSE
          WRITE(6,17880)IR(NP)-IRSTART_MAINJAWS+1, IR(NP), ICM_MAINJAWS,
     *     IR_start_CM(ICM_MAINJAWS)
17880     FORMAT(//' ************'//' HOWFAR_JAWS error'/ '    Region, l
     *ocal, absolute =',2I5/ '    CM number=',I5,' start region =',I5/ '
     * *********'//)
          STOP
      END IF
      RETURN
      END
      SUBROUTINE WHERE_AM_I_MAINJAWS(IDIR)
      IMPLICIT NONE
      COMMON/CM_MAINJAWS/ IXY_CHOICE_MAINJAWS, APO_MAINJAWS, ANE_MAINJAW
     *S, XFP_MAINJAWS,XFPT_MAINJAWS, XFN_MAINJAWS,XFNT_MAINJAWS, XBP_MAI
     *NJAWS,XBPT_MAINJAWS, XBN_MAINJAWS,XBNT_MAINJAWS, BPO_MAINJAWS,BPOT
     *_MAINJAWS, BNE_MAINJAWS,BNET_MAINJAWS, ZMIN_MAINJAWS, ZMAX_MAINJAW
     *S, ZBACK_MAINJAWS,ZFRONT_MAINJAWS, COSP_MAINJAWS,COSN_MAINJAWS,XY_
     *MAINJAWS,UV_MAINJAWS, ICM_MAINJAWS, IRSTART_MAINJAWS, IREND_MAINJA
     *WS, N_MAINJAWS, ISCM_MAX_MAINJAWS, IR_MAINJAWS, ISCM_MAINJAWS, TIT
     *LE_MAINJAWS
      INTEGER ICM_MAINJAWS,IRSTART_MAINJAWS,IREND_MAINJAWS, N_MAINJAWS,I
     *SCM_MAX_MAINJAWS, IR_MAINJAWS, IXY_CHOICE_MAINJAWS(12), ISCM_MAINJ
     *AWS
      real*8 ZMIN_MAINJAWS(12), ZMAX_MAINJAWS(12), ZBACK_MAINJAWS, ZFRON
     *T_MAINJAWS, XFP_MAINJAWS(12), XFN_MAINJAWS(12), XBP_MAINJAWS(12),
     *XBN_MAINJAWS(12), XFPT_MAINJAWS(12,2), XFNT_MAINJAWS(12,2),XBPT_MA
     *INJAWS(12,2), XBNT_MAINJAWS(12,2),APO_MAINJAWS(12), ANE_MAINJAWS(1
     *2), BPO_MAINJAWS(12), BNE_MAINJAWS(12), BPOT_MAINJAWS(12,2), BNET_
     *MAINJAWS(12,2),COSP_MAINJAWS(12), COSN_MAINJAWS(12), XY_MAINJAWS,U
     *V_MAINJAWS
      CHARACTER*1 TITLE_MAINJAWS(60)
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      INTEGER IDIR
      real*8 XBDY_MAINJAWS
      XBDY_MAINJAWS = X(NP) + U(NP)*USTEP
      IF ((IXY_CHOICE_MAINJAWS(ISCM_MAX_MAINJAWS) .EQ. 1)) THEN
          XBDY_MAINJAWS = Y(NP) + V(NP)*USTEP
      END IF
      IF ((IDIR.EQ.1)) THEN
          IRNEW = IRSTART_MAINJAWS
      ELSE
          IRNEW = IRSTART_MAINJAWS + 3*ISCM_MAX_MAINJAWS - 3
          IF ((XBDY_MAINJAWS .GT. XBP_MAINJAWS(ISCM_MAX_MAINJAWS))) THEN
              IRNEW = IRSTART_MAINJAWS + 3*ISCM_MAX_MAINJAWS-2
          ELSE IF((XBDY_MAINJAWS .LT. XBN_MAINJAWS(ISCM_MAX_MAINJAWS)))
     *    THEN
              IRNEW = IRSTART_MAINJAWS + 3*ISCM_MAX_MAINJAWS - 1
          END IF
      END IF
      RETURN
      END
      SUBROUTINE INPUT_MAINJAWS
      IMPLICIT NONE
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/CM_MAINJAWS/ IXY_CHOICE_MAINJAWS, APO_MAINJAWS, ANE_MAINJAW
     *S, XFP_MAINJAWS,XFPT_MAINJAWS, XFN_MAINJAWS,XFNT_MAINJAWS, XBP_MAI
     *NJAWS,XBPT_MAINJAWS, XBN_MAINJAWS,XBNT_MAINJAWS, BPO_MAINJAWS,BPOT
     *_MAINJAWS, BNE_MAINJAWS,BNET_MAINJAWS, ZMIN_MAINJAWS, ZMAX_MAINJAW
     *S, ZBACK_MAINJAWS,ZFRONT_MAINJAWS, COSP_MAINJAWS,COSN_MAINJAWS,XY_
     *MAINJAWS,UV_MAINJAWS, ICM_MAINJAWS, IRSTART_MAINJAWS, IREND_MAINJA
     *WS, N_MAINJAWS, ISCM_MAX_MAINJAWS, IR_MAINJAWS, ISCM_MAINJAWS, TIT
     *LE_MAINJAWS
      INTEGER ICM_MAINJAWS,IRSTART_MAINJAWS,IREND_MAINJAWS, N_MAINJAWS,I
     *SCM_MAX_MAINJAWS, IR_MAINJAWS, IXY_CHOICE_MAINJAWS(12), ISCM_MAINJ
     *AWS
      real*8 ZMIN_MAINJAWS(12), ZMAX_MAINJAWS(12), ZBACK_MAINJAWS, ZFRON
     *T_MAINJAWS, XFP_MAINJAWS(12), XFN_MAINJAWS(12), XBP_MAINJAWS(12),
     *XBN_MAINJAWS(12), XFPT_MAINJAWS(12,2), XFNT_MAINJAWS(12,2),XBPT_MA
     *INJAWS(12,2), XBNT_MAINJAWS(12,2),APO_MAINJAWS(12), ANE_MAINJAWS(1
     *2), BPO_MAINJAWS(12), BNE_MAINJAWS(12), BPOT_MAINJAWS(12,2), BNET_
     *MAINJAWS(12,2),COSP_MAINJAWS(12), COSN_MAINJAWS(12), XY_MAINJAWS,U
     *V_MAINJAWS
      CHARACTER*1 TITLE_MAINJAWS(60)
      COMMON/GEOM/ NREG
      INTEGER NREG
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      INTEGER I,J,  IRA,  MED_FLAG,  MED_INDEX
      real*8 AIRGAPMIN_MAINJAWS,  BDYTOL
      CHARACTER*1 XY_CHOICE(1)
      ICM_MAINJAWS = ICM
      IRSTART_MAINJAWS = IR_start_CM(ICM_MAINJAWS)
      IERR_GEOM(ICM_MAINJAWS) = 0
      AIRGAPMIN_MAINJAWS = 0.01
      WRITE(6,17890)RMAX_CM(ICM)
17890 FORMAT(' This component is sets of paired bars or jaws'/ '      Ou
     *ter boundary is a square with |x| & |y| <',F10.2,' cm')
      WRITE(6,17900)
17900 FORMAT(' TITLE: ',$)
      READ(i_input,17910,END=17920,ERR=17930)TITLE_MAINJAWS
17910 FORMAT(60A1)
      WRITE(6,17940)TITLE_MAINJAWS
17940 FORMAT(' ',60A1)
      IF ((ICM_MAINJAWS .EQ. 1)) THEN
          WRITE(6,17950)
17950     FORMAT(' This is the first component and starts at the referen
     *ce plane')
      ELSE
          WRITE(6,17960)Z_min_CM(ICM_MAINJAWS)
17960     FORMAT(' Previous CM ends at:',F12.5,' cm')
      END IF
      ISCM_MAX_MAINJAWS = 12
      WRITE(6,17970)ISCM_MAX_MAINJAWS
17970 FORMAT(' NUMBER OF paired bars/jaws (minimum 1, maximum',I3,'): ',
     *$)
      READ(i_input,17980,END=17920,ERR=17930)ISCM_MAX_MAINJAWS
17980 FORMAT (I5)
      WRITE(6,17990)ISCM_MAX_MAINJAWS
17990 FORMAT(I5)
      IF ((ISCM_MAX_MAINJAWS .GT. 12)) THEN
          WRITE(6,18000)ICM_MAINJAWS, 12
18000     FORMAT(//'***ERROR IN CM ',I4,' (JAWS):'/ '# of paired bars >m
     *ax. allowed.'/ '# of pared bars reduced to ',I4,' for now.'//)
          ISCM_MAX_MAINJAWS=12
          IERR_GEOM(ICM_MAINJAWS)=IERR_GEOM(ICM_MAINJAWS)+1
      ELSE IF((ISCM_MAX_MAINJAWS.LT.1)) THEN
          ISCM_MAX_MAINJAWS=1
          WRITE(6,18010)ICM_MAINJAWS
18010     FORMAT(//'***ERROR IN CM ',I4,' (JAWS):'/ '# of paired bars <1
     *'/ '# of pared bars reset to 1 for now.'//)
          IERR_GEOM(ICM_MAINJAWS)=IERR_GEOM(ICM_MAINJAWS)+1
      END IF
      N_MAINJAWS = 3*ISCM_MAX_MAINJAWS
      DO 18021 I=1,ISCM_MAX_MAINJAWS
          WRITE(6,18030)I
18030     FORMAT(/' Paired bar/jaw set no:',I3,/ ' Are bars/jaws perpend
     *icular to x or y axis'/ ' i.e. is separation measured on x or y ax
     *is'/ ' (Input "y" or "Y" for Y jaws, any other character for X jaw
     *s): ',$)
          READ(i_input,18040,END=17920,ERR=17930)XY_CHOICE
18040     FORMAT(1A1)
          WRITE(6,18050)XY_CHOICE
18050     FORMAT(' ',1A1)
          IXY_CHOICE_MAINJAWS(I) = 0
          IF ((XY_CHOICE(1) .EQ.'Y' .OR. XY_CHOICE(1) .EQ.'y')) THEN
              IXY_CHOICE_MAINJAWS(I) = 1
          END IF
          IF ((IXY_CHOICE_MAINJAWS(I) .EQ. 0)) THEN
              WRITE(6,18060)
18060         FORMAT(' Input ZMIN, ZMAX & jaw coordinates: XFP, XBP,', '
     * XFN, XBN(cm) all on one line')
          ELSE
              WRITE(6,18070)
18070         FORMAT(' Input ZMIN, ZMAX & jaw coordinates: YFP, YBP,', '
     * YFN, YBN(cm) all on one line')
          END IF
          IF ((I.EQ.1)) THEN
              WRITE(6,18080)AIRGAPMIN_MAINJAWS
18080         FORMAT(' (leave at least min. airgap = ',F8.5,' before 1st
     * jaws)', /' : ',$)
          ELSE
              WRITE(6,18090)AIRGAPMIN_MAINJAWS
18090         FORMAT(' (leave at least min. airgap = ',F8.5,' between ja
     *ws)', /' : ',$)
          END IF
          READ(i_input,18100,END=17920,ERR=17930)ZMIN_MAINJAWS(I), ZMAX_
     *    MAINJAWS(I), XFP_MAINJAWS(I), XBP_MAINJAWS(I), XFN_MAINJAWS(I)
     *    , XBN_MAINJAWS(I)
18100     FORMAT(6F15.0)
          WRITE(6,18110)ZMIN_MAINJAWS(I),ZMAX_MAINJAWS(I), XFP_MAINJAWS(
     *    I), XBP_MAINJAWS(I), XFN_MAINJAWS(I),XBN_MAINJAWS(I)
18110     FORMAT(6F11.5)
          IF ((I.EQ.1)) THEN
              IF ((ICM_MAINJAWS.EQ.1 .AND. Z_min_CM(ICM_MAINJAWS).GT.ZMI
     *        N_MAINJAWS(1)-AIRGAPMIN_MAINJAWS)) THEN
                  WRITE(6,18120)ICM_MAINJAWS, AIRGAPMIN_MAINJAWS, ZMIN_M
     *            AINJAWS(1)-AIRGAPMIN_MAINJAWS,Z_min_CM(1)
18120             FORMAT(//' ***WARNING IN CM ',I4,' (JAWS):'/ ' Less th
     *an min. airgap (',F8.5,' cm) between top', ' of CM and 1st jaws.'/
     *' Z_min_CM(1) reset to ',F8.5,' cm from ',F8.5,' cm'//)
                  WRITE(IOUTLIST,100)ICM_MAINJAWS, AIRGAPMIN_MAINJAWS, Z
     *            MIN_MAINJAWS(1)-AIRGAPMIN_MAINJAWS,Z_min_CM(1)
100               FORMAT(//' ***WARNING IN CM ',I4,' (JAWS):'/ ' Less th
     *an min. airgap (',F8.5,' cm) between top', ' of CM and 1st jaws.'/
     *' Z_min_CM(1) reset to ',F8.5,' cm from ',F8.5,' cm'//)
                  Z_min_CM(1)=ZMIN_MAINJAWS(1)-AIRGAPMIN_MAINJAWS
              ELSE IF((Z_min_CM(ICM_MAINJAWS).GT.ZMIN_MAINJAWS(1))) THEN
                  WRITE(6,18130)ICM_MAINJAWS
18130             FORMAT(//'***ERROR IN CM ',I4,' (JAWS):'/ 'Overlaps wi
     *th previous CM'//)
                  IERR_GEOM(ICM_MAINJAWS)=IERR_GEOM(ICM_MAINJAWS)+1
              ELSE IF((Z_min_CM(ICM_MAINJAWS).GT.ZMIN_MAINJAWS(1)-AIRGAP
     *        MIN_MAINJAWS)) THEN
                  WRITE(6,18140)ICM_MAINJAWS, AIRGAPMIN_MAINJAWS, Z_min_
     *            CM(ICM_MAINJAWS)+AIRGAPMIN_MAINJAWS, ZMIN_MAINJAWS(1)
18140             FORMAT(//' ***WARNING IN CM ',I4,' (JAWS):'/ ' Less th
     *an min. airgap (',F8.5,' cm) between', ' top of CM and first jaws.
     *'/ ' ZMIN(1) reset to ',F8.5,' cm from ',F8.5,' cm'//)
                  WRITE(IOUTLIST,101)ICM_MAINJAWS, AIRGAPMIN_MAINJAWS, Z
     *            _min_CM(ICM_MAINJAWS)+AIRGAPMIN_MAINJAWS,ZMIN_MAINJAWS
     *            (1)
101               FORMAT(//' ***WARNING IN CM ',I4,' (JAWS):'/ ' Less th
     *an min. airgap (',F8.5,' cm) between', ' top of CM and first jaws.
     *'/ ' ZMIN(1) reset to ',F8.5,' cm from ',F8.5,' cm'//)
                  ZMIN_MAINJAWS(1)=Z_min_CM(ICM_MAINJAWS)+AIRGAPMIN_MAIN
     *            JAWS
              END IF
          ELSE
              IF ((ZMAX_MAINJAWS(I-1).GT.ZMIN_MAINJAWS(I))) THEN
                  WRITE(6,18150)ICM_MAINJAWS, I-1, I
18150             FORMAT(//'***ERROR IN CM ',I4,' (JAWS):'/ 'Paired bars
     * ',I4,' overlap with paired bars ',I4//)
                  IERR_GEOM(ICM_MAINJAWS)=IERR_GEOM(ICM_MAINJAWS)+1
              ELSE IF((ZMAX_MAINJAWS(I-1).GT.ZMIN_MAINJAWS(I)-AIRGAPMIN_
     *        MAINJAWS)) THEN
                  WRITE(6,18160)ICM_MAINJAWS, AIRGAPMIN_MAINJAWS, I-1, I
     *            , I, ZMAX_MAINJAWS(I-1)+AIRGAPMIN_MAINJAWS,ZMIN_MAINJA
     *            WS(I)
18160             FORMAT(//' ***WARNING IN CM ',I4,' (JAWS):'/ ' Less th
     *an min. airgap (',F8.5,' cm) between', ' jaws ',I4,' and jaws',I4/
     *' ZMIN(',I4,') reset to ',F8.5,' cm from ',F8.5,' cm'//)
                  WRITE(IOUTLIST,102)ICM_MAINJAWS, AIRGAPMIN_MAINJAWS, I
     *            -1, I, I, ZMAX_MAINJAWS(I-1)+AIRGAPMIN_MAINJAWS,ZMIN_M
     *            AINJAWS(I)
102               FORMAT(//' ***WARNING IN CM ',I4,' (JAWS):'/ ' Less th
     *an min. airgap (',F8.5,' cm) between', ' jaws ',I4,' and jaws',I4/
     *' ZMIN(',I4,') reset to ',F8.5,' cm from ',F8.5,' cm'//)
                  ZMIN_MAINJAWS(I)=ZMAX_MAINJAWS(I-1)+AIRGAPMIN_MAINJAWS
              END IF
          END IF
          IF ((ZMIN_MAINJAWS(I) .GE. ZMAX_MAINJAWS(I))) THEN
              WRITE(6,18170)ICM_MAINJAWS, I, I
18170         FORMAT(//'***ERROR IN CM ',I4,' (JAWS):'/ 'ZMIN(',I4,') >=
     * ZMAX(',I4,')'//)
              IERR_GEOM(ICM_MAINJAWS)=IERR_GEOM(ICM_MAINJAWS)+1
          END IF
          IF ((ABS(XFP_MAINJAWS(I)).GT.RMAX_CM(ICM_MAINJAWS))) THEN
              WRITE(6,18180)ICM_MAINJAWS, I
18180         FORMAT(//'***ERROR IN CM ',I4,' (JAWS):'/ 'XFP(',I4,') bey
     *ond RMAX_CM'//)
              IERR_GEOM(ICM_MAINJAWS)=IERR_GEOM(ICM_MAINJAWS)+1
          END IF
          IF ((ABS(XBP_MAINJAWS(I)).GT.RMAX_CM(ICM_MAINJAWS))) THEN
              WRITE(6,18190)ICM_MAINJAWS, I
18190         FORMAT(//'***ERROR IN CM ',I4,' (JAWS):'/ 'XBP(',I4,') bey
     *ond RMAX_CM'//)
              IERR_GEOM(ICM_MAINJAWS)=IERR_GEOM(ICM_MAINJAWS)+1
          END IF
          IF ((ABS(XFN_MAINJAWS(I)).GT.RMAX_CM(ICM_MAINJAWS))) THEN
              WRITE(6,18200)ICM_MAINJAWS, I
18200         FORMAT(//'***ERROR IN CM ',I4,' (JAWS):'/ 'XFN(',I4,') bey
     *ond RMAX_CM'//)
              IERR_GEOM(ICM_MAINJAWS)=IERR_GEOM(ICM_MAINJAWS)+1
          END IF
          IF ((ABS(XBN_MAINJAWS(I)).GT.RMAX_CM(ICM_MAINJAWS))) THEN
              WRITE(6,18210)ICM_MAINJAWS, I
18210         FORMAT(//'***ERROR IN CM ',I4,' (JAWS):'/ 'XBN(',I4,') bey
     *ond RMAX_CM'//)
              IERR_GEOM(ICM_MAINJAWS)=IERR_GEOM(ICM_MAINJAWS)+1
          END IF
          IF ((XFP_MAINJAWS(I) .LT. XFN_MAINJAWS(I))) THEN
              WRITE(6,18220)ICM_MAINJAWS, I, I
18220         FORMAT(//'***ERROR IN CM ',I4,' (JAWS):'/ 'XFP(',I4,') < X
     *FN(',I4,')'//)
              IERR_GEOM(ICM_MAINJAWS)=IERR_GEOM(ICM_MAINJAWS)+1
          ELSE IF((XFP_MAINJAWS(I) - XFN_MAINJAWS(I) .LT. 1.E-5*3 )) THE
     *    N
              XFP_MAINJAWS(I) = XFP_MAINJAWS(I) + 1.E-5*2
              XFN_MAINJAWS(I) = XFN_MAINJAWS(I) - 1.E-5*2
          END IF
          IF ((XBP_MAINJAWS(I) .LT. XBN_MAINJAWS(I))) THEN
              WRITE(6,18230)ICM_MAINJAWS, I, I
18230         FORMAT(//'***ERROR IN CM ',I4,' (JAWS):'/ 'XBP(',I4,') < X
     *BN(',I4,')'//)
              IERR_GEOM(ICM_MAINJAWS)=IERR_GEOM(ICM_MAINJAWS)+1
          ELSE IF((XBP_MAINJAWS(I) - XBN_MAINJAWS(I) .LT. 1.E-5*3 )) THE
     *    N
              XBP_MAINJAWS(I) = XBP_MAINJAWS(I) + 1.E-5*2
              XBN_MAINJAWS(I) = XBN_MAINJAWS(I) - 1.E-5*2
          END IF
18021 CONTINUE
18022 CONTINUE
      IRA = IRSTART_MAINJAWS
      WRITE(6,18240)
18240 FORMAT(/'  Now input data re ECUT and PCUT for each region'/ /' Fo
     *r central region which is assumed to be air' /' ECUT,       PCUT, 
     * DOSE ZONE OF AIR,   REGION TO BIT '/' : ',$)
      READ(i_input,18250,END=17920,ERR=17930)ECUT(IRA),PCUT(IRA),DOSE_ZO
     *NE(IRA),IREGION_TO_BIT(IRA)
18250 FORMAT (2F15.0,2I5)
      WRITE(6,18260)ECUT(IRA),PCUT(IRA),DOSE_ZONE(IRA),IREGION_TO_BIT(IR
     *A)
18260 FORMAT(2F11.5,2I5)
      IF((ECUT(IRA) .LT. ECUTIN))ECUT(IRA)=ECUTIN
      IF((PCUT(IRA) .LT. PCUTIN))PCUT(IRA)=PCUTIN
      MED(IRA) = AIR_INDEX
      DO 18271 IR_MAINJAWS=2,N_MAINJAWS-1, 3
          IRA = IRSTART_MAINJAWS + IR_MAINJAWS - 1
          ECUT(IRA-1) = ECUT(IRSTART_MAINJAWS)
          PCUT(IRA-1) = PCUT(IRSTART_MAINJAWS)
          DOSE_ZONE(IRA-1) = DOSE_ZONE(IRSTART_MAINJAWS)
          MED(IRA-1) = AIR_INDEX
          WRITE(6,18280)IR_MAINJAWS/3 + 1
18280     FORMAT(/' Paired bars/jaws no:',I3, /' ECUT,        PCUT,  DOS
     *E ZONE,    IREGION_TO_BIT '/' :',$)
          READ(i_input,18290,END=17920,ERR=17930)ECUT(IRA), PCUT(IRA), D
     *    OSE_ZONE(IRA), IREGION_TO_BIT(IRA)
18290     FORMAT (2F15.0,2I5)
          WRITE(6,18300)ECUT(IRA),PCUT(IRA), DOSE_ZONE(IRA), IREGION_TO_
     *    BIT(IRA)
18300     FORMAT(2F11.5,2I5)
          IREGION_TO_BIT(IRA -1) = IREGION_TO_BIT(IRSTART_MAINJAWS)
          IF((ECUT(IRA) .LT. ECUTIN))ECUT(IRA)=ECUTIN
          IF((PCUT(IRA) .LT. PCUTIN))PCUT(IRA)=PCUTIN
          WRITE(6,18310)
18310     FORMAT(' Medium in this region',$)
          WRITE(6,18320)
18320     FORMAT(' MEDIUM (left justify): ',$)
          READ(i_input,'(24A1)',END=17920,ERR=17930) (MED_IN(J),J=1,24)
          WRITE(6,18330)(MED_IN(J),J=1,24)
18330     FORMAT(' ',24A1)
          IF ((MED_IN(1) .EQ. 'V' .AND. MED_IN(2).EQ.'A' .AND. MED_IN(3)
     *    .EQ.'C' .AND. MED_IN(4) .EQ. 'U' .AND. MED_IN(5).EQ.'U' .AND.
     *    MED_IN(6).EQ.'M')) THEN
              MED_INDEX=0
          ELSE
              IF ((NMED .NE. 0)) THEN
                  DO 18341 I=1,NMED
                      MED_FLAG = 0
                      DO 18351 J=1,24
                          IF ((MEDIA(J,I) .NE. MED_IN(J))) THEN
                              MED_FLAG = 1
                              GO TO18352
                          END IF
18351                 CONTINUE
18352                 CONTINUE
                      IF ((MED_FLAG .EQ. 0)) THEN
                          MED_INDEX = I
                          GO TO18342
                      END IF
                      IF ((I .EQ. NMED)) THEN
                          NMED = NMED+1
                          MED_INDEX = NMED
                          DO 18361 J=1,24
                              MEDIA(J,NMED) = MED_IN(J)
18361                     CONTINUE
18362                     CONTINUE
                          GO TO18342
                      END IF
18341             CONTINUE
18342             CONTINUE
              ELSE
                  NMED = 1
                  MED_INDEX = NMED
                  DO 18371 J=1,24
                      MEDIA(J,NMED) = MED_IN(J)
18371             CONTINUE
18372             CONTINUE
              END IF
          END IF
          MED(IRA) = MED_INDEX
          ECUT(IRA+1) = ECUT(IRA)
          PCUT(IRA+1) = PCUT(IRA)
          DOSE_ZONE(IRA+1) = DOSE_ZONE(IRA)
          IREGION_TO_BIT(IRA +1) = IREGION_TO_BIT(IRA)
          MED(IRA+1) = MED(IRA)
18271 CONTINUE
18272 CONTINUE
      IREND_MAINJAWS = IRSTART_MAINJAWS + N_MAINJAWS-1
      NREG = NREG+N_MAINJAWS
      IF ((NREG .LE. 3000)) THEN
          IR_start_CM(ICM_MAINJAWS+1) = IREND_MAINJAWS+1
      ELSE
          WRITE(6,18380)ICM_MAINJAWS,NREG,3000
18380     FORMAT(//'***ERROR IN CM ',I4,' (JAWS):'/ I4,' regions request
     *ed, only ',I4,' available'//)
          IERR_GEOM(ICM_MAINJAWS)=IERR_GEOM(ICM_MAINJAWS)+1
      END IF
      DO 18391 I=1,ISCM_MAX_MAINJAWS
          APO_MAINJAWS(I) = (XBP_MAINJAWS(I)-XFP_MAINJAWS(I))/ (ZMAX_MAI
     *    NJAWS(I) - ZMIN_MAINJAWS(I))
          ANE_MAINJAWS(I) = (XBN_MAINJAWS(I)-XFN_MAINJAWS(I))/ (ZMAX_MAI
     *    NJAWS(I) - ZMIN_MAINJAWS(I))
          BPO_MAINJAWS(I) = XFP_MAINJAWS(I) - ZMIN_MAINJAWS(I)*APO_MAINJ
     *    AWS(I)
          BNE_MAINJAWS(I) = XFN_MAINJAWS(I) - ZMIN_MAINJAWS(I)*ANE_MAINJ
     *    AWS(I)
          COSP_MAINJAWS(I)= (ZMAX_MAINJAWS(I) - ZMIN_MAINJAWS(I))/ SQRT(
     *     (ZMAX_MAINJAWS(I) - ZMIN_MAINJAWS(I))**2 +( XBP_MAINJAWS(I) -
     *     XFP_MAINJAWS(I) )**2 )
          COSN_MAINJAWS(I)= (ZMAX_MAINJAWS(I) - ZMIN_MAINJAWS(I))/ SQRT(
     *     (ZMAX_MAINJAWS(I) - ZMIN_MAINJAWS(I))**2 + (XBN_MAINJAWS(I) -
     *     XFN_MAINJAWS(I))**2 )
18391 CONTINUE
18392 CONTINUE
      BDYTOL = 1.E-5
      DO 18401 I=1,ISCM_MAX_MAINJAWS
          XFPT_MAINJAWS(I,1) = XFP_MAINJAWS(I) + BDYTOL
          XFPT_MAINJAWS(I,2) = XFP_MAINJAWS(I) - BDYTOL
          XBPT_MAINJAWS(I,1) = XBP_MAINJAWS(I) + BDYTOL
          XBPT_MAINJAWS(I,2) = XBP_MAINJAWS(I) - BDYTOL
          XFNT_MAINJAWS(I,1) = XFN_MAINJAWS(I) - BDYTOL
          XFNT_MAINJAWS(I,2) = XFN_MAINJAWS(I) + BDYTOL
          XBNT_MAINJAWS(I,1) = XBN_MAINJAWS(I) - BDYTOL
          XBNT_MAINJAWS(I,2) = XBN_MAINJAWS(I) + BDYTOL
          BPOT_MAINJAWS(I,1) = BPO_MAINJAWS(I) + BDYTOL
          BPOT_MAINJAWS(I,2) = BPO_MAINJAWS(I) - BDYTOL
          BNET_MAINJAWS(I,1) = BNE_MAINJAWS(I) - BDYTOL
          BNET_MAINJAWS(I,2) = BNE_MAINJAWS(I) + BDYTOL
18401 CONTINUE
18402 CONTINUE
      Z_min_CM(ICM_MAINJAWS+1) = ZMAX_MAINJAWS(ISCM_MAX_MAINJAWS)
      ZFRONT_MAINJAWS = Z_min_CM(ICM_MAINJAWS)
      ZBACK_MAINJAWS = Z_min_CM(ICM_MAINJAWS+1)
      RMAX_CM_FLAG(ICM_MAINJAWS) = 2
      IRA = IRSTART_MAINJAWS-1
      DO 18411 IR_MAINJAWS=1,N_MAINJAWS
          IRA = IRA+1
          NDOSE_ZONE = MAX(DOSE_ZONE(IRA),NDOSE_ZONE)
          MAX_BIT = MAX(IREGION_TO_BIT(IRA),MAX_BIT)
          ESAVE(IRA)=ESAVE_GLOBAL
          ECUTRR(IRA)=ECUT(IRA)
18411 CONTINUE
18412 CONTINUE
      E_min_out(ICM_MAINJAWS)=ECUT(IRA)
      RETURN
17920 CONTINUE
      WRITE(6,18420)ICM
18420 FORMAT(//' *** ERROR *** unexpected end of file reading input forC
     *M',I3)
      STOP
17930 CONTINUE
      WRITE(6,18430)ICM
18430 FORMAT(//' *** ERROR *** format error on input for CM',I3)
      STOP
      END
      SUBROUTINE ISUMRY_MAINJAWS
      IMPLICIT NONE
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/CM_MAINJAWS/ IXY_CHOICE_MAINJAWS, APO_MAINJAWS, ANE_MAINJAW
     *S, XFP_MAINJAWS,XFPT_MAINJAWS, XFN_MAINJAWS,XFNT_MAINJAWS, XBP_MAI
     *NJAWS,XBPT_MAINJAWS, XBN_MAINJAWS,XBNT_MAINJAWS, BPO_MAINJAWS,BPOT
     *_MAINJAWS, BNE_MAINJAWS,BNET_MAINJAWS, ZMIN_MAINJAWS, ZMAX_MAINJAW
     *S, ZBACK_MAINJAWS,ZFRONT_MAINJAWS, COSP_MAINJAWS,COSN_MAINJAWS,XY_
     *MAINJAWS,UV_MAINJAWS, ICM_MAINJAWS, IRSTART_MAINJAWS, IREND_MAINJA
     *WS, N_MAINJAWS, ISCM_MAX_MAINJAWS, IR_MAINJAWS, ISCM_MAINJAWS, TIT
     *LE_MAINJAWS
      INTEGER ICM_MAINJAWS,IRSTART_MAINJAWS,IREND_MAINJAWS, N_MAINJAWS,I
     *SCM_MAX_MAINJAWS, IR_MAINJAWS, IXY_CHOICE_MAINJAWS(12), ISCM_MAINJ
     *AWS
      real*8 ZMIN_MAINJAWS(12), ZMAX_MAINJAWS(12), ZBACK_MAINJAWS, ZFRON
     *T_MAINJAWS, XFP_MAINJAWS(12), XFN_MAINJAWS(12), XBP_MAINJAWS(12),
     *XBN_MAINJAWS(12), XFPT_MAINJAWS(12,2), XFNT_MAINJAWS(12,2),XBPT_MA
     *INJAWS(12,2), XBNT_MAINJAWS(12,2),APO_MAINJAWS(12), ANE_MAINJAWS(1
     *2), BPO_MAINJAWS(12), BNE_MAINJAWS(12), BPOT_MAINJAWS(12,2), BNET_
     *MAINJAWS(12,2),COSP_MAINJAWS(12), COSN_MAINJAWS(12), XY_MAINJAWS,U
     *V_MAINJAWS
      CHARACTER*1 TITLE_MAINJAWS(60)
      COMMON/GEOM/ NREG
      INTEGER NREG
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      INTEGER ICOLOUR,  IRA,  I,J
      real*8 XYMAX,  VOLAIR_MAINJAWS,  VOL_MAINJAWS(12)
      CHARACTER*1 XY_CHOICE(1)
      IRA = IRSTART_MAINJAWS-2
      VOLAIR_MAINJAWS=(ZBACK_MAINJAWS-ZFRONT_MAINJAWS)* 4.*RMAX_CM2(ICM_
     *MAINJAWS)
      DO 18441 I=1,ISCM_MAX_MAINJAWS
          IRA=IRA+3
          VOL_MAINJAWS(I)=(ZMAX_MAINJAWS(I)-ZMIN_MAINJAWS(I))* (4.*RMAX_
     *    CM2(ICM_MAINJAWS)- RMAX_CM(ICM_MAINJAWS)* ABS(XFP_MAINJAWS(I)+
     *     XBP_MAINJAWS(I)-XFN_MAINJAWS(I)- XBN_MAINJAWS(I)))
          VOLAIR_MAINJAWS=VOLAIR_MAINJAWS-VOL_MAINJAWS(I)
          IF ((DOSE_ZONE(IRA).NE.0)) THEN
              ID=DOSE_ZONE(IRA)
              AMASS(ID)=AMASS(ID)+RHOR(IRA)*VOL_MAINJAWS(I)
          END IF
18441 CONTINUE
18442 CONTINUE
      IRA = IRSTART_MAINJAWS
      IF ((DOSE_ZONE(IRA).NE.0)) THEN
          ID=DOSE_ZONE(IRA)
          AMASS(ID)=AMASS(ID)+RHOR(IRA)*VOLAIR_MAINJAWS
      END IF
      WRITE(IOUTLIST,110) ICM_MAINJAWS,TITLE_MAINJAWS
      WRITE(IOUTLIST,120) Z_min_CM(ICM_MAINJAWS),RMAX_CM(ICM_MAINJAWS)
      WRITE(IOUTLIST,122)
      DO 18451 I=1,ISCM_MAX_MAINJAWS
          IF ((I.EQ.1)) THEN
              WRITE(IOUTLIST,124)'airgap',Z_min_CM(ICM_MAINJAWS),ZMIN_MA
     *        INJAWS(1)- Z_min_CM(ICM_MAINJAWS),'NA','NA','NA','NA', 'NA
     *'
          ELSE
              WRITE(IOUTLIST,124)'airgap',ZMAX_MAINJAWS(I-1),ZMIN_MAINJA
     *        WS(I)- ZMAX_MAINJAWS(I-1),'NA','NA','NA','NA', 'NA'
          END IF
          IF ((IXY_CHOICE_MAINJAWS(I) .EQ. 0)) THEN
              XY_CHOICE(1) ='x'
          ELSE
              XY_CHOICE(1) ='y'
          END IF
          WRITE(IOUTLIST,123)I,ZMIN_MAINJAWS(I),ZMAX_MAINJAWS(I)- ZMIN_M
     *    AINJAWS(I),XY_CHOICE(1), XFP_MAINJAWS(I),XBP_MAINJAWS(I), XFN_
     *    MAINJAWS(I),XBN_MAINJAWS(I)
18451 CONTINUE
18452 CONTINUE
      WRITE(IOUTLIST,130)
      IRA = IRSTART_MAINJAWS-1
      DO 18461 I=1,ISCM_MAX_MAINJAWS
          IRA = IRSTART_MAINJAWS + 3*(I-1)
          IF ((MED(IRA).NE.0)) THEN
              WRITE(IOUTLIST,140) 3*(I-1)+1,I,'airgap', ECUT(IRA),PCUT(I
     *        RA), ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA), IREGION_TO_BIT
     *        (IRA),(MEDIA(J,MED(IRA)),J=1,9)
              WRITE(IOUTLIST,141)'above &'
              WRITE(IOUTLIST,141)'centre'
          ELSE
              WRITE(IOUTLIST,140) 3*(I-1)+1,I,'airgap', ECUT(IRA),PCUT(I
     *        RA), ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IRA), IREGION_TO_BIT
     *        (IRA),'V','a','c','u','u','m'
              WRITE(IOUTLIST,141)'above &'
              WRITE(IOUTLIST,141)'centre'
          END IF
          IF ((MED(IRA+1).NE.0)) THEN
              WRITE(IOUTLIST,140) 3*(I-1)+2,I,'+ve jaw', ECUT(IRA+1),PCU
     *        T(IRA+1), ECUTRR(IRA+1),ESAVE(IRA+1), DOSE_ZONE(IRA+1), IR
     *        EGION_TO_BIT(IRA+1),(MEDIA(J,MED(IRA+1)),J=1,9)
          ELSE
              WRITE(IOUTLIST,140) 3*(I-1)+2,I,'+ve jaw', ECUT(IRA+1),PCU
     *        T(IRA+1), ECUTRR(IRA+1),ESAVE(IRA+1), DOSE_ZONE(IRA+1), IR
     *        EGION_TO_BIT(IRA+1),'V','a','c','u','u','m'
          END IF
          IF ((MED(IRA+2).NE.0)) THEN
              WRITE(IOUTLIST,140) 3*(I-1)+3,I,'-ve jaw', ECUT(IRA+2),PCU
     *        T(IRA+2), ECUTRR(IRA+2),ESAVE(IRA+2), DOSE_ZONE(IRA+2), IR
     *        EGION_TO_BIT(IRA+2),(MEDIA(J,MED(IRA+2)),J=1,9)
          ELSE
              WRITE(IOUTLIST,140) 3*(I-1)+3,I,'-ve jaw', ECUT(IRA+2),PCU
     *        T(IRA+2), ECUTRR(IRA+2),ESAVE(IRA+2), DOSE_ZONE(IRA+2), IR
     *        EGION_TO_BIT(IRA+2),'V','a','c','u','u','m'
          END IF
          WRITE(IOUTLIST,141)' '
18461 CONTINUE
18462 CONTINUE
110   FORMAT(///1X,79('-')/ '  Component module',I3,' is JAWS' /1X,79('-
     *') //T5,'Title: ',68A1)
120   FORMAT(/T2,'MAINJAWS geometry parameters:', /T2,'-----------------
     *------------', /T2,'Distance of front of CM from reference plane =
     * ', F15.5,' cm', /T2,'Half-width of outer boundary of CM = ',F15.5
     *,' cm')
122   FORMAT(/T2, 'jaw #    Z front    thickness    x or y coordinates',
     * /T2, '          face                   jawsFP       BP       FN',
     * '      BN', /T2, '          (cm)        (cm)                     
     *           (cm)')
123   FORMAT(T2,I3,F12.3,F11.3,9X,A1,F12.3,F9.3,F9.3,F9.3)
124   FORMAT(T2,A6,F9.3,F11.3,8X,A2,A11,A9,A9,A8)
130   FORMAT(/T2,'MAINJAWS region parameters:', /T2,'-------------------
     *--------', /T2,'local jaw #   location  electron  photon', '  rang
     *e-rejection   dose  bit  medium' /T2,'region                   cut
     *off   cutoff', '   level     max    zone  set' /T2,'            (M
     *eV)    (MeV)', '   (MeV)    (MeV)')
140   FORMAT(T2,I3,I7,4X,A7,F10.3,F9.3,F8.3,F9.3,I6,I5,2X,9A1)
141   FORMAT(15X,A7)
      IF ((IWATCH .EQ. 4 .OR. IZLAST .EQ. 2)) THEN
          ICOLOUR = MOD(ICM,4)+1
          DO 18471 I=1,ISCM_MAX_MAINJAWS
              XYMAX = RMAX_CM(ICM_MAINJAWS)
              IF ((IXY_CHOICE_MAINJAWS(I) .EQ. 0)) THEN
                  WRITE(IOUTGEOM,200) ICOLOUR,'COLX',XYMAX,XFP_MAINJAWS(
     *            I),XBP_MAINJAWS(I),XYMAX,XYMAX, ZMIN_MAINJAWS(I),ZMAX_
     *            MAINJAWS(I)
                  WRITE(IOUTGEOM,200) ICOLOUR,'COLX',XFN_MAINJAWS(I),-XY
     *            MAX,-XYMAX,XBN_MAINJAWS(I), XYMAX, ZMIN_MAINJAWS(I),ZM
     *            AX_MAINJAWS(I)
              ELSE IF((IXY_CHOICE_MAINJAWS(I) .EQ. 1)) THEN
                  J = ICOLOUR-1
                  IF ((J .LT. 1)) THEN
                      J = 4
                  END IF
                  WRITE(IOUTGEOM,200) J,'COLY',XYMAX,XFP_MAINJAWS(I),XBP
     *            _MAINJAWS(I),XYMAX,XYMAX, ZMIN_MAINJAWS(I),ZMAX_MAINJA
     *            WS(I)
                  WRITE(IOUTGEOM,200) J,'COLY',XFN_MAINJAWS(I),-XYMAX,-X
     *            YMAX,XBN_MAINJAWS(I),XYMAX, ZMIN_MAINJAWS(I),ZMAX_MAIN
     *            JAWS(I)
              END IF
18471     CONTINUE
18472     CONTINUE
      END IF
200   FORMAT(' ',I1,A4,10(F7.2,','))
      RETURN
      END
      SUBROUTINE HOWNEAR_MAINJAWS(DIST)
      implicit none
      COMMON/CM_MAINJAWS/ IXY_CHOICE_MAINJAWS, APO_MAINJAWS, ANE_MAINJAW
     *S, XFP_MAINJAWS,XFPT_MAINJAWS, XFN_MAINJAWS,XFNT_MAINJAWS, XBP_MAI
     *NJAWS,XBPT_MAINJAWS, XBN_MAINJAWS,XBNT_MAINJAWS, BPO_MAINJAWS,BPOT
     *_MAINJAWS, BNE_MAINJAWS,BNET_MAINJAWS, ZMIN_MAINJAWS, ZMAX_MAINJAW
     *S, ZBACK_MAINJAWS,ZFRONT_MAINJAWS, COSP_MAINJAWS,COSN_MAINJAWS,XY_
     *MAINJAWS,UV_MAINJAWS, ICM_MAINJAWS, IRSTART_MAINJAWS, IREND_MAINJA
     *WS, N_MAINJAWS, ISCM_MAX_MAINJAWS, IR_MAINJAWS, ISCM_MAINJAWS, TIT
     *LE_MAINJAWS
      INTEGER ICM_MAINJAWS,IRSTART_MAINJAWS,IREND_MAINJAWS, N_MAINJAWS,I
     *SCM_MAX_MAINJAWS, IR_MAINJAWS, IXY_CHOICE_MAINJAWS(12), ISCM_MAINJ
     *AWS
      real*8 ZMIN_MAINJAWS(12), ZMAX_MAINJAWS(12), ZBACK_MAINJAWS, ZFRON
     *T_MAINJAWS, XFP_MAINJAWS(12), XFN_MAINJAWS(12), XBP_MAINJAWS(12),
     *XBN_MAINJAWS(12), XFPT_MAINJAWS(12,2), XFNT_MAINJAWS(12,2),XBPT_MA
     *INJAWS(12,2), XBNT_MAINJAWS(12,2),APO_MAINJAWS(12), ANE_MAINJAWS(1
     *2), BPO_MAINJAWS(12), BNE_MAINJAWS(12), BPOT_MAINJAWS(12,2), BNET_
     *MAINJAWS(12,2),COSP_MAINJAWS(12), COSN_MAINJAWS(12), XY_MAINJAWS,U
     *V_MAINJAWS
      CHARACTER*1 TITLE_MAINJAWS(60)
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      real*8 DIST
      IR_MAINJAWS = IR(NP)-IRSTART_MAINJAWS+1
      ISCM_MAINJAWS = (IR_MAINJAWS-1)/3 + 1
      XY_MAINJAWS = X(NP)
      UV_MAINJAWS = U(NP)
      IF ((IXY_CHOICE_MAINJAWS(ISCM_MAINJAWS) .EQ. 1)) THEN
          XY_MAINJAWS = Y(NP)
          UV_MAINJAWS = V(NP)
      END IF
      IF ((IR_MAINJAWS .EQ. 3*ISCM_MAINJAWS-1)) THEN
          DIST = COSP_MAINJAWS(ISCM_MAINJAWS) *(XY_MAINJAWS-APO_MAINJAWS
     *    (ISCM_MAINJAWS)*Z(NP) -BPOT_MAINJAWS(ISCM_MAINJAWS,2))
          DIST = MIN(DIST, ZMAX_MAINJAWS(ISCM_MAINJAWS)-Z(NP), Z(NP) - Z
     *    MIN_MAINJAWS(ISCM_MAINJAWS))
      ELSE IF((IR_MAINJAWS .EQ. 3*ISCM_MAINJAWS)) THEN
          DIST = COSN_MAINJAWS(ISCM_MAINJAWS) *(ANE_MAINJAWS(ISCM_MAINJA
     *    WS)*Z(NP) +BNET_MAINJAWS(ISCM_MAINJAWS,2)-XY_MAINJAWS)
          DIST = MIN(DIST, ZMAX_MAINJAWS(ISCM_MAINJAWS) - Z(NP), Z(NP) -
     *     ZMIN_MAINJAWS(ISCM_MAINJAWS) )
      ELSE
          DIST = 0.0
      END IF
      RETURN
      END
      SUBROUTINE HOWFAR_APPLICAT
      IMPLICIT NONE
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/CM_APPLICAT/ ICM_APPLICAT,IRSTART_APPLICAT,IREND_APPLICAT,N
     *_APPLICAT, IR_APPLICAT, TITLE_APPLICAT,XMIN_APPLICAT,YMIN_APPLICAT
     *,XMAX_APPLICAT, YMAX_APPLICAT, ZMIN_APPLICAT,ZMAX_APPLICAT,ZBACK_A
     *PPLICAT,ZFRONT_APPLICAT, XMINT_APPLICAT,YMINT_APPLICAT,XMAXT_APPLI
     *CAT,YMAXT_APPLICAT, ZMINT_APPLICAT,ZMAXT_APPLICAT, AIRGAPMIN_APPLI
     *CAT,ABSX_APPLICAT,ABSY_APPLICAT
      INTEGER ICM_APPLICAT,IRSTART_APPLICAT,IREND_APPLICAT,N_APPLICAT, I
     *R_APPLICAT
      real*8 XMIN_APPLICAT(10), YMIN_APPLICAT(10), XMAX_APPLICAT(10), YM
     *AX_APPLICAT(10), ZMIN_APPLICAT(10), ZMAX_APPLICAT(10), ZBACK_APPLI
     *CAT,ZFRONT_APPLICAT, XMINT_APPLICAT(10,2), YMINT_APPLICAT(10,2), X
     *MAXT_APPLICAT(10,2), YMAXT_APPLICAT(10,2), ZMINT_APPLICAT(10,2), Z
     *MAXT_APPLICAT(10,2), AIRGAPMIN_APPLICAT,ABSX_APPLICAT,ABSY_APPLICA
     *T
      CHARACTER*1 TITLE_APPLICAT(60)
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      INTEGER I,II,  IRL,  IRNEW_APPLICAT,  IB_APPLICAT,  IHIT
      real*8 DIST,  DFR,  XFR,  YFR,  DBA,  XBA,  YBA,  DTEM,  ZFRBA,  T
     *VAR
      IRL = IR(NP)
      CALL HOWNEAR_APPLICAT(DNEAR(NP))
      IF ((IR_APPLICAT.GT.0 .AND. IR_APPLICAT.LT.N_APPLICAT+1)) THEN
          IB_APPLICAT=1
          IF ((W(NP).NE.0.0)) THEN
              ZFRBA=ZMAXT_APPLICAT(IR_APPLICAT,IB_APPLICAT)
              IF ((W(NP).LT.0.0)) THEN
                  ZFRBA=ZMINT_APPLICAT(IR_APPLICAT,IB_APPLICAT)
              END IF
              DBA = (ZFRBA-Z(NP))/W(NP)
              XBA = ABS(X(NP)+U(NP)*DBA)
              YBA = ABS(Y(NP)+V(NP)*DBA)
              IHIT=0
              DTEM=DBA
              IF ((ABS(Y(NP)) .GT. YMINT_APPLICAT(IR_APPLICAT,IB_APPLICA
     *        T) .AND. V(NP)*Y(NP).LT.0.0)) THEN
                  TVAR=(ABS(Y(NP))-YMINT_APPLICAT(IR_APPLICAT,IB_APPLICA
     *            T))/ABS(V(NP))
                  IF ((ABS(X(NP)+U(NP)*TVAR) .LE. XMINT_APPLICAT(IR_APPL
     *            ICAT,IB_APPLICAT) .AND. TVAR .LT. DBA)) THEN
                      IHIT=1
                      DTEM=TVAR
                  END IF
              END IF
              IF ((ABS(X(NP)) .GT. XMINT_APPLICAT(IR_APPLICAT,IB_APPLICA
     *        T) .AND. U(NP)*X(NP).LT.0.0)) THEN
                  TVAR=(ABS(X(NP))-XMINT_APPLICAT(IR_APPLICAT,IB_APPLICA
     *            T))/ABS(U(NP))
                  IF ((ABS(Y(NP)+V(NP)*TVAR) .LE. YMINT_APPLICAT(IR_APPL
     *            ICAT,IB_APPLICAT) .AND. TVAR .LT. DBA)) THEN
                      IHIT=1
                      DTEM=MIN(DTEM,TVAR)
                  END IF
              END IF
              IF ((IHIT.EQ.1)) THEN
                  DIST=DTEM
              ELSE IF((( XBA.GT.XMINT_APPLICAT(IR_APPLICAT,IB_APPLICAT).
     *        OR. YBA.GT.YMINT_APPLICAT(IR_APPLICAT,IB_APPLICAT)).AND. X
     *        BA.LT.XMAXT_APPLICAT(IR_APPLICAT,IB_APPLICAT) .AND. YBA.LT
     *        .YMAXT_APPLICAT(IR_APPLICAT,IB_APPLICAT))) THEN
                  DIST=DBA
              ELSE
                  IF ((U(NP).NE.0.0)) THEN
                      IF ((U(NP) .GT. 0.0)) THEN
                          TVAR=(XMAXT_APPLICAT(IR_APPLICAT,IB_APPLICAT)-
     *                    X(NP))/U(NP)
                      ELSE
                          TVAR=-(XMAXT_APPLICAT(IR_APPLICAT,IB_APPLICAT)
     *                    +X(NP))/U(NP)
                      END IF
                      IF ((ABS(Y(NP)+V(NP)*TVAR) .LE. YMAXT_APPLICAT(IR_
     *                APPLICAT,IB_APPLICAT))) THEN
                          DTEM=TVAR
                      ELSE IF((V(NP).GT.0.0)) THEN
                          DTEM=(YMAXT_APPLICAT(IR_APPLICAT,IB_APPLICAT)-
     *                    Y(NP))/V(NP)
                      ELSE IF((V(NP).LT.0.0)) THEN
                          DTEM=(-YMAXT_APPLICAT(IR_APPLICAT,IB_APPLICAT)
     *                    -Y(NP))/V(NP)
                      ELSE
                          DTEM=TVAR
                      END IF
                  ELSE
                      IF ((V(NP).GT.0.0)) THEN
                          DTEM=(YMAXT_APPLICAT(IR_APPLICAT,IB_APPLICAT)-
     *                    Y(NP))/V(NP)
                      ELSE IF((V(NP).LT.0.0)) THEN
                          DTEM=(-YMAXT_APPLICAT(IR_APPLICAT,IB_APPLICAT)
     *                    -Y(NP))/V(NP)
                      ELSE
                          DTEM=1.0E30
                      END IF
                  END IF
                  DIST=DTEM
              END IF
              DIST=MIN(DIST,DBA)
          ELSE
              IHIT=0
              DTEM=1E10
              IF ((ABS(Y(NP)) .GT. YMINT_APPLICAT(IR_APPLICAT,IB_APPLICA
     *        T) .AND. V(NP)*Y(NP).LT.0.0)) THEN
                  TVAR=(ABS(Y(NP))-YMINT_APPLICAT(IR_APPLICAT,IB_APPLICA
     *            T))/ABS(V(NP))
                  IF ((ABS(X(NP)+U(NP)*TVAR) .LE. XMINT_APPLICAT(IR_APPL
     *            ICAT,IB_APPLICAT) .AND. TVAR .LT. 1E10)) THEN
                      IHIT=1
                      DTEM=TVAR
                  END IF
              END IF
              IF ((ABS(X(NP)) .GT. XMINT_APPLICAT(IR_APPLICAT,IB_APPLICA
     *        T) .AND. U(NP)*X(NP).LT.0.0)) THEN
                  TVAR=(ABS(X(NP))-XMINT_APPLICAT(IR_APPLICAT,IB_APPLICA
     *            T))/ABS(U(NP))
                  IF ((ABS(Y(NP)+V(NP)*TVAR) .LE. YMINT_APPLICAT(IR_APPL
     *            ICAT,IB_APPLICAT) .AND. TVAR .LT. 1E10)) THEN
                      IHIT=1
                      DTEM=MIN(DTEM,TVAR)
                  END IF
              END IF
              IF ((IHIT.EQ.1)) THEN
                  DIST=DTEM
              ELSE
                  IF ((U(NP).NE.0.0)) THEN
                      IF ((U(NP) .GT. 0.0)) THEN
                          TVAR=(XMAXT_APPLICAT(IR_APPLICAT,IB_APPLICAT)-
     *                    X(NP))/U(NP)
                      ELSE
                          TVAR=-(XMAXT_APPLICAT(IR_APPLICAT,IB_APPLICAT)
     *                    +X(NP))/U(NP)
                      END IF
                      IF ((ABS(Y(NP)+V(NP)*TVAR) .LE. YMAXT_APPLICAT(IR_
     *                APPLICAT,IB_APPLICAT))) THEN
                          DTEM=TVAR
                      ELSE IF((V(NP).GT.0.0)) THEN
                          DTEM=(YMAXT_APPLICAT(IR_APPLICAT,IB_APPLICAT)-
     *                    Y(NP))/V(NP)
                      ELSE IF((V(NP).LT.0.0)) THEN
                          DTEM=(-YMAXT_APPLICAT(IR_APPLICAT,IB_APPLICAT)
     *                    -Y(NP))/V(NP)
                      ELSE
                          DTEM=TVAR
                      END IF
                  ELSE
                      IF ((V(NP).GT.0.0)) THEN
                          DTEM=(YMAXT_APPLICAT(IR_APPLICAT,IB_APPLICAT)-
     *                    Y(NP))/V(NP)
                      ELSE IF((V(NP).LT.0.0)) THEN
                          DTEM=(-YMAXT_APPLICAT(IR_APPLICAT,IB_APPLICAT)
     *                    -Y(NP))/V(NP)
                      ELSE
                          DTEM=1.0E30
                      END IF
                  END IF
                  DIST=DTEM
              END IF
          END IF
          IF ((DIST .LE. USTEP )) THEN
              USTEP = DIST
              IRNEW = IRSTART_APPLICAT+N_APPLICAT
          END IF
      ELSE IF((IR_APPLICAT.EQ.N_APPLICAT+1)) THEN
          IB_APPLICAT=2
          IF ((W(NP).GT.0.0)) THEN
              DIST = (ZBACK_APPLICAT-Z(NP))/W(NP)
              IF ((DIST.LE.0)) THEN
                  DIST=1.E-16
              END IF
              IRNEW_APPLICAT = 1
              DO 18481 I=1,N_APPLICAT
                  IF ((Z(NP).GT.ZMINT_APPLICAT(I,IB_APPLICAT).AND. Z(NP)
     *            .LT.ZMAXT_APPLICAT(I,IB_APPLICAT))) THEN
                      DBA=(ZMAXT_APPLICAT(I,IB_APPLICAT)-Z(NP))/W(NP)
                      XBA=X(NP)+DBA*U(NP)
                      YBA=Y(NP)+DBA*V(NP)
                      IF ((ABS(X(NP)) .LT. XMINT_APPLICAT(I,IB_APPLICAT)
     *                .AND. ABS(Y(NP)) .LT. YMINT_APPLICAT(I,IB_APPLICAT
     *                ))) THEN
                          IF ((ABS(XBA).GT.XMINT_APPLICAT(I,IB_APPLICAT)
     *                    .OR. ABS(YBA).GT.YMINT_APPLICAT(I,IB_APPLICAT)
     *                    )) THEN
                              IF ((U(NP).NE.0.0)) THEN
                                  IF ((U(NP) .GT. 0.0)) THEN
                                      TVAR=(XMINT_APPLICAT(I,IB_APPLICAT
     *                                )-X(NP))/U(NP)
                                  ELSE
                                      TVAR=-(XMINT_APPLICAT(I,IB_APPLICA
     *                                T)+X(NP))/U(NP)
                                  END IF
                                  IF ((ABS(Y(NP)+V(NP)*TVAR) .LE. YMINT_
     *                            APPLICAT(I,IB_APPLICAT))) THEN
                                      DTEM=TVAR
                                  ELSE IF((V(NP).GT.0.0)) THEN
                                      DTEM=(YMINT_APPLICAT(I,IB_APPLICAT
     *                                )-Y(NP))/V(NP)
                                  ELSE IF((V(NP).LT.0.0)) THEN
                                      DTEM=(-YMINT_APPLICAT(I,IB_APPLICA
     *                                T)-Y(NP))/V(NP)
                                  ELSE
                                      DTEM=TVAR
                                  END IF
                              ELSE
                                  IF ((V(NP).GT.0.0)) THEN
                                      DTEM=(YMINT_APPLICAT(I,IB_APPLICAT
     *                                )-Y(NP))/V(NP)
                                  ELSE IF((V(NP).LT.0.0)) THEN
                                      DTEM=(-YMINT_APPLICAT(I,IB_APPLICA
     *                                T)-Y(NP))/V(NP)
                                  ELSE
                                      DTEM=1.0E30
                                  END IF
                              END IF
                              DIST=DTEM
                              IRNEW_APPLICAT = IRSTART_APPLICAT+I-1
                              GO TO18482
                          ELSE IF((I .LT. N_APPLICAT)) THEN
                              DO 18491 II=I+1,N_APPLICAT
                                  DFR=(ZMINT_APPLICAT(II,IB_APPLICAT)-Z(
     *                            NP))/W(NP)
                                  XFR = X(NP)+U(NP)*DFR
                                  YFR = Y(NP)+V(NP)*DFR
                                  IF (( (ABS(XFR).GE.XMINT_APPLICAT(II,I
     *                            B_APPLICAT) .OR. ABS(YFR).GE.YMINT_APP
     *                            LICAT(II,IB_APPLICAT)).AND. ABS(XFR).L
     *                            E.XMAXT_APPLICAT(II,IB_APPLICAT) .AND.
     *                             ABS(YFR).LE.YMAXT_APPLICAT(II,IB_APPL
     *                            ICAT))) THEN
                                      DIST=DFR
                                      IRNEW_APPLICAT = IRSTART_APPLICAT+
     *                                II-1
                                      GOTO 18500
                                  ELSE IF((ABS(XFR) .LT. XMINT_APPLICAT(
     *                            II,IB_APPLICAT).AND. ABS(YFR) .LT. YMI
     *                            NT_APPLICAT(II,IB_APPLICAT))) THEN
                                      DBA=(ZMAXT_APPLICAT(II,IB_APPLICAT
     *                                )-Z(NP))/W(NP)
                                      XBA = X(NP)+U(NP)*DBA
                                      YBA = Y(NP)+V(NP)*DBA
                                      IF ((ABS(XBA).GT.XMINT_APPLICAT(II
     *                                ,IB_APPLICAT).OR. ABS(YBA).GT.YMIN
     *                                T_APPLICAT(II,IB_APPLICAT))) THEN
                                          IF ((U(NP).NE.0.0)) THEN
                                              IF ((U(NP) .GT. 0.0)) THEN
      TVAR=(XMINT_APPLICAT(II,IB_APPLICAT)-XFR)/U(NP)
                                              ELSE
      TVAR=-(XMINT_APPLICAT(II,IB_APPLICAT)+XFR)/U(NP)
                                              END IF
                                              IF ((ABS(YFR+V(NP)*TVAR) .
     *                                        LE. YMINT_APPLICAT(II,IB_A
     *                                        PPLICAT))) THEN
      DTEM=TVAR
                                              ELSE IF((V(NP).GT.0.0)) TH
     *                                        EN
      DTEM=(YMINT_APPLICAT(II,IB_APPLICAT)-YFR)/V(NP)
                                              ELSE IF((V(NP).LT.0.0)) TH
     *                                        EN
      DTEM=(-YMINT_APPLICAT(II,IB_APPLICAT)-YFR)/V(NP)
                                              ELSE
      DTEM=TVAR
                                              END IF
                                          ELSE
                                              IF ((V(NP).GT.0.0)) THEN
      DTEM=(YMINT_APPLICAT(II,IB_APPLICAT)-YFR)/V(NP)
                                              ELSE IF((V(NP).LT.0.0)) TH
     *                                        EN
      DTEM=(-YMINT_APPLICAT(II,IB_APPLICAT)-YFR)/V(NP)
                                              ELSE
      DTEM=1.0E30
                                              END IF
                                          END IF
                                          DIST=DTEM+DFR
                                          IRNEW_APPLICAT = IRSTART_APPLI
     *                                    CAT+II-1
                                          GOTO 18500
                                      END IF
                                  END IF
18491                         CONTINUE
18492                         CONTINUE
                          END IF
                      ELSE IF((ABS(X(NP)) .GT. XMAXT_APPLICAT(I,IB_APPLI
     *                CAT).OR. ABS(Y(NP)) .GT. YMAXT_APPLICAT(I,IB_APPLI
     *                CAT))) THEN
                          IHIT=0
                          DTEM=DBA
                          IF ((ABS(Y(NP)) .GT. YMAXT_APPLICAT(I,IB_APPLI
     *                    CAT) .AND. V(NP)*Y(NP).LT.0.0)) THEN
                              TVAR=(ABS(Y(NP))-YMAXT_APPLICAT(I,IB_APPLI
     *                        CAT))/ABS(V(NP))
                              IF ((ABS(X(NP)+U(NP)*TVAR) .LE. XMAXT_APPL
     *                        ICAT(I,IB_APPLICAT) .AND. TVAR .LT. DBA))
     *                        THEN
                                  IHIT=1
                                  DTEM=TVAR
                              END IF
                          END IF
                          IF ((ABS(X(NP)) .GT. XMAXT_APPLICAT(I,IB_APPLI
     *                    CAT) .AND. U(NP)*X(NP).LT.0.0)) THEN
                              TVAR=(ABS(X(NP))-XMAXT_APPLICAT(I,IB_APPLI
     *                        CAT))/ABS(U(NP))
                              IF ((ABS(Y(NP)+V(NP)*TVAR) .LE. YMAXT_APPL
     *                        ICAT(I,IB_APPLICAT) .AND. TVAR .LT. DBA))
     *                        THEN
                                  IHIT=1
                                  DTEM=MIN(DTEM,TVAR)
                              END IF
                          END IF
                          IF ((IHIT .EQ.1)) THEN
                              DIST=DTEM
                              IRNEW_APPLICAT = IRSTART_APPLICAT+I-1
                              GO TO18482
                          ELSE IF((I .LT. N_APPLICAT)) THEN
                              DO 18511 II=I+1,N_APPLICAT
                                  DFR=(ZMINT_APPLICAT(II,IB_APPLICAT)-Z(
     *                            NP))/W(NP)
                                  XFR = X(NP)+U(NP)*DFR
                                  YFR = Y(NP)+V(NP)*DFR
                                  IF ((( ABS(XFR).GE.XMINT_APPLICAT(II,I
     *                            B_APPLICAT).OR. ABS(YFR).GE.YMINT_APPL
     *                            ICAT(II,IB_APPLICAT)).AND. ABS(XFR).LE
     *                            .XMAXT_APPLICAT(II,IB_APPLICAT) .AND.
     *                            ABS(YFR).LE.YMAXT_APPLICAT(II,IB_APPLI
     *                            CAT))) THEN
                                      DIST=DFR
                                      IRNEW_APPLICAT = IRSTART_APPLICAT+
     *                                II-1
                                      GOTO 18500
                                  ELSE IF((ABS(XFR).LT.XMINT_APPLICAT(II
     *                            ,IB_APPLICAT).AND. ABS(YFR).LT.YMINT_A
     *                            PPLICAT(II,IB_APPLICAT))) THEN
                                      DBA=(ZMAXT_APPLICAT(II,IB_APPLICAT
     *                                )-Z(NP))/W(NP)
                                      XBA = X(NP)+U(NP)*DBA
                                      YBA = Y(NP)+V(NP)*DBA
                                      IF ((ABS(XBA).GT.XMINT_APPLICAT(II
     *                                ,IB_APPLICAT).OR. ABS(YBA).GT.YMIN
     *                                T_APPLICAT(II,IB_APPLICAT))) THEN
                                          IF ((U(NP).NE.0.0)) THEN
                                              IF ((U(NP) .GT. 0.0)) THEN
      TVAR=(XMINT_APPLICAT(II,IB_APPLICAT)-XFR)/U(NP)
                                              ELSE
      TVAR=-(XMINT_APPLICAT(II,IB_APPLICAT)+XFR)/U(NP)
                                              END IF
                                              IF ((ABS(YFR+V(NP)*TVAR) .
     *                                        LE. YMINT_APPLICAT(II,IB_A
     *                                        PPLICAT))) THEN
      DTEM=TVAR
                                              ELSE IF((V(NP).GT.0.0)) TH
     *                                        EN
      DTEM=(YMINT_APPLICAT(II,IB_APPLICAT)-YFR)/V(NP)
                                              ELSE IF((V(NP).LT.0.0)) TH
     *                                        EN
      DTEM=(-YMINT_APPLICAT(II,IB_APPLICAT)-YFR)/V(NP)
                                              ELSE
      DTEM=TVAR
                                              END IF
                                          ELSE
                                              IF ((V(NP).GT.0.0)) THEN
      DTEM=(YMINT_APPLICAT(II,IB_APPLICAT)-YFR)/V(NP)
                                              ELSE IF((V(NP).LT.0.0)) TH
     *                                        EN
      DTEM=(-YMINT_APPLICAT(II,IB_APPLICAT)-YFR)/V(NP)
                                              ELSE
      DTEM=1.0E30
                                              END IF
                                          END IF
                                          DIST = DTEM+DFR
                                          IRNEW_APPLICAT = IRSTART_APPLI
     *                                    CAT+II-1
                                          GOTO 18500
                                      END IF
                                  ELSE IF(( ABS(XFR) .GT. XMAXT_APPLICAT
     *                            (II,IB_APPLICAT).OR. ABS(YFR) .GT. YMA
     *                            XT_APPLICAT(II,IB_APPLICAT))) THEN
                                      DBA=(ZMAXT_APPLICAT(II,IB_APPLICAT
     *                                )-Z(NP))/W(NP)
                                      XBA = X(NP)+U(NP)*DBA
                                      YBA = Y(NP)+V(NP)*DBA
                                      IHIT=0
                                      DTEM=DBA-DFR
                                      IF ((ABS(YFR) .GT. YMAXT_APPLICAT(
     *                                II,IB_APPLICAT) .AND. V(NP)*YFR.LT
     *                                .0.0)) THEN
                                          TVAR=(ABS(YFR)-YMAXT_APPLICAT(
     *                                    II,IB_APPLICAT))/ABS(V(NP))
                                          IF ((ABS(XFR+U(NP)*TVAR) .LE.
     *                                    XMAXT_APPLICAT(II,IB_APPLICAT)
     *                                     .AND. TVAR .LT. DBA-DFR)) THE
     *                                    N
                                              IHIT=1
                                              DTEM=TVAR
                                          END IF
                                      END IF
                                      IF ((ABS(XFR) .GT. XMAXT_APPLICAT(
     *                                II,IB_APPLICAT) .AND. U(NP)*XFR.LT
     *                                .0.0)) THEN
                                          TVAR=(ABS(XFR)-XMAXT_APPLICAT(
     *                                    II,IB_APPLICAT))/ABS(U(NP))
                                          IF ((ABS(YFR+V(NP)*TVAR) .LE.
     *                                    YMAXT_APPLICAT(II,IB_APPLICAT)
     *                                     .AND. TVAR .LT. DBA-DFR)) THE
     *                                    N
                                              IHIT=1
                                              DTEM=MIN(DTEM,TVAR)
                                          END IF
                                      END IF
                                      IF ((IHIT .EQ.1)) THEN
                                          DIST = DTEM+DFR
                                          IRNEW_APPLICAT = IRSTART_APPLI
     *                                    CAT+II-1
                                          GOTO 18500
                                      END IF
                                  END IF
18511                         CONTINUE
18512                         CONTINUE
                          END IF
                      END IF
                  ELSE IF((Z(NP).LT.ZMINT_APPLICAT(I,IB_APPLICAT))) THEN
                      DFR=(ZMINT_APPLICAT(I,IB_APPLICAT)-Z(NP))/W(NP)
                      XFR = X(NP)+U(NP)*DFR
                      YFR = Y(NP)+V(NP)*DFR
                      IF ((( ABS(XFR) .GE. XMINT_APPLICAT(I,IB_APPLICAT)
     *                .OR. ABS(YFR) .GE. YMINT_APPLICAT(I,IB_APPLICAT)).
     *                AND. ABS(XFR) .LE. XMAXT_APPLICAT(I,IB_APPLICAT) .
     *                AND. ABS(YFR) .LE. YMAXT_APPLICAT(I,IB_APPLICAT)))
     *                 THEN
                          DIST = DFR
                          IRNEW_APPLICAT = IRSTART_APPLICAT+I-1
                          GO TO18482
                      ELSE IF(( ABS(XFR).LT.XMINT_APPLICAT(I,IB_APPLICAT
     *                ).AND. ABS(YFR).LT.YMINT_APPLICAT(I,IB_APPLICAT)))
     *                 THEN
                          DBA=(ZMAXT_APPLICAT(I,IB_APPLICAT)-Z(NP))/W(NP
     *                    )
                          XBA = X(NP)+U(NP)*DBA
                          YBA = Y(NP)+V(NP)*DBA
                          IF ((ABS(XBA).GT.XMINT_APPLICAT(I,IB_APPLICAT)
     *                    .OR. ABS(YBA).GT.YMINT_APPLICAT(I,IB_APPLICAT)
     *                    )) THEN
                              IF ((U(NP).NE.0.0)) THEN
                                  IF ((U(NP) .GT. 0.0)) THEN
                                      TVAR=(XMINT_APPLICAT(I,IB_APPLICAT
     *                                )-XFR)/U(NP)
                                  ELSE
                                      TVAR=-(XMINT_APPLICAT(I,IB_APPLICA
     *                                T)+XFR)/U(NP)
                                  END IF
                                  IF ((ABS(YFR+V(NP)*TVAR) .LE. YMINT_AP
     *                            PLICAT(I,IB_APPLICAT))) THEN
                                      DTEM=TVAR
                                  ELSE IF((V(NP).GT.0.0)) THEN
                                      DTEM=(YMINT_APPLICAT(I,IB_APPLICAT
     *                                )-YFR)/V(NP)
                                  ELSE IF((V(NP).LT.0.0)) THEN
                                      DTEM=(-YMINT_APPLICAT(I,IB_APPLICA
     *                                T)-YFR)/V(NP)
                                  ELSE
                                      DTEM=TVAR
                                  END IF
                              ELSE
                                  IF ((V(NP).GT.0.0)) THEN
                                      DTEM=(YMINT_APPLICAT(I,IB_APPLICAT
     *                                )-YFR)/V(NP)
                                  ELSE IF((V(NP).LT.0.0)) THEN
                                      DTEM=(-YMINT_APPLICAT(I,IB_APPLICA
     *                                T)-YFR)/V(NP)
                                  ELSE
                                      DTEM=1.0E30
                                  END IF
                              END IF
                              DIST = DTEM+DFR
                              IRNEW_APPLICAT = IRSTART_APPLICAT+I-1
                              GO TO18482
                          END IF
                      END IF
                  END IF
18481         CONTINUE
18482         CONTINUE
18500         CONTINUE
              IF ((DIST .LE. USTEP )) THEN
                  USTEP = DIST
                  IF ((IRNEW_APPLICAT.EQ.1)) THEN
                      CALL WHERE_AM_I(ICM_APPLICAT,1)
                  ELSE
                      IRNEW = IRNEW_APPLICAT
                  END IF
              END IF
          ELSE IF((W(NP).LT.0.0)) THEN
              DIST = (ZFRONT_APPLICAT-Z(NP))/W(NP)
              IF ((DIST.LE.0)) THEN
                  DIST=1.E-16
              END IF
              IRNEW_APPLICAT = 1
              DO 18521 I=N_APPLICAT,1,-1
                  IF ((Z(NP) .GT. ZMINT_APPLICAT(I,IB_APPLICAT).AND. Z(N
     *            P) .LT. ZMAXT_APPLICAT(I,IB_APPLICAT))) THEN
                      IF ((ABS(X(NP)) .LT. XMINT_APPLICAT(I,IB_APPLICAT)
     *                 .AND. ABS(Y(NP)) .LT. YMINT_APPLICAT(I,IB_APPLICA
     *                T))) THEN
                          DFR = (ZMINT_APPLICAT(I,IB_APPLICAT)-Z(NP))/W(
     *                    NP)
                          XFR = X(NP)+DFR*U(NP)
                          YFR = Y(NP)+DFR*V(NP)
                          IF ((ABS(XFR) .GT. XMINT_APPLICAT(I,IB_APPLICA
     *                    T) .OR. ABS(YFR) .GT. YMINT_APPLICAT(I,IB_APPL
     *                    ICAT))) THEN
                              IF ((U(NP).NE.0.0)) THEN
                                  IF ((U(NP) .GT. 0.0)) THEN
                                      TVAR=(XMINT_APPLICAT(I,IB_APPLICAT
     *                                )-X(NP))/U(NP)
                                  ELSE
                                      TVAR=-(XMINT_APPLICAT(I,IB_APPLICA
     *                                T)+X(NP))/U(NP)
                                  END IF
                                  IF ((ABS(Y(NP)+V(NP)*TVAR) .LE. YMINT_
     *                            APPLICAT(I,IB_APPLICAT))) THEN
                                      DTEM=TVAR
                                  ELSE IF((V(NP).GT.0.0)) THEN
                                      DTEM=(YMINT_APPLICAT(I,IB_APPLICAT
     *                                )-Y(NP))/V(NP)
                                  ELSE IF((V(NP).LT.0.0)) THEN
                                      DTEM=(-YMINT_APPLICAT(I,IB_APPLICA
     *                                T)-Y(NP))/V(NP)
                                  ELSE
                                      DTEM=TVAR
                                  END IF
                              ELSE
                                  IF ((V(NP).GT.0.0)) THEN
                                      DTEM=(YMINT_APPLICAT(I,IB_APPLICAT
     *                                )-Y(NP))/V(NP)
                                  ELSE IF((V(NP).LT.0.0)) THEN
                                      DTEM=(-YMINT_APPLICAT(I,IB_APPLICA
     *                                T)-Y(NP))/V(NP)
                                  ELSE
                                      DTEM=1.0E30
                                  END IF
                              END IF
                              DIST=DTEM
                              IRNEW_APPLICAT = IRSTART_APPLICAT+I-1
                              GO TO18522
                          ELSE IF((I .GT. 1)) THEN
                              DO 18531 II=I-1,1,-1
                                  DBA = (ZMAXT_APPLICAT(II,IB_APPLICAT)-
     *                            Z(NP))/W(NP)
                                  XBA = X(NP)+U(NP)*DBA
                                  YBA = Y(NP)+V(NP)*DBA
                                  IF ((( ABS(XBA) .GE. XMINT_APPLICAT(II
     *                            ,IB_APPLICAT).OR. ABS(YBA) .GE. YMINT_
     *                            APPLICAT(II,IB_APPLICAT)).AND. ABS(XBA
     *                            ) .LE. XMAXT_APPLICAT(II,IB_APPLICAT)
     *                            .AND. ABS(YBA) .LE. YMAXT_APPLICAT(II,
     *                            IB_APPLICAT))) THEN
                                      DIST = DBA
                                      IRNEW_APPLICAT = IRSTART_APPLICAT+
     *                                II-1
                                      GOTO 18540
                                  ELSE IF(( ABS(XBA) .LT. XMINT_APPLICAT
     *                            (II,IB_APPLICAT).AND. ABS(YBA) .LT. YM
     *                            INT_APPLICAT(II,IB_APPLICAT))) THEN
                                      DFR = (ZMINT_APPLICAT(II,IB_APPLIC
     *                                AT)-Z(NP))/W(NP)
                                      XFR = X(NP)+U(NP)*DFR
                                      YFR = Y(NP)+V(NP)*DFR
                                      IF ((ABS(XFR) .GT. XMINT_APPLICAT(
     *                                II,IB_APPLICAT).OR. ABS(YFR) .GT.
     *                                YMINT_APPLICAT(II,IB_APPLICAT))) T
     *                                HEN
                                          IF ((U(NP).NE.0.0)) THEN
                                              IF ((U(NP) .GT. 0.0)) THEN
      TVAR=(XMINT_APPLICAT(II,IB_APPLICAT)-XBA)/U(NP)
                                              ELSE
      TVAR=-(XMINT_APPLICAT(II,IB_APPLICAT)+XBA)/U(NP)
                                              END IF
                                              IF ((ABS(YBA+V(NP)*TVAR) .
     *                                        LE. YMINT_APPLICAT(II,IB_A
     *                                        PPLICAT))) THEN
      DTEM=TVAR
                                              ELSE IF((V(NP).GT.0.0)) TH
     *                                        EN
      DTEM=(YMINT_APPLICAT(II,IB_APPLICAT)-YBA)/V(NP)
                                              ELSE IF((V(NP).LT.0.0)) TH
     *                                        EN
      DTEM=(-YMINT_APPLICAT(II,IB_APPLICAT)-YBA)/V(NP)
                                              ELSE
      DTEM=TVAR
                                              END IF
                                          ELSE
                                              IF ((V(NP).GT.0.0)) THEN
      DTEM=(YMINT_APPLICAT(II,IB_APPLICAT)-YBA)/V(NP)
                                              ELSE IF((V(NP).LT.0.0)) TH
     *                                        EN
      DTEM=(-YMINT_APPLICAT(II,IB_APPLICAT)-YBA)/V(NP)
                                              ELSE
      DTEM=1.0E30
                                              END IF
                                          END IF
                                          DIST = DTEM+DBA
                                          IRNEW_APPLICAT = IRSTART_APPLI
     *                                    CAT+II-1
                                          GOTO 18540
                                      END IF
                                  END IF
18531                         CONTINUE
18532                         CONTINUE
                          END IF
                      ELSE IF(( ABS(X(NP)) .GT. XMAXT_APPLICAT(I,IB_APPL
     *                ICAT).OR. ABS(Y(NP)) .GT. YMAXT_APPLICAT(I,IB_APPL
     *                ICAT))) THEN
                          DFR = (ZMINT_APPLICAT(I,IB_APPLICAT)-Z(NP))/W(
     *                    NP)
                          XFR = X(NP)+DFR*U(NP)
                          YFR = Y(NP)+DFR*V(NP)
                          IHIT=0
                          DTEM=DFR
                          IF ((ABS(Y(NP)) .GT. YMAXT_APPLICAT(I,IB_APPLI
     *                    CAT) .AND. V(NP)*Y(NP).LT.0.0)) THEN
                              TVAR=(ABS(Y(NP))-YMAXT_APPLICAT(I,IB_APPLI
     *                        CAT))/ABS(V(NP))
                              IF ((ABS(X(NP)+U(NP)*TVAR) .LE. XMAXT_APPL
     *                        ICAT(I,IB_APPLICAT) .AND. TVAR .LT. DFR))
     *                        THEN
                                  IHIT=1
                                  DTEM=TVAR
                              END IF
                          END IF
                          IF ((ABS(X(NP)) .GT. XMAXT_APPLICAT(I,IB_APPLI
     *                    CAT) .AND. U(NP)*X(NP).LT.0.0)) THEN
                              TVAR=(ABS(X(NP))-XMAXT_APPLICAT(I,IB_APPLI
     *                        CAT))/ABS(U(NP))
                              IF ((ABS(Y(NP)+V(NP)*TVAR) .LE. YMAXT_APPL
     *                        ICAT(I,IB_APPLICAT) .AND. TVAR .LT. DFR))
     *                        THEN
                                  IHIT=1
                                  DTEM=MIN(DTEM,TVAR)
                              END IF
                          END IF
                          IF ((IHIT .EQ. 1)) THEN
                              DIST=DTEM
                              IRNEW_APPLICAT = IRSTART_APPLICAT+I-1
                              GO TO18522
                          ELSE IF((I .GT. 1)) THEN
                              DO 18551 II=I-1,1,-1
                                  DBA = (ZMAXT_APPLICAT(II,IB_APPLICAT)-
     *                            Z(NP))/W(NP)
                                  XBA = X(NP)+U(NP)*DBA
                                  YBA = Y(NP)+V(NP)*DBA
                                  IF ((( ABS(XBA) .GE. XMINT_APPLICAT(II
     *                            ,IB_APPLICAT).OR. ABS(YBA) .GE. YMINT_
     *                            APPLICAT(II,IB_APPLICAT)).AND. ABS(XBA
     *                            ) .LE. XMAXT_APPLICAT(II,IB_APPLICAT)
     *                            .AND. ABS(YBA) .LE. YMAXT_APPLICAT(II,
     *                            IB_APPLICAT))) THEN
                                      DIST = DBA
                                      IRNEW_APPLICAT = IRSTART_APPLICAT+
     *                                II-1
                                      GOTO 18540
                                  ELSE IF(( ABS(XBA) .LT. XMINT_APPLICAT
     *                            (II,IB_APPLICAT).AND. ABS(YBA) .LT. YM
     *                            INT_APPLICAT(II,IB_APPLICAT))) THEN
                                      DFR=(ZMINT_APPLICAT(II,IB_APPLICAT
     *                                )-Z(NP))/W(NP)
                                      XFR = X(NP)+U(NP)*DFR
                                      YFR = Y(NP)+V(NP)*DFR
                                      IF ((ABS(XFR) .GT. XMINT_APPLICAT(
     *                                II,IB_APPLICAT).OR. ABS(YFR) .GT.
     *                                YMINT_APPLICAT(II,IB_APPLICAT))) T
     *                                HEN
                                          IF ((U(NP).NE.0.0)) THEN
                                              IF ((U(NP) .GT. 0.0)) THEN
      TVAR=(XMINT_APPLICAT(II,IB_APPLICAT)-XBA)/U(NP)
                                              ELSE
      TVAR=-(XMINT_APPLICAT(II,IB_APPLICAT)+XBA)/U(NP)
                                              END IF
                                              IF ((ABS(YBA+V(NP)*TVAR) .
     *                                        LE. YMINT_APPLICAT(II,IB_A
     *                                        PPLICAT))) THEN
      DTEM=TVAR
                                              ELSE IF((V(NP).GT.0.0)) TH
     *                                        EN
      DTEM=(YMINT_APPLICAT(II,IB_APPLICAT)-YBA)/V(NP)
                                              ELSE IF((V(NP).LT.0.0)) TH
     *                                        EN
      DTEM=(-YMINT_APPLICAT(II,IB_APPLICAT)-YBA)/V(NP)
                                              ELSE
      DTEM=TVAR
                                              END IF
                                          ELSE
                                              IF ((V(NP).GT.0.0)) THEN
      DTEM=(YMINT_APPLICAT(II,IB_APPLICAT)-YBA)/V(NP)
                                              ELSE IF((V(NP).LT.0.0)) TH
     *                                        EN
      DTEM=(-YMINT_APPLICAT(II,IB_APPLICAT)-YBA)/V(NP)
                                              ELSE
      DTEM=1.0E30
                                              END IF
                                          END IF
                                          DIST = DTEM+DBA
                                          IRNEW_APPLICAT = IRSTART_APPLI
     *                                    CAT+II-1
                                          GOTO 18540
                                      END IF
                                  ELSE IF(( ABS(XBA) .GT. XMAXT_APPLICAT
     *                            (II,IB_APPLICAT).OR. ABS(YBA) .GT. YMA
     *                            XT_APPLICAT(II,IB_APPLICAT))) THEN
                                      DFR=(ZMINT_APPLICAT(II,IB_APPLICAT
     *                                )-Z(NP))/W(NP)
                                      XFR = X(NP) + U(NP)*DFR
                                      YFR = Y(NP) + V(NP)*DFR
                                      IHIT=0
                                      DTEM=DFR-DBA
                                      IF ((ABS(YBA) .GT. YMAXT_APPLICAT(
     *                                II,IB_APPLICAT) .AND. V(NP)*YBA.LT
     *                                .0.0)) THEN
                                          TVAR=(ABS(YBA)-YMAXT_APPLICAT(
     *                                    II,IB_APPLICAT))/ABS(V(NP))
                                          IF ((ABS(XBA+U(NP)*TVAR) .LE.
     *                                    XMAXT_APPLICAT(II,IB_APPLICAT)
     *                                     .AND. TVAR .LT. DFR-DBA)) THE
     *                                    N
                                              IHIT=1
                                              DTEM=TVAR
                                          END IF
                                      END IF
                                      IF ((ABS(XBA) .GT. XMAXT_APPLICAT(
     *                                II,IB_APPLICAT) .AND. U(NP)*XBA.LT
     *                                .0.0)) THEN
                                          TVAR=(ABS(XBA)-XMAXT_APPLICAT(
     *                                    II,IB_APPLICAT))/ABS(U(NP))
                                          IF ((ABS(YBA+V(NP)*TVAR) .LE.
     *                                    YMAXT_APPLICAT(II,IB_APPLICAT)
     *                                     .AND. TVAR .LT. DFR-DBA)) THE
     *                                    N
                                              IHIT=1
                                              DTEM=MIN(DTEM,TVAR)
                                          END IF
                                      END IF
                                      IF ((IHIT .EQ.1)) THEN
                                          DIST = DTEM+DBA
                                          IRNEW_APPLICAT = IRSTART_APPLI
     *                                    CAT+II-1
                                          GOTO 18540
                                      END IF
                                  END IF
18551                         CONTINUE
18552                         CONTINUE
                          END IF
                      END IF
                  ELSE IF((Z(NP) .GT. ZMAXT_APPLICAT(I,IB_APPLICAT))) TH
     *            EN
                      DBA = (ZMAXT_APPLICAT(I,IB_APPLICAT)-Z(NP))/W(NP)
                      XBA = X(NP)+U(NP)*DBA
                      YBA = Y(NP)+V(NP)*DBA
                      IF ((( ABS(XBA) .GE. XMINT_APPLICAT(I,IB_APPLICAT)
     *                .OR. ABS(YBA) .GE. YMINT_APPLICAT(I,IB_APPLICAT)).
     *                AND. ABS(XBA) .LE. XMAXT_APPLICAT(I,IB_APPLICAT) .
     *                AND. ABS(YBA) .LE. YMAXT_APPLICAT(I,IB_APPLICAT)))
     *                 THEN
                          DIST=DBA
                          IRNEW_APPLICAT = IRSTART_APPLICAT+I-1
                          GO TO18522
                      ELSE IF(( ABS(XBA) .LT. XMINT_APPLICAT(I,IB_APPLIC
     *                AT) .AND. ABS(YBA) .LT. YMINT_APPLICAT(I,IB_APPLIC
     *                AT))) THEN
                          DFR=(ZMINT_APPLICAT(I,IB_APPLICAT)-Z(NP))/W(NP
     *                    )
                          XFR = X(NP)+U(NP)*DFR
                          YFR = Y(NP)+V(NP)*DFR
                          IF ((ABS(XFR) .GT. XMINT_APPLICAT(I,IB_APPLICA
     *                    T).OR. ABS(YFR) .GT. YMINT_APPLICAT(I,IB_APPLI
     *                    CAT))) THEN
                              IF ((U(NP).NE.0.0)) THEN
                                  IF ((U(NP) .GT. 0.0)) THEN
                                      TVAR=(XMINT_APPLICAT(I,IB_APPLICAT
     *                                )-XBA)/U(NP)
                                  ELSE
                                      TVAR=-(XMINT_APPLICAT(I,IB_APPLICA
     *                                T)+XBA)/U(NP)
                                  END IF
                                  IF ((ABS(YBA+V(NP)*TVAR) .LE. YMINT_AP
     *                            PLICAT(I,IB_APPLICAT))) THEN
                                      DTEM=TVAR
                                  ELSE IF((V(NP).GT.0.0)) THEN
                                      DTEM=(YMINT_APPLICAT(I,IB_APPLICAT
     *                                )-YBA)/V(NP)
                                  ELSE IF((V(NP).LT.0.0)) THEN
                                      DTEM=(-YMINT_APPLICAT(I,IB_APPLICA
     *                                T)-YBA)/V(NP)
                                  ELSE
                                      DTEM=TVAR
                                  END IF
                              ELSE
                                  IF ((V(NP).GT.0.0)) THEN
                                      DTEM=(YMINT_APPLICAT(I,IB_APPLICAT
     *                                )-YBA)/V(NP)
                                  ELSE IF((V(NP).LT.0.0)) THEN
                                      DTEM=(-YMINT_APPLICAT(I,IB_APPLICA
     *                                T)-YBA)/V(NP)
                                  ELSE
                                      DTEM=1.0E30
                                  END IF
                              END IF
                              DIST = DTEM + DBA
                              IRNEW_APPLICAT = IRSTART_APPLICAT+I-1
                              GO TO18522
                          END IF
                      ELSE IF(( ABS(XBA) .GT. XMAXT_APPLICAT(I,IB_APPLIC
     *                AT).OR. ABS(YBA) .GT. YMAXT_APPLICAT(I,IB_APPLICAT
     *                ))) THEN
                          DFR = (ZMINT_APPLICAT(I,IB_APPLICAT)-Z(NP))/W(
     *                    NP)
                          XFR = X(NP)+U(NP)*DFR
                          YFR = Y(NP)+V(NP)*DFR
                          IHIT=0
                          DTEM=DFR-DBA
                          IF ((ABS(YBA) .GT. YMAXT_APPLICAT(I,IB_APPLICA
     *                    T) .AND. V(NP)*YBA.LT.0.0)) THEN
                              TVAR=(ABS(YBA)-YMAXT_APPLICAT(I,IB_APPLICA
     *                        T))/ABS(V(NP))
                              IF ((ABS(XBA+U(NP)*TVAR) .LE. XMAXT_APPLIC
     *                        AT(I,IB_APPLICAT) .AND. TVAR .LT. DFR-DBA)
     *                        ) THEN
                                  IHIT=1
                                  DTEM=TVAR
                              END IF
                          END IF
                          IF ((ABS(XBA) .GT. XMAXT_APPLICAT(I,IB_APPLICA
     *                    T) .AND. U(NP)*XBA.LT.0.0)) THEN
                              TVAR=(ABS(XBA)-XMAXT_APPLICAT(I,IB_APPLICA
     *                        T))/ABS(U(NP))
                              IF ((ABS(YBA+V(NP)*TVAR) .LE. YMAXT_APPLIC
     *                        AT(I,IB_APPLICAT) .AND. TVAR .LT. DFR-DBA)
     *                        ) THEN
                                  IHIT=1
                                  DTEM=MIN(DTEM,TVAR)
                              END IF
                          END IF
                          IF ((IHIT .EQ.1)) THEN
                              DIST = DTEM+DBA
                              IRNEW_APPLICAT = IRSTART_APPLICAT+I-1
                              GO TO18522
                          END IF
                      END IF
                  END IF
18521         CONTINUE
18522         CONTINUE
18540         IF ((DIST .LE. USTEP )) THEN
                  USTEP = DIST
                  IF ((IRNEW_APPLICAT.EQ.1)) THEN
                      CALL WHERE_AM_I(ICM_APPLICAT,-1)
                  ELSE
                      IRNEW = IRNEW_APPLICAT
                  END IF
              END IF
          ELSE IF((W(NP).EQ.0.0)) THEN
              DIST = 1.E30
              DO 18561 I=1,N_APPLICAT
                  IF ((Z(NP) .GE. ZMINT_APPLICAT(I,IB_APPLICAT).AND. Z(N
     *            P) .LE. ZMAXT_APPLICAT(I,IB_APPLICAT))) THEN
                      IF ((U(NP).NE.0.0)) THEN
                          IF ((U(NP) .GT. 0.0)) THEN
                              TVAR=(XMINT_APPLICAT(I,IB_APPLICAT)-X(NP))
     *                        /U(NP)
                          ELSE
                              TVAR=-(XMINT_APPLICAT(I,IB_APPLICAT)+X(NP)
     *                        )/U(NP)
                          END IF
                          IF ((ABS(Y(NP)+V(NP)*TVAR) .LE. YMINT_APPLICAT
     *                    (I,IB_APPLICAT))) THEN
                              DTEM=TVAR
                          ELSE IF((V(NP).GT.0.0)) THEN
                              DTEM=(YMINT_APPLICAT(I,IB_APPLICAT)-Y(NP))
     *                        /V(NP)
                          ELSE IF((V(NP).LT.0.0)) THEN
                              DTEM=(-YMINT_APPLICAT(I,IB_APPLICAT)-Y(NP)
     *                        )/V(NP)
                          ELSE
                              DTEM=TVAR
                          END IF
                      ELSE
                          IF ((V(NP).GT.0.0)) THEN
                              DTEM=(YMINT_APPLICAT(I,IB_APPLICAT)-Y(NP))
     *                        /V(NP)
                          ELSE IF((V(NP).LT.0.0)) THEN
                              DTEM=(-YMINT_APPLICAT(I,IB_APPLICAT)-Y(NP)
     *                        )/V(NP)
                          ELSE
                              DTEM=1.0E30
                          END IF
                      END IF
                      DIST = DTEM
                      IRNEW_APPLICAT = IRSTART_APPLICAT+I-1
                      IF ((DIST .LE. USTEP )) THEN
                          USTEP = DIST
                          IRNEW = IRNEW_APPLICAT
                      END IF
                      GO TO18562
                  END IF
18561         CONTINUE
18562         CONTINUE
          END IF
      ELSE
          WRITE(6,18570)IR(NP)-IRSTART_APPLICAT+1,IR(NP),ICM_APPLICAT, I
     *    R_start_CM(ICM_APPLICAT)
18570     FORMAT(//' ************'//' HOWFAR_APPLICAT error'/ '    Regio
     *n, local, absolute =',2I5/ '    CM number=',I5,' start region =',I
     *5/ ' *********'//)
          STOP
      END IF
      RETURN
      END
      SUBROUTINE WHERE_AM_I_APPLICAT(IDIR)
      IMPLICIT NONE
      COMMON/CM_APPLICAT/ ICM_APPLICAT,IRSTART_APPLICAT,IREND_APPLICAT,N
     *_APPLICAT, IR_APPLICAT, TITLE_APPLICAT,XMIN_APPLICAT,YMIN_APPLICAT
     *,XMAX_APPLICAT, YMAX_APPLICAT, ZMIN_APPLICAT,ZMAX_APPLICAT,ZBACK_A
     *PPLICAT,ZFRONT_APPLICAT, XMINT_APPLICAT,YMINT_APPLICAT,XMAXT_APPLI
     *CAT,YMAXT_APPLICAT, ZMINT_APPLICAT,ZMAXT_APPLICAT, AIRGAPMIN_APPLI
     *CAT,ABSX_APPLICAT,ABSY_APPLICAT
      INTEGER ICM_APPLICAT,IRSTART_APPLICAT,IREND_APPLICAT,N_APPLICAT, I
     *R_APPLICAT
      real*8 XMIN_APPLICAT(10), YMIN_APPLICAT(10), XMAX_APPLICAT(10), YM
     *AX_APPLICAT(10), ZMIN_APPLICAT(10), ZMAX_APPLICAT(10), ZBACK_APPLI
     *CAT,ZFRONT_APPLICAT, XMINT_APPLICAT(10,2), YMINT_APPLICAT(10,2), X
     *MAXT_APPLICAT(10,2), YMAXT_APPLICAT(10,2), ZMINT_APPLICAT(10,2), Z
     *MAXT_APPLICAT(10,2), AIRGAPMIN_APPLICAT,ABSX_APPLICAT,ABSY_APPLICA
     *T
      CHARACTER*1 TITLE_APPLICAT(60)
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      INTEGER IDIR
      IRNEW = IREND_APPLICAT
      RETURN
      END
      SUBROUTINE INPUT_APPLICAT
      IMPLICIT NONE
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/CM_APPLICAT/ ICM_APPLICAT,IRSTART_APPLICAT,IREND_APPLICAT,N
     *_APPLICAT, IR_APPLICAT, TITLE_APPLICAT,XMIN_APPLICAT,YMIN_APPLICAT
     *,XMAX_APPLICAT, YMAX_APPLICAT, ZMIN_APPLICAT,ZMAX_APPLICAT,ZBACK_A
     *PPLICAT,ZFRONT_APPLICAT, XMINT_APPLICAT,YMINT_APPLICAT,XMAXT_APPLI
     *CAT,YMAXT_APPLICAT, ZMINT_APPLICAT,ZMAXT_APPLICAT, AIRGAPMIN_APPLI
     *CAT,ABSX_APPLICAT,ABSY_APPLICAT
      INTEGER ICM_APPLICAT,IRSTART_APPLICAT,IREND_APPLICAT,N_APPLICAT, I
     *R_APPLICAT
      real*8 XMIN_APPLICAT(10), YMIN_APPLICAT(10), XMAX_APPLICAT(10), YM
     *AX_APPLICAT(10), ZMIN_APPLICAT(10), ZMAX_APPLICAT(10), ZBACK_APPLI
     *CAT,ZFRONT_APPLICAT, XMINT_APPLICAT(10,2), YMINT_APPLICAT(10,2), X
     *MAXT_APPLICAT(10,2), YMAXT_APPLICAT(10,2), ZMINT_APPLICAT(10,2), Z
     *MAXT_APPLICAT(10,2), AIRGAPMIN_APPLICAT,ABSX_APPLICAT,ABSY_APPLICA
     *T
      CHARACTER*1 TITLE_APPLICAT(60)
      COMMON/GEOM/ NREG
      INTEGER NREG
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      INTEGER DOSE_ZONE_AIR,  I,J,K,  IRA,  IR_TO_BIT_AIR,  MED_FLAG,  M
     *ED_INDEX,  ISHAPE
      real*8 ZTHICK_APPLICAT(10),  WIDTHX_APPLICAT(10),  WIDTHY_APPLICAT
     *(10)
      ICM_APPLICAT = ICM
      IRSTART_APPLICAT = IR_start_CM(ICM_APPLICAT)
      IERR_GEOM(ICM_APPLICAT) = 0
      AIRGAPMIN_APPLICAT = 0.01
      WRITE(6,18580)
18580 FORMAT(/' Next component is a set of square or rectangular scraper
     *s '// 'APPLICAT   (APPLICAT:'//' TITLE: ',$)
      READ(i_input,18590,END=18600,ERR=18610)TITLE_APPLICAT
18590 FORMAT(60A1)
      WRITE(6,18620)TITLE_APPLICAT
18620 FORMAT(' ',60A1)
      WRITE(6,18630)AIRGAPMIN_APPLICAT
18630 FORMAT(/' Input ZBACK_APPLICAT, the Z coordinate of the back faceo
     *f this CM', /' [Note: Leave at least min. airgap (=',F8.5,' cm) be
     *tween'/ ' the back of the last scraper and ZBACK]:',$)
      READ(i_input,18640,END=18600,ERR=18610)ZBACK_APPLICAT
18640 FORMAT(F15.0)
      WRITE(6,18650)ZBACK_APPLICAT
18650 FORMAT(F15.5)
      N_APPLICAT = 10
      WRITE(6,18660)N_APPLICAT
18660 FORMAT(/' Number of scrapers in the CM (minimum 1, maximum',I2,'):
     * ' /' and the index for scrapers shape: 0 (default) for square, '/
     *'                                    1 for rectangualr ',$)
      READ(i_input,18670,END=18600,ERR=18610)N_APPLICAT,ISHAPE
18670 FORMAT (2I5)
      WRITE(6,18680)N_APPLICAT,ISHAPE
18680 FORMAT(2I5)
      IF ((N_APPLICAT .GT. 10)) THEN
          N_APPLICAT=10
          WRITE(6,18690)ICM_APPLICAT, N_APPLICAT
18690     FORMAT(//' ***ERROR IN CM ',I4,' (APPLICAT):'/ '# of scrapers>
     * max. allowed'/ '# of scrapers reduced to ',I4,' for now'//)
          IERR_GEOM(ICM_APPLICAT)=IERR_GEOM(ICM_APPLICAT)+1
      ELSE IF((N_APPLICAT.LT.1)) THEN
          N_APPLICAT=1
          WRITE(6,18700)ICM_APPLICAT
18700     FORMAT(//' ***ERROR IN CM ',I4,' (APPLICAT):'/ '# of scrapers<
     * 1'/ '# of scrapers reset to 1 for now'//)
          IERR_GEOM(ICM_APPLICAT)=IERR_GEOM(ICM_APPLICAT)+1
      END IF
      IF ((ISHAPE.LE.0)) THEN
          ISHAPE=0
          WRITE(6,18710)
18710     FORMAT(/' scrapers to be square, use square scraper input form
     *at.',$)
      ELSE IF((ISHAPE.GT.1)) THEN
          ISHAPE=1
          WRITE(6,18720)
18720     FORMAT(/' ***WARNING: scrapers set to be rectangular***'/ ' us
     *e rectangualr scraper input format.',$)
      ELSE
          WRITE(6,18730)
18730     FORMAT(/' rectangular scraper. Use rectangular scraper input f
     *ormat.' ,$)
      END IF
      IRA = IRSTART_APPLICAT - 1
      DO 18741 IR_APPLICAT=1,N_APPLICAT
          IRA = IRA+1
          IF ((ISHAPE.EQ.0)) THEN
              WRITE(6,18750)IR_APPLICAT, AIRGAPMIN_APPLICAT
18750         FORMAT(/' Scraper',I3,':'/ ' Z OF FRONT FACE, THICKNESS (i
     *n Z), HALF-WIDTH OF OPENING,'/ ' BAR WIDTH(cm), DOSE ZONE, IREGION
     *_TO_BIT (all on one line)'/ ' [Leave at least the min. airgap (= '
     *,F8.5,' cm) between scrapers]',/ ' : ',$)
              READ(i_input,18760,END=18600,ERR=18610)ZMIN_APPLICAT(IR_AP
     *        PLICAT),ZTHICK_APPLICAT(IR_APPLICAT), XMIN_APPLICAT(IR_APP
     *        LICAT), WIDTHX_APPLICAT(IR_APPLICAT), DOSE_ZONE(IRA),IREGI
     *        ON_TO_BIT(IRA)
18760         FORMAT (4F15.0,2I4)
              WRITE(6,18770)ZMIN_APPLICAT(IR_APPLICAT),ZTHICK_APPLICAT(I
     *        R_APPLICAT), XMIN_APPLICAT(IR_APPLICAT), WIDTHX_APPLICAT(I
     *        R_APPLICAT), DOSE_ZONE(IRA),IREGION_TO_BIT(IRA)
18770         FORMAT(4F8.2,2I12)
              YMIN_APPLICAT(IR_APPLICAT)=XMIN_APPLICAT(IR_APPLICAT)
              WIDTHY_APPLICAT(IR_APPLICAT)=WIDTHX_APPLICAT(IR_APPLICAT)
          ELSE
              WRITE(6,18780)IR_APPLICAT, AIRGAPMIN_APPLICAT
18780         FORMAT(/' Scraper',I3,':'/ ' Z OF FRONT FACE, THICKNESS (i
     *n Z), HALF-WIDTH OF OPENING in X,'/ ' HALF-WIDTH OF OPENING in Y,B
     *AR WIDTH(cm) in X, BAR WIDTH(cm) in Y,'/ ' DOSE ZONE, IREGION_TO_B
     *IT (all on one line)'/ ' [Leave at least the min. airgap (= ',F8.5
     *,' cm) between scrapers]',/ ' : ',$)
              READ(i_input,18790,END=18600,ERR=18610)ZMIN_APPLICAT(IR_AP
     *        PLICAT),ZTHICK_APPLICAT(IR_APPLICAT), XMIN_APPLICAT(IR_APP
     *        LICAT),YMIN_APPLICAT(IR_APPLICAT), WIDTHX_APPLICAT(IR_APPL
     *        ICAT),WIDTHY_APPLICAT(IR_APPLICAT), DOSE_ZONE(IRA),IREGION
     *        _TO_BIT(IRA)
18790         FORMAT (6F15.0,2I4)
              WRITE(6,18800)ZMIN_APPLICAT(IR_APPLICAT),ZTHICK_APPLICAT(I
     *        R_APPLICAT), XMIN_APPLICAT(IR_APPLICAT),YMIN_APPLICAT(IR_A
     *        PPLICAT), WIDTHX_APPLICAT(IR_APPLICAT),WIDTHY_APPLICAT(IR_
     *        APPLICAT), DOSE_ZONE(IRA),IREGION_TO_BIT(IRA)
18800         FORMAT(6F8.2,2I12)
          END IF
          IF ((IR_APPLICAT.EQ.1)) THEN
              IF ((ICM_APPLICAT.EQ.1 .AND. Z_min_CM(ICM_APPLICAT) .GT. Z
     *        MIN_APPLICAT(1)- AIRGAPMIN_APPLICAT)) THEN
                  WRITE(6,18810)ICM_APPLICAT, AIRGAPMIN_APPLICAT, ZMIN_A
     *            PPLICAT(1)-AIRGAPMIN_APPLICAT,Z_min_CM(1)
18810             FORMAT(//' ***WARNING IN CM ',I4,' (APPLICAT):'/ ' Les
     *s than min. airgap (',F8.5,' cm) between top', ' of CM and 1st scr
     *aper.'/ ' Z_min_CM(1) reset to ',F8.5,' cm from ',F8.5,' cm'//)
                  WRITE(IOUTLIST,100)ICM_APPLICAT, AIRGAPMIN_APPLICAT, Z
     *            MIN_APPLICAT(1)-AIRGAPMIN_APPLICAT,Z_min_CM(1)
100               FORMAT(//' ***WARNING IN CM ',I4,' (APPLICAT):'/ ' Les
     *s than min. airgap (',F8.5,' cm) between top', ' of CM and 1st scr
     *aper.'/ ' Z_min_CM(1) reset to ',F8.5,' cm from ',F8.5,' cm'//)
                  Z_min_CM(1)= ZMIN_APPLICAT(1)-AIRGAPMIN_APPLICAT
              ELSE IF((Z_min_CM(ICM_APPLICAT) .GT. ZMIN_APPLICAT(1))) TH
     *        EN
                  WRITE(6,18820)ICM_APPLICAT
18820             FORMAT(//' ***ERROR IN CM ',I4,' (APPLICAT):'/ ' Overl
     *aps with previous CM.'//)
                  IERR_GEOM(ICM_APPLICAT)=IERR_GEOM(ICM_APPLICAT)+1
              ELSE IF((Z_min_CM(ICM_APPLICAT) .GT. ZMIN_APPLICAT(1) - AI
     *        RGAPMIN_APPLICAT)) THEN
                  WRITE(6,18830)ICM_APPLICAT, AIRGAPMIN_APPLICAT, Z_min_
     *            CM(ICM_APPLICAT)+AIRGAPMIN_APPLICAT,ZMIN_APPLICAT(1)
18830             FORMAT(//' ***WARNING IN CM ',I4,' (APPLICAT):'/ ' Les
     *s than min. airgap (',F8.5,' cm) between top', ' of CM and 1st scr
     *aper.'/ ' ZMIN(1) reset to ',F8.5,' cm from ',F8.5,' cm'//)
                  WRITE(IOUTLIST,101)ICM_APPLICAT, AIRGAPMIN_APPLICAT, Z
     *            _min_CM(ICM_APPLICAT)+AIRGAPMIN_APPLICAT,ZMIN_APPLICAT
     *            (1)
101               FORMAT(//' ***WARNING IN CM ',I4,' (APPLICAT):'/ ' Les
     *s than min. airgap (',F8.5,' cm) between top', ' of CM and 1st scr
     *aper.'/ ' ZMIN(1) reset to ',F8.5,' cm from ',F8.5,' cm'//)
                  ZMIN_APPLICAT(1)=Z_min_CM(ICM_APPLICAT)+AIRGAPMIN_APPL
     *            ICAT
              END IF
          ELSE
              IF ((ZMIN_APPLICAT(IR_APPLICAT-1)+ZTHICK_APPLICAT(IR_APPLI
     *        CAT-1) .GT. ZMIN_APPLICAT(IR_APPLICAT))) THEN
                  WRITE(6,18840)ICM_APPLICAT, IR_APPLICAT-1, IR_APPLICAT
18840             FORMAT(//' ***ERROR IN CM ',I4,' (APPLICAT):'/ ' Scrap
     *er ',I4,' overlaps with scraper ',I4//)
                  IERR_GEOM(ICM_APPLICAT)=IERR_GEOM(ICM_APPLICAT)+1
              ELSE IF((ZMIN_APPLICAT(IR_APPLICAT-1)+ZTHICK_APPLICAT(IR_A
     *        PPLICAT-1).GT. ZMIN_APPLICAT(IR_APPLICAT)-AIRGAPMIN_APPLIC
     *        AT)) THEN
                  WRITE(6,18850)ICM_APPLICAT, AIRGAPMIN_APPLICAT, IR_APP
     *            LICAT-1, IR_APPLICAT, IR_APPLICAT, ZMIN_APPLICAT(IR_AP
     *            PLICAT-1)+ZTHICK_APPLICAT(IR_APPLICAT-1)+ AIRGAPMIN_AP
     *            PLICAT,ZMIN_APPLICAT(IR_APPLICAT)
18850             FORMAT(//' ***WARNING IN CM ',I4,' (APPLICAT):'/ ' Les
     *s than min. airgap (',F8.5,' cm) between scraper ', I4,' and scrap
     *er ',I4/ ' ZMIN(',I4,') reset to ',F8.5,' cm from ',F8.5,' cm'//)
                  WRITE(IOUTLIST,103)ICM_APPLICAT, AIRGAPMIN_APPLICAT,IR
     *            _APPLICAT-1, IR_APPLICAT, IR_APPLICAT,ZMIN_APPLICAT(IR
     *            _APPLICAT-1)+ ZTHICK_APPLICAT(IR_APPLICAT-1)+AIRGAPMIN
     *            _APPLICAT, ZMIN_APPLICAT(IR_APPLICAT)
103               FORMAT(//' ***WARNING IN CM ',I4,' (APPLICAT):'/ ' Les
     *s than min. airgap (',F8.5,' cm) between scraper ', I4,' and scrap
     *er ',I4/ ' ZMIN(',I4,') reset to ',F8.5,' cm from ',F8.5,' cm'//)
                  ZMIN_APPLICAT(IR_APPLICAT)=ZMIN_APPLICAT(IR_APPLICAT-1
     *            )+ ZTHICK_APPLICAT(IR_APPLICAT-1)+AIRGAPMIN_APPLICAT
              END IF
          END IF
          IF ((ZTHICK_APPLICAT(IR_APPLICAT).LT.0.0)) THEN
              WRITE(6,18860)ICM_APPLICAT, IR_APPLICAT
18860         FORMAT(//' ***ERROR IN CM ',I4,' (APPLICAT):'/ ' ZTHICK(',
     *I4,') < 0.0'//)
              IERR_GEOM(ICM_APPLICAT)=IERR_GEOM(ICM_APPLICAT)+1
          END IF
          IF ((IR_APPLICAT.EQ.N_APPLICAT .AND. ZMIN_APPLICAT(IR_APPLICAT
     *    )+ZTHICK_APPLICAT(IR_APPLICAT) .GT. ZBACK_APPLICAT-AIRGAPMIN_A
     *    PPLICAT)) THEN
              WRITE(6,18870)ICM_APPLICAT, AIRGAPMIN_APPLICAT, ZMIN_APPLI
     *        CAT(IR_APPLICAT)+ ZTHICK_APPLICAT(IR_APPLICAT)+ AIRGAPMIN_
     *        APPLICAT,ZBACK_APPLICAT
18870         FORMAT(//' ***WARNING IN CM ',I4,' (APPLICAT):'/ ' Less th
     *an min. airgap (',F8.5,' cm) between last'/ ' scraper and ZBACK'/'
     * ZBACK reset to ',F8.5,' cm from ',F8.5,' cm'//)
              WRITE(IOUTLIST,104)ICM_APPLICAT, AIRGAPMIN_APPLICAT, ZMIN_
     *        APPLICAT(IR_APPLICAT)+ZTHICK_APPLICAT(IR_APPLICAT)+ AIRGAP
     *        MIN_APPLICAT,ZBACK_APPLICAT
104           FORMAT(//' ***WARNING IN CM ',I4,' (APPLICAT):'/ ' Less th
     *an min. airgap (',F8.5,' cm) between last'/ ' scraper and ZBACK'/'
     * ZBACK reset to ',F8.5,' cm from ',F8.5,' cm'//)
              ZBACK_APPLICAT=ZMIN_APPLICAT(IR_APPLICAT)+ ZTHICK_APPLICAT
     *        (IR_APPLICAT)+ AIRGAPMIN_APPLICAT
          END IF
          IF ((XMIN_APPLICAT(IR_APPLICAT).LT.0.0)) THEN
              WRITE(6,18880)ICM_APPLICAT, IR_APPLICAT
18880         FORMAT(//' ***ERROR IN CM ',I4,' (APPLICAT):'/ ' Half-widt
     *h of opening in x in scraper ',I4,' < 0.0'//)
              IERR_GEOM(ICM_APPLICAT)=IERR_GEOM(ICM_APPLICAT)+1
          END IF
          IF ((YMIN_APPLICAT(IR_APPLICAT).LT.0.0)) THEN
              WRITE(6,18890)ICM_APPLICAT, IR_APPLICAT
18890         FORMAT(//' ***ERROR IN CM ',I4,' (APPLICAT):'/ ' Half-widt
     *h of opening in y in scraper ',I4,' < 0.0'//)
              IERR_GEOM(ICM_APPLICAT)=IERR_GEOM(ICM_APPLICAT)+1
          ELSE IF((XMIN_APPLICAT(IR_APPLICAT).GT.RMAX_CM(ICM_APPLICAT)))
     *     THEN
              WRITE(6,18900)ICM_APPLICAT, IR_APPLICAT
18900         FORMAT(//' ***ERROR IN CM ',I4,' (APPLICAT):'/ ' Half-widt
     *h of opening in x inscraper ',I4,' > RMAX_CM'//)
              IERR_GEOM(ICM_APPLICAT)=IERR_GEOM(ICM_APPLICAT)+1
          ELSE IF((YMIN_APPLICAT(IR_APPLICAT).GT.RMAX_CM(ICM_APPLICAT)))
     *     THEN
              WRITE(6,18910)ICM_APPLICAT, IR_APPLICAT
18910         FORMAT(//' ***ERROR IN CM ',I4,' (APPLICAT):'/ ' Half-widt
     *h of opening in y inscraper ',I4,' > RMAX_CM'//)
              IERR_GEOM(ICM_APPLICAT)=IERR_GEOM(ICM_APPLICAT)+1
          ELSE IF((WIDTHX_APPLICAT(IR_APPLICAT).GE.0.0 .AND. XMIN_APPLIC
     *    AT(IR_APPLICAT)+WIDTHX_APPLICAT(IR_APPLICAT).GT. RMAX_CM(ICM_A
     *    PPLICAT))) THEN
              WRITE(6,18920)ICM_APPLICAT, IR_APPLICAT, IR_APPLICAT, RMAX
     *        _CM(ICM_APPLICAT)-XMIN_APPLICAT(IR_APPLICAT), WIDTHX_APPLI
     *        CAT(IR_APPLICAT)
18920         FORMAT(//' ***WARNING IN CM ',I4,' (APPLICAT):'/ ' Scraper
     * in x ',I4,' extends beyond RMAX_CM'/ ' Bar width in x of scraper'
     *,I4,' reduced to ',F8.5,' cm'/ ' from ',F8.5,' cm'//)
              WRITE(IOUTLIST,105)ICM_APPLICAT, IR_APPLICAT, IR_APPLICAT,
     *         RMAX_CM(ICM_APPLICAT)-XMIN_APPLICAT(IR_APPLICAT), WIDTHX_
     *        APPLICAT(IR_APPLICAT)
105           FORMAT(//' ***WARNING IN CM ',I4,' (APPLICAT):'/ ' Scraper
     * in x ',I4,' extends beyond RMAX_CM'/ ' Bar width in x of scraper'
     *,I4,' reduced to ',F8.5,' cm'/ ' from ',F8.5,' cm'//)
              WIDTHX_APPLICAT(IR_APPLICAT)=RMAX_CM(ICM_APPLICAT) -XMIN_A
     *        PPLICAT(IR_APPLICAT)
          ELSE IF((WIDTHY_APPLICAT(IR_APPLICAT).GE.0.0 .AND. YMIN_APPLIC
     *    AT(IR_APPLICAT)+WIDTHY_APPLICAT(IR_APPLICAT).GT. RMAX_CM(ICM_A
     *    PPLICAT))) THEN
              WRITE(6,18930)ICM_APPLICAT, IR_APPLICAT, IR_APPLICAT, RMAX
     *        _CM(ICM_APPLICAT)-YMIN_APPLICAT(IR_APPLICAT), WIDTHY_APPLI
     *        CAT(IR_APPLICAT)
18930         FORMAT(//' ***WARNING IN CM ',I4,' (APPLICAT):'/ ' Scraper
     * in y ',I4,' extends beyond RMAX_CM'/ ' Bar width in y of scraper'
     *,I4,' reduced to ',F8.5,' cm'/ ' from ',F8.5,' cm'//)
              WRITE(IOUTLIST,106)ICM_APPLICAT, IR_APPLICAT, IR_APPLICAT,
     *         RMAX_CM(ICM_APPLICAT)-YMIN_APPLICAT(IR_APPLICAT), WIDTHY_
     *        APPLICAT(IR_APPLICAT)
106           FORMAT(//' ***WARNING IN CM ',I4,' (APPLICAT):'/ ' Scraper
     * in y ',I4,' extends beyond RMAX_CM'/ ' Bar width in y of scraper'
     *,I4,' reduced to ',F8.5,' cm'/ ' from ',F8.5,' cm'//)
              WIDTHY_APPLICAT(IR_APPLICAT)=RMAX_CM(ICM_APPLICAT) -YMIN_A
     *        PPLICAT(IR_APPLICAT)
          END IF
          IF ((WIDTHX_APPLICAT(IR_APPLICAT).LT.0.0)) THEN
              WRITE(6,18940)ICM_APPLICAT, IR_APPLICAT
18940         FORMAT(//' ***ERROR IN CM ',I4,' (APPLICAT):'/ ' Bar width
     * in x of scraper ',I4,' < 0.0'//)
          END IF
          IF ((WIDTHY_APPLICAT(IR_APPLICAT).LT.0.0)) THEN
              WRITE(6,18950)ICM_APPLICAT, IR_APPLICAT
18950         FORMAT(//' ***ERROR IN CM ',I4,' (APPLICAT):'/ ' Bar width
     * in y of scraper ',I4,' < 0.0'//)
          END IF
18741 CONTINUE
18742 CONTINUE
      IRA = IRSTART_APPLICAT
      WRITE(6,18960)
18960 FORMAT(/' ECUT, PCUT of scrapers & air',/ ' & DOSE ZONE, IREGION_T
     *O_BIT of air (all in one line): '/,$)
      READ(i_input,18970,END=18600,ERR=18610)ECUT(IRA),PCUT(IRA), DOSE_Z
     *ONE_AIR,IR_TO_BIT_AIR
18970 FORMAT (2F15.0,2I5)
      WRITE(6,18980)ECUT(IRA),PCUT(IRA),DOSE_ZONE_AIR,IR_TO_BIT_AIR
18980 FORMAT(2F15.5,2I5)
      IF((ECUT(IRA).LT.ECUTIN))ECUT(IRA)=ECUTIN
      IF((PCUT(IRA).LT.PCUTIN))PCUT(IRA)=PCUTIN
      IRA = IRSTART_APPLICAT - 1
      DO 18991 K=1,N_APPLICAT
          WRITE(6,19000)K
19000     FORMAT(/' SCRAPER ',I4,$)
          IRA = IRA + 1
          WRITE(6,19010)
19010     FORMAT(' MEDIUM (left justify): ',$)
          READ(i_input,'(24A1)',END=18600,ERR=18610) (MED_IN(J),J=1,24)
          WRITE(6,19020)(MED_IN(J),J=1,24)
19020     FORMAT(' ',24A1)
          IF ((MED_IN(1) .EQ. 'V' .AND. MED_IN(2).EQ.'A' .AND. MED_IN(3)
     *    .EQ.'C' .AND. MED_IN(4) .EQ. 'U' .AND. MED_IN(5).EQ.'U' .AND.
     *    MED_IN(6).EQ.'M')) THEN
              MED_INDEX=0
          ELSE
              IF ((NMED .NE. 0)) THEN
                  DO 19031 I=1,NMED
                      MED_FLAG = 0
                      DO 19041 J=1,24
                          IF ((MEDIA(J,I) .NE. MED_IN(J))) THEN
                              MED_FLAG = 1
                              GO TO19042
                          END IF
19041                 CONTINUE
19042                 CONTINUE
                      IF ((MED_FLAG .EQ. 0)) THEN
                          MED_INDEX = I
                          GO TO19032
                      END IF
                      IF ((I .EQ. NMED)) THEN
                          NMED = NMED+1
                          MED_INDEX = NMED
                          DO 19051 J=1,24
                              MEDIA(J,NMED) = MED_IN(J)
19051                     CONTINUE
19052                     CONTINUE
                          GO TO19032
                      END IF
19031             CONTINUE
19032             CONTINUE
              ELSE
                  NMED = 1
                  MED_INDEX = NMED
                  DO 19061 J=1,24
                      MEDIA(J,NMED) = MED_IN(J)
19061             CONTINUE
19062             CONTINUE
              END IF
          END IF
          MED(IRA) = MED_INDEX
18991 CONTINUE
18992 CONTINUE
      IREND_APPLICAT = IRSTART_APPLICAT+N_APPLICAT
      NREG = NREG+N_APPLICAT+1
      IF ((NREG .LE. 3000)) THEN
          IR_start_CM(ICM_APPLICAT+1) = IREND_APPLICAT+1
      ELSE
          WRITE(6,19070)ICM_APPLICAT, NREG,3000
19070     FORMAT(//' ***ERROR IN CM ',I4,' (APPLICAT):'/ I4,' regions re
     *quested, only',I4,' available')
          IERR_GEOM(ICM_APPLICAT)=IERR_GEOM(ICM_APPLICAT)+1
      END IF
      IRA = IRSTART_APPLICAT-1
      DO 19081 IR_APPLICAT=1,N_APPLICAT
          IRA = IRA+1
          ZMAX_APPLICAT(IR_APPLICAT) = ZMIN_APPLICAT(IR_APPLICAT)+ ZTHIC
     *    K_APPLICAT(IR_APPLICAT)
          ZMAXT_APPLICAT(IR_APPLICAT,1) = ZMAX_APPLICAT(IR_APPLICAT)+1.E
     *    -5
          ZMAXT_APPLICAT(IR_APPLICAT,2) = ZMAX_APPLICAT(IR_APPLICAT)-1.E
     *    -5
          ZMINT_APPLICAT(IR_APPLICAT,1) = ZMIN_APPLICAT(IR_APPLICAT)-1.E
     *    -5
          ZMINT_APPLICAT(IR_APPLICAT,2) = ZMIN_APPLICAT(IR_APPLICAT)+1.E
     *    -5
          XMAX_APPLICAT(IR_APPLICAT) = XMIN_APPLICAT(IR_APPLICAT)+ WIDTH
     *    X_APPLICAT(IR_APPLICAT)
          YMAX_APPLICAT(IR_APPLICAT) = YMIN_APPLICAT(IR_APPLICAT)+ WIDTH
     *    Y_APPLICAT(IR_APPLICAT)
          XMAXT_APPLICAT(IR_APPLICAT,1) =XMAX_APPLICAT(IR_APPLICAT)+1.E-
     *    5
          XMAXT_APPLICAT(IR_APPLICAT,2) =XMAX_APPLICAT(IR_APPLICAT)-1.E-
     *    5
          XMINT_APPLICAT(IR_APPLICAT,1) =XMIN_APPLICAT(IR_APPLICAT)-1.E-
     *    5
          XMINT_APPLICAT(IR_APPLICAT,2) =XMIN_APPLICAT(IR_APPLICAT)+1.E-
     *    5
          YMAXT_APPLICAT(IR_APPLICAT,1) =YMAX_APPLICAT(IR_APPLICAT)+1.E-
     *    5
          YMAXT_APPLICAT(IR_APPLICAT,2) =YMAX_APPLICAT(IR_APPLICAT)-1.E-
     *    5
          YMINT_APPLICAT(IR_APPLICAT,1) =YMIN_APPLICAT(IR_APPLICAT)-1.E-
     *    5
          YMINT_APPLICAT(IR_APPLICAT,2) =YMIN_APPLICAT(IR_APPLICAT)+1.E-
     *    5
          ECUT(IRA) = ECUT(IRSTART_APPLICAT)
          PCUT(IRA) = PCUT(IRSTART_APPLICAT)
19081 CONTINUE
19082 CONTINUE
      Z_min_CM(ICM_APPLICAT+1) = ZBACK_APPLICAT
      ZFRONT_APPLICAT = Z_min_CM(ICM_APPLICAT)
      IRA = IREND_APPLICAT
      MED(IRA) = AIR_INDEX
      ECUT(IRA) = ECUT(IRSTART_APPLICAT)
      PCUT(IRA) = PCUT(IRSTART_APPLICAT)
      ESAVE(IRA)=ESAVE_GLOBAL
      RMAX_CM_FLAG(ICM_APPLICAT) = 2
      IRA = IRSTART_APPLICAT-1
      DO 19091 IR_APPLICAT=1,N_APPLICAT
          IRA = IRA+1
          NDOSE_ZONE = MAX(DOSE_ZONE(IRA),DOSE_ZONE_AIR,NDOSE_ZONE)
          ESAVE(IRA)=ESAVE_GLOBAL
          ECUTRR(IRA)=ECUT(IRA)
19091 CONTINUE
19092 CONTINUE
      IRA = IRA+1
      DOSE_ZONE(IRA) = DOSE_ZONE_AIR
      E_min_out(ICM_APPLICAT)=ECUT(IRA)
      IRA = IRSTART_APPLICAT-1
      DO 19101 I=1,N_APPLICAT
          IRA = IRA + 1
          MAX_BIT = MAX(MAX_BIT,IREGION_TO_BIT(IRA))
19101 CONTINUE
19102 CONTINUE
      IREGION_TO_BIT(IREND_APPLICAT) = IR_TO_BIT_AIR
      MAX_BIT = MAX(MAX_BIT,IR_TO_BIT_AIR)
      RETURN
18600 CONTINUE
      WRITE(6,19110)ICM
19110 FORMAT(//' *** ERROR *** unexpected end of file reading input forC
     *M',I3)
      STOP
18610 CONTINUE
      WRITE(6,19120)ICM
19120 FORMAT(//' *** ERROR *** format error on input for CM',I3)
      STOP
      END
      SUBROUTINE ISUMRY_APPLICAT
      IMPLICIT NONE
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/CM_APPLICAT/ ICM_APPLICAT,IRSTART_APPLICAT,IREND_APPLICAT,N
     *_APPLICAT, IR_APPLICAT, TITLE_APPLICAT,XMIN_APPLICAT,YMIN_APPLICAT
     *,XMAX_APPLICAT, YMAX_APPLICAT, ZMIN_APPLICAT,ZMAX_APPLICAT,ZBACK_A
     *PPLICAT,ZFRONT_APPLICAT, XMINT_APPLICAT,YMINT_APPLICAT,XMAXT_APPLI
     *CAT,YMAXT_APPLICAT, ZMINT_APPLICAT,ZMAXT_APPLICAT, AIRGAPMIN_APPLI
     *CAT,ABSX_APPLICAT,ABSY_APPLICAT
      INTEGER ICM_APPLICAT,IRSTART_APPLICAT,IREND_APPLICAT,N_APPLICAT, I
     *R_APPLICAT
      real*8 XMIN_APPLICAT(10), YMIN_APPLICAT(10), XMAX_APPLICAT(10), YM
     *AX_APPLICAT(10), ZMIN_APPLICAT(10), ZMAX_APPLICAT(10), ZBACK_APPLI
     *CAT,ZFRONT_APPLICAT, XMINT_APPLICAT(10,2), YMINT_APPLICAT(10,2), X
     *MAXT_APPLICAT(10,2), YMAXT_APPLICAT(10,2), ZMINT_APPLICAT(10,2), Z
     *MAXT_APPLICAT(10,2), AIRGAPMIN_APPLICAT,ABSX_APPLICAT,ABSY_APPLICA
     *T
      CHARACTER*1 TITLE_APPLICAT(60)
      COMMON/GEOM/ NREG
      INTEGER NREG
      COMMON/IO_INFO/TITLE,IORSTRT,IINSRC,IOUTLIST,IOUTPLOT, IOUTGPH,IOU
     *TGEOM,IOUTRN,IOUTFLU,IXXIN,JXXIN,DATCOUNT, DNTIME,TIMEN,DATEN
      CHARACTER*80 TITLE
      CHARACTER TIMEN*8,DATEN*11,DNTIME*24
      INTEGER IOUTLIST,IOUTPLOT,IORSTRT,IOUTGPH,IOUTGEOM,IOUTRN, IINSRC,
     *IOUTFLU(3),IXXIN,JXXIN,DATCOUNT
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      INTEGER ICOLOUR,  IRA,  J
      real*8 XMAXA,  XMINA,  YMAXA,  YMINA,  VOLAIR_APPLICAT,  VOLSCRAPE
     *R_APPLICAT
      IRA = IRSTART_APPLICAT-1
      VOLAIR_APPLICAT = (ZBACK_APPLICAT-ZFRONT_APPLICAT)*4*RMAX_CM2(ICM_
     *APPLICAT)
      DO 19131 IR_APPLICAT=1,N_APPLICAT
          IRA = IRA+1
          IF ((RMAX_CM(ICM_APPLICAT).GT.XMAX_APPLICAT(IR_APPLICAT)).AND.
     *     (RMAX_CM(ICM_APPLICAT).GT.YMAX_APPLICAT(IR_APPLICAT))) THEN
              VOLSCRAPER_APPLICAT = (ZMAX_APPLICAT(IR_APPLICAT)- ZMIN_AP
     *        PLICAT(IR_APPLICAT))* (4*XMAX_APPLICAT(IR_APPLICAT)*YMAX_A
     *        PPLICAT(IR_APPLICAT)- 4*XMIN_APPLICAT(IR_APPLICAT)*YMIN_AP
     *        PLICAT(IR_APPLICAT))
          ELSE IF((RMAX_CM(ICM_APPLICAT).LE.XMAX_APPLICAT(IR_APPLICAT)).
     *    AND. (RMAX_CM(ICM_APPLICAT).LE.YMAX_APPLICAT(IR_APPLICAT))) TH
     *    EN
              VOLSCRAPER_APPLICAT = (ZMAX_APPLICAT(IR_APPLICAT)- ZMIN_AP
     *        PLICAT(IR_APPLICAT))* (4*RMAX_CM2(ICM_APPLICAT)- 4*XMIN_AP
     *        PLICAT(IR_APPLICAT)*YMIN_APPLICAT(IR_APPLICAT))
          ELSE IF((RMAX_CM(ICM_APPLICAT).GT.XMAX_APPLICAT(IR_APPLICAT)).
     *    AND. (RMAX_CM(ICM_APPLICAT).LT.YMAX_APPLICAT(IR_APPLICAT))) TH
     *    EN
              VOLSCRAPER_APPLICAT = (ZMAX_APPLICAT(IR_APPLICAT)- ZMIN_AP
     *        PLICAT(IR_APPLICAT))* (4*XMAX_APPLICAT(IR_APPLICAT)*RMAX_C
     *        M(IR_APPLICAT)- 4*XMIN_APPLICAT(IR_APPLICAT)*YMIN_APPLICAT
     *        (IR_APPLICAT))
          ELSE
              VOLSCRAPER_APPLICAT = (ZMAX_APPLICAT(IR_APPLICAT)- ZMIN_AP
     *        PLICAT(IR_APPLICAT))* (4*RMAX_CM(IR_APPLICAT)*YMAX_APPLICA
     *        T(IR_APPLICAT)- 4*XMIN_APPLICAT(IR_APPLICAT)*YMIN_APPLICAT
     *        (IR_APPLICAT))
          END IF
          VOLAIR_APPLICAT = VOLAIR_APPLICAT-VOLSCRAPER_APPLICAT
          IF ((DOSE_ZONE(IRA).NE.0)) THEN
              ID=DOSE_ZONE(IRA)
              AMASS(ID)=AMASS(ID)+RHOR(IRA)*VOLSCRAPER_APPLICAT
          END IF
19131 CONTINUE
19132 CONTINUE
      IRA = IRA+1
      IF ((DOSE_ZONE(IRA).NE.0)) THEN
          ID=DOSE_ZONE(IRA)
          AMASS(ID)=AMASS(ID)+RHOR(IRA)*VOLAIR_APPLICAT
      END IF
      WRITE(IOUTLIST,110) ICM_APPLICAT,TITLE_APPLICAT
      WRITE(IOUTLIST,120) Z_min_CM(ICM_APPLICAT),RMAX_CM(ICM_APPLICAT),
     *Z_min_CM(ICM_APPLICAT+1)
      WRITE(IOUTLIST,122)
      DO 19141 IR_APPLICAT=1,N_APPLICAT
          IF ((IR_APPLICAT.EQ.1)) THEN
              WRITE(IOUTLIST,126)'airgap',Z_min_CM(ICM_APPLICAT), ZMIN_A
     *        PPLICAT(1)-Z_min_CM(ICM_APPLICAT), 'NA','NA','NA','NA'
          ELSE
              WRITE(IOUTLIST,126)'airgap',ZMAX_APPLICAT(IR_APPLICAT-1),
     *        ZMIN_APPLICAT(IR_APPLICAT)- ZMAX_APPLICAT(IR_APPLICAT-1),
     *        'NA','NA','NA','NA'
          END IF
          WRITE(IOUTLIST,123) IR_APPLICAT,ZMIN_APPLICAT(IR_APPLICAT), ZM
     *    AX_APPLICAT(IR_APPLICAT)-ZMIN_APPLICAT(IR_APPLICAT), XMIN_APPL
     *    ICAT(IR_APPLICAT), YMIN_APPLICAT(IR_APPLICAT), XMAX_APPLICAT(I
     *    R_APPLICAT)-XMIN_APPLICAT(IR_APPLICAT), YMAX_APPLICAT(IR_APPLI
     *    CAT)-YMIN_APPLICAT(IR_APPLICAT)
          IF ((IR_APPLICAT.EQ.N_APPLICAT)) THEN
              WRITE(IOUTLIST,126)'airgap',ZMAX_APPLICAT(N_APPLICAT), Z_m
     *        in_CM(ICM_APPLICAT+1)- ZMAX_APPLICAT(N_APPLICAT),'NA','NA'
     *        ,'NA','NA'
          END IF
19141 CONTINUE
19142 CONTINUE
123   FORMAT(T5,I6,6F11.4)
      WRITE(IOUTLIST,124)
      IF ((Z_min_CM(ICM_APPLICAT + 1) .GT. ZMAX_APPLICAT(N_APPLICAT)+AIR
     *GAPMIN_APPLICAT)) THEN
          WRITE(IOUTLIST,125)
      END IF
      WRITE(IOUTLIST,130)
      IRA = IRSTART_APPLICAT-1
      DO 19151 IR_APPLICAT=1,N_APPLICAT+1
          IRA = IRA+1
          IF ((IR_APPLICAT.LE.N_APPLICAT)) THEN
              IF ((MED(IRA).EQ.0)) THEN
                  WRITE(IOUTLIST,140) IR_APPLICAT,IR_APPLICAT,'scraper',
     *             ECUT(IRA),PCUT(IRA), ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE
     *            (IRA),IREGION_TO_BIT(IRA), 'V','a','c','u','u','m'
              ELSE
                  WRITE(IOUTLIST,140) IR_APPLICAT,IR_APPLICAT,'scraper',
     *             ECUT(IRA),PCUT(IRA),ECUTRR(IRA),ESAVE(IRA), DOSE_ZONE
     *            (IRA),IREGION_TO_BIT(IRA), (MEDIA(J,MED(IRA)),J=1,9)
              END IF
          ELSE IF((IR_APPLICAT.EQ.N_APPLICAT+1)) THEN
              IF ((MED(IRA).EQ.0)) THEN
                  WRITE(IOUTLIST,141) IR_APPLICAT,'NA','surrounding', EC
     *            UT(IRA),PCUT(IRA), ECUTRR(IRA),ESAVE(IRA),DOSE_ZONE(IR
     *            A),IREGION_TO_BIT(IRA), 'V','a','c','u','u','m'
              ELSE
                  WRITE(IOUTLIST,141) IR_APPLICAT,'NA','surrounding', EC
     *            UT(IRA),PCUT(IRA),ECUTRR(IRA),ESAVE(IRA), DOSE_ZONE(IR
     *            A),IREGION_TO_BIT(IRA), (MEDIA(J,MED(IRA)),J=1,9)
              END IF
              WRITE(IOUTLIST,142)'air'
          END IF
19151 CONTINUE
19152 CONTINUE
110   FORMAT(///1x,79('-')/'  Component module',I3, ' is a set of square
     * scrapers (APPLICAT) '/ 1x,79('-') //T5,'Title: ',68A1)
120   FORMAT(/T2,'APPLICAT geometry parameters:', /T2,'-----------------
     *---------', /T2,'Z of front face of CM = ',F15.5,' cm', /T2,'Half-
     *width of outer boundary of CM = ',F15.5,' cm', /T2,'Z of back face
     * of CM = ',F15.5,' cm')
122   FORMAT( /T5,'scraper   Z of     bar/gap  x half-width  y half-widt
     *h  x bar   y bar', /T5,'number  front face  thick     opening  ope
     *ning     width   width', /T5,'         (cm)       (cm)(cm)        
     * (cm)        (cm)     (cm) ')
126   FORMAT(T5,A6,2F11.4,4A11)
124   FORMAT(/T2, 'Note gap between the last scraper and the back of the
     * CM.')
125   FORMAT(/T2, 'This gap was not set to the default value of airgapmi
     *n but'/T2, 'was set to a user-defined value > airgapmin.')
130   FORMAT(/T2,'APPLICAT region parameters:', /T2,'-------------------
     *-----', /T2,'local scraper  location  electron   photon', '  range
     *-rejection   dose  bit  medium' /T2,'region   #                cut
     *off    cutoff', '   level     max    zone  set' /T2,'             
     *(MeV)    (MeV)    (MeV)    (MeV)')
140   FORMAT(T2,I3,I6,3X,A11,F8.3,F9.3,F9.3,F9.3,I5,I5,2X,9A1)
141   FORMAT(T2,I3,3X,A3,3X,A11,F8.3,F9.3,F9.3,F9.3,I5,I5,2X,9A1)
142   FORMAT(T14,A11)
      IF ((IWATCH .EQ. 4 .OR. IZLAST .EQ. 2)) THEN
          ICOLOUR = MOD(ICM,4)+1
          DO 19161 IR_APPLICAT=1,N_APPLICAT
              XMINA = XMIN_APPLICAT(IR_APPLICAT)
              YMINA = YMIN_APPLICAT(IR_APPLICAT)
              XMAXA = MIN(XMAX_APPLICAT(IR_APPLICAT), MAX(XMINA,RMAX_CM(
     *        ICM_APPLICAT)))
              YMAXA = MIN(YMAX_APPLICAT(IR_APPLICAT), MAX(YMINA,RMAX_CM(
     *        ICM_APPLICAT)))
              WRITE(IOUTGEOM,200) ICOLOUR,'COLX',XMAXA,XMINA,XMINA,XMAXA
     *        ,YMAXA, ZMIN_APPLICAT(IR_APPLICAT),ZMAX_APPLICAT(IR_APPLIC
     *        AT)
              WRITE(IOUTGEOM,200) ICOLOUR,'COLX',-XMAXA,-XMINA,-XMINA,-X
     *        MAXA,YMAXA, ZMIN_APPLICAT(IR_APPLICAT),ZMAX_APPLICAT(IR_AP
     *        PLICAT)
              WRITE(IOUTGEOM,200) ICOLOUR,'COLY',YMAXA,YMINA,YMINA,YMAXA
     *        ,XMINA, ZMIN_APPLICAT(IR_APPLICAT),ZMAX_APPLICAT(IR_APPLIC
     *        AT)
              WRITE(IOUTGEOM,200) ICOLOUR,'COLY',-YMAXA,-YMINA,-YMINA,-Y
     *        MAXA,XMINA, ZMIN_APPLICAT(IR_APPLICAT),ZMAX_APPLICAT(IR_AP
     *        PLICAT)
19161     CONTINUE
19162     CONTINUE
      END IF
200   FORMAT(' ',I1,A4,10(F7.2,','))
      RETURN
      END
      SUBROUTINE HOWNEAR_APPLICAT(DIST)
      implicit none
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/CM_APPLICAT/ ICM_APPLICAT,IRSTART_APPLICAT,IREND_APPLICAT,N
     *_APPLICAT, IR_APPLICAT, TITLE_APPLICAT,XMIN_APPLICAT,YMIN_APPLICAT
     *,XMAX_APPLICAT, YMAX_APPLICAT, ZMIN_APPLICAT,ZMAX_APPLICAT,ZBACK_A
     *PPLICAT,ZFRONT_APPLICAT, XMINT_APPLICAT,YMINT_APPLICAT,XMAXT_APPLI
     *CAT,YMAXT_APPLICAT, ZMINT_APPLICAT,ZMAXT_APPLICAT, AIRGAPMIN_APPLI
     *CAT,ABSX_APPLICAT,ABSY_APPLICAT
      INTEGER ICM_APPLICAT,IRSTART_APPLICAT,IREND_APPLICAT,N_APPLICAT, I
     *R_APPLICAT
      real*8 XMIN_APPLICAT(10), YMIN_APPLICAT(10), XMAX_APPLICAT(10), YM
     *AX_APPLICAT(10), ZMIN_APPLICAT(10), ZMAX_APPLICAT(10), ZBACK_APPLI
     *CAT,ZFRONT_APPLICAT, XMINT_APPLICAT(10,2), YMINT_APPLICAT(10,2), X
     *MAXT_APPLICAT(10,2), YMAXT_APPLICAT(10,2), ZMINT_APPLICAT(10,2), Z
     *MAXT_APPLICAT(10,2), AIRGAPMIN_APPLICAT,ABSX_APPLICAT,ABSY_APPLICA
     *T
      CHARACTER*1 TITLE_APPLICAT(60)
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      real*8 DIST
      IR_APPLICAT = IR(NP)-IRSTART_APPLICAT+1
      IF ((IR_APPLICAT.EQ.N_APPLICAT+1)) THEN
          DIST = 0.0
      ELSE
          DIST = MIN(ZMAX_APPLICAT(IR_APPLICAT)-Z(NP), Z(NP)-ZMIN_APPLIC
     *    AT(IR_APPLICAT), XMAX_APPLICAT(IR_APPLICAT)-ABS(X(NP)), YMAX_A
     *    PPLICAT(IR_APPLICAT)-ABS(Y(NP)))
          IF (ABS(X(NP)).GT.XMINT_APPLICAT(IR_APPLICAT,1)) THEN
              DIST = MIN(DIST,ABS(X(NP))-XMIN_APPLICAT(IR_APPLICAT))
          END IF
          IF (ABS(Y(NP)).GT.YMINT_APPLICAT(IR_APPLICAT,1)) THEN
              DIST = MIN(DIST,ABS(Y(NP))-YMIN_APPLICAT(IR_APPLICAT))
          END IF
      END IF
      RETURN
      END
      subroutine egs_init
      implicit none
      common/my_times/ t_elapsed, t_cpu, t_first
      real*8 t_elapsed, t_cpu
      integer t_first(8)
      real egs_tot_time,egs_etime
      real*8 dum
      call egs_set_defaults
      call egs_check_arguments
      call egs_init1
      return
      end
      subroutine egs_init1
      implicit none
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      common/my_times/ t_elapsed, t_cpu, t_first
      real*8 t_elapsed, t_cpu
      integer t_first(8)
      real egs_tot_time,egs_etime
      integer l, lnblnk1, l1, l2
      integer i
      character arg*256,tmp_string*512, tmp1_string*512, ucode_dir*512,
     *line*80, line1*80,dattim*24
      logical have_input,egs_isdir,egs_strip_extension,ex, on_egs_home,i
     *s_opened
      integer*4 mypid
      integer getpid
      integer istat, egs_system, u, pos1, pos2,egs_get_unit,itmp
      real*8 dum
      t_elapsed = 0
      t_cpu = egs_etime()
      dum = egs_tot_time(1)
      call egs_date_and_time(t_first)
      DO 19171 i=1,len(line)
        line(i:i) = '='
19171 CONTINUE
19172 CONTINUE
      DO 19181 i=1,len(line1)
        line1(i:i) = '.'
19181 CONTINUE
19182 CONTINUE
      IF ((.NOT.is_pegsless)) THEN
        on_egs_home = .false.
        inquire(file=pegs_file,exist=ex)
        IF (( ex )) THEN
          kmpi=egs_get_unit(kmpi)
          IF ((kmpi.LT.0)) THEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,*) 'failed to get a free Fortran I/O unit for pe
     *gs file'
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          open(kmpi,file=pegs_file,status='old',err=19190)
          goto 19200
        END IF
        arg = pegs_file(:lnblnk1(pegs_file))
        ex = egs_strip_extension(arg,'.pegs4dat')
        l = lnblnk1(egs_home)
        l1 = lnblnk1('pegs4data') + 2*lnblnk1('/')
        l2 = lnblnk1(arg) + lnblnk1('.pegs4dat')
        IF (( l + l1 + l2 .GT. 256 )) THEN
          write(i_log,'(/a)') '***************** Warning: '
          write(i_log,*) 'pegs4 data file name (including absolute path)
     *'
          write(i_log,'(a,i4,a)') 'is too long (',l+l1+l2,') characters'
        ELSE
          pegs_file = egs_home(:lnblnk1(egs_home)) // 'pegs4' // '/' //
     *    'data' // '/' // arg(:lnblnk1(arg)) // '.pegs4dat'
          inquire(file=pegs_file,exist=ex)
          IF (( ex )) THEN
            kmpi=egs_get_unit(kmpi)
            IF ((kmpi.LT.0)) THEN
              write(i_log,'(/a)') '***************** Error: '
              write(i_log,*) 'failed to get a free Fortran I/O unit for
     *pegs file'
              write(i_log,'(/a)') '***************** Quiting now.'
              call exit(1)
            END IF
            open(kmpi,file=pegs_file,status='old',err=19190)
            on_egs_home = .true.
            goto 19200
          END IF
        END IF
        l = lnblnk1(hen_house)
        IF (( l + l1 + l2 .GT. 256 )) THEN
          write(i_log,'(/a)') '***************** Warning: '
          write(i_log,*) 'pegs4 data file name (including absolute path)
     *'
          write(i_log,'(a,i4,a)') 'is too long (',l+l1+l2,') characters'
        ELSE
          pegs_file = hen_house(:lnblnk1(hen_house)) // 'pegs4' // '/' /
     *    / 'data' // '/' // arg(:lnblnk1(arg)) // '.pegs4dat'
          inquire(file=pegs_file,exist=ex)
          IF (( ex )) THEN
            kmpi=egs_get_unit(kmpi)
            IF ((kmpi.LT.0)) THEN
              write(i_log,'(/a)') '***************** Error: '
              write(i_log,*) 'failed to get a free Fortran I/O unit for
     *pegs file'
              write(i_log,'(/a)') '***************** Quiting now.'
              call exit(1)
            END IF
            open(kmpi,file=pegs_file,status='old',err=19190)
            goto 19200
          END IF
        END IF
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'could not find pegs4 file named ',arg(:lnblnk1(a
     *  rg))
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
19200 CONTINUE
      DO 19211 i=1,len(tmp_string)
        tmp_string(i:i) = ' '
19211 CONTINUE
19212 CONTINUE
      tmp_string = hen_house(:lnblnk1(hen_house)) // 'data' // '/'
      i_nist_data=76
      i_incoh=78
      i_photo_relax=77
      i_photo_cs=79
      i_mscat=11
      DO 19221 i=1,len(tmp1_string)
        tmp1_string(i:i) = ' '
19221 CONTINUE
19222 CONTINUE
      tmp1_string = tmp_string(:lnblnk1(tmp_string)) // 'photo_cs.data'
      inquire(file=tmp1_string,exist=ex,opened=is_opened,number=itmp)
      IF (( .NOT.ex )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'EGSnrc data file ','photo_cs.data',' does not ex
     *ist'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF (( .NOT.is_opened )) THEN
        i_photo_cs=egs_get_unit(i_photo_cs)
        IF ((i_photo_cs.LT.0)) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'failed to get a free Fortran I/O unit for data
     * file ', tmp1_string(:lnblnk1(tmp1_string))
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        open(i_photo_cs,file=tmp1_string,status='old',err=19230)
      ELSE
        i_photo_cs = itmp
      END IF
      DO 19241 i=1,len(tmp1_string)
        tmp1_string(i:i) = ' '
19241 CONTINUE
19242 CONTINUE
      tmp1_string = tmp_string(:lnblnk1(tmp_string)) // 'msnew.data'
      inquire(file=tmp1_string,exist=ex,opened=is_opened,number=itmp)
      IF (( .NOT.ex )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'EGSnrc data file ','msnew.data',' does not exist
     *'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF (( .NOT.is_opened )) THEN
        i_mscat=egs_get_unit(i_mscat)
        IF ((i_mscat.LT.0)) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'failed to get a free Fortran I/O unit for data
     * file ', tmp1_string(:lnblnk1(tmp1_string))
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        open(i_mscat,file=tmp1_string,status='old',err=19230)
      ELSE
        i_mscat = itmp
      END IF
      DO 19251 i=1,len(tmp1_string)
        tmp1_string(i:i) = ' '
19251 CONTINUE
19252 CONTINUE
      tmp1_string = tmp_string(:lnblnk1(tmp_string)) // 'incoh.data'
      inquire(file=tmp1_string,exist=ex,opened=is_opened,number=itmp)
      IF (( .NOT.ex )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'EGSnrc data file ','incoh.data',' does not exist
     *'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF (( .NOT.is_opened )) THEN
        i_incoh=egs_get_unit(i_incoh)
        IF ((i_incoh.LT.0)) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'failed to get a free Fortran I/O unit for data
     * file ', tmp1_string(:lnblnk1(tmp1_string))
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        open(i_incoh,file=tmp1_string,status='old',err=19230)
      ELSE
        i_incoh = itmp
      END IF
      DO 19261 i=1,len(tmp1_string)
        tmp1_string(i:i) = ' '
19261 CONTINUE
19262 CONTINUE
      tmp1_string = tmp_string(:lnblnk1(tmp_string)) // 'photo_relax.dat
     *a'
      inquire(file=tmp1_string,exist=ex,opened=is_opened,number=itmp)
      IF (( .NOT.ex )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'EGSnrc data file ','photo_relax.data',' does not
     * exist'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF (( .NOT.is_opened )) THEN
        i_photo_relax=egs_get_unit(i_photo_relax)
        IF ((i_photo_relax.LT.0)) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'failed to get a free Fortran I/O unit for data
     * file ', tmp1_string(:lnblnk1(tmp1_string))
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        open(i_photo_relax,file=tmp1_string,status='old',err=19230)
      ELSE
        i_photo_relax = itmp
      END IF
      DO 19271 i=1,len(ucode_dir)
        ucode_dir(i:i) = ' '
19271 CONTINUE
19272 CONTINUE
      ucode_dir = egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(use
     *r_code)) // '/'
      have_input = .false.
      i_input=5
      IF (( lnblnk1(input_file) .GT. 0 )) THEN
        have_input = .true.
        l = lnblnk1(egs_home)
        l1 = lnblnk1(user_code)+1
        l2 = lnblnk1(input_file) + lnblnk1('.egsinp')
        IF (( l + l1 + l2 .GT. 1024 )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'input file name (including path) is too long '
     *    ,l+l1+l2
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        ex = egs_strip_extension(input_file,'.egsinp')
        tmp_string = ucode_dir(:lnblnk1(ucode_dir)) // input_file(:lnbln
     *  k1(input_file)) // '.egsinp'
        inquire(file=tmp_string,exist=ex)
        IF (( .NOT.ex )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'Input file ',tmp_string(:lnblnk1(tmp_string)),
     *    ' does not exist.'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        open(i_input,file=tmp_string,status='old',err=19280)
      END IF
      DO 19291 i=1,len(work_dir)
        work_dir(i:i) = ' '
19291 CONTINUE
19292 CONTINUE
      work_dir = 'egsrun_'
      mypid = getpid()
      call egs_itostring(work_dir,mypid,.false.)
      call egs_get_hostnm(host_name)
      IF((lnblnk1(host_name) .LT. 1))host_name = 'unknown'
      IF (( have_input )) THEN
        work_dir = work_dir(:lnblnk1(work_dir)) // '_' // input_file(:ln
     *  blnk1(input_file)) // '_' // host_name(:lnblnk1(host_name)) // '
     */'
      ELSE
        work_dir = work_dir(:lnblnk1(work_dir)) // '_noinput_' // host_n
     *  ame(:lnblnk1(host_name)) // '/'
      END IF
      DO 19301 i=1,len(tmp_string)
        tmp_string(i:i) = ' '
19301 CONTINUE
19302 CONTINUE
      tmp_string = ucode_dir(:lnblnk1(ucode_dir)) // work_dir(:lnblnk1(w
     *ork_dir))
      DO 19311 i=1,lnblnk1(tmp_string)
        IF (( tmp_string(i:i) .EQ. '/' )) THEN
          tmp_string(i:i) = '/'
        END IF
19311 CONTINUE
19312 CONTINUE
      ex = egs_isdir(tmp_string)
      IF (( ex )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'a directory named ',tmp_string(:lnblnk1(tmp_stri
     *  ng)),' already exists?'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      tmp1_string = 'mkdir ' // tmp_string(:lnblnk1(tmp_string))
      l = lnblnk1(tmp1_string)
      tmp1_string(l+1:l+1) = char(0)
      istat = egs_system(tmp1_string)
      IF (( istat .NE. 0 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'failed to create working directory ',tmp1_string
     *  (:lnblnk1(tmp1_string))
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      call egs_open_units(.true.)
      write(i_log,'(a)') line
      write(i_log,'(a,a,t55,a,$)') 'EGSnrc version 4 for ','linux64',' '
      call egs_get_fdate(dattim)
      write(i_log,'(a,/,a)') dattim,line
      pos1 = lnblnk1('output file(s)')
      pos2 = 80 - lnblnk1('linux64')
      pos2 = min(pos2,80-lnblnk1(user_code))
      DO 19321 i=1,len(tmp_string)
        tmp_string(i:i) = ' '
19321 CONTINUE
19322 CONTINUE
      tmp_string = pegs_file
      call egs_strip_path(tmp_string)
      ex = egs_strip_extension(tmp_string,'.pegs4dat')
      IF (( on_egs_home )) THEN
        tmp_string = tmp_string(:lnblnk1(tmp_string)) // ' on EGS_HOME'
      ELSE
        tmp_string = tmp_string(:lnblnk1(tmp_string)) // ' on HEN_HOUSE'
      END IF
      IF (( lnblnk1(tmp_string) .GT. lnblnk1(pegs_file) )) THEN
        DO 19331 i=1,len(tmp_string)
          tmp_string(i:i) = ' '
19331   CONTINUE
19332   CONTINUE
        tmp_string = pegs_file
      END IF
      pos2 = min(pos2,80-lnblnk1(tmp_string))
      pos2 = min(pos2,80-lnblnk1(host_name))
      IF((have_input))pos2 = min(pos2,80-lnblnk1(input_file))
      pos2 = min(pos2,80-lnblnk1(output_file))
      IF((pos2 .LT. pos1+2))pos2 = pos1 + 2
      write(i_log,'(a,$)') 'configuration'
      l = pos2 - lnblnk1('configuration')
      write(i_log,'(a,$)') line1(:l)
      write(i_log,'(a)') 'linux64'
      write(i_log,'(a,$)') 'user code'
      l = pos2 - lnblnk1('user code')
      write(i_log,'(a,$)') line1(:l)
      write(i_log,'(a)') user_code(:lnblnk1(user_code))
      write(i_log,'(a,$)') 'pegs file'
      l = pos2 - lnblnk1('pegs file')
      write(i_log,'(a,$)') line1(:l)
      write(i_log,'(a)') tmp_string(:lnblnk1(tmp_string))
      write(i_log,'(a,$)') 'using host'
      l = pos2 - lnblnk1('using host')
      write(i_log,'(a,$)') line1(:l)
      write(i_log,'(a)') host_name(:lnblnk1(host_name))
      IF (( have_input )) THEN
        write(i_log,'(a,$)') 'input file'
        l = pos2 - lnblnk1('input file')
        write(i_log,'(a,$)') line1(:l)
        write(i_log,'(a)') input_file(:lnblnk1(input_file))
      END IF
      write(i_log,'(a,$)') 'output file(s)'
      l = pos2 - lnblnk1('output file(s)')
      write(i_log,'(a,$)') line1(:l)
      write(i_log,'(a)') output_file(:lnblnk1(output_file))
      IF (( n_parallel .GT. 0 )) THEN
        write(i_log,'(a,$)') 'number of parallel jobs'
        l = pos2 - lnblnk1('number of parallel jobs')
        write(i_log,'(a,$)') line1(:l)
        write(i_log,'(i2)') n_parallel
        write(i_log,'(a,$)') 'job number'
        l = pos2 - lnblnk1('job number')
        write(i_log,'(a,$)') line1(:l)
        write(i_log,'(i2)') i_parallel
      END IF
      write(i_log,'(a)') line
      return
19280 write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) 'failed to open input file ',tmp_string(:lnblnk1(tm
     *p_string))
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
19190 write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) 'failed to open existing pegs file ',pegs_file(:lnb
     *lnk1(pegs_file))
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
19230 write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) 'failed to open EGSnrc data file ',tmp1_string(:lnb
     *lnk1(tmp1_string))
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      return
      end
      subroutine egs_check_arguments
      implicit none
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      character arg*256,tmp_string*512, line1*80
      logical have_arg,egs_isdir,egs_strip_extension,ex, on_egs_home
      integer narg, iargc, i, lnblnk1, l, l2,i_help,egs_get_unit
      narg = iargc()
      IF((narg .LT. 1))return
      have_arg = .false.
      DO 19341 i=1,narg-1
        call getarg(i,arg)
        l = lnblnk1(arg)
        IF (( ( l .EQ. lnblnk1('-H') .AND. arg(:l) .EQ. '-H' ) .OR. ( l
     *  .EQ. lnblnk1('--hen-house') .AND. arg(:l) .EQ. '--hen-house' ) )
     *  ) THEN
          have_arg = .true.
          call getarg(i+1,arg)
          GO TO19342
        END IF
19341 CONTINUE
19342 CONTINUE
      IF (( have_arg )) THEN
        l = lnblnk1(arg)
        DO 19351 i=1,len(hen_house)
          hen_house(i:i) = ' '
19351   CONTINUE
19352   CONTINUE
        IF (( l .GT. 0 )) THEN
          IF (( l .GT. 254 )) THEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,'(a,i5)') ' HEN_HOUSE argument is too long',l
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          hen_house(:l) = arg(:lnblnk1(arg))
          IF((hen_house(l:l) .NE. '/'))hen_house(l+1:l+1) = '/'
        ELSE
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(a)') ' empty argument after -H'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        DO 19361 i=1,lnblnk1(hen_house)
          IF (( hen_house(i:i) .EQ. '/' )) THEN
            hen_house(i:i) = '/'
          END IF
19361   CONTINUE
19362   CONTINUE
      END IF
      IF (( .NOT.egs_isdir(hen_house) )) THEN
        write(i_log,'(/a)') '***************** Warning: '
        write(i_log,'(a,a)') ' HEN_HOUSE directory ',hen_house(:lnblnk1(
     *  hen_house))
        write(i_log,'(a)') 'does not exist. Hope you know what you are d
     *oing.'
      END IF
      have_arg = .false.
      DO 19371 i=1,narg
        call getarg(i,arg)
        l = lnblnk1(arg)
        IF (( ( l .EQ. lnblnk1('-h') .AND. arg(:l) .EQ. '-h' ) .OR. ( l
     *  .EQ. lnblnk1('--help') .AND. arg(:l) .EQ. '--help' ) )) THEN
          have_arg = .true.
          GO TO19372
        END IF
19371 CONTINUE
19372 CONTINUE
      IF (( have_arg )) THEN
        call getarg(0,arg)
        call egs_strip_path(arg)
        write(i_log,'(//,a,a,a,//)') 'Usage: ',arg(:lnblnk1(arg)),' [arg
     *s] '
        tmp_string = hen_house(:lnblnk1(hen_house)) // 'pieces/help_mess
     *age'
        i_help=98
        i_help=egs_get_unit(i_help)
        IF ((i_help.LT.0)) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'failed to get a free Fortran I/O unit for help
     * file'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        open(i_help,file=tmp_string,status='old',err=19380)
19391   CONTINUE
          read(i_help,'(a)',err=19400,end=19400) line1
          write(i_log,'(a)') line1
        GO TO 19391
19392   CONTINUE
19400   CONTINUE
        call exit(0)
19380   CONTINUE
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'Did not find the help_message file!'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      have_arg = .false.
      DO 19411 i=1,narg
        call getarg(i,arg)
        l = lnblnk1(arg)
        IF (( ( l .EQ. lnblnk1('-b') .AND. arg(:l) .EQ. '-b' ) .OR. ( l
     *  .EQ. lnblnk1('--batch') .AND. arg(:l) .EQ. '--batch' ) )) THEN
          have_arg = .true.
          GO TO19412
        END IF
19411 CONTINUE
19412 CONTINUE
      IF((have_arg))is_batch = .true.
      have_arg = .false.
      DO 19421 i=1,narg-1
        call getarg(i,arg)
        l = lnblnk1(arg)
        IF (( ( l .EQ. lnblnk1('-P') .AND. arg(:l) .EQ. '-P' ) .OR. ( l
     *  .EQ. lnblnk1('--parallel') .AND. arg(:l) .EQ. '--parallel' ) ))
     *  THEN
          have_arg = .true.
          call getarg(i+1,arg)
          GO TO19422
        END IF
19421 CONTINUE
19422 CONTINUE
      IF (( have_arg )) THEN
        read(arg,*,err=19430) n_parallel
        IF((n_parallel .LT. 0))goto 19430
        goto 19440
19430   CONTINUE
        write(i_log,'(/a)') '***************** Warning: '
        write(i_log,*) ' Wrong/missing parallel job number argument, -P
     *option ignored'
        n_parallel = 0
19440   CONTINUE
      END IF
      have_arg = .false.
      DO 19451 i=1,narg-1
        call getarg(i,arg)
        l = lnblnk1(arg)
        IF (( ( l .EQ. lnblnk1('-j') .AND. arg(:l) .EQ. '-j' ) .OR. ( l
     *  .EQ. lnblnk1('--job') .AND. arg(:l) .EQ. '--job' ) )) THEN
          have_arg = .true.
          call getarg(i+1,arg)
          GO TO19452
        END IF
19451 CONTINUE
19452 CONTINUE
      IF (( have_arg )) THEN
        read(arg,*,err=19460) i_parallel
        IF((i_parallel .LT. 0))goto 19460
        goto 19470
19460   CONTINUE
        write(i_log,'(/a)') '***************** Warning: '
        write(i_log,*) ' Wrong/missing job argument, -j option ognored'
        i_parallel = 0
19470   CONTINUE
      END IF
      have_arg = .false.
      DO 19481 i=1,narg-1
        call getarg(i,arg)
        l = lnblnk1(arg)
        IF (( ( l .EQ. lnblnk1('-f') .AND. arg(:l) .EQ. '-f' ) .OR. ( l
     *  .EQ. lnblnk1('--first-job') .AND. arg(:l) .EQ. '--first-job' ) )
     *  ) THEN
          have_arg = .true.
          call getarg(i+1,arg)
          GO TO19482
        END IF
19481 CONTINUE
19482 CONTINUE
      IF (( have_arg )) THEN
        read(arg,*,err=19490) first_parallel
        IF((first_parallel .LT. 1))goto 19490
        goto 19500
19490   CONTINUE
        write(i_log,'(/a)') '***************** Warning: '
        write(i_log,*) ' Wrong/missing first job argument, -f option ogn
     *ored'
        first_parallel = 1
19500   CONTINUE
      END IF
      IF (( n_parallel .GT. 0 .OR. i_parallel .GT. 0 )) THEN
        IF (( n_parallel*i_parallel .EQ. 0 )) THEN
          write(i_log,'(/a)') '***************** Warning: '
          write(i_log,*) 'You need to specify number of jobs AND job num
     *ber ', '=> will not use parallel run '
          n_parallel = 0
          i_parallel = 0
        END IF
        IF (( first_parallel .GT. i_parallel )) THEN
          write(i_log,'(/a)') '***************** Warning: '
          write(i_log,*) 'i_parallel (',i_parallel, ') can not be smalle
     *r than first_parallel (',first_parallel,')'
          first_parallel = i_parallel
        END IF
      END IF
      have_arg = .false.
      DO 19511 i=1,narg-1
        call getarg(i,arg)
        l = lnblnk1(arg)
        IF (( ( l .EQ. lnblnk1('-e') .AND. arg(:l) .EQ. '-e' ) .OR. ( l
     *  .EQ. lnblnk1('--egs-home') .AND. arg(:l) .EQ. '--egs-home' ) ))
     *  THEN
          have_arg = .true.
          call getarg(i+1,arg)
          GO TO19512
        END IF
19511 CONTINUE
19512 CONTINUE
      IF (( have_arg )) THEN
        l = lnblnk1(arg)
        DO 19521 i=1,len(egs_home)
          egs_home(i:i) = ' '
19521   CONTINUE
19522   CONTINUE
        IF (( l .EQ. 0 )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(a)') ' empty argument after -e'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        IF (( l .GT. 254 )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(a,i5)') ' EGS_HOME argument is too long ',l
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        egs_home(:l) = arg(:lnblnk1(arg))
        IF((egs_home(l:l) .NE. '/'))egs_home(l+1:l+1) = '/'
        DO 19531 i=1,lnblnk1(egs_home)
          IF (( egs_home(i:i) .EQ. '/' )) THEN
            egs_home(i:i) = '/'
          END IF
19531   CONTINUE
19532   CONTINUE
      END IF
      IF (( .NOT.egs_isdir(egs_home) )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) ' EGS_HOME directory ',egs_home(:lnblnk1(egs_home
     *  )),' does not exist.'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      on_egs_home = .false.
      is_pegsless=.false.
      have_arg = .false.
      DO 19541 i=1,narg-1
        call getarg(i,arg)
        l = lnblnk1(arg)
        IF (( ( l .EQ. lnblnk1('-p') .AND. arg(:l) .EQ. '-p' ) .OR. ( l
     *  .EQ. lnblnk1('--pegs-file') .AND. arg(:l) .EQ. '--pegs-file' ) )
     *  ) THEN
          have_arg = .true.
          call getarg(i+1,arg)
          GO TO19542
        END IF
19541 CONTINUE
19542 CONTINUE
      IF (( .NOT.have_arg )) THEN
        write(i_log,'(/a)') '***************** Warning: '
        write(i_log,*) 'No pegs4 file name supplied.  Will assume you ar
     *e running    in pegs-less mode with media details specified in inp
     *ut file.'
        is_pegsless=.true.
      ELSE
        pegs_file = arg(:lnblnk1(arg))
      END IF
      call egs_get_usercode(user_code)
      have_arg = .false.
      DO 19551 i=1,narg-1
        call getarg(i,arg)
        l = lnblnk1(arg)
        IF (( ( l .EQ. lnblnk1('-i') .AND. arg(:l) .EQ. '-i' ) .OR. ( l
     *  .EQ. lnblnk1('--input') .AND. arg(:l) .EQ. '--input' ) )) THEN
          have_arg = .true.
          call getarg(i+1,arg)
          GO TO19552
        END IF
19551 CONTINUE
19552 CONTINUE
      IF (( have_arg )) THEN
        ex = egs_strip_extension(arg,'.egsinp')
        l2 = lnblnk1(arg) + lnblnk1('.egsinp')
        IF (( l2 .GT. 256 )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'input file name is too long ',l2
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        input_file = arg(:lnblnk1(arg))
      END IF
      have_arg = .false.
      DO 19561 i=1,narg-1
        call getarg(i,arg)
        l = lnblnk1(arg)
        IF (( ( l .EQ. lnblnk1('-o') .AND. arg(:l) .EQ. '-o' ) .OR. ( l
     *  .EQ. lnblnk1('--output') .AND. arg(:l) .EQ. '--output' ) )) THEN
          have_arg = .true.
          call getarg(i+1,arg)
          GO TO19562
        END IF
19561 CONTINUE
19562 CONTINUE
      IF (( have_arg )) THEN
        l = lnblnk1(arg)
        IF (( l .GT. 256 )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'output file name is too long ',l
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        output_file(:l) = arg(:lnblnk1(arg))
      ELSE
        IF (( lnblnk1(input_file) .GT. 0 )) THEN
          output_file(:lnblnk1(input_file)) = input_file(:lnblnk1(input_
     *    file))
        ELSE
          output_file = 'test'
        END IF
      END IF
      return
      end
      subroutine egs_open_units(flag)
      implicit none
      logical flag
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      character tmp_string*1024, tmp1_string*1024, tmp2_string*1024, uco
     *de_dir*1024, input_line*100, arg*20
      integer i,lnblnk1,u,l,istart,egs_get_unit,i_iofile
      logical ex,is_open
      DO 19571 i=1,len(tmp_string)
        tmp_string(i:i) = ' '
19571 CONTINUE
19572 CONTINUE
      DO 19581 i=1,len(ucode_dir)
        ucode_dir(i:i) = ' '
19581 CONTINUE
19582 CONTINUE
      ucode_dir = egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(use
     *r_code)) // '/'
      IF (( flag )) THEN
        tmp_string = ucode_dir(:lnblnk1(ucode_dir)) // work_dir(:lnblnk1
     *  (work_dir))
      ELSE
        tmp_string = ucode_dir(:lnblnk1(ucode_dir))
      END IF
      tmp_string = tmp_string(:lnblnk1(tmp_string)) // output_file(:lnbl
     *nk1(output_file))
      IF (( i_parallel .GT. 0 )) THEN
        tmp_string = tmp_string(:lnblnk1(tmp_string)) // '_w'
        call egs_itostring(tmp_string,i_parallel,.false.)
      END IF
      DO 19591 i=1,len(tmp1_string)
        tmp1_string(i:i) = ' '
19591 CONTINUE
19592 CONTINUE
      i_log=6
      IF (( is_batch )) THEN
        tmp1_string = tmp_string(:lnblnk1(tmp_string)) // '.egslog'
        open(i_log,file=tmp1_string,status='unknown',err=19600)
      END IF
      DO 19611 i=1,len(tmp2_string)
        tmp2_string(i:i) = ' '
19611 CONTINUE
19612 CONTINUE
      tmp2_string = ucode_dir(:lnblnk1(ucode_dir)) // user_code(:lnblnk1
     *(user_code)) // '.io'
      inquire(file=tmp2_string,exist=ex)
      n_files = 0
      IF (( ex )) THEN
        i_iofile=99
        i_iofile=egs_get_unit(i_iofile)
        IF ((i_iofile.LT.1)) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'failed to get a free Fortran I/O unit for .io
     *file'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        open(i_iofile,file=tmp2_string,status='old',err=19620)
19631   CONTINUE
          read(i_iofile,'(a)',err=19640,end=19640) input_line
          IF((input_line(1:1) .EQ. '#'))GO TO19631
          read(input_line,*,err=19650,end=19650) u
          istart = 1
          DO 19661 i=lnblnk1(input_line),1,-1
            IF (( input_line(i:i) .EQ. ' ' )) THEN
              istart = i+1
              GO TO19662
            END IF
19661     CONTINUE
19662     CONTINUE
          DO 19671 i=1,len(arg)
            arg(i:i) = ' '
19671     CONTINUE
19672     CONTINUE
          DO 19681 i=istart,lnblnk1(input_line)
            arg(i+1-istart:i+1-istart) = input_line(i:i)
19681     CONTINUE
19682     CONTINUE
          inquire(unit=u,opened=is_open)
          IF (( is_open )) THEN
            write(i_log,'(/a)') '***************** Warning: '
            write(i_log,'(a,i3,a,a,a,/,a,/,a,/)') 'Unit ',u,' which you
     *want to connect to a ', arg(:lnblnk1(arg)),' file ', 'is already i
     *n use. Will assume this code is being used as', 'a shared library
     *source and this file will be opened explicitly.'
          ELSE
            n_files = n_files + 1
            IF (( n_files .GT. 20 )) THEN
              write(i_log,'(/a)') '***************** Error: '
              write(i_log,*) 'Too many units requested in .io.', ' Incre
     *as $mx_units and retry'
              write(i_log,'(/a)') '***************** Quiting now.'
              call exit(1)
            END IF
            file_units(n_files) = u
            DO 19691 i=1,len(file_extensions(n_files))
              file_extensions(n_files)(i:i) = ' '
19691       CONTINUE
19692       CONTINUE
            l = lnblnk1(arg)
            IF (( l .GT. 10 )) THEN
              write(i_log,'(/a)') '***************** Error: '
              write(i_log,*) 'extension ',arg(:lnblnk1(arg)),' is longer
     * than ', 10,' chars. ', 'Increase $max_extension_length and retry
     *'
              write(i_log,'(/a)') '***************** Quiting now.'
              call exit(1)
            END IF
            file_extensions(n_files) = arg(:lnblnk1(arg))
            tmp1_string = tmp_string(:lnblnk1(tmp_string)) // arg(:lnbln
     *      k1(arg))
            open(u,file=tmp1_string,status='unknown')
          END IF
19650     CONTINUE
        GO TO 19631
19632   CONTINUE
19640   close(i_iofile)
      END IF
      return
19600 write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) 'failed to open output file ',tmp1_string(:lnblnk1(
     *tmp1_string))
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
19620 write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) 'failed to open existing .io file',tmp2_string(:lnb
     *lnk1(tmp2_string))
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      return
      end
      subroutine egs_finish
      implicit none
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/my_times/ t_elapsed, t_cpu, t_first
      real*8 t_elapsed, t_cpu
      integer t_first(8)
      real egs_tot_time,egs_etime
      character line*80,base*512,base1*512,tmp_string*512,junk_file*128,
     *fname*512
      character dattim*24
      integer i,l,lnblnk1,istat,egs_system,n_open,unlink,i_junk,egs_get_
     *unit
      logical is_open,egs_isdir
      real*8 t1,t2,tt_cpu
      DO 19701 i=1,len(line)
        line(i:i) = '='
19701 CONTINUE
19702 CONTINUE
      IF (( n_parallel .EQ. 0 .OR. i_parallel .GT. 0 )) THEN
        t_elapsed = egs_tot_time(1)
        tt_cpu = egs_etime() - t_cpu
        t1 = t_elapsed
        t2 = t1/3600
        write(i_log,'(//a,/,a,/)') line,'Finished simulation'
        write(i_log,'(2x,a,t30,f9.1,a,f7.3,a)') 'Elapsed time: ',t1,' s
     *(',t2,' h)'
        t1 = tt_cpu
        t2 = t1/3600
        write(i_log,'(2x,a,t30,f9.1,a,f7.3,a)') 'CPU time:',t1,' s (',t2
     *  ,' h)'
        write(i_log,'(2x,a,t30,f10.3)') 'Ratio:',t_elapsed/tt_cpu
      END IF
      call egs_get_fdate(dattim)
      write(i_log,'(//a,t56,a,/,a)') 'End of run ',dattim,line
      n_open=0
      DO 19711 i=1,len(base)
        base(i:i) = ' '
19711 CONTINUE
19712 CONTINUE
      base = egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(user_cod
     *e))
      DO 19721 i=1,99
        IF (( is_batch .OR. i .NE. i_log )) THEN
          inquire(i,opened=is_open)
          IF (( is_open )) THEN
            inquire(i,name=fname)
            IF ((index(fname(:lnblnk1(fname)),base(:lnblnk1(base))).GT.0
     *      )) THEN
              close(i)
              n_open = n_open+1
            END IF
          END IF
        END IF
19721 CONTINUE
19722 CONTINUE
      IF (( lnblnk1(work_dir) .EQ. 0 )) THEN
        return
      END IF
      DO 19731 i=1,len(base)
        base(i:i) = ' '
19731 CONTINUE
19732 CONTINUE
      base = egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(user_cod
     *e)) // '/' // work_dir(:lnblnk1(work_dir))
      DO 19741 i=1,lnblnk1(base)
        IF (( base(i:i) .EQ. '/' )) THEN
          base(i:i) = '/'
        END IF
19741 CONTINUE
19742 CONTINUE
      IF (( egs_isdir(base) )) THEN
        DO 19751 i=1,len(tmp_string)
          tmp_string(i:i) = ' '
19751   CONTINUE
19752   CONTINUE
        DO 19761 i=1,len(junk_file)
          junk_file(i:i) = ' '
19761   CONTINUE
19762   CONTINUE
        junk_file = work_dir(:lnblnk1(work_dir))
        l = lnblnk1(junk_file)
        junk_file(l:l) = ' '
        junk_file = junk_file(:lnblnk1(junk_file)) // '_junk'
        tmp_string = base(:lnblnk1(base)) // junk_file(:lnblnk1(junk_fil
     *  e))
        i_junk=99
        i_junk=egs_get_unit(i_junk)
        IF ((i_junk.LT.0)) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'failed to get a free Fortran I/O unit for junk
     * file'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        open(i_junk,file=tmp_string,status='unknown')
        write(i_junk,*) 'junk'
        close(i_junk)
        DO 19771 i=1,len(base1)
          base1(i:i) = ' '
19771   CONTINUE
19772   CONTINUE
        base = egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(user_c
     *  ode)) // '/' // work_dir(:lnblnk1(work_dir))
        base1 = egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(user_
     *  code))
        DO 19781 i=1,len(tmp_string)
          tmp_string(i:i) = ' '
19781   CONTINUE
19782   CONTINUE
        tmp_string = 'mv -f ' // base(:lnblnk1(base)) // '*  ' // base1(
     *  :lnblnk1(base1))
        l = lnblnk1(tmp_string)+1
        tmp_string(l:l) = char(0)
        istat = egs_system(tmp_string)
        IF (( istat .NE. 0 )) THEN
          write(i_log,'(/a)') '***************** Warning: '
          write(i_log,*) 'Moving files from working directory failed ?'
          write(i_log,*) '=> will not remove working directory'
        ELSE
          DO 19791 i=1,len(tmp_string)
            tmp_string(i:i) = ' '
19791     CONTINUE
19792     CONTINUE
          tmp_string = 'rm -rf ' // base(:lnblnk1(base))
          l = lnblnk1(tmp_string)+1
          tmp_string(l:l) = char(0)
          istat = egs_system(tmp_string)
          IF (( istat .NE. 0 )) THEN
            write(i_log,'(/a)') '***************** Warning: '
            write(i_log,*) 'Failed to remove working directory ', work_d
     *      ir(:lnblnk1(work_dir))
          END IF
          DO 19801 i=1,len(tmp_string)
            tmp_string(i:i) = ' '
19801     CONTINUE
19802     CONTINUE
          tmp_string = base1(:lnblnk1(base1)) // '/' // junk_file(:lnbln
     *    k1(junk_file))
          l = lnblnk1(tmp_string)+1
          tmp_string(l:l) = char(0)
          istat = unlink(tmp_string)
        END IF
      END IF
      DO 19811 i=1,len(work_dir)
        work_dir(i:i) = ' '
19811 CONTINUE
19812 CONTINUE
      return
      end
      subroutine egs_set_defaults
      implicit none
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      common/compton_data/ iz_array(1538),  be_array(1538),  Jo_array(15
     *38),  erfJo_array(1538),   ne_array(1538),  shn_array(1538),
     *shell_array(200,12), eno_array(200,12), eno_atbin_array(200,12), n
     *_shell(12), radc_flag,  ibcmp(3000)
      integer*4 iz_array,ne_array,shn_array,eno_atbin_array, shell_array
     *,n_shell,radc_flag
      real*8 be_array,Jo_array,erfJo_array,eno_array
      integer*2 ibcmp
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L(3000),IPHTER(3000)
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      COMMON/ELECIN/ esig_e(12),psig_e(12), esige_max, psige_max, range_
     *ep(0:1,500,12), E_array(500,12), etae_ms0(500,12),etae_ms1(500,12)
     *,etap_ms0(500,12),etap_ms1(500,12),q1ce_ms0(500,12),q1ce_ms1(500,1
     *2),q1cp_ms0(500,12),q1cp_ms1(500,12),q2ce_ms0(500,12),q2ce_ms1(500
     *,12),q2cp_ms0(500,12),q2cp_ms1(500,12),blcce0(500,12),blcce1(500,1
     *2), EKE0(12),EKE1(12), XR0(12),TEFF0(12),BLCC(12),XCC(12), ESIG0(5
     *00,12),ESIG1(500,12),PSIG0(500,12),PSIG1(500,12),EDEDX0(500,12),ED
     *EDX1(500,12),PDEDX0(500,12),PDEDX1(500,12),EBR10(500,12),EBR11(500
     *,12),PBR10(500,12),PBR11(500,12),PBR20(500,12),PBR21(500,12),TMXS0
     *(500,12),TMXS1(500,12), expeke1(12), IUNRST(12),EPSTFL(12),IAPRIM(
     *12), sig_ismonotone(0:1,12)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      common/CH_steps/ count_pII_steps,count_all_steps,is_ch_step
      real*8 count_pII_steps,count_all_steps
      logical is_ch_step
      common/ET_control/ smaxir(3000),estepe,ximax,  skindepth_for_bca,t
     *ransport_algorithm, bca_algorithm,exact_bca,spin_effects
      real*8 smaxir,  estepe,  ximax,      skindepth_for_bca
      integer*4 transport_algorithm, bca_algorithm
      logical exact_bca,  spin_effects
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/PHOTIN/ EBINDA(12), GE0(12),GE1(12), GMFP0(2000,12),GMFP1(2
     *000,12),GBR10(2000,12),GBR11(2000,12),GBR20(2000,12),GBR21(2000,12
     *), RCO0(12),RCO1(12), RSCT0(100,12),RSCT1(100,12), COHE0(2000,12),
     *COHE1(2000,12),  PHOTONUC0(2000,12),PHOTONUC1(2000,12), DPMFP, MPG
     *EM(1,12), NGR(12)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIIN/SINC0,SINC1,SIN0(1002),SIN1(1002)
      real*8 SINC0,SINC1,SIN0,SIN1
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/egs_vr/ e_max_rr(3000),  prob_RR,  nbr_split,  i_play_RR,
     *    i_survived_RR,
     *        n_RR_warning,                                        i_do_
     *rr(3000)
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/spin_data/ spin_rej(12,0:1,0: 31,0:15,0:31), espin_min,espi
     *n_max,espml,b2spin_min,b2spin_max, dbeta2,dbeta2i,dlener,dleneri,d
     *qq1,dqq1i, fool_intel_optimizer
      real*4 spin_rej,espin_min,espin_max,espml,b2spin_min,b2spin_max, d
     *beta2,dbeta2i,dlener,dleneri,dqq1,dqq1i
      logical fool_intel_optimizer
      common/eii_data/ eii_xsection_a( 10000),  eii_xsection_b( 10000),
     * eii_cons(12), eii_a(40),  eii_b(40),  eii_L_factor,  eii_z(40),
     *eii_sh(40),  eii_nshells(100),  eii_nsh(12),  eii_first(12,50),  e
     *ii_no(12,50),  eii_flag
      real*8 eii_xsection_a,eii_xsection_b,eii_a,eii_b,eii_cons,eii_L_fa
     *ctor
      integer*4 eii_z,eii_sh,eii_nshells
      integer*4 eii_first,eii_no
      integer*4 eii_elements,eii_flag,eii_nsh
      COMMON/rayleigh_inputs/iray_ff_media(12),iray_ff_file(12)
      character*24 iray_ff_media
      character*128 iray_ff_file
      common/emf_inputs/ExIN,EyIN,EzIN,  EMLMTIN,  BxIN, ByIN, BzIN,  Bx
     *, By, Bz,  Bx_new, By_new, Bz_new,  emfield_on
      real*8 ExIN,EyIN,EzIN, EMLMTIN, BxIN,ByIN,BzIN, Bx,By,Bz, Bx_new,B
     *y_new,Bz_new
      logical emfield_on
      common/x_options/eadl_relax,  mcdf_pe_xsections
      logical eadl_relax, mcdf_pe_xsections
      integer i,j,lnblnk1
      CHARACTER*4 MEDIA1(24)
      EQUIVALENCE(MEDIA1(1),MEDIA(1,1))
      character fool_dec
      data MEDIA1/'N','A','I',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','
     *',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '/
      data fool_dec/'/'/
      data fool_intel_optimizer/.false./
      vacdst = 1e8
      DO 19821 i=1,3000
        ecut(i) = 0.
        pcut(i) = 0.
        ibcmp(i) = 3
        iedgfl(i) = 1
        iphter(i) = 1
        smaxir(i) = 1e10
        i_do_rr(i) = 0
        e_max_rr(i) = 0
        med(i) = 1
        rhor(i) = 0
        iraylr(i) = 1
        iphotonucr(i) = 0
19821 CONTINUE
19822 CONTINUE
      eii_flag = 0
      eii_xfile = 'Off'
      eii_L_factor = 1.0
      xsec_out = 0
      photon_xsections = 'xcom'
      comp_xsections = 'default'
      eadl_relax = .true.
      mcdf_pe_xsections = .false.
      photonuc_xsections = 'default'
      ExIN=0
      EyIN=0
      EzIN=0
      BxIN=0
      ByIN=0
      BzIN=0
      EMLMTIN=0.02
      Bx=BxIN
      By=ByIN
      Bz=BzIN
      Bx_new=Bx
      By_new=By
      Bz_new=Bz
      emfield_on=.false.
      IF (( ExIN**2+EyIN**2+EzIN**2 + BxIN**2+ByIN**2+BzIN**2 .GT. 0 ))
     *THEN
        emfield_on=.true.
      END IF
      DO 19831 i=1,12
        iraylm(i) = 0
        DO 19841 j=1,len(iray_ff_file(i))
          iray_ff_file(i)(j:j) = ' '
19841   CONTINUE
19842   CONTINUE
        DO 19851 j=1,len(iray_ff_media(i))
          iray_ff_media(i)(j:j) = ' '
19851   CONTINUE
19852   CONTINUE
        ae(i)=0
        ap(i)=0
        ue(i)=0
        up(i)=0
        te(i)=0
        thmoll(i)=0
19831 CONTINUE
19832 CONTINUE
      DO 19861 i=1,30
        DO 19871 j=1,100
          binding_energies(i,j) = 0
19871   CONTINUE
19872   CONTINUE
19861 CONTINUE
19862 CONTINUE
      ibrdst = 1
      ibr_nist = 0
      pair_nrc = 0
      itriplet = 0
      iprdst = 1
      rhof = 1
      DO 19881 i=1,5
        iausfl(i) = 1
19881 CONTINUE
19882 CONTINUE
      DO 19891 i=6,35
        iausfl(i) = 0
19891 CONTINUE
19892 CONTINUE
      ximax = 0.5
      estepe = 0.25
      skindepth_for_bca = 3
      transport_algorithm = 0
      bca_algorithm = 0
      exact_bca = .true.
      spin_effects = .true.
      count_pII_steps = 0
      count_all_steps = 0
      radc_flag = 0
      nmed = 1
      kmpi = 12
      kmpo = 8
      dunit = 1
      rng_seed = 999999
      latchi = 0
      rmt2 = 2*rm
      rmsq = rm*rm
      pi = 4*datan(1d0)
      twopi = 2*pi
      pi5d2 = 2.5*pi
      nbr_split = 1
      i_play_RR = 0
      i_survived_RR = 0
      prob_RR = -1
      n_RR_warning = 0
      DO 19901 i=1,len(hen_house)
        hen_house(i:i) = ' '
19901 CONTINUE
19902 CONTINUE
      i = lnblnk1('/home/miia/EGSnrc/HEN_HOUSE/')
      hen_house(:i) = '/home/miia/EGSnrc/HEN_HOUSE/'
      IF (( '/' .NE. fool_dec )) THEN
        DO 19911 j=1,i
          IF((hen_house(j:j) .EQ. '/'))hen_house(j:j) = '/'
19911   CONTINUE
19912   CONTINUE
      END IF
      IF((hen_house(i:i) .NE. '/'))hen_house(i+1:i+1) = '/'
      n_files = 0
      DO 19921 i=1,len(egs_home)
        egs_home(i:i) = ' '
19921 CONTINUE
19922 CONTINUE
      call getenv('EGS_HOME',egs_home)
      i = lnblnk1(egs_home)
      IF (( '/' .NE. fool_dec )) THEN
        DO 19931 j=1,i
          IF((egs_home(j:j) .EQ. '/'))egs_home(j:j) = '/'
19931   CONTINUE
19932   CONTINUE
      END IF
      IF((i .GT. 0 .AND. egs_home(i:i) .NE. '/'))egs_home(i+1:i+1) = '/'
      DO 19941 i=1,len(input_file)
        input_file(i:i) = ' '
19941 CONTINUE
19942 CONTINUE
      DO 19951 i=1,len(output_file)
        output_file(i:i) = ' '
19951 CONTINUE
19952 CONTINUE
      DO 19961 i=1,len(work_dir)
        work_dir(i:i) = ' '
19961 CONTINUE
19962 CONTINUE
      DO 19971 i=1,len(pegs_file)
        pegs_file(i:i) = ' '
19971 CONTINUE
19972 CONTINUE
      DO 19981 i=1,len(host_name)
        host_name(i:i) = ' '
19981 CONTINUE
19982 CONTINUE
      n_parallel = 0
      i_parallel = 0
      n_chunk = 0
      is_batch = .false.
      first_parallel = 1
      return
      end
      subroutine egs_combine_runs(combine_routine,extension)
      implicit none
      external combine_routine
      character*(*) extension
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      character*1024 tmp_string,base,command,outfile,parfile_name,base1,
     * text_string
      integer lnblnk1,istat,ipar,egs_system,egs_open_file
      integer*4 i,k,j,numparfiles,textindex
      logical ex,iwin
      iwin=.false.
      DO 19991 i=1,len(base)
        base(i:i) = ' '
19991 CONTINUE
19992 CONTINUE
      base = egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(user_cod
     *e)) // '/' // output_file(:lnblnk1(output_file)) // '_w'
      DO 20001 i=1,len(base1)
        base1(i:i) = ' '
20001 CONTINUE
20002 CONTINUE
      base1 = egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(user_co
     *de)) // '/' // output_file(:lnblnk1(output_file)) // '_w*' // exte
     *nsion(:lnblnk1(extension))
      DO 20011 i=1,len(outfile)
        outfile(i:i) = ' '
20011 CONTINUE
20012 CONTINUE
      outfile = egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(user_
     *code)) // '/' // 'parfiles_tmp'
      DO 20021 i=1,len(command)
        command(i:i) = ' '
20021 CONTINUE
20022 CONTINUE
      command = 'ls ' // base1(:lnblnk1(base1)) // ' | wc -l > ' // outf
     *ile(:lnblnk1(outfile))
      istat = egs_system(command(:lnblnk1(command)))
      IF ((istat.NE.0)) THEN
        command = 'dir ' // base1(:lnblnk1(base1)) // ' | find "File(s)"
     * > ' // outfile(:lnblnk1(outfile))
        istat = egs_system(command(:lnblnk1(command)))
        IF ((istat.NE.0)) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) ' Failed to write number of output files from p
     *arallel runs.'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        ELSE
          iwin=.true.
        END IF
      END IF
      ipar=1
      ipar=egs_open_file(ipar,0,1,outfile(:lnblnk1(outfile)))
      IF ((iwin)) THEN
        read(ipar,'(a)',err=20030,end=20030) text_string
        text_string = text_string(:lnblnk1(text_string))
        textindex = index(text_string,'File(s)')
        text_string = text_string(:textindex-1)
        read(text_string,'(i256)',err=20030) numparfiles
      ELSE
        read(ipar,'(i256)',err=20030,end=20030) numparfiles
      END IF
      close(ipar)
      DO 20041 i=1,len(command)
        command(i:i) = ' '
20041 CONTINUE
20042 CONTINUE
      IF ((iwin)) THEN
        command = 'del /Q ' // outfile(:lnblnk1(outfile))
      ELSE
        command = 'rm -f ' // outfile(:lnblnk1(outfile))
      END IF
      istat = egs_system(command(:lnblnk1(command)))
      IF ((istat.NE.0)) THEN
        write(i_log,'(/a)') '***************** Warning: '
        write(i_log,*) ' Failed to delete list of output files from para
     *llel runs.'
      END IF
      k=1
      j=1
20051 IF(j.GT.numparfiles)GO TO 20052
        DO 20061 i=1,len(tmp_string)
          tmp_string(i:i) = ' '
20061   CONTINUE
20062   CONTINUE
        tmp_string = base(:lnblnk1(base))
        call egs_itostring(tmp_string,k,.false.)
        tmp_string = tmp_string(:lnblnk1(tmp_string)) // extension(:lnbl
     *  nk1(extension))
        inquire(file=tmp_string,exist=ex)
        IF (( ex )) THEN
          call combine_routine(tmp_string)
          j=j+1
        END IF
        k=k+1
      GO TO 20051
20052 CONTINUE
      return
20030 write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) ' Failed to read number of output files from parall
     *el runs.'
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      end
      logical function egs_strip_extension(filen,fext)
      implicit none
      character*(*) filen,fext
      integer l1,l2,lnblnk1,i
      l1 = lnblnk1(filen)
      l2 = lnblnk1(fext)
      IF (( l1 .GE. l2 .AND. filen(l1-l2+1:l1) .EQ. fext(:l2) )) THEN
        egs_strip_extension = .true.
        DO 20071 i=l1-l2+1,len(filen)
          filen(i:i) = ' '
20071   CONTINUE
20072   CONTINUE
      ELSE
        egs_strip_extension = .false.
      END IF
      return
      end
      logical function egs_is_absolute_path(fn)
      implicit none
      character*(*) fn
      integer i,lnblnk1
      DO 20081 i=1,lnblnk1(fn)
        IF (( fn(i:i) .EQ. '/' )) THEN
          egs_is_absolute_path = .true.
          return
        END IF
20081 CONTINUE
20082 CONTINUE
      egs_is_absolute_path = .false.
      return
      end
      integer function egs_get_unit(iunit)
      implicit none
      integer*4 iunit, i
      logical is_open
      IF (( iunit .GT. 0 )) THEN
        inquire(iunit,opened=is_open)
        IF (( .NOT.is_open )) THEN
          egs_get_unit = iunit
          return
        END IF
      END IF
      DO 20091 i=1,99
        inquire(i,opened=is_open)
        IF (( .NOT.is_open )) THEN
          egs_get_unit = i
          return
        END IF
20091 CONTINUE
20092 CONTINUE
      egs_get_unit = -1
      return
      end
      integer function egs_open_file(iunit,rl,action,extension)
      implicit none
      integer*4 iunit, rl, action
      character*(*) extension
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      logical egs_is_absolute_path,is_open
      integer egs_get_unit
      integer i,lnblnk1
      character*1024 tmp_string,error_string
      integer*4 the_unit
      egs_open_file = -1
      the_unit = egs_get_unit(iunit)
      IF (( the_unit .LT. 0 )) THEN
        IF (( action .EQ. 0 )) THEN
          egs_open_file = -1
          return
        END IF
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'No free Fortran I/O units left'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF (( egs_is_absolute_path(extension) )) THEN
        inquire(file=extension,opened=is_open)
        IF ((is_open)) THEN
          inquire(file=extension,number=the_unit)
          write(i_log,'(/a)') '***************** Warning: '
          write(i_log,'(a,a,/,a,i3,/,a,/,a)') 'File ',extension(:lnblnk1
     *    (extension)), ' is already opened and connected to unit ',the_
     *    unit, ' Will not try to re-open this file, assuming it has bee
     *n opened', ' by the .io file.'
        ELSE IF(( rl .EQ. 0 )) THEN
          open(the_unit,file=extension,status='unknown')
        ELSE
          open(the_unit,file=extension,status='unknown',form='unformatte
     *d', access='direct', recl=rl)
        END IF
        egs_open_file = the_unit
        return
      END IF
      DO 20101 i=1,len(tmp_string)
        tmp_string(i:i) = ' '
20101 CONTINUE
20102 CONTINUE
      tmp_string = egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(us
     *er_code)) // '/' // work_dir(:lnblnk1(work_dir)) // output_file(:l
     *nblnk1(output_file))
      IF (( i_parallel .GT. 0 )) THEN
        tmp_string = tmp_string(:lnblnk1(tmp_string)) // '_w'
        call egs_itostring(tmp_string,i_parallel,.false.)
      END IF
      tmp_string = tmp_string(:lnblnk1(tmp_string)) // extension(:lnblnk
     *1(extension))
      inquire(file=tmp_string,opened=is_open)
      IF ((is_open)) THEN
        inquire(file=tmp_string,number=the_unit)
        write(i_log,'(/a)') '***************** Warning: '
        write(i_log,'(a,a,/,a,i3,/,a,/,a,/)') 'File ',tmp_string(:lnblnk
     *  1(tmp_string)), ' is already opened and connected to unit ',the_
     *  unit, ' Will not try to re-open this file, assuming it has been
     *opened', ' by specifying it in the .io file.'
      ELSE IF(( rl .EQ. 0 )) THEN
        open(the_unit,file=tmp_string,status='unknown',err=20110)
      ELSE
        open(the_unit,file=tmp_string,status='unknown',form='unformatted
     *', access='direct', recl=rl,err=20110)
      END IF
      egs_open_file = the_unit
      return
20110 error_string = 'In egs_open_file: failed to open file ' // tmp_str
     *ing(:lnblnk1(tmp_string)) // char(10) // 'iunit = '
      call egs_itostring(error_string,iunit,.false.)
      error_string = error_string(:lnblnk1(error_string)) // ' the_unit
     *= '
      call egs_itostring(error_string,the_unit,.false.)
      write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(a)') error_string(:lnblnk1(error_string))
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      end
      integer function egs_open_datfile(iunit,rl,action,extension)
      implicit none
      integer*4 iunit,rl,action
      character*(*) extension
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer i,the_unit,lnblnk1,egs_get_unit
      logical egs_is_absolute_path
      character base*1024, fn*1024
      egs_open_datfile = -1
      the_unit = egs_get_unit(iunit)
      IF (( the_unit .LT. 0 )) THEN
        IF (( action .EQ. 0 )) THEN
          egs_open_datfile = -1
          return
        END IF
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'No free Fortran I/O units left'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF (( egs_is_absolute_path(extension) )) THEN
        IF (( rl .EQ. 0 )) THEN
          open(the_unit,file=extension,status='old',err=20120)
        ELSE
          open(the_unit,file=extension,status='old',form='unformatted',
     *    access='direct',recl=rl,err=20120)
        END IF
        egs_open_datfile = the_unit
        return
20120   CONTINUE
        IF (( action .EQ. 0 )) THEN
          egs_open_datfile = -2
          return
        END IF
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'Failed to open file ',extension(:lnblnk1(extensi
     *  on))
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      DO 20131 i=1,len(base)
        base(i:i) = ' '
20131 CONTINUE
20132 CONTINUE
      DO 20141 i=1,len(fn)
        fn(i:i) = ' '
20141 CONTINUE
20142 CONTINUE
      base = egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(user_cod
     *e)) // '/'
      IF (( i_parallel .GT. 0 )) THEN
        fn = base(:lnblnk1(base)) // output_file(:lnblnk1(output_file))
     *  // '_w'
        call egs_itostring(fn,i_parallel,.false.)
        fn = fn(:lnblnk1(fn)) // extension(:lnblnk1(extension))
      ELSE
        fn = base(:lnblnk1(base)) // output_file(:lnblnk1(output_file))
     *  // extension(:lnblnk1(extension))
      END IF
      IF (( rl .EQ. 0 )) THEN
        open(the_unit,file=fn,status='old',err=20150)
      ELSE
        open(the_unit,file=fn,status='old',form='unformatted',access='di
     *rect', recl=rl,err=20150)
      END IF
      egs_open_datfile = the_unit
      return
20150 CONTINUE
      write(i_log,'(/a)') '***************** Warning: '
      write(i_log,'(a,a)') 'Failed to open ',fn(:lnblnk1(fn))
      DO 20161 i=1,len(fn)
        fn(i:i) = ' '
20161 CONTINUE
20162 CONTINUE
      IF (( i_parallel .GT. 0 )) THEN
        fn = base(:lnblnk1(base)) // input_file(:lnblnk1(input_file)) //
     *   '_w'
        call egs_itostring(fn,i_parallel,.false.)
        fn = fn(:lnblnk1(fn)) // extension(:lnblnk1(extension))
      ELSE
        fn = base(:lnblnk1(base)) // input_file(:lnblnk1(input_file)) //
     *   extension(:lnblnk1(extension))
      END IF
      IF (( rl .EQ. 0 )) THEN
        open(the_unit,file=fn,status='old',err=20170)
      ELSE
        open(the_unit,file=fn,status='old',form='unformatted',access='di
     *rect', recl=rl,err=20170)
      END IF
      egs_open_datfile = the_unit
      return
20170 CONTINUE
      write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) 'Failed to open data file'
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      end
      integer function egs_open_file_junk(iunit,do_it_anyway,filen)
      implicit none
      integer*4 iunit
      logical do_it_anyway
      character*(*) filen
      logical aux
      integer*4 the_unit,i
      inquire(file=filen,exist=aux)
      IF (( .NOT.aux )) THEN
        egs_open_file_junk = -2
        return
      END IF
      IF (( iunit .LT. 0 )) THEN
        the_unit = -iunit
      ELSE
        the_unit = iunit
      END IF
      IF (( the_unit .NE. 0 )) THEN
        inquire(unit=the_unit,opened=aux)
        IF (( aux )) THEN
          IF (( .NOT.do_it_anyway )) THEN
            egs_open_file_junk = -4
            return
          END IF
          IF((iunit .LT. 0))the_unit = 0
        END IF
      END IF
      IF (( the_unit .EQ. 0 )) THEN
        DO 20181 i=1,99
          inquire(unit=i,opened=aux)
          IF (( .NOT.aux )) THEN
            the_unit = i
            GO TO20182
          END IF
20181   CONTINUE
20182   CONTINUE
        IF (( the_unit .EQ. 0 )) THEN
          egs_open_file_junk = -1
          return
        END IF
      END IF
      open(the_unit,file=filen,status='old',err=20190)
      egs_open_file_junk = the_unit
      return
20190 egs_open_file_junk = -3
      return
      end
      subroutine egs_strip_path(fname)
      implicit none
      character*(*) fname
      integer i,l,l1,lnblnk1,j
      character slash
      slash = '/'
      l = lnblnk1(fname)
      DO 20201 i=1,l
        IF (( fname(i:i) .EQ. slash )) THEN
          fname(i:i) = '/'
        END IF
20201 CONTINUE
20202 CONTINUE
      DO 20211 i=l,1,-1
        IF (( fname(i:i) .EQ. '/' .OR. fname(i:i) .EQ. slash )) THEN
          l1 = l-i
          fname(:l1) = fname(i+1:l)
          DO 20221 j=l1+1,len(fname)
            fname(j:j) = ' '
20221     CONTINUE
20222     CONTINUE
          return
        END IF
20211 CONTINUE
20212 CONTINUE
      return
      end
      subroutine replace_env(fname)
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      character*(*) fname
      character*256 dirname
      integer indsep,ind1,ind2
      indsep = index(fname,'/')
      IF((indsep .LE. 0))return
      ind1=index(fname,'$')
      ind2=index(fname,'~')
      IF ((ind1.EQ.1)) THEN
        call getenv(fname(2:indsep-1),dirname)
        IF ((dirname.EQ.' ')) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(a,a/,a)') ' Error in file name: ',fname(:lnblnk1
     *    (fname)), ' First element in name does not specify a defined e
     *nvironment variable.'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        fname=dirname(:lnblnk1(dirname))//fname(indsep:)
        write(i_log,'(//a,a/)') ' Retrieving file: ',fname(:lnblnk1(fnam
     *  e))
      ELSE IF((ind2.EQ.1)) THEN
        call getenv('HOME',dirname)
        IF ((dirname.EQ.' ')) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(a,a/,a)') ' Error in file name: ',fname(:lnblnk1
     *    (fname)), ' HOME is undefined.'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        fname=dirname(:lnblnk1(dirname))//fname(indsep:)
        write(i_log,'(//a,a/)') ' Retrieving file: ',fname(:lnblnk1(fnam
     *  e))
      END IF
      return
      end
      subroutine egs_get_usercode(ucode)
      implicit none
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      character*(*) ucode
      character*512 arg
      integer l,l1,lnblnk1,i
      call getarg(0,arg)
      call egs_strip_path(arg)
      l = lnblnk1(arg)
      IF (( arg(l-3:l) .EQ. '.exe' )) THEN
        arg(l-3:l) = ' '
        l = l - 4
      END IF
      IF (( arg(l-5:l) .EQ. '_debug' )) THEN
        arg(l-5:l) = ' '
        l = l-5
      END IF
      IF (( arg(l-5:l) .EQ. '_noopt' )) THEN
        arg(l-5:l) = ' '
        l = l-5
      END IF
      l1 = len(ucode)
      IF (( l .GT. l1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) ' user code name is too long (',l,' chars)'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      DO 20231 i=1,len(ucode)
        ucode(i:i) = ' '
20231 CONTINUE
20232 CONTINUE
      ucode(:l) = arg(:l)
      return
      end
      subroutine egs_itostring(string,i,leave_space)
      implicit none
      character*(*) string
      integer*4 i
      integer l,lnblnk1,idiv,itmp,iaux
      logical first,leave_space
      l = lnblnk1(string)+1
      IF((l .GT. 1 .AND. leave_space))l=l+1
      idiv = 1000000000
      itmp = i
      first = .false.
      do while(idiv.gt.0)
      iaux = itmp/idiv
      IF (( (iaux .GT. 0 .OR. first ) .AND. l .LE. len(string) )) THEN
        string(l:l) = char(iaux+48)
        first = .true.
        l = l+1
      END IF
      itmp = itmp - iaux*idiv
      idiv = idiv/10
      end do
      return
      end
      real*8 function egs_rndm()
      implicit none
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      IF((rng_seed .GT. 128))call ranmar_get
      egs_rndm = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      return
      end
      integer function egs_add_medium(medname)
      implicit none
      character*(*) medname
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer*4 i,l,imed,medname_len
      character c
      logical same
      l = min(len(medname),24)
      medname_len = l
      DO 20241 i=1,l
        c = medname(i:i)
        IF (( ichar(c) .EQ. 0 )) THEN
          medname_len = i-1
          GO TO20242
        END IF
20241 CONTINUE
20242 CONTINUE
      DO 20251 imed=1,nmed
        l = 24
        DO 20261 i=1,24
          IF (( media(i,imed)(1:1) .EQ. ' ' )) THEN
            l = i-1
            GO TO20262
          END IF
20261   CONTINUE
20262   CONTINUE
        IF (( l .EQ. medname_len )) THEN
          same = .true.
          DO 20271 i=1,l
            c = medname(i:i)
            IF (( c .NE. media(i,imed)(1:1) )) THEN
              same = .false.
              GO TO20272
            END IF
20271     CONTINUE
20272     CONTINUE
          IF (( same )) THEN
            egs_add_medium = imed
            return
          END IF
        END IF
20251 CONTINUE
20252 CONTINUE
      nmed = nmed + 1
      IF (( nmed .GT. 12 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,'(a,/,a,i3,a)') 'In egs_add_medium: maximum number o
     *f media exceeded ', 'Increase the macro $MXMED (currently ',12,')
     *and retry'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      l = min(len(medname),24)
      DO 20281 i=1,l
        c = medname(i:i)
        IF (( ichar(c) .EQ. 0 )) THEN
          l = i-1
          GO TO20282
        END IF
        media(i,nmed) = ' '
        media(i,nmed)(1:1) = c
20281 CONTINUE
20282 CONTINUE
      IF (( l .LT. 24 )) THEN
        DO 20291 i=l+1,24
          media(i,nmed) = ' '
20291   CONTINUE
20292   CONTINUE
      END IF
      egs_add_medium = nmed
      return
      end
      subroutine egs_get_medium_name(imed,medname)
      implicit none
      character*(*) medname
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer*4 i,l,imed
      DO 20301 i=1,len(medname)
        medname(i:i) = ' '
20301 CONTINUE
20302 CONTINUE
      IF (( imed .LT. 1 .OR. imed .GT. nmed )) THEN
        return
      END IF
      l = 24
      DO 20311 l=24,1,-1
        IF((media(l,imed)(1:1) .NE. ' '))GO TO20312
20311 CONTINUE
20312 CONTINUE
      l = min(l,len(medname))
      DO 20321 i=1,l
        medname(i:i) = media(i,imed)(1:1)
20321 CONTINUE
20322 CONTINUE
      return
      end
      subroutine egs_get_electron_data(func,imed,which)
      implicit none
      integer*4 imed,which
      external func
      COMMON/ELECIN/ esig_e(12),psig_e(12), esige_max, psige_max, range_
     *ep(0:1,500,12), E_array(500,12), etae_ms0(500,12),etae_ms1(500,12)
     *,etap_ms0(500,12),etap_ms1(500,12),q1ce_ms0(500,12),q1ce_ms1(500,1
     *2),q1cp_ms0(500,12),q1cp_ms1(500,12),q2ce_ms0(500,12),q2ce_ms1(500
     *,12),q2cp_ms0(500,12),q2cp_ms1(500,12),blcce0(500,12),blcce1(500,1
     *2), EKE0(12),EKE1(12), XR0(12),TEFF0(12),BLCC(12),XCC(12), ESIG0(5
     *00,12),ESIG1(500,12),PSIG0(500,12),PSIG1(500,12),EDEDX0(500,12),ED
     *EDX1(500,12),PDEDX0(500,12),PDEDX1(500,12),EBR10(500,12),EBR11(500
     *,12),PBR10(500,12),PBR11(500,12),PBR20(500,12),PBR21(500,12),TMXS0
     *(500,12),TMXS1(500,12), expeke1(12), IUNRST(12),EPSTFL(12),IAPRIM(
     *12), sig_ismonotone(0:1,12)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 lemin,lemax
      lemin = (1 - eke0(imed))/eke1(imed)
      lemax = (meke(imed) - eke0(imed))/eke1(imed)
      IF (( which .EQ. 1 )) THEN
        call func(meke(imed),lemin,lemax,esig0(1,imed),esig1(1,imed))
      ELSE IF(( which .EQ. 2 )) THEN
        call func(meke(imed),lemin,lemax,psig0(1,imed),psig1(1,imed))
      ELSE IF(( which .EQ. 3 )) THEN
        call func(meke(imed),lemin,lemax,ededx0(1,imed),ededx1(1,imed))
      ELSE IF(( which .EQ. 4 )) THEN
        call func(meke(imed),lemin,lemax,pdedx0(1,imed),pdedx1(1,imed))
      ELSE IF(( which .EQ. 5 )) THEN
        call func(meke(imed),lemin,lemax,ebr10(1,imed),ebr11(1,imed))
      ELSE IF(( which .EQ. 6 )) THEN
        call func(meke(imed),lemin,lemax,pbr10(1,imed),pbr11(1,imed))
      ELSE IF(( which .EQ. 7 )) THEN
        call func(meke(imed),lemin,lemax,pbr20(1,imed),pbr21(1,imed))
      ELSE IF(( which .EQ. 8 )) THEN
        call func(meke(imed),lemin,lemax,tmxs0(1,imed),tmxs1(1,imed))
      ELSE IF(( which .EQ. 9 )) THEN
        call func(meke(imed),lemin,lemax,range_ep(0,1,imed),range_ep(1,1
     *  ,imed))
      ELSE
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'Unknown electron data type ',which
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      return
      end
      subroutine egs_get_photon_data(func,imed,which)
      implicit none
      integer*4 imed,which
      external func
      COMMON/PHOTIN/ EBINDA(12), GE0(12),GE1(12), GMFP0(2000,12),GMFP1(2
     *000,12),GBR10(2000,12),GBR11(2000,12),GBR20(2000,12),GBR21(2000,12
     *), RCO0(12),RCO1(12), RSCT0(100,12),RSCT1(100,12), COHE0(2000,12),
     *COHE1(2000,12),  PHOTONUC0(2000,12),PHOTONUC1(2000,12), DPMFP, MPG
     *EM(1,12), NGR(12)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 lemin,lemax
      lemin = (1 - ge0(imed))/ge1(imed)
      lemax = (mge(imed) - ge0(imed))/ge1(imed)
      IF (( which .EQ. 1 )) THEN
        call func(mge(imed),lemin,lemax,gmfp0(1,imed),gmfp1(1,imed))
      ELSE IF(( which .EQ. 2 )) THEN
        call func(mge(imed),lemin,lemax,gbr10(1,imed),gbr11(1,imed))
      ELSE IF(( which .EQ. 3 )) THEN
        call func(mge(imed),lemin,lemax,gbr20(1,imed),gbr21(1,imed))
      ELSE IF(( which .EQ. 4 )) THEN
        call func(mge(imed),lemin,lemax,cohe0(1,imed),cohe1(1,imed))
      ELSE IF(( which .EQ. 5 )) THEN
        call func(mge(imed),lemin,lemax,PHOTONUC0(1,imed),PHOTONUC1(1,im
     *  ed))
      ELSE
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'Unknown photon data type ',which
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      return
      end
      subroutine egs_print_binding_energies
      implicit none
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L(3000),IPHTER(3000)
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer*4 i,j
      integer*4 lnblnk1
      character*3 labels(16)
      data labels/'  K',' L1',' L2',' L3', ' M1',' M2',' M3',' M4',' M5'
     *, ' N1',' N2',' N3',' N4',' N5',' N6',' N7'/
      write(i_log,'(a,a,a)') 'Binding energies from ',photon_xsections(:
     *lnblnk1(photon_xsections)), ' photon cross section library'
      DO 20331 j=1,100
        DO 20341 i=1,16
          IF (( binding_energies(i,j) .GT. 0 )) THEN
            write(i_log,'(a,i3,a,a,a,1pe12.4,a)') ' Eb(',j,',',labels(i)
     *      ,') = ',binding_energies(i,j),' MeV'
          END IF
20341   CONTINUE
20342   CONTINUE
20331 CONTINUE
20332 CONTINUE
      return
      end
      subroutine egs_scale_xcc(imed,factor)
      implicit none
      integer*4 imed
      real*8 factor
      COMMON/ELECIN/ esig_e(12),psig_e(12), esige_max, psige_max, range_
     *ep(0:1,500,12), E_array(500,12), etae_ms0(500,12),etae_ms1(500,12)
     *,etap_ms0(500,12),etap_ms1(500,12),q1ce_ms0(500,12),q1ce_ms1(500,1
     *2),q1cp_ms0(500,12),q1cp_ms1(500,12),q2ce_ms0(500,12),q2ce_ms1(500
     *,12),q2cp_ms0(500,12),q2cp_ms1(500,12),blcce0(500,12),blcce1(500,1
     *2), EKE0(12),EKE1(12), XR0(12),TEFF0(12),BLCC(12),XCC(12), ESIG0(5
     *00,12),ESIG1(500,12),PSIG0(500,12),PSIG1(500,12),EDEDX0(500,12),ED
     *EDX1(500,12),PDEDX0(500,12),PDEDX1(500,12),EBR10(500,12),EBR11(500
     *,12),PBR10(500,12),PBR11(500,12),PBR20(500,12),PBR21(500,12),TMXS0
     *(500,12),TMXS1(500,12), expeke1(12), IUNRST(12),EPSTFL(12),IAPRIM(
     *12), sig_ismonotone(0:1,12)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      IF (( imed .GT. 0 .AND. imed .LE. nmed )) THEN
        xcc(imed) = xcc(imed)*factor
      END IF
      return
      end
      subroutine egs_write_string(ounit,string)
      implicit none
      integer*4 ounit
      character*(*) string
      write(ounit,'(a,$)') string
      call flush(ounit)
      return
      end
      subroutine egs_swap_2(c)
      character c(2),tmp
      tmp=c(2)
      c(2)=c(1)
      c(1)=tmp
      return
      end
      subroutine egs_swap_4(c)
      character c(4),tmp
      tmp=c(4)
      c(4)=c(1)
      c(1)=tmp
      tmp=c(3)
      c(3)=c(2)
      c(2)=tmp
      return
      end
      subroutine set_spline(x,f,a,b,c,d,n)
      implicit none
      integer*4 n
      real*8 x(n),f(n),a(n),b(n),c(n),d(n)
      integer*4 m1,m2,m,mr
      real*8 s,r
      m1 = 2
      m2 = n-1
      s = 0
      DO 20351 m=1,m2
        d(m) = x(m+1) - x(m)
        r = (f(m+1) - f(m))/d(m)
        c(m) = r - s
        s = r
20351 CONTINUE
20352 CONTINUE
      s=0
      r=0
      c(1)=0
      c(n)=0
      DO 20361 m=m1,m2
        c(m) = c(m) + r*c(m-1)
        b(m) = 2*(x(m-1) - x(m+1)) - r*s
        s = d(m)
        r = s/b(m)
20361 CONTINUE
20362 CONTINUE
      mr = m2
      DO 20371 m=m1,m2
        c(mr) = (d(mr)*c(mr+1) - c(mr))/b(mr)
        mr = mr - 1
20371 CONTINUE
20372 CONTINUE
      DO 20381 m=1,m2
        s = d(m)
        r = c(m+1) - c(m)
        d(m) = r/s
        c(m) = 3*c(m)
        b(m) = (f(m+1)-f(m))/s - (c(m)+r)*s
        a(m) = f(m)
20381 CONTINUE
20382 CONTINUE
      return
      end
      real*8 function spline(s,x,a,b,c,d,n)
      implicit none
      integer*4 n
      real*8 s,x(n),a(n),b(n),c(n),d(n)
      integer m_lower,m_upper,direction,m,ml,mu,mav
      real*8 q
      IF (( x(1) .GT. x(n) )) THEN
        direction = 1
        m_lower = n
        m_upper = 0
      ELSE
        direction = 0
        m_lower = 0
        m_upper = n
      END IF
      IF (( s .GE. x(m_upper + direction) )) THEN
        m = m_upper + 2*direction - 1
      ELSE IF(( s .LE. x(m_lower+1-direction) )) THEN
        m = m_lower - 2*direction + 1
      ELSE
        ml = m_lower
        mu = m_upper
20391   IF(iabs(mu-ml).LE.1)GO TO 20392
          mav = (ml+mu)/2
          IF (( s .LT. x(mav) )) THEN
            mu = mav
          ELSE
            ml = mav
          END IF
        GO TO 20391
20392   CONTINUE
        m = mu + direction - 1
      END IF
      q = s - x(m)
      spline = a(m) + q*(b(m) + q*(c(m) + q*d(m)))
      return
      end
      subroutine prepare_alias_table(nsbin,xs_array,fs_array,ws_array,ib
     *in_array)
      implicit none
      integer nsbin
      integer*4 ibin_array(nsbin)
      real*8 xs_array(0:nsbin),fs_array(0:nsbin),ws_array(nsbin)
      integer*4 i,j_l,j_h
      real*8 sum,aux
      sum = 0
      DO 20401 i=1,nsbin
        aux = 0.5*(fs_array(i)+fs_array(i-1))*(xs_array(i)-xs_array(i-1)
     *  )
        IF((aux .LT. 1e-30))aux = 1e-30
        ws_array(i) = -aux
        ibin_array(i) = 1
        sum = sum + aux
20401 CONTINUE
20402 CONTINUE
      sum = sum/nsbin
      DO 20411 i=1,nsbin-1
        DO 20421 j_h=1,nsbin
          IF (( ws_array(j_h) .LT. 0 )) THEN
            IF((abs(ws_array(j_h)) .GT. sum))GOTO 20430
          END IF
20421   CONTINUE
20422   CONTINUE
        j_h = nsbin
20430   CONTINUE
          DO 20431 j_l=1,nsbin
          IF (( ws_array(j_l) .LT. 0 )) THEN
            IF((abs(ws_array(j_l)) .LT. sum))GOTO 20440
          END IF
20431   CONTINUE
20432   CONTINUE
        j_l = nsbin
20440   aux = sum - abs(ws_array(j_l))
        ws_array(j_h) = ws_array(j_h) + aux
        ws_array(j_l) = -ws_array(j_l)/sum
        ibin_array(j_l) = j_h
        IF((i .EQ. nsbin-1))ws_array(j_h) = 1
20411 CONTINUE
20412 CONTINUE
      return
      end
      real*8 function alias_sample1(nsbin,xs_array,fs_array,ws_array,ibi
     *n_array)
      implicit none
      integer nsbin
      integer*4 ibin_array(nsbin)
      real*8 xs_array(0:nsbin),fs_array(0:nsbin),ws_array(nsbin)
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      integer*4 j
      real*8 r1,r2,aj,x,dx,a,rnno1
      IF((rng_seed .GT. 128))call ranmar_get
      r1 = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      IF((rng_seed .GT. 128))call ranmar_get
      r2 = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      aj = 1 + r1*nsbin
      j = aj
      aj = aj - j
      IF((aj .GT. ws_array(j)))j = ibin_array(j)
      x = xs_array(j-1)
      dx = xs_array(j)-x
      IF (( fs_array(j-1) .GT. 0 )) THEN
        a = fs_array(j)/fs_array(j-1)-1
        IF (( abs(a) .LT. 0.2 )) THEN
          rnno1 = 0.5*(1-r2)*a
          alias_sample1 = x + r2*dx*(1+rnno1*(1-r2*a))
        ELSE
          alias_sample1 = x - dx/a*(1-sqrt(1+r2*a*(2+a)))
        END IF
      ELSE
        alias_sample1 = x + dx*sqrt(r2)
      END IF
      return
      end
      subroutine prepare_alias_histogram(nsbin,ws_array,ibin_array)
      implicit none
      integer*4 nsbin,ibin_array(nsbin)
      real*8 ws_array(nsbin)
      integer*4 i,j_l,j_h
      real*8 sum,aux
      sum = 0
      DO 20451 i=1,nsbin
        sum = sum + ws_array(i)
        ibin_array(i) = -1
20451 CONTINUE
20452 CONTINUE
      sum = sum/nsbin
      DO 20461 i=1,nsbin-1
        DO 20471 j_h=1,nsbin
          IF((ibin_array(j_h) .LT. 0 .AND. ws_array(j_h) .GT. sum))GO TO
     *    20472
20471   CONTINUE
20472   CONTINUE
        DO 20481 j_l=1,nsbin
          IF((ibin_array(j_l) .LT. 0 .AND. ws_array(j_l) .LT. sum))GO TO
     *    20482
20481   CONTINUE
20482   CONTINUE
        aux = sum - ws_array(j_l)
        ws_array(j_h) = ws_array(j_h) - aux
        ws_array(j_l) = ws_array(j_l)/sum
        ibin_array(j_l) = j_h
20461 CONTINUE
20462 CONTINUE
      DO 20491 i=1,nsbin
        IF (( ibin_array(i) .LT. 0 )) THEN
          ibin_array(i) = i
          ws_array(i) = 1
        END IF
20491 CONTINUE
20492 CONTINUE
      return
      end
      integer*4 function sample_alias_histogram(nsbin,ws_array,ibin_arra
     *y)
      implicit none
      integer*4 nsbin,ibin_array(*)
      real*8 ws_array(*)
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      real*8 r1,r2
      integer*4 ibin
      IF((rng_seed .GT. 128))call ranmar_get
      r1 = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      IF((rng_seed .GT. 128))call ranmar_get
      r2 = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      ibin = 1 + nsbin*r1
      IF((r2 .GT. ws_array(ibin)))ibin = ibin_array(ibin)
      sample_alias_histogram = ibin
      return
      end
      subroutine gauss_legendre(x1,x2,x,w,n)
      implicit none
      integer*4 n
      real*8 x1,x2,x(n),w(n)
      real*8 eps,Pi
      parameter (eps = 3.D-14,Pi=3.141592654D0)
      integer*4 i,m,j
      real*8 xm,xl,z,z1,p1,p2,p3,pp
      m = (n + 1)/2
      xm=0.5d0*(x2+x1)
      xl=0.5d0*(x2-x1)
      DO 20501 i=1,m
        z=cos(Pi*(i-.25d0)/(n+.5d0))
20511   CONTINUE
          p1=1.d0
          p2=0.d0
          DO 20521 j=1,n
            p3 = p2
            p2 = p1
            p1=((2.d0*j-1.d0)*z*p2-(j-1.d0)*p3)/j
20521     CONTINUE
20522     CONTINUE
          pp=n*(z*p1-p2)/(z*z-1.d0)
          z1=z
          z=z1-p1/pp
          IF(((abs(z-z1) .LT. eps)))GO TO20512
        GO TO 20511
20512   CONTINUE
        x(i)=xm-xl*z
        x(n+1-i)=xm+xl*z
        w(i)=2.d0*xl/((1.d0-z*z)*pp*pp)
        w(n+1-i)=w(i)
20501 CONTINUE
20502 CONTINUE
      return
      end
      integer function lnblnk1(string)
      character*(*) string
      integer i
      DO 20531 i=len(string),1,-1
        j = ichar(string(i:i))
        IF (( j .EQ. 0 )) THEN
          lnblnk1 = i-1
          return
        END IF
        IF (( j .NE. 9 .AND. j .NE. 10 .AND. j .NE. 11 .AND. j .NE. 12 .
     *  AND. j .NE. 13 .AND. j .NE. 32 )) THEN
          lnblnk1 = i
          return
        END IF
20531 CONTINUE
20532 CONTINUE
      lnblnk1 = 0
      return
      end
      real*8 FUNCTION ERF1(X)
      implicit none
      real*8 x
      double precision A(0:22,2)
      double precision CONST,  BN,BN1,BN2,  Y,FAC
      integer*4 N,  K,  NLIM(2)
      DATA A/ 1.0954712997776232 , -0.2891754011269890 , 0.1104563986337
     *951 , -0.0412531882278565 , 0.0140828380706516 , -0.00432929544743
     *14 , 0.0011982719015923 , -0.0002999729623532 , 0.0000683258603789
     * , -0.0000142469884549 , 0.0000027354087728 , -0.0000004861912872
     *, 0.0000000803872762 , -0.0000000124184183 , 0.0000000017995326 ,
     *-0.0000000002454795 , 0.0000000000316251 , -0.0000000000038590 , 0
     *.0000000000004472 , -0.0000000000000493 , 0.0000000000000052 , -0.
     *0000000000000005 , 0.0000000000000001 , 0.9750834237085559 , -0.02
     *40493938504146 , 0.0008204522408804 , -0.0000434293081303 , 0.0000
     *030184470340 , -0.0000002544733193 , 0.0000000248583530 , -0.00000
     *00027317201 , 0.0000000003308472 , 0.0000000000001464 , -0.0000000
     *000000244 , 0.0000000000000042 , -0.0000000000000008 , 0.000000000
     *0000001 , 9*0.0 /
      DATA NLIM/ 22,16 /
      DATA CONST/ 1.128379167095513 /
      IF (( x .GT. 3 )) THEN
        y = 3/x
        k = 2
      ELSE
        y = x/3
        k = 1
      END IF
      FAC = 2.0 * ( 2.0 * Y*Y - 1.0 )
      BN1 = 0.0
      BN = 0.0
      DO 20541 n=NLIM(K),0,-1
        BN2 = BN1
        BN1 = BN
        BN = FAC * BN1 - BN2 + A(N,K)
20541 CONTINUE
20542 CONTINUE
      IF (( k .EQ. 1 )) THEN
        erf1 = CONST * Y * ( BN - BN1 )
      ELSE
        erf1 = 1 - CONST * EXP(-X**2) * ( BN - BN2 + A(0,K) )/(4.0 * X)
      END IF
      RETURN
      end
      real*8 FUNCTION ZERO()
      implicit none
      integer*4 i
      real*8 x, xtemp
      x = 1.E-20
      DO 20551 i=1,100
        IF ((x .EQ. 0.0)) THEN
          GO TO20552
        ELSE
          xtemp = x
        END IF
        x = x/1.E5
20551 CONTINUE
20552 CONTINUE
      x = xtemp
      DO 20561 i=1,5
        IF ((x .NE. 0.0)) THEN
          xtemp = x
        ELSE
          GO TO20562
        END IF
        x = x/10
20561 CONTINUE
20562 CONTINUE
      x = xtemp
      DO 20571 i=2,10
        IF ((x .NE. 0.0)) THEN
          xtemp = x
        ELSE
          GO TO20572
        END IF
        x = x/i
20571 CONTINUE
20572 CONTINUE
      zero = xtemp
      return
      end
      character*512 function toUpper(a_string)
      character*(*) a_string
      character*512 the_string
      integer*4 cursor, i, lnblnk1
      toUpper = a_string
      the_string = a_string
      DO 20581 i=1,lnblnk1(the_string)
        cursor=ICHAR(the_string(i:i))
        IF (((cursor.GE.97).AND.(cursor.LE.122))) THEN
          cursor=cursor-32
          toUpper(i:i)=CHAR(cursor)
        END IF
20581 CONTINUE
20582 CONTINUE
      return
      end
      integer*1 function egs_read_byte(iunit, jrec)
      implicit none
      integer iunit, jrec, i, j, ierr
      integer*1 i_1
      character c_1
      equivalence (i_1,c_1)
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      read(iunit,rec=jrec,IOSTAT=ierr) c_1
      IF ((ierr.ne.0)) THEN
        write(i_log,'(/a)') '***************** Warning: '
        write(i_log,*) ' *** egs_read_byte: ERROR READING A byte *** '
        write(i_log,*) ' From unit ',iunit,' position ',jrec,' bytes'
        egs_read_byte = -1
        return
      END IF
      jrec = jrec + 1
      egs_read_byte = i_1
      return
      end
      integer*2 function egs_read_short(iunit, jrec)
      implicit none
      integer iunit, jrec, i, j, ierr
      integer*2 i_2
      character c_2(2)
      equivalence (i_2,c_2)
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      j = 0
      DO 20591 i=jrec,jrec+1
        j = j + 1
        read(iunit,rec=i,IOSTAT=ierr) c_2(j)
        IF ((ierr.ne.0)) THEN
          write(i_log,'(/a)') '***************** Warning: '
          write(i_log,*) ' *** egs_read_short: ERROR READING short integ
     *er *** '
          write(i_log,*) ' From unit ',iunit,' position ',jrec,' bytes'
          egs_read_short = -1
          return
        END IF
20591 CONTINUE
20592 CONTINUE
      jrec = jrec + 2
      egs_read_short = i_2
      return
      end
      integer*4 function egs_read_int(iunit, jrec)
      implicit none
      integer iunit, jrec, i, j, ierr
      integer*4 i_4
      character c_4(4)
      equivalence (i_4,c_4)
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      j = 0
      DO 20601 i=jrec,jrec+3
        j = j + 1
        read(iunit,rec=i,IOSTAT=ierr) c_4(j)
        IF ((ierr.ne.0)) THEN
          write(i_log,'(/a)') '***************** Warning: '
          write(i_log,*) ' *** egs_read_int: ERROR READING integer *** '
          write(i_log,*) ' From unit ',iunit,' position ',jrec,' bytes'
          egs_read_int = -1
          return
        END IF
20601 CONTINUE
20602 CONTINUE
      jrec = jrec + 4
      egs_read_int = i_4
      return
      end
      real*4 function egs_read_real(iunit, jrec)
      implicit none
      integer iunit, jrec, i, j, ierr
      real*4 r_4
      character c_4(4)
      equivalence (r_4,c_4)
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      j = 0
      DO 20611 i=jrec,jrec+3
        j = j + 1
        read(iunit,rec=i,IOSTAT=ierr) c_4(j)
        IF ((ierr.ne.0)) THEN
          write(i_log,'(/a)') '***************** Warning: '
          write(i_log,*) ' *** egs_read_real: ERROR READING float *** '
          write(i_log,*) ' From unit ',iunit,' position ',jrec,' bytes'
          egs_read_real = -1
          return
        END IF
20611 CONTINUE
20612 CONTINUE
      jrec = jrec + 4
      egs_read_real = r_4
      return
      end
      integer*4 function ibsearch(a, nsh, b)
      implicit none
      real*8 a, b(*)
      integer*4 min,max,help,nsh
      real*8 x
      min = 1
      max = nsh
      x = a
20621 IF(min.GE.max-1)GO TO 20622
        help = (max+min)/2
        IF (( b(help).le.x)) THEN
          min = help
        ELSE
          max = help
        END IF
      GO TO 20621
20622 CONTINUE
      ibsearch = min
      return
      end
      SUBROUTINE GET_INPUT
      IMPLICIT NONE
      COMMON/GetInput/ ALLOWED_INPUTS(100,0:5),   VALUES_SOUGHT(100),  C
     *HAR_VALUE(100,100),  VALUE(100,100),  DEFAULT(100),  VALUE_MIN(100
     *),  VALUE_MAX(100),  NVALUE(100),  TYPE(100),      ERROR_FLAGS(100
     *),   i_errors,  NMIN, NMAX,   ERROR_FLAG,  DELIMETER
      character ALLOWED_INPUTS*64,VALUES_SOUGHT*64, CHAR_VALUE*256,DELIM
     *ETER*64
      real*8 VALUE,DEFAULT,VALUE_MIN,VALUE_MAX
      integer*4 NVALUE,TYPE,NMIN,NMAX,ERROR_FLAG,ERROR_FLAGS,i_errors
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      CHARACTER*256 TEXT
      CHARACTER*256 KEEPTEXT
      CHARACTER*256 ORIGTEXT
      CHARACTER*256 TEXTPIECE
      CHARACTER*40 DELIM_START
      CHARACTER*40 DELIM_END
      CHARACTER*64 VNAME
      CHARACTER*64 VNAME1
      integer*4 CURSOR
      integer*4 IINDEX
      integer*4 iVNAME
      integer*4 IVAL
      integer*4 UNITNUM
      integer*4 ERR
      integer*4 I,J,K,CHECK
      integer*4 LINE
      integer*4 INT_VALUE
      integer*4 INT_VALUE_MIN
      integer*4 INT_VALUE_MAX
      logical ALLOWED
      logical START_FOUND
      integer*4 ifound,length,lll,Kconvert
      integer*4 lnblnk1
      logical IDEBUG
      character*1 blank
      integer*4 error_level
      integer*4 the_level
      data blank/' '/
      data error_level/1/
      save error_level
      IDEBUG = .false.
      ERROR_FLAG = 0
      IF ((IDEBUG)) THEN
        WRITE(6,20630)NMIN,NMAX, 100
20630   FORMAT(' Entering get_inputs seeking values', I5,' to', I5, '  w
     *ith a max allowed of',I5)
      END IF
      IF ((NMAX .LT. NMIN .OR. NMAX .GT. 100)) THEN
        WRITE(6,20640)NMAX, NMIN, 100
20640   FORMAT(//' Error entering get_inputs: Asked for values from',I5,
     *' to',I5, '    with a max of',I5//' This implies a bug in the call
     *ing routine'/ ' Fix it up and try again.  Stopping now.')
        STOP
      END IF
      ERR=i_errors
      UNITNUM=i_input
      DELIM_START=':START '//DELIMETER(:lnblnk1(DELIMETER))//':'
      DELIM_END=':STOP '//DELIMETER(:lnblnk1(DELIMETER))//':'
      DO 20651 Kconvert=1,lnblnk1(DELIM_START)
        CURSOR=ICHAR(DELIM_START(Kconvert:Kconvert))
        IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
          CURSOR=CURSOR-32
          DELIM_START(Kconvert:Kconvert)=CHAR(CURSOR)
        END IF
20651 CONTINUE
20652 CONTINUE
      DO 20661 Kconvert=1,lnblnk1(DELIM_END)
        CURSOR=ICHAR(DELIM_END(Kconvert:Kconvert))
        IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
          CURSOR=CURSOR-32
          DELIM_END(Kconvert:Kconvert)=CHAR(CURSOR)
        END IF
20661 CONTINUE
20662 CONTINUE
      IF ((IDEBUG)) THEN
        WRITE(6,20670)DELIM_START,DELIM_END
20670   FORMAT(' start and stop delimeters are:'/ A/A/)
      END IF
      DO 20681 I=NMIN,NMAX
        REWIND (UNITNUM)
        LINE=0
        CHECK=0
        ERROR_FLAGS(I)=0
        IF ((TYPE(I) .EQ. 0 .OR. TYPE(I) .EQ. 1)) THEN
          VALUE(I,1) = DEFAULT(I)
        END IF
        IF ((TYPE(I) .EQ. 3)) THEN
          VALUE(I,1) = 0
        END IF
        VNAME=VALUES_SOUGHT(I)
        iVNAME=lnblnk1(VNAME)
        IF (( ivname .LT. 1 )) THEN
          IF (( error_level .GT. 0 )) THEN
            write(ERR,*) ' ======================= Warning =============
     *======== '
            write(ERR,*) '    Empty VALUES_SOUGHT passt to Get_Inputs()!
     *         '
            write(ERR,*) ' =============================================
     *======== '
          END IF
          ERROR_FLAG=1
          ERROR_FLAGS(I)=1
          goto 20690
        END IF
        DO 20701 Kconvert=1,lnblnk1(vname)
          CURSOR=ICHAR(vname(Kconvert:Kconvert))
          IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
            CURSOR=CURSOR-32
            vname(Kconvert:Kconvert)=CHAR(CURSOR)
          END IF
20701   CONTINUE
20702   CONTINUE
        iindex = 0
        IF ((DELIMETER .EQ. 'NONE')) THEN
          start_found = .true.
        ELSE
          start_found = .false.
        END IF
20711   IF(iindex.NE.0)GO TO 20712
20720     CONTINUE
          LINE=LINE+1
          IF (( start_found )) THEN
            READ(UNITNUM,END=20730,ERR=20740,FMT='(A256)') TEXT
          ELSE
            READ(UNITNUM,END=20750,ERR=20740,FMT='(A256)') TEXT
          END IF
          length = len(text)
20761     IF(index(text,blank).NE.1)GO TO 20762
            IF (( length .GE. 2 )) THEN
              text=text(2:)
            ELSE
              GO TO20762
            END IF
            length = length - 1
          GO TO 20761
20762     CONTINUE
          ifound = INDEX(text,'#')
          IF (( ifound .GT. 1 )) THEN
            text = text(1:ifound-1)
          ELSE
            IF (( ifound .EQ. 1 )) THEN
              text = blank
            END IF
          END IF
          ifound = INDEX(text,';')
          IF (( ifound .GT. 1 )) THEN
            text = text(1:ifound-1)
          ELSE
            IF (( ifound .EQ. 1 )) THEN
              text = blank
            END IF
          END IF
          length = lnblnk1(TEXT)
          TEXT=TEXT(:length)
          origtext = text(:length)
          DO 20771 Kconvert=1,lnblnk1(text)
            CURSOR=ICHAR(text(Kconvert:Kconvert))
            IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
              CURSOR=CURSOR-32
              text(Kconvert:Kconvert)=CHAR(CURSOR)
            END IF
20771     CONTINUE
20772     CONTINUE
          IF (( .NOT.start_found )) THEN
            IF ((INDEX(TEXT,DELIM_START) .NE. 0 )) THEN
              start_found = .true.
            END IF
            goto 20720
          END IF
          iindex=INDEX(TEXT,VNAME(:iVNAME))
          IF (( DELIMETER.NE.'NONE' )) THEN
            IF ((INDEX(TEXT,DELIM_END).NE.0)) THEN
              IF (( error_level .GT. 0 )) THEN
                WRITE (ERR,*) '***************ERROR***************'
                WRITE (ERR,*) '>>',VALUES_SOUGHT(I)(:lnblnk1(VALUES_SOUG
     *          HT(I))), '<<',' NOT FOUND'
                WRITE (ERR,*) 'END OF DELIMETER: ',DELIMETER(:lnblnk1(DE
     *          LIMETER))
              END IF
              ERROR_FLAG=1
              ERROR_FLAGS(I)=1
              GOTO 20690
            END IF
          END IF
        GO TO 20711
20712   CONTINUE
        CHECK=0
        IF (( idebug )) THEN
          write(i_log,*) ' ******* Found: '
          write(i_log,'(a,$)') ' text:     '
          length = lnblnk1(text)
          IF (( length .GT. 0 )) THEN
            DO 20781 lll=1,length
              write(i_log,'(a1,$)') text(lll:lll)
20781       CONTINUE
20782       CONTINUE
            write(i_log,*)
          END IF
          write(i_log,'(a,$)') ' origtext: '
          length = lnblnk1(origtext)
          IF (( length .GT. 0 )) THEN
            DO 20791 lll=1,length
              write(i_log,'(a1,$)') origtext(lll:lll)
20791       CONTINUE
20792       CONTINUE
            write(i_log,*)
          END IF
        END IF
        IINDEX=IINDEX+iVNAME
        TEXT=TEXT(IINDEX:)
        origtext=origtext(iindex:)
        IF (( idebug )) THEN
          write(i_log,*) ' After removing vname: '
          write(i_log,'(a,$)') ' text:     '
          length = lnblnk1(text)
          IF (( length .GT. 0 )) THEN
            DO 20801 lll=1,length
              write(i_log,'(a1,$)') text(lll:lll)
20801       CONTINUE
20802       CONTINUE
            write(i_log,*)
          END IF
          write(i_log,'(a,$)') ' origtext: '
          length = lnblnk1(origtext)
          IF (( length .GT. 0 )) THEN
            DO 20811 lll=1,length
              write(i_log,'(a1,$)') origtext(lll:lll)
20811       CONTINUE
20812       CONTINUE
            write(i_log,*)
          END IF
        END IF
        IINDEX=INDEX(TEXT,'=')
        IF ((IINDEX.NE.0)) THEN
          TEXT=TEXT(IINDEX+1:)
          origtext=origtext(iindex+1:)
        ELSE
          IINDEX=INDEX(TEXT,':')
          IF ((IINDEX.NE.0)) THEN
            TEXT=TEXT(IINDEX+1:)
            origtext=origtext(iindex+1:)
          END IF
        END IF
        IF (( idebug )) THEN
          write(i_log,*) ' After removing leading equals: '
          write(i_log,'(a,$)') ' text:     '
          length = lnblnk1(text)
          IF (( length .GT. 0 )) THEN
            DO 20821 lll=1,length
              write(i_log,'(a1,$)') text(lll:lll)
20821       CONTINUE
20822       CONTINUE
            write(i_log,*)
          END IF
          write(i_log,'(a,$)') ' origtext: '
          length = lnblnk1(origtext)
          IF (( length .GT. 0 )) THEN
            DO 20831 lll=1,length
              write(i_log,'(a1,$)') origtext(lll:lll)
20831       CONTINUE
20832       CONTINUE
            write(i_log,*)
          END IF
        END IF
        IF (( (lnblnk1(TEXT).EQ.0) .OR. (lnblnk1(TEXT).EQ.1) )) THEN
          IF ((vname(:ivname).EQ.'TITLE')) THEN
            READ (UNITNUM,FMT='(A256)') TEXTPIECE
            IF ((lnblnk1(TEXTPIECE).NE.0)) THEN
              TEXT=TEXTPIECE(:lnblnk1(TEXTPIECE))
              length = len(text)
20841         IF(index(text,blank).NE.1)GO TO 20842
                IF (( length .GE. 2 )) THEN
                  text=text(2:)
                ELSE
                  GO TO20842
                END IF
                length = length - 1
              GO TO 20841
20842         CONTINUE
              length = len(origtext)
20851         IF(index(origtext,blank).NE.1)GO TO 20852
                IF (( length .GE. 2 )) THEN
                  origtext=origtext(2:)
                ELSE
                  GO TO20852
                END IF
                length = length - 1
              GO TO 20851
20852         CONTINUE
              GOTO 20860
            END IF
          END IF
          IF (( error_level .GT. 0 )) THEN
            WRITE (ERR,*) '*************ERROR*************'
            WRITE (ERR,*) 'VALUE SOUGHT: ',VALUES_SOUGHT(I)
            WRITE (ERR,*) 'VALUE NOT THERE!!'
          END IF
          ERROR_FLAG=1
          ERROR_FLAGS(I)=1
          RETURN
        END IF
20860   CONTINUE
        iindex = index(text,'DEFAULT')
        IF (( iindex .NE. 0 )) THEN
          IF (( type(i) .NE. 2 )) THEN
            IF (( type(i) .NE. 3 )) THEN
              VALUE(I,1)=DEFAULT(I)
            ELSE
              VALUE(I,1)=0
            END IF
            goto 20690
          END IF
        END IF
        IF (((TYPE(I) .EQ. 0).OR.(TYPE(I) .EQ. 1))) THEN
          IVAL=1
          IF (( idebug )) THEN
            write(i_log,*) ' *** Reading an integer or a real value! '
          END IF
20871     CONTINUE
            IF (( idebug )) THEN
              write(i_log,*) ' In LOOP, ival = ',ival
            END IF
            IF ((lnblnk1(TEXT).EQ.0)) THEN
              IF (( error_level .GT. 0 )) THEN
                WRITE(ERR,*) '*************ERROR*************'
                WRITE (ERR,*) 'VALUE SOUGHT: ',VALUES_SOUGHT(I)
                WRITE (ERR,*) 'VALUE NOT THERE!!'
              END IF
              ERROR_FLAG=1
              ERROR_FLAGS(I)=1
              RETURN
            END IF
            READ(TEXT,END=20880,ERR=20890,FMT=*) VALUE(I,IVAL)
            IF (( idebug )) THEN
              write(i_log,*) ' Read value: ',ival,VALUE(I,IVAL)
            END IF
            IF (((VALUE(I,IVAL).GT.VALUE_MAX(I)).OR.(VALUE(I,IVAL).LT.VA
     *      LUE_MIN(I)))) THEN
              IF ((TYPE(I).EQ.0)) THEN
                INT_VALUE=DEFAULT(I)
                IF (( error_level .GT. 0 )) THEN
                  WRITE(ERR,*) '************WARNING************'
                  WRITE(ERR,20900) INT_VALUE, VALUES_SOUGHT(I)(:lnblnk1(
     *            VALUES_SOUGHT(I)))
                END IF
20900           FORMAT ( 'Default= ',I9,' used for: ', A )
                INT_VALUE=VALUE(I,IVAL)
                INT_VALUE_MIN=VALUE_MIN(I)
                INT_VALUE_MAX=VALUE_MAX(I)
                IF (( error_level .GT. 0 )) THEN
                  WRITE(ERR,20910) VALUES_SOUGHT(I)(:lnblnk1(VALUES_SOUG
     *            HT(I))), INT_VALUE, INT_VALUE_MIN,INT_VALUE_MAX
                END IF
20910           FORMAT (A,'=', I9,' should be between ', I9,' and ', I9)
              END IF
              IF ((TYPE(I).EQ.1)) THEN
                IF (( error_level .GT. 0 )) THEN
                  WRITE(ERR,*) '************WARNING************'
                  WRITE(ERR,20920) DEFAULT(I), VALUES_SOUGHT(I)(:lnblnk1
     *            (VALUES_SOUGHT(I)))
20920             FORMAT ( 'Default= ',F12.6,' used for: ', A )
                  WRITE(ERR,20930) VALUES_SOUGHT(I)(:lnblnk1(VALUES_SOUG
     *            HT(I))), VALUE(I,IVAL), VALUE_MIN(I),VALUE_MAX(I)
20930             FORMAT (A,'=', F12.6,' should be between ', G14.6,' an
     *d ', G14.6)
                END IF
              END IF
              VALUE(I,IVAL)=DEFAULT(I)
            END IF
            IF((IVAL .EQ. NVALUE(I)))GO TO20872
            IF (((INDEX(TEXT,',').NE.0).OR.(lnblnk1(TEXT).EQ.0))) THEN
              IF (( idebug )) THEN
                write(i_log,*) ' A comma or a blank text found -> '
                write(i_log,*) ' searching for further input'
              END IF
              TEXT=TEXT(INDEX(TEXT,',')+1:)
20941         IF(lnblnk1(TEXT).NE.0)GO TO 20942
                IF (( idebug )) THEN
                  write(i_log,*) ' Empty text -> reading next line! '
                END IF
                LINE=LINE+1
                READ (UNITNUM,END=20880,ERR=20890,FMT='(A256)') TEXT
                length = len(text)
20951           IF(index(text,blank).NE.1)GO TO 20952
                  IF (( length .GE. 2 )) THEN
                    text=text(2:)
                  ELSE
                    GO TO20952
                  END IF
                  length = length - 1
                GO TO 20951
20952           CONTINUE
                ifound = INDEX(text,'#')
                IF (( ifound .GT. 1 )) THEN
                  text = text(1:ifound-1)
                ELSE
                  IF (( ifound .EQ. 1 )) THEN
                    text = blank
                  END IF
                END IF
                ifound = INDEX(text,';')
                IF (( ifound .GT. 1 )) THEN
                  text = text(1:ifound-1)
                ELSE
                  IF (( ifound .EQ. 1 )) THEN
                    text = blank
                  END IF
                END IF
                length = lnblnk1(TEXT)
                TEXT=TEXT(:length)
                origtext = text(:length)
                DO 20961 Kconvert=1,lnblnk1(text)
                  CURSOR=ICHAR(text(Kconvert:Kconvert))
                  IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
                    CURSOR=CURSOR-32
                    text(Kconvert:Kconvert)=CHAR(CURSOR)
                  END IF
20961           CONTINUE
20962           CONTINUE
                DO 20971 K=1,NMAX
                  vname1 = VALUES_SOUGHT(K)
                  length = lnblnk1(vname1)
                  IF (( length .GT. 0 )) THEN
                    length = len(vname1)
20981               IF(index(vname1,blank).NE.1)GO TO 20982
                      IF (( length .GE. 2 )) THEN
                        vname1=vname1(2:)
                      ELSE
                        GO TO20982
                      END IF
                      length = length - 1
                    GO TO 20981
20982               CONTINUE
                    DO 20991 Kconvert=1,lnblnk1(vname1)
                      CURSOR=ICHAR(vname1(Kconvert:Kconvert))
                      IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
                        CURSOR=CURSOR-32
                        vname1(Kconvert:Kconvert)=CHAR(CURSOR)
                      END IF
20991               CONTINUE
20992               CONTINUE
                    IF ((INDEX(TEXT,vname1(:length)).NE.0)) THEN
                      IF (( error_level .GT. 0 )) THEN
                        WRITE(ERR,*) '************ERROR************'
                        WRITE(ERR,*) 'VALUE SOUGHT: ',VALUES_SOUGHT(I)
                        WRITE(ERR,*) KEEPTEXT(:lnblnk1(KEEPTEXT)), '<--C
     *OMMA INDICATES ANOTHER INPUT'
                        WRITE(ERR,*) 'SEARCHED NEXT LINE: ', TEXT(:lnbln
     *                  k1(TEXT))
                        WRITE(ERR,*) 'BUT NO OTHER INPUT WAS DETECTED'
                      END IF
                      ERROR_FLAG=1
                      ERROR_FLAGS(I)=1
                    END IF
                  END IF
20971           CONTINUE
20972           CONTINUE
                IF (( idebug )) THEN
                  write(i_log,*) ' Next line: '
                  write(i_log,'(a,$)') ' text:     '
                  length = lnblnk1(text)
                  IF (( length .GT. 0 )) THEN
                    DO 21001 lll=1,length
                      write(i_log,'(a1,$)') text(lll:lll)
21001               CONTINUE
21002               CONTINUE
                    write(i_log,*)
                  END IF
                  write(i_log,'(a,$)') ' origtext: '
                  length = lnblnk1(origtext)
                  IF (( length .GT. 0 )) THEN
                    DO 21011 lll=1,length
                      write(i_log,'(a1,$)') origtext(lll:lll)
21011               CONTINUE
21012               CONTINUE
                    write(i_log,*)
                  END IF
                END IF
              GO TO 20941
20942         CONTINUE
            ELSE
              GO TO20872
            END IF
            IVAL=IVAL+1
          GO TO 20871
20872     CONTINUE
          IF (((NVALUE(I).NE.0).AND.(NVALUE(I).NE.IVAL))) THEN
            IF (( error_level .GT. 0 )) THEN
              WRITE (ERR,*) '**************ERROR**************'
              WRITE (ERR,*) 'VALUE SOUGHT: ', VALUES_SOUGHT(I)
              WRITE (ERR,*) 'ASKED FOR', NVALUE(I),' NUMERICAL INPUT(S)'
              WRITE (ERR,*) 'HOWEVER,', IVAL, ' WERE DETECTED'
            END IF
            ERROR_FLAG=1
            ERROR_FLAGS(I)=1
          ELSE
            NVALUE(I)=IVAL
          END IF
20880     CONTINUE
        END IF
        IF (((TYPE(I) .EQ. 2) .OR. (TYPE(I) .EQ. 3))) THEN
          IVAL=1
          IF (( idebug )) THEN
            write(i_log,*) ' Trying to read a string! '
          END IF
21021     CONTINUE
            IF (( idebug )) THEN
              write(i_log,*) ' In LOOP, ival = ',ival
            END IF
            IF ((lnblnk1(TEXT).EQ.0)) THEN
              IF (( error_level .GT. 0 )) THEN
                WRITE(ERR,*) '*************ERROR*************'
                WRITE (ERR,*) 'VALUE SOUGHT: ',VALUES_SOUGHT(I)
                WRITE (ERR,*) 'VALUE NOT THERE!!'
              END IF
              ERROR_FLAG=1
              ERROR_FLAGS(I)=1
              RETURN
            END IF
            IF ((vname(:ivname).EQ.'TITLE')) THEN
              TEXTPIECE=origtext
              GOTO 21030
            END IF
            iindex = INDEX(origtext,',')
            IF (( iindex .NE. 0 )) THEN
              TEXTPIECE=origtext(:iindex-1)
            ELSE
              TEXTPIECE=origtext
            END IF
21030       CONTINUE
            READ(TEXTPIECE,ERR=21040,FMT='(A256)') CHAR_VALUE(I,IVAL)
            length = len(CHAR_VALUE(I,IVAL))
21051       IF(index(CHAR_VALUE(I,IVAL),blank).NE.1)GO TO 21052
              IF (( length .GE. 2 )) THEN
                CHAR_VALUE(I,IVAL)=CHAR_VALUE(I,IVAL)(2:)
              ELSE
                GO TO21052
              END IF
              length = length - 1
            GO TO 21051
21052       CONTINUE
            IF (( idebug )) THEN
              write(i_log,*) ' Read the following char string: '
              length = lnblnk1(CHAR_VALUE(I,IVAL))
              IF (( length .GT. 0 )) THEN
                DO 21061 lll=1,length
                  write(i_log,'(a1,$)') CHAR_VALUE(I,IVAL)(lll:lll)
21061           CONTINUE
21062           CONTINUE
                write(i_log,*)
              END IF
            END IF
            IF ((TYPE(I) .EQ. 3)) THEN
              DO 21071 Kconvert=1,lnblnk1(CHAR_VALUE(I,IVAL))
                CURSOR=ICHAR(CHAR_VALUE(I,IVAL)(Kconvert:Kconvert))
                IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
                  CURSOR=CURSOR-32
                  CHAR_VALUE(I,IVAL)(Kconvert:Kconvert)=CHAR(CURSOR)
                END IF
21071         CONTINUE
21072         CONTINUE
              ALLOWED=.FALSE.
              DO 21081 K=0,5
                vname1 = ALLOWED_INPUTS(I,K)
                length = len(ALLOWED_INPUTS(I,K))
21091           IF(index(ALLOWED_INPUTS(I,K),blank).NE.1)GO TO 21092
                  IF (( length .GE. 2 )) THEN
                    ALLOWED_INPUTS(I,K)=ALLOWED_INPUTS(I,K)(2:)
                  ELSE
                    GO TO21092
                  END IF
                  length = length - 1
                GO TO 21091
21092           CONTINUE
                DO 21101 Kconvert=1,lnblnk1(ALLOWED_INPUTS(I,K))
                  CURSOR=ICHAR(ALLOWED_INPUTS(I,K)(Kconvert:Kconvert))
                  IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
                    CURSOR=CURSOR-32
                    ALLOWED_INPUTS(I,K)(Kconvert:Kconvert)=CHAR(CURSOR)
                  END IF
21101           CONTINUE
21102           CONTINUE
                IF ((ALLOWED_INPUTS(I,K).EQ.CHAR_VALUE(I,IVAL))) THEN
                  ALLOWED=.TRUE.
                  VALUE(I,IVAL)=K
                  IF (( idebug )) THEN
                    write(i_log,*) ' Found a allowed_value match ',k
                  END IF
                END IF
21081         CONTINUE
21082         CONTINUE
              IF ((.NOT.ALLOWED)) THEN
                WRITE(ERR,*) '*************ERROR*************'
                IF ((IVAL.NE.1)) THEN
                  WRITE (ERR,*) 'VALUE SOUGHT: ',VALUES_SOUGHT(I)
                  WRITE (ERR,*) 'SHOULD HAVE ONE INPUT ONLY'
                  WRITE (ERR,*) 'APPARENT STATE: COMMA INDICATING SECOND
     * VALUE'
                ELSE
                  WRITE (ERR,*) 'VALUE SOUGHT: ',VALUES_SOUGHT(I)
                  WRITE(ERR,*) 'INPUT-->', CHAR_VALUE(I,IVAL)(:lnblnk1(C
     *            HAR_VALUE(I,IVAL))), '<--NOT ALLOWED'
                  WRITE(ERR,*) 'OPTIONS ARE:'
                  WRITE(ERR,21110) (ALLOWED_INPUTS(I,K)(:lnblnk1(ALLOWED
     *            _INPUTS(I,K))),K=0,5)
                END IF
21110           FORMAT(A40)
                ERROR_FLAG=1
                ERROR_FLAGS(I)=1
              END IF
            END IF
            IF ((vname(:ivname).EQ.'TITLE')) THEN
              GO TO21022
            END IF
            DO 21121 K=1,LEN(KEEPTEXT)
              KEEPTEXT(K:K)=' '
21121       CONTINUE
21122       CONTINUE
            KEEPTEXT(:lnblnk1(TEXT))=TEXT
            iindex = INDEX(TEXT,',')
            IF (( iindex .NE. 0 .OR. lnblnk1(TEXT).EQ.0 )) THEN
              TEXT=TEXT(INDEX(TEXT,',')+1:)
              origtext=origtext(iindex+1:)
21131         IF(lnblnk1(TEXT).NE.0)GO TO 21132
                LINE=LINE+1
                READ (UNITNUM,ERR=21040,FMT='(A256)') TEXT
                length = len(text)
21141           IF(index(text,blank).NE.1)GO TO 21142
                  IF (( length .GE. 2 )) THEN
                    text=text(2:)
                  ELSE
                    GO TO21142
                  END IF
                  length = length - 1
                GO TO 21141
21142           CONTINUE
                ifound = INDEX(text,'#')
                IF (( ifound .GT. 1 )) THEN
                  text = text(1:ifound-1)
                ELSE
                  IF (( ifound .EQ. 1 )) THEN
                    text = blank
                  END IF
                END IF
                ifound = INDEX(text,';')
                IF (( ifound .GT. 1 )) THEN
                  text = text(1:ifound-1)
                ELSE
                  IF (( ifound .EQ. 1 )) THEN
                    text = blank
                  END IF
                END IF
                length = lnblnk1(TEXT)
                TEXT=TEXT(:length)
                origtext = text(:length)
                DO 21151 Kconvert=1,lnblnk1(text)
                  CURSOR=ICHAR(text(Kconvert:Kconvert))
                  IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
                    CURSOR=CURSOR-32
                    text(Kconvert:Kconvert)=CHAR(CURSOR)
                  END IF
21151           CONTINUE
21152           CONTINUE
                DO 21161 K=1,NMAX
                  vname1 = VALUES_SOUGHT(K)
                  length = lnblnk1(vname1)
                  IF (( length .GT. 0 )) THEN
                    length = len(vname1)
21171               IF(index(vname1,blank).NE.1)GO TO 21172
                      IF (( length .GE. 2 )) THEN
                        vname1=vname1(2:)
                      ELSE
                        GO TO21172
                      END IF
                      length = length - 1
                    GO TO 21171
21172               CONTINUE
                    DO 21181 Kconvert=1,lnblnk1(vname1)
                      CURSOR=ICHAR(vname1(Kconvert:Kconvert))
                      IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
                        CURSOR=CURSOR-32
                        vname1(Kconvert:Kconvert)=CHAR(CURSOR)
                      END IF
21181               CONTINUE
21182               CONTINUE
                    IF ((INDEX(TEXT,vname1(:length)).NE.0)) THEN
                      WRITE(ERR,*) '************ERROR************'
                      WRITE(ERR,*) 'VALUE SOUGHT: ',VALUES_SOUGHT(I)
                      WRITE(ERR,*) KEEPTEXT(:lnblnk1(KEEPTEXT)), '<--COM
     *MA INDICATES ANOTHER INPUT'
                      WRITE(ERR,*) 'SEARCHED NEXT LINE: ', TEXT(:lnblnk1
     *                (TEXT))
                      WRITE(ERR,*) 'BUT NO OTHER INPUT WAS DETECTED'
                      ERROR_FLAG=1
                      ERROR_FLAGS(I)=1
                    END IF
                  END IF
21161           CONTINUE
21162           CONTINUE
              GO TO 21131
21132         CONTINUE
            ELSE
              GO TO21022
            END IF
            IVAL=IVAL+1
          GO TO 21021
21022     CONTINUE
          IF (((NVALUE(I).NE.0).AND.(NVALUE(I).NE.IVAL))) THEN
            IF (( error_level .GT. 0 )) THEN
              WRITE (ERR,*) '*******************ERROR*******************
     *'
              WRITE (ERR,*) 'VALUE SOUGHT: ', VALUES_SOUGHT(I)
              WRITE (ERR,*) 'ASKED FOR', NVALUE(I),' INPUT(S)'
              WRITE (ERR,*) 'HOWEVER,', IVAL, ' WERE DETECTED'
            END IF
            ERROR_FLAG=1
            ERROR_FLAGS(I)=1
          ELSE
            NVALUE(I)=IVAL
          END IF
        END IF
        goto 20690
20730   IF (( error_level .GT. 0 )) THEN
          WRITE (ERR,*) '******************ERROR***********************'
          WRITE (ERR,*) 'END OF FILE REACHED BUT VALUE SOUGHT NOT FOUND'
          WRITE (ERR,*) 'PROBABLY A MISSING/MISSPELLED END DELIMETER'
          WRITE (ERR,*) 'VALUE SOUGHT: >>', VALUES_SOUGHT(I)(:lnblnk1(VA
     *    LUES_SOUGHT(I))),'<<'
          WRITE (ERR,*) 'END DELIMETER: >>', DELIM_END(:lnblnk1(DELIM_EN
     *    D)),'<<'
        END IF
        ERROR_FLAG=1
        ERROR_FLAGS(I)=1
        goto 20690
20750   IF (( error_level .GT. 0 )) THEN
          WRITE (ERR,*) '******************ERROR***********************'
          WRITE (ERR,*) 'END OF FILE REACHED BUT VALUE SOUGHT NOT FOUND'
          WRITE (ERR,*) 'PROBABLY A MISSING/MISSPELLED START DELIMETER'
          WRITE (ERR,*) 'VALUE SOUGHT: >>', VALUES_SOUGHT(I)(:lnblnk1(VA
     *    LUES_SOUGHT(I))),'<<'
          WRITE (ERR,*) 'START DELIMETER: >>', DELIM_START(:lnblnk1(DELI
     *    M_START)),'<<'
        END IF
        ERROR_FLAG=1
        ERROR_FLAGS(I)=1
        goto 20690
20890   IF (( error_level .GT. 0 )) THEN
          WRITE (ERR,*) '***************ERROR***************'
          IF ((IVAL.GT.1)) THEN
            J=IVAL
          ELSE
            J=1
          END IF
          WRITE (ERR,*) 'ERROR READING VALUE SOUGHT: ', VALUES_SOUGHT(I)
          WRITE (ERR,*) 'LINE #',LINE
          WRITE (ERR,*) 'COULD NOT READ THE VALUE!!'
          WRITE (ERR,*) 'SHOULD BE AN INTEGER OR A REAL...'
          WRITE (ERR,*) 'IS THERE AN EXTRA COMMA AT THE END OF YOUR INPU
     *T?'
        END IF
        ERROR_FLAG=1
        ERROR_FLAGS(I)=1
        GOTO 20690
21040   IF (( error_level .GT. 0 )) THEN
          WRITE (ERR,*) '***************ERROR***************'
          WRITE (ERR,*) 'ERROR READING VALUE SOUGHT: ', VALUES_SOUGHT(I)
          WRITE (ERR,*) 'LINE #',LINE
          WRITE (ERR,*) 'COULD NOT READ THE STRING !!'
        END IF
        ERROR_FLAG=1
        ERROR_FLAGS(I)=1
20690   CONTINUE
20681 CONTINUE
20682 CONTINUE
      RETURN
20740 WRITE (ERR,*) '***************ERROR***************'
      WRITE (ERR,*) 'ERROR READING TEXT ', TEXT,' ON LINE ',LINE
      goto 21190
21190 CONTINUE
      ERROR_FLAG=1
      ERROR_FLAGS(I)=1
      RETURN
      entry get_input_set_error_level(the_level)
      error_level = the_level
      return
      END
      subroutine get_transport_parameter(ounit)
      implicit none
      character*80 line
      character*512 toUpper
      integer*4 ounit
      COMMON/GetInput/ ALLOWED_INPUTS(100,0:5),   VALUES_SOUGHT(100),  C
     *HAR_VALUE(100,100),  VALUE(100,100),  DEFAULT(100),  VALUE_MIN(100
     *),  VALUE_MAX(100),  NVALUE(100),  TYPE(100),      ERROR_FLAGS(100
     *),   i_errors,  NMIN, NMAX,   ERROR_FLAG,  DELIMETER
      character ALLOWED_INPUTS*64,VALUES_SOUGHT*64, CHAR_VALUE*256,DELIM
     *ETER*64
      real*8 VALUE,DEFAULT,VALUE_MIN,VALUE_MAX
      integer*4 NVALUE,TYPE,NMIN,NMAX,ERROR_FLAG,ERROR_FLAGS,i_errors
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      common/ET_control/ smaxir(3000),estepe,ximax,  skindepth_for_bca,t
     *ransport_algorithm, bca_algorithm,exact_bca,spin_effects
      real*8 smaxir,  estepe,  ximax,      skindepth_for_bca
      integer*4 transport_algorithm, bca_algorithm
      logical exact_bca,  spin_effects
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L(3000),IPHTER(3000)
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      common/compton_data/ iz_array(1538),  be_array(1538),  Jo_array(15
     *38),  erfJo_array(1538),   ne_array(1538),  shn_array(1538),
     *shell_array(200,12), eno_array(200,12), eno_atbin_array(200,12), n
     *_shell(12), radc_flag,  ibcmp(3000)
      integer*4 iz_array,ne_array,shn_array,eno_atbin_array, shell_array
     *,n_shell,radc_flag
      real*8 be_array,Jo_array,erfJo_array,eno_array
      integer*2 ibcmp
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      common/eii_data/ eii_xsection_a( 10000),  eii_xsection_b( 10000),
     * eii_cons(12), eii_a(40),  eii_b(40),  eii_L_factor,  eii_z(40),
     *eii_sh(40),  eii_nshells(100),  eii_nsh(12),  eii_first(12,50),  e
     *ii_no(12,50),  eii_flag
      real*8 eii_xsection_a,eii_xsection_b,eii_a,eii_b,eii_cons,eii_L_fa
     *ctor
      integer*4 eii_z,eii_sh,eii_nshells
      integer*4 eii_first,eii_no
      integer*4 eii_elements,eii_flag,eii_nsh
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/rayleigh_inputs/iray_ff_media(12),iray_ff_file(12)
      character*24 iray_ff_media
      character*128 iray_ff_file
      common/emf_inputs/ExIN,EyIN,EzIN,  EMLMTIN,  BxIN, ByIN, BzIN,  Bx
     *, By, Bz,  Bx_new, By_new, Bz_new,  emfield_on
      real*8 ExIN,EyIN,EzIN, EMLMTIN, BxIN,ByIN,BzIN, Bx,By,Bz, Bx_new,B
     *y_new,Bz_new
      logical emfield_on
      common/x_options/eadl_relax,  mcdf_pe_xsections
      logical eadl_relax, mcdf_pe_xsections
      integer*4 ival,num_ecut,num_pcut,num_smax,num_incoh,num_radc,num_c
     *oh,num_relax, num_pe_ang,num_brems_ang,num_brems_cs,num_pair_cs, n
     *um_ffmed,num_ffiles, num_pair_ang,num_eii,num_eii_L,num_estepe,num
     *_ximax,num_triplet, num_pxsec,num_pxsec_out, num_cxsec, num_photon
     *uc, num_photonuc_xsec, num_efield, num_bfield, num_emlmt, num_spin
     *,num_bca,num_alg,num_skin,itmp,iitmp,i,j,k,istart,iend, egs_open_f
     *ile,lnblnk1
      logical ecut_inregions,pcut_inregions,smax_inregions, incoh_inregi
     *ons,coh_inregions,relax_inregions, pe_inregions,aux_inregions,phot
     *onuc_inregions
      character*15 output_strings(14)
      save output_strings,line
      save ecut_inregions,pcut_inregions,smax_inregions, incoh_inregions
     *,coh_inregions,relax_inregions, pe_inregions,aux_inregions,photonu
     *c_inregions, num_photonuc
      DO 21201 k=1,80
        line(k:k) = '='
21201 CONTINUE
21202 CONTINUE
      delimeter = 'MC TRANSPORT PARAMETER'
      ival = 0
      ecut_inregions=.false.
      pcut_inregions=.false.
      smax_inregions=.false.
      incoh_inregions=.false.
      coh_inregions=.false.
      relax_inregions=.false.
      pe_inregions=.false.
      aux_inregions=.false.
      photonuc_inregions=.false.
      i_errors=15
      i_errors=egs_open_file(i_errors,0,1,'.errors')
      write(i_errors,*) ' If you are not trying to reset transport param
     *eters, '
      write(i_errors,*) ' ignore all the output until the message '
      write(i_errors,*) ' ******************** end input transport param
     *eter *********************** '
      write(i_errors,*)
      ival = ival + 1
      num_ecut = ival
      values_sought(ival) = 'Global ECUT'
      nvalue(ival) = 1
      type(ival) = 1
      value_min(ival) = 0
      value_max(ival) = 1e15
      default(ival) = 0.
      ival = ival + 1
      num_pcut = ival
      values_sought(ival) = 'Global PCUT'
      nvalue(ival) = 1
      type(ival) = 1
      value_min(ival) = 0
      value_max(ival) = 1e15
      default(ival) = 0.
      ival = ival + 1
      num_smax = ival
      values_sought(ival) = 'Global SMAX'
      nvalue(ival) = 1
      type(ival) = 1
      value_min(ival) = 0
      value_max(ival) = 1e15
      default(ival) = 1e10
      ival = ival + 1
      num_incoh = ival
      values_sought(ival) = 'Bound Compton scattering'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'Off'
      allowed_inputs(ival,1) = 'On'
      allowed_inputs(ival,2) = 'On in Regions'
      allowed_inputs(ival,3) = 'Off in Regions'
      allowed_inputs(ival,4) = 'Simple'
      allowed_inputs(ival,5) = 'norej'
      ival = ival + 1
      num_radc = ival
      values_sought(ival) = 'Radiative Compton corrections'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'Off'
      allowed_inputs(ival,1) = 'On'
      ival = ival + 1
      num_coh = ival
      values_sought(ival) = 'Rayleigh scattering'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'Off'
      allowed_inputs(ival,1) = 'On'
      allowed_inputs(ival,2) = 'On in Regions'
      allowed_inputs(ival,3) = 'Off in Regions'
      allowed_inputs(ival,4) = 'custom'
      ival = ival + 1
      num_relax = ival
      values_sought(ival) = 'Atomic relaxations'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'Off'
      allowed_inputs(ival,1) = 'On'
      allowed_inputs(ival,2) = 'On in Regions'
      allowed_inputs(ival,3) = 'Off in Regions'
      allowed_inputs(ival,4) = 'eadl'
      allowed_inputs(ival,5) = 'simple'
      ival = ival + 1
      num_pe_ang = ival
      values_sought(ival) = 'Photoelectron angular sampling'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'Off'
      allowed_inputs(ival,1) = 'On'
      allowed_inputs(ival,2) = 'On in Regions'
      allowed_inputs(ival,3) = 'Off in Regions'
      ival = ival + 1
      num_brems_ang = ival
      values_sought(ival) = 'Brems angular sampling'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'Simple'
      allowed_inputs(ival,1) = 'KM'
      ival = ival + 1
      num_brems_cs = ival
      values_sought(ival) = 'Brems cross sections'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'BH'
      allowed_inputs(ival,1) = 'NIST'
      allowed_inputs(ival,2) = 'NRC'
      ival = ival + 1
      num_pair_ang = ival
      values_sought(ival) = 'Pair angular sampling'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'Off'
      allowed_inputs(ival,1) = 'Simple'
      allowed_inputs(ival,2) = 'KM'
      allowed_inputs(ival,3) = 'Uniform'
      allowed_inputs(ival,4) = 'Blend'
      ival = ival + 1
      num_pair_cs = ival
      values_sought(ival) = 'Pair cross sections'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'BH'
      allowed_inputs(ival,1) = 'NRC'
      ival = ival + 1
      num_triplet = ival
      values_sought(ival) = 'Triplet production'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'Off'
      allowed_inputs(ival,1) = 'On'
      ival = ival + 1
      num_spin = ival
      values_sought(ival) = 'Spin effects'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'Off'
      allowed_inputs(ival,1) = 'On'
      ival = ival + 1
      num_eii = ival
      values_sought(ival) = 'Electron Impact Ionization'
      nvalue(ival) = 1
      type(ival) = 2
      ival = ival + 1
      num_eii_L= ival
      values_sought(ival) = 'scale L EII cross-sections'
      nvalue(ival) = 1
      type(ival) = 1
      value_min(ival) = 0.0
      value_max(ival) = 1.0e+9
      default(ival) = 1.0
      ival = ival + 1
      num_estepe = ival
      values_sought(ival) = 'ESTEPE'
      nvalue(ival) = 1
      type(ival) = 1
      value_min(ival) = 1e-5
      value_max(ival) = 1
      default(ival) = 0.25
      ival = ival + 1
      num_ximax = ival
      values_sought(ival) = 'XImax'
      nvalue(ival) = 1
      type(ival) = 1
      value_min(ival) = 0
      value_max(ival) = 1
      default(ival) = 0.5
      ival = ival + 1
      num_bca = ival
      values_sought(ival) = 'Boundary crossing algorithm'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'Exact'
      allowed_inputs(ival,1) = 'PRESTA-I'
      ival = ival + 1
      num_skin = ival
      values_sought(ival) = 'Skin depth for BCA'
      nvalue(ival) = 1
      type(ival) = 1
      value_min(ival) = -1
      value_max(ival) = 1e15
      default(ival) = 3
      ival = ival + 1
      num_alg = ival
      values_sought(ival) = 'Electron-step algorithm'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'PRESTA-II'
      allowed_inputs(ival,1) = 'PRESTA-I'
      ival = ival + 1
      num_pxsec = ival
      values_sought(ival) = 'Photon cross sections'
      nvalue(ival) = 1
      type(ival) = 2
      ival = ival + 1
      num_pxsec_out = ival
      values_sought(ival) = 'Photon cross-sections output'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'Off'
      allowed_inputs(ival,1) = 'On'
      ival = ival + 1
      num_cxsec = ival
      values_sought(ival) = 'Compton cross sections'
      nvalue(ival) = 1
      type(ival) = 2
      ival = ival + 1
      num_efield = ival
      values_sought(ival) = 'Electric Field'
      nvalue(ival) = 3
      type(ival) = 1
      value_min(ival) = -1e15
      value_max(ival) = 1e15
      default(ival) = 0
      ival = ival + 1
      num_bfield = ival
      values_sought(ival) = 'Magnetic Field'
      nvalue(ival) = 3
      type(ival) = 1
      value_min(ival) = -1e10
      value_max(ival) = 1e10
      default(ival) = 0
      ival = ival + 1
      num_emlmt = ival
      values_sought(ival) = 'EM ESTEPE'
      nvalue(ival) = 1
      type(ival) = 1
      value_min(ival) = 0.0
      value_max(ival) = 1.0
      default(ival) = 0.02
      ival = ival + 1
      num_photonuc = ival
      values_sought(ival) = 'Photonuclear attenuation'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'Off'
      allowed_inputs(ival,1) = 'On'
      allowed_inputs(ival,2) = 'On in Regions'
      allowed_inputs(ival,3) = 'Off in Regions'
      ival = ival + 1
      num_photonuc_xsec = ival
      values_sought(ival) = 'Photonuclear cross sections'
      nvalue(ival) = 1
      type(ival) = 2
      Nmin = num_ecut
      Nmax = num_photonuc_xsec
      CALL GET_INPUT
      IF (( error_flags(num_ecut) .EQ. 0 )) THEN
        DO 21211 j=1,3000
          ecut(j) = value(num_ecut,1)
21211   CONTINUE
21212   CONTINUE
      END IF
      IF (( error_flags(num_pcut) .EQ. 0 )) THEN
        DO 21221 j=1,3000
          pcut(j) = value(num_pcut,1)
21221   CONTINUE
21222   CONTINUE
      END IF
      IF (( error_flags(num_smax) .EQ. 0 )) THEN
        DO 21231 j=1,3000
          smaxir(j) = value(num_smax,1)
21231   CONTINUE
21232   CONTINUE
      END IF
      IF (( error_flags(num_brems_ang) .EQ. 0 )) THEN
        ibrdst = value(num_brems_ang,1)
      END IF
      IF (( error_flags(num_brems_cs) .EQ. 0 )) THEN
        ibr_nist = value(num_brems_cs,1)
      END IF
      IF (( error_flags(num_radc) .EQ. 0 )) THEN
        radc_flag = value(num_radc,1)
      END IF
      IF (( error_flags(num_pair_ang) .EQ. 0 )) THEN
        iprdst = value(num_pair_ang,1)
      END IF
      IF (( error_flags(num_pair_cs) .EQ. 0 )) THEN
        pair_nrc = value(num_pair_cs,1)
      END IF
      IF (( error_flags(num_triplet) .EQ. 0 )) THEN
        itriplet = value(num_triplet,1)
      END IF
      IF (( error_flags(num_eii_L) .EQ. 0 )) THEN
        eii_L_factor = value(num_eii_L,1)
      END IF
      IF (( error_flags(num_estepe) .EQ. 0 )) THEN
        estepe = value(num_estepe,1)
      END IF
      IF (( error_flags(num_ximax) .EQ. 0 )) THEN
        ximax = value(num_ximax,1)
      END IF
      IF (( error_flags(num_bca) .EQ. 0 )) THEN
        bca_algorithm = value(num_bca,1)
        IF (( bca_algorithm .EQ. 0 )) THEN
          exact_bca = .true.
        END IF
      END IF
      IF (( error_flags(num_alg) .EQ. 0 )) THEN
        transport_algorithm = value(num_alg,1)
      END IF
      IF (( error_flags(num_skin) .EQ. 0 )) THEN
        skindepth_for_bca = value(num_skin,1)
      END IF
      IF (( error_flags(num_spin) .EQ. 0 )) THEN
        itmp = value(num_spin,1)
        IF (( itmp .EQ. 1 )) THEN
          spin_effects = .true.
        ELSE
          spin_effects = .false.
        END IF
      END IF
      IF (( error_flags(num_eii) .EQ. 0 )) THEN
        eii_xfile = char_value(num_eii,1)
        eii_flag=1
        IF ((toUpper(eii_xfile(:lnblnk1(eii_xfile))).eq.'ON' .OR. toUppe
     *  r(eii_xfile(:lnblnk1(eii_xfile))).eq.'IK' )) THEN
          eii_xfile = 'ik'
          write(i_log,*) '==> Using default EII data compilation ', eii_
     *    xfile(:lnblnk1(eii_xfile))
        ELSE IF((toUpper(eii_xfile(:lnblnk1(eii_xfile))).eq.'OFF')) THEN
          eii_xfile='Off'
          eii_flag=0
        ELSE
          write(i_log,'(/a)') '***************** Warning: '
          write(i_log,*) '==> Using non-default EII data compilation ',
     *    eii_xfile(:lnblnk1(eii_xfile))
        END IF
      END IF
      IF (( error_flags(num_pxsec) .EQ. 0 )) THEN
        photon_xsections = char_value(num_pxsec,1)
        IF (( toUpper( photon_xsections(:lnblnk1(photon_xsections)) ) .E
     *  Q. 'MCDF-XCOM' )) THEN
          mcdf_pe_xsections = .true.
          photon_xsections = 'xcom'
        ELSE IF(( toUpper( photon_xsections(:lnblnk1(photon_xsections))
     *  ) .EQ. 'MCDF-EPDL' )) THEN
          mcdf_pe_xsections = .true.
          photon_xsections = 'epdl'
        ELSE
          mcdf_pe_xsections = .false.
        END IF
      END IF
      IF (( error_flags(num_pxsec_out) .EQ. 0 )) THEN
        xsec_out = value(num_pxsec_out,1)
      END IF
      IF (( error_flags(num_cxsec) .EQ. 0 )) THEN
        comp_xsections = char_value(num_cxsec,1)
      END IF
      IF (( error_flags(num_photonuc_xsec) .EQ. 0 )) THEN
        photonuc_xsections = char_value(num_photonuc_xsec,1)
      END IF
      IF (( error_flags(num_efield) .EQ. 0 )) THEN
        ExIN = value(num_efield,1)
        EyIN = value(num_efield,2)
        EzIN = value(num_efield,3)
        IF (( error_flags(num_emlmt) .EQ. 0 )) THEN
          EMLMTIN=value(num_emlmt,1)
        END IF
        IF (( ExIN**2+EyIN**2+EzIN**2 .GT. 0 )) THEN
          emfield_on=.true.
        END IF
      END IF
      IF (( error_flags(num_bfield) .EQ. 0 )) THEN
        BxIN = value(num_bfield,1)
        ByIN = value(num_bfield,2)
        BzIN = value(num_bfield,3)
        Bx=BxIN
        By=ByIN
        Bz=BzIN
        Bx_new=BxIN
        By_new=ByIN
        Bz_new=BzIN
        IF (( error_flags(num_emlmt) .EQ. 0 )) THEN
          EMLMTIN=value(num_emlmt,1)
        END IF
        IF (( BxIN**2+ByIN**2+BzIN**2 .GT. 0 )) THEN
          emfield_on=.true.
        END IF
      END IF
      IF (( error_flags(num_coh) .EQ. 0 )) THEN
        IF ((value(num_coh,1) .EQ. 4)) THEN
          write(*,'(/a/)') ' ===> custom ff requested!'
          ival = ival + 1
          num_ffmed = ival
          values_sought(ival) = 'ff media names'
          type(ival) = 2
          nvalue(ival) = 0
          ival = ival + 1
          num_ffiles = ival
          values_sought(ival) = 'ff file names'
          type(ival) = 2
          nvalue(ival) = 0
          Nmin = num_ffmed
          Nmax = num_ffiles
          CALL GET_INPUT
          IF (( error_flags(num_ffmed) .GT. 0 )) THEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,'(a/,a,I3)') 'Error reading custom ff! Terminati
     *ng ...', ' error_flag = ', error_flags(num_ffmed)
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          IF (( error_flags(num_ffiles) .GT. 0 )) THEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,'(a/,a,I3)') 'Error reading ff file names! Termi
     *nating ...', ' error_flag = ', error_flags(num_ffiles)
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          IF ((nvalue(num_ffmed).GT.12)) THEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,'(a,a,i3,a)') '***** Number of media with custom
     * ff larger ', 'than maximum number of media $MXMED = ',12, ' incre
     *ase $MXMED and try again!!!'
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          DO 21241 i=1,nvalue(num_ffmed)
            iray_ff_media(i) = char_value(num_ffmed,i)
            iray_ff_file(i) = char_value(num_ffiles,i)
21241     CONTINUE
21242     CONTINUE
          value(num_coh,1) = 1
        END IF
        write(*,'(/)')
      END IF
      aux_inregions = .false.
      IF (( error_flags(num_incoh) .EQ. 0 )) THEN
        write(i_log,*) 'Bound Compton start region'
        itmp = value(num_incoh,1)
        IF (( itmp .EQ. 2 .OR. itmp .EQ. 3 )) THEN
          ival = ival + 1
          values_sought(ival) = 'Bound Compton start region'
          nvalue(ival) = 0
          type(ival) = 0
          value_min(ival) = 1
          value_max(ival) = 3000
          default(ival) = 1
          ival = ival + 1
          values_sought(ival) = 'Bound Compton stop region'
          nvalue(ival) = 0
          type(ival) = 0
          value_min(ival) = 1
          value_max(ival) = 3000
          default(ival) = 1
          Nmin = ival-1
          Nmax = ival
          CALL GET_INPUT
          IF (( error_flags(ival-1) .EQ. 0 .AND. error_flags(ival) .EQ.
     *    0 )) THEN
            IF (( nvalue(ival) .EQ. nvalue(ival-1) )) THEN
              iitmp = itmp-2
              DO 21251 j=1,3000
                ibcmp(j) = iitmp
21251         CONTINUE
21252         CONTINUE
              iitmp = 1 - iitmp
              DO 21261 k=1,nvalue(ival)
                istart = value(ival-1,k)
                iend = value(ival,k)
                write(i_log,*) 'Bound Compton start region',istart
                write(i_log,*) 'Bound Compton stop region',iend
                IF (( istart .LE. iend )) THEN
                  DO 21271 j=istart,iend
                    ibcmp(j) = iitmp
21271             CONTINUE
21272             CONTINUE
                  aux_inregions = .true.
                END IF
21261         CONTINUE
21262         CONTINUE
            ELSE
              value(num_incoh,1) = ibcmp(1)
            END IF
          ELSE
            value(num_incoh,1) = ibcmp(1)
          END IF
        ELSE
          IF((itmp .GT. 3))itmp = itmp-2
          write(i_log,*) ' Setting all to ',itmp
          DO 21281 j=1,3000
            ibcmp(j) = itmp
21281     CONTINUE
21282     CONTINUE
        END IF
      ELSE
        IF ((ibcmp(1) .EQ. 2 .OR. ibcmp(1) .EQ. 3)) THEN
          value(num_incoh,1) = ibcmp(1)+2
        ELSE
          value(num_incoh,1) = ibcmp(1)
        END IF
      END IF
      incoh_inregions = aux_inregions
      aux_inregions = .false.
      IF (( error_flags(num_coh) .EQ. 0 )) THEN
        write(i_log,*) 'Rayleigh start region'
        itmp = value(num_coh,1)
        IF (( itmp .EQ. 2 .OR. itmp .EQ. 3 )) THEN
          ival = ival + 1
          values_sought(ival) = 'Rayleigh start region'
          nvalue(ival) = 0
          type(ival) = 0
          value_min(ival) = 1
          value_max(ival) = 3000
          default(ival) = 1
          ival = ival + 1
          values_sought(ival) = 'Rayleigh stop region'
          nvalue(ival) = 0
          type(ival) = 0
          value_min(ival) = 1
          value_max(ival) = 3000
          default(ival) = 1
          Nmin = ival-1
          Nmax = ival
          CALL GET_INPUT
          IF (( error_flags(ival-1) .EQ. 0 .AND. error_flags(ival) .EQ.
     *    0 )) THEN
            IF (( nvalue(ival) .EQ. nvalue(ival-1) )) THEN
              iitmp = itmp-2
              DO 21291 j=1,3000
                iraylr(j) = iitmp
21291         CONTINUE
21292         CONTINUE
              iitmp = 1 - iitmp
              DO 21301 k=1,nvalue(ival)
                istart = value(ival-1,k)
                iend = value(ival,k)
                write(i_log,*) 'Rayleigh start region',istart
                write(i_log,*) 'Rayleigh stop region',iend
                IF (( istart .LE. iend )) THEN
                  DO 21311 j=istart,iend
                    iraylr(j) = iitmp
21311             CONTINUE
21312             CONTINUE
                  aux_inregions = .true.
                END IF
21301         CONTINUE
21302         CONTINUE
            ELSE
              value(num_coh,1) = iraylr(1)
            END IF
          ELSE
            value(num_coh,1) = iraylr(1)
          END IF
        ELSE
          IF((itmp .GT. 3))itmp = itmp-2
          write(i_log,*) ' Setting all to ',itmp
          DO 21321 j=1,3000
            iraylr(j) = itmp
21321     CONTINUE
21322     CONTINUE
        END IF
      ELSE
        IF ((iraylr(1) .EQ. 2 .OR. iraylr(1) .EQ. 3)) THEN
          value(num_coh,1) = iraylr(1)+2
        ELSE
          value(num_coh,1) = iraylr(1)
        END IF
      END IF
      coh_inregions = aux_inregions
      aux_inregions = .false.
      IF (( error_flags(num_relax) .EQ. 0 )) THEN
        write(i_log,*) 'Relaxations start region'
        itmp = value(num_relax,1)
        IF (( itmp .EQ. 2 .OR. itmp .EQ. 3 )) THEN
          ival = ival + 1
          values_sought(ival) = 'Relaxations start region'
          nvalue(ival) = 0
          type(ival) = 0
          value_min(ival) = 1
          value_max(ival) = 3000
          default(ival) = 1
          ival = ival + 1
          values_sought(ival) = 'Relaxations stop region'
          nvalue(ival) = 0
          type(ival) = 0
          value_min(ival) = 1
          value_max(ival) = 3000
          default(ival) = 1
          Nmin = ival-1
          Nmax = ival
          CALL GET_INPUT
          IF (( error_flags(ival-1) .EQ. 0 .AND. error_flags(ival) .EQ.
     *    0 )) THEN
            IF (( nvalue(ival) .EQ. nvalue(ival-1) )) THEN
              iitmp = itmp-2
              DO 21331 j=1,3000
                iedgfl(j) = iitmp
21331         CONTINUE
21332         CONTINUE
              iitmp = 1 - iitmp
              DO 21341 k=1,nvalue(ival)
                istart = value(ival-1,k)
                iend = value(ival,k)
                write(i_log,*) 'Relaxations start region',istart
                write(i_log,*) 'Relaxations stop region',iend
                IF (( istart .LE. iend )) THEN
                  DO 21351 j=istart,iend
                    iedgfl(j) = iitmp
21351             CONTINUE
21352             CONTINUE
                  aux_inregions = .true.
                END IF
21341         CONTINUE
21342         CONTINUE
            ELSE
              value(num_relax,1) = iedgfl(1)
            END IF
          ELSE
            value(num_relax,1) = iedgfl(1)
          END IF
        ELSE
          IF((itmp .GT. 3))itmp = itmp-2
          write(i_log,*) ' Setting all to ',itmp
          DO 21361 j=1,3000
            iedgfl(j) = itmp
21361     CONTINUE
21362     CONTINUE
        END IF
      ELSE
        IF ((iedgfl(1) .EQ. 2 .OR. iedgfl(1) .EQ. 3)) THEN
          value(num_relax,1) = iedgfl(1)+2
        ELSE
          value(num_relax,1) = iedgfl(1)
        END IF
      END IF
      relax_inregions = aux_inregions
      aux_inregions = .false.
      IF (( error_flags(num_pe_ang) .EQ. 0 )) THEN
        write(i_log,*) 'PE sampling start region'
        itmp = value(num_pe_ang,1)
        IF (( itmp .EQ. 2 .OR. itmp .EQ. 3 )) THEN
          ival = ival + 1
          values_sought(ival) = 'PE sampling start region'
          nvalue(ival) = 0
          type(ival) = 0
          value_min(ival) = 1
          value_max(ival) = 3000
          default(ival) = 1
          ival = ival + 1
          values_sought(ival) = 'PE sampling stop region'
          nvalue(ival) = 0
          type(ival) = 0
          value_min(ival) = 1
          value_max(ival) = 3000
          default(ival) = 1
          Nmin = ival-1
          Nmax = ival
          CALL GET_INPUT
          IF (( error_flags(ival-1) .EQ. 0 .AND. error_flags(ival) .EQ.
     *    0 )) THEN
            IF (( nvalue(ival) .EQ. nvalue(ival-1) )) THEN
              iitmp = itmp-2
              DO 21371 j=1,3000
                iphter(j) = iitmp
21371         CONTINUE
21372         CONTINUE
              iitmp = 1 - iitmp
              DO 21381 k=1,nvalue(ival)
                istart = value(ival-1,k)
                iend = value(ival,k)
                write(i_log,*) 'PE sampling start region',istart
                write(i_log,*) 'PE sampling stop region',iend
                IF (( istart .LE. iend )) THEN
                  DO 21391 j=istart,iend
                    iphter(j) = iitmp
21391             CONTINUE
21392             CONTINUE
                  aux_inregions = .true.
                END IF
21381         CONTINUE
21382         CONTINUE
            ELSE
              value(num_pe_ang,1) = iphter(1)
            END IF
          ELSE
            value(num_pe_ang,1) = iphter(1)
          END IF
        ELSE
          IF((itmp .GT. 3))itmp = itmp-2
          write(i_log,*) ' Setting all to ',itmp
          DO 21401 j=1,3000
            iphter(j) = itmp
21401     CONTINUE
21402     CONTINUE
        END IF
      ELSE
        IF ((iphter(1) .EQ. 2 .OR. iphter(1) .EQ. 3)) THEN
          value(num_pe_ang,1) = iphter(1)+2
        ELSE
          value(num_pe_ang,1) = iphter(1)
        END IF
      END IF
      pe_inregions = aux_inregions
      aux_inregions = .false.
      IF (( error_flags(num_photonuc) .EQ. 0 )) THEN
        write(i_log,*) 'Photonuclear start region'
        itmp = value(num_photonuc,1)
        IF (( itmp .EQ. 2 .OR. itmp .EQ. 3 )) THEN
          ival = ival + 1
          values_sought(ival) = 'Photonuclear start region'
          nvalue(ival) = 0
          type(ival) = 0
          value_min(ival) = 1
          value_max(ival) = 3000
          default(ival) = 1
          ival = ival + 1
          values_sought(ival) = 'Photonuclear stop region'
          nvalue(ival) = 0
          type(ival) = 0
          value_min(ival) = 1
          value_max(ival) = 3000
          default(ival) = 1
          Nmin = ival-1
          Nmax = ival
          CALL GET_INPUT
          IF (( error_flags(ival-1) .EQ. 0 .AND. error_flags(ival) .EQ.
     *    0 )) THEN
            IF (( nvalue(ival) .EQ. nvalue(ival-1) )) THEN
              iitmp = itmp-2
              DO 21411 j=1,3000
                iphotonucr(j) = iitmp
21411         CONTINUE
21412         CONTINUE
              iitmp = 1 - iitmp
              DO 21421 k=1,nvalue(ival)
                istart = value(ival-1,k)
                iend = value(ival,k)
                write(i_log,*) 'Photonuclear start region',istart
                write(i_log,*) 'Photonuclear stop region',iend
                IF (( istart .LE. iend )) THEN
                  DO 21431 j=istart,iend
                    iphotonucr(j) = iitmp
21431             CONTINUE
21432             CONTINUE
                  aux_inregions = .true.
                END IF
21421         CONTINUE
21422         CONTINUE
            ELSE
              value(num_photonuc,1) = iphotonucr(1)
            END IF
          ELSE
            value(num_photonuc,1) = iphotonucr(1)
          END IF
        ELSE
          IF((itmp .GT. 3))itmp = itmp-2
          write(i_log,*) ' Setting all to ',itmp
          DO 21441 j=1,3000
            iphotonucr(j) = itmp
21441     CONTINUE
21442     CONTINUE
        END IF
      ELSE
        IF ((iphotonucr(1) .EQ. 2 .OR. iphotonucr(1) .EQ. 3)) THEN
          value(num_photonuc,1) = iphotonucr(1)+2
        ELSE
          value(num_photonuc,1) = iphotonucr(1)
        END IF
      END IF
      photonuc_inregions = aux_inregions
      aux_inregions = .false.
      ival = ival + 1
      num_ecut = ival
      values_sought(ival) = 'Set ECUT'
      nvalue(ival) = 0
      type(ival) = 1
      value_min(ival) = 0.
      value_max(ival) = 1e15
      default(ival) = 0.
      ival = ival + 1
      values_sought(ival) = 'Set ECUT start region'
      nvalue(ival) = 0
      type(ival) = 0
      value_min(ival) = 1
      value_max(ival) = 3000
      default(ival) = 1
      ival = ival + 1
      values_sought(ival) = 'Set ECUT stop region'
      nvalue(ival) = 0
      type(ival) = 0
      value_min(ival) = 1
      value_max(ival) = 3000
      default(ival) = 1
      Nmin = num_ecut
      Nmax = num_ecut+2
      error_flag = 0
      CALL GET_INPUT
      IF (( error_flag .EQ. 0 )) THEN
        IF (( nvalue(num_ecut) .EQ. nvalue(ival) .AND. nvalue(ival-1) .E
     *  Q. nvalue(ival) )) THEN
          DO 21451 k=1,nvalue(ival)
            istart = value(ival-1,k)
            iend = value(ival,k)
            IF (( istart .LE. iend )) THEN
              DO 21461 j=istart,iend
                ecut(j) = value(num_ecut,k)
21461         CONTINUE
21462         CONTINUE
              aux_inregions = .true.
            END IF
21451     CONTINUE
21452     CONTINUE
        END IF
      END IF
      ecut_inregions = aux_inregions
      aux_inregions = .false.
      ival = ival + 1
      num_pcut = ival
      values_sought(ival) = 'Set PCUT'
      nvalue(ival) = 0
      type(ival) = 1
      value_min(ival) = 0.
      value_max(ival) = 1e15
      default(ival) = 0.
      ival = ival + 1
      values_sought(ival) = 'Set PCUT start region'
      nvalue(ival) = 0
      type(ival) = 0
      value_min(ival) = 1
      value_max(ival) = 3000
      default(ival) = 1
      ival = ival + 1
      values_sought(ival) = 'Set PCUT stop region'
      nvalue(ival) = 0
      type(ival) = 0
      value_min(ival) = 1
      value_max(ival) = 3000
      default(ival) = 1
      Nmin = num_pcut
      Nmax = num_pcut+2
      error_flag = 0
      CALL GET_INPUT
      IF (( error_flag .EQ. 0 )) THEN
        IF (( nvalue(num_pcut) .EQ. nvalue(ival) .AND. nvalue(ival-1) .E
     *  Q. nvalue(ival) )) THEN
          DO 21471 k=1,nvalue(ival)
            istart = value(ival-1,k)
            iend = value(ival,k)
            IF (( istart .LE. iend )) THEN
              DO 21481 j=istart,iend
                pcut(j) = value(num_pcut,k)
21481         CONTINUE
21482         CONTINUE
              aux_inregions = .true.
            END IF
21471     CONTINUE
21472     CONTINUE
        END IF
      END IF
      pcut_inregions = aux_inregions
      aux_inregions = .false.
      ival = ival + 1
      num_smax = ival
      values_sought(ival) = 'Set SMAX'
      nvalue(ival) = 0
      type(ival) = 1
      value_min(ival) = 0.
      value_max(ival) = 1e15
      default(ival) = 0.
      ival = ival + 1
      values_sought(ival) = 'Set SMAX start region'
      nvalue(ival) = 0
      type(ival) = 0
      value_min(ival) = 1
      value_max(ival) = 3000
      default(ival) = 1
      ival = ival + 1
      values_sought(ival) = 'Set SMAX stop region'
      nvalue(ival) = 0
      type(ival) = 0
      value_min(ival) = 1
      value_max(ival) = 3000
      default(ival) = 1
      Nmin = num_smax
      Nmax = num_smax+2
      error_flag = 0
      CALL GET_INPUT
      IF (( error_flag .EQ. 0 )) THEN
        IF (( nvalue(num_smax) .EQ. nvalue(ival) .AND. nvalue(ival-1) .E
     *  Q. nvalue(ival) )) THEN
          DO 21491 k=1,nvalue(ival)
            istart = value(ival-1,k)
            iend = value(ival,k)
            IF (( istart .LE. iend )) THEN
              DO 21501 j=istart,iend
                smaxir(j) = value(num_smax,k)
21501         CONTINUE
21502         CONTINUE
              aux_inregions = .true.
            END IF
21491     CONTINUE
21492     CONTINUE
        END IF
      END IF
      smax_inregions = aux_inregions
      write(i_errors,*)
      write(i_errors,*) ' ******************** end input transport param
     *eter *********************** '
      write(i_errors,*)
      IF ((value(num_relax,1) .GT. 0 .AND. value(num_relax,1) .LT. 5)) T
     *HEN
        eadl_relax = .true.
        IF ((value(num_relax,1) .EQ. 1)) THEN
          value(num_relax,1)=4
        END IF
      ELSE
        IF ((mcdf_pe_xsections .AND. value(num_relax,1) .EQ. 5)) THEN
          eadl_relax = .true.
          value(num_relax,1)=4
          write(i_log,'(/a)') '***************** Warning: '
          write(i_log,'(a/,a/,a/)') '    Simplified atomic relaxation no
     *t allowed', '    with shellwise PE cross sections. Resetting', '
     *  to detailed EADL atomic relaxation!!!'
        ELSE
          eadl_relax = .false.
        END IF
      END IF
      output_strings(1) = allowed_inputs(num_pair_ang,iprdst)
      itmp = value(num_incoh,1)
      output_strings(2) = allowed_inputs(num_incoh,itmp)
      IF (( radc_flag .EQ. 1 )) THEN
        write(i_log,'(/a)') '***************** Warning: '
        write(i_log,*) 'You are trying to use radiative Compton correcti
     *ons'
        write(i_log,*) 'without having included rad_compton1.mortran'
        write(i_log,'(a//)') 'Turning radiative Compton corrections OFF
     *...'
        radc_flag = 0
      END IF
      output_strings(12) = allowed_inputs(num_radc,radc_flag)
      itmp = value(num_coh,1)
      output_strings(3) = allowed_inputs(num_coh,itmp)
      itmp = value(num_relax,1)
      output_strings(4) = allowed_inputs(num_relax,itmp)
      itmp = value(num_pe_ang,1)
      output_strings(5) = allowed_inputs(num_pe_ang,itmp)
      output_strings(6) = allowed_inputs(num_brems_ang,ibrdst)
      output_strings(7) = allowed_inputs(num_bca,bca_algorithm)
      output_strings(8) = allowed_inputs(num_alg,transport_algorithm)
      output_strings(9) = allowed_inputs(num_brems_cs,ibr_nist)
      output_strings(10) = allowed_inputs(num_pair_cs,pair_nrc)
      output_strings(11) = allowed_inputs(num_triplet,itriplet)
      itmp = value(num_photonuc,1)
      output_strings(14) = allowed_inputs(num_photonuc,itmp)
      entry show_transport_parameter(ounit)
      IF((ounit .LE. 0))return
      write(ounit,*)
      write(ounit,'(a)') line
      write(ounit,*)
      write(ounit,'(a,/)') '                   Electron/Photon transport
     * parameter'
      write(ounit,'(a,/)') line
      write(ounit,'(a,38x,a)') ' Photon cross sections', photon_xsection
     *s(:lnblnk1(photon_xsections))
      write(ounit,'(a,37x,a)') ' Compton cross sections', comp_xsections
     *(:lnblnk1(comp_xsections))
      write(ounit,'(a,$)') ' Photon transport cutoff(MeV)'
      IF (( pcut_inregions )) THEN
        write(ounit,'(32x,a)') 'Set in regions'
      ELSE
        IF (( pcut(1) .GT. 1e-4 )) THEN
          write(ounit,'(32x,g14.4)') pcut(1)
        ELSE
          write(ounit,'(32x,a)') 'AP(medium)'
        END IF
      END IF
      write(ounit,'(a,39x,a3)') ' Pair angular sampling',output_strings(
     *1)
      write(ounit,'(a,41x,a3)') ' Pair cross sections',output_strings(10
     *)
      write(ounit,'(a,42x,a3)') ' Triplet production',output_strings(11)
      write(ounit,'(a,36x,a14)') ' Bound Compton scattering',output_stri
     *ngs(2)
      write(ounit,'(a,31x,a14)') ' Radiative Compton corrections',output
     *_strings(12)
      write(ounit,'(a,41x,a14)') ' Rayleigh scattering',output_strings(3
     *)
      write(ounit,'(a,42x,a14)') ' Atomic relaxations',output_strings(4)
      write(ounit,'(a,30x,a14)') ' Photoelectron angular sampling',outpu
     *t_strings(5)
      IF (( value(num_photonuc,1) .GT. 0 )) THEN
        write(ounit,'(a,36x,a14)') ' Photonuclear attenuation',output_st
     *  rings(14)
        write(ounit,'(a,33x,a)') ' Photonuclear cross sections', photonu
     *  c_xsections(:lnblnk1(photonuc_xsections))
      END IF
      write(ounit,*)
      write(ounit,'(a,$)') ' Electron transport cutoff(MeV)'
      IF (( ecut_inregions )) THEN
        write(ounit,'(30x,a)') 'Set in regions'
      ELSE
        IF (( ecut(1) .GT. 1e-4 )) THEN
          write(ounit,'(30x,f7.4)') ecut(1)
        ELSE
          write(ounit,'(30x,a)') 'AE(medium)'
        END IF
      END IF
      write(ounit,'(a,30x,a4)') ' Bremsstrahlung cross sections',output_
     *strings(9)
      write(ounit,'(a,29x,a3)') ' Bremsstrahlung angular sampling',outpu
     *t_strings(6)
      IF (( spin_effects )) THEN
        write(ounit,'(a,48x,a)') ' Spin effects','On'
      ELSE
        write(ounit,'(a,48x,a)') ' Spin effects','Off'
      END IF
      write(ounit,'(a,34x,a)') ' Electron Impact Ionization',eii_xfile(:
     *lnblnk1(eii_xfile))
      IF ((eii_L_factor .NE. 1.0)) THEN
        write(ounit,'(a,25x,f6.4)') ' L-shell EII xsections scaling fact
     *or',eii_L_factor
      END IF
      write(ounit,'(a,$)') ' Maxium electron step in cm (SMAX)'
      IF (( smax_inregions )) THEN
        write(ounit,'(27x,a)') 'Set in regions'
      ELSE
        IF (( smaxir(1) .GT. 1e-4 )) THEN
          write(ounit,'(27x,g14.4)') smaxir(1)
        ELSE
          write(ounit,'(27x,a)') 'Restriction is off'
        END IF
      END IF
      write(ounit,'(a,16x,f6.4)') ' Maximum fractional energy loss/step
     *(ESTEPE)',estepe
      write(ounit,'(a,21x,f6.4)') ' Maximum 1st elastic moment/step (XIM
     *AX)',ximax
      write(ounit,'(a,33x,a10)') ' Boundary crossing algorithm',output_s
     *trings(7)
      write(ounit,'(a,22x,g9.4)') ' Skin-depth for boundary crossing (MF
     *P)',skindepth_for_bca
      write(ounit,'(a,37x,a10)') ' Electron-step algorithm',output_strin
     *gs(8)
      IF (( ExIN.NE.0 .OR. EyIN.NE.0 .OR. EzIN.NE.0 )) THEN
        write(ounit,'(a,38x,3f10.2)') ' Electric Field [V/cm]', ExIN,EyI
     *  N,EzIN
      END IF
      IF (( Bx.NE.0 .OR. By.NE.0 .OR. Bz.NE.0 )) THEN
        write(ounit,'(a,41x,3f10.2)') ' Magnetic Field [T]', Bx,By,Bz
      END IF
      IF (( ExIN.NE.0 .OR. EyIN.NE.0 .OR. EzIN.NE.0 .OR. Bx.NE.0 .OR. By
     *.NE.0 .OR. Bz.NE.0 )) THEN
        write(ounit,'(a,50x,f10.2)') ' EM ESTEPE',EMLMTIN
      END IF
      write(ounit,*)
      write(ounit,'(a)') line
      write(ounit,*)
      return
      end
      subroutine set_elastic_parameter
      implicit none
      integer*4 ounit
      COMMON/GetInput/ ALLOWED_INPUTS(100,0:5),   VALUES_SOUGHT(100),  C
     *HAR_VALUE(100,100),  VALUE(100,100),  DEFAULT(100),  VALUE_MIN(100
     *),  VALUE_MAX(100),  NVALUE(100),  TYPE(100),      ERROR_FLAGS(100
     *),   i_errors,  NMIN, NMAX,   ERROR_FLAG,  DELIMETER
      character ALLOWED_INPUTS*64,VALUES_SOUGHT*64, CHAR_VALUE*256,DELIM
     *ETER*64
      real*8 VALUE,DEFAULT,VALUE_MIN,VALUE_MAX
      integer*4 NVALUE,TYPE,NMIN,NMAX,ERROR_FLAG,ERROR_FLAGS,i_errors
      COMMON/ELECIN/ esig_e(12),psig_e(12), esige_max, psige_max, range_
     *ep(0:1,500,12), E_array(500,12), etae_ms0(500,12),etae_ms1(500,12)
     *,etap_ms0(500,12),etap_ms1(500,12),q1ce_ms0(500,12),q1ce_ms1(500,1
     *2),q1cp_ms0(500,12),q1cp_ms1(500,12),q2ce_ms0(500,12),q2ce_ms1(500
     *,12),q2cp_ms0(500,12),q2cp_ms1(500,12),blcce0(500,12),blcce1(500,1
     *2), EKE0(12),EKE1(12), XR0(12),TEFF0(12),BLCC(12),XCC(12), ESIG0(5
     *00,12),ESIG1(500,12),PSIG0(500,12),PSIG1(500,12),EDEDX0(500,12),ED
     *EDX1(500,12),PDEDX0(500,12),PDEDX1(500,12),EBR10(500,12),EBR11(500
     *,12),PBR10(500,12),PBR11(500,12),PBR20(500,12),PBR21(500,12),TMXS0
     *(500,12),TMXS1(500,12), expeke1(12), IUNRST(12),EPSTFL(12),IAPRIM(
     *12), sig_ismonotone(0:1,12)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer*4 imed,ival,lnblnk1,nchanged
      character*24 medname
      ounit = i_log
      ounit = i_log
      delimeter = 'MC TRANSPORT PARAMETER'
      call get_input_set_error_level(0)
      ival = 0
      DO 21511 imed=1,nmed
        call egs_get_medium_name(imed,medname)
        ival = ival + 1
        values_sought(ival) = 'scale elastic scattering in '// medname(:
     *  lnblnk1(medname))
        nvalue(ival) = 1
        type(ival) = 1
        value_min(ival) = 1e-3
        value_max(ival) = 1e3
        default(ival) = 1
21511 CONTINUE
21512 CONTINUE
      Nmin = 1
      Nmax = nmed
      CALL GET_INPUT
      nchanged = 0
      DO 21521 imed=1,nmed
        IF((error_flags(imed) .EQ. 0))nchanged = nchanged + 1
21521 CONTINUE
21522 CONTINUE
      IF (( nchanged .GT. 0 )) THEN
        write(ounit,'(//a)') '================ Elastic scattering scaled
     * as follows =================='
        DO 21531 imed=1,nmed
          IF (( error_flags(imed) .EQ. 0 )) THEN
            call egs_get_medium_name(imed,medname)
            xcc(imed) = xcc(imed)*value(imed,1)
            blcc(imed) = blcc(imed)*value(imed,1)
            write(ounit,'(a,t30,f10.6)') medname(:lnblnk1(medname)), val
     *      ue(imed,1)
          END IF
21531   CONTINUE
21532   CONTINUE
        write(ounit,'(a//)') '==========================================
     *=============================='
      END IF
      return
      end
      SUBROUTINE GET_INPUT_PLUS(UNITNUM,DELIM_START,DELIM_END)
      IMPLICIT NONE
      COMMON/GetInput/ ALLOWED_INPUTS(100,0:5),   VALUES_SOUGHT(100),  C
     *HAR_VALUE(100,100),  VALUE(100,100),  DEFAULT(100),  VALUE_MIN(100
     *),  VALUE_MAX(100),  NVALUE(100),  TYPE(100),      ERROR_FLAGS(100
     *),   i_errors,  NMIN, NMAX,   ERROR_FLAG,  DELIMETER
      character ALLOWED_INPUTS*64,VALUES_SOUGHT*64, CHAR_VALUE*256,DELIM
     *ETER*64
      real*8 VALUE,DEFAULT,VALUE_MIN,VALUE_MAX
      integer*4 NVALUE,TYPE,NMIN,NMAX,ERROR_FLAG,ERROR_FLAGS,i_errors
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      CHARACTER*256 TEXT
      CHARACTER*256 KEEPTEXT
      CHARACTER*256 ORIGTEXT
      CHARACTER*256 TEXTPIECE
      CHARACTER*40 DELIM_START
      CHARACTER*40 DELIM_END
      CHARACTER*40 ENDSTRING
      CHARACTER*64 VNAME
      CHARACTER*64 VNAME1
      integer*4 CURSOR
      integer*4 IINDEX
      integer*4 iVNAME
      integer*4 IVAL
      integer*4 UNITNUM
      integer*4 ERR
      integer*4 I,J,K,CHECK
      integer*4 LINE
      integer*4 INT_VALUE
      integer*4 INT_VALUE_MIN
      integer*4 INT_VALUE_MAX
      logical ALLOWED
      logical START_FOUND
      integer*4 ifound,length,lll,Kconvert
      integer*4 lnblnk1
      logical IDEBUG,end_string
      character*1 blank
      integer*4 error_level
      integer*4 the_level
      data blank/' '/
      data error_level/1/
      save error_level
      IDEBUG = .false.
      ERROR_FLAG = 0
      IF ((IDEBUG)) THEN
        WRITE(6,21540)NMIN,NMAX, 100
21540   FORMAT(' Entering get_inputs seeking values', I5,' to', I5, '  w
     *ith a max allowed of',I5)
      END IF
      IF ((NMAX .LT. NMIN .OR. NMAX .GT. 100)) THEN
        WRITE(6,21550)NMAX, NMIN, 100
21550   FORMAT(//' Error entering get_inputs: Asked for values from',I5,
     *' to',I5, '    with a max of',I5//' This implies a bug in the call
     *ing routine'/ ' Fix it up and try again.  Stopping now.')
        STOP
      END IF
      ERR=i_errors
      DELIM_START=DELIM_START(:lnblnk1(DELIM_START))
      DELIM_END=DELIM_END(:lnblnk1(DELIM_END))
      length = len(DELIM_START)
21561 IF(index(DELIM_START,blank).NE.1)GO TO 21562
        IF (( length .GE. 2 )) THEN
          DELIM_START=DELIM_START(2:)
        ELSE
          GO TO21562
        END IF
        length = length - 1
      GO TO 21561
21562 CONTINUE
      length = len(DELIM_END)
21571 IF(index(DELIM_END,blank).NE.1)GO TO 21572
        IF (( length .GE. 2 )) THEN
          DELIM_END=DELIM_END(2:)
        ELSE
          GO TO21572
        END IF
        length = length - 1
      GO TO 21571
21572 CONTINUE
      DO 21581 Kconvert=1,lnblnk1(DELIM_START)
        CURSOR=ICHAR(DELIM_START(Kconvert:Kconvert))
        IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
          CURSOR=CURSOR-32
          DELIM_START(Kconvert:Kconvert)=CHAR(CURSOR)
        END IF
21581 CONTINUE
21582 CONTINUE
      DO 21591 Kconvert=1,lnblnk1(DELIM_END)
        CURSOR=ICHAR(DELIM_END(Kconvert:Kconvert))
        IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
          CURSOR=CURSOR-32
          DELIM_END(Kconvert:Kconvert)=CHAR(CURSOR)
        END IF
21591 CONTINUE
21592 CONTINUE
      length = len(ENDSTRING)
21601 IF(index(ENDSTRING,blank).NE.1)GO TO 21602
        IF (( length .GE. 2 )) THEN
          ENDSTRING=ENDSTRING(2:)
        ELSE
          GO TO21602
        END IF
        length = length - 1
      GO TO 21601
21602 CONTINUE
      IF ((ENDSTRING.EQ.blank)) THEN
        end_string=.false.
      ELSE
        DO 21611 Kconvert=1,lnblnk1(ENDSTRING)
          CURSOR=ICHAR(ENDSTRING(Kconvert:Kconvert))
          IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
            CURSOR=CURSOR-32
            ENDSTRING(Kconvert:Kconvert)=CHAR(CURSOR)
          END IF
21611   CONTINUE
21612   CONTINUE
        end_string=.false.
      END IF
      IF ((IDEBUG)) THEN
        WRITE(6,21620)DELIM_START,DELIM_END
21620   FORMAT(' start and stop delimeters are:'/ A/A/)
      END IF
      DO 21631 I=NMIN,NMAX
        REWIND (UNITNUM)
        LINE=0
        CHECK=0
        ERROR_FLAGS(I)=0
        IF ((TYPE(I) .EQ. 0 .OR. TYPE(I) .EQ. 1)) THEN
          VALUE(I,1) = DEFAULT(I)
        END IF
        IF ((TYPE(I) .EQ. 3)) THEN
          VALUE(I,1) = 0
        END IF
        VNAME=VALUES_SOUGHT(I)
        iVNAME=lnblnk1(VNAME)
        IF (( ivname .LT. 1 )) THEN
          IF (( error_level .GT. 0 )) THEN
            write(ERR,*) ' ======================= Warning =============
     *======== '
            write(ERR,*) '    Empty VALUES_SOUGHT passt to Get_Inputs()!
     *         '
            write(ERR,*) ' =============================================
     *======== '
          END IF
          ERROR_FLAG=1
          ERROR_FLAGS(I)=1
          goto 20690
        END IF
        DO 21641 Kconvert=1,lnblnk1(vname)
          CURSOR=ICHAR(vname(Kconvert:Kconvert))
          IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
            CURSOR=CURSOR-32
            vname(Kconvert:Kconvert)=CHAR(CURSOR)
          END IF
21641   CONTINUE
21642   CONTINUE
        iindex = 0
        IF ((DELIM_START .EQ. 'NONE')) THEN
          start_found = .true.
        ELSE
          start_found = .false.
        END IF
21651   IF(iindex.NE.0)GO TO 21652
20720     CONTINUE
          LINE=LINE+1
          IF (( start_found )) THEN
            READ(UNITNUM,END=20730,ERR=20740,FMT='(A256)') TEXT
          ELSE
            READ(UNITNUM,END=20750,ERR=20740,FMT='(A256)') TEXT
          END IF
          length = len(text)
21661     IF(index(text,blank).NE.1)GO TO 21662
            IF (( length .GE. 2 )) THEN
              text=text(2:)
            ELSE
              GO TO21662
            END IF
            length = length - 1
          GO TO 21661
21662     CONTINUE
          ifound = INDEX(text,'#')
          IF (( ifound .GT. 1 )) THEN
            text = text(1:ifound-1)
          ELSE
            IF (( ifound .EQ. 1 )) THEN
              text = blank
            END IF
          END IF
          ifound = INDEX(text,';')
          IF (( ifound .GT. 1 )) THEN
            text = text(1:ifound-1)
          ELSE
            IF (( ifound .EQ. 1 )) THEN
              text = blank
            END IF
          END IF
          length = lnblnk1(TEXT)
          TEXT=TEXT(:length)
          origtext = text(:length)
          DO 21671 Kconvert=1,lnblnk1(text)
            CURSOR=ICHAR(text(Kconvert:Kconvert))
            IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
              CURSOR=CURSOR-32
              text(Kconvert:Kconvert)=CHAR(CURSOR)
            END IF
21671     CONTINUE
21672     CONTINUE
          IF (( .NOT.start_found )) THEN
            IF ((INDEX(TEXT,DELIM_START) .NE. 0 )) THEN
              start_found = .true.
            END IF
            goto 20720
          END IF
          iindex=INDEX(TEXT,VNAME(:iVNAME))
          IF (( DELIM_END.NE.'NONE' )) THEN
            IF ((INDEX(TEXT,DELIM_END).NE.0)) THEN
              IF (( error_level .GT. 0 )) THEN
                WRITE (ERR,*) '***************ERROR***************'
                WRITE (ERR,*) '>>',VALUES_SOUGHT(I)(:lnblnk1(VALUES_SOUG
     *          HT(I))), '<<',' NOT FOUND'
                WRITE (ERR,*) 'END OF DELIMETER: ',DELIM_END
              END IF
              ERROR_FLAG=1
              ERROR_FLAGS(I)=1
              GOTO 20690
            END IF
          END IF
        GO TO 21651
21652   CONTINUE
        CHECK=0
        IF (( idebug )) THEN
          write(i_log,*) ' ******* Found: '
          write(i_log,'(a,$)') ' text:     '
          length = lnblnk1(text)
          IF (( length .GT. 0 )) THEN
            DO 21681 lll=1,length
              write(i_log,'(a1,$)') text(lll:lll)
21681       CONTINUE
21682       CONTINUE
            write(i_log,*)
          END IF
          write(i_log,'(a,$)') ' origtext: '
          length = lnblnk1(origtext)
          IF (( length .GT. 0 )) THEN
            DO 21691 lll=1,length
              write(i_log,'(a1,$)') origtext(lll:lll)
21691       CONTINUE
21692       CONTINUE
            write(i_log,*)
          END IF
        END IF
        IINDEX=IINDEX+iVNAME
        TEXT=TEXT(IINDEX:)
        origtext=origtext(iindex:)
        IF (( idebug )) THEN
          write(i_log,*) ' After removing vname: '
          write(i_log,'(a,$)') ' text:     '
          length = lnblnk1(text)
          IF (( length .GT. 0 )) THEN
            DO 21701 lll=1,length
              write(i_log,'(a1,$)') text(lll:lll)
21701       CONTINUE
21702       CONTINUE
            write(i_log,*)
          END IF
          write(i_log,'(a,$)') ' origtext: '
          length = lnblnk1(origtext)
          IF (( length .GT. 0 )) THEN
            DO 21711 lll=1,length
              write(i_log,'(a1,$)') origtext(lll:lll)
21711       CONTINUE
21712       CONTINUE
            write(i_log,*)
          END IF
        END IF
        IINDEX=INDEX(TEXT,'=')
        IF ((IINDEX.NE.0)) THEN
          TEXT=TEXT(IINDEX+1:)
          origtext=origtext(iindex+1:)
        ELSE
          IINDEX=INDEX(TEXT,':')
          IF ((IINDEX.NE.0)) THEN
            TEXT=TEXT(IINDEX+1:)
            origtext=origtext(iindex+1:)
          END IF
        END IF
        IF (( idebug )) THEN
          write(i_log,*) ' After removing leading equals: '
          write(i_log,'(a,$)') ' text:     '
          length = lnblnk1(text)
          IF (( length .GT. 0 )) THEN
            DO 21721 lll=1,length
              write(i_log,'(a1,$)') text(lll:lll)
21721       CONTINUE
21722       CONTINUE
            write(i_log,*)
          END IF
          write(i_log,'(a,$)') ' origtext: '
          length = lnblnk1(origtext)
          IF (( length .GT. 0 )) THEN
            DO 21731 lll=1,length
              write(i_log,'(a1,$)') origtext(lll:lll)
21731       CONTINUE
21732       CONTINUE
            write(i_log,*)
          END IF
        END IF
        IF (( (lnblnk1(TEXT).EQ.0) .OR. (lnblnk1(TEXT).EQ.1) )) THEN
          IF ((vname(:ivname).EQ.'TITLE')) THEN
            READ (UNITNUM,FMT='(A256)') TEXTPIECE
            IF ((lnblnk1(TEXTPIECE).NE.0)) THEN
              TEXT=TEXTPIECE(:lnblnk1(TEXTPIECE))
              length = len(text)
21741         IF(index(text,blank).NE.1)GO TO 21742
                IF (( length .GE. 2 )) THEN
                  text=text(2:)
                ELSE
                  GO TO21742
                END IF
                length = length - 1
              GO TO 21741
21742         CONTINUE
              length = len(origtext)
21751         IF(index(origtext,blank).NE.1)GO TO 21752
                IF (( length .GE. 2 )) THEN
                  origtext=origtext(2:)
                ELSE
                  GO TO21752
                END IF
                length = length - 1
              GO TO 21751
21752         CONTINUE
              GOTO 20860
            END IF
          END IF
          IF (( error_level .GT. 0 )) THEN
            WRITE (ERR,*) '*************ERROR*************'
            WRITE (ERR,*) 'VALUE SOUGHT: ',VALUES_SOUGHT(I)
            WRITE (ERR,*) 'VALUE NOT THERE!!'
          END IF
          ERROR_FLAG=1
          ERROR_FLAGS(I)=1
          RETURN
        END IF
20860   CONTINUE
        iindex = index(text,'DEFAULT')
        IF (( iindex .NE. 0 )) THEN
          IF (( type(i) .NE. 2 )) THEN
            IF (( type(i) .NE. 3 )) THEN
              VALUE(I,1)=DEFAULT(I)
            ELSE
              VALUE(I,1)=0
            END IF
            goto 20690
          END IF
        END IF
        IF (((TYPE(I) .EQ. 0).OR.(TYPE(I) .EQ. 1))) THEN
          IVAL=1
          IF (( idebug )) THEN
            write(i_log,*) ' *** Reading an integer or a real value! '
          END IF
21761     CONTINUE
            IF (( idebug )) THEN
              write(i_log,*) ' In LOOP, ival = ',ival
            END IF
            IF ((lnblnk1(TEXT).EQ.0)) THEN
              IF (( error_level .GT. 0 )) THEN
                WRITE(ERR,*) '*************ERROR*************'
                WRITE (ERR,*) 'VALUE SOUGHT: ',VALUES_SOUGHT(I)
                WRITE (ERR,*) 'VALUE NOT THERE!!'
              END IF
              ERROR_FLAG=1
              ERROR_FLAGS(I)=1
              RETURN
            END IF
            READ(TEXT,END=20880,ERR=20890,FMT=*) VALUE(I,IVAL)
            IF (( idebug )) THEN
              write(i_log,*) ' Read value: ',ival,VALUE(I,IVAL)
            END IF
            IF (((VALUE(I,IVAL).GT.VALUE_MAX(I)).OR.(VALUE(I,IVAL).LT.VA
     *      LUE_MIN(I)))) THEN
              IF ((TYPE(I).EQ.0)) THEN
                INT_VALUE=DEFAULT(I)
                IF (( error_level .GT. 0 )) THEN
                  WRITE(ERR,*) '************WARNING************'
                  WRITE(ERR,20900) INT_VALUE, VALUES_SOUGHT(I)(:lnblnk1(
     *            VALUES_SOUGHT(I)))
                END IF
20900           FORMAT ( 'Default= ',I9,' used for: ', A )
                INT_VALUE=VALUE(I,IVAL)
                INT_VALUE_MIN=VALUE_MIN(I)
                INT_VALUE_MAX=VALUE_MAX(I)
                IF (( error_level .GT. 0 )) THEN
                  WRITE(ERR,20910) VALUES_SOUGHT(I)(:lnblnk1(VALUES_SOUG
     *            HT(I))), INT_VALUE, INT_VALUE_MIN,INT_VALUE_MAX
                END IF
20910           FORMAT (A,'=', I9,' should be between ', I9,' and ', I9)
              END IF
              IF ((TYPE(I).EQ.1)) THEN
                IF (( error_level .GT. 0 )) THEN
                  WRITE(ERR,*) '************WARNING************'
                  WRITE(ERR,20920) DEFAULT(I), VALUES_SOUGHT(I)(:lnblnk1
     *            (VALUES_SOUGHT(I)))
20920             FORMAT ( 'Default= ',F12.6,' used for: ', A )
                  WRITE(ERR,20930) VALUES_SOUGHT(I)(:lnblnk1(VALUES_SOUG
     *            HT(I))), VALUE(I,IVAL), VALUE_MIN(I),VALUE_MAX(I)
20930             FORMAT (A,'=', F12.6,' should be between ', G14.6,' an
     *d ', G14.6)
                END IF
              END IF
              VALUE(I,IVAL)=DEFAULT(I)
            END IF
            IF((IVAL .EQ. NVALUE(I)))GO TO21762
            IF (((INDEX(TEXT,',').NE.0).OR.(lnblnk1(TEXT).EQ.0))) THEN
              IF (( idebug )) THEN
                write(i_log,*) ' A comma or a blank text found -> '
                write(i_log,*) ' searching for further input'
              END IF
              TEXT=TEXT(INDEX(TEXT,',')+1:)
21771         IF(lnblnk1(TEXT).NE.0)GO TO 21772
                IF (( idebug )) THEN
                  write(i_log,*) ' Empty text -> reading next line! '
                END IF
                LINE=LINE+1
                READ (UNITNUM,END=20880,ERR=20890,FMT='(A256)') TEXT
                length = len(text)
21781           IF(index(text,blank).NE.1)GO TO 21782
                  IF (( length .GE. 2 )) THEN
                    text=text(2:)
                  ELSE
                    GO TO21782
                  END IF
                  length = length - 1
                GO TO 21781
21782           CONTINUE
                ifound = INDEX(text,'#')
                IF (( ifound .GT. 1 )) THEN
                  text = text(1:ifound-1)
                ELSE
                  IF (( ifound .EQ. 1 )) THEN
                    text = blank
                  END IF
                END IF
                ifound = INDEX(text,';')
                IF (( ifound .GT. 1 )) THEN
                  text = text(1:ifound-1)
                ELSE
                  IF (( ifound .EQ. 1 )) THEN
                    text = blank
                  END IF
                END IF
                length = lnblnk1(TEXT)
                TEXT=TEXT(:length)
                origtext = text(:length)
                DO 21791 Kconvert=1,lnblnk1(text)
                  CURSOR=ICHAR(text(Kconvert:Kconvert))
                  IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
                    CURSOR=CURSOR-32
                    text(Kconvert:Kconvert)=CHAR(CURSOR)
                  END IF
21791           CONTINUE
21792           CONTINUE
                DO 21801 K=1,NMAX
                  vname1 = VALUES_SOUGHT(K)
                  length = lnblnk1(vname1)
                  IF (( length .GT. 0 )) THEN
                    length = len(vname1)
21811               IF(index(vname1,blank).NE.1)GO TO 21812
                      IF (( length .GE. 2 )) THEN
                        vname1=vname1(2:)
                      ELSE
                        GO TO21812
                      END IF
                      length = length - 1
                    GO TO 21811
21812               CONTINUE
                    DO 21821 Kconvert=1,lnblnk1(vname1)
                      CURSOR=ICHAR(vname1(Kconvert:Kconvert))
                      IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
                        CURSOR=CURSOR-32
                        vname1(Kconvert:Kconvert)=CHAR(CURSOR)
                      END IF
21821               CONTINUE
21822               CONTINUE
                    IF ((INDEX(TEXT,vname1(:length)).NE.0)) THEN
                      IF (( error_level .GT. 0 )) THEN
                        WRITE(ERR,*) '************ERROR************'
                        WRITE(ERR,*) 'VALUE SOUGHT: ',VALUES_SOUGHT(I)
                        WRITE(ERR,*) KEEPTEXT(:lnblnk1(KEEPTEXT)), '<--C
     *OMMA INDICATES ANOTHER INPUT'
                        WRITE(ERR,*) 'SEARCHED NEXT LINE: ', TEXT(:lnbln
     *                  k1(TEXT))
                        WRITE(ERR,*) 'BUT NO OTHER INPUT WAS DETECTED'
                      END IF
                      ERROR_FLAG=1
                      ERROR_FLAGS(I)=1
                    END IF
                  END IF
21801           CONTINUE
21802           CONTINUE
                IF (( idebug )) THEN
                  write(i_log,*) ' Next line: '
                  write(i_log,'(a,$)') ' text:     '
                  length = lnblnk1(text)
                  IF (( length .GT. 0 )) THEN
                    DO 21831 lll=1,length
                      write(i_log,'(a1,$)') text(lll:lll)
21831               CONTINUE
21832               CONTINUE
                    write(i_log,*)
                  END IF
                  write(i_log,'(a,$)') ' origtext: '
                  length = lnblnk1(origtext)
                  IF (( length .GT. 0 )) THEN
                    DO 21841 lll=1,length
                      write(i_log,'(a1,$)') origtext(lll:lll)
21841               CONTINUE
21842               CONTINUE
                    write(i_log,*)
                  END IF
                END IF
              GO TO 21771
21772         CONTINUE
            ELSE
              GO TO21762
            END IF
            IVAL=IVAL+1
          GO TO 21761
21762     CONTINUE
          IF (((NVALUE(I).NE.0).AND.(NVALUE(I).NE.IVAL))) THEN
            IF (( error_level .GT. 0 )) THEN
              WRITE (ERR,*) '**************ERROR**************'
              WRITE (ERR,*) 'VALUE SOUGHT: ', VALUES_SOUGHT(I)
              WRITE (ERR,*) 'ASKED FOR', NVALUE(I),' NUMERICAL INPUT(S)'
              WRITE (ERR,*) 'HOWEVER,', IVAL, ' WERE DETECTED'
            END IF
            ERROR_FLAG=1
            ERROR_FLAGS(I)=1
          ELSE
            NVALUE(I)=IVAL
          END IF
20880     CONTINUE
        END IF
        IF (((TYPE(I) .EQ. 2) .OR. (TYPE(I) .EQ. 3))) THEN
          IVAL=1
          IF (( idebug )) THEN
            write(i_log,*) ' Trying to read a string! '
          END IF
21851     CONTINUE
            IF (( idebug )) THEN
              write(i_log,*) ' In LOOP, ival = ',ival
            END IF
            IF ((lnblnk1(TEXT).EQ.0)) THEN
              IF (( error_level .GT. 0 )) THEN
                WRITE(ERR,*) '*************ERROR*************'
                WRITE (ERR,*) 'VALUE SOUGHT: ',VALUES_SOUGHT(I)
                WRITE (ERR,*) 'VALUE NOT THERE!!'
              END IF
              ERROR_FLAG=1
              ERROR_FLAGS(I)=1
              RETURN
            END IF
            IF ((vname(:ivname).EQ.'TITLE')) THEN
              TEXTPIECE=origtext
              GOTO 21030
            END IF
            iindex = INDEX(origtext,',')
            IF (( iindex .NE. 0 )) THEN
              TEXTPIECE=origtext(:iindex-1)
            ELSE
              TEXTPIECE=origtext
            END IF
21030       CONTINUE
            READ(TEXTPIECE,ERR=21040,FMT='(A256)') CHAR_VALUE(I,IVAL)
            length = len(CHAR_VALUE(I,IVAL))
21861       IF(index(CHAR_VALUE(I,IVAL),blank).NE.1)GO TO 21862
              IF (( length .GE. 2 )) THEN
                CHAR_VALUE(I,IVAL)=CHAR_VALUE(I,IVAL)(2:)
              ELSE
                GO TO21862
              END IF
              length = length - 1
            GO TO 21861
21862       CONTINUE
            IF (( idebug )) THEN
              write(i_log,*) ' Read the following char string: '
              length = lnblnk1(CHAR_VALUE(I,IVAL))
              IF (( length .GT. 0 )) THEN
                DO 21871 lll=1,length
                  write(i_log,'(a1,$)') CHAR_VALUE(I,IVAL)(lll:lll)
21871           CONTINUE
21872           CONTINUE
                write(i_log,*)
              END IF
            END IF
            IF ((TYPE(I) .EQ. 3)) THEN
              DO 21881 Kconvert=1,lnblnk1(CHAR_VALUE(I,IVAL))
                CURSOR=ICHAR(CHAR_VALUE(I,IVAL)(Kconvert:Kconvert))
                IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
                  CURSOR=CURSOR-32
                  CHAR_VALUE(I,IVAL)(Kconvert:Kconvert)=CHAR(CURSOR)
                END IF
21881         CONTINUE
21882         CONTINUE
              ALLOWED=.FALSE.
              DO 21891 K=0,5
                vname1 = ALLOWED_INPUTS(I,K)
                length = len(ALLOWED_INPUTS(I,K))
21901           IF(index(ALLOWED_INPUTS(I,K),blank).NE.1)GO TO 21902
                  IF (( length .GE. 2 )) THEN
                    ALLOWED_INPUTS(I,K)=ALLOWED_INPUTS(I,K)(2:)
                  ELSE
                    GO TO21902
                  END IF
                  length = length - 1
                GO TO 21901
21902           CONTINUE
                DO 21911 Kconvert=1,lnblnk1(ALLOWED_INPUTS(I,K))
                  CURSOR=ICHAR(ALLOWED_INPUTS(I,K)(Kconvert:Kconvert))
                  IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
                    CURSOR=CURSOR-32
                    ALLOWED_INPUTS(I,K)(Kconvert:Kconvert)=CHAR(CURSOR)
                  END IF
21911           CONTINUE
21912           CONTINUE
                IF ((ALLOWED_INPUTS(I,K).EQ.CHAR_VALUE(I,IVAL))) THEN
                  ALLOWED=.TRUE.
                  VALUE(I,IVAL)=K
                  IF (( idebug )) THEN
                    write(i_log,*) ' Found a allowed_value match ',k
                  END IF
                END IF
21891         CONTINUE
21892         CONTINUE
              IF ((.NOT.ALLOWED)) THEN
                WRITE(ERR,*) '*************ERROR*************'
                IF ((IVAL.NE.1)) THEN
                  WRITE (ERR,*) 'VALUE SOUGHT: ',VALUES_SOUGHT(I)
                  WRITE (ERR,*) 'SHOULD HAVE ONE INPUT ONLY'
                  WRITE (ERR,*) 'APPARENT STATE: COMMA INDICATING SECOND
     * VALUE'
                ELSE
                  WRITE (ERR,*) 'VALUE SOUGHT: ',VALUES_SOUGHT(I)
                  WRITE(ERR,*) 'INPUT-->', CHAR_VALUE(I,IVAL)(:lnblnk1(C
     *            HAR_VALUE(I,IVAL))), '<--NOT ALLOWED'
                  WRITE(ERR,*) 'OPTIONS ARE:'
                  WRITE(ERR,21110) (ALLOWED_INPUTS(I,K)(:lnblnk1(ALLOWED
     *            _INPUTS(I,K))),K=0,5)
                END IF
21110           FORMAT(A40)
                ERROR_FLAG=1
                ERROR_FLAGS(I)=1
              END IF
            END IF
            IF ((vname(:ivname).EQ.'TITLE')) THEN
              GO TO21852
            END IF
            DO 21921 K=1,LEN(KEEPTEXT)
              KEEPTEXT(K:K)=' '
21921       CONTINUE
21922       CONTINUE
            KEEPTEXT(:lnblnk1(TEXT))=TEXT
            iindex = INDEX(TEXT,',')
            IF (( iindex .NE. 0 .OR. lnblnk1(TEXT).EQ.0 )) THEN
              TEXT=TEXT(INDEX(TEXT,',')+1:)
              origtext=origtext(iindex+1:)
21931         IF(lnblnk1(TEXT).NE.0)GO TO 21932
                LINE=LINE+1
                READ (UNITNUM,ERR=21040,FMT='(A256)') TEXT
                length = len(text)
21941           IF(index(text,blank).NE.1)GO TO 21942
                  IF (( length .GE. 2 )) THEN
                    text=text(2:)
                  ELSE
                    GO TO21942
                  END IF
                  length = length - 1
                GO TO 21941
21942           CONTINUE
                ifound = INDEX(text,'#')
                IF (( ifound .GT. 1 )) THEN
                  text = text(1:ifound-1)
                ELSE
                  IF (( ifound .EQ. 1 )) THEN
                    text = blank
                  END IF
                END IF
                ifound = INDEX(text,';')
                IF (( ifound .GT. 1 )) THEN
                  text = text(1:ifound-1)
                ELSE
                  IF (( ifound .EQ. 1 )) THEN
                    text = blank
                  END IF
                END IF
                length = lnblnk1(TEXT)
                TEXT=TEXT(:length)
                origtext = text(:length)
                DO 21951 Kconvert=1,lnblnk1(text)
                  CURSOR=ICHAR(text(Kconvert:Kconvert))
                  IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
                    CURSOR=CURSOR-32
                    text(Kconvert:Kconvert)=CHAR(CURSOR)
                  END IF
21951           CONTINUE
21952           CONTINUE
                DO 21961 K=1,NMAX
                  vname1 = VALUES_SOUGHT(K)
                  length = lnblnk1(vname1)
                  IF (( length .GT. 0 )) THEN
                    length = len(vname1)
21971               IF(index(vname1,blank).NE.1)GO TO 21972
                      IF (( length .GE. 2 )) THEN
                        vname1=vname1(2:)
                      ELSE
                        GO TO21972
                      END IF
                      length = length - 1
                    GO TO 21971
21972               CONTINUE
                    DO 21981 Kconvert=1,lnblnk1(vname1)
                      CURSOR=ICHAR(vname1(Kconvert:Kconvert))
                      IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
                        CURSOR=CURSOR-32
                        vname1(Kconvert:Kconvert)=CHAR(CURSOR)
                      END IF
21981               CONTINUE
21982               CONTINUE
                    IF ((INDEX(TEXT,vname1(:length)).NE.0)) THEN
                      WRITE(ERR,*) '************ERROR************'
                      WRITE(ERR,*) 'VALUE SOUGHT: ',VALUES_SOUGHT(I)
                      WRITE(ERR,*) KEEPTEXT(:lnblnk1(KEEPTEXT)), '<--COM
     *MA INDICATES ANOTHER INPUT'
                      WRITE(ERR,*) 'SEARCHED NEXT LINE: ', TEXT(:lnblnk1
     *                (TEXT))
                      WRITE(ERR,*) 'BUT NO OTHER INPUT WAS DETECTED'
                      ERROR_FLAG=1
                      ERROR_FLAGS(I)=1
                    END IF
                  END IF
21961           CONTINUE
21962           CONTINUE
              GO TO 21931
21932         CONTINUE
            ELSE
              GO TO21852
            END IF
            IVAL=IVAL+1
          GO TO 21851
21852     CONTINUE
          IF (((NVALUE(I).NE.0).AND.(NVALUE(I).NE.IVAL))) THEN
            IF (( error_level .GT. 0 )) THEN
              WRITE (ERR,*) '*******************ERROR*******************
     *'
              WRITE (ERR,*) 'VALUE SOUGHT: ', VALUES_SOUGHT(I)
              WRITE (ERR,*) 'ASKED FOR', NVALUE(I),' INPUT(S)'
              WRITE (ERR,*) 'HOWEVER,', IVAL, ' WERE DETECTED'
            END IF
            ERROR_FLAG=1
            ERROR_FLAGS(I)=1
          ELSE
            NVALUE(I)=IVAL
          END IF
        END IF
        goto 20690
20730   IF (( error_level .GT. 0 )) THEN
          WRITE (ERR,*) '******************ERROR***********************'
          WRITE (ERR,*) 'END OF FILE REACHED BUT VALUE SOUGHT NOT FOUND'
          WRITE (ERR,*) 'PROBABLY A MISSING/MISSPELLED END DELIMETER'
          WRITE (ERR,*) 'VALUE SOUGHT: >>', VALUES_SOUGHT(I)(:lnblnk1(VA
     *    LUES_SOUGHT(I))),'<<'
          WRITE (ERR,*) 'END DELIMETER: >>', DELIM_END(:lnblnk1(DELIM_EN
     *    D)),'<<'
        END IF
        ERROR_FLAG=1
        ERROR_FLAGS(I)=1
        goto 20690
20750   IF (( error_level .GT. 0 )) THEN
          WRITE (ERR,*) '******************ERROR***********************'
          WRITE (ERR,*) 'END OF FILE REACHED BUT VALUE SOUGHT NOT FOUND'
          WRITE (ERR,*) 'PROBABLY A MISSING/MISSPELLED START DELIMETER'
          WRITE (ERR,*) 'VALUE SOUGHT: >>', VALUES_SOUGHT(I)(:lnblnk1(VA
     *    LUES_SOUGHT(I))),'<<'
          WRITE (ERR,*) 'START DELIMETER: >>', DELIM_START(:lnblnk1(DELI
     *    M_START)),'<<'
        END IF
        ERROR_FLAG=1
        ERROR_FLAGS(I)=1
        goto 20690
20890   IF (( error_level .GT. 0 )) THEN
          WRITE (ERR,*) '***************ERROR***************'
          IF ((IVAL.GT.1)) THEN
            J=IVAL
          ELSE
            J=1
          END IF
          WRITE (ERR,*) 'ERROR READING VALUE SOUGHT: ', VALUES_SOUGHT(I)
          WRITE (ERR,*) 'LINE #',LINE
          WRITE (ERR,*) 'COULD NOT READ THE VALUE!!'
          WRITE (ERR,*) 'SHOULD BE AN INTEGER OR A REAL...'
          WRITE (ERR,*) 'IS THERE AN EXTRA COMMA AT THE END OF YOUR INPU
     *T?'
        END IF
        ERROR_FLAG=1
        ERROR_FLAGS(I)=1
        GOTO 20690
21040   IF (( error_level .GT. 0 )) THEN
          WRITE (ERR,*) '***************ERROR***************'
          WRITE (ERR,*) 'ERROR READING VALUE SOUGHT: ', VALUES_SOUGHT(I)
          WRITE (ERR,*) 'LINE #',LINE
          WRITE (ERR,*) 'COULD NOT READ THE STRING !!'
        END IF
        ERROR_FLAG=1
        ERROR_FLAGS(I)=1
20690   CONTINUE
21631 CONTINUE
21632 CONTINUE
      RETURN
20740 WRITE (ERR,*) '***************ERROR***************'
      WRITE (ERR,*) 'ERROR READING TEXT ', TEXT,' ON LINE ',LINE
      goto 21190
21190 CONTINUE
      ERROR_FLAG=1
      ERROR_FLAGS(I)=1
      RETURN
      entry get_input_plus_set_error_level(the_level)
      error_level = the_level
      return
      END
      subroutine get_media_inputs(ounit)
      implicit none
      integer*4 ounit
      COMMON/GetInput/ ALLOWED_INPUTS(100,0:5),   VALUES_SOUGHT(100),  C
     *HAR_VALUE(100,100),  VALUE(100,100),  DEFAULT(100),  VALUE_MIN(100
     *),  VALUE_MAX(100),  NVALUE(100),  TYPE(100),      ERROR_FLAGS(100
     *),   i_errors,  NMIN, NMAX,   ERROR_FLAG,  DELIMETER
      character ALLOWED_INPUTS*64,VALUES_SOUGHT*64, CHAR_VALUE*256,DELIM
     *ETER*64
      real*8 VALUE,DEFAULT,VALUE_MIN,VALUE_MAX
      integer*4 NVALUE,TYPE,NMIN,NMAX,ERROR_FLAG,ERROR_FLAGS,i_errors
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      common/ET_control/ smaxir(3000),estepe,ximax,  skindepth_for_bca,t
     *ransport_algorithm, bca_algorithm,exact_bca,spin_effects
      real*8 smaxir,  estepe,  ximax,      skindepth_for_bca
      integer*4 transport_algorithm, bca_algorithm
      logical exact_bca,  spin_effects
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L(3000),IPHTER(3000)
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      common/compton_data/ iz_array(1538),  be_array(1538),  Jo_array(15
     *38),  erfJo_array(1538),   ne_array(1538),  shn_array(1538),
     *shell_array(200,12), eno_array(200,12), eno_atbin_array(200,12), n
     *_shell(12), radc_flag,  ibcmp(3000)
      integer*4 iz_array,ne_array,shn_array,eno_atbin_array, shell_array
     *,n_shell,radc_flag
      real*8 be_array,Jo_array,erfJo_array,eno_array
      integer*2 ibcmp
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      common/eii_data/ eii_xsection_a( 10000),  eii_xsection_b( 10000),
     * eii_cons(12), eii_a(40),  eii_b(40),  eii_L_factor,  eii_z(40),
     *eii_sh(40),  eii_nshells(100),  eii_nsh(12),  eii_first(12,50),  e
     *ii_no(12,50),  eii_flag
      real*8 eii_xsection_a,eii_xsection_b,eii_a,eii_b,eii_cons,eii_L_fa
     *ctor
      integer*4 eii_z,eii_sh,eii_nshells
      integer*4 eii_first,eii_no
      integer*4 eii_elements,eii_flag,eii_nsh
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/rayleigh_inputs/iray_ff_media(12),iray_ff_file(12)
      character*24 iray_ff_media
      character*128 iray_ff_file
      common/emf_inputs/ExIN,EyIN,EzIN,  EMLMTIN,  BxIN, ByIN, BzIN,  Bx
     *, By, Bz,  Bx_new, By_new, Bz_new,  emfield_on
      real*8 ExIN,EyIN,EzIN, EMLMTIN, BxIN,ByIN,BzIN, Bx,By,Bz, Bx_new,B
     *y_new,Bz_new
      logical emfield_on
      common/x_options/eadl_relax,  mcdf_pe_xsections
      logical eadl_relax, mcdf_pe_xsections
      COMMON/MEDINP/inpdensity_file(12),inpasym(12,50), inpstrn(24,12),p
     *z4(12,50), rhoz4(12,50),wa4(12,50),inpgasp(12)
      character*256 inpdensity_file
      CHARACTER*4 inpasym,inpstrn
      real*4 pz4,rhoz4,wa4,inpgasp
      COMMON/ELECIN/ esig_e(12),psig_e(12), esige_max, psige_max, range_
     *ep(0:1,500,12), E_array(500,12), etae_ms0(500,12),etae_ms1(500,12)
     *,etap_ms0(500,12),etap_ms1(500,12),q1ce_ms0(500,12),q1ce_ms1(500,1
     *2),q1cp_ms0(500,12),q1cp_ms1(500,12),q2ce_ms0(500,12),q2ce_ms1(500
     *,12),q2cp_ms0(500,12),q2cp_ms1(500,12),blcce0(500,12),blcce1(500,1
     *2), EKE0(12),EKE1(12), XR0(12),TEFF0(12),BLCC(12),XCC(12), ESIG0(5
     *00,12),ESIG1(500,12),PSIG0(500,12),PSIG1(500,12),EDEDX0(500,12),ED
     *EDX1(500,12),PDEDX0(500,12),PDEDX1(500,12),EBR10(500,12),EBR11(500
     *,12),PBR10(500,12),PBR11(500,12),PBR20(500,12),PBR21(500,12),TMXS0
     *(500,12),TMXS1(500,12), expeke1(12), IUNRST(12),EPSTFL(12),IAPRIM(
     *12), sig_ismonotone(0:1,12)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/ELEMTB/NET,ITBL(100),WATBL(100),RHOTBL(100),ASYMT(100)
      integer*4 NET
      real*4 ITBL,WATBL,RHOTBL
      CHARACTER*4 ASYMT
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      integer*4 ival,ival_media,ival_medfile,i,j,k,ival_ae,ival_ue,ival_
     *ap,ival_up, ival_rho,ival_elements,ival_rhoz,ival_iunrst,ival_iapr
     *im,ival_gasp, ival_pz,ival_sterncid, ival_densityfile,medfile_erro
     *r,ival_outfile, egs_open_file,lnblnk1,i_medfile,egs_get_unit,i_med
     *err,mindex,eindex, i_density,i01,length,i_outfile
      real*8 ecut_min, pcut_min
      logical medfile_specified,densityfile_specified,elements_specified
     *, outfile_specified(12)
      logical iunrst_specified,stern_specified,iaprim_specified, gasp_sp
     *ecified,rho_specified,start_delim_found,end_delim_found, spec_by_p
     *z,spec_by_rhoz,df_if_elem_mismatch(12), df_if_rho_mismatch(12)
      logical ex
      integer*4 CURSOR,Kconvert
      real*4 ZTBL
      real*8 EKE,ELKE,TMXSO,DEDXE,DEDXP,EFRACT,SIGE,SIGP,BREME,BREMP,ETA
     *B(16), EIE,PLOTE(300),PLOTEM(300),PLOTEEN(300), PLOTEMP(300), PLOT
     *EMS(300)
      integer*4 IPLOTE,IFLAG1,IFLAG2,LELKE
      CHARACTER*60 GRAPHTITLE,XAXIS,YAXISPcom,YAXISPmfp,YAXISE,YAXISEmfp
     *, SUBTITLE,SERIES
      DATA ETAB/1.,1.25,1.5,1.75,2.,2.5,3.,3.5,4.,4.5,5.,5.5,6.,7.,8.,9.
     */
      character*24 medium_name,med_tmp,sterncid_tmp
      character*256 density_file,material_file,tmp_string, spoutput_file
     *(12)
      character*80 text_string, text_save, title
      character*40 delim_start,delim_end
      character*1 blank
      character*512 toUpper
      integer*4 nne_tmp,iaprim_tmp,epstfl_tmp,iunrst_tmp
      real*8 rho_tmp,rhoz_tmp(50),z_tmp(50),pz_tmp(50),ae_tmp,ap_tmp, ue
     *_tmp,up_tmp,gasp_tmp
      CHARACTER*4 asym_tmp(50)
      integer*4 nepst_df,nne_df
      real*8 iev_df,rho_df,z_df(50),rhoz_df(50),rhoz_tot
      CHARACTER*4 asym_df(50)
      data blank/' '/
      save medfile_specified,material_file,df_if_elem_mismatch,df_if_rho
     *_mismatch, spoutput_file,outfile_specified
      call get_input_set_error_level(0)
      call get_input_plus_set_error_level(0)
      IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
        i_mederr=17
        i_mederr=egs_open_file(i_mederr,0,1,'.mederr')
      END IF
      ecut_min=999.
      pcut_min=999.
      DO 21991 i=1,3000
        IF((ecut(i).LT.ecut_min))ecut_min=ecut(i)
        IF((pcut(i).LT.pcut_min))pcut_min=pcut(i)
21991 CONTINUE
21992 CONTINUE
      delimeter = 'MEDIA DEFINITION'
      ival = 0
      ival = ival + 1
      ival_medfile = ival
      values_sought(ival) = 'material data file'
      nvalue(ival) = 1
      type(ival) = 2
      Nmin = ival_medfile
      Nmax = ival_medfile
      CALL GET_INPUT
      IF ((error_flags(ival_medfile).EQ.0)) THEN
        material_file=char_value(ival_medfile,1)
        medfile_specified=.true.
        i_medfile=17
        i_medfile=egs_get_unit(i_medfile)
        IF ((i_medfile .LT. 1)) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(a)') 'Error: Failed to get available fortran uni
     *t for', ' medium data file.'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        open(i_medfile,file=material_file,status='old',err=22000)
        medfile_specified=.true.
      ELSE
        IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
          write(i_mederr,*)' Warning: material data file not supplied.'
        END IF
        IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
          write(i_mederr,*)' Thus, you must define media explicitly in i
     *nput file'
        END IF
        IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
          write(i_mederr,*)' or via density correction file.'
        END IF
        medfile_specified=.false.
      END IF
      ival = ival + 1
      ival_ae = ival
      values_sought(ival) = 'ae'
      nvalue(ival) = 1
      type(ival) = 1
      value_min(ival) = 0
      value_max(ival) = 999.
      default(ival) = ecut_min
      ival = ival + 1
      ival_ap = ival
      values_sought(ival) = 'ap'
      nvalue(ival) = 1
      type(ival) = 1
      value_min(ival) = 0
      value_max(ival) = 999.
      default(ival) = pcut_min
      ival = ival + 1
      ival_ue = ival
      values_sought(ival) = 'ue'
      nvalue(ival) = 1
      type(ival) = 1
      value_min(ival) = 0
      value_max(ival) = 999.
      default(ival) = 50 + prm
      ival = ival + 1
      ival_up = ival
      values_sought(ival) = 'up'
      nvalue(ival) = 1
      type(ival) = 1
      value_min(ival) = 0
      value_max(ival) = 999.
      default(ival) = 50.0
      Nmin=ival_ae
      Nmax=ival_up
      CALL GET_INPUT
      IF ((error_flags(ival_ae).EQ.0)) THEN
        ae_tmp=value(ival_ae,1)
      ELSE
        IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
          write(i_mederr,*)' Warning: AE for media not supplied.  Will u
     *se min. ECUT.'
        END IF
        ae_tmp=ecut_min
      END IF
      IF ((error_flags(ival_ap).EQ.0)) THEN
        ap_tmp=value(ival_ap,1)
      ELSE
        IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
          write(i_mederr,*)' Warning: AP for media not supplied.  Will u
     *se min. PCUT.'
        END IF
        ap_tmp=pcut_min
      END IF
      IF ((error_flags(ival_ue).EQ.0)) THEN
        ue_tmp=value(ival_ue,1)
      ELSE
        IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
          write(i_mederr,*)' Warning: UE for media not supplied.  Will u
     *se                     50.5109989461 MeV'
        END IF
        ue_tmp=50 + prm
      END IF
      IF ((error_flags(ival_up).EQ.0)) THEN
        up_tmp=value(ival_up,1)
      ELSE
        IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
          write(i_mederr,*)' Warning: UP for media not supplied.  Will u
     *se 50.0 MeV'
        END IF
        up_tmp=50.
      END IF
      IF ((ue_tmp.LE.ae_tmp)) THEN
        IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
          write(i_mederr,*)' Error: UE <= AE.  Adjust value(s) and try a
     *gain.'
        END IF
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,'(a)') ' Error: UE <= AE.  Adjust value(s) and try a
     *gain.'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF ((up_tmp.LE.ap_tmp)) THEN
        IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
          write(i_mederr,*)' Error: UP <= AP.  Adjust value(s) and try a
     *gain.'
        END IF
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,'(a)') ' Error: UP <= AP.  Adjust value(s) and try a
     *gain.'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      DO 22011 i=1,NMED
        DO 22021 j=1,24
          medium_name(j:j)=media(j,i)
22021   CONTINUE
22022   CONTINUE
        elements_specified=.false.
        rho_specified=.false.
        densityfile_specified=.false.
        stern_specified=.false.
        iunrst_specified=.false.
        iaprim_specified=.false.
        gasp_specified=.false.
        spec_by_rhoz=.false.
        spec_by_pz=.false.
        df_if_elem_mismatch(i)=.false.
        df_if_rho_mismatch(i)=.false.
        sterncid_tmp=medium_name
        gasp_tmp=0.0
        iunrst_tmp=0
        iaprim_tmp=0
        epstfl_tmp=0
        density_file=' '
        IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
          write(i_mederr,*)' '
        END IF
        IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
          write(i_mederr,*)' For medium: ',medium_name
        END IF
        delimeter=medium_name(:lnblnk1(medium_name))
        ival=0
        ival=ival+1
        ival_elements=ival
        values_sought(ival) = 'elements'
        type(ival) = 2
        nvalue(ival) = 0
        nmin=ival_elements
        nmax=ival_elements
        CALL GET_INPUT
        IF ((error_flags(ival_elements).EQ.0)) THEN
          DO 22031 j=1,nvalue(ival_elements)
            DO 22041 Kconvert=1,lnblnk1(char_value(ival_elements,j))
              CURSOR=ICHAR(char_value(ival_elements,j)(Kconvert:Kconvert
     *        ))
              IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
                CURSOR=CURSOR-32
                char_value(ival_elements,j)(Kconvert:Kconvert)=CHAR(CURS
     *          OR)
              END IF
22041       CONTINUE
22042       CONTINUE
22031     CONTINUE
22032     CONTINUE
          ival=ival+1
          ival_pz=ival
          nne_tmp=nvalue(ival_elements)
          values_sought(ival)='number of atoms'
          type(ival)=0
          nvalue(ival)=nne_tmp
          nmin=ival_pz
          nmax=ival_pz
          CALL GET_INPUT
          IF ((nne_tmp.GT.1 .AND. error_flags(ival_pz).EQ.0)) THEN
            DO 22051 j=1,nne_tmp
              asym_tmp(j)=char_value(ival_elements,j)
              pz_tmp(j)=value(ival_pz,j)
22051       CONTINUE
22052       CONTINUE
            elements_specified=.true.
            spec_by_pz=.true.
          ELSE
            ival=ival+1
            ival_rhoz=ival
            values_sought(ival)='mass fractions'
            type(ival)=1
            nvalue(ival)=nne_tmp
            nmin=ival_rhoz
            nmax=ival_rhoz
            IF ((nne_tmp.EQ.1)) THEN
              value_min(ival)=0.0
              value_max(ival)=1.e15
              default(ival)=1.
            END IF
            CALL GET_INPUT
            IF ((error_flags(ival_rhoz).EQ.0)) THEN
              DO 22061 j=1,nne_tmp
                asym_tmp(j)=char_value(ival_elements,j)
                rhoz_tmp(j)=value(ival_rhoz,j)
22061         CONTINUE
22062         CONTINUE
              elements_specified=.true.
              spec_by_rhoz=.true.
            END IF
          END IF
          IF ((nne_tmp.EQ.1 .AND. .NOT.elements_specified)) THEN
            asym_tmp(1)=char_value(ival_elements,1)
            pz_tmp(1)=1
            elements_specified=.true.
            spec_by_pz=.true.
          END IF
          IF ((elements_specified)) THEN
            IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THE
     *      N
              write(i_mederr,*)' Composition specified in .egsinp file.'
            END IF
          END IF
        END IF
        ival=ival+1
        ival_rho=ival
        values_sought(ival) = 'rho'
        type(ival)=1
        nvalue(ival)=1
        value_min(ival)=0.
        value_max(ival)=1e15
        default(ival)=1.0
        nmin=ival_rho
        nmax=ival_rho
        CALL GET_INPUT
        IF ((error_flags(ival_rho).EQ.0)) THEN
          rho_tmp=value(ival_rho,1)
          rho_specified=.true.
          IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
            write(i_mederr,*)' Rho specified in .egsinp file.'
          END IF
        END IF
        ival=ival+1
        ival_sterncid=ival
        values_sought(ival)='sterncid'
        type(ival)=2
        nvalue(ival)=1
        nmin=ival_sterncid
        nmax=ival_sterncid
        CALL GET_INPUT
        IF ((error_flags(ival_sterncid).EQ.0)) THEN
          sterncid_tmp=char_value(ival_sterncid,1)
          stern_specified=.true.
          IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
            write(i_mederr,*)' STERNCID specified in .egsinp file.'
          END IF
        END IF
        ival=ival+1
        ival_iunrst=ival
        values_sought(ival)='stopping powers'
        type(ival)=3
        nvalue(ival)=1
        allowed_inputs(ival,0)='restricted total'
        allowed_inputs(ival,1)='unrestricted collision'
        allowed_inputs(ival,2)='unrestricted collision and radiative'
        allowed_inputs(ival,3)='unrestricted collision and restricted ra
     *diative'
        allowed_inputs(ival,4)='restricted collision and unrestricted ra
     *diative'
        allowed_inputs(ival,5)='unrestricted radiative'
        nmin=ival_iunrst
        nmax=ival_iunrst
        CALL GET_INPUT
        IF ((error_flags(ival_iunrst).EQ.0)) THEN
          iunrst_tmp=value(ival_iunrst,1)
          iunrst_specified=.true.
          IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
            write(i_mederr,*)' IUNRST specified in .egsinp file.'
          END IF
        END IF
        ival=ival+1
        ival_iaprim=ival
        values_sought(ival)='bremsstrahlung correction'
        type(ival)=3
        nvalue(ival)=1
        allowed_inputs(ival,0)='KM'
        allowed_inputs(ival,1)='NRC'
        allowed_inputs(ival,2)='none'
        nmin=ival_iaprim
        nmax=ival_iaprim
        CALL GET_INPUT
        IF ((error_flags(ival_iaprim).EQ.0)) THEN
          iaprim_tmp=value(ival_iaprim,1)
          iaprim_specified=.true.
          IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
            write(i_mederr,*)' IAPRIM specified in .egsinp file.'
          END IF
        END IF
        ival=ival+1
        ival_gasp=ival
        values_sought(ival)='gas pressure'
        type(ival)=1
        nvalue(ival)=1
        value_min(ival)=0.
        value_max(ival)=1e15
        default(ival)=0.0
        nmin=ival_gasp
        nmax=ival_gasp
        CALL GET_INPUT
        IF ((error_flags(ival_gasp).EQ.0)) THEN
          gasp_tmp=value(ival_gasp,1)
          gasp_specified=.true.
          IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
            write(i_mederr,*)' GASP specified in .egsinp file.'
          END IF
        END IF
        ival=ival+1
        ival_densityfile=ival
        values_sought(ival)='density correction file'
        type(ival) = 2
        nvalue(ival)=1
        nmin=ival_densityfile
        nmax=ival_densityfile
        CALL GET_INPUT
        IF ((error_flags(ival_densityfile).EQ.0)) THEN
          density_file=char_value(ival_densityfile,1)
          densityfile_specified=.true.
          IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
            write(i_mederr,*)' Density correction file specified in .egs
     *inp file.'
          END IF
        END IF
        ival = ival+1
        ival_outfile = ival
        values_sought(ival) = 'e- stopping power output file'
        type(ival) = 2
        nvalue(ival) =1
        nmin=ival_outfile
        nmax=ival_outfile
        CALL GET_INPUT
        IF ((error_flags(ival_outfile).EQ.0)) THEN
          spoutput_file(i)=char_value(ival_outfile,1)
          outfile_specified(i)=.true.
          IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
            write(i_mederr,*)' e- stopping powers will be output to ', s
     *      poutput_file(i)
          END IF
        ELSE
          outfile_specified(i)=.false.
        END IF
        IF ((medfile_specified .AND. (.NOT.elements_specified .OR. .NOT.
     *  rho_specified .OR. .NOT.iunrst_specified .OR. .NOT.iaprim_specif
     *  ied .OR. .NOT.gasp_specified .OR. .NOT.stern_specified .OR. .NOT
     *  .densityfile_specified))) THEN
          rewind(i_medfile)
          start_delim_found=.false.
          end_delim_found=.false.
22071     IF((.NOT.(.NOT.start_delim_found)).AND.(.NOT.(.NOT.end_delim_f
     *    ound)))GO TO 22072
            read(i_medfile,'(a)',end=22080)text_string
            text_save=text_string
            text_string=toUpper(text_string(:lnblnk1(text_string)))
            mindex=index(text_string,'MEDIUM')
            eindex=index(text_string,'=')
            IF ((mindex.GT.0 .AND. eindex.GT.mindex)) THEN
              text_string=text_save(eindex+1:)
              text_string=text_string(:lnblnk1(text_string))
              length = len(text_string)
22091         IF(index(text_string,blank).NE.1)GO TO 22092
                IF (( length .GE. 2 )) THEN
                  text_string=text_string(2:)
                ELSE
                  GO TO22092
                END IF
                length = length - 1
              GO TO 22091
22092         CONTINUE
              IF ((text_string.EQ.medium_name)) THEN
                delim_start=text_save
                start_delim_found=.true.
              ELSE IF((start_delim_found)) THEN
                delim_end=text_save
                end_delim_found=.true.
              END IF
            END IF
          GO TO 22071
22072     CONTINUE
22080     IF ((.NOT.start_delim_found)) THEN
            IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THE
     *      N
              write(i_mederr,*)' Warning: Data for ',medium_name,' not f
     *ound'
            END IF
            IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THE
     *      N
              write(i_mederr,*)' in material data file.'
            END IF
          ELSE
            IF ((.NOT.end_delim_found)) THEN
              delim_end='NONE'
            END IF
            ival=0
            IF ((.NOT.elements_specified)) THEN
              ival=ival+1
              ival_elements=ival
              values_sought(ival) = 'elements'
              type(ival) = 2
              nvalue(ival) = 0
              nmin=ival_elements
              nmax=ival_elements
              CALL GET_INPUT_PLUS(i_medfile,delim_start,delim_end)
              IF ((error_flags(ival_elements).EQ.0)) THEN
                ival=ival+1
                ival_pz=ival
                nne_tmp=nvalue(ival_elements)
                values_sought(ival)='number of atoms'
                type(ival)=0
                nvalue(ival)=nne_tmp
                nmin=ival_pz
                nmax=ival_pz
                CALL GET_INPUT_PLUS(i_medfile,delim_start,delim_end)
                IF ((nne_tmp.GT.1 .AND. error_flags(ival_pz).EQ.0)) THEN
                  DO 22101 j=1,nne_tmp
                    asym_tmp(j)=char_value(ival_elements,j)
                    pz_tmp(j)=value(ival_pz,j)
22101             CONTINUE
22102             CONTINUE
                  elements_specified=.true.
                  spec_by_pz=.true.
                ELSE
                  ival=ival+1
                  ival_rhoz=ival
                  values_sought(ival)='mass fractions'
                  type(ival)=1
                  nvalue(ival)=nne_tmp
                  nmin=ival_rhoz
                  nmax=ival_rhoz
                  IF ((nne_tmp.EQ.1)) THEN
                    value_min(ival)=0.0
                    value_max(ival)=1.e15
                    default(ival)=1.
                  END IF
                  CALL GET_INPUT_PLUS(i_medfile,delim_start,delim_end)
                  IF ((error_flags(ival_rhoz).EQ.0)) THEN
                    DO 22111 j=1,nne_tmp
                      asym_tmp(j)=char_value(ival_elements,j)
                      rhoz_tmp(j)=value(ival_rhoz,j)
22111               CONTINUE
22112               CONTINUE
                    elements_specified=.true.
                    spec_by_rhoz=.true.
                  END IF
                END IF
                IF ((nne_tmp.EQ.1 .AND. .NOT.elements_specified)) THEN
                  asym_tmp(1)=char_value(ival_elements,1)
                  pz_tmp(1)=1
                  elements_specified=.true.
                  spec_by_pz=.true.
                END IF
                IF ((elements_specified)) THEN
                  IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel
     *            )) THEN
                    write(i_mederr,*)' Composition specified in material
     * data file'
                  END IF
                END IF
              END IF
            END IF
            IF ((.NOT.rho_specified)) THEN
              ival=ival+1
              ival_rho=ival
              values_sought(ival) = 'rho'
              type(ival)=1
              nvalue(ival)=1
              value_min(ival)=0.
              value_max(ival)=1e15
              default(ival)=1.0
              nmin=ival_rho
              nmax=ival_rho
              CALL GET_INPUT_PLUS(i_medfile,delim_start,delim_end)
              IF ((error_flags(ival_rho).EQ.0)) THEN
                rho_tmp=value(ival_rho,1)
                rho_specified=.true.
                IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel))
     *           THEN
                  write(i_mederr,*)' Rho specified in material data file
     *'
                END IF
              END IF
            END IF
            IF ((.NOT.stern_specified)) THEN
              ival=ival+1
              ival_sterncid=ival
              values_sought(ival)='sterncid'
              type(ival)=2
              nvalue(ival)=1
              nmin=ival_sterncid
              nmax=ival_sterncid
              CALL GET_INPUT_PLUS(i_medfile,delim_start,delim_end)
              IF ((error_flags(ival_sterncid).EQ.0)) THEN
                sterncid_tmp=char_value(ival_sterncid,1)
                stern_specified=.true.
                IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel))
     *           THEN
                  write(i_mederr,*)' STERNCID specified in material data
     * file'
                END IF
              END IF
            END IF
            IF ((.NOT.iunrst_specified)) THEN
              ival=ival+1
              ival_iunrst=ival
              values_sought(ival)='stopping powers'
              type(ival)=3
              nvalue(ival)=1
              allowed_inputs(ival,0)='restricted total'
              allowed_inputs(ival,1)='unrestricted collision'
              allowed_inputs(ival,2)='unrestricted collision and radiati
     *ve'
              allowed_inputs(ival,3)= 'unrestricted collision and restri
     *cted radiative'
              allowed_inputs(ival,4)= 'restricted collision and unrestri
     *cted radiative'
              allowed_inputs(ival,5)='unrestricted radiative'
              nmin=ival_iunrst
              nmax=ival_iunrst
              CALL GET_INPUT_PLUS(i_medfile,delim_start,delim_end)
              IF ((error_flags(ival_iunrst).EQ.0)) THEN
                iunrst_tmp=value(ival_iunrst,1)
                iunrst_specified=.true.
                IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel))
     *           THEN
                  write(i_mederr,*)' IUNRST specified in material data f
     *ile'
                END IF
              END IF
            END IF
            IF ((.NOT.iaprim_specified)) THEN
              ival=ival+1
              ival_iaprim=ival
              values_sought(ival)='bremsstrahlung correction'
              type(ival)=3
              nvalue(ival)=1
              allowed_inputs(ival,0)='KM'
              allowed_inputs(ival,1)='NRC'
              allowed_inputs(ival,2)='none'
              nmin=ival_iaprim
              nmax=ival_iaprim
              CALL GET_INPUT_PLUS(i_medfile,delim_start,delim_end)
              IF ((error_flags(ival_iaprim).EQ.0)) THEN
                iaprim_tmp=value(ival_iaprim,1)
                iaprim_specified=.true.
                IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel))
     *           THEN
                  write(i_mederr,*)' IAPRIM specified in material data f
     *ile'
                END IF
              END IF
            END IF
            IF ((.NOT.gasp_specified)) THEN
              ival=ival+1
              ival_gasp=ival
              values_sought(ival)='gas pressure'
              type(ival)=1
              nvalue(ival)=1
              value_min(ival)=0.
              value_max(ival)=1.e15
              default(ival)=0.
              nmin=ival_gasp
              nmax=ival_gasp
              CALL GET_INPUT_PLUS(i_medfile,delim_start,delim_end)
              IF ((error_flags(ival_gasp).EQ.0)) THEN
                gasp_tmp=value(ival_gasp,1)
                gasp_specified=.true.
                IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel))
     *           THEN
                  write(i_mederr,*)' GASP specified in material data fil
     *e'
                END IF
              END IF
            END IF
            IF ((.NOT.densityfile_specified)) THEN
              ival=ival+1
              ival_densityfile=ival
              values_sought(ival)='density correction file'
              type(ival) = 2
              nvalue(ival)=1
              nmin=ival_densityfile
              nmax=ival_densityfile
              CALL GET_INPUT_PLUS(i_medfile,delim_start,delim_end)
              IF ((error_flags(ival_densityfile).EQ.0)) THEN
                density_file=char_value(ival_densityfile,1)
                densityfile_specified=.true.
                IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel))
     *           THEN
                  write(i_mederr,*)' Density correction file specified i
     *n material data file.'
                END IF
              END IF
            END IF
          END IF
        END IF
        IF ((densityfile_specified)) THEN
          write(*,*)' density_file ',density_file
          IF ((index(density_file,'/').GT.0)) THEN
            tmp_string=density_file(:lnblnk1(density_file))
            inquire(file=tmp_string,exist=ex)
            IF ((.NOT.ex)) THEN
              IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) T
     *        HEN
                write(i_mederr,*)' Error: Density correction file ',tmp_
     *          string
              END IF
              IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) T
     *        HEN
                write(i_mederr,*)' cannot be found.'
              END IF
            END IF
          ELSE
            density_file=density_file(:lnblnk1(density_file))//'.density
     *'
            tmp_string=egs_home(:lnblnk1(egs_home)) // 'pegs4' // '/' //
     *       'density_corrections' // '/' // density_file
            inquire(file=tmp_string,exist=ex)
            IF((ex))goto 22120
            tmp_string=egs_home(:lnblnk1(egs_home)) // 'pegs4' // '/' //
     *       'density_corrections' // '/' // 'elements' // '/' // densit
     *      y_file
            inquire(file=tmp_string,exist=ex)
            IF((ex))goto 22120
            tmp_string=egs_home(:lnblnk1(egs_home)) // 'pegs4' // '/' //
     *       'density_corrections' // '/' // 'compounds' // '/' // densi
     *      ty_file
            inquire(file=tmp_string,exist=ex)
            IF((ex))goto 22120
            tmp_string=egs_home(:lnblnk1(egs_home)) // 'pegs4' // '/' //
     *       'density' // '/' // density_file
            inquire(file=tmp_string,exist=ex)
            IF((ex))goto 22120
            tmp_string=hen_house(:lnblnk1(hen_house)) // 'pegs4' // '/'
     *      // 'density_corrections' // '/' // 'elements' // '/' // dens
     *      ity_file
            inquire(file=tmp_string,exist=ex)
            IF((ex))goto 22120
            tmp_string=hen_house(:lnblnk1(hen_house)) // 'pegs4' // '/'
     *      // 'density_corrections' // '/' // 'compounds' // '/' // den
     *      sity_file
            inquire(file=tmp_string,exist=ex)
            IF((ex))goto 22120
            IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THE
     *      N
              write(i_mederr,*)' Error: Density correction file', densit
     *        y_file
            END IF
            IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THE
     *      N
              write(i_mederr,*)' does not exist in'
            END IF
            IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THE
     *      N
              write(i_mederr,*)' $EGS_HOME/pegs4/density_corrections, '
            END IF
            IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THE
     *      N
              write(i_mederr,*)' $EGS_HOME/pegs4/density_corrections/ele
     *ments, '
            END IF
            IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THE
     *      N
              write(i_mederr,*)' $EGS_HOME/pegs4/density_corrections/com
     *pounds, '
            END IF
            IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THE
     *      N
              write(i_mederr,*)' $EGS_HOME/pegs4/density, '
            END IF
            IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THE
     *      N
              write(i_mederr,*)' $HEN_HOUSE/pegs4/density_corrections/el
     *ements or '
            END IF
            IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THE
     *      N
              write(i_mederr,*)' $HEN_HOUSE/pegs4/density_corrections/co
     *mpounds.'
            END IF
22120       CONTINUE
          END IF
        END IF
        IF ((densityfile_specified)) THEN
          i_density=19
          i_density=egs_get_unit(i_density)
          IF ((i_density .LT. 1)) THEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,'(a)') 'Error: Failed to get available fortran u
     *nit for', ' density correction file.'
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          open(i_density,file=tmp_string,status='old',err=22130)
          density_file=tmp_string
          densityfile_specified=.true.
          epstfl_tmp=1
          read(i_density,'(a)')title
          read(i_density,*)nepst_df,iev_df,rho_df,nne_df
          read(i_density,*)(z_df(j),rhoz_df(j),j=1,nne_df)
          DO 22141 j=1,nne_df
            i01=z_df(j)
            asym_df(j)=ASYMT(i01)
22141     CONTINUE
22142     CONTINUE
          IF ((elements_specified)) THEN
            IF ((nne_tmp.NE.nne_df)) THEN
              df_if_elem_mismatch(i)=.true.
            ELSE
              rhoz_tot=0.
              DO 22151 j=1,nne_tmp
                IF ((spec_by_pz)) THEN
                  i01=ZTBL(asym_tmp(j))
                  rhoz_tmp(j)=pz_tmp(j)*WATBL(i01)
                END IF
                rhoz_tot=rhoz_tot+rhoz_tmp(j)
22151         CONTINUE
22152         CONTINUE
              DO 22161 j=1,nne_df
                DO 22171 k=1,nne_tmp
                  IF ((asym_df(j).EQ.asym_tmp(k))) THEN
                    IF ((rhoz_df(j).GT.(1+0.01)*rhoz_tmp(k)/rhoz_tot .OR
     *              . rhoz_df(j).LT.(1-0.01)*rhoz_tmp(k)/rhoz_tot)) THEN
                      df_if_elem_mismatch(i)=.true.
                    END IF
                    exit
                  END IF
22171           CONTINUE
22172           CONTINUE
                IF((k.GT.nne_tmp))df_if_elem_mismatch(i)=.true.
                IF ((df_if_elem_mismatch(i))) THEN
                  exit
                END IF
22161         CONTINUE
22162         CONTINUE
            END IF
            IF ((df_if_elem_mismatch(i))) THEN
              IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) T
     *        HEN
                write(i_mederr,*)' Warning: composition specified in den
     *sity correction', ' file is not the same as that'
              END IF
              IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) T
     *        HEN
                write(i_mederr,*)' specified in input or material data f
     *ile.'
              END IF
              IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) T
     *        HEN
                write(i_mederr,*)' Will use the composition specified in
     * the density correction file.'
              END IF
              nne_tmp=nne_df
              DO 22181 j=1,nne_tmp
                z_tmp(j)=z_df(j)
                rhoz_tmp(j)=rhoz_df(j)
                asym_tmp(j)=asym_df(j)
22181         CONTINUE
22182         CONTINUE
              spec_by_rhoz=.true.
            END IF
          ELSE
            IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THE
     *      N
              write(i_mederr,*)' Composition specified in density correc
     *tion file'
            END IF
            nne_tmp=nne_df
            DO 22191 j=1,nne_tmp
              z_tmp(j)=z_df(j)
              rhoz_tmp(j)=rhoz_df(j)
              asym_tmp(j)=asym_df(j)
22191       CONTINUE
22192       CONTINUE
            spec_by_rhoz=.true.
            elements_specified=.true.
          END IF
          IF ((rho_specified)) THEN
            IF ((rho_df.GT.(1+0.01)*rho_tmp .OR. rho_df.LT.(1-0.01)*rho_
     *      tmp)) THEN
              IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) T
     *        HEN
                write(i_mederr,*)' Warning: rho specified in density cor
     *rection', ' file is not the same as that'
              END IF
              IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) T
     *        HEN
                write(i_mederr,*)' specified in input or material data f
     *ile.'
              END IF
              IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) T
     *        HEN
                write(i_mederr,*)' Will use rho as specified in the dens
     *ity correction file.'
              END IF
              rho_tmp=rho_df
              df_if_rho_mismatch(i)=.true.
            END IF
          ELSE
            rho_tmp=rho_df
            rho_specified=.true.
            IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THE
     *      N
              write(i_mederr,*)' Rho specified in density correction fil
     *e'
            END IF
          END IF
          IF ((gasp_specified)) THEN
            IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THE
     *      N
              write(i_mederr,*)' Warning: gas pressure input not require
     *d', ' when using density correction file.  Will set GASP=0.'
            END IF
            gasp_specified=.false.
            gasp_tmp=0.
          END IF
          close(i_density)
        END IF
        IF ((elements_specified .AND. rho_specified)) THEN
          ae(i)=ae_tmp
          ue(i)=ue_tmp
          ap(i)=ap_tmp
          up(i)=up_tmp
          DO 22201 j=1,24
            inpstrn(j,i) = sterncid_tmp(j:j)
22201     CONTINUE
22202     CONTINUE
          nne(i)=nne_tmp
          rho(i)=rho_tmp
          DO 22211 j=1,nne_tmp
            inpasym(i,j)=asym_tmp(j)
            zelem(i,j)=ZTBL(asym_tmp(j))
            i01=zelem(i,j)
            wa(i,j)=WATBL(i01)
            wa4(i,j)=WATBL(i01)
            IF ((spec_by_rhoz)) THEN
              rhoz(i,j)=rhoz_tmp(j)
              rhoz4(i,j)=rhoz_tmp(j)
              pz(i,j)=rhoz(i,j)/wa(i,j)
              pz4(i,j)=rhoz4(i,j)/wa4(i,j)
            ELSE IF((spec_by_pz)) THEN
              pz(i,j)=pz_tmp(j)
              pz4(i,j)=pz_tmp(j)
              rhoz(i,j)=pz(i,j)*wa(i,j)
              rhoz4(i,j)=pz4(i,j)*wa4(i,j)
            END IF
22211     CONTINUE
22212     CONTINUE
          iunrst(i)=iunrst_tmp
          iaprim(i)=iaprim_tmp
          epstfl(i)=epstfl_tmp
          inpgasp(i)=gasp_tmp
          inpdensity_file(i)=density_file
        ELSE
          IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
            write(i_mederr,*)' Error: Medium ',medium_name,' not correct
     *ly defined.'
          END IF
        END IF
22011 CONTINUE
22012 CONTINUE
      IF((medfile_specified))close(i_medfile)
      IF((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel))close(i_med
     *err)
      entry show_media_parameters(ounit)
      IF((ounit .LE. 0))return
      IF ((is_pegsless)) THEN
        write(ounit,*)
        write(ounit,*)' Medium data: '
        write(ounit,*)
        write(ounit,'(a,1p,e14.5,a,e14.5,a)')' AE = ',ae(1),' MeV,  UE =
     * ',ue(1),' MeV'
        write(ounit,'(a,1p,e14.5,a,e14.5,a)')' AP = ',ap(1),' MeV,  UP =
     * ',up(1),' MeV'
        write(ounit,*)
        IF ((medfile_specified)) THEN
          write(ounit,*)' Material data file: ',material_file
        ELSE
          write(ounit,*)' No material data file supplied.  Material data
     * obtained from'
          write(ounit,*)' .egsinp file or density correction file.'
        END IF
        write(ounit,*)
        DO 22221 i=1,nmed
          write(ounit,'(a,24a1)')'   Medium: ',(media(j,i),j=1,24)
          write(ounit,'(a,24a1)')' Sterncid: ',(inpstrn(j,i),j=1,24)
          write(ounit,'(a,1p,e14.5,a)')'     rho: ',rho(i),' g/cm^3'
          write(ounit,'(a,24a4)')' Elements: ',(inpasym(i,j),j=1,nne(i))
          write(ounit,'(a,1p,12e14.5)')'    rhoz: ',(rhoz(i,j),j=1,nne(i
     *    ))
          write(ounit,'(a,1p,12e14.5)')'      pz: ',(pz(i,j),j=1,nne(i))
          write(ounit,'(a,i5)')'  iunrst: ',iunrst(i)
          write(ounit,'(a,i5)')'  iaprim: ',iaprim(i)
          write(ounit,'(a,1p,e14.5,a)')'    gasp: ',inpgasp(i),' atm.'
          IF ((epstfl(i).EQ.1)) THEN
            write(ounit,*)' density correction file: ', inpdensity_file(
     *      i)(:lnblnk1(inpdensity_file(i)))
            IF ((df_if_elem_mismatch(i))) THEN
              write(ounit,*)' ****Warning: composition specified in dens
     *ity correction', ' file is not the same as that'
              write(ounit,*)' specified in input or material data file.'
              write(ounit,*) ' Will use the composition specified in the
     * density correction file.'
            END IF
            IF ((df_if_rho_mismatch(i))) THEN
              write(ounit,*)' ****Warning: rho specified in density corr
     *ection', ' file is not the same as that'
              write(ounit,*)' specified in input or material data file.'
              write(ounit,*) ' Will use rho as specified in the density
     *correction file.'
            END IF
          END IF
          write(ounit,*)
          IF ((outfile_specified(i) .AND. (n_parallel.EQ.0 .OR. i_parall
     *    el.EQ.first_parallel))) THEN
            inquire(file=spoutput_file(i),exist=ex)
            IF ((ex)) THEN
              write(i_log,'(/a)') '***************** Warning: '
              write(i_log,'(a)') 'Warning: stopping power output file ',
     *         spoutput_file(i),'already exists.  Will overwrite.'
            END IF
            i_outfile=20
            i_outfile=egs_get_unit(i_outfile)
            IF ((i_outfile .LT. 1)) THEN
              write(i_log,'(/a)') '***************** Warning: '
              write(i_log,'(a)') 'Warning: Failed to get available fortr
     *an unit for', ' stopping power output file.'
            END IF
            open(i_outfile,file=spoutput_file(i),status='unknown',err=22
     *      230)
            goto 22240
22230       write(i_log,'(/a)') '***************** Warning: '
            write(i_log,'(a)') 'Warning: Failed to open stopping power o
     *utput file ', spoutput_file(i)
            goto 22250
22240       IFLAG1=0
            IFLAG2=0
            IPLOTE=0
            MEDIUM=i
            XAXIS = 'kinetic energy / MeV'
            YAXISE = 'dE/drhoX MeV/g/cm\\S2\\N'
            YAXISEmfp = 'mean free path / cm'
            YAXISPmfp = 'mean free path / cm'
            write(GRAPHTITLE,'(24a1)')(media(j,i),j=1,24)
            SUBTITLE = 'Electron data'
            DO 22261 j=1,8
              DO 22271 k=1,16
                EKE=ETAB(k)*10.**(j-4)
                IF ((EKE .LE. AE(1)-PRM)) THEN
                  IF ((IFLAG1 .EQ. 0)) THEN
                    IFLAG1=1
                    EKE=AE(1)-PRM
                  ELSE
                    EKE=0.0
                  END IF
                END IF
                IF ((EKE .GT. UE(1)-PRM)) THEN
                  IF ((IFLAG2 .EQ. 0)) THEN
                    IFLAG2=1
                    EKE=UE(1)-PRM
                  ELSE
                    EKE=1.E30
                  END IF
                END IF
                EIE=EKE+PRM
                TMXSO=0.0
                DEDXE=0.0
                DEDXP=0.0
                EFRACT=0.0
                IF ((EIE .GE. AE(1)-0.0001 .AND. EIE .LE. UE(1)+0.001))
     *          THEN
                  ELKE=LOG(EKE)
                  LELKE=EKE1(MEDIUM)*ELKE+EKE0(MEDIUM)
                  DEDXE=EDEDX1(LELKE,MEDIUM)*ELKE+EDEDX0(LELKE,MEDIUM)
                  IPLOTE=IPLOTE+1
                  PLOTEEN(IPLOTE)=EKE
                  PLOTE(IPLOTE)=DEDXE/RHO(MEDIUM)
                END IF
22271         CONTINUE
22272         CONTINUE
22261       CONTINUE
22262       CONTINUE
            IF ((IPLOTE.GT.0)) THEN
              IF ((iunrst(i).EQ.0)) THEN
                SERIES='restricted total stopping power'
              ELSE IF((iunrst(i).EQ.1)) THEN
                SERIES='unrestricted collision stopping power'
              ELSE IF((iunrst(i).EQ.2)) THEN
                SERIES='unrestricted collision + radiative stopping powe
     *r'
              ELSE IF((iunrst(i).EQ.3)) THEN
                SERIES='unrestricted collision + restricted radiative st
     *opping power'
              ELSE IF((iunrst(i).EQ.4)) THEN
                SERIES='restricted collision + unrestricted radiative st
     *opping power'
              ELSE IF((iunrst(i).EQ.5)) THEN
                SERIES='unrestricted radiative stopping power'
              END IF
              CALL MEDXVGRPLOT(PLOTEEN,PLOTE,IPLOTE,0,SERIES, XAXIS,YAXI
     *        SE,GRAPHTITLE,SUBTITLE,i_outfile,2)
            END IF
            close(i_outfile)
22250       CONTINUE
          END IF
22221   CONTINUE
22222   CONTINUE
      END IF
      return
22000 write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(a)') 'Error: Cannot open material data file',materia
     *l_file
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      return
22130 write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(a)') 'Error: Cannot open density correction file: ',
     * density_file(:lnblnk1(density_file))
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      return
      end
      SUBROUTINE MEDXVGRPLOT (X, Y, NPTS, CURVENUM, SERIESTITLE, XTITLE,
     * YTITLE, GRAPHTITLE, SUBTITLE, UNITNUM, AXISTYPE)
      IMPLICIT NONE
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer*4 MAX
      PARAMETER (MAX = 400)
      integer*4 NPTS,NPTS1,CURVENUM, COUNT,UNITNUM,TYPE,AXISTYPE
      real*8 X(NPTS),Y(NPTS),ERRY(NPTS),YMIN,SMALLESTX, SMALLESTY,FUDGE
      integer*4 TITLELENGTH,SUBLENGTH,XAXISLENGTH,YAXISLENGTH,SERIESLENG
     *TH
      integer*4 LOGX, LOGY
      CHARACTER*(*) SUBTITLE
      CHARACTER*(*) GRAPHTITLE,XTITLE,YTITLE,SERIESTITLE
      logical TESTFILE, ALLPOS
      FUDGE = 1.e-10
      IF (( NPTS .gt. MAX)) THEN
        WRITE(6,22280)NPTS, MAX
22280   FORMAT(//' **************************'/ ' Number of points asked
     * for =', I5, ' is greater than max allowed of', I4/ ' Setting NPTS
     * to MAX, you could adjust MAX in xvgrplot.mortran'/ ' ************
     ***************'//)
        NPTS1 = MAX
      ELSE
        NPTS1 = NPTS
      END IF
      INQUIRE(UNIT = UNITNUM,OPENED=TESTFILE)
      IF ((.NOT.TESTFILE)) THEN
        WRITE(6,10100) UNITNUM
10100   FORMAT (//'  ---------Error in Subroutine XVGRPLOT---------' ,/'
     *   Unit specified (',I2,') is not open.' ,/'   Unit must be opened
     * before using subroutine.' ,/'   Data not written to file.' ,/'  -
     *---------------------------------------------'//)
        RETURN
      END IF
      TITLELENGTH = 61
      SUBLENGTH = 61
      XAXISLENGTH = 61
      YAXISLENGTH = 61
      SERIESLENGTH = 61
22291 CONTINUE
        TITLELENGTH = TITLELENGTH - 1
        IF(((GRAPHTITLE(TITLELENGTH:TITLELENGTH) .NE. ' ')))GO TO22292
      GO TO 22291
22292 CONTINUE
22301 CONTINUE
        SUBLENGTH = SUBLENGTH - 1
        IF(((SUBTITLE(SUBLENGTH:SUBLENGTH) .NE. ' ')))GO TO22302
      GO TO 22301
22302 CONTINUE
22311 CONTINUE
        XAXISLENGTH = XAXISLENGTH - 1
        IF(((XTITLE(XAXISLENGTH:XAXISLENGTH) .NE. ' ')))GO TO22312
      GO TO 22311
22312 CONTINUE
22321 CONTINUE
        YAXISLENGTH = YAXISLENGTH - 1
        IF(((YTITLE(YAXISLENGTH:YAXISLENGTH) .NE. ' ')))GO TO22322
      GO TO 22321
22322 CONTINUE
22331 CONTINUE
        SERIESLENGTH = SERIESLENGTH - 1
        IF(((SERIESTITLE(SERIESLENGTH:SERIESLENGTH) .NE. ' ')))GO TO2233
     *  2
      GO TO 22331
22332 CONTINUE
      LOGX = 0
      LOGY = 0
      ALLPOS=.TRUE.
      IF (( X(1).EQ.0.0 )) THEN
        SMALLESTX = 0.1
      ELSE
        SMALLESTX=X(1)
      END IF
      IF (( Y(1).EQ.0.0 )) THEN
        SMALLESTY = 0.1
      ELSE
        SMALLESTY=Y(1)
      END IF
      DO 22341 COUNT=1,NPTS1
        IF (((X(COUNT) .LT. SMALLESTX) .AND. (X(COUNT).NE.0.))) THEN
          SMALLESTX=X(COUNT)
        END IF
        IF (((Y(COUNT) .LT. SMALLESTY) .AND. (Y(COUNT).NE.0.))) THEN
          SMALLESTY=Y(COUNT)
        END IF
        IF (((X(COUNT) .LT. 0.).OR.(Y(COUNT) .LT. 0.))) THEN
          ALLPOS=.FALSE.
        END IF
22341 CONTINUE
22342 CONTINUE
      IF ((ALLPOS)) THEN
        DO 22351 COUNT=1,NPTS1
          IF ((X(COUNT).EQ.0.)) THEN
            X(COUNT)=SMALLESTX*FUDGE
          END IF
          IF ((Y(COUNT).EQ.0.)) THEN
            Y(COUNT)=SMALLESTY*FUDGE
          END IF
22351   CONTINUE
22352   CONTINUE
      END IF
      IF ((AXISTYPE .GT. 0)) THEN
        DO 22361 COUNT=1,NPTS1
          IF ((X(COUNT) .LE. 0.)) THEN
            LOGX = 1
          END IF
          IF ((Y(COUNT) .LE. 0.)) THEN
            LOGY = 1
          END IF
22361   CONTINUE
22362   CONTINUE
      END IF
      IF ((CURVENUM .EQ. 0)) THEN
        IF ((AXISTYPE .EQ. 0)) THEN
          WRITE(UNITNUM,10220) 'xy'
        ELSE IF((AXISTYPE .EQ. 1)) THEN
          WRITE(UNITNUM,10220) 'logy'
          WRITE(UNITNUM,10230)
        ELSE IF((AXISTYPE .EQ. 2)) THEN
          WRITE(UNITNUM,10220) 'logx'
          WRITE(UNITNUM,10230)
        ELSE IF((AXISTYPE .EQ. 3)) THEN
          WRITE(UNITNUM,10220) 'logxy'
          WRITE(UNITNUM,10230)
          WRITE(UNITNUM,10240)
        ELSE
          WRITE(6,10250) AXISTYPE
10250     FORMAT (//'  ------------Error in Subroutine XVGRPLOT---------
     *--' ,/'   AXISTYPE specified (',I2,') is not a valid option.' ,/' 
     *----------------------------------------------'//)
          RETURN
        END IF
10220   FORMAT ('@g0 type ',A,' ')
10230   FORMAT ('@    xaxis  ticklabel format exponential')
10240   FORMAT ('@    yaxis  ticklabel format exponential')
        WRITE(UNITNUM,10260) GRAPHTITLE(1:TITLELENGTH) ,SUBTITLE(1:SUBLE
     *  NGTH) ,XTITLE(1:XAXISLENGTH) ,YTITLE(1:YAXISLENGTH)
10260   FORMAT ('@    title "',A,'"'/ ,'@    subtitle "',A,'"'/ ,'@    l
     *egend on'/ ,'@    legend box linestyle 0'/ ,'@    legend x1 0.6'/,
     *'@    legend y1 0.75'/ ,'@    view xmin 0.250000'/ ,'@    xaxis  l
     *abel "',A,'"'/ ,'@    timestamp on'/ ,'@    yaxis  label "',A,'"')
      END IF
      IF ((AXISTYPE .EQ. 1 .AND. LOGY .EQ. 1)) THEN
        WRITE(UNITNUM,10220) 'xy'
        WRITE(6,10270)
10270   FORMAT (/' ----------WARNING from Subroutine XVGRPLOT---------',
     */'  Log scale requested for Y axis when one or more   ' ,/'  Ydata
     * points are 0 or negative.                  ' ,//'  Y axis scale c
     *hanged to linear.                   ' ,/' ------------------------
     *---------------------------'/)
      END IF
      IF ((AXISTYPE .EQ. 2 .AND. LOGX .EQ. 1)) THEN
        WRITE(UNITNUM,10220) 'xy'
        WRITE(6,10280)
10280   FORMAT (/' ----------WARNING from Subroutine XVGRPLOT---------',
     */'  Log scale requested for X axis when one or more   ' ,/'  Xdata
     * points are 0 or negative.                  ' ,//'  X axis scale c
     *hanged to linear.                   ' ,/' ------------------------
     *---------------------------'/)
      END IF
      IF ((AXISTYPE .EQ. 3 .AND. (LOGX .EQ. 1 .OR. LOGY .EQ. 1))) THEN
        IF ((LOGX .EQ. 1 .AND. LOGY .EQ. 1)) THEN
          WRITE(UNITNUM,10220) 'xy'
          WRITE(6,10290)
10290     FORMAT (/' ----------WARNING from Subroutine XVGRPLOT---------
     *' ,/'  Log scale requested for X axis and Y axis when    ' ,/'  on
     *e or more X and Y data points are 0 or negative.' ,//'  X and Y ax
     *es scales changed to linear.            ' ,/' --------------------
     *-------------------------------'/)
        ELSE IF((LOGX .EQ. 1)) THEN
          WRITE(UNITNUM,10220) 'logy'
          WRITE(6,10280)
        ELSE
          WRITE(UNITNUM,10220) 'logx'
          WRITE(6,10270)
        END IF
      END IF
      IF ((CURVENUM .LT. 10 )) THEN
        WRITE(UNITNUM,'(''@    s'',I1,'' on'')') CURVENUM
      ELSE
        WRITE(UNITNUM,'(''@    s'',I2,'' on'')') CURVENUM
      END IF
      WRITE(UNITNUM,10340) CURVENUM,SERIESTITLE(1:SERIESLENGTH)
10340 FORMAT ('@    legend string ',I2,' "',A,'"')
      WRITE(UNITNUM,10370)
10370 FORMAT ('@TYPE xy')
      IF ((CURVENUM .LT. 10)) THEN
        WRITE(UNITNUM,10380) CURVENUM
        IF ((CURVENUM .EQ. 9)) THEN
          WRITE(UNITNUM,10390) CURVENUM, CURVENUM+1
        ELSE
          WRITE(UNITNUM,10400) CURVENUM, CURVENUM+1
        END IF
      ELSE
        WRITE(UNITNUM,10410) CURVENUM
        WRITE(UNITNUM,10420) CURVENUM, CURVENUM+1
      END IF
10380 FORMAT ('@    s',I1,' errorbar length 0.000000')
10410 FORMAT ('@    s',I2,' errorbar length 0.000000')
10390 FORMAT ('@    s',I1,' symbol color ',I2)
10400 FORMAT ('@    s',I1,' symbol color ',I1)
10420 FORMAT ('@    s',I2,' symbol color ',I2)
      DO 22371 COUNT=1,NPTS1
        WRITE(UNITNUM,10440) X(COUNT),Y(COUNT)
22371 CONTINUE
22372 CONTINUE
10440 FORMAT (1PE15.4,1PE15.4)
      WRITE(UNITNUM,'(''&'')')
      RETURN
      END
      subroutine init_ranmar
      implicit none
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      integer*4 s,t
      integer*4 i,j,k,l,m,ii,jj
      IF((ixx .LE. 0 .OR. ixx .GT. 31328))ixx = 1802
      IF((jxx .LE. 0 .OR. jxx .GT. 30081))jxx = 9373
      i = mod(ixx/177,177) + 2
      j = mod(ixx, 177) + 2
      k = mod(jxx/169,178) + 1
      l = mod(jxx, 169)
      DO 22381 ii=1,97
        s = 0
        t = 8388608
        DO 22391 jj=1,24
          m = mod(mod(i*j,179)*k,179)
          IF (( fool_optimizer .EQ. 999 )) THEN
            write(6,*) i,j,k,m,s,t
          END IF
          i = j
          IF (( fool_optimizer .EQ. 999 )) THEN
            write(6,*) i,j,k,m,s,t
          END IF
          j = k
          IF (( fool_optimizer .EQ. 999 )) THEN
            write(6,*) i,j,k,m,s,t
          END IF
          k = m
          IF (( fool_optimizer .EQ. 999 )) THEN
            write(6,*) i,j,k,m,s,t
          END IF
          l = mod(53*l+1,169)
          IF (( fool_optimizer .EQ. 999 )) THEN
            write(6,*) i,j,k,m,s,t
          END IF
          IF((mod(l*m,64) .GE. 32))s = s + t
          IF (( fool_optimizer .EQ. 999 )) THEN
            write(6,*) i,j,k,m,s,t
          END IF
          t = t/2
          IF (( fool_optimizer .EQ. 999 )) THEN
            write(6,*) i,j,k,m,s,t
          END IF
22391   CONTINUE
22392   CONTINUE
        urndm(ii) = s
22381 CONTINUE
22382 CONTINUE
      crndm = 362436
      cdrndm = 7654321
      cmrndm = 16777213
      twom24 = 1./16777216.
      ixx = 97
      jxx = 33
      rng_seed = 128 + 1
      return
      end
      subroutine ranmar_get
      implicit none
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      integer*4 i,iopt
      IF((rng_seed .EQ. 999999))call init_ranmar
      DO 22401 i=1,128
        iopt = urndm(ixx) - urndm(jxx)
        IF((iopt .LT. 0))iopt = iopt + 16777216
        urndm(ixx) = iopt
        ixx = ixx - 1
        jxx = jxx - 1
        IF ((ixx .EQ. 0)) THEN
          ixx = 97
        ELSE IF(( jxx .EQ. 0 )) THEN
          jxx = 97
        END IF
        crndm = crndm - cdrndm
        IF((crndm .LT. 0))crndm = crndm + cmrndm
        iopt = iopt - crndm
        IF((iopt .LT. 0))iopt = iopt + 16777216
        rng_array(i) = iopt
22401 CONTINUE
22402 CONTINUE
      rng_seed = 1
      return
      end
      SUBROUTINE WATCH(IARG,IWATCH)
      implicit none
      integer*4 iarg,iwatch,IP,ICOUNT,JHSTRY,J,N
      real*8 KE
      integer*4 graph_unit
      integer egs_open_file
      integer*4 ku,kr,ka
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      common/egs_vr/ e_max_rr(3000),  prob_RR,  nbr_split,  i_play_RR,
     *    i_survived_RR,
     *        n_RR_warning,                                        i_do_
     *rr(3000)
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      DATA ICOUNT/0/,JHSTRY/1/ graph_unit/-1/
      save ICOUNT,JHSTRY,graph_unit
      ku = 13
      kr = 0
      ka = 1
      IF ((IARG .EQ. -99)) THEN
        DO 22411 J=1,29
          IAUSFL(J)=1
22411   CONTINUE
22412   CONTINUE
        IAUSFL(22)=0
        IAUSFL(23)=0
        IAUSFL(24)=0
      END IF
      IF ((IARG .EQ. -1)) THEN
        IF ((IWATCH .EQ. 4)) THEN
          IF (( graph_unit .LT. 0 )) THEN
            graph_unit = egs_open_file(ku,kr,ka,'.egsgph')
          END IF
          WRITE(graph_unit,22420) 0,0,0,0.0,0.0,0.0,0.0,JHSTRY
          JHSTRY=JHSTRY+1
        ELSE
          WRITE(6,22430)JHSTRY
22430     FORMAT(' END OF HISTORY',I8,3X,40('*')/)
          JHSTRY=JHSTRY+1
          ICOUNT=ICOUNT+2
          RETURN
        END IF
      END IF
      IF (( (IWATCH .NE. 4) .AND. ((ICOUNT .GE. 50) .OR. (ICOUNT .EQ. 0)
     * .OR. (IARG .EQ. -99)) )) THEN
        ICOUNT=1
        WRITE(6,22440)
22440   FORMAT(//T39,' NP',3X,'ENERGY  Q REGION    X',7X, 'Y',7X,'Z',6X,
     *'U',6X,'V',6X,'W',6X,'LATCH',2X,'WEIGHT'/)
      END IF
      IF (((IWATCH .EQ. 4) .AND. (IARG .GE. 0) .AND. (IARG .NE. 5))) THE
     *N
        IF((graph_unit .LT. 0))graph_unit = egs_open_file(ku,kr,ka,'.egs
     *gph')
        WRITE(graph_unit,22420) NP,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),E(NP)
22420   FORMAT(2I4,1X,I6,4G15.8,I12)
      END IF
      IF((IARG .EQ. 5 .OR. IARG .LT. 0))RETURN
      IF((IWATCH .EQ. 4))RETURN
      KE=E(NP)
      IF ((IQ(NP).NE.0)) THEN
        KE=E(NP)-PRM
      END IF
      IF ((IARG .EQ. 0 .AND. IWATCH .EQ. 2)) THEN
        ICOUNT=ICOUNT+1
        WRITE(6,22450)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP),
     *   W(NP),LATCH(NP),WT(NP)
22450   FORMAT(T11,'STEP ABOUT TO OCCUR', T36,':',I5,F9.3,2I4,3F8.3,3F7.
     *3,I10,1PE10.3)
      ELSE IF((IARG .EQ. 0)) THEN
        RETURN
      END IF
      IF (( IARG .EQ. 1)) THEN
        ICOUNT=ICOUNT+1
        WRITE(6,22460)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP),
     *   W(NP),LATCH(NP),WT(NP)
22460   FORMAT(' Discard  AE,AP<E<ECUT',T36,':',I5,F9.3,2I4,3F8.3,3F7.3,
     *I10,1PE10.3)
      ELSE IF((IARG .EQ. 2)) THEN
        ICOUNT=ICOUNT+1
        WRITE(6,22470)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP),
     *   W(NP),LATCH(NP),WT(NP)
22470   FORMAT(' Discard  E<AE,AP',T36,':',I5,F9.3,2I4,3F8.3,3F7.3,I10,1
     *PE10.3)
      ELSE IF((IARG .EQ. 3)) THEN
        ICOUNT=ICOUNT+1
        WRITE(6,22480)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP),
     *   W(NP),LATCH(NP),WT(NP)
22480   FORMAT(' Discard -user request',T36,':',I5,F9.3,2I4,3F8.3,3F7.3,
     *I10,1PE10.3)
      ELSE IF((IARG .EQ. 4)) THEN
        WRITE(6,22490)EDEP,IR(NP)
22490   FORMAT(T10,'Local energy deposition',T36,':',F12.5,' MeV in regi
     *on ',I6)
      ELSE IF((IARG .EQ. 6)) THEN
        ICOUNT=ICOUNT+1
        WRITE(6,22500)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP),
     *   W(NP),LATCH(NP),WT(NP)
22500   FORMAT(' bremsstrahlung  about to occur',T36,':',I5,F9.3,2I4,3F8
     *.3,3F7.3,I10,1PE10.3)
      ELSE IF((IARG .EQ. 7)) THEN
        IF ((nbr_split .EQ.1)) THEN
          DO 22511 IP=NPold,NP
            IF ((IQ(IP).EQ.-1)) THEN
              KE = E(IP) - RM
              ICOUNT=ICOUNT+1
              WRITE(6,22520)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP),U(IP),
     *        V(IP), W(IP),LATCH(IP),WT(IP)
22520         FORMAT(T10,'Resulting electron',T36,':',I5,F9.3,2I4,3F8.3,
     *3F7.3,I10,1PE10.3)
            ELSE
              KE = E(IP)
              ICOUNT=ICOUNT+1
              WRITE(6,22530)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP),U(IP),
     *        V(IP), W(IP),LATCH(IP),WT(IP)
22530         FORMAT(T10,'Resulting photon',T36,':',I5,F9.3,2I4,3F8.3,3F
     *7.3,I10,1PE10.3)
            END IF
22511     CONTINUE
22512     CONTINUE
        ELSE
          KE = E(NPold) - RM
          ICOUNT=ICOUNT+1
          WRITE(6,22540)NPold,KE,IQ(NPold),IR(NPold),X(NPold),Y(NPold),Z
     *    (NPold),U(NPold),V(NPold), W(NPold),LATCH(NPold),WT(NPold)
22540     FORMAT(T10,'Resulting electron',T36,':',I5,F9.3,2I4,3F8.3,3F7.
     *3,I10,1PE10.3)
          DO 22551 IP=NPold+1,NP
            KE= E(IP)
            IF ((IP .EQ. NPold+1)) THEN
              ICOUNT=ICOUNT+1
              WRITE(6,22560)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP),U(IP),
     *        V(IP), W(IP),LATCH(IP),WT(IP)
22560         FORMAT(T10,'Split photons',T36,':',I5,F9.3,2I4,3F8.3,3F7.3
     *,I10,1PE10.3)
            ELSE
              ICOUNT=ICOUNT+1
              WRITE(6,22570)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP),U(IP),
     *        V(IP), W(IP),LATCH(IP),WT(IP)
22570         FORMAT(T36,':',I5,F9.3,2I4,3F8.3,3F7.3,I10,1PE10.3)
            END IF
22551     CONTINUE
22552     CONTINUE
        END IF
      ELSE IF((IARG .EQ. 8)) THEN
        ICOUNT=ICOUNT+1
        WRITE(6,22580)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP),
     *   W(NP),LATCH(NP),WT(NP)
22580   FORMAT(' Moller   about to occur',T36,':',I5,F9.3,2I4,3F8.3,3F7.
     *3,I10,1PE10.3)
      ELSE IF((IARG .EQ. 9)) THEN
        IF ((NP.EQ.NPold)) THEN
          ICOUNT=ICOUNT+1
          WRITE(6,22590)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP
     *    ), W(NP),LATCH(NP),WT(NP)
22590     FORMAT(T11,'Interaction rejected',T36,':',I5,F9.3,2I4,3F8.3,3F
     *7.3,I10,1PE10.3)
        ELSE
          DO 22601 IP=NPold,NP
            KE = E(IP) - ABS(IQ(NP))*RM
            IF ((IP.EQ.NPold)) THEN
              ICOUNT=ICOUNT+1
              WRITE(6,22610)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP),U(IP),
     *        V(IP), W(IP),LATCH(IP),WT(IP)
22610         FORMAT(T11,'Resulting electrons',T36,':',I5,F9.3,2I4,3F8.3
     *,3F7.3,I10,1PE10.3)
            ELSE
              ICOUNT=ICOUNT+1
              WRITE(6,22620)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP),U(IP),
     *        V(IP), W(IP),LATCH(IP),WT(IP)
22620         FORMAT(T36,':',I5,F9.3,2I4,3F8.3,3F7.3,I10,1PE10.3)
            END IF
22601     CONTINUE
22602     CONTINUE
        END IF
      ELSE IF((IARG .EQ. 10)) THEN
        ICOUNT=ICOUNT+1
        WRITE(6,22630)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP),
     *   W(NP),LATCH(NP),WT(NP)
22630   FORMAT(' Bhabba   about to occur',T36,':',I5,F9.3,2I4,3F8.3,3F7.
     *3,I10,1PE10.3)
      ELSE IF((IARG .EQ. 11)) THEN
        IF ((NP.EQ.NPold)) THEN
          ICOUNT=ICOUNT+1
          WRITE(6,22640)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP
     *    ), W(NP),LATCH(NP),WT(NP)
22640     FORMAT(T11,'Interaction rejected',T36,':',I5,F9.3,2I4,3F8.3,3F
     *7.3,I10,1PE10.3)
        ELSE
          DO 22651 IP=NPold,NP
            KE = E(IP) - ABS(IQ(IP))*RM
            IF ((IP.EQ.NPold)) THEN
              ICOUNT=ICOUNT+1
              WRITE(6,22660)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP),U(IP),
     *        V(IP), W(IP),LATCH(IP),WT(IP)
22660         FORMAT(T11,'Resulting e- or e+',T36,':',I5,F9.3,2I4,3F8.3,
     *3F7.3,I10,1PE10.3)
            ELSE
              ICOUNT=ICOUNT+1
              WRITE(6,22670)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP),U(IP),
     *        V(IP), W(IP),LATCH(IP),WT(IP)
22670         FORMAT(T36,':',I5,F9.3,2I4,3F8.3,3F7.3,I10,1PE10.3)
            END IF
22651     CONTINUE
22652     CONTINUE
        END IF
      ELSE IF((IARG .EQ. 12)) THEN
        ICOUNT=ICOUNT+1
        WRITE(6,22680)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP),
     *   W(NP),LATCH(NP),WT(NP)
22680   FORMAT(' Positron about to decay in flight',T36,':',I5,F9.3,2I4,
     *3F8.3,3F7.3,I10,1PE10.3)
      ELSE IF((IARG .EQ. 13)) THEN
        IF ((NP.EQ.NPold)) THEN
          ICOUNT=ICOUNT+1
          WRITE(6,22690)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP
     *    ), W(NP),LATCH(NP),WT(NP)
22690     FORMAT(T11,'Interaction rejected',T36,':',I5,F9.3,2I4,3F8.3,3F
     *7.3,I10,1PE10.3)
        ELSE
          DO 22701 IP=NPold,NP
            KE = E(IP) - ABS(IQ(IP))*RM
            IF ((IP.EQ.NPold)) THEN
              ICOUNT=ICOUNT+1
              WRITE(6,22710)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP),U(IP),
     *        V(IP), W(IP),LATCH(IP),WT(IP)
22710         FORMAT(T11,'Resulting photons',T36,':',I5,F9.3,2I4,3F8.3,3
     *F7.3,I10,1PE10.3)
            ELSE
              ICOUNT=ICOUNT+1
              WRITE(6,22720)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP),U(IP),
     *        V(IP), W(IP),LATCH(IP),WT(IP)
22720         FORMAT(T36,':',I5,F9.3,2I4,3F8.3,3F7.3,I10,1PE10.3)
            END IF
22701     CONTINUE
22702     CONTINUE
        END IF
      ELSE IF((IARG .EQ. 28)) THEN
        ICOUNT=ICOUNT+1
        WRITE(6,22730)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP),
     *   W(NP),LATCH(NP),WT(NP)
22730   FORMAT(' Positron will annihilate at rest',T36,':',I5,F9.3,2I4,3
     *F8.3,3F7.3,I10,1PE10.3)
      ELSE IF((IARG .EQ. 14)) THEN
        IF ((NP.EQ.NPold)) THEN
          ICOUNT=ICOUNT+1
          WRITE(6,22740)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP
     *    ), W(NP),LATCH(NP),WT(NP)
22740     FORMAT(T11,'Interaction rejected',T36,':',I5,F9.3,2I4,3F8.3,3F
     *7.3,I10,1PE10.3)
        ELSE
          DO 22751 IP=NPold,NP
            KE = E(IP) - ABS(IQ(IP))*RM
            IF ((IP.EQ.NPold)) THEN
              ICOUNT=ICOUNT+1
              WRITE(6,22760)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP),U(IP),
     *        V(IP), W(IP),LATCH(IP),WT(IP)
22760         FORMAT(' Positron annihilates at rest',T36,':',I5,F9.3,2I4
     *,3F8.3,3F7.3,I10,1PE10.3)
            ELSE
              ICOUNT=ICOUNT+1
              WRITE(6,22770)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP),U(IP),
     *        V(IP), W(IP),LATCH(IP),WT(IP)
22770         FORMAT(T36,':',I5,F9.3,2I4,3F8.3,3F7.3,I10,1PE10.3)
            END IF
22751     CONTINUE
22752     CONTINUE
        END IF
      ELSE IF((IARG .EQ. 15)) THEN
        ICOUNT=ICOUNT+1
        WRITE(6,22780)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP),
     *   W(NP),LATCH(NP),WT(NP)
22780   FORMAT(' Pair production about to occur',T36,':',I5,F9.3,2I4,3F8
     *.3,3F7.3,I10,1PE10.3)
      ELSE IF((IARG .EQ. 16)) THEN
        IF ((NP.EQ.NPold .AND. i_survived_rr .EQ. 0)) THEN
          ICOUNT=ICOUNT+1
          WRITE(6,22790)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP
     *    ), W(NP),LATCH(NP),WT(NP)
22790     FORMAT(T11,'Interaction rejected',T36,':',I5,F9.3,2I4,3F8.3,3F
     *7.3,I10,1PE10.3)
        ELSE IF((NP.EQ.NPold .AND. i_survived_rr .GT. 0)) THEN
          WRITE(6,22800)i_survived_rr,prob_rr
22800     FORMAT(T10,'Russian Roulette eliminated ',I2, ' particle(s) wi
     *th probability ',F8.5)
          ICOUNT=ICOUNT+1
          WRITE(6,22810)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP
     *    ), W(NP),LATCH(NP),WT(NP)
22810     FORMAT(T10,'Now on top of stack',T36,':',I5,F9.3,2I4,3F8.3,3F7
     *.3,I10,1PE10.3)
        ELSE
          DO 22821 IP=NPold,NP
            KE = E(IP) - ABS(IQ(IP))*RM
            IF ((IP.EQ.NPold)) THEN
              ICOUNT=ICOUNT+1
              WRITE(6,22830)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP),U(IP),
     *        V(IP), W(IP),LATCH(IP),WT(IP)
22830         FORMAT(T11,'Resulting pair',T36,':',I5,F9.3,2I4,3F8.3,3F7.
     *3,I10,1PE10.3)
            ELSE
              ICOUNT=ICOUNT+1
              WRITE(6,22840)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP),U(IP),
     *        V(IP), W(IP),LATCH(IP),WT(IP)
22840         FORMAT(T36,':',I5,F9.3,2I4,3F8.3,3F7.3,I10,1PE10.3)
            END IF
22821     CONTINUE
22822     CONTINUE
          IF ((i_survived_rr .GT. 0)) THEN
            WRITE(6,22850)i_survived_rr,prob_rr
22850       FORMAT(T10,'Russian Roulette eliminated ',I2,'              
     *                  particle(s) with probability ',F8.5)
            ICOUNT=ICOUNT+1
            WRITE(6,22860)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(
     *      NP), W(NP),LATCH(NP),WT(NP)
22860       FORMAT(T10,'Now on top of stack',T36,':',I5,F9.3,2I4,3F8.3,3
     *F7.3,I10,1PE10.3)
          END IF
        END IF
      ELSE IF((IARG .EQ. 17)) THEN
        ICOUNT=ICOUNT+1
        WRITE(6,22870)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP),
     *   W(NP),LATCH(NP),WT(NP)
22870   FORMAT(' Compton  about to occur',T36,':',I5,F9.3,2I4,3F8.3,3F7.
     *3,I10,1PE10.3)
      ELSE IF((IARG .EQ. 18)) THEN
        IF ((NP .EQ. NPold .AND. i_survived_rr .EQ. 0)) THEN
          ICOUNT=ICOUNT+1
          WRITE(6,22880)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP
     *    ), W(NP),LATCH(NP),WT(NP)
22880     FORMAT(T11,'Interaction rejected',T36,':',I5,F9.3,2I4,3F8.3,3F
     *7.3,I10,1PE10.3)
        ELSE IF((NP .GT. NPold)) THEN
          DO 22891 IP=NPold,NPold+1
            KE = E(IP) - ABS(IQ(IP))*RM
            IF ((IQ(IP).NE.0)) THEN
              ICOUNT=ICOUNT+1
              WRITE(6,22900)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP),U(IP),
     *        V(IP), W(IP),LATCH(IP),WT(IP)
22900         FORMAT(T11,'compton electron created',T36,':',I5,F9.3,2I4,
     *3F8.3,3F7.3,I10,1PE10.3)
            ELSE
              ICOUNT=ICOUNT+1
              WRITE(6,22910)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP),U(IP),
     *        V(IP), W(IP),LATCH(IP),WT(IP)
22910         FORMAT(T11,'compton scattered photon',T36,':',I5,F9.3,2I4,
     *3F8.3,3F7.3,I10,1PE10.3)
            END IF
22891     CONTINUE
22892     CONTINUE
        END IF
        IF ((i_survived_rr .GT. 0)) THEN
          WRITE(6,22920)i_survived_rr,prob_rr
22920     FORMAT(T10,'Russian Roulette eliminated ',I2, ' particle(s) wi
     *th probability ',F8.5)
          ICOUNT=ICOUNT+1
          WRITE(6,22930)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP
     *    ), W(NP),LATCH(NP),WT(NP)
22930     FORMAT(T10,'Now on top of stack',T36,':',I5,F9.3,2I4,3F8.3,3F7
     *.3,I10,1PE10.3)
        END IF
      ELSE IF((IARG .EQ. 19)) THEN
        ICOUNT=ICOUNT+1
        WRITE(6,22940)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP),
     *   W(NP),LATCH(NP),WT(NP)
22940   FORMAT(' Photoelectric about to occur',T36,':',I5,F9.3,2I4,3F8.3
     *,3F7.3,I10,1PE10.3)
      ELSE IF((IARG .EQ. 20)) THEN
        IF ((NPold.EQ.NP .AND. IQ(NP).EQ.0 .AND. i_survived_rr .EQ. 0))
     *  THEN
          ICOUNT=ICOUNT+1
          WRITE(6,22950)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP
     *    ), W(NP),LATCH(NP),WT(NP)
22950     FORMAT(T11,'Photon energy below N-shell',/, T11,'Photon discar
     *ded',T36,':',I5,F9.3,2I4,3F8.3,3F7.3,I10,1PE10.3)
        ELSE IF((IQ(NPold) .EQ. -1 .AND. i_survived_rr .EQ. 0)) THEN
          KE= E(NPold)-RM
          ICOUNT=ICOUNT+1
          WRITE(6,22960)NPold,KE,IQ(NPold),IR(NPold),X(NPold),Y(NPold),Z
     *    (NPold),U(NPold),V(NPold), W(NPold),LATCH(NPold),WT(NPold)
22960     FORMAT(T10,'Resulting photoelectron',T36,':',I5,F9.3,2I4,3F8.3
     *,3F7.3,I10,1PE10.3)
        ELSE IF((i_survived_rr .GT. 0)) THEN
          IF ((NP.EQ.NPold-1 .OR. IQ(NPold) .NE. -1)) THEN
            IF ((i_survived_rr .GT. 1)) THEN
              WRITE(6,22970)i_survived_rr-1,prob_rr
22970         FORMAT(T10,'Russian Roulette eliminated ',I4, ' particle(s
     *) with probability ',F8.5,' plus')
            END IF
            WRITE(6,22980)prob_rr
22980       FORMAT(T10,'Russian Roulette eliminated resulting photoelect
     *ron', ' with probability ',F8.5)
          ELSE
            KE = E(NPold) - RM
            ICOUNT=ICOUNT+1
            WRITE(6,22990)NPold,KE,IQ(NPold),IR(NPold),X(NPold),Y(NPold)
     *      ,Z(NPold),U(NPold),V(NPold), W(NPold),LATCH(NPold),WT(NPold)
22990       FORMAT(T10,'Resulting photoelectron?',T36,':',I5,F9.3,2I4,3F
     *8.3,3F7.3,I10,1PE10.3)
            WRITE(6,23000)i_survived_rr,prob_rr
23000       FORMAT(T10,'Russian Roulette eliminated ',I4, ' particle(s)w
     *ith probability ',F8.5)
          END IF
          ICOUNT=ICOUNT+1
          WRITE(6,23010)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP
     *    ), W(NP),LATCH(NP),WT(NP)
23010     FORMAT(T10,'Now on top of stack',T36,':',I5,F9.3,2I4,3F8.3,3F7
     *.3,I10,1PE10.3)
        END IF
      ELSE IF((IARG .EQ. 24)) THEN
        ICOUNT=ICOUNT+1
        WRITE(6,23020)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP),
     *   W(NP),LATCH(NP),WT(NP)
23020   FORMAT(' Rayleigh scattering occured',T36,':',I5,F9.3,2I4,3F8.3,
     *3F7.3,I10,1PE10.3)
      ELSE IF((IARG .EQ. 25)) THEN
        ICOUNT=ICOUNT+1
        WRITE(6,23030)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP),
     *   W(NP),LATCH(NP),WT(NP)
23030   FORMAT(T10,'Fluorescent X-ray created',T36,':',I5,F9.3,2I4,3F8.3
     *,3F7.3,I10,1PE10.3)
      ELSE IF((IARG .EQ. 26)) THEN
        ICOUNT=ICOUNT+1
        WRITE(6,23040)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP),
     *   W(NP),LATCH(NP),WT(NP)
23040   FORMAT(T10,'Coster-Kronig e- created',T36,':',I5,F9.3,2I4,3F8.3,
     *3F7.3,I10,1PE10.3)
      ELSE IF((IARG .EQ. 27)) THEN
        ICOUNT=ICOUNT+1
        WRITE(6,23050)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP),
     *   W(NP),LATCH(NP),WT(NP)
23050   FORMAT(T10,'Auger electron created',T36,':',I5,F9.3,2I4,3F8.3,3F
     *7.3,I10,1PE10.3)
      END IF
      IF ((IARG .EQ. 0 .AND. IWATCH .EQ. 2)) THEN
        WRITE(6,23060)USTEP,TUSTEP,VSTEP,TVSTEP,EDEP
23060   FORMAT(T5,'USTEP,TUSTEP,VSTEP,TVSTEP,EDEP',T36,':    ',5(1PE13.4
     *))
        ICOUNT=ICOUNT+1
      END IF
      IF((NP .EQ. 1 .OR. IARG .EQ. 0))RETURN
      IF (( IARG .LE. 3)) THEN
        N=NP-1
        KE = E(N) - ABS(IQ(N))*RM
        ICOUNT=ICOUNT+1
        WRITE(6,23070)N,KE,IQ(N),IR(N),X(N),Y(N),Z(N),U(N),V(N), W(N),LA
     *  TCH(N),WT(N)
23070   FORMAT(T10,'Now on top of stack',T36,':',I5,F9.3,2I4,3F8.3,3F7.3
     *,I10,1PE10.3)
      END IF
      RETURN
      END
      SUBROUTINE SIGMA(NDATA,ISTAT,MODE,IERR)
      implicit none
      integer*4 NDATA,ISTAT,MODE,IERR
      COMMON/ERROR/DATA(1,2)
      real*8 data
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer*4 n,non0,i
      real*8 stat,sdenom
      real*8 emax,avg,error,datum,argmnt
      DATA EMAX/99.9/
      IERR=0
      IF (((MODE .LT. 0) .OR. (MODE .GT. 2))) THEN
        MODE=2
        IERR=1
      END IF
      IF (((NDATA.LE.0).OR.(NDATA.GT.1).OR.(ISTAT.LE.0).OR.(ISTAT.GT.2))
     *) THEN
        IERR=-1
        RETURN
      END IF
      IF ((ISTAT .EQ. 1)) THEN
        IERR=10
        DO 23081 N=1,NDATA
          DATA(N,2)=EMAX
23081   CONTINUE
23082   CONTINUE
        RETURN
      END IF
      IF ((MODE.NE.0)) THEN
        STAT=FLOAT(ISTAT)
        SDENOM=STAT*(STAT-1.)
      END IF
      DO 23091 N=1,NDATA
        NON0=0
        AVG=0.0
        ERROR=0.0
        DO 23101 I=1,ISTAT
          DATUM=DATA(N,I)
          IF ((DATUM.NE.0.0)) THEN
            NON0=NON0+1
            AVG=AVG+DATUM
            ERROR=ERROR+DATUM**2
          END IF
23101   CONTINUE
23102   CONTINUE
        IF ((NON0 .EQ. 0)) THEN
          IERR=11
          ERROR=EMAX
          GOTO 23110
        ELSE IF(((NON0 .EQ. 1) .AND. (MODE .EQ. 0))) THEN
          ERROR=EMAX
          GOTO23110
        ELSE
          IF ((MODE .EQ. 0)) THEN
            STAT=FLOAT(NON0)
            SDENOM=STAT*(STAT-1.)
          END IF
        END IF
        AVG=AVG/STAT
        ARGMNT=ERROR-STAT*AVG**2
        IF ((ARGMNT.LT.0.0)) THEN
          WRITE(6,23120)ARGMNT,ERROR,STAT,AVG,SDENOM
23120     FORMAT(' ***** - SQ RT IN SIGMA. ARGMNT,ERROR,STAT,AVG,SDENOM=
     *'/' ',5E12.4)
          ARGMNT=0.0
        END IF
        ERROR=SQRT(ARGMNT/SDENOM)
        IF ((AVG .EQ. 0.)) THEN
          ERROR=EMAX
        ELSE
          ERROR=100.*ERROR/ABS(AVG)
        END IF
        IF((MODE .EQ. 2))AVG=AVG*STAT
23110   CONTINUE
        DATA(N,1)=AVG
        DATA(N,2)=MIN(EMAX,ERROR)
23091 CONTINUE
23092 CONTINUE
      RETURN
      END
      subroutine prepare_alias_sampling(nsbin,fs_array,ws_array,ibin_arr
     *ay)
      implicit none
      integer*4 nsbin,ibin_array(nsbin)
      real*8 fs_array(nsbin),ws_array(nsbin)
      integer*4 i,j_l,j_h
      real*8 sum,aux
      sum = 0
      DO 23131 i=1,nsbin
        IF((fs_array(i) .LT. 1e-30))fs_array(i) = 1e-30
        ws_array(i) = -fs_array(i)
        ibin_array(i) = 1
        sum = sum + fs_array(i)
23131 CONTINUE
23132 CONTINUE
      sum = sum/nsbin
      DO 23141 i=1,nsbin-1
        DO 23151 j_h=1,nsbin
          IF (( ws_array(j_h) .LT. 0 )) THEN
            IF((abs(ws_array(j_h)) .GT. sum))GOTO 23160
          END IF
23151   CONTINUE
23152   CONTINUE
        j_h = nsbin
23160   CONTINUE
          DO 23161 j_l=1,nsbin
          IF (( ws_array(j_l) .LT. 0 )) THEN
            IF((abs(ws_array(j_l)) .LT. sum))GOTO 23170
          END IF
23161   CONTINUE
23162   CONTINUE
        j_l = nsbin
23170   aux = sum - abs(ws_array(j_l))
        ws_array(j_h) = ws_array(j_h) + aux
        ws_array(j_l) = -ws_array(j_l)/sum
        ibin_array(j_l) = j_h
        IF((i .EQ. nsbin-1))ws_array(j_h) = 1
23141 CONTINUE
23142 CONTINUE
      return
      end
      real*8 function alias_sample(nsbin,xs_array,ws_array,ibin_array)
      implicit none
      integer*4 nsbin,ibin_array(nsbin)
      real*8 xs_array(0:nsbin),ws_array(nsbin)
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      real*8 v1,v2,aj
      integer*4 j
      IF((rng_seed .GT. 128))call ranmar_get
      v1 = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      IF((rng_seed .GT. 128))call ranmar_get
      v2 = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      aj = 1 + v1*nsbin
      j = aj
      IF((j .GT. nsbin))j = nsbin
      aj = aj - j
      IF (( aj .GT. ws_array(j) )) THEN
        j = ibin_array(j)
      END IF
      alias_sample = (1-v2)*xs_array(j-1) + v2*xs_array(j)
      return
      end
C***************************************************************************
C
C   This file was automatically generated by:
C   EGSnrc-configure-linux version 1.0
C   It contains various subroutines and functions for date, time,
C   CPU time, host name, etc.
C
C   Attention: all changes will be lost the next time you run
C   EGSnrc-configure-linux.
C
C***************************************************************************

C##############################################################################
C
C  EGSnrc egs_system subroutine v1
C  Copyright (C) 2015 National Research Council Canada
C
C  This file is part of EGSnrc.
C
C  EGSnrc is free software: you can redistribute it and/or modify it under
C  the terms of the GNU Affero General Public License as published by the
C  Free Software Foundation, either version 3 of the License, or (at your
C  option) any later version.
C
C  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY
C  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
C  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
C  more details.
C
C  You should have received a copy of the GNU Affero General Public License
C  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.
C
C##############################################################################
C
C  Author:          Iwan Kawrakow, 2003
C
C  Contributors:
C
C##############################################################################


C*****************************************************************************
C egs_system(command)  runs a system command and returns the status
C                      command must be null-terminated
C*****************************************************************************
      integer function egs_system(command)
      character*(*) command
      integer system, istat
      istat = system(command)
      egs_system = istat
      return
      end

C##############################################################################
C
C  EGSnrc egs_isdir subroutine v1
C  Copyright (C) 2015 National Research Council Canada
C
C  This file is part of EGSnrc.
C
C  EGSnrc is free software: you can redistribute it and/or modify it under
C  the terms of the GNU Affero General Public License as published by the
C  Free Software Foundation, either version 3 of the License, or (at your
C  option) any later version.
C
C  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY
C  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
C  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
C  more details.
C
C  You should have received a copy of the GNU Affero General Public License
C  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.
C
C##############################################################################
C
C  Author:          Iwan Kawrakow, 2003
C
C  Contributors:
C
C##############################################################################


C*****************************************************************************
C
C  egs_isdir(file_name)  Returns .true., if the string file_name points to
C                        an existing directory. This version uses the lstat
C                        intrinsic and then tests for bit 14 being set in
C                        the mode element. This works on all Unix systems
C                        that I have access to (Linux, Aix, HP-UX, OSF1,
C                        Solaris, IRIX)
C
C*****************************************************************************

      logical function egs_isdir(file_name)
      implicit none
      character*(*) file_name
      integer*4 lnblnk1, res, array(13), l, lstat
      logical btest
      egs_isdir = .false.
      l = lnblnk1(file_name)
      if( l.lt.len(file_name) ) file_name(l+1:l+1) = char(0)
         ! On some systems lstat only works if the string is 0-terminated
      res = lstat(file_name,array)
      if( l.lt.len(file_name) ) file_name(l+1:l+1) = ' '
      if( res.eq.0 ) then
            ! Amost all compilers that have the lstat intrinsic return the
            ! file mode in the 3rd array element. But the PGI compiler has
            ! its own opinion on the subject and returns it in the 5th element
            ! That's why the relevant element is written as 3
            ! here, 3 gets replaced by the appropriate element
            ! by the configure script.
          if( btest(array(3),14) ) egs_isdir = .true.
      end if
      return
      end

C##############################################################################
C
C  EGSnrc date subroutines v1
C  Copyright (C) 2015 National Research Council Canada
C
C  This file is part of EGSnrc.
C
C  EGSnrc is free software: you can redistribute it and/or modify it under
C  the terms of the GNU Affero General Public License as published by the
C  Free Software Foundation, either version 3 of the License, or (at your
C  option) any later version.
C
C  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY
C  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
C  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
C  more details.
C
C  You should have received a copy of the GNU Affero General Public License
C  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.
C
C##############################################################################
C
C  Author:          Iwan Kawrakow, 2003
C
C  Contributors:
C
C##############################################################################


C***************************************************************************
C
C   egs_fdate(out):  print a 24 char date and time string in the form
C                         'Tue Mar 18 08:16:42 2003'
C                    to the unit specified by out without end of line
C                    i.e. the sequence
C                    write(6,'(a,$)') 'Today is '
C                    call egs_fdate(6)
C                    write(6,'(a)') '. Have a nice date'
C                    should result in something like
C                    Today is Tue Mar 18 08:16:42 2003. Have a nice date
C                    printed to unit 6.
C
C***************************************************************************

      subroutine egs_fdate(ounit)
      integer ounit
      character*24 string
      call fdate(string)
      write(ounit,'(a,$)') string
      end

C***************************************************************************
C
C   egs_get_fdate(string) assignes a 24 char date and time string to string
C                         string must be at least 24 chars long, otherwise
C                         this subroutine has no effect.
C
C***************************************************************************

      subroutine egs_get_fdate(string)
      character*(*) string
      if( len(string).ge.24 ) call fdate(string)
      return
      end

C##############################################################################
C
C  EGSnrc egs_date_and_time subroutine v1
C  Copyright (C) 2015 National Research Council Canada
C
C  This file is part of EGSnrc.
C
C  EGSnrc is free software: you can redistribute it and/or modify it under
C  the terms of the GNU Affero General Public License as published by the
C  Free Software Foundation, either version 3 of the License, or (at your
C  option) any later version.
C
C  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY
C  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
C  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
C  more details.
C
C  You should have received a copy of the GNU Affero General Public License
C  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.
C
C##############################################################################
C
C  Author:          Iwan Kawrakow, 2003
C
C  Contributors:
C
C##############################################################################


      subroutine egs_date_and_time(vnow)
      integer vnow(8)
      character dat*8,tim*10,zon*5
      call date_and_time(dat,tim,zon,vnow)
      return
      end

C##############################################################################
C
C  EGSnrc egs_date subroutine v1
C  Copyright (C) 2015 National Research Council Canada
C
C  This file is part of EGSnrc.
C
C  EGSnrc is free software: you can redistribute it and/or modify it under
C  the terms of the GNU Affero General Public License as published by the
C  Free Software Foundation, either version 3 of the License, or (at your
C  option) any later version.
C
C  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY
C  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
C  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
C  more details.
C
C  You should have received a copy of the GNU Affero General Public License
C  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.
C
C##############################################################################
C
C  Author:          Iwan Kawrakow, 2003
C
C  Contributors:
C
C##############################################################################


C*************************************************************************
C
C egs_date(ounit): print a 11 char string in the form
C                     '18-Mar-2003'
C                  to the unit specified by ounit
C                  No end of line character is inserted
C
C*************************************************************************

      subroutine egs_date(ounit)
      integer ounit
      character string*24, dat*11
      call fdate(string)
      dat(1:2) = string(9:10)
      dat(3:3) = '-'
      dat(4:6) = string(5:7)
      dat(7:7) = '-'
      dat(8:11) = string(21:24)
      write(ounit,'(a,$)') dat
      return
      end

C##############################################################################
C
C  EGSnrc egs_time subroutine v1
C  Copyright (C) 2015 National Research Council Canada
C
C  This file is part of EGSnrc.
C
C  EGSnrc is free software: you can redistribute it and/or modify it under
C  the terms of the GNU Affero General Public License as published by the
C  Free Software Foundation, either version 3 of the License, or (at your
C  option) any later version.
C
C  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY
C  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
C  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
C  more details.
C
C  You should have received a copy of the GNU Affero General Public License
C  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.
C
C##############################################################################
C
C  Author:          Iwan Kawrakow, 2003
C
C  Contributors:
C
C##############################################################################


C $Id: egs_time_v1.f,v 1.1 2003/07/11 19:17:08 iwan Exp $
C*************************************************************************
C
C egs_time(ounit): print a 8 char string in the form hh:mm:ss
C                  to the unit specified by ounit
C                  No end of line character is inserted
C
C*************************************************************************

      subroutine egs_time(ounit)
      integer ounit
      character string*24
      call fdate(string)
      write(ounit,'(a,$)') string(12:19)
      return
      end

C##############################################################################
C
C  EGSnrc seconds timing subroutines v1
C  Copyright (C) 2015 National Research Council Canada
C
C  This file is part of EGSnrc.
C
C  EGSnrc is free software: you can redistribute it and/or modify it under
C  the terms of the GNU Affero General Public License as published by the
C  Free Software Foundation, either version 3 of the License, or (at your
C  option) any later version.
C
C  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY
C  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
C  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
C  more details.
C
C  You should have received a copy of the GNU Affero General Public License
C  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.
C
C##############################################################################
C
C  Author:          Iwan Kawrakow, 2003
C
C  Contributors:
C
C##############################################################################


C*****************************************************************************
C
C real function egs_secnds(t0): returns seconds passed since midnight minus t0
C
C*****************************************************************************

      real function egs_secnds(t0)
      real t0,t1
      character dat*8,tim*10,zon*5
      integer values(8)
      call date_and_time(dat,tim,zon,values)
      t1 = 3600.*values(5) + 60.*values(6) + values(7) + 0.001*values(8)
      egs_secnds = t1 - t0
      return
      end

C*****************************************************************************
C
C real function egs_tot_time()
C
C   On first call returns seconds passed since 1/1/1970
C   On subsequent calls returns
C     - seconds since last call, if flag = 0
C     - seconds since first call, else
C
C*****************************************************************************

      real function egs_tot_time(flag)
      integer flag
      character dat*8,tim*10,zon*5
      integer vnow(8), vlast(8),i
      real t,egs_time_diff,t0
      data vlast/1970,1,1,5*0/,t0/-1/
      save vlast,t0
      call date_and_time(dat,tim,zon,vnow)
      t = egs_time_diff(vlast,vnow)
      do i=1,8
        vlast(i)=vnow(i)
      end do
      if( t0.lt.0 ) then
        t0 = 0
        egs_tot_time = t
      else
        t0 = t0 + t
        if(flag.eq.0) then
          egs_tot_time = t
        else
          egs_tot_time = t0
        end if
      end if
      return
      end

C##############################################################################
C
C  EGSnrc date and time subroutines
C  Copyright (C) 2015 National Research Council Canada
C
C  This file is part of EGSnrc.
C
C  EGSnrc is free software: you can redistribute it and/or modify it under
C  the terms of the GNU Affero General Public License as published by the
C  Free Software Foundation, either version 3 of the License, or (at your
C  option) any later version.
C
C  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY
C  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
C  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
C  more details.
C
C  You should have received a copy of the GNU Affero General Public License
C  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.
C
C##############################################################################
C
C  Author:          Iwan Kawrakow, 2003
C
C  Contributors:
C
C##############################################################################


C****************************************************************************
C
C Returns the time difference between vstart and vend
C vstart and vend are integer arrays of dimension 8 with elements
C corresponding to the specification of the data_and_time routine, i.e.
C   array(1) = year
C   array(2) = month of the year   (1...12)
C   array(3) = day of the month    (1...31)
C   array(4) = difference in minutes from UTC
C   array(5) = hour of the day     (1...23)
C   array(6) = minute of the hour  (1...59)
C   array(7) = seconds of the minute (1...59)
C   array(8) = miliseconds of the second (1...999)
C
C Note: this implementation ignores the time difference from UTC field
C
C*****************************************************************************
      real function egs_time_diff(vstart,vend)
      integer    vstart(8),vend(8)
      real       egs_time_diff_o
      if( vend(1).lt.vstart(1).or.
     &  (vend(1).eq.vstart(1).and.vend(2).lt.vstart(2)) ) then
        egs_time_diff = -egs_time_diff_o(vend,vstart)
      else
        egs_time_diff = egs_time_diff_o(vstart,vend)
      end if
      return
      end

C******************************************************************************
C
C day difference between the dates specified by the integer arrays vstart and
C vend. The arrays are v(1)=year, v(2)=month, v(3)=day
C
C******************************************************************************
      integer function egs_day_diff(vstart,vend)
      integer vstart(3),vend(3),egs_day_diff_o
      if( vend(1).lt.vstart(1).or.
     &  (vend(1).eq.vstart(1).and.vend(2).lt.vstart(2)) ) then
        egs_day_diff = -egs_day_diff_o(vend,vstart)
      else
        egs_day_diff = egs_day_diff_o(vstart,vend)
      end if
      return
      end

C******************************************************************************
C
C Returns a 3-letter abreviation of the day of the week in the string day,
C given a day specified by the integer array values
C   values(1)=year, values(2)=month, values(3)=day
C
C******************************************************************************
      subroutine egs_weekday(values,day)
      character*(*) day
      integer       values(3)
      integer       days,vtmp(3),egs_day_diff,aux
      character*3   wdays(7)
      data wdays/'Mon','Tue','Wed','Thu','Fri','Sat','Sun'/
      vtmp(1) = 1970
      vtmp(2) = 1
      vtmp(3) = 1
      days = egs_day_diff(vtmp,values)
      aux = mod(days,7)
      days = 4 + aux
      if( days.gt.7 ) days = days - 7
      day(:len(day)) = ' '
      aux = min(len(day),3)
      day(:aux) = wdays(days)(:aux)
      return
      end

C*****************************************************************************
C
C Same as egs_day_diff above, but assumes that vend specifies a later date
C than vstart.
C
C*****************************************************************************
      integer function egs_day_diff_o(vstart,vend)
      integer vstart(3),vend(3)
      integer    days
      logical    next_month
      integer    tm,m,ty,y
      integer    mdays(12)
      data       mdays/31,28,31,30,31,30,31,31,30,31,30,31/
      days = 0
      ty = vstart(1)
      y  = vend(1)
      tm = vstart(2)
      m  = vend(2)
      next_month = .true.
      do while(next_month)
        if( tm.eq.m.and.ty.eq.y ) then
          next_month = .false.
        else
          days = days + mdays(tm)
          if( tm.eq.2.and.mod(ty,4).eq.0 ) days = days + 1
          tm = tm + 1
          if( tm.gt.12 ) then
            ty = ty + 1
            tm = 1
          end if
        end if
      end do
      days = days + vend(3) - vstart(3)
      egs_day_diff_o = days
      return
      end

C******************************************************************************
C
C Same as egs_time_diff above, but assumes that vend specifies a later date
C than vstart.
C
C******************************************************************************
      real function egs_time_diff_o(vstart,vend)
      integer    vstart(8),vend(8)
      integer    days,hours,minutes,secs,msecs
      integer    egs_day_diff_o
      days = egs_day_diff_o(vstart,vend)
      hours = vend(5) - vstart(5)
      minutes = vend(6) - vstart(6)
      secs = vend(7) - vstart(7)
      msecs = vend(8) - vstart(8)
      egs_time_diff_o = 3600.*(24.*days+hours)+60.*minutes+secs+
     &                  0.001*msecs
      return
      end

C******************************************************************************
C
C Returns in month a 3-letter abreviation of the month specified by mo, if
C mo is between 1 and 12, or an empty string otherwise.
C
C******************************************************************************
      subroutine egs_month(mo,month)
      integer mo
      character*(*) month
      integer iaux
      character*3   months(12)
      data months/'Jan','Feb','Mar','Apr','May','Jun', 'Jul','Aug','Sep'
     *,'Oct','Nov','Dec'/
      iaux = min(len(month),3)
      month(:len(month)) = ' '
      if( mo.ge.1.and.mo.le.12 ) month(:iaux) = months(mo)(:iaux)
      return
      end

C******************************************************************************
C
C Converts a 3-letter abreviation of a month to its corresponding integer
C value, if the string month is a valid month, or -1 otherwise.
C
C******************************************************************************
      integer function egs_conver_month(month)
      character*3 month
      character*3 months(12)
      integer i
      data months/'Jan','Feb','Mar','Apr','May','Jun', 'Jul','Aug','Sep'
     *,'Oct','Nov','Dec'/
      do i=1,12
        if( month.eq.months(i) ) then
          egs_conver_month = i
          return
        end if
      end do
      egs_conver_month = -1
      return
      end


C##############################################################################
C
C  EGSnrc egs_etime subroutine
C  Copyright (C) 2015 National Research Council Canada
C
C  This file is part of EGSnrc.
C
C  EGSnrc is free software: you can redistribute it and/or modify it under
C  the terms of the GNU Affero General Public License as published by the
C  Free Software Foundation, either version 3 of the License, or (at your
C  option) any later version.
C
C  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY
C  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
C  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
C  more details.
C
C  You should have received a copy of the GNU Affero General Public License
C  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.
C
C##############################################################################
C
C  Author:          Iwan Kawrakow, 2003
C
C  Contributors:
C
C##############################################################################


C*****************************************************************************
C
C real function egs_etime(): returns CPU time consumed since the start of
C                            the program
C
C*****************************************************************************

      real function egs_etime()
      real tarray(2),etime
      egs_etime = etime(tarray)
      return
      end

C##############################################################################
C
C  EGSnrc canonical system name subroutines
C  Copyright (C) 2015 National Research Council Canada
C
C  This file is part of EGSnrc.
C
C  EGSnrc is free software: you can redistribute it and/or modify it under
C  the terms of the GNU Affero General Public License as published by the
C  Free Software Foundation, either version 3 of the License, or (at your
C  option) any later version.
C
C  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY
C  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
C  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
C  more details.
C
C  You should have received a copy of the GNU Affero General Public License
C  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.
C
C##############################################################################
C
C  Author:          Iwan Kawrakow, 2003
C
C  Contributors:
C
C##############################################################################


C******************************************************************************
C
C Print the canonical system name as determined by the config.guess script
C or the Windows installation program to the unit specified by ounit.
C
C*****************************************************************************

      subroutine egs_print_canonical_system(ounit)
      integer ounit
      write(6,'(a,$)') 'linux64'
      return
      end

C******************************************************************************
C
C Assign the canonical system name as determined by the config.guess script
C or the Windows installation program to the string pointed to by res
C
C******************************************************************************

      subroutine egs_get_canonical_system(res)
      character*(*) res
      integer l1,l2
      l1 = lnblnk1('linux64')
      l2 = len(res)
      res(:l2) = ' '
      if( l2.ge.l1 ) then
        res(:l1) = 'linux64'
      else
        res(:l2) = 'linux64'
      end if
      return
      end


C##############################################################################
C
C  EGSnrc configuration name subroutines
C  Copyright (C) 2015 National Research Council Canada
C
C  This file is part of EGSnrc.
C
C  EGSnrc is free software: you can redistribute it and/or modify it under
C  the terms of the GNU Affero General Public License as published by the
C  Free Software Foundation, either version 3 of the License, or (at your
C  option) any later version.
C
C  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY
C  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
C  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
C  more details.
C
C  You should have received a copy of the GNU Affero General Public License
C  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.
C
C##############################################################################
C
C  Author:          Iwan Kawrakow, 2003
C
C  Contributors:
C
C##############################################################################


C******************************************************************************
C
C Print the configuration name as specified suring the configuration
C process to the unit specified by ounit.
C
C*****************************************************************************

      subroutine egs_print_configuration_name(ounit)
      integer ounit
      write(6,'(a,$)') 'linux64'
      return
      end

C******************************************************************************
C
C Assign the configuration name as specified suring the configuration
C process to the string pointed to by res
C
C******************************************************************************

      subroutine egs_get_configuration_name(res)
      character*(*) res
      integer l1,l2
      l1 = lnblnk1('linux64')
      l2 = len(res)
      res(:l2) = ' '
      if( l2.ge.l1 ) then
        res(:l1) = 'linux64'
      else
        res(:l2) = 'linux64'
      end if
      return
      end


C##############################################################################
C
C  EGSnrc hostname subroutines v1
C  Copyright (C) 2015 National Research Council Canada
C
C  This file is part of EGSnrc.
C
C  EGSnrc is free software: you can redistribute it and/or modify it under
C  the terms of the GNU Affero General Public License as published by the
C  Free Software Foundation, either version 3 of the License, or (at your
C  option) any later version.
C
C  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY
C  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
C  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
C  more details.
C
C  You should have received a copy of the GNU Affero General Public License
C  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.
C
C##############################################################################
C
C  Author:          Iwan Kawrakow, 2003
C
C  Contributors:
C
C##############################################################################


C*****************************************************************************
C
C Print the host name to the unit specified by ounit without inserting
C a new line character.
C
C*****************************************************************************

      subroutine egs_print_hostnm(ounit)
      integer ounit
      character*256 string
      integer res,hostnm,lnblnk1
      res = hostnm(string)
      if( res.ne.0 ) then
        write(6,'(a,a)') 'hostnm returned with a non-zero status '
        stop
      end if
      write(ounit,'(a,$)') string(:lnblnk1(string))
      return
      end

C*****************************************************************************
C
C Assign the host name to the string pointed to be hname.
C
C*****************************************************************************

      subroutine egs_get_hostnm(hname)
      character*(*) hname
      character*256 string
      integer res,hostnm,lnblnk1,l1,l2,l
      res = hostnm(string)
      if( res.ne.0 ) then
        write(6,'(a,a)') 'hostnm returned with a non-zero status '
        stop
      end if
      l1 = lnblnk1(string)
      l2 = len(hname)
      hname(:l2) = ' '
      l = min(l1,l2)
      hname(:l) = string(:l)
      return
      end

#ifdef HAVE_C_COMPILER
      integer*4 function egs_create_lockfile(flag)
      integer*4 flag
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      character*512 fname
      integer*4 i,lnblnk1,l,istat
      DO 23181 i=1,len(fname)
        fname(i:i) = ' '
23181 CONTINUE
23182 CONTINUE
      fname = egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(user_co
     *de)) // '/' // output_file(:lnblnk1(output_file)) // '.lock'
      l = lnblnk1(fname)+1
      fname(l:l) = char(0)
      call egs_create_control_file(fname,istat)
      IF (( istat .NE. 0 .AND. flag .EQ. 1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'Failed to create a lock file named ',fname(:lnbl
     *  nk1(fname))
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      egs_create_lockfile = istat
      return
      end
      integer*4 function egs_open_lockfile(flag)
      integer*4 flag
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      character*512 fname
      integer*4 i,lnblnk1,l,istat
      DO 23191 i=1,len(fname)
        fname(i:i) = ' '
23191 CONTINUE
23192 CONTINUE
      fname = egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(user_co
     *de)) // '/' // output_file(:lnblnk1(output_file)) // '.lock'
      l = lnblnk1(fname)+1
      fname(l:l) = char(0)
      call egs_open_control_file(fname,istat)
      IF (( istat .NE. 0 .AND. flag .EQ. 1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'Failed to open the lock file named ',fname(:lnbl
     *  nk1(fname))
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      egs_open_lockfile = istat
      return
      end
      subroutine egs_remove_lockfile(istat)
      integer*4 istat
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      character*512 fname
      integer*4 i,lnblnk1,l
      DO 23201 i=1,len(fname)
        fname(i:i) = ' '
23201 CONTINUE
23202 CONTINUE
      fname = egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(user_co
     *de)) // '/' // output_file(:lnblnk1(output_file)) // '.lock'
      l = lnblnk1(fname)+1
      fname(l:l) = char(0)
      call egs_remove_file(fname,istat)
      return
      end
      subroutine egs_pjob_control(ncase,n_run,n_left,n_tot,sum,sum2,res,
     *dres)
      implicit none
      integer*8 ncase,n_run,n_tot
      real*8 sum,sum2,res,dres
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/my_times/ t_elapsed, t_cpu, t_first
      real*8 t_elapsed, t_cpu
      integer t_first(8)
      real egs_tot_time,egs_etime
      integer*8 n_last,n_left,nn_tot
      integer t_dum(8)
      integer*4 i,lnblnk1,n_write,n_read,istat,n_job
      integer*4 egs_create_lockfile, egs_open_lockfile
      real*8 tmp,tmp2
      logical first_time
      character control_string*256
      data first_time/.true./
      save first_time,n_last
      IF (( n_parallel .LE. 0 )) THEN
        n_run = ncase
        return
      END IF
      IF((first_time))n_last = 0
      DO 23211 i=1,len(control_string)
        control_string(i:i) = ' '
23211 CONTINUE
23212 CONTINUE
      n_run = ncase/n_parallel/10
      n_left = ncase
      IF (( first_time )) THEN
        IF((n_run .GT. n_left))n_run = n_left
        n_left = ncase - n_run
        IF (( i_parallel .EQ. first_parallel )) THEN
          istat = egs_create_lockfile(1)
          IF (( n_tot .GT. 1 )) THEN
            res = sum/n_tot
            dres = sum2/n_tot - res*res
            IF (( res .GT. 0 .AND. dres .GT. 0 )) THEN
              dres = sqrt(dres/(n_tot-1))/res*100
            ELSE
              dres = 99.9
            END IF
          ELSE
            res = 0
            dres = 99.9
          END IF
          write(control_string,'(2i15,i4,2(1pe16.8),1pe13.5,0pf7.2,2x,8i
     *5)') n_left,n_tot,1,sum,sum2,res,dres,(t_first(i),i=1,8)
          n_write = lnblnk1(control_string) + 1
          call egs_write_control_file(control_string,n_write,istat)
          IF (( istat .NE. n_write )) THEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,*) 'job 1: failed to write to lock file ',n_writ
     *      e,istat
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          call egs_unlock_control_file(istat)
          IF (( istat .NE. 0 )) THEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,*) 'job 1: failed to unlock the file ',istat
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          first_time = .false.
          n_max_parallel = 1
          n_last = n_run
          return
        END IF
        istat = egs_open_lockfile(1)
      END IF
      call egs_rewind_control_file(istat)
      IF (( istat .NE. 0 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'job ',i_parallel,': failed to rewind or lock the
     * control ', 'file', istat
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      n_read = len(control_string)
      call egs_read_control_file(control_string,n_read,istat)
      read(control_string,*,err=23220) n_left,nn_tot,n_job,tmp,tmp2, res
     *,dres,(t_dum(i),i=1,8)
      nn_tot = nn_tot + n_last
      tmp = tmp + sum
      tmp2 = tmp2 + sum2
      IF (( first_time )) THEN
        first_time = .false.
        n_job = n_job + 1
        nn_tot = nn_tot + n_tot
      END IF
      n_tot = nn_tot
      IF (( n_tot .GT. 1 )) THEN
        res = tmp/n_tot
        dres = tmp2/n_tot - res*res
        IF (( res .GT. 0 .AND. dres .GT. 0 )) THEN
          dres = sqrt(dres/(n_tot-1))/res*100
        ELSE
          dres = 99.9
        END IF
      ELSE
        res = 0
        dres = 99.9
      END IF
      IF (( n_run .GT. n_left )) THEN
        n_run = n_left
        n_left = 0
      ELSE
        n_left = n_left - n_run
      END IF
      n_last = n_run
      DO 23231 i=1,len(control_string)
        control_string(i:i) = ' '
23231 CONTINUE
23232 CONTINUE
      write(control_string,'(2i15,i4,2(1pe16.8),1pe13.5,0pf7.2,2x,8i5)')
     * n_left,n_tot,n_job,tmp,tmp2,res,dres,(t_dum(i),i=1,8)
      call egs_rewind_control_file(istat)
      IF (( istat .NE. 0 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'job ',i_parallel,': failed to rewind or lock the
     * control ', 'file', istat
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      n_write = lnblnk1(control_string) + 1
      call egs_write_control_file(control_string,n_write,istat)
      IF (( istat .NE. n_write )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'job ',i_parallel,': failed to write to lock file
     * ', n_write,istat
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      call egs_unlock_control_file(istat)
      IF (( istat .NE. 0 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'job ',i_parallel,': failed to unlock the file ',
     *  istat
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF((n_job .GT. n_max_parallel))n_max_parallel = n_job
      return
23220 write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(a,/a)') 'Failed to read from job control file: got '
     *, control_string(:lnblnk1(control_string))
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      return
      end
      subroutine egs_pjob_finish(n_job)
      implicit none
      integer*4 n_job
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/my_times/ t_elapsed, t_cpu, t_first
      real*8 t_elapsed, t_cpu
      integer t_first(8)
      real egs_tot_time,egs_etime
      integer*4 istat,i,lnblnk1,n_read,n_write
      integer*8 n_left,n_tot
      integer t_start(8),t_end(8)
      real*8 tmp,tmp2,res,dres,t_run
      real egs_time_diff
      character control_string*256
      call egs_rewind_control_file(istat)
      IF (( istat .NE. 0 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'job ',i_parallel,': failed to rewind or lock the
     * control ', 'file', istat
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      n_read = len(control_string)
      call egs_read_control_file(control_string,n_read,istat)
      read(control_string,*,end=23240,err=23240) n_left,n_tot,n_job,tmp,
     *tmp2,res,dres,(t_start(i),i=1,8)
      n_job = n_job - 1
      IF (( n_job .GT. 0 )) THEN
        DO 23251 i=1,len(control_string)
          control_string(i:i) = ' '
23251   CONTINUE
23252   CONTINUE
        write(control_string,'(2i15,i4,2(1pe16.8),1pe13.5,0pf7.2,2x,8i5)
     *') n_left,n_tot,n_job,tmp,tmp2,res,dres,(t_start(i),i=1,8)
        call egs_rewind_control_file(istat)
        IF (( istat .NE. 0 )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'job ',i_parallel,': failed to rewind or lock t
     *he ', 'control file, error was:', istat
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        n_write = lnblnk1(control_string) + 1
        call egs_write_control_file(control_string,n_write,istat)
        IF (( istat .NE. n_write )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'job ',i_parallel,': failed to write to lock fi
     *le ', n_write,istat
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        call egs_unlock_control_file(istat)
        call egs_close_control_file(istat)
        return
      END IF
      call egs_close_control_file(istat)
      call egs_remove_lockfile(istat)
      i_parallel = 0
      call egs_open_units(.false.)
      call egs_date_and_time(t_end)
      t_run = egs_time_diff(t_start,t_end)
      write(i_log,'(/a/,a,t55,i3/,a,t55,i3/,a,f9.1,a,f9.4,a/,a//)') '***
     ************** finished parallel execution ******************', ' n
     *umber of parallel jobs requested: ',n_parallel, ' max. number of j
     *obs executing simultaneously: ',n_max_parallel, ' elapsed time sin
     *ce first job started: ',t_run,' s (',t_run/3600,' h)', '**********
     ******************************************************'
      return
23240 CONTINUE
      write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(a,/a)') 'In egs_pjob_finish: failed to read from con
     *trol string ', control_string(:lnblnk1(control_string))
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      return
      end
#endif
      SUBROUTINE EFUNS(E,V)
      implicit none
      real*4 E,V(8)
      real*4 BREM,AMOLL,BHAB,ANNIH,ESIG,PSIG
      real*4 BREMTM,AMOLTM,BHABTM,ANIHTM,SPTOTE,SPTOTP,TMXS,THBREM
      COMMON/THRESHP/APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP,IUNRSTP
      real*4 APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP
      integer*4 IUNRSTP
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      THBREM=RMP+APP
      IF ((IUNRSTP.EQ.0 .OR. IUNRSTP.EQ.1 .OR. IUNRSTP.EQ.5)) THEN
        BREM=BREMTM(E)
        AMOLL=AMOLTM(E)
        BHAB=BHABTM(E)
        ANNIH=ANIHTM(E)
        ESIG=BREM+AMOLL
        V(1)=ESIG
        PSIG=BREM+BHAB+ANNIH
        V(2)=PSIG
        V(3)=SPTOTE(E,AEP,APP)
        V(4)=SPTOTP(E,AEP,APP)
        IF ((ESIG.GT.0.0)) THEN
          V(5)=BREM/ESIG
        ELSE
          IF ((THBREM.LE.THMOLLP)) THEN
            V(5)=1.0
          ELSE
            V(5)=0.0
          END IF
        END IF
        V(6)=BREM/PSIG
        V(7)=(BREM+BHAB)/PSIG
        V(8)=TMXS(E)
      ELSE IF((IUNRSTP.EQ.2)) THEN
        V(1)=0.0
        V(2)=0.0
        V(5)=0.0
        V(6)=0.0
        V(7)=0.0
        V(3) = SPTOTE(E,E,E)
        V(4) = SPTOTP(E,E,E)
        V(8) = TMXS(E)
      ELSE IF((IUNRSTP.EQ.3)) THEN
        BREM=BREMTM(E)
        ANNIH=ANIHTM(E)
        V(1)=BREM
        V(2)=BREM + ANNIH
        V(3)=SPTOTE(E,E,APP)
        V(4)=SPTOTP(E,E,APP)
        V(5)=1.0
        V(6)=BREM/V(2)
        V(7)=V(6)
        V(8)=TMXS(E)
      ELSE IF((IUNRSTP.EQ.4)) THEN
        V(1)=AMOLTM(E)
        V(2)=BHABTM(E)
        V(3)=SPTOTE(E,AEP,E)
        V(4)=SPTOTP(E,AEP,E)
        V(5)=0.0
        V(6)=0.0
        V(7)=1.0
        V(8)=TMXS(E)
      ELSE
        WRITE(6,23260)IUNRSTP
23260   FORMAT(//'*********IUNRST=',I4,' NOT ALLOWED BY EFUNS*****'/ ' I
     *UNRST=6 OR 7 ONLY ALLOWED WITH CALL OR PLTN OPTIONS'//)
        call exit(20)
      END IF
      RETURN
      END
      real*4 FUNCTION BREMTM(E0)
      implicit none
      real*4 E0,BREMRM
      COMMON/THRESHP/APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP,IUNRSTP
      real*4 APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP
      integer*4 IUNRSTP
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      IF ((E0.LE.APP+RMP)) THEN
        BREMTM=0.
      ELSE
        BREMTM=BREMRM(E0,APP,E0-RMP)
      END IF
      RETURN
      END
      real*4 FUNCTION BREMRM(E,K1,K2)
      implicit none
      real*4 E,K1,K2
      integer*4 I
      real*4 BREMRZ
      COMMON/MIXDAT/NEP,LMED,PZP(50),ZELEMP(50),WAP(50),RHOZP(50), GASPP
     *,EZ,TPZ,IDSTRN(24)
      integer*4 NEP,LMED
      real*4 PZP,ZELEMP,WAP,RHOZP,GASPP,EZ,TPZ
      CHARACTER*4 IDSTRN
      BREMRM=0.
      DO 23271 I=1,NEP
        BREMRM=BREMRM+PZP(I)*BREMRZ(ZELEMP(I),E,K1,K2)
23271 CONTINUE
23272 CONTINUE
      RETURN
      END
      real*4 FUNCTION BREMRZ(Z,E,K1,K2)
      implicit none
      real*4 Z,E,K1,K2
      EXTERNAL BREMFZ
      real*4 DUMMY,BREMDZ,QD,BREMFZ
      DUMMY=BREMDZ(Z,E,K1)
      BREMRZ=QD(BREMFZ,K1,K2,'BREMFZ')
      RETURN
      END
      real*4 FUNCTION BREMDZ(Z,E,K)
      implicit none
      real*4 Z,E,K,BRMSDZ
      BREMDZ=BRMSDZ(Z,E,K)/K
      RETURN
      END
      real*4 FUNCTION BREMFZ(K)
      implicit none
      real*4 K,BRMSFZ
      BREMFZ=BRMSFZ(K)/K
      RETURN
      END
      real*4 FUNCTION BRMSFZ(K)
      implicit none
      real*4 K
      real*4 EMKLOC,DELTA,SB1,SB2,EE
      COMMON/LBREMZ/CONST,DELC,EBREMZ,DELTAM,XLNZ
      real*4 CONST,DELC,EBREMZ,DELTAM,XLNZ
      EMKLOC=EBREMZ-K
      IF ((EMKLOC.EQ.0.0)) THEN
        EMKLOC=1.E-25
      END IF
      DELTA=DELC*K/EMKLOC
      IF ((DELTA.GE.DELTAM)) THEN
        BRMSFZ=0.0
      ELSE
        IF ((DELTA.LE.1.)) THEN
          SB1=20.867+DELTA*(-3.242+DELTA*0.625)-XLNZ
          SB2=20.209+DELTA*(-1.930+DELTA*(-0.086))-XLNZ
        ELSE
          SB1=21.12-4.184*LOG(DELTA+0.952)-XLNZ
          SB2=SB1
        END IF
        EE=EMKLOC/EBREMZ
        BRMSFZ=CONST*((1.+EE*EE)*SB1-0.666667*EE*SB2)
      END IF
      RETURN
      END
      real*4 FUNCTION AMOLTM(E0)
      implicit none
      real*4 E0
      real*4 T0,AMOLRM
      COMMON/THRESHP/APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP,IUNRSTP
      real*4 APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP
      integer*4 IUNRSTP
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      IF ((E0.LE.THMOLLP)) THEN
        AMOLTM=0.
      ELSE
        T0=E0-RMP
        AMOLTM=AMOLRM(E0,AEP,T0*0.5+RMP)
      END IF
      RETURN
      END
      real*4 FUNCTION AMOLRM(EN0,EN1,EN2)
      implicit none
      real*4 EN0,EN1,EN2
      real*4 T0,T1,T2,TM,EM,C1,C2,BETASQ,CMOLL2,EPS1,EPSP1,EPS2,EPSP2
      COMMON/PMCONS/PIP,C,RME,HBAR,ECGS,EMKS,AN
      real*4 PIP,C,RME,HBAR,ECGS,EMKS,AN
      COMMON/MOLVAR/WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU, RLCP,EDEN,RH
     *OP,XCCP,BLCCP,TEFF0P,XR0P
      real*4 WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU,RLCP,EDEN,RHOP, XCCP
     *,BLCCP,TEFF0P,XR0P
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      T0=EN0-RMP
      T1=EN1-RMP
      T2=EN2-RMP
      TM=T0/RMP
      EM=TM+1.
      C1=(TM/EM)**2
      C2=(2.*TM+1.)/EM**2
      BETASQ=1.-1./EM**2
      CMOLL2=RLCP*EDEN*2.*PIP*R0**2/(BETASQ*TM)
      EPS1=T1/T0
      EPSP1=1.-EPS1
      EPS2=T2/T0
      EPSP2=1.-EPS2
      AMOLRM=CMOLL2*(C1*(EPS2-EPS1)+1./EPS1-1./EPS2+1./EPSP2-1./EPSP1 -C
     *2*LOG(EPS2*EPSP1/(EPS1*EPSP2)))
      RETURN
      END
      real*4 FUNCTION BHABTM(E0)
      implicit none
      real*4 E0,BHABRM
      COMMON/THRESHP/APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP,IUNRSTP
      real*4 APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP
      integer*4 IUNRSTP
      IF ((E0.LE.AEP)) THEN
        BHABTM=0.
      ELSE
        BHABTM=BHABRM(E0,AEP,E0)
      END IF
      RETURN
      END
      real*4 FUNCTION BHABRM(EN0,EN1,EN2)
      implicit none
      real*4 EN0,EN1,EN2
      real*4 T0,T1,T2,TM,EM,Y,BETASI,CBHAB2,B1,B2,B3,B4,EPS1,EPS2
      COMMON/PMCONS/PIP,C,RME,HBAR,ECGS,EMKS,AN
      real*4 PIP,C,RME,HBAR,ECGS,EMKS,AN
      COMMON/MOLVAR/WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU, RLCP,EDEN,RH
     *OP,XCCP,BLCCP,TEFF0P,XR0P
      real*4 WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU,RLCP,EDEN,RHOP, XCCP
     *,BLCCP,TEFF0P,XR0P
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      T0=EN0-RMP
      T1=EN1-RMP
      T2=EN2-RMP
      TM=T0/RMP
      EM=TM+1.
      Y=1./(TM+2.)
      BETASI=1./(1.-1./EM**2)
      CBHAB2=RLCP*EDEN*2.*PIP*R0**2/TM
      B1=2.-Y**2
      B2=3.-Y*(6.-Y*(1.-Y*2.))
      B3=2.-Y*(10.-Y*(16.-Y*8.))
      B4=1.-Y*(6.-Y*(12.-Y*8.))
      EPS1=T1/T0
      EPS2=T2/T0
      BHABRM=CBHAB2*(BETASI*(1./EPS1-1./EPS2)-B1*LOG(EPS2/EPS1) +B2*(EPS
     *2-EPS1)+EPS2*EPS2*(EPS2*B4/3.-0.5*B3) - EPS1*EPS1*(EPS1*B4/3.-0.5*
     *B3))
      RETURN
      END
      real*4 FUNCTION ANIHTM(E0)
      implicit none
      real*4 E0
      real*4 GAM,P0P2,P0P,CANIH
      COMMON/PMCONS/PIP,C,RME,HBAR,ECGS,EMKS,AN
      real*4 PIP,C,RME,HBAR,ECGS,EMKS,AN
      COMMON/MOLVAR/WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU, RLCP,EDEN,RH
     *OP,XCCP,BLCCP,TEFF0P,XR0P
      real*4 WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU,RLCP,EDEN,RHOP, XCCP
     *,BLCCP,TEFF0P,XR0P
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      GAM=E0/RMP
      P0P2=GAM*GAM-1.0
      P0P=SQRT(P0P2)
      CANIH=RLCP*EDEN*PIP*R0**2/(GAM+1.)
      ANIHTM=CANIH*((GAM*GAM+4.*GAM+1.)/P0P2*LOG(GAM+P0P) -(GAM+3.)/P0P)
      RETURN
      END
      real*4 FUNCTION SPTOTP(E0,EE,EG)
      implicit none
      real*4 E0,EE,EG
      real*4 SPIONP,BRMSTM
      COMMON/THRESHP/APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP,IUNRSTP
      real*4 APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP
      integer*4 IUNRSTP
      IF ((IUNRSTP.EQ.0)) THEN
        SPTOTP=SPIONP(E0,EE)+BRMSTM(E0,EG)
      ELSE IF((IUNRSTP.EQ.1)) THEN
        SPTOTP=SPIONP(E0,E0)
      ELSE IF((IUNRSTP.EQ.2)) THEN
        SPTOTP=SPIONP(E0,E0)+BRMSTM(E0,E0)
      ELSE IF((IUNRSTP.EQ.3)) THEN
        SPTOTP=SPIONP(E0,E0)+BRMSTM(E0,EG)
      ELSE IF((IUNRSTP.EQ.4)) THEN
        SPTOTP=SPIONP(E0,EE)+BRMSTM(E0,E0)
      ELSE IF((IUNRSTP.EQ.5)) THEN
        SPTOTP=BRMSTM(E0,E0)
      ELSE IF((IUNRSTP.EQ.6)) THEN
        SPTOTP=BRMSTM(E0,EG)
      ELSE IF((IUNRSTP.EQ.7)) THEN
        SPTOTP=SPIONP(E0,EE)
      END IF
      RETURN
      END
      real*4 FUNCTION SPTOTE(E0,EE,EG)
      implicit none
      real*4 E0,EE,EG
      real*4 SPIONE,BRMSTM
      COMMON/THRESHP/APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP,IUNRSTP
      real*4 APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP
      integer*4 IUNRSTP
      IF ((IUNRSTP.EQ.0)) THEN
        SPTOTE=SPIONE(E0,EE)+BRMSTM(E0,EG)
      ELSE IF((IUNRSTP.EQ.1)) THEN
        SPTOTE=SPIONE(E0,E0)
      ELSE IF((IUNRSTP.EQ.2)) THEN
        SPTOTE=SPIONE(E0,E0)+BRMSTM(E0,E0)
      ELSE IF((IUNRSTP.EQ.3)) THEN
        SPTOTE=SPIONE(E0,E0)+BRMSTM(E0,EG)
      ELSE IF((IUNRSTP.EQ.4)) THEN
        SPTOTE=SPIONE(E0,EE)+BRMSTM(E0,E0)
      ELSE IF((IUNRSTP.EQ.5)) THEN
        SPTOTE=BRMSTM(E0,E0)
      ELSE IF((IUNRSTP.EQ.6)) THEN
        SPTOTE=BRMSTM(E0,EG)
      ELSE IF((IUNRSTP.EQ.7)) THEN
        SPTOTE=SPIONE(E0,EE)
      END IF
      RETURN
      END
      real*4 FUNCTION SPIONE(E0,EE)
      implicit none
      real*4 E0,EE,SPIONB
      SPIONE=SPIONB(E0,EE,.FALSE.)
      RETURN
      END
      real*4 FUNCTION SPIONB(E0,EE,POSITR)
      implicit none
      real*4 E0,EE
      LOGICAL POSITR
      real*4 G,EEM,T,ETA2,BETA2,ALETA2,X,D,FTERM,TP2,D2,D3,D4,DELTA
      integer*4 I
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      COMMON/LSPION/CBAR,X0,X1,SK,TOLN10,AFACT,SPC1,SPC2,IEV
      real*4 CBAR,X0,X1,SK,TOLN10,AFACT,SPC1,SPC2,IEV
      COMMON/EPSTAR/EPSTEN(150),EPSTD(150),WEPST(20), EPSTTL,NEPST,IEPST
     *,EPSTFLP, NELEPS,ZEPST(20),IAPRFL,IAPRIMP
      integer*4 ZEPST,NELEPS,IAPRFL,NEPST,IEPST,EPSTFLP,IAPRIMP
      CHARACTER EPSTTL*80
      real*4 EPSTEN,EPSTD,WEPST
      G=E0/RMP
      EEM=EE/RMP-1.
      T=G-1
      ETA2=T*(G+1.)
      BETA2=ETA2/G**2
      ALETA2=LOG(ETA2)
      X=0.21715*ALETA2
      IF ((.NOT.POSITR)) THEN
        D=AMIN1(EEM,0.5*T)
        FTERM=-1.-BETA2+LOG((T-D)*D)+T/(T-D) +(D*D/2.+(2.*T+1.)*LOG(1.-D
     *  /T))/(G*G)
      ELSE
        D=AMIN1(EEM,T)
        TP2=T+2.
        D2=D*D
        D3=D*D2
        D4=D*D3
        FTERM=LOG(T*D)-(BETA2/T)*( T + 2.*D - (3.*D2/2.)/TP2 -(D-D3/3.)/
     *  (TP2*TP2)-(D2/2.-T*D3/3.+D4/4.)/TP2**3)
      END IF
      IF ((EPSTFLP .EQ. 0)) THEN
        IF ((X.LE.X0)) THEN
          DELTA=0.0
        ELSE IF((X.LT.X1)) THEN
          DELTA=TOLN10*X - CBAR + AFACT*(X1 - X)**SK
        ELSE
          DELTA=TOLN10*X - CBAR
        END IF
      ELSE
        IF ((E0 .GE. EPSTEN(IEPST))) THEN
          IF ((E0 .EQ. EPSTEN(IEPST))) THEN
            GO TO 23280
          END IF
          DO 23291 I=IEPST,NEPST-1
            IF ((E0.LT.EPSTEN(I+1))) THEN
              IEPST = I
              GO TO 23280
            END IF
23291     CONTINUE
23292     CONTINUE
          IEPST = NEPST
          GO TO 23280
        ELSE
          DO 23301 I=IEPST,2,-1
            IF ((E0 .GE. EPSTEN(I-1))) THEN
              IEPST = I-1
              GO TO 23280
            END IF
23301     CONTINUE
23302     CONTINUE
          IEPST = 1
        END IF
23280   IF ((IEPST .LT. NEPST)) THEN
          DELTA = EPSTD(IEPST) + (E0 - EPSTEN(IEPST))/ (EPSTEN(IEPST+1)
     *    - EPSTEN(IEPST)) * (EPSTD(IEPST+1) - EPSTD(IEPST))
        ELSE
          DELTA = EPSTD(NEPST)
        END IF
      END IF
      SPIONB=(SPC1/BETA2)*(LOG(T + 2.) - SPC2 + FTERM - DELTA)
      RETURN
      END
      real*4 FUNCTION SPIONP(E0,EE)
      implicit none
      real*4 E0,EE,SPIONB
      SPIONP=SPIONB(E0,EE,.TRUE.)
      RETURN
      END
      real*4 FUNCTION BRMSTM(E0,EG)
      implicit none
      real*4 E0,EG,BRMSRM,AU,zero
      parameter (zero=0)
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      IF ((E0.LE.RMP)) THEN
        BRMSTM=0.
      ELSE
        AU=AMIN1(EG,E0-RMP)
        BRMSTM=BRMSRM(E0,zero,AU)
      END IF
      RETURN
      END
      real*4 FUNCTION BRMSRM(E,K1,K2)
      implicit none
      real*4 E,K1,K2,BRMSRZ
      integer*4 I
      COMMON/MIXDAT/NEP,LMED,PZP(50),ZELEMP(50),WAP(50),RHOZP(50), GASPP
     *,EZ,TPZ,IDSTRN(24)
      integer*4 NEP,LMED
      real*4 PZP,ZELEMP,WAP,RHOZP,GASPP,EZ,TPZ
      CHARACTER*4 IDSTRN
      BRMSRM=0.
      DO 23311 I=1,NEP
        BRMSRM=BRMSRM+PZP(I)*BRMSRZ(ZELEMP(I),E,K1,K2)
23311 CONTINUE
23312 CONTINUE
      RETURN
      END
      real*4 FUNCTION BRMSRZ(Z,E,K1,K2)
      implicit none
      real*4 Z,E,K1,K2
      EXTERNAL BRMSFZ
      real*4 DUMMY,BRMSDZ,QD,BRMSFZ
      DUMMY=BRMSDZ(Z,E,K1)
      BRMSRZ=QD(BRMSFZ,K1,K2,'BRMSFZ')
      RETURN
      END
      real*4 FUNCTION BRMSDZ(Z,EA,K)
      implicit none
      real*4 Z,EA,K
      real*4 APRIM,XSIFP,FCOULCP,BRMSFZ
      COMMON/PMCONS/PIP,C,RME,HBAR,ECGS,EMKS,AN
      real*4 PIP,C,RME,HBAR,ECGS,EMKS,AN
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      COMMON/MOLVAR/WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU, RLCP,EDEN,RH
     *OP,XCCP,BLCCP,TEFF0P,XR0P
      real*4 WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU,RLCP,EDEN,RHOP, XCCP
     *,BLCCP,TEFF0P,XR0P
      COMMON/LBREMZ/CONST,DELC,EBREMZ,DELTAM,XLNZ
      real*4 CONST,DELC,EBREMZ,DELTAM,XLNZ
      EBREMZ=EA
      DELC=136.*Z**(-1./3.)*RMP/EBREMZ
      CONST=APRIM(Z,EBREMZ)*(AN*RHOP/WM)*R0**2*FSC*Z*(Z+XSIFP(Z))*RLCP
      XLNZ=4./3.*LOG(Z)
      IF((EBREMZ.GE.50))XLNZ=XLNZ+4.*FCOULCP(Z)
      DELTAM=EXP((21.12-XLNZ)/4.184)-0.952
      BRMSDZ=BRMSFZ(K)
      RETURN
      END
      real*4 FUNCTION APRIM(Z,E)
      implicit none
      real*4 Z,E
      integer*4 napre,naprz,ie,iz,aprim_unit,egs_get_unit,lnblnk1
      real*4 EM,AINTP
      character aprim_file*256
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      COMMON/EPSTAR/EPSTEN(150),EPSTD(150),WEPST(20), EPSTTL,NEPST,IEPST
     *,EPSTFLP, NELEPS,ZEPST(20),IAPRFL,IAPRIMP
      integer*4 ZEPST,NELEPS,IAPRFL,NEPST,IEPST,EPSTFLP,IAPRIMP
      CHARACTER EPSTTL*80
      real*4 EPSTEN,EPSTD,WEPST
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*4 APRIMD(115,14),EPRIM(115),ZPRIM(14),APRIMZ(115)
      DATA APRIMD/ 1.32,1.26,1.18,1.13,1.09,1.07,1.05,1.04,1.03, 1.02,8*
     *1.0, 97*0.0, 1.34,1.27,1.19,1.13,1.09,1.07,1.05,1.04,1.03,1.02, 8*
     *1.0, 97*0.0, 1.39,1.30,1.21,1.14,1.10,1.07,1.05,1.04,1.03,1.02,0.9
     *94, 2*0.991,0.990,2*0.989,2*0.988, 97*0.0, 1.46,1.34,1.23,1.15,1.1
     *1,1.08, 1.06,1.05,1.03,1.02,0.989, 0.973,0.971,0.969,0.967,0.965,2
     **0.963, 97*0.0, 1.55,1.40,1.26,1.17,1.12,1.09,1.07,1.05,1.03,1.02,
     *0.955,0.935, 0.930,0.925,0.920,0.915,2*0.911, 97*0.0,  1035*0.0/,
     *EPRIM / 2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,21.,31.,41.,51.,61.,71.,81
     *.,91.,  97*0.0/, ZPRIM /6.,13.,29.,50.,79., 9*0.0/
      save APRIMD,EPRIM,ZPRIM,APRIMZ,napre,naprz
      IF ((IAPRIMP.EQ.0)) THEN
        IF ((IAPRFL .EQ. 0)) THEN
          IAPRFL=1
        END IF
        IF ((E.GE.50)) THEN
          APRIM=1.
        ELSE
          EM=E/RMP
          DO 23321 IE=1,18
            APRIMZ(IE)= AINTP(Z,ZPRIM,5,APRIMD(IE,1),115,.FALSE.,.FALSE.
     *      )
23321     CONTINUE
23322     CONTINUE
          APRIM=AINTP(EM,EPRIM,18,APRIMZ,1,.FALSE.,.FALSE.)
        END IF
      ELSE IF((IAPRIMP.EQ.1)) THEN
        IF ((IAPRFL.EQ.0)) THEN
          aprim_file = hen_house(:lnblnk1(hen_house)) // 'pegs4' // '/'
     *    // 'aprime.data'
          aprim_unit=22
          aprim_unit=egs_get_unit(aprim_unit)
          IF (( aprim_unit .LT. 1 )) THEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,*) 'APRIM: failed to get a free fortran unit'
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          open(aprim_unit,file=aprim_file,status='old',err=23330)
          READ(aprim_unit,*) NAPRZ, NAPRE
          IF ((NAPRZ.GT.14)) THEN
            WRITE(6,23340)
23340       FORMAT(//,' TOO MANY ELEMENTS FOR APRIME INTERPOLATION:', /,
     *'   CHANGE $NAPRZ AND RECOMPILE PEGS')
            call exit(24)
          END IF
          IF ((NAPRE.GT.115)) THEN
            WRITE(6,23350)
23350       FORMAT(//,' TOO MANY ENERGIES FOR APRIME INTERPOLATION:', /,
     *'   CHANGE $NAPRE AND RECOMPILE PEGS')
            call exit(24)
          END IF
          READ(aprim_unit,*) (EPRIM(IE),IE=1,NAPRE)
          DO 23361 IE=1,NAPRE
            EPRIM(IE)=1.+EPRIM(IE)/RMP
23361     CONTINUE
23362     CONTINUE
          DO 23371 IZ=1,NAPRZ
            READ(aprim_unit,*)ZPRIM(IZ),(APRIMD(IE,IZ),IE=1,NAPRE)
23371     CONTINUE
23372     CONTINUE
          IAPRFL=1
          close(aprim_unit)
        END IF
        EM=E/RMP
        DO 23381 IE=1,NAPRE
          APRIMZ(IE)= AINTP(Z,ZPRIM,NAPRZ,APRIMD(IE,1),115,.TRUE.,.FALSE
     *    .)
23381   CONTINUE
23382   CONTINUE
        APRIM=AINTP(EM,EPRIM,NAPRE,APRIMZ,1,.FALSE.,.FALSE.)
      ELSE IF((IAPRIMP.EQ.2)) THEN
        IF ((IAPRFL .EQ. 0)) THEN
          IAPRFL=1
        END IF
        APRIM=1.0
      ELSE
        WRITE(6,23390)IAPRIMP
23390   FORMAT(//,' ILLEGAL VALUE FOR IAPRIM: ',I4)
        call exit(24)
      END IF
      RETURN
23330 write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) 'Cannot open file $HEN_HOUSE/pegs4/aprime.data'
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      RETURN
      END
      real*4 FUNCTION AINTP(X,XA,NX,YA,ISK,XLOG,YLOG)
      implicit none
      integer*4 NX,ISK
      real*4 X
      real*4 XA(NX),YA(ISK,NX)
      LOGICAL XLOG,YLOG,XLOGL
      integer*4 I,J
      real*4 XI,XJ,XV,YI,YJ
      XLOGL=XLOG
      DO 23401 J=2,NX
        IF((X.LT.XA(J)))GO TO 23410
23401 CONTINUE
23402 CONTINUE
      J=NX
23410 I=J-1
      IF ((XA(I).LE.0.0)) THEN
        XLOGL=.FALSE.
      END IF
      IF ((.NOT.XLOGL)) THEN
        XI=XA(I)
        XJ=XA(J)
        XV=X
      ELSE
        XI=LOG(XA(I))
        XJ=LOG(XA(J))
        XV=LOG(X)
      END IF
      IF ((YLOG.AND.(YA(1,I).EQ.0.0.OR.YA(1,J).EQ.0.0))) THEN
        AINTP=0.0
      ELSE
        IF ((YLOG)) THEN
          YI=LOG(YA(1,I))
          YJ=LOG(YA(1,J))
          IF ((XJ.EQ.XI)) THEN
            AINTP=YI
          ELSE
            AINTP=(YI*(XJ-XV)+YJ*(XV-XI))/(XJ-XI)
          END IF
          AINTP=EXP(AINTP)
        ELSE
          YI=YA(1,I)
          YJ=YA(1,J)
          IF ((XJ.EQ.XI)) THEN
            AINTP=YI
          ELSE
            AINTP=(YI*(XJ-XV)+YJ*(XV-XI))/(XJ-XI)
          END IF
        END IF
      END IF
      RETURN
      END
      real*4 FUNCTION TMXS(E)
      implicit none
      real*4 E,TMXB
      real*4 SAFETY,TABSMX
      DATA SAFETY/0.8/,TABSMX/10.0/
      save SAFETY,TABSMX
      TMXS=AMIN1(TMXB(E)*SAFETY,TABSMX)
      RETURN
      END
      real*4 FUNCTION TMXB(E)
      implicit none
      real*4 E
      real*4 ESQ,BETA2,PX2
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      COMMON/MOLVAR/WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU, RLCP,EDEN,RH
     *OP,XCCP,BLCCP,TEFF0P,XR0P
      real*4 WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU,RLCP,EDEN,RHOP, XCCP
     *,BLCCP,TEFF0P,XR0P
      ESQ=E**2
      BETA2=1.0-RMPSQ/ESQ
      PX2=ESQ*BETA2/XCCP**2
      TMXB=PX2*BETA2/LOG(BLCCP*PX2)
      RETURN
      END
      real*4 FUNCTION ALKE(E)
      implicit none
      real*4 E
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      ALKE=LOG(E-RMP)
      RETURN
      END
      real*4 FUNCTION ALKEI(X)
      implicit none
      real*4 x
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      ALKEI=EXP(X) + RMP
      RETURN
      END
      SUBROUTINE PWLF1(NI,NIMX,XL,XU,XR,EP,ZTHR,ZEP,NIP,XFUN,XFI, AX,BX,
     *NALM,NFUN,AF,BF,VFUNS)
      implicit none
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer*4 NI,NIMX,NIP,NALM,NFUN
      real*4 XL,XU,XR,EP,AX,BX,XFUN,XFI
      EXTERNAL XFI,VFUNS,XFUN
      real*4 AF(NALM,NFUN),BF(NALM,NFUN),ZTHR(NFUN),ZEP(NFUN)
      LOGICAL QFIT
      integer*4 NL,NU,IPRN,NJ,NK
      real*4 REM
      NL=0
      NU=1
      IPRN=0
23421 CONTINUE
        NJ=MIN0(NU,NIMX)
        IF((QFIT(NJ,XL,XU,XR,EP,ZTHR,ZEP,REM,NIP,XFUN,XFI, AX,BX,NALM,NF
     *  UN,AF,BF,VFUNS,0)))GO TO23422
        IF ((NU.GE.NIMX)) THEN
          NI=NJ
          RETURN
        END IF
        NL=NU
        NU=NU*2
      GO TO 23421
23422 CONTINUE
      NU=NJ
23431 IF(NU.LE.NL+1)GO TO 23432
        NJ=(NL+NU)/2
        NK=NJ
        IF ((QFIT(NJ,XL,XU,XR,EP,ZTHR,ZEP,REM,NIP,XFUN,XFI, AX,BX,NALM,N
     *  FUN,AF,BF,VFUNS,0))) THEN
          NU=NJ
        ELSE
          NL=NK
        END IF
      GO TO 23431
23432 CONTINUE
      NI=NU
      IF((NI.EQ.NJ))RETURN
      IF((.NOT.QFIT(NI,XL,XU,XR,EP,ZTHR,ZEP,REM,NIP,XFUN,XFI, AX,BX,NALM
     *,NFUN,AF,BF,VFUNS,0)))WRITE(6,23440)NI
23440 FORMAT(' CATASTROPHE---DOES NOT FIT WHEN IT SHOULD,NI=',I5)
      RETURN
      END
      LOGICAL FUNCTION QFIT(NJ,XL,XH,XR,EP,ZTHR,ZEP,REM,NJP,XFUN,XFI, AX
     *,BX,NALM,NFUN,AF,BF,VFUNS,IPRN)
      implicit none
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      EXTERNAL VFUNS
      real*4 XFUN,XFI
      integer*4 NJ,NALM,NFUN,NJP,IPRN
      real*4 XL,XH,XR,AX,BX,REM,EP
      real*4 FSXL(10),FSXH(10),FIP(10),FFIP(10),AFIP(10),RE(10),AER(10)
      real*4 AF(NALM,NFUN),BF(NALM,NFUN),ZTHR(NFUN),ZEP(NFUN)
      real*4 XS,XFL,XFH,XFS,XM,DX,W,XLL,SXFL,XSXF,SXFH,DSXF,WIP, SXFIP,X
     *IP
      integer*4 NI,NIP,ISUB,IFUN,JSUB,IP
      integer*4 nkp
      DATA NKP/3/
      save nkp
      IF ((XH.LE.XL)) THEN
        WRITE(6,23450)XL,XH
23450   FORMAT(' QFIT ERROR:XL SHOULD BE < XH. XL,XH=',2G14.6)
        QFIT=.FALSE.
        RETURN
      END IF
      XS=AMAX1(XL,AMIN1(XH,XR))
      NI=NJ-2
      IF ((((XS.EQ.XL.OR.XS.EQ.XH).AND.NI.GE.1).OR.NI.GE.2)) THEN
        XFL=XFUN(XL)
      ELSE
        QFIT=.FALSE.
        RETURN
      END IF
      XFH=XFUN(XH)
      XFS=XFUN(XS)
      XM=AMAX1(XFH-XFS,XFS-XFL)
      DX=XFH-XFL
      W=XM/AMAX1(1.,AINT(NI*XM/DX))
      NI=NI-AINT(NI-DX/W)
      NIP=MAX0(NKP,(NJP+NI-1)/NI)
      NIP=(NIP/2)*2+1
      IF ((XFH-XFS.LE.XFS-XFL)) THEN
        XLL=XFL
      ELSE
        XLL=XFH-NI*W
      END IF
      AX=1./W
      BX=2.-XLL*AX
      REM=0.0
      QFIT=.TRUE.
      SXFL=AMAX1(XLL,XFL)
      ISUB=0
      XSXF=XFI(SXFL)
      CALL VFUNS(XSXF,FSXL)
      IF((IPRN.NE.0))WRITE(6,21110) ISUB,SXFL,XSXF,(FSXL(IFUN),IFUN=1,NF
     *UN)
21110 FORMAT(' QFIT:ISUB,SXF,XSXF,FSX()=',I4,1P,9G11.4/(1X,12G11.4))
      DO 23461 ISUB=1,NI
        JSUB=ISUB+1
        SXFH=AMIN1(XLL+W*ISUB,XH)
        XSXF=XFI(SXFH)
        CALL VFUNS(XSXF,FSXH)
        IF((IPRN.NE.0))WRITE(6,21110)ISUB,SXFH,XSXF,(FSXH(IFUN),IFUN=1,N
     *  FUN)
        DSXF=SXFH-SXFL
        DO 23471 IFUN=1,NFUN
          AF(JSUB,IFUN)=(FSXH(IFUN)-FSXL(IFUN))/DSXF
          BF(JSUB,IFUN)=(FSXL(IFUN)*SXFH-FSXH(IFUN)*SXFL)/DSXF
23471   CONTINUE
23472   CONTINUE
        WIP=DSXF/(NIP+1)
        DO 23481 IP=1,NIP
          SXFIP=SXFL+IP*WIP
          XIP=XFI(SXFIP)
          CALL VFUNS(XIP,FIP)
          DO 23491 IFUN=1,NFUN
            FFIP(IFUN)=AF(JSUB,IFUN)*SXFIP+BF(JSUB,IFUN)
            AFIP(IFUN)=ABS(FIP(IFUN))
            AER(IFUN)=ABS(FFIP(IFUN)-FIP(IFUN))
            RE(IFUN)=0.0
            IF ((FIP(IFUN).NE.0.0)) THEN
              RE(IFUN)=AER(IFUN)/AFIP(IFUN)
            END IF
            IF ((AFIP(IFUN).GE.ZTHR(IFUN))) THEN
              REM=AMAX1(REM,RE(IFUN))
            ELSE IF((AER(IFUN).GT.ZEP(IFUN))) THEN
              QFIT=.FALSE.
            END IF
23491     CONTINUE
23492     CONTINUE
          IF ((IPRN.NE.0)) THEN
            WRITE(6,23500)ISUB,IP,SXFIP,XIP,REM,QFIT,(FIP(IFUN),FFIP(IFU
     *      N), RE(IFUN),AER(IFUN),IFUN=1,NFUN)
23500       FORMAT(1X,2I4,1P,2G12.5,6P,F12.0,L2,1P,2G11.4,6P,F11.0,1P,G1
     *1.4/ (1X,3(1P,2G11.4,6P,F11.0,1P,G11.4)))
          END IF
23481   CONTINUE
23482   CONTINUE
        SXFL=SXFH
        DO 23511 IFUN=1,NFUN
          FSXL(IFUN)=FSXH(IFUN)
23511   CONTINUE
23512   CONTINUE
23461 CONTINUE
23462 CONTINUE
      DO 23521 IFUN=1,NFUN
        AF(1,IFUN)=AF(2,IFUN)
        BF(1,IFUN)=BF(2,IFUN)
        AF(NI+2,IFUN)=AF(NI+1,IFUN)
        BF(NI+2,IFUN)=BF(NI+1,IFUN)
23521 CONTINUE
23522 CONTINUE
      QFIT=QFIT.AND.REM.LE.EP
      NJ=NI+2
      RETURN
      END
      real*4 FUNCTION QD(F,A,B,MSG)
      implicit none
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*4 A,B,F
      EXTERNAL F
      CHARACTER*6 MSG
      logical first_time
      data first_time/.true./
      save first_time
      real*4 DCADRE,ADUM,BDUM,ERRDUM
      integer*4 IER
      ADUM=A
      BDUM=B
      QD=DCADRE(F,ADUM,BDUM,1.E-16,1.E-5,ERRDUM,IER)
      IF ((IER.GT.66)) THEN
        WRITE(6,23530)IER,MSG,A,B,QD,ERRDUM
23530   FORMAT(' DCADRE CODE=',I4,' FOR INTEGRAL ',A6,' FROM ',1P,G14.6,
     *' TO ',G14.6, ',QD=',G14.6,'+-',G14.6)
      END IF
      RETURN
      END
      real*4 FUNCTION DCADRE(F,A,B,AERR,RERR,ERROR,IER)
      implicit none
      DIMENSION T(10,10),R(10),AIT(10),DIF(10),RN(4),TS(2049)
      DIMENSION IBEGS(30),BEGIN(30),FINIS(30),EST(30)
      DIMENSION REGLSV(30)
      LOGICAL H2CONV,AITKEN,RIGHT,REGLAR,REGLSV
      real*4 T,R,AIT,DIF,RN,TS,BEGIN,FINIS,EST,AITLOW
      real*4 H2TOL,AITTOL,LENGTH,JUMPTL,ZERO,P1,HALF,ONE
      real*4 TWO,FOUR,FOURP5,TEN,HUN,CADRE,ERROR,A,B
      real*4 AERR,RERR,STEPMN,STEPNM,STAGE,CUREST,FNSIZE
      real*4 PREVER,BEG,FBEG,END,FEND,STEP,ASTEP,TABS,HOVN
      real*4 FN,SUM,SUMABS,ABSI,VINT,TABTLM,ERGL,ERGOAL
      real*4 ERRA,ERRR,FEXTRP,ERRER,DIFF,SING,FEXTM1,ALG4O2
      real*4 H2NXT,SINGNX,SLOPE,FBEG2,ALPHA
      real*4 ERRET,H2TFEX,FI
      real*4 RVAL,F
      integer*4 IBEGS,IER,ISTAGE,IBEG,IEND,L,N,LM1,N2,ISTEP,II,III,I,IST
     *EP2,IT,NNLEFT
      integer*4 MAXTS,MAXTBL,MXSTGE
      DATA AITLOW,H2TOL,AITTOL,JUMPTL,MAXTS,MAXTBL,MXSTGE/1.1D0,.15D0, .
     *1D0,.01D0,2049,10,30/
      DATA RN(1),RN(2),RN(3),RN(4)/.7142005D0,.3466282D0,.843751D0, .126
     *3305D0/
      DATA ZERO,P1,HALF,ONE,TWO,FOUR,FOURP5,TEN,HUN/0.0D0,0.1D0,0.5D0, 1
     *.0D0,2.0D0,4.0D0,4.5D0,10.0D0,100.0D0/
      save MAXTS,MAXTBL,MXSTGE
      ALG4O2=LOG10(TWO)
      CADRE=ZERO
      ERROR=ZERO
      CUREST=ZERO
      VINT=ZERO
      IER=0
      LENGTH=ABS(B-A)
      IF((LENGTH.EQ.ZERO))GO TO 215
      IF((RERR.GT.P1.OR.RERR.LT.ZERO))GO TO 210
      IF((AERR.EQ.ZERO.AND.(RERR+HUN).LE.HUN))GO TO 210
      ERRR=RERR
      ERRA=ABS(AERR)
      STEPMN=(LENGTH/FLOAT(2**MXSTGE))
      STEPNM=DMAX1(LENGTH,ABS(A),ABS(B))*TEN
      STAGE=HALF
      ISTAGE=1
      FNSIZE=ZERO
      PREVER=ZERO
      REGLAR=.FALSE.
      BEG=A
      RVAL=BEG
      FBEG=F(RVAL)*HALF
      TS(1)=FBEG
      IBEG=1
      END=B
      RVAL=END
      FEND=F(RVAL)*HALF
      TS(2)=FEND
      IEND=2
5     RIGHT=.FALSE.
10    STEP=END - BEG
      ASTEP=ABS(STEP)
      IF((ASTEP.LT.STEPMN))GO TO 205
      IF((STEPNM+ASTEP.EQ.STEPNM))GO TO 205
      T(1,1)=FBEG + FEND
      TABS=ABS(FBEG) + ABS(FEND)
      L=1
      N=1
      H2CONV=.FALSE.
      AITKEN=.FALSE.
15    LM1=L
      L=L + 1
      N2=N + N
      FN=N2
      ISTEP=(IEND - IBEG)/N
      IF((ISTEP.GT.1))GO TO 25
      II=IEND
      IEND=IEND + N
      IF((IEND.GT.MAXTS))GO TO 200
      HOVN=STEP/FN
      III=IEND
      FI=ONE
      DO 23541 I=1,N2,2
        TS(III)=TS(II)
        RVAL=END-FI*HOVN
        TS(III-1)=F(RVAL)
        FI=FI+TWO
        III=III-2
        II=II-1
23541 CONTINUE
23542 CONTINUE
      ISTEP=2
25    ISTEP2=IBEG + ISTEP/2
      SUM=ZERO
      SUMABS=ZERO
      DO 23551 I=ISTEP2,IEND,ISTEP
        SUM=SUM + TS(I)
        SUMABS=SUMABS + ABS(TS(I))
23551 CONTINUE
23552 CONTINUE
      T(L,1)=T(L-1,1)*HALF+SUM/FN
      TABS=TABS*HALF+SUMABS/FN
      ABSI=ASTEP*TABS
      N=N2
      IT=1
      VINT=STEP*T(L,1)
      TABTLM=TABS*TEN
      FNSIZE=DMAX1(FNSIZE,ABS(T(L,1)))
      ERGL=ASTEP*FNSIZE*TEN
      ERGOAL=STAGE*DMAX1(ERRA,ERRR*ABS(CUREST+VINT))
      FEXTRP=ONE
      DO 23561 I=1,LM1
        FEXTRP=FEXTRP*FOUR
        T(I,L)=T(L,I) - T(L-1,I)
        T(L,I+1)=T(L,I) + T(I,L)/(FEXTRP-ONE)
23561 CONTINUE
23562 CONTINUE
      ERRER=ASTEP*ABS(T(1,L))
      IF((L.GT.2))GO TO 40
      IF((TABS+P1*ABS(T(1,2)).EQ.TABS))GO TO 135
      GO TO 15
40    DO 45 I=2,LM1
      DIFF=ZERO
      IF((TABTLM+ABS(T(I-1,L)).NE.TABTLM))DIFF=T(I-1,LM1)/T(I-1,L)
      T(I-1,LM1)=DIFF
45    CONTINUE
      IF((ABS(FOUR-T(1,LM1)).LE.H2TOL))GO TO 60
      IF((T(1,LM1).EQ.ZERO))GO TO 55
      IF((ABS(TWO-ABS(T(1,LM1))).LT.JUMPTL))GO TO 130
      IF((L.EQ.3))GO TO 15
      H2CONV=.FALSE.
      IF((ABS((T(1,LM1)-T(1,L-2))/T(1,LM1)).LE.AITTOL))GO TO 75
50    IF(REGLAR) GO TO 55
      IF((L.EQ.4))GO TO 15
55    IF(ERRER.GT.ERGOAL.AND.(ERGL+ERRER).NE.ERGL) GO TO 175
      GO TO 145
60    IF(H2CONV) GO TO 65
      AITKEN=.FALSE.
      H2CONV=.TRUE.
65    FEXTRP=FOUR
70    IT=IT + 1
      VINT=STEP*T(L,IT)
      ERRER=ABS(STEP/(FEXTRP-ONE)*T(IT-1,L))
      IF((ERRER.LE.ERGOAL))GO TO 160
      IF((ERGL+ERRER.EQ.ERGL))GO TO 160
      IF((IT.EQ.LM1))GO TO 125
      IF((T(IT,LM1).EQ.ZERO))GO TO 70
      IF((T(IT,LM1).LE.FEXTRP))GO TO 125
      IF((ABS(T(IT,LM1)/FOUR-FEXTRP)/FEXTRP.LT.AITTOL))FEXTRP=FEXTRP*FOU
     *R
      GO TO 70
75    IF(T(1,LM1).LT.AITLOW) GO TO 175
      IF((AITKEN))GO TO 80
      H2CONV=.FALSE.
      AITKEN=.TRUE.
80    FEXTRP=T(L-2,LM1)
      IF((FEXTRP.GT.FOURP5))GO TO 65
      IF((FEXTRP.LT.AITLOW))GO TO 175
      IF((ABS(FEXTRP-T(L-3,LM1))/T(1,LM1).GT.H2TOL))GO TO 175
      SING=FEXTRP
      FEXTM1=ONE/(FEXTRP - ONE)
      AIT(1)=ZERO
      DO 85 I=2,L
      AIT(I)=T(I,1) + (T(I,1)-T(I-1,1))*FEXTM1
      R(I)=T(1,I-1)
      DIF(I)=AIT(I) - AIT(I-1)
85    CONTINUE
      IT=2
90    VINT=STEP*AIT(L)
      ERRER=ERRER*FEXTM1
      IF((ERRER.GT.ERGOAL.AND.(ERGL+ERRER).NE.ERGL))GO TO 95
      ALPHA=LOG10(SING)/ALG4O2 - ONE
      IER=MAX0(IER,65)
      GO TO 160
95    IT=IT + 1
      IF((IT.EQ.LM1))GO TO 125
      IF((IT.GT.3))GO TO 100
      H2NXT=FOUR
      SINGNX=SING+SING
100   IF(H2NXT.LT.SINGNX) GO TO 105
      FEXTRP=SINGNX
      SINGNX=SINGNX+SINGNX
      GO TO 110
105   FEXTRP=H2NXT
      H2NXT=FOUR*H2NXT
110   DO 115 I=IT,LM1
      R(I+1)=ZERO
      IF((TABTLM+ABS(DIF(I+1)).NE.TABTLM))R(I+1)=DIF(I)/DIF(I+1)
115   CONTINUE
      H2TFEX=-H2TOL*FEXTRP
      IF((R(L)-FEXTRP.LT.H2TFEX))GO TO 125
      IF((R(L-1)-FEXTRP.LT.H2TFEX))GO TO 125
      ERRER=ASTEP*ABS(DIF(L))
      FEXTM1=ONE/(FEXTRP - ONE)
      DO 120 I=IT,L
      AIT(I)=AIT(I) + DIF(I)*FEXTM1
      DIF(I)=AIT(I) - AIT(I-1)
120   CONTINUE
      GO TO 90
125   FEXTRP=DMAX1(PREVER/ERRER,AITLOW)
      PREVER=ERRER
      IF((L.LT.5))GO TO 15
      IF((L-IT.GT.2.AND.ISTAGE.LT.MXSTGE))GO TO 170
      ERRET=ERRER/(FEXTRP**(MAXTBL-L))
      IF((ERRET.GT.ERGOAL.AND.(ERGL+ERRET).NE.ERGL))GO TO 170
      GO TO 15
130   IF(ERRER.GT.ERGOAL.AND.(ERGL+ERRER).NE.ERGL) GO TO 170
      DIFF=ABS(T(1,L))*(FN+FN)
      GO TO 160
135   SLOPE=(FEND-FBEG)*TWO
      FBEG2=FBEG+FBEG
      DO 140 I=1,4
      RVAL=BEG+RN(I)*STEP
      DIFF=ABS(F(RVAL) - FBEG2-RN(I)*SLOPE)
      IF((TABTLM+DIFF.NE.TABTLM))GO TO 155
140   CONTINUE
      GO TO 160
145   SLOPE=(FEND-FBEG)*TWO
      FBEG2=FBEG+FBEG
      I=1
150   RVAL=BEG+RN(I)*STEP
      DIFF=ABS(F(RVAL) - FBEG2-RN(I)*SLOPE)
155   ERRER=DMAX1(ERRER,ASTEP*DIFF)
      IF((ERRER.GT.ERGOAL.AND.(ERGL+ERRER).NE.ERGL))GO TO 175
      I=I+1
      IF((I.LE.4))GO TO 150
      IER=66
160   CADRE=CADRE + VINT
      ERROR=ERROR + ERRER
      IF((RIGHT))GO TO 165
      ISTAGE=ISTAGE - 1
      IF((ISTAGE.EQ.0))GO TO 220
      REGLAR=REGLSV(ISTAGE)
      BEG=BEGIN(ISTAGE)
      END=FINIS(ISTAGE)
      CUREST=CUREST - EST(ISTAGE+1) + VINT
      IEND=IBEG - 1
      FEND=TS(IEND)
      IBEG=IBEGS(ISTAGE)
      GO TO 180
165   CUREST=CUREST + VINT
      STAGE=STAGE+STAGE
      IEND=IBEG
      IBEG=IBEGS(ISTAGE)
      END=BEG
      BEG=BEGIN(ISTAGE)
      FEND=FBEG
      FBEG=TS(IBEG)
      GO TO 5
170   REGLAR=.TRUE.
175   IF(ISTAGE.EQ.MXSTGE) GO TO 205
      IF((RIGHT))GO TO 185
      REGLSV(ISTAGE+1)=REGLAR
      BEGIN(ISTAGE)=BEG
      IBEGS(ISTAGE)=IBEG
      STAGE=STAGE*HALF
180   RIGHT=.TRUE.
      BEG=(BEG+END)*HALF
      IBEG=(IBEG+IEND)/2
      TS(IBEG)=TS(IBEG)*HALF
      FBEG=TS(IBEG)
      GO TO 10
185   NNLEFT=IBEG - IBEGS(ISTAGE)
      IF((IEND+NNLEFT.GE.MAXTS))GO TO 200
      III=IBEGS(ISTAGE)
      II=IEND
      DO 190 I=III,IBEG
      II=II + 1
      TS(II)=TS(I)
190   CONTINUE
      DO 195 I=IBEG,II
      TS(III)=TS(I)
      III=III + 1
195   CONTINUE
      IEND=IEND + 1
      IBEG=IEND - NNLEFT
      FEND=FBEG
      FBEG=TS(IBEG)
      FINIS(ISTAGE)=END
      END=BEG
      BEG=BEGIN(ISTAGE)
      BEGIN(ISTAGE)=END
      REGLSV(ISTAGE)=REGLAR
      ISTAGE=ISTAGE + 1
      REGLAR=REGLSV(ISTAGE)
      EST(ISTAGE)=VINT
      CUREST=CUREST + EST(ISTAGE)
      GO TO 5
200   IER=131
      GO TO 215
205   IER=132
      GO TO 215
210   IER=133
215   CADRE=CUREST + VINT
220   DCADRE=CADRE
9000  CONTINUE
9005  RETURN
      END
      SUBROUTINE SPINIT(density_file)
      implicit none
      COMMON/PMCONS/PIP,C,RME,HBAR,ECGS,EMKS,AN
      real*4 PIP,C,RME,HBAR,ECGS,EMKS,AN
      COMMON/SPCOMM/MEDTBL(24,73), NUMSTMED,STDATA(6,73)
      CHARACTER*4 MEDTBL
      integer*4 NUMSTMED
      real*4 STDATA
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      COMMON/MOLVAR/WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU, RLCP,EDEN,RH
     *OP,XCCP,BLCCP,TEFF0P,XR0P
      real*4 WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU,RLCP,EDEN,RHOP, XCCP
     *,BLCCP,TEFF0P,XR0P
      COMMON/BREMPRP/DLP1(6),DLP2(6),DLP3(6),DLP4(6),DLP5(6),DLP6(6), DE
     *LCMP,ALPHIP(2),BPARP(2),DELPOSP(2)
      real*4 dlP1,dlP2,dlP3,dlP4,dlP5,dlP6,delcmP,alphiP,bparP,delposP
      COMMON/ELEMTB/NET,ITBL(100),WATBL(100),RHOTBL(100),ASYMT(100)
      integer*4 NET
      real*4 ITBL,WATBL,RHOTBL
      CHARACTER*4 ASYMT
      COMMON/LSPION/CBAR,X0,X1,SK,TOLN10,AFACT,SPC1,SPC2,IEV
      real*4 CBAR,X0,X1,SK,TOLN10,AFACT,SPC1,SPC2,IEV
      COMMON/EPSTAR/EPSTEN(150),EPSTD(150),WEPST(20), EPSTTL,NEPST,IEPST
     *,EPSTFLP, NELEPS,ZEPST(20),IAPRFL,IAPRIMP
      integer*4 ZEPST,NELEPS,IAPRFL,NEPST,IEPST,EPSTFLP,IAPRIMP
      CHARACTER EPSTTL*80
      real*4 EPSTEN,EPSTD,WEPST
      COMMON/THRESHP/APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP,IUNRSTP
      real*4 APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP
      integer*4 IUNRSTP
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/MIXDAT/NEP,LMED,PZP(50),ZELEMP(50),WAP(50),RHOZP(50), GASPP
     *,EZ,TPZ,IDSTRN(24)
      integer*4 NEP,LMED
      real*4 PZP,ZELEMP,WAP,RHOZP,GASPP,EZ,TPZ
      CHARACTER*4 IDSTRN
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      real*4 IMEV
      integer*4 IM,J,IZ,IE,I,ICHECK,IESPEL,IPEGEL,density_unit,lnblnk1,e
     *gs_get_unit
      real*4 VPLASM,ALIADG,EDENL,ALGASP,EPSTRH, TLRNCE,EPSTWT
      CHARACTER*256 density_file
      TOLN10=2.0*LOG(10.0)
      IM=-100
      IF ((EPSTFLP .LT. 0 .OR. EPSTFLP .GT. 1)) THEN
        EPSTFLP = 0
      END IF
      IF ((EPSTFLP.EQ.0)) THEN
23570   CONTINUE
          DO 23571 IM=1,NUMSTMED
          DO 23581 J=1,LMED
            IF((IDSTRN(J).NE.MEDTBL(J,IM)))GO TO 23571
23581     CONTINUE
23582     CONTINUE
          AFACT=STDATA(1,IM)
          SK=STDATA(2,IM)
          X0=STDATA(3,IM)
          X1=STDATA(4,IM)
          IEV=STDATA(5,IM)
          CBAR=STDATA(6,IM)
          IMEV=IEV*1.0E-6
          VPLASM=SQRT(EDEN*R0*C**2/PIP)
          GO TO 23590
23571   CONTINUE
23572   CONTINUE
        IM=0
        IF ((NEP.EQ.1)) THEN
          IZ=ZELEMP(1)
          IF ((IZ.EQ.1.OR.IZ.EQ.7.OR.IZ.EQ.8)) THEN
            WRITE(6,23600)
23600       FORMAT(' STOPPED IN SUBROUTINE SPINIT BECAUSE THIS',/, ' ELE
     *MENT (H, N, OR O) CAN ONLY EXIST AS A DIATOMIC MOLECULE.',/, ' REM
     *EDY:  USE COMP OPTION FOR H2, N2, OR O2 WITH NE=2,PZ=1,1'/, '     
     *AND, IN THE CASE OF A GAS, DEFINE STERNHEIMER ID',/, '   (I.E., ID
     *STRN) LIKE H2-GAS')
            call exit(21)
          END IF
          IEV=ITBL(IZ)
        ELSE
          ALIADG=0.0
          DO 23611 IE=1,NEP
            IZ=ZELEMP(IE)
            IF ((IZ.EQ.1)) THEN
              IEV=19.2
            ELSE IF((IZ.EQ.6)) THEN
              IF ((GASPP.EQ.0.0)) THEN
                IEV=81.0
              ELSE
                IEV=70.0
              END IF
            ELSE IF((IZ.EQ.7)) THEN
              IEV=82.0
            ELSE IF((IZ.EQ.8)) THEN
              IF ((GASPP.EQ.0.0)) THEN
                IEV=106.0
              ELSE
                IEV=97.0
              END IF
            ELSE IF((IZ.EQ.9)) THEN
              IEV=112.0
            ELSE IF((IZ.EQ.17)) THEN
              IEV=180.0
            ELSE
              IEV=1.13*ITBL(IZ)
            END IF
            ALIADG=ALIADG + PZP(IE)*ZELEMP(IE)*LOG(IEV)
23611     CONTINUE
23612     CONTINUE
          ALIADG=ALIADG/ZC
          IEV=EXP(ALIADG)
        END IF
        IMEV=IEV*1.0E-6
        IF ((GASPP.EQ.0.0)) THEN
          EDENL=EDEN
        ELSE
          EDENL=EDEN/GASPP
        END IF
        VPLASM = SQRT(EDENL*R0*C**2/PIP)
        CBAR=1. + 2.*LOG(IMEV/(HBAR*2*PIP*VPLASM/ERGMEV))
        IF ((NEP.EQ.1.AND.INT(ZELEMP(1)).EQ.2.AND.GASPP.NE.0.0)) THEN
          X0=2.191
          X1=3.0
          SK=3.297
        ELSE IF((NEP.EQ.2.AND.INT(ZELEMP(1)).EQ.1 .AND.INT(ZELEMP(2)).EQ
     *  .1)) THEN
          IF ((GASPP.EQ.0.0)) THEN
            X0=0.425
            X1=2.0
            SK=5.949
          ELSE
            X0=1.837
            X1=3.0
            SK=4.754
          END IF
        ELSE
          SK=3.0
          IF ((GASPP.EQ.0.0)) THEN
            IF ((IEV.LT.100.0)) THEN
              IF ((CBAR.LT.3.681)) THEN
                X0=0.2
                X1=2.0
              ELSE
                X0=0.326*CBAR - 1.0
                X1=2.0
              END IF
            ELSE
              IF ((CBAR.LT.5.215)) THEN
                X0=0.2
                X1=3.0
              ELSE
                X0=0.326*CBAR - 1.5
                X1=3.0
              END IF
            END IF
            IF ((X0.GE.X1)) THEN
              WRITE(6,23620)X0,X1,CBAR
23620         FORMAT(' STOPPED IN SPINIT DUE TO X0.GE.X1 , X0,X1,CBAR=',
     *3G15.5,/ ,' IF THIS IS GAS, YOU MUST DEFINE GASP(ATM)')
              call exit(21)
            END IF
          ELSE
            IF ((CBAR.LT.10.0)) THEN
              X0=1.6
              X1=4.0
            ELSE IF((CBAR.LT.10.5)) THEN
              X0=1.7
              X1=4.0
            ELSE IF((CBAR.LT.11.0)) THEN
              X0=1.8
              X1=4.0
            ELSE IF((CBAR.LT.11.5)) THEN
              X0=1.9
              X1=4.0
            ELSE IF((CBAR.LT.12.25)) THEN
              X0=2.0
              X1=4.0
            ELSE IF((CBAR.LT.13.804)) THEN
              X0=2.0
              X1=5.0
            ELSE
              X0=0.326*CBAR - 2.5
              X1=5.0
            END IF
          END IF
        END IF
23590   IF ((GASPP.NE.0.0)) THEN
          ALGASP=LOG(GASPP)
          CBAR=CBAR - ALGASP
          X0=X0 - ALGASP/TOLN10
          X1=X1 - ALGASP/TOLN10
        END IF
        IF ((IM.EQ.0)) THEN
          AFACT=(CBAR - TOLN10*X0)/(X1 - X0)**SK
        END IF
      ELSE
        density_file=density_file(:lnblnk1(density_file))
        density_unit=20
        density_unit=egs_get_unit(density_unit)
        IF (( density_unit .LT. 1 )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'SPINIT: failed to get a free fortran unit'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        open(density_unit,file=density_file,status='old',err=22130)
        READ(density_unit,23630)EPSTTL
23630   FORMAT(A)
        READ(density_unit,*) NEPST,IEV,EPSTRH,NELEPS
        READ(density_unit,*) (ZEPST(I),WEPST(I),I=1,NELEPS)
        READ(density_unit,*) (EPSTEN(I),EPSTD(I),I=1,NEPST)
        close(density_unit)
        IF ((NEPST.GT.150)) THEN
          WRITE(6,23640)NEPST
23640     FORMAT(//' *****NEPST=',I4,' IS GREATER THAN THE 150 ALLOWED')
          call exit(22)
        END IF
        DO 23651 I=1,NEPST
          EPSTEN(I) = EPSTEN(I) + RMP
23651   CONTINUE
23652   CONTINUE
        IMEV = IEV*1.E-06
        IF (( AEP .LT. EPSTEN(1))) THEN
          WRITE(6,23660)EPSTEN(1),AEP
23660     FORMAT(//' ****LOWEST ENERGY INPUT FOR DENSITY EFFECT IS',1P,E
     *10.3/ T20,'WHICH IS HIGHER THAN THE VALUE OF AE=',1P,E10.3,' MEV'/
     * ' ***IT HAS BEEN SET TO AE***'//)
          EPSTEN(1) = AEP
        END IF
        IF (( UEP .GT. EPSTEN(NEPST))) THEN
          WRITE(6,23670)EPSTEN(NEPST),UEP
23670     FORMAT(//' ****HIGHEST ENERGY INPUT FOR DENSITY EFFECT IS',1P,
     *E10.3/ T20,'WHICH IS LOWER THAN THE VALUE OF UE=',1P,E10.3,' MEV'/
     * ' ***IT HAS BEEN SET TO UE***'//)
          EPSTEN(NEPST) = UEP
        END IF
        ICHECK=0
        TLRNCE=0.01
        IF((NELEPS.NE.NEP))ICHECK=1
        IF(((ICHECK.EQ.0) .AND. ( (EPSTRH.LT.((1.0-TLRNCE)*RHOP)) .OR. (
     *  EPSTRH.GT.((1.0+TLRNCE)*RHOP)) )))ICHECK=1
        EPSTWT = 0.0
        DO 23681 I=1,NEP
          EPSTWT = EPSTWT + RHOZP(I)
23681   CONTINUE
23682   CONTINUE
        IF ((EPSTWT.EQ.0.0)) THEN
          WRITE(6,23690)
23690     FORMAT(//' *****IN SPINIT***SOMETHING WRONG, MOLECULAR WEIGHTO
     *F', 'MOLECULE IS ZERO (I.E. SUM OF RHOZ)***'//)
        END IF
        IF ((ICHECK.EQ.0)) THEN
          IESPEL=0
          ICHECK=1
23701     CONTINUE
            IESPEL=IESPEL+1
            IPEGEL=0
23711       CONTINUE
              IPEGEL=IPEGEL+1
              IF ((INT(ZELEMP(IPEGEL)).EQ.ZEPST(IESPEL))) THEN
                ICHECK=0
                GO TO23712
              END IF
              IF(IPEGEL.GE.NEP)GO TO23712
            GO TO 23711
23712       CONTINUE
            IF(((ICHECK.EQ.0)  .AND. ( (WEPST(IESPEL).LT.((1.0-TLRNCE)*R
     *      HOZP(IPEGEL)/EPSTWT)) .OR. (WEPST(IESPEL).GT.((1.0+TLRNCE)*R
     *      HOZP(IPEGEL)/EPSTWT)) )))ICHECK=1
            IF(IESPEL.GE.NELEPS)GO TO23702
          GO TO 23701
23702     CONTINUE
        END IF
        IF ((ICHECK.EQ.1)) THEN
          WRITE(6,23720)
23720     FORMAT(////'0*** COMPOSITION IN INPUT DENSITY FILE DOES NOT MA
     *TCH ', ' THAT BEING USED BY PEGS'//' ***** QUITTING EARLY***'////)
          call exit(23)
        END IF
      END IF
      SPC1=2.*PIP*R0**2*RMP*EDEN*RLCP
      SPC2=LOG((IMEV/RMP)**2/2.0)
      RETURN
22130 write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) ' Failed to open density file ',density_file
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      RETURN
      END
      SUBROUTINE MIX
      implicit none
      integer*4 I,IZZ
      real*4 AL183,ZAB,V2000
      real*4 FCOULCP,XSIFP
      COMMON/MIMSD/BMIN
      real*4 BMIN
      COMMON/MIXDAT/NEP,LMED,PZP(50),ZELEMP(50),WAP(50),RHOZP(50), GASPP
     *,EZ,TPZ,IDSTRN(24)
      integer*4 NEP,LMED
      real*4 PZP,ZELEMP,WAP,RHOZP,GASPP,EZ,TPZ
      CHARACTER*4 IDSTRN
      COMMON/MOLVAR/WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU, RLCP,EDEN,RH
     *OP,XCCP,BLCCP,TEFF0P,XR0P
      real*4 WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU,RLCP,EDEN,RHOP, XCCP
     *,BLCCP,TEFF0P,XR0P
      COMMON/PMCONS/PIP,C,RME,HBAR,ECGS,EMKS,AN
      real*4 PIP,C,RME,HBAR,ECGS,EMKS,AN
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      COMMON/ADLEN/ALRAD(4),ALRADP(4),A1440,A183
      real*4 ALRAD,ALRADP,A1440,A183
      COMMON/BREMPRP/DLP1(6),DLP2(6),DLP3(6),DLP4(6),DLP5(6),DLP6(6), DE
     *LCMP,ALPHIP(2),BPARP(2),DELPOSP(2)
      real*4 dlP1,dlP2,dlP3,dlP4,dlP5,dlP6,delcmP,alphiP,bparP,delposP
      real*4 XSI(20),ZZX(20),FZC(20),FCOUL(20),ZZ(20)
      IF ((GASPP.NE.0.0)) THEN
        RHOP=GASPP*RHOP
      END IF
      AL183 = LOG(A183)
      TPZ=0.0
      WM=0.0
      ZC=0.0
      ZT=0.0
      ZB=0.0
      ZF=0.0
      ZS=0.0
      ZE=0.0
      ZX=0.0
      ZAB=0.0
      DO 23731 I=1,NEP
        TPZ = TPZ + PZP(I)
        WM = WM + PZP(I)*WAP(I)
        ZC = ZC + PZP(I)*ZELEMP(I)
        FZC(I) =(FSC*ZELEMP(I))**2
        FCOUL(I) = FCOULCP(ZELEMP(I))
        XSI(I) = XSIFP (ZELEMP(I))
        ZZX(I) = PZP(I)*ZELEMP(I)*(ZELEMP(I)+XSI(I))
        IF ((ZELEMP(I).LE.4.0)) THEN
          IZZ=ZELEMP(I)
          ZAB=ZAB+ZZX(I)*ALRAD(IZZ)
        ELSE
          ZAB=ZAB+ZZX(I)*(AL183+LOG(ZELEMP(I)**(-1./3.)))
        END IF
        ZT = ZT + ZZX(I)
        ZB = ZB + ZZX(I)*LOG(ZELEMP(I)**(-1./3.))
        ZF = ZF + ZZX(I)*FCOUL(I)
        ZZ(I) = PZP(I)*ZELEMP(I)*(ZELEMP(I)+1.0)
        ZS = ZS + ZZ(I)
        ZE = ZE + ZZ(I)*((-2./3.)*LOG(ZELEMP(I)))
        ZX = ZX + ZZ(I)*LOG(1.+3.34*FZC(I))
23731 CONTINUE
23732 CONTINUE
      EZ = ZC/TPZ
      ZA = AL183*ZT
      ZG = ZB/ZT
      ZP = ZB/ZA
      ZV = (ZB-ZF)/ZT
      ZU = (ZB-ZF)/ZA
      EDEN=AN*RHOP/WM*ZC
      RLCP = 1./( (AN*RHOP/WM)*4.0*FSC*R0**2*(ZAB-ZF) )
      BLCCP= A6680*RHOP*ZS*EXP(ZE/ZS)*RLCP/(WM*EXP(ZX/ZS))
      TEFF0P = ( EXP(BMIN)/BMIN )/BLCCP
      XCCP= (A22P9/RADDEG) * SQRT( ZS*RHOP*RLCP/WM )
      XR0P = XCCP*SQRT(TEFF0P*BMIN)
      RETURN
      END
      SUBROUTINE DIFFER
      implicit none
      real*4 AL183,F10,F20,A1DEN,A2DEN,B1DEN,B2DEN,C1DEN,C2DEN
      INTEGER I
      COMMON/MOLVAR/WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU, RLCP,EDEN,RH
     *OP,XCCP,BLCCP,TEFF0P,XR0P
      real*4 WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU,RLCP,EDEN,RHOP, XCCP
     *,BLCCP,TEFF0P,XR0P
      COMMON/BREMPRP/DLP1(6),DLP2(6),DLP3(6),DLP4(6),DLP5(6),DLP6(6), DE
     *LCMP,ALPHIP(2),BPARP(2),DELPOSP(2)
      real*4 dlP1,dlP2,dlP3,dlP4,dlP5,dlP6,delcmP,alphiP,bparP,delposP
      COMMON/DBRPR/ALFP1(2),ALFP2(2),AL2
      real*4 ALFP1,ALFP2,al2
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      COMMON/ADLEN/ALRAD(4),ALRADP(4),A1440,A183
      real*4 ALRAD,ALRADP,A1440,A183
      AL2 = LOG(2.)
      AL183= LOG(A183)
      ALPHIP(1)= AL2*(4./3. + 1./(9.*AL183*(1.+ZP)))
      ALPHIP(2)= AL2*(4./3. + 1./(9.*AL183*(1.+ZU)))
      ALFP1(1)= 2./3. - 1./(36.*AL183*(1.+ZP))
      ALFP1(2)= 2./3. - 1./(36.*AL183*(1.+ZU))
      ALFP2(1)= (1./12.)*(4./3. + 1./(9.*AL183*(1+ZP)))
      ALFP2(2)= (1./12.)*(4./3. + 1./(9.*AL183*(1+ZU)))
      BPARP(1)= ALFP1(1)/(ALFP1(1)+ALFP2(1))
      BPARP(2)= ALFP1(2)/(ALFP1(2)+ALFP2(2))
      DELCMP= 136.0*EXP(ZG)*RMP
      DELPOSP(1)= (EXP((21.12+4.*ZG)/4.184)-0.952)/DELCMP
      DELPOSP(2)= (EXP((21.12+4.*ZV)/4.184)-0.952)/DELCMP
      F10=4.*AL183
      F20=F10 - 2./3.
      A1DEN =3.0*F10- F20 + 8.0*ZG
      A2DEN =3.0*F10- F20 + 8.0*ZV
      B1DEN = F10 + 4.0*ZG
      B2DEN = F10 + 4.0*ZV
      C1DEN = 3.0*F10+ F20 + 16.0*ZG
      C2DEN = 3.0*F10+ F20 + 16.0*ZV
      DLP1(1)= (3.0*20.867-20.209+8.0*ZG)/A1DEN
      DLP2(1)= (3.0*(-3.242)-(-1.930))/A1DEN
      DLP3(1)= (3.0*(0.625)-(0.086))/A1DEN
      DLP4(1)= (2.0*21.12+8.0*ZG)/A1DEN
      DLP5(1)= 2.0*(-4.184)/A1DEN
      DLP6(1)= 0.952
      DLP1(4)= (3.0*20.867-20.209+8.0*ZV)/A2DEN
      DLP2(4)= (3.0*(-3.242)-(-1.930))/A2DEN
      DLP3(4)= (3.0*(0.625)-(0.086))/A2DEN
      DLP4(4)= (2.0*21.12+8.0*ZV)/A2DEN
      DLP5(4)= 2.0*(-4.184)/A2DEN
      DLP6(4)= 0.952
      DLP1(2)= (20.867+4.0*ZG)/B1DEN
      DLP2(2)= -3.242/B1DEN
      DLP3(2)= 0.625/B1DEN
      DLP4(2)= (21.12+4.0*ZG)/B1DEN
      DLP5(2)= -4.184/B1DEN
      DLP6(2)= 0.952
      DLP1(5)= (20.867+4.0*ZV)/B2DEN
      DLP2(5)= -3.242/B2DEN
      DLP3(5)= 0.625/B2DEN
      DLP4(5)= (21.12+4.0*ZV)/B2DEN
      DLP5(5)= -4.184/B2DEN
      DLP6(5)= 0.952
      DLP1(3)= (3.0*20.867+20.209+16.0*ZG)/C1DEN
      DLP2(3)= (3.0*(-3.242)+(-1.930))/C1DEN
      DLP3(3)= (3.0*0.625+(-0.086))/C1DEN
      DLP4(3)= (4.0*21.12+16.0*ZG)/C1DEN
      DLP5(3)= 4.0*(-4.184)/C1DEN
      DLP6(3)= 0.952
      DLP1(6)= (3.0*20.867+20.209+16.0*ZV)/C2DEN
      DLP2(6)= (3.0*(-3.242)+(-1.930))/C2DEN
      DLP3(6)= (3.0*0.625+(-0.086))/C2DEN
      DLP4(6)= (4.0*21.12+16.0*ZV)/C2DEN
      DLP5(6)= 4.0*(-4.184)/C2DEN
      DLP6(6)= 0.952
      RETURN
      END
      real*4 function FCOULCP(Z)
      implicit none
      real*4 Z,ASQ
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      ASQ=(FSC*Z)**2
      FCOULCP = ASQ*(1.0/(1.0+ASQ)+0.20206+ASQ*(-0.0369+ ASQ*(0.0083+ASQ
     **(-0.002))))
      RETURN
      END
      real*4 function XSIFP(Z)
      implicit none
      real*4 Z,FCOULCP
      integer*4 IZ
      COMMON/ADLEN/ALRAD(4),ALRADP(4),A1440,A183
      real*4 ALRAD,ALRADP,A1440,A183
      IF ((Z.LE.4.0)) THEN
        IZ=Z
        XSIFP=ALRADP(IZ)/(ALRAD(IZ)-FCOULCP(Z))
      ELSE
        XSIFP=ALOG(A1440*Z**(-2./3.))/(ALOG(A183*Z**(-1./3.))-FCOULCP(Z)
     *  )
      END IF
      RETURN
      END
      real*4 FUNCTION ZTBL(IASYM)
      implicit none
      COMMON/ELEMTB/NET,ITBL(100),WATBL(100),RHOTBL(100),ASYMT(100)
      integer*4 NET
      real*4 ITBL,WATBL,RHOTBL
      CHARACTER*4 ASYMT
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      CHARACTER*4 IASYM,IA
      integer*4 ie
      DATA IA/'A'/
      save ia
      IF ((IASYM.EQ.IA)) THEN
        ZTBL=18.0
        RETURN
      END IF
      DO 23741 IE=1,NET
        IF ((IASYM.EQ.ASYMT(IE))) THEN
          ZTBL=IE
          RETURN
        END IF
23741 CONTINUE
23742 CONTINUE
      WRITE(6,23750)IASYM,NET
23750 FORMAT(1X,A2,' NOT AN ATOMIC SYMBOL FOR AN ELEMENT WITH Z LE ',I3)
      ZTBL=0.0
      RETURN
      END
      SUBROUTINE ANNIH
      implicit none
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common/egs_vr/ e_max_rr(3000),  prob_RR,  nbr_split,  i_play_RR,
     *    i_survived_RR,
     *        n_RR_warning,                                        i_do_
     *rr(3000)
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      DOUBLE PRECISION PAVIP,  PESG1,  PESG2
      real*8 AVIP,  A,                  G,T,P,                      POT,
     *
     *     EP0,                                                 WSAMP,
     *                       RNNO01,
     *                     RNNO02,
     *                                   EP,
     * REJF,                                                       ESG1,
     *                                      ESG2,
     *               aa,bb,cc,sinpsi,sindel,cosdel,us,vs,cphi,sphi
      integer*4
     *                     ibr
      real*8 xphi,xphi2,yphi,yphi2,rhophi2
      integer*4 ip
      NPold = NP
      IF (( nbr_split .LE. 0 )) THEN
        return
      END IF
      PAVIP=E(NP)+PRM
      AVIP=PAVIP
      A=AVIP/RM
      G=A-1.0
      T=G-1.0
      P=SQRT(A*T)
      POT=P/T
      EP0=1.0/(A+P)
      WSAMP=LOG((1.0-EP0)/EP0)
      aa = u(np)
      bb = v(np)
      cc = w(np)
      sinpsi = aa*aa + bb*bb
      IF (( sinpsi .GT. 1e-20 )) THEN
        sinpsi = sqrt(sinpsi)
        sindel = bb/sinpsi
        cosdel = aa/sinpsi
      END IF
      IF (( nbr_split .GT. 1 )) THEN
        wt(np) = wt(np)/nbr_split
      END IF
      DO 23761 ibr=1,nbr_split
        IF (( np+1 .GT. 10000 )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(//a,i6,a//)') ' Stack overflow in ANNIH! np = ',
     *    np+1, ' Increase $MXSTACK and try again'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
23771   CONTINUE
          IF((rng_seed .GT. 128))call ranmar_get
          RNNO01 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          EP=EP0*EXP(RNNO01*WSAMP)
          IF((rng_seed .GT. 128))call ranmar_get
          RNNO02 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          REJF = 1 - (EP*A-1)**2/(EP*(A*A-2))
          IF(((RNNO02 .LE. REJF)))GO TO23772
        GO TO 23771
23772   CONTINUE
        ESG1=AVIP*EP
        PESG1=ESG1
        E(NP)=PESG1
        IQ(NP)=0
        IF (( ibr .EQ. 1 )) THEN
          ip = npold
        ELSE
          ip = np-1
        END IF
        X(np)=X(ip)
        Y(np)=Y(ip)
        Z(np)=Z(ip)
        IR(np)=IR(ip)
        WT(np)=WT(ip)
        DNEAR(np)=DNEAR(ip)
        LATCH(np)=LATCH(ip)
        ZLAST(np)=ZLAST(ip)
        NFTIME(np)=NFTIME(ip)
        DO 23781 ISCORE=1,3
          NPASS(np,ISCORE)=NPASS(ip,ISCORE)
23781   CONTINUE
23782   CONTINUE
        NSPLIT(np)=NSPLIT(ip)
        IPHAT(np)=IPHAT(ip)
        COSTHE=MIN(1.0,(ESG1-RM)*POT/ESG1)
        SINTHE=SQRT(1.0-COSTHE*COSTHE)
23791   CONTINUE
          IF((rng_seed .GT. 128))call ranmar_get
          xphi = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          xphi = 2*xphi - 1
          xphi2 = xphi*xphi
          IF((rng_seed .GT. 128))call ranmar_get
          yphi = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          yphi2 = yphi*yphi
          rhophi2 = xphi2 + yphi2
          IF(rhophi2.LE.1)GO TO23792
        GO TO 23791
23792   CONTINUE
        rhophi2 = 1/rhophi2
        cphi = (xphi2 - yphi2)*rhophi2
        sphi = 2*xphi*yphi*rhophi2
        IF (( sinpsi .GE. 1e-10 )) THEN
          us = sinthe*cphi
          vs = sinthe*sphi
          u(np) = cc*cosdel*us - sindel*vs + aa*costhe
          v(np) = cc*sindel*us + cosdel*vs + bb*costhe
          w(np) = cc*costhe - sinpsi*us
        ELSE
          u(np) = sinthe*cphi
          v(np) = sinthe*sphi
          w(np) = cc*costhe
        END IF
        np = np + 1
        PESG2=PAVIP-PESG1
        esg2 = pesg2
        e(np) = pesg2
        iq(np) = 0
        X(np)=X(np-1)
        Y(np)=Y(np-1)
        Z(np)=Z(np-1)
        IR(np)=IR(np-1)
        WT(np)=WT(np-1)
        DNEAR(np)=DNEAR(np-1)
        LATCH(np)=LATCH(np-1)
        ZLAST(np)=ZLAST(np-1)
        NFTIME(np)=NFTIME(np-1)
        DO 23801 ISCORE=1,3
          NPASS(np,ISCORE)=NPASS(np-1,ISCORE)
23801   CONTINUE
23802   CONTINUE
        NSPLIT(np)=NSPLIT(np-1)
        IPHAT(np)=IPHAT(np-1)
        COSTHE=MIN(1.0,(ESG2-RM)*POT/ESG2)
        SINTHE=-SQRT(1.0-COSTHE*COSTHE)
        IF (( sinpsi .GE. 1e-10 )) THEN
          us = sinthe*cphi
          vs = sinthe*sphi
          u(np) = cc*cosdel*us - sindel*vs + aa*costhe
          v(np) = cc*sindel*us + cosdel*vs + bb*costhe
          w(np) = cc*costhe - sinpsi*us
        ELSE
          u(np) = sinthe*cphi
          v(np) = sinthe*sphi
          w(np) = cc*costhe
        END IF
        np = np + 1
23761 CONTINUE
23762 CONTINUE
      np = np-1
      RETURN
      END
      SUBROUTINE ANNIH_AT_REST
      implicit none
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/egs_vr/ e_max_rr(3000),  prob_RR,  nbr_split,  i_play_RR,
     *    i_survived_RR,
     *        n_RR_warning,                                        i_do_
     *rr(3000)
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      real*8 costhe,sinthe,cphi,sphi
      integer*4 ibr,ip
      real*8 xphi,xphi2,yphi,yphi2,rhophi2
      NPold = NP
      IF (( np+2*nbr_split-1 .GT. 10000 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','ANNIH_AT_RES
     *T', ' stack size exceeded! ',' $MAXSTACK = ',10000,' np = ',np+2*n
     *  br_split-1
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF (( nbr_split .GT. 1 )) THEN
        wt(np) = wt(np)/nbr_split
      END IF
      DO 23811 ibr=1,nbr_split
        IF((rng_seed .GT. 128))call ranmar_get
        costhe = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        costhe = 2*costhe-1
        sinthe = sqrt(max(0.0,(1-costhe)*(1+costhe)))
23821   CONTINUE
          IF((rng_seed .GT. 128))call ranmar_get
          xphi = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          xphi = 2*xphi - 1
          xphi2 = xphi*xphi
          IF((rng_seed .GT. 128))call ranmar_get
          yphi = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          yphi2 = yphi*yphi
          rhophi2 = xphi2 + yphi2
          IF(rhophi2.LE.1)GO TO23822
        GO TO 23821
23822   CONTINUE
        rhophi2 = 1/rhophi2
        cphi = (xphi2 - yphi2)*rhophi2
        sphi = 2*xphi*yphi*rhophi2
        e(np) = prm
        iq(np) = 0
        IF (( ibr .EQ. 1 )) THEN
          ip = npold
        ELSE
          ip = np-1
        END IF
        X(np)=X(ip)
        Y(np)=Y(ip)
        Z(np)=Z(ip)
        IR(np)=IR(ip)
        WT(np)=WT(ip)
        DNEAR(np)=DNEAR(ip)
        LATCH(np)=LATCH(ip)
        ZLAST(np)=ZLAST(ip)
        NFTIME(np)=NFTIME(ip)
        DO 23831 ISCORE=1,3
          NPASS(np,ISCORE)=NPASS(ip,ISCORE)
23831   CONTINUE
23832   CONTINUE
        NSPLIT(np)=NSPLIT(ip)
        IPHAT(np)=IPHAT(ip)
        u(np) = sinthe*cphi
        v(np) = sinthe*sphi
        w(np) = costhe
        np = np+1
        e(np) = prm
        iq(np) = 0
        X(np)=X(np-1)
        Y(np)=Y(np-1)
        Z(np)=Z(np-1)
        IR(np)=IR(np-1)
        WT(np)=WT(np-1)
        DNEAR(np)=DNEAR(np-1)
        LATCH(np)=LATCH(np-1)
        ZLAST(np)=ZLAST(np-1)
        NFTIME(np)=NFTIME(np-1)
        DO 23841 ISCORE=1,3
          NPASS(np,ISCORE)=NPASS(np-1,ISCORE)
23841   CONTINUE
23842   CONTINUE
        NSPLIT(np)=NSPLIT(np-1)
        IPHAT(np)=IPHAT(np-1)
        u(np) = -u(np-1)
        v(np) = -v(np-1)
        w(np) = -w(np-1)
        np = np+1
23811 CONTINUE
23812 CONTINUE
      np = np-1
      return
      end
      SUBROUTINE BHABHA
      implicit none
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common/egs_vr/ e_max_rr(3000),  prob_RR,  nbr_split,  i_play_RR,
     *    i_survived_RR,
     *        n_RR_warning,                                        i_do_
     *rr(3000)
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      DOUBLE PRECISION PEIP,  PEKIN,  PEKSE2,  PESE1,  PESE2,  H1,  DCOS
     *TH
      real*8 EIP,  EKIN,  T0,  E0,  E02,  YY,  Y2,YP,YP2, BETA2,  EP0,
     *EP0C,  B1,B2,B3,B4,  RNNO03,RNNO04, BR,  REJF2,  ESE1,  ESE2
      NPold = NP
      PEIP=E(NP)
      EIP=PEIP
      PEKIN=PEIP-PRM
      EKIN=PEKIN
      T0=EKIN/RM
      E0=T0+1.
      YY=1./(T0+2.)
      E02=E0*E0
      BETA2=(E02-1.)/E02
      EP0=TE(MEDIUM)/EKIN
      EP0C=1.-EP0
      Y2=YY*YY
      YP=1.-2.*YY
      YP2=YP*YP
      B4=YP2*YP
      B3=B4+YP2
      B2=YP*(3.+Y2)
      B1=2.-Y2
23851 CONTINUE
        IF((rng_seed .GT. 128))call ranmar_get
        RNNO03 = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        BR=EP0/(1.-EP0C*RNNO03)
        IF((rng_seed .GT. 128))call ranmar_get
        RNNO04 = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        REJF2=(1.0-BETA2*BR*(B1-BR*(B2-BR*(B3-BR*B4))))
        IF((RNNO04.LE.REJF2))GO TO23852
      GO TO 23851
23852 CONTINUE
      IF (( np+1 .GT. 10000 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','BHABHA', ' s
     *tack size exceeded! ',' $MAXSTACK = ',10000,' np = ',np+1
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF ((BR.LT.0.5)) THEN
        IQ(NP+1)=-1
      ELSE
        IQ(NP)=-1
        IQ(NP+1)=1
        BR=1.-BR
      END IF
      BR=max(BR,0.0)
      PEKSE2=BR*EKIN
      PESE1=PEIP-PEKSE2
      PESE2=PEKSE2+PRM
      ESE1=PESE1
      ESE2=PESE2
      E(NP)=PESE1
      E(NP+1)=PESE2
      H1=(PEIP+PRM)/PEKIN
      DCOSTH=MIN(1.0D0,H1*(PESE1-PRM)/(PESE1+PRM))
      SINTHE=DSQRT(1.D0-DCOSTH)
      COSTHE=DSQRT(DCOSTH)
      CALL UPHI(2,1)
      NP=NP+1
      DCOSTH=H1*(PESE2-PRM)/(PESE2+PRM)
      SINTHE=-DSQRT(1.D0-DCOSTH)
      COSTHE=DSQRT(DCOSTH)
      CALL UPHI(3,2)
      RETURN
      END
      SUBROUTINE BREMS
      implicit none
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      common/nist_brems/ nb_fdata(0:50,100,12), nb_xdata(0:50,100,12), n
     *b_wdata(50,100,12), nb_idata(50,100,12), nb_emin(12),nb_emax(12),
     *nb_lemin(12),nb_lemax(12), nb_dle(12),nb_dlei(12), log_ap(12)
      real*8 nb_fdata,nb_xdata,nb_wdata,nb_emin,nb_emax,nb_lemin,nb_lema
     *x, nb_dle,nb_dlei,log_ap
      integer*4 nb_idata
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common/egs_vr/ e_max_rr(3000),  prob_RR,  nbr_split,  i_play_RR,
     *    i_survived_RR,
     *        n_RR_warning,                                        i_do_
     *rr(3000)
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      DOUBLE PRECISION PEIE,  PESG,  PESE
      real*8 EIE,  EKIN,  brmin,  waux,  aux,  r1,  ajj,  alias_sample1,
     * RNNO06,  RNNO07,  BR,  ESG,  ESE,  DELTA,  phi1,  phi2,  REJF
      real*8 a,b,c,                               sinpsi, sindel, cosdel
     *, us, vs,
     *                                                ztarg,
     *             tteie,                                    beta,
     *                       y2max,
     *      y2maxi,                                                   tt
     *ese,                                      rjarg1,rjarg2,rjarg3,rej
     *min,rejmid,rejmax,rejtop,rejtst,
     *                 esedei,                                 y2tst,
     *                             y2tst1,
     *                                           rtest,
     *                            xphi,yphi,xphi2,yphi2,rhophi2,cphi,sph
     *i
      integer*4
     *                 L,L1,ibr,jj,j
      real*8 z2max,z2maxi,aux1,aux3,aux4,aux5,aux2,weight
      IF((nbr_split .LT. 1))return
      NPold = NP
      PEIE=E(NP)
      EIE=PEIE
      weight = wt(np)/nbr_split
      IF ((EIE.LT.50.0)) THEN
        L=1
      ELSE
        L=3
      END IF
      L1 = L+1
      ekin = peie-prm
      brmin = ap(medium)/ekin
      waux = elke - log_ap(medium)
      IF (( ibrdst .GE. 0 )) THEN
        a = u(np)
        b = v(np)
        c = w(np)
        sinpsi = a*a + b*b
        IF (( sinpsi .GT. 1e-20 )) THEN
          sinpsi = sqrt(sinpsi)
          sindel = b/sinpsi
          cosdel = a/sinpsi
        END IF
        ztarg = zbrang(medium)
        tteie = eie/rm
        beta = sqrt((tteie-1)*(tteie+1))/tteie
        y2max = 2*beta*(1+beta)*tteie*tteie
        y2maxi = 1/y2max
        IF (( ibrdst .EQ. 1 )) THEN
          z2max = y2max+1
          z2maxi = sqrt(z2max)
        END IF
      END IF
      IF (( ibr_nist .GE. 1 )) THEN
        ajj = 1 + (waux + log_ap(medium) - nb_lemin(medium))*nb_dlei(med
     *  ium)
        jj = ajj
        ajj = ajj - jj
        IF (( jj .GT. 100 )) THEN
          jj = 100
          ajj = -1
        END IF
      END IF
      DO 23861 ibr=1,nbr_split
        IF (( ibr_nist .GE. 1 )) THEN
          IF (( ekin .GT. nb_emin(medium) )) THEN
            IF((rng_seed .GT. 128))call ranmar_get
            r1 = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            IF (( r1 .LT. ajj )) THEN
              j = jj+1
            ELSE
              j = jj
            END IF
            br = alias_sample1(50,nb_xdata(0,j,medium), nb_fdata(0,j,med
     *      ium), nb_wdata(1,j,medium),nb_idata(1,j,medium))
          ELSE
            IF((rng_seed .GT. 128))call ranmar_get
            br = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
          END IF
          esg = ap(medium)*exp(br*waux)
          pesg = esg
          pese = peie - pesg
          ese = pese
        ELSE
23871     CONTINUE
            IF((rng_seed .GT. 128))call ranmar_get
            rnno06 = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            IF((rng_seed .GT. 128))call ranmar_get
            rnno07 = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            br = brmin*exp(rnno06*waux)
            esg = ekin*br
            pesg = esg
            pese = peie - pesg
            ese = pese
            delta = esg/eie/ese*delcm(medium)
            aux = ese/eie
            IF (( delta .LT. 1 )) THEN
              phi1 = dl1(l,medium)+delta*(dl2(l,medium)+delta*dl3(l,medi
     *        um))
              phi2 = dl1(l1,medium)+delta*(dl2(l1,medium)+ delta*dl3(l1,
     *        medium))
            ELSE
              phi1 = dl4(l,medium)+dl5(l,medium)*log(delta+dl6(l,medium)
     *        )
              phi2 = phi1
            END IF
            rejf = (1+aux*aux)*phi1 - 2*aux*phi2/3
            IF(((rnno07 .LT. rejf)))GO TO23872
          GO TO 23871
23872     CONTINUE
        END IF
        np=np+1
        IF (( np .GT. 10000 )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(//a,i6,a//)') ' Stack overflow in BREMS! np = ',
     *    np+1, ' Increase $MXSTACK and try again'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        e(np) = pesg
        iq(np) = 0
        X(np)=X(np-1)
        Y(np)=Y(np-1)
        Z(np)=Z(np-1)
        IR(np)=IR(np-1)
        WT(np)=WT(np-1)
        DNEAR(np)=DNEAR(np-1)
        LATCH(np)=LATCH(np-1)
        ZLAST(np)=ZLAST(np-1)
        NFTIME(np)=NFTIME(np-1)
        DO 23881 ISCORE=1,3
          NPASS(np,ISCORE)=NPASS(np-1,ISCORE)
23881   CONTINUE
23882   CONTINUE
        NSPLIT(np)=NSPLIT(np-1)
        IPHAT(np)=IPHAT(np-1)
        wt(np) = weight
        IF (( ibrdst .LT. 0 )) THEN
          u(np) = u(npold)
          v(np) = v(npold)
          w(np) = w(npold)
        ELSE
          IF (( ibrdst .EQ. 1 )) THEN
            ttese = ese/rm
            esedei = ttese/tteie
            rjarg1 = 1+esedei*esedei
            rjarg2 = rjarg1 + 2*esedei
            aux = 2*ese*tteie/esg
            aux = aux*aux
            aux1 = aux*ztarg
            IF (( aux1 .GT. 10 )) THEN
              rjarg3 = lzbrang(medium) + (1-aux1)/aux1**2
            ELSE
              rjarg3 = log(aux/(1+aux1))
            END IF
            rejmax = rjarg1*rjarg3-rjarg2
23891       CONTINUE
              IF((rng_seed .GT. 128))call ranmar_get
              y2tst = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF((rng_seed .GT. 128))call ranmar_get
              rtest = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              aux3 = z2maxi/(y2tst+(1-y2tst)*z2maxi)
              rtest = rtest*aux3*rejmax
              y2tst = aux3**2-1
              y2tst1 = esedei*y2tst/aux3**4
              aux4 = 16*y2tst1-rjarg2
              aux5 = rjarg1-4*y2tst1
              IF((rtest .LT. aux4 + aux5*rjarg3))GO TO23892
              aux2 = log(aux/(1+aux1/aux3**4))
              rejtst = aux4+aux5*aux2
              IF(((rtest .LT. rejtst )))GO TO23892
            GO TO 23891
23892       CONTINUE
          ELSE
            IF((rng_seed .GT. 128))call ranmar_get
            y2tst = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            y2tst = y2tst/(1-y2tst+y2maxi)
          END IF
          costhe = 1 - 2*y2tst*y2maxi
          sinthe = sqrt(max((1-costhe)*(1+costhe),0.0))
23901     CONTINUE
            IF((rng_seed .GT. 128))call ranmar_get
            xphi = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            xphi = 2*xphi - 1
            xphi2 = xphi*xphi
            IF((rng_seed .GT. 128))call ranmar_get
            yphi = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            yphi2 = yphi*yphi
            rhophi2 = xphi2 + yphi2
            IF(rhophi2.LE.1)GO TO23902
          GO TO 23901
23902     CONTINUE
          rhophi2 = 1/rhophi2
          cphi = (xphi2 - yphi2)*rhophi2
          sphi = 2*xphi*yphi*rhophi2
          IF (( sinpsi .GE. 1e-10 )) THEN
            us = sinthe*cphi
            vs = sinthe*sphi
            u(np) = c*cosdel*us - sindel*vs + a*costhe
            v(np) = c*sindel*us + cosdel*vs + b*costhe
            w(np) = c*costhe - sinpsi*us
          ELSE
            u(np) = sinthe*cphi
            v(np) = sinthe*sphi
            w(np) = c*costhe
          END IF
        END IF
23861 CONTINUE
23862 CONTINUE
      e(npold) = pese
      RETURN
      END
      SUBROUTINE COMPT
      implicit none
      common/compton_data/ iz_array(1538),  be_array(1538),  Jo_array(15
     *38),  erfJo_array(1538),   ne_array(1538),  shn_array(1538),
     *shell_array(200,12), eno_array(200,12), eno_atbin_array(200,12), n
     *_shell(12), radc_flag,  ibcmp(3000)
      integer*4 iz_array,ne_array,shn_array,eno_atbin_array, shell_array
     *,n_shell,radc_flag
      real*8 be_array,Jo_array,erfJo_array,eno_array
      integer*2 ibcmp
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common/egs_vr/ e_max_rr(3000),  prob_RR,  nbr_split,  i_play_RR,
     *    i_survived_RR,
     *        n_RR_warning,                                        i_do_
     *rr(3000)
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/relax_data/ relax_first(3000),  relax_ntran(3000),  relax_s
     *tate(10000),  relax_prob(10000),  relax_atbin(10000),  relax_ntot
      real*8 relax_prob
      integer*4 relax_first, relax_ntran, relax_state, relax_atbin, rela
     *x_ntot
      DOUBLE PRECISION PEIG,  PESG,  PESE
      real*8 ko,  broi,  broi2,  bro,  bro1,  alph1,  alph2,  alpha,  rn
     *no15,rnno16,rnno17,rnno18,rnno19,  br,  temp,  rejf3,  rejmax,  Uj
     *,  Jo,  br2,  fpz,fpz1, qc,  qc2,  af,  Fmax,  frej,  eta_incoh, e
     *ta,  aux,aux1,aux2,aux3,aux4,  pzmax,  pz,  pz2,  rnno_RR
      integer*4 irl,  i,  j,  iarg,  ip
      logical first_time
      integer*4 ibcmpl
      NPold = NP
      peig=E(NP)
      ko = peig/rm
      broi = 1 + 2*ko
      irl = ir(np)
      first_time = .true.
      ibcmpl = ibcmp(irl)
23910 CONTINUE
      IF (( ibcmpl .GT. 0 )) THEN
        IF((rng_seed .GT. 128))call ranmar_get
        rnno17 = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        rnno17 = 1 + rnno17*n_shell(medium)
        i = int(rnno17)
        IF((rnno17 .GT. eno_array(i,medium)))i = eno_atbin_array(i,mediu
     *  m)
        j = shell_array(i,medium)
        Uj = be_array(j)
        IF (( ko .LE. Uj )) THEN
          IF (( ibcmpl .EQ. 1 )) THEN
            goto 23920
          ELSE
            goto 23910
          END IF
        END IF
        Jo = Jo_array(j)
      END IF
23930 CONTINUE
      IF (( ko .GT. 2 )) THEN
        IF (( first_time )) THEN
          broi2 = broi*broi
          alph1 = Log(broi)
          bro = 1/broi
          alph2 = ko*(broi+1)*bro*bro
          alpha = alph1+alph2
        END IF
23941   CONTINUE
          IF((rng_seed .GT. 128))call ranmar_get
          rnno15 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF((rng_seed .GT. 128))call ranmar_get
          rnno16 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF (( rnno15*alpha .LT. alph1 )) THEN
            br = Exp(alph1*rnno16)*bro
          ELSE
            br = Sqrt(rnno16*broi2 + (1-rnno16))*bro
          END IF
          temp = (1-br)/(ko*br)
          sinthe = Max(0.,temp*(2-temp))
          aux = 1+br*br
          rejf3 = aux - br*sinthe
          IF((rng_seed .GT. 128))call ranmar_get
          rnno19 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF((rnno19*aux.le.rejf3))GO TO23942
        GO TO 23941
23942   CONTINUE
      ELSE
        IF (( first_time )) THEN
          bro = 1./broi
          bro1 = 1 - bro
          rejmax = broi + bro
        END IF
23951   CONTINUE
          IF((rng_seed .GT. 128))call ranmar_get
          rnno15 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF((rng_seed .GT. 128))call ranmar_get
          rnno16 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          br = bro + bro1*rnno15
          temp = (1-br)/(ko*br)
          sinthe = Max(0.,temp*(2-temp))
          rejf3 = 1 + br*br - br*sinthe
          IF((rnno16*br*rejmax.le.rejf3))GO TO23952
        GO TO 23951
23952   CONTINUE
      END IF
      first_time = .false.
      IF ((br .LT. bro .OR. br .GT. 1)) THEN
        IF (( br .LT. 0.99999/broi .OR. br .GT. 1.00001 )) THEN
          write(i_log,'(/a)') '***************** Warning: '
          write(i_log,*) ' sampled br outside of allowed range! ',ko,1./
     *    broi,br
        END IF
        goto 23930
      END IF
      costhe = 1 - temp
      IF (( ibcmp(irl) .EQ. 0 )) THEN
        Uj = 0
        goto 23960
      END IF
      br2 = br*br
      aux = ko*(ko-Uj)*temp
      aux1 = 2*aux + Uj*Uj
      pzmax = aux - Uj
      IF (( pzmax .LT. 0 .AND. pzmax*pzmax .GE. aux1 )) THEN
        IF (( ibcmpl .EQ. 1 )) THEN
          goto 23920
        ELSE
          goto 23910
        END IF
      END IF
      pzmax = pzmax/sqrt(aux1)
      qc2 = 1 + br*br - 2*br*costhe
      qc = sqrt(qc2)
      IF (( pzmax .GT. 1 )) THEN
        pzmax = 1
        af = 0
        Fmax = 1
        fpz = 1
        goto 23970
      END IF
      aux3 = 1 + 2*Jo*abs(pzmax)
      aux4 = 0.5*(1-aux3*aux3)
      fpz = 0.5*exp(aux4)
      af = qc*(1+br*(br-costhe)/qc2)
      IF (( af .LT. 0 )) THEN
        IF((pzmax .GT. 0))fpz = 1 - fpz
        IF((rng_seed .GT. 128))call ranmar_get
        eta_incoh = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        IF (( eta_incoh .GT. fpz )) THEN
          IF (( ibcmpl .EQ. 1 )) THEN
            goto 23920
          ELSE
            goto 23910
          END IF
        END IF
        af = 0
        Fmax = 1
        goto 23970
      END IF
      IF (( pzmax .LT. -0.15 )) THEN
        Fmax = 1-af*0.15
        fpz1 = fpz*Fmax*Jo
      ELSE IF(( pzmax .LT. 0.15 )) THEN
        Fmax = 1 + af*pzmax
        aux3 = 1/(1+0.33267252734*aux3)
        aux4 = fpz*aux3*(0.3480242+aux3*(-0.0958798+aux3*0.7478556)) + e
     *  rfJo_array(j)
        IF (( pzmax .GT. 0 )) THEN
          fpz1 = (1 - Fmax*fpz)*Jo - 0.62665706866*af*aux4
          fpz = 1 - fpz
        ELSE
          fpz1 = Fmax*fpz*Jo - 0.62665706866*af*aux4
        END IF
      ELSE
        Fmax = 1 + af*0.15
        fpz1 = (1 - Fmax*fpz)*Jo
        fpz = 1 - fpz
      END IF
      IF((rng_seed .GT. 128))call ranmar_get
      eta_incoh = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      IF ((eta_incoh*Jo .GT. fpz1 )) THEN
        IF (( ibcmpl .EQ. 1 )) THEN
          goto 23920
        ELSE
          goto 23910
        END IF
      END IF
23970 CONTINUE
      IF (( ibcmpl .NE. 2 )) THEN
        IF((rng_seed .GT. 128))call ranmar_get
        rnno18 = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        rnno18 = rnno18*fpz
        IF (( rnno18 .LT. 0.5 )) THEN
          rnno18 = Max(1e-30,2*rnno18)
          pz = 0.5*(1-Sqrt(1-2*Log(rnno18)))/Jo
        ELSE
          rnno18 = 2*(1-rnno18)
          pz = 0.5*(Sqrt(1-2*Log(rnno18))-1)/Jo
        END IF
        IF((abs(pz) .GT. 1))goto 23970
        IF (( pz .LT. 0.15 )) THEN
          IF (( pz .LT. -0.15 )) THEN
            frej = 1 - af*0.15
          ELSE
            frej = 1 + af*pz
          END IF
          IF((rng_seed .GT. 128))call ranmar_get
          eta = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF((eta*Fmax .GT. frej))goto 23970
        END IF
      ELSE
        pz = 0
        Uj = 0
      END IF
      pz2 = pz*pz
      IF (( abs(pz) .LT. 0.01 )) THEN
        br = br*(1 + pz*(qc + (br2-costhe)*pz))
      ELSE
        aux = 1 - pz2*br*costhe
        aux1 = 1 - pz2*br2
        aux2 = qc2 - br2*pz2*sinthe
        IF (( aux2 .GT. 1e-10 )) THEN
          br = br/aux1*(aux+pz*Sqrt(aux2))
        END IF
      END IF
      Uj = Uj*prm
23960 pesg = br*peig
      pese = peig - pesg - Uj + prm
      sinthe = Sqrt(sinthe)
      call uphi(2,1)
      e(np) = pesg
      aux = 1 + br*br - 2*br*costhe
      IF (( aux .GT. 1e-8 )) THEN
        costhe = (1-br*costhe)/Sqrt(aux)
        sinthe = (1-costhe)*(1+costhe)
        IF (( sinthe .GT. 0 )) THEN
          sinthe = -Sqrt(sinthe)
        ELSE
          sinthe = 0
        END IF
      ELSE
        costhe = 0
        sinthe = -1
      END IF
      np = np + 1
      IF (( np .GT. 10000 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','COMPT', ' st
     *ack size exceeded! ',' $MAXSTACK = ',10000,' np = ',np
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      call uphi(3,2)
      e(np) = pese
      iq(np) = -1
      IF (( ibcmpl .EQ. 1 .OR. ibcmpl .EQ. 3 )) THEN
        IF (( Uj .GT. 1e-3 )) THEN
          edep = pzero
          call relax(Uj,shn_array(j),iz_array(j))
        ELSE
          edep = Uj
          edep_local = edep
          iarg = 33
          IF (( iausfl(iarg+1) .NE. 0 )) THEN
            call ausgab(iarg)
            IF (( wt(np) .LE. 0 )) THEN
              np = np-1
              return
            END IF
          END IF
        END IF
        IF (( edep .GT. 0 )) THEN
          iarg = 4
          IF (( iausfl(iarg+1) .NE. 0 )) THEN
            call ausgab(iarg)
            IF (( wt(np) .LE. 0 )) THEN
              np = np-1
              return
            END IF
          END IF
        END IF
      END IF
      i_survived_RR = 0
      IF (( i_play_RR .EQ. 1 )) THEN
        IF (( prob_RR .LE. 0 )) THEN
          IF (( n_RR_warning .LT. 50 )) THEN
            n_RR_warning = n_RR_warning + 1
            WRITE(6,23980)prob_RR
23980       FORMAT('**** Warning, attempt to play Roussian Roulette with
     * prob_RR<=0! ',g14.6)
          END IF
        ELSE
          ip = NPold+1
23991     CONTINUE
            IF (( iq(ip) .NE. 0 )) THEN
              IF((rng_seed .GT. 128))call ranmar_get
              rnno_RR = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF (( rnno_RR .LT. prob_RR )) THEN
                wt(ip) = wt(ip)/prob_RR
                ip = ip + 1
              ELSE
                i_survived_RR = i_survived_RR + 1
                IF ((ip .LT. np)) THEN
                  e(ip) = e(np)
                  iq(ip) = iq(np)
                  wt(ip) = wt(np)
                  u(ip) = u(np)
                  v(ip) = v(np)
                  w(ip) = w(np)
                END IF
                np = np-1
              END IF
            ELSE
              ip = ip+1
            END IF
            IF(((ip .GT. np)))GO TO23992
          GO TO 23991
23992     CONTINUE
          IF (( np .EQ. 0 )) THEN
            np = 1
            e(np) = 0
            iq(np) = 0
            wt(np) = 0
          END IF
        END IF
      END IF
      return
23920 return
      end
      SUBROUTINE old_COMPT
      implicit none
      common/compton_data/ iz_array(1538),  be_array(1538),  Jo_array(15
     *38),  erfJo_array(1538),   ne_array(1538),  shn_array(1538),
     *shell_array(200,12), eno_array(200,12), eno_atbin_array(200,12), n
     *_shell(12), radc_flag,  ibcmp(3000)
      integer*4 iz_array,ne_array,shn_array,eno_atbin_array, shell_array
     *,n_shell,radc_flag
      real*8 be_array,Jo_array,erfJo_array,eno_array
      integer*2 ibcmp
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common/egs_vr/ e_max_rr(3000),  prob_RR,  nbr_split,  i_play_RR,
     *    i_survived_RR,
     *        n_RR_warning,                                        i_do_
     *rr(3000)
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/relax_data/ relax_first(3000),  relax_ntran(3000),  relax_s
     *tate(10000),  relax_prob(10000),  relax_atbin(10000),  relax_ntot
      real*8 relax_prob
      integer*4 relax_first, relax_ntran, relax_state, relax_atbin, rela
     *x_ntot
      DOUBLE PRECISION PEIG,  PESG,  PESE
      real*8 ko,  broi,  broi2,  bro,  bro1,  alph1,  alph2,  alpha,  rn
     *no15,rnno16,rnno17,rnno18,rnno19,  br,  temp,  rejf3,  rejmax,  Uj
     *,  br2,  aux,aux1,aux2, pzmax2,  pz,  pz2,  rnno_RR
      integer*4 irl,  i,  j,  iarg,  ip
      i_survived_RR = 0
      NPold = NP
      peig=E(NP)
      ko = peig/rm
      broi = 1 + 2*ko
      irl = ir(np)
      IF (( ibcmp(irl) .EQ. 1 )) THEN
        IF((rng_seed .GT. 128))call ranmar_get
        rnno17 = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        DO 24001 i=1,n_shell(medium)
          rnno17 = rnno17 - eno_array(i,medium)
          IF((rnno17 .LE. 0))GO TO24002
24001   CONTINUE
24002   CONTINUE
        j = shell_array(i,medium)
        Uj = be_array(j)
        IF (( ko .LE. Uj )) THEN
          goto 24010
        END IF
      END IF
24020 CONTINUE
      IF (( ko .GT. 2 )) THEN
        broi2 = broi*broi
        alph1 = Log(broi)
        alph2 = ko*(broi+1)/broi2
        alpha = alph1/(alph1+alph2)
24031   CONTINUE
          IF((rng_seed .GT. 128))call ranmar_get
          rnno15 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF((rng_seed .GT. 128))call ranmar_get
          rnno16 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF (( rnno15 .LT. alpha )) THEN
            br = Exp(alph1*rnno16)/broi
          ELSE
            br = Sqrt(rnno16 + (1-rnno16)/broi2)
          END IF
          temp = (1-br)/ko/br
          sinthe = Max(0.,temp*(2-temp))
          rejf3 = 1 - br*sinthe/(1+br*br)
          IF((rng_seed .GT. 128))call ranmar_get
          rnno19 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF((rnno19.le.rejf3))GO TO24032
        GO TO 24031
24032   CONTINUE
      ELSE
        bro = 1./broi
        bro1 = 1 - bro
        rejmax = broi + bro
24041   CONTINUE
          IF((rng_seed .GT. 128))call ranmar_get
          rnno15 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF((rng_seed .GT. 128))call ranmar_get
          rnno16 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          br = bro + bro1*rnno15
          temp = (1-br)/ko/br
          sinthe = Max(0.,temp*(2-temp))
          rejf3 = (br + 1./br - sinthe)/rejmax
          IF((rnno16.le.rejf3))GO TO24042
        GO TO 24041
24042   CONTINUE
      END IF
      IF ((br .LT. 1./broi .OR. br .GT. 1)) THEN
        IF (( br .LT. 0.99999/broi .OR. br .GT. 1.00001 )) THEN
          write(i_log,'(/a)') '***************** Warning: '
          write(i_log,*) ' sampled br outside of allowed range! ',ko,1./
     *    broi,br
        END IF
        goto 24020
      END IF
      IF (( ibcmp(irl) .EQ. 0 )) THEN
        Uj = 0
        costhe = 1 - temp
        goto 24050
      END IF
      br2 = br*br
      costhe = 1 - temp
      aux = ko*(ko-Uj)*temp
      aux1 = aux-Uj
      pzmax2 = aux1*aux1/(2*aux+Uj*Uj)
24060 CONTINUE
      IF((rng_seed .GT. 128))call ranmar_get
      rnno18 = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      IF (( rnno18 .LT. 0.5 )) THEN
        rnno18 = Max(1e-30,2*rnno18)
        pz = 0.5*(1-Sqrt(1-2*Log(rnno18)))/Jo_array(j)
        pz2 = pz*pz
        IF (( (pz2 .LE. pzmax2) .AND. (aux1 .LT. 0) )) THEN
          goto 24010
        END IF
      ELSE
        IF (( aux1 .LT. 0 )) THEN
          goto 24010
        END IF
        rnno18 = 2*(1-rnno18)
        pz = 0.5*(Sqrt(1-2*Log(rnno18))-1)/Jo_array(j)
        pz2 = pz*pz
        IF (( pz2 .GE. pzmax2 )) THEN
          goto 24010
        END IF
      END IF
      IF((abs(pz) .GT. 1))goto 24060
      aux = 1 - pz2*br*costhe
      aux1 = 1 - pz2*br2
      aux2 = 1-2*br*costhe+br2*(1-pz2*sinthe)
      IF (( aux2 .GT. 1e-10 )) THEN
        br = br/aux1*(aux+pz*Sqrt(aux2))
      END IF
      Uj = Uj*prm
24050 pesg = br*peig
      pese = peig - pesg - Uj + prm
      sinthe = Sqrt(sinthe)
      call uphi(2,1)
      e(np) = pesg
      aux = 1 + br*br - 2*br*costhe
      IF (( aux .GT. 1e-8 )) THEN
        costhe = (1-br*costhe)/Sqrt(aux)
        sinthe = (1-costhe)*(1+costhe)
        IF (( sinthe .GT. 0 )) THEN
          sinthe = -Sqrt(sinthe)
        ELSE
          sinthe = 0
        END IF
      ELSE
        costhe = 0
        sinthe = -1
      END IF
      np = np + 1
      IF (( np .GT. 10000 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','COMPT', ' st
     *ack size exceeded! ',' $MAXSTACK = ',10000,' np = ',np
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      call uphi(3,2)
      e(np) = pese
      iq(np) = -1
      IF (( ibcmp(irl) .EQ. 1 )) THEN
        IF (( Uj .GT. 1e-3 )) THEN
          edep = 0
          call relax(Uj,shn_array(j),iz_array(j))
        ELSE
          edep = Uj
        END IF
        IF (( edep .GT. 0 )) THEN
          iarg = 4
          IF (( iausfl(iarg+1) .NE. 0 )) THEN
            call ausgab(iarg)
            IF (( wt(np) .LE. 0 )) THEN
              np = np-1
              return
            END IF
          END IF
        END IF
      END IF
      i_survived_RR = 0
      IF (( i_play_RR .EQ. 1 )) THEN
        IF (( prob_RR .LE. 0 )) THEN
          IF (( n_RR_warning .LT. 50 )) THEN
            n_RR_warning = n_RR_warning + 1
            WRITE(6,24070)prob_RR
24070       FORMAT('**** Warning, attempt to play Roussian Roulette with
     * prob_RR<=0! ',g14.6)
          END IF
        ELSE
          ip = NPold+1
24081     CONTINUE
            IF (( iq(ip) .NE. 0 )) THEN
              IF((rng_seed .GT. 128))call ranmar_get
              rnno_RR = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF (( rnno_RR .LT. prob_RR )) THEN
                wt(ip) = wt(ip)/prob_RR
                ip = ip + 1
              ELSE
                i_survived_RR = i_survived_RR + 1
                IF ((ip .LT. np)) THEN
                  e(ip) = e(np)
                  iq(ip) = iq(np)
                  wt(ip) = wt(np)
                  u(ip) = u(np)
                  v(ip) = v(np)
                  w(ip) = w(np)
                END IF
                np = np-1
              END IF
            ELSE
              ip = ip+1
            END IF
            IF(((ip .GT. np)))GO TO24082
          GO TO 24081
24082     CONTINUE
          IF (( np .EQ. 0 )) THEN
            np = 1
            e(np) = 0
            iq(np) = 0
            wt(np) = 0
          END IF
        END IF
      END IF
      return
24010 return
      end
      SUBROUTINE ELECTR(IRCODE)
      implicit none
      integer*4 IRCODE
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/ELECIN/ esig_e(12),psig_e(12), esige_max, psige_max, range_
     *ep(0:1,500,12), E_array(500,12), etae_ms0(500,12),etae_ms1(500,12)
     *,etap_ms0(500,12),etap_ms1(500,12),q1ce_ms0(500,12),q1ce_ms1(500,1
     *2),q1cp_ms0(500,12),q1cp_ms1(500,12),q2ce_ms0(500,12),q2ce_ms1(500
     *,12),q2cp_ms0(500,12),q2cp_ms1(500,12),blcce0(500,12),blcce1(500,1
     *2), EKE0(12),EKE1(12), XR0(12),TEFF0(12),BLCC(12),XCC(12), ESIG0(5
     *00,12),ESIG1(500,12),PSIG0(500,12),PSIG1(500,12),EDEDX0(500,12),ED
     *EDX1(500,12),PDEDX0(500,12),PDEDX1(500,12),EBR10(500,12),EBR11(500
     *,12),PBR10(500,12),PBR11(500,12),PBR20(500,12),PBR21(500,12),TMXS0
     *(500,12),TMXS1(500,12), expeke1(12), IUNRST(12),EPSTFL(12),IAPRIM(
     *12), sig_ismonotone(0:1,12)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIIN/SINC0,SINC1,SIN0(1002),SIN1(1002)
      real*8 SINC0,SINC1,SIN0,SIN1
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common/ET_control/ smaxir(3000),estepe,ximax,  skindepth_for_bca,t
     *ransport_algorithm, bca_algorithm,exact_bca,spin_effects
      real*8 smaxir,  estepe,  ximax,      skindepth_for_bca
      integer*4 transport_algorithm, bca_algorithm
      logical exact_bca,  spin_effects
      common/CH_steps/ count_pII_steps,count_all_steps,is_ch_step
      real*8 count_pII_steps,count_all_steps
      logical is_ch_step
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/egs_vr/ e_max_rr(3000),  prob_RR,  nbr_split,  i_play_RR,
     *    i_survived_RR,
     *        n_RR_warning,                                        i_do_
     *rr(3000)
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common/emf_inputs/ExIN,EyIN,EzIN,  EMLMTIN,  BxIN, ByIN, BzIN,  Bx
     *, By, Bz,  Bx_new, By_new, Bz_new,  emfield_on
      real*8 ExIN,EyIN,EzIN, EMLMTIN, BxIN,ByIN,BzIN, Bx,By,Bz, Bx_new,B
     *y_new,Bz_new
      logical emfield_on
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      COMMON/CM_XITWIN/ICM_XITWIN,IRSTART_XITWIN,IREND_XITWIN, N_XITWIN,
     *N_GAP_XITWIN,TITLE_XITWIN,ZBACK_XITWIN,ZFRONT_XITWIN, ZTHICK_XITWI
     *N,IR_XITWIN
      INTEGER ICM_XITWIN,IRSTART_XITWIN,IREND_XITWIN,N_XITWIN, N_GAP_XIT
     *WIN,IR_XITWIN
      real*8 ZBACK_XITWIN(30),ZFRONT_XITWIN(30), ZTHICK_XITWIN(30)
      CHARACTER*1 TITLE_XITWIN(60)
      COMMON/CM_COLLIMAT/ ICM_COLLIMAT, IRSTART_COLLIMAT, IREND_COLLIMAT
     *, N_COLLIMAT, N_GAP_COLLIMAT, IR_COLLIMAT, COUNT1_COLLIMAT, TITLE_
     *COLLIMAT, ZMIN_COLLIMAT, ZMAX_COLLIMAT, ZFRONT_COLLIMAT, NUM_NODE_
     *COLLIMAT, INDEX_COLLIMAT, ZCORNER_COLLIMAT, RCORNER_COLLIMAT, RCOR
     *NER2_COLLIMAT, SURPARA_COLLIMAT, RMIN_COLLIMAT, RMIN2_COLLIMAT, CR
     *ITOLD_COLLIMAT
      INTEGER ICM_COLLIMAT, IRSTART_COLLIMAT, IREND_COLLIMAT, N_COLLIMAT
     *, N_GAP_COLLIMAT, IR_COLLIMAT, COUNT1_COLLIMAT, NUM_NODE_COLLIMAT,
     *INDEX_COLLIMAT
      real*8 ZMIN_COLLIMAT, ZMAX_COLLIMAT, ZFRONT_COLLIMAT, ZCORNER_COLL
     *IMAT(15),RCORNER_COLLIMAT(15), RCORNER2_COLLIMAT(15), SURPARA_COLL
     *IMAT(15-1,4), RMIN_COLLIMAT, RMIN2_COLLIMAT, CRITOLD_COLLIMAT
      CHARACTER*1 TITLE_COLLIMAT(60)
      COMMON/CM_SCATFOIL/ ICM_SCATFOIL, IRSTART_SCATFOIL, IREND_SCATFOIL
     *, N_SCATFOIL, N_GAP_SCATFOIL, ISCM_SCATFOIL, ISCM_MAX_SCATFOIL, IR
     *_SCATFOIL, ZFRONT_SCATFOIL, ZMIN_SCATFOIL, ZMAX_SCATFOIL, RMIN_SCA
     *TFOIL, RMAX_SCATFOIL, RBN_SCATFOIL, RBNT_SCATFOIL, RBN2_SCATFOIL,
     *RBN2T_SCATFOIL, RMINT_SCATFOIL, RMAXT_SCATFOIL, RMIN2_SCATFOIL, RM
     *IN2T_SCATFOIL, RMAX2_SCATFOIL, RMAX2T_SCATFOIL, ALO_SCATFOIL, BLO_
     *SCATFOIL, BLOT_SCATFOIL, COSA_SCATFOIL, NOWALL_SCATFOIL, TITLE_SCA
     *TFOIL
      INTEGER ICM_SCATFOIL,IRSTART_SCATFOIL, IREND_SCATFOIL,N_SCATFOIL,N
     *_GAP_SCATFOIL, ISCM_SCATFOIL,ISCM_MAX_SCATFOIL,IR_SCATFOIL, NOWALL
     *_SCATFOIL
      real*8 ZFRONT_SCATFOIL, ZMIN_SCATFOIL(15), ZMAX_SCATFOIL(15), RMIN
     *_SCATFOIL(15), RMAX_SCATFOIL(15), RBN_SCATFOIL, RBNT_SCATFOIL(2),
     *RBN2_SCATFOIL, RBN2T_SCATFOIL(2), RMINT_SCATFOIL(15,2), RMAXT_SCAT
     *FOIL(15,2), RMIN2_SCATFOIL(15), RMIN2T_SCATFOIL(15,2), RMAX2_SCATF
     *OIL(15), RMAX2T_SCATFOIL(15,2), ALO_SCATFOIL(15), BLO_SCATFOIL(15)
     *, BLOT_SCATFOIL(15,2), COSA_SCATFOIL(15)
      CHARACTER*1 TITLE_SCATFOIL(60)
      COMMON/CM_IONCHAM/ Z_IONCHAM, ZFRONT_IONCHAM, ZBACK_IONCHAM, ZMIN_
     *IONCHAM, ZMAX_IONCHAM, RCYS_IONCHAM, RCYS2_IONCHAM, TITLE_IONCHAM,
     * ICM_IONCHAM,IRSTART_IONCHAM,IREND_IONCHAM, N_IONCHAM,N_GAP_IONCHA
     *M, N_CHM_IONCHAM, N_TOP_IONCHAM, N_BOT_IONCHAM, IR_IONCHAM
      INTEGER ICM_IONCHAM,IRSTART_IONCHAM,IREND_IONCHAM, N_IONCHAM ,N_GA
     *P_IONCHAM, N_CHM_IONCHAM, N_TOP_IONCHAM, N_BOT_IONCHAM, IR_IONCHAM
      real*8 ZFRONT_IONCHAM, ZBACK_IONCHAM, ZMIN_IONCHAM, ZMAX_IONCHAM,
     *RCYS_IONCHAM(200,3), RCYS2_IONCHAM(200,3)
      REAL*8 Z_IONCHAM(1:200+1)
      CHARACTER*1 TITLE_IONCHAM(60)
      COMMON/CM_RING/ ICM_RING, IRSTART_RING, IREND_RING, N_RING, N_GAP_
     *RING, ISCM_RING, ISCM_MAX_RING, IR_RING, ZFRONT_RING, ZMIN_RING, Z
     *MAX_RING, RMIN_RING, RMAX_RING, RBN_RING, RBNT_RING, RBN2_RING, RB
     *N2T_RING, RMINT_RING, RMAXT_RING, RMIN2_RING, RMIN2T_RING, RMAX2_R
     *ING, RMAX2T_RING, ALO_RING, BLO_RING, BLOT_RING, COSA_RING, NOWALL
     *_RING, TITLE_RING
      INTEGER ICM_RING,IRSTART_RING, IREND_RING,N_RING,N_GAP_RING, ISCM_
     *RING,ISCM_MAX_RING,IR_RING, NOWALL_RING
      real*8 ZFRONT_RING, ZMIN_RING(15), ZMAX_RING(15), RMIN_RING(15), R
     *MAX_RING(15), RBN_RING, RBNT_RING(2), RBN2_RING, RBN2T_RING(2), RM
     *INT_RING(15,2), RMAXT_RING(15,2), RMIN2_RING(15), RMIN2T_RING(15,2
     *), RMAX2_RING(15), RMAX2T_RING(15,2), ALO_RING(15), BLO_RING(15),
     *BLOT_RING(15,2), COSA_RING(15)
      CHARACTER*1 TITLE_RING(60)
      COMMON/CM_MIRROR/ ICM_MIRROR, IRSTART_MIRROR,IREND_MIRROR, N_MIRRO
     *R,N_GAP_MIRROR, IR_MIRROR, ZFRONT_MIRROR, ZMIN_MIRROR, ZBACK_MIRRO
     *R, A_MIRROR, BMIN_MIRROR, BMAX_MIRROR, BMINT_MIRROR, BMAXT_MIRROR,
     * XFMIN_MIRROR, XFMAX_MIRROR, XBMIN_MIRROR, XBMAX_MIRROR, XFMINT_MI
     *RROR, XFMAXT_MIRROR, XBMINT_MIRROR, XBMAXT_MIRROR, DTHICK_MIRROR,
     *ZTHICK_MIRROR, TITLE_MIRROR
      INTEGER ICM_MIRROR,IRSTART_MIRROR,IREND_MIRROR, N_MIRROR,N_GAP_MIR
     *ROR,IR_MIRROR
      real*8 ZFRONT_MIRROR, ZMIN_MIRROR, ZBACK_MIRROR, A_MIRROR, BMIN_MI
     *RROR(10), BMAX_MIRROR(10), BMINT_MIRROR(10), BMAXT_MIRROR(10), XFM
     *IN_MIRROR(10), XFMAX_MIRROR(10), XBMIN_MIRROR(10), XBMAX_MIRROR(10
     *), XFMINT_MIRROR(10), XFMAXT_MIRROR(10), XBMINT_MIRROR(10), XBMAXT
     *_MIRROR(10),DTHICK_MIRROR(10), ZTHICK_MIRROR
      CHARACTER*1 TITLE_MIRROR(60)
      COMMON/CM_MAINJAWS/ IXY_CHOICE_MAINJAWS, APO_MAINJAWS, ANE_MAINJAW
     *S, XFP_MAINJAWS,XFPT_MAINJAWS, XFN_MAINJAWS,XFNT_MAINJAWS, XBP_MAI
     *NJAWS,XBPT_MAINJAWS, XBN_MAINJAWS,XBNT_MAINJAWS, BPO_MAINJAWS,BPOT
     *_MAINJAWS, BNE_MAINJAWS,BNET_MAINJAWS, ZMIN_MAINJAWS, ZMAX_MAINJAW
     *S, ZBACK_MAINJAWS,ZFRONT_MAINJAWS, COSP_MAINJAWS,COSN_MAINJAWS,XY_
     *MAINJAWS,UV_MAINJAWS, ICM_MAINJAWS, IRSTART_MAINJAWS, IREND_MAINJA
     *WS, N_MAINJAWS, ISCM_MAX_MAINJAWS, IR_MAINJAWS, ISCM_MAINJAWS, TIT
     *LE_MAINJAWS
      INTEGER ICM_MAINJAWS,IRSTART_MAINJAWS,IREND_MAINJAWS, N_MAINJAWS,I
     *SCM_MAX_MAINJAWS, IR_MAINJAWS, IXY_CHOICE_MAINJAWS(12), ISCM_MAINJ
     *AWS
      real*8 ZMIN_MAINJAWS(12), ZMAX_MAINJAWS(12), ZBACK_MAINJAWS, ZFRON
     *T_MAINJAWS, XFP_MAINJAWS(12), XFN_MAINJAWS(12), XBP_MAINJAWS(12),
     *XBN_MAINJAWS(12), XFPT_MAINJAWS(12,2), XFNT_MAINJAWS(12,2),XBPT_MA
     *INJAWS(12,2), XBNT_MAINJAWS(12,2),APO_MAINJAWS(12), ANE_MAINJAWS(1
     *2), BPO_MAINJAWS(12), BNE_MAINJAWS(12), BPOT_MAINJAWS(12,2), BNET_
     *MAINJAWS(12,2),COSP_MAINJAWS(12), COSN_MAINJAWS(12), XY_MAINJAWS,U
     *V_MAINJAWS
      CHARACTER*1 TITLE_MAINJAWS(60)
      COMMON/CM_APPLICAT/ ICM_APPLICAT,IRSTART_APPLICAT,IREND_APPLICAT,N
     *_APPLICAT, IR_APPLICAT, TITLE_APPLICAT,XMIN_APPLICAT,YMIN_APPLICAT
     *,XMAX_APPLICAT, YMAX_APPLICAT, ZMIN_APPLICAT,ZMAX_APPLICAT,ZBACK_A
     *PPLICAT,ZFRONT_APPLICAT, XMINT_APPLICAT,YMINT_APPLICAT,XMAXT_APPLI
     *CAT,YMAXT_APPLICAT, ZMINT_APPLICAT,ZMAXT_APPLICAT, AIRGAPMIN_APPLI
     *CAT,ABSX_APPLICAT,ABSY_APPLICAT
      INTEGER ICM_APPLICAT,IRSTART_APPLICAT,IREND_APPLICAT,N_APPLICAT, I
     *R_APPLICAT
      real*8 XMIN_APPLICAT(10), YMIN_APPLICAT(10), XMAX_APPLICAT(10), YM
     *AX_APPLICAT(10), ZMIN_APPLICAT(10), ZMAX_APPLICAT(10), ZBACK_APPLI
     *CAT,ZFRONT_APPLICAT, XMINT_APPLICAT(10,2), YMINT_APPLICAT(10,2), X
     *MAXT_APPLICAT(10,2), YMAXT_APPLICAT(10,2), ZMINT_APPLICAT(10,2), Z
     *MAXT_APPLICAT(10,2), AIRGAPMIN_APPLICAT,ABSX_APPLICAT,ABSY_APPLICA
     *T
      CHARACTER*1 TITLE_APPLICAT(60)
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      common/eii_data/ eii_xsection_a( 10000),  eii_xsection_b( 10000),
     * eii_cons(12), eii_a(40),  eii_b(40),  eii_L_factor,  eii_z(40),
     *eii_sh(40),  eii_nshells(100),  eii_nsh(12),  eii_first(12,50),  e
     *ii_no(12,50),  eii_flag
      real*8 eii_xsection_a,eii_xsection_b,eii_a,eii_b,eii_cons,eii_L_fa
     *ctor
      integer*4 eii_z,eii_sh,eii_nshells
      integer*4 eii_first,eii_no
      integer*4 eii_elements,eii_flag,eii_nsh
      real*8 lambda_max, sigratio, u_tmp, v_tmp, w_tmp
      LOGICAL random_tustep
      DOUBLE PRECISION  demfp,  peie,  total_tstep,  total_de
      real*8 ekems,  elkems,  chia2,  etap,  lambda,  blccl,  xccl,  xi,
     *  xi_corr,  ms_corr, p2,  beta2,  de,  save_de,  dedx,  dedx0,  de
     *dxmid,  ekei,  elkei,  aux,  ebr1,  eie,  ekef,  elkef,  ekeold,
     *eketmp,  elktmp,  fedep,  tuss,  pbr1,  pbr2,  range,  rfict,  rnn
     *e1,  rnno24,  rnno25,  rnnotu,  rnnoss,  sig,  sig0,  sigf,  skind
     *epth,  ssmfp,  tmxs,  tperp,  ustep0,  uscat,  vscat,  wscat,  xtr
     *ans,  ytrans,  ztrans,  cphi,sphi
      real*8 xphi,xphi2,yphi,yphi2,rhophi2
      integer*4 iarg,  idr,  ierust,  irl,  lelec,  qel,  lelke,  lelkem
     *s,  lelkef,  lelktmp,  ibr
      logical  callhowfar,   domultiple,  dosingle,   callmsdist,
     *                findindex,
     *              spin_index,                                   comput
     *e_tstep
     *
      real*4 time_array(2),etime
      data ierust/0/
      save ierust
      ircode = 1
      irold = ir(np)
      irl = irold
      medium = med(irl)
24090 CONTINUE
24091   CONTINUE
        lelec = iq(np)
        qel = (1+lelec)/2
        peie = e(np)
        eie = peie
        IF ((eie .LE. ecut(irl))) THEN
          go to 24100
        END IF
        IF ((WT(NP) .EQ. 0.0)) THEN
          go to 24110
        END IF
24120   CONTINUE
24121     CONTINUE
          compute_tstep = .true.
          eke = eie - rm
          IF ((medium .NE. 0)) THEN
            IF((rng_seed .GT. 128))call ranmar_get
            RNNE1 = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            IF ((RNNE1.EQ.0.0)) THEN
              RNNE1=1.E-30
            END IF
            DEMFP=MAX(-LOG(RNNE1),1.E-5)
            elke = log(eke)
            Lelke=eke1(MEDIUM)*elke+eke0(MEDIUM)
            IF (( use_bcse .AND. is_bcse_medium(medium) .AND. (ibrspl .L
     *      T. 2 .OR. iphat(np) .GT. 1) )) THEN
              IF ((lelec .LT. 0)) THEN
                sigf=esig1(Lelke,MEDIUM)*elke+esig0(Lelke,MEDIUM)
                dedx0=ededx1(Lelke,MEDIUM)*elke+ededx0(Lelke,MEDIUM)
                ebr1=ebr11(Lelke,MEDIUM)*elke+ebr10(Lelke,MEDIUM)
                sig0 = esig_e(medium)
              ELSE
                sigf=psig1(Lelke,MEDIUM)*elke+psig0(Lelke,MEDIUM)
                dedx0=pdedx1(Lelke,MEDIUM)*elke+pdedx0(Lelke,MEDIUM)
                ebr1=pbr11(Lelke,MEDIUM)*elke+pbr10(Lelke,MEDIUM)
                sig0 = psig_e(medium)
              END IF
              sigf = sigf/dedx0
              IF (( bcse_power_n .GT. 0 )) THEN
                bcse_factor = 1 + bcse_factor_c*(E(np)-prm)**bcse_power_
     *          n
              ELSE
                bcse_factor = bcse_factor_c
              END IF
              IF((ibrspl .EQ. 2 .AND. bcse_factor .GT. iphat(np)))bcse_f
     *        actor = iphat(np)
              sigf = sigf*(1 + ebr1*(bcse_factor-1))
              IF((sigf .GT. sig0))sig0 = sigf
            ELSE
              IF (( sig_ismonotone(qel,medium) )) THEN
                IF ((lelec .LT. 0)) THEN
                  sigf=esig1(Lelke,MEDIUM)*elke+esig0(Lelke,MEDIUM)
                  dedx0=ededx1(Lelke,MEDIUM)*elke+ededx0(Lelke,MEDIUM)
                ELSE
                  sigf=psig1(Lelke,MEDIUM)*elke+psig0(Lelke,MEDIUM)
                  dedx0=pdedx1(Lelke,MEDIUM)*elke+pdedx0(Lelke,MEDIUM)
                END IF
                sig0 = sigf/dedx0
              ELSE
                IF (( lelec .LT. 0 )) THEN
                  sig0 = esig_e(medium)
                ELSE
                  sig0 = psig_e(medium)
                END IF
              END IF
            END IF
          END IF
24130     CONTINUE
24131       CONTINUE
            IF ((medium .EQ. 0)) THEN
              tstep = vacdst
              ustep = tstep
              tustep = ustep
              callhowfar = .true.
              ustep = tustep
            ELSE
              RHOF=RHOR(IRL)/RHO(MEDIUM)
              sig = sig0
              IF ((sig .LE. 0)) THEN
                tstep = vacdst
                sig0 = 1.E-15
              ELSE
                IF (( compute_tstep )) THEN
                  total_de = demfp/sig
                  fedep = total_de
                  ekef = eke - fedep
                  IF (( ekef .LE. E_array(1,medium) )) THEN
                    tstep = vacdst
                  ELSE
                    elkef = Log(ekef)
                    Lelkef=eke1(MEDIUM)*elkef+eke0(MEDIUM)
                    IF (( lelkef .EQ. lelke )) THEN
                      fedep = 1 - ekef/eke
                      elktmp = 0.5*(elke+elkef+0.25*fedep*fedep*(1+fedep
     *                *(1+0.875*fedep)))
                      lelktmp = lelke
                      IF ((lelec .LT. 0)) THEN
                        dedxmid=ededx1(Lelktmp,MEDIUM)*elktmp+ededx0(Lel
     *                  ktmp,MEDIUM)
                        dedxmid = 1/dedxmid
                        aux = ededx1(lelktmp,medium)*dedxmid
                      ELSE
                        dedxmid=pdedx1(Lelktmp,MEDIUM)*elktmp+pdedx0(Lel
     *                  ktmp,MEDIUM)
                        dedxmid = 1/dedxmid
                        aux = pdedx1(lelktmp,medium)*dedxmid
                      END IF
                      aux = aux*(1+2*aux)*(fedep/(2-fedep))**2/6
                      tstep = fedep*eke*dedxmid*(1+aux)
                    ELSE
                      ekei = E_array(lelke,medium)
                      elkei = (lelke - eke0(medium))/eke1(medium)
                      fedep = 1 - ekei/eke
                      elktmp = 0.5*(elke+elkei+0.25*fedep*fedep*(1+fedep
     *                *(1+0.875*fedep)))
                      lelktmp = lelke
                      IF ((lelec .LT. 0)) THEN
                        dedxmid=ededx1(Lelktmp,MEDIUM)*elktmp+ededx0(Lel
     *                  ktmp,MEDIUM)
                        dedxmid = 1/dedxmid
                        aux = ededx1(lelktmp,medium)*dedxmid
                      ELSE
                        dedxmid=pdedx1(Lelktmp,MEDIUM)*elktmp+pdedx0(Lel
     *                  ktmp,MEDIUM)
                        dedxmid = 1/dedxmid
                        aux = pdedx1(lelktmp,medium)*dedxmid
                      END IF
                      aux = aux*(1+2*aux)*(fedep/(2-fedep))**2/6
                      tuss = fedep*eke*dedxmid*(1+aux)
                      ekei = E_array(lelkef+1,medium)
                      elkei = (lelkef + 1 - eke0(medium))/eke1(medium)
                      fedep = 1 - ekef/ekei
                      elktmp = 0.5*(elkei+elkef+0.25*fedep*fedep*(1+fede
     *                p*(1+0.875*fedep)))
                      lelktmp = lelkef
                      IF ((lelec .LT. 0)) THEN
                        dedxmid=ededx1(Lelktmp,MEDIUM)*elktmp+ededx0(Lel
     *                  ktmp,MEDIUM)
                        dedxmid = 1/dedxmid
                        aux = ededx1(lelktmp,medium)*dedxmid
                      ELSE
                        dedxmid=pdedx1(Lelktmp,MEDIUM)*elktmp+pdedx0(Lel
     *                  ktmp,MEDIUM)
                        dedxmid = 1/dedxmid
                        aux = pdedx1(lelktmp,medium)*dedxmid
                      END IF
                      aux = aux*(1+2*aux)*(fedep/(2-fedep))**2/6
                      tstep = fedep*ekei*dedxmid*(1+aux)
                      tstep=tstep+tuss+ range_ep(qel,lelke,medium)-range
     *                _ep(qel,lelkef+1,medium)
                    END IF
                  END IF
                  total_tstep = tstep
                  compute_tstep = .false.
                END IF
                tstep = total_tstep/rhof
              END IF
              IF ((lelec .LT. 0)) THEN
                dedx0=ededx1(Lelke,MEDIUM)*elke+ededx0(Lelke,MEDIUM)
              ELSE
                dedx0=pdedx1(Lelke,MEDIUM)*elke+pdedx0(Lelke,MEDIUM)
              END IF
              dedx = rhof*dedx0
              tmxs=tmxs1(Lelke,MEDIUM)*elke+tmxs0(Lelke,MEDIUM)
              tmxs = tmxs/rhof
              ekei = E_array(lelke,medium)
              elkei = (lelke - eke0(medium))/eke1(medium)
              fedep = 1 - ekei/eke
              elktmp = 0.5*(elke+elkei+0.25*fedep*fedep*(1+fedep*(1+0.87
     *        5*fedep)))
              lelktmp = lelke
              IF ((lelec .LT. 0)) THEN
                dedxmid=ededx1(Lelktmp,MEDIUM)*elktmp+ededx0(Lelktmp,MED
     *          IUM)
                dedxmid = 1/dedxmid
                aux = ededx1(lelktmp,medium)*dedxmid
              ELSE
                dedxmid=pdedx1(Lelktmp,MEDIUM)*elktmp+pdedx0(Lelktmp,MED
     *          IUM)
                dedxmid = 1/dedxmid
                aux = pdedx1(lelktmp,medium)*dedxmid
              END IF
              aux = aux*(1+2*aux)*(fedep/(2-fedep))**2/6
              range = fedep*eke*dedxmid*(1+aux)
              range = (range + range_ep(qel,lelke,medium))/rhof
              random_tustep = .false.
              IF ((random_tustep)) THEN
                IF((rng_seed .GT. 128))call ranmar_get
                rnnotu = rng_array(rng_seed)*twom24
                rng_seed = rng_seed + 1
                tmxs = rnnotu*min(tmxs,smaxir(irl))
              ELSE
                tmxs = min(tmxs,smaxir(irl))
              END IF
              tustep = min(tstep,tmxs,range)
              ICM = IR_to_CM(IRL)
              GOTO (24140,24150,24160,24170,24180,24190,24200,24210) ICM
24210         CALL HOWNEAR_APPLICAT(tperp)
              GOTO 24220
24200         CALL HOWNEAR_MAINJAWS(tperp)
              GOTO 24220
24190         CALL HOWNEAR_MIRROR(tperp)
              GOTO 24220
24180         CALL HOWNEAR_RING(tperp)
              GOTO 24220
24170         CALL HOWNEAR_IONCHAM(tperp)
              GOTO 24220
24160         CALL HOWNEAR_SCATFOIL(tperp)
              GOTO 24220
24150         CALL HOWNEAR_COLLIMAT(tperp)
              GOTO 24220
24140         CALL HOWNEAR_XITWIN(tperp)
24220         CONTINUE
              dnear(np) = tperp
              IF (( i_do_rr(irl) .EQ. 1 .AND. e(np) .LT. e_max_rr(irl) )
     *        ) THEN
                IF ((tperp .GE. range)) THEN
                  idisc = 50 + 49*iq(np)
                  go to 24110
                END IF
              END IF
              IF (( i_rr_global .EQ. 1 .AND. ibrspl .EQ. 2 .AND. iphat(n
     *        p).LT.nbrspl .AND. dnear(np) .GT. range )) THEN
                IF((rng_seed .GT. 128))call ranmar_get
                rnno24 = rng_array(rng_seed)*twom24
                rng_seed = rng_seed + 1
                IF (( rnno24*nbrspl .GT. iphat(np) )) THEN
                  np=np-1
                  return
                END IF
                wt(np) = wt(np)*nbrspl/iphat(np)
                iphat(np)=nbrspl
              END IF
              IF (( IREJCT_GLOBAL .GT. 0 .AND. MEDIUM .NE. 0 .AND. E(NP)
     *         .LT. ESAVE(IRL) .AND. IREJCT(IRL).EQ.1 .AND. DNEAR(NP) .G
     *        E. range-RANGE_ECUTRR(IRL))) THEN
                IF ((LELEC .EQ. -1)) THEN
                  IDISC=1
                ELSE
                  IDISC=99
                END IF
                IAUSFL(6)=0
                GOTO 24110
              END IF
              blccl = rhof*blcc(medium)
              xccl = rhof*xcc(medium)
              p2 = eke*(eke+rmt2)
              beta2 = p2/(p2 + rmsq)
              IF (( spin_effects )) THEN
                IF ((lelec .LT. 0)) THEN
                  etap=etae_ms1(Lelke,MEDIUM)*elke+etae_ms0(Lelke,MEDIUM
     *            )
                ELSE
                  etap=etap_ms1(Lelke,MEDIUM)*elke+etap_ms0(Lelke,MEDIUM
     *            )
                END IF
                ms_corr=blcce1(Lelke,MEDIUM)*elke+blcce0(Lelke,MEDIUM)
                blccl = blccl/etap/(1+0.25*etap*xccl/blccl/p2)*ms_corr
              END IF
              ssmfp=beta2/blccl
              skindepth = skindepth_for_bca*ssmfp
              tustep = min(tustep,max(tperp,skindepth))
              count_all_steps = count_all_steps + 1
              is_ch_step = .false.
              IF (((tustep .LE. tperp) .AND. ((.NOT.exact_bca) .OR. (tus
     *        tep .GT. skindepth)))) THEN
                callhowfar = .false.
                domultiple = .false.
                dosingle = .false.
                callmsdist = .true.
                tuss = range - range_ep(qel,lelke,medium)/rhof
                IF (( tuss .GE. tustep )) THEN
                  IF (( lelec .LT. 0 )) THEN
                    dedxmid=ededx1(Lelke,MEDIUM)*elke+ededx0(Lelke,MEDIU
     *              M)
                    aux = ededx1(lelke,medium)/dedxmid
                  ELSE
                    dedxmid=pdedx1(Lelke,MEDIUM)*elke+pdedx0(Lelke,MEDIU
     *              M)
                    aux = pdedx1(lelke,medium)/dedxmid
                  END IF
                  de = dedxmid*tustep*rhof
                  fedep = de/eke
                  de = de*(1-0.5*fedep*aux*(1-0.333333*fedep*(aux-1- 0.2
     *            5*fedep*(2-aux*(4-aux)))))
                ELSE
                  lelktmp = lelke
                  tuss = (range - tustep)*rhof
                  IF (( tuss .LE. 0 )) THEN
                    de = eke - TE(medium)*0.99
                  ELSE
24231               IF(tuss.GE.range_ep(qel,lelktmp,medium))GO TO 24232
                      lelktmp = lelktmp - 1
                    GO TO 24231
24232               CONTINUE
                    elktmp = (lelktmp+1-eke0(medium))/eke1(medium)
                    eketmp = E_array(lelktmp+1,medium)
                    tuss = (range_ep(qel,lelktmp+1,medium) - tuss)/rhof
                    IF (( lelec .LT. 0 )) THEN
                      dedxmid=ededx1(Lelktmp,MEDIUM)*elktmp+ededx0(Lelkt
     *                mp,MEDIUM)
                      aux = ededx1(lelktmp,medium)/dedxmid
                    ELSE
                      dedxmid=pdedx1(Lelktmp,MEDIUM)*elktmp+pdedx0(Lelkt
     *                mp,MEDIUM)
                      aux = pdedx1(lelktmp,medium)/dedxmid
                    END IF
                    de = dedxmid*tuss*rhof
                    fedep = de/eketmp
                    de = de*(1-0.5*fedep*aux*(1-0.333333*fedep*(aux-1- 0
     *              .25*fedep*(2-aux*(4-aux)))))
                    de = de + eke - eketmp
                  END IF
                END IF
                tvstep = tustep
                is_ch_step = .true.
                IF ((transport_algorithm .EQ. 0)) THEN
                  call msdist_pII (  eke,de,tustep,rhof,medium,qel,spin_
     *            effects, u(np),v(np),w(np),x(np),y(np),z(np),  uscat,v
     *            scat,wscat,xtrans,ytrans,ztrans,ustep )
                ELSE
                  call msdist_pI (  eke,de,tustep,rhof,medium,qel,spin_e
     *            ffects, u(np),v(np),w(np),x(np),y(np),z(np),  uscat,vs
     *            cat,wscat,xtrans,ytrans,ztrans,ustep )
                END IF
              ELSE
                callmsdist = .false.
                IF ((exact_bca)) THEN
                  domultiple = .false.
                  IF((rng_seed .GT. 128))call ranmar_get
                  rnnoss = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  IF (( rnnoss .LT. 1.e-30 )) THEN
                    rnnoss = 1.e-30
                  END IF
                  lambda = - Log(1 - rnnoss)
                  lambda_max = 0.5*blccl*rm/dedx*(eke/rm+1)**3
                  IF (( lambda .GE. 0 .AND. lambda_max .GT. 0 )) THEN
                    IF (( lambda .LT. lambda_max )) THEN
                      tuss=lambda*ssmfp*(1-0.5*lambda/lambda_max)
                    ELSE
                      tuss = 0.5 * lambda * ssmfp
                    END IF
                    IF ((tuss .LT. tustep)) THEN
                      tustep = tuss
                      dosingle = .true.
                    ELSE
                      dosingle = .false.
                    END IF
                  ELSE
                    write(i_log,'(/a)') '***************** Warning: '
                    write(i_log,*) ' lambda > lambda_max: ', lambda,lamb
     *              da_max,' eke dedx: ',eke,dedx, ' ir medium blcc: ',i
     *              r(np),medium,blcc(medium), ' position = ',x(np),y(np
     *              ),z(np)
                    dosingle = .false.
                    np=np-1
                    return
                  END IF
                  ustep = tustep
                ELSE
                  dosingle = .false.
                  domultiple = .true.
                  ekems = eke - 0.5*tustep*dedx
                  p2 = ekems*(ekems+rmt2)
                  beta2 = p2/(p2 + rmsq)
                  chia2 = xccl/(4*blccl*p2)
                  xi = 0.5*xccl/p2/beta2*tustep
                  IF (( spin_effects )) THEN
                    elkems = Log(ekems)
                    Lelkems=eke1(MEDIUM)*elkems+eke0(MEDIUM)
                    IF ((lelec .LT. 0)) THEN
                      etap=etae_ms1(Lelkems,MEDIUM)*elkems+etae_ms0(Lelk
     *                ems,MEDIUM)
                      xi_corr=q1ce_ms1(Lelkems,MEDIUM)*elkems+q1ce_ms0(L
     *                elkems,MEDIUM)
                    ELSE
                      etap=etap_ms1(Lelkems,MEDIUM)*elkems+etap_ms0(Lelk
     *                ems,MEDIUM)
                      xi_corr=q1cp_ms1(Lelkems,MEDIUM)*elkems+q1cp_ms0(L
     *                elkems,MEDIUM)
                    END IF
                    chia2 = chia2*etap
                    xi = xi*xi_corr
                    ms_corr=blcce1(Lelkems,MEDIUM)*elkems+blcce0(Lelkems
     *              ,MEDIUM)
                    blccl = blccl*ms_corr
                  ELSE
                    xi_corr = 1
                    etap = 1
                  END IF
                  xi = xi*(Log(1+1./chia2)-1/(1+chia2))
                  IF (( xi .LT. 0.1 )) THEN
                    ustep = tustep*(1 - xi*(0.5 - xi*0.166667))
                  ELSE
                    ustep = tustep*(1 - Exp(-xi))/xi
                  END IF
                END IF
                IF ((ustep .LT. tperp)) THEN
                  callhowfar = .false.
                ELSE
                  callhowfar = .true.
                END IF
              END IF
            END IF
            irold = ir(np)
            irnew = ir(np)
            idisc = 0
            ustep0 = ustep
            IF ((callhowfar .OR. wt(np) .LE. 0)) THEN
              call howfar
            END IF
            IF ((idisc .GT. 0)) THEN
              go to 24110
            END IF
            IF ((ustep .LE. 0)) THEN
              IF ((ustep .LT. -1e-4)) THEN
                ierust = ierust + 1
                WRITE(6,24240)ierust,ustep,dedx,e(np)-prm, ir(np),irnew,
     *          irold,x(np),y(np),z(np)
24240           FORMAT(i4,' Negative ustep = ',e12.5,' dedx=',F8.4,' ke=
     *',F8.4, ' ir,irnew,irold =',3i4,' x,y,z =',4e10.3)
                IF ((ierust .GT. 1000)) THEN
                  WRITE(6,24250)
24250             FORMAT(////' Called exit---too many ustep errors'///)
                  call exit(1)
                END IF
              END IF
              ustep = 0
            END IF
            IF ((ustep .EQ. 0 .OR. medium .EQ. 0)) THEN
              IF ((ustep .NE. 0)) THEN
                IF (.false.) THEN
                  edep = pzero
                ELSE
                  vstep = ustep
                  tvstep = vstep
                  edep = pzero
                  e_range = vacdst
                  iarg = 0
                  IF (( iausfl(iarg+1) .NE. 0 )) THEN
                    call ausgab(iarg)
                    IF (( wt(np) .LE. 0 )) THEN
                      np = np-1
                      return
                    END IF
                  END IF
                  x(np) = x(np) + u(np)*vstep
                  y(np) = y(np) + v(np)*vstep
                  z(np) = z(np) + w(np)*vstep
                  dnear(np) = dnear(np) - vstep
                END IF
              END IF
              IF ((irnew .NE. irold)) THEN
                ir(np) = irnew
                irl = irnew
                medium = med(irl)
              END IF
              IF ((ustep .NE. 0)) THEN
                iarg = 5
                IF (( iausfl(iarg+1) .NE. 0 )) THEN
                  call ausgab(iarg)
                  IF (( wt(np) .LE. 0 )) THEN
                    np = np-1
                    return
                  END IF
                END IF
              END IF
              IF ((eie .LE. ecut(irl))) THEN
                go to 24100
              END IF
              IF ((ustep .NE. 0 .AND. idisc .LT. 0)) THEN
                go to 24110
              END IF
              GO TO 24121
            END IF
            vstep = ustep
            IF ((callhowfar)) THEN
              IF ((exact_bca)) THEN
                tvstep = vstep
                IF ((tvstep .NE. tustep)) THEN
                  dosingle = .false.
                END IF
              ELSE
                IF (( vstep .LT. ustep0 )) THEN
                  ekems = eke - 0.5*tustep*vstep/ustep0*dedx
                  p2 = ekems*(ekems+rmt2)
                  beta2 = p2/(p2 + rmsq)
                  chia2 = xccl/(4*blccl*p2)
                  xi = 0.5*xccl/p2/beta2*vstep
                  IF (( spin_effects )) THEN
                    elkems = Log(ekems)
                    Lelkems=eke1(MEDIUM)*elkems+eke0(MEDIUM)
                    IF ((lelec .LT. 0)) THEN
                      etap=etae_ms1(Lelkems,MEDIUM)*elkems+etae_ms0(Lelk
     *                ems,MEDIUM)
                      xi_corr=q1ce_ms1(Lelkems,MEDIUM)*elkems+q1ce_ms0(L
     *                elkems,MEDIUM)
                    ELSE
                      etap=etap_ms1(Lelkems,MEDIUM)*elkems+etap_ms0(Lelk
     *                ems,MEDIUM)
                      xi_corr=q1cp_ms1(Lelkems,MEDIUM)*elkems+q1cp_ms0(L
     *                elkems,MEDIUM)
                    END IF
                    chia2 = chia2*etap
                    xi = xi*xi_corr
                    ms_corr=blcce1(Lelkems,MEDIUM)*elkems+blcce0(Lelkems
     *              ,MEDIUM)
                    blccl = blccl*ms_corr
                  ELSE
                    xi_corr = 1
                    etap = 1
                  END IF
                  xi = xi*(Log(1+1./chia2)-1/(1+chia2))
                  IF (( xi .LT. 0.1 )) THEN
                    tvstep = vstep*(1 + xi*(0.5 + xi*0.333333))
                  ELSE
                    IF (( xi .LT. 0.999999 )) THEN
                      tvstep = -vstep*Log(1 - xi)/xi
                    ELSE
                      write(i_log,*) ' Stoped in SET-TVSTEP because xi >
     * 1! '
                      write(i_log,*) ' Medium: ',medium
                      write(i_log,*) ' Initial energy: ',eke
                      write(i_log,*) ' Average step energy: ',ekems
                      write(i_log,*) ' tustep: ',tustep
                      write(i_log,*) ' ustep0: ',ustep0
                      write(i_log,*) ' vstep:  ',vstep
                      write(i_log,*) ' ==> xi = ',xi
                      write(i_log,'(/a)') '***************** Error: '
                      write(i_log,*) 'This is a fatal error condition'
                      write(i_log,'(/a)') '***************** Quiting now
     *.'
                      call exit(1)
                    END IF
                  END IF
                ELSE
                  tvstep = tustep
                END IF
              END IF
              tuss = range - range_ep(qel,lelke,medium)/rhof
              IF (( tuss .GE. tvstep )) THEN
                IF (( lelec .LT. 0 )) THEN
                  dedxmid=ededx1(Lelke,MEDIUM)*elke+ededx0(Lelke,MEDIUM)
                  aux = ededx1(lelke,medium)/dedxmid
                ELSE
                  dedxmid=pdedx1(Lelke,MEDIUM)*elke+pdedx0(Lelke,MEDIUM)
                  aux = pdedx1(lelke,medium)/dedxmid
                END IF
                de = dedxmid*tvstep*rhof
                fedep = de/eke
                de = de*(1-0.5*fedep*aux*(1-0.333333*fedep*(aux-1- 0.25*
     *          fedep*(2-aux*(4-aux)))))
              ELSE
                lelktmp = lelke
                tuss = (range - tvstep)*rhof
                IF (( tuss .LE. 0 )) THEN
                  de = eke - TE(medium)*0.99
                ELSE
24261             IF(tuss.GE.range_ep(qel,lelktmp,medium))GO TO 24262
                    lelktmp = lelktmp - 1
                  GO TO 24261
24262             CONTINUE
                  elktmp = (lelktmp+1-eke0(medium))/eke1(medium)
                  eketmp = E_array(lelktmp+1,medium)
                  tuss = (range_ep(qel,lelktmp+1,medium) - tuss)/rhof
                  IF (( lelec .LT. 0 )) THEN
                    dedxmid=ededx1(Lelktmp,MEDIUM)*elktmp+ededx0(Lelktmp
     *              ,MEDIUM)
                    aux = ededx1(lelktmp,medium)/dedxmid
                  ELSE
                    dedxmid=pdedx1(Lelktmp,MEDIUM)*elktmp+pdedx0(Lelktmp
     *              ,MEDIUM)
                    aux = pdedx1(lelktmp,medium)/dedxmid
                  END IF
                  de = dedxmid*tuss*rhof
                  fedep = de/eketmp
                  de = de*(1-0.5*fedep*aux*(1-0.333333*fedep*(aux-1- 0.2
     *            5*fedep*(2-aux*(4-aux)))))
                  de = de + eke - eketmp
                END IF
              END IF
            ELSE
              tvstep = tustep
              IF (( .NOT.callmsdist )) THEN
                tuss = range - range_ep(qel,lelke,medium)/rhof
                IF (( tuss .GE. tvstep )) THEN
                  IF (( lelec .LT. 0 )) THEN
                    dedxmid=ededx1(Lelke,MEDIUM)*elke+ededx0(Lelke,MEDIU
     *              M)
                    aux = ededx1(lelke,medium)/dedxmid
                  ELSE
                    dedxmid=pdedx1(Lelke,MEDIUM)*elke+pdedx0(Lelke,MEDIU
     *              M)
                    aux = pdedx1(lelke,medium)/dedxmid
                  END IF
                  de = dedxmid*tvstep*rhof
                  fedep = de/eke
                  de = de*(1-0.5*fedep*aux*(1-0.333333*fedep*(aux-1- 0.2
     *            5*fedep*(2-aux*(4-aux)))))
                ELSE
                  lelktmp = lelke
                  tuss = (range - tvstep)*rhof
                  IF (( tuss .LE. 0 )) THEN
                    de = eke - TE(medium)*0.99
                  ELSE
24271               IF(tuss.GE.range_ep(qel,lelktmp,medium))GO TO 24272
                      lelktmp = lelktmp - 1
                    GO TO 24271
24272               CONTINUE
                    elktmp = (lelktmp+1-eke0(medium))/eke1(medium)
                    eketmp = E_array(lelktmp+1,medium)
                    tuss = (range_ep(qel,lelktmp+1,medium) - tuss)/rhof
                    IF (( lelec .LT. 0 )) THEN
                      dedxmid=ededx1(Lelktmp,MEDIUM)*elktmp+ededx0(Lelkt
     *                mp,MEDIUM)
                      aux = ededx1(lelktmp,medium)/dedxmid
                    ELSE
                      dedxmid=pdedx1(Lelktmp,MEDIUM)*elktmp+pdedx0(Lelkt
     *                mp,MEDIUM)
                      aux = pdedx1(lelktmp,medium)/dedxmid
                    END IF
                    de = dedxmid*tuss*rhof
                    fedep = de/eketmp
                    de = de*(1-0.5*fedep*aux*(1-0.333333*fedep*(aux-1- 0
     *              .25*fedep*(2-aux*(4-aux)))))
                    de = de + eke - eketmp
                  END IF
                END IF
              END IF
            END IF
            save_de = de
            edep = de
            ekef = eke - de
            eold = eie
            enew = eold - de
            IF (( .NOT.callmsdist )) THEN
              IF (( domultiple )) THEN
                lambda = blccl*tvstep/beta2/etap/(1+chia2)
                xi = xi/xi_corr
                findindex = .true.
                spin_index = .true.
                call mscat(lambda,chia2,xi,elkems,beta2,qel,medium, spin
     *          _effects,findindex,spin_index, costhe,sinthe)
              ELSE
                IF ((dosingle)) THEN
                  ekems = Max(ekef,ecut(irl)-rm)
                  p2 = ekems*(ekems + rmt2)
                  beta2 = p2/(p2 + rmsq)
                  chia2 = xcc(medium)/(4*blcc(medium)*p2)
                  IF (( spin_effects )) THEN
                    elkems = Log(ekems)
                    Lelkems=eke1(MEDIUM)*elkems+eke0(MEDIUM)
                    IF ((lelec .LT. 0)) THEN
                      etap=etae_ms1(Lelkems,MEDIUM)*elkems+etae_ms0(Lelk
     *                ems,MEDIUM)
                    ELSE
                      etap=etap_ms1(Lelkems,MEDIUM)*elkems+etap_ms0(Lelk
     *                ems,MEDIUM)
                    END IF
                    chia2 = chia2*etap
                  END IF
                  call sscat(chia2,elkems,beta2,qel,medium, spin_effects
     *            ,costhe,sinthe)
                ELSE
                  theta = 0
                  sinthe = 0
                  costhe = 1
                END IF
              END IF
            END IF
            e_range = range
            IF (( callmsdist )) THEN
              u_final = uscat
              v_final = vscat
              w_final = wscat
              x_final = xtrans
              y_final = ytrans
              z_final = ztrans
            ELSE
              IF (.NOT.(.false.)) THEN
                x_final = x(np) + u(np)*vstep
                y_final = y(np) + v(np)*vstep
                z_final = z(np) + w(np)*vstep
              END IF
              IF (( domultiple .OR. dosingle )) THEN
                u_tmp = u(np)
                v_tmp = v(np)
                w_tmp = w(np)
                call uphi(2,1)
                u_final = u(np)
                v_final = v(np)
                w_final = w(np)
                u(np) = u_tmp
                v(np) = v_tmp
                w(np) = w_tmp
              ELSE
                u_final = u(np)
                v_final = v(np)
                w_final = w(np)
              END IF
            END IF
            iarg = 0
            IF (( iausfl(iarg+1) .NE. 0 )) THEN
              call ausgab(iarg)
              IF (( wt(np) .LE. 0 )) THEN
                np = np-1
                return
              END IF
            END IF
            x(np) = x_final
            y(np) = y_final
            z(np) = z_final
            u(np) = u_final
            v(np) = v_final
            w(np) = w_final
            dnear(np) = dnear(np) - vstep
            irold = ir(np)
            peie = peie - edep
            eie = peie
            e(np) = peie
            IF (( irnew .EQ. irl .AND. eie .LE. ecut(irl))) THEN
              go to 24100
            END IF
            medold = medium
            IF ((medium .NE. 0)) THEN
              ekeold = eke
              eke = eie - rm
              elke = log(eke)
              Lelke=eke1(MEDIUM)*elke+eke0(MEDIUM)
            END IF
            IF ((irnew .NE. irold)) THEN
              ir(np) = irnew
              irl = irnew
              medium = med(irl)
            END IF
            iarg = 5
            IF (( iausfl(iarg+1) .NE. 0 )) THEN
              call ausgab(iarg)
              IF (( wt(np) .LE. 0 )) THEN
                np = np-1
                return
              END IF
            END IF
            IF ((eie .LE. ecut(irl))) THEN
              go to 24100
            END IF
            IF ((idisc .LT. 0)) THEN
              go to 24110
            END IF
            IF((medium .NE. medold))GO TO 24121
            demfp = demfp - save_de*sig
            total_de = total_de - save_de
            total_tstep = total_tstep - tvstep*rhof
            IF (( total_tstep .LT. 1e-9 )) THEN
              demfp = 0
            END IF
            IF(((demfp .LT. 1.E-5)))GO TO24132
          GO TO 24131
24132     CONTINUE
          IF ((lelec .LT. 0)) THEN
            sigf=esig1(Lelke,MEDIUM)*elke+esig0(Lelke,MEDIUM)
            dedx0=ededx1(Lelke,MEDIUM)*elke+ededx0(Lelke,MEDIUM)
          ELSE
            sigf=psig1(Lelke,MEDIUM)*elke+psig0(Lelke,MEDIUM)
            dedx0=pdedx1(Lelke,MEDIUM)*elke+pdedx0(Lelke,MEDIUM)
          END IF
          sigf = sigf/dedx0
          IF (( use_bcse .AND. is_bcse_medium(medium) .AND. (ibrspl .LT.
     *     2 .OR. iphat(np) .GT. 1) )) THEN
            IF ((lelec .LT. 0)) THEN
              ebr1=ebr11(Lelke,MEDIUM)*elke+ebr10(Lelke,MEDIUM)
            ELSE
              ebr1=pbr11(Lelke,MEDIUM)*elke+pbr10(Lelke,MEDIUM)
            END IF
            IF (( bcse_power_n .GT. 0 )) THEN
              bcse_factor = 1 + bcse_factor_c*(E(np)-prm)**bcse_power_n
            ELSE
              bcse_factor = bcse_factor_c
            END IF
            IF((ibrspl .EQ. 2 .AND. bcse_factor .GT. iphat(np)))bcse_fac
     *      tor = iphat(np)
            sig = sigf*(1 + ebr1*(bcse_factor-1))
            IF (( sig .LE. sig0 )) THEN
              sigf = sig
            ELSE
              bcse_factor = 1 + (sig0/sigf-1)/ebr1
              IF (( bcse_factor .LT. 1 )) THEN
                write(i_log,'(/a)') '***************** Error: '
                write(i_log,*) 'In $EVALUATE-SIGF: bcse_factor = ',bcse_
     *          factor
                write(i_log,'(/a)') '***************** Quiting now.'
                call exit(1)
              END IF
              sigf = sig0
            END IF
          ELSE
            bcse_factor = 1
          END IF
          sigratio = sigf/sig0
          IF((rng_seed .GT. 128))call ranmar_get
          rfict = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF(((rfict .LE. sigratio)))GO TO24122
        GO TO 24121
24122   CONTINUE
        IF ((lelec .LT. 0)) THEN
          IF (( use_bcse .AND. is_bcse_medium(medium) .AND. (ibrspl .LT.
     *     2 .OR. iphat(np) .GT. 1) )) THEN
            ebr1 = ebr1*bcse_factor/(1 + ebr1*(bcse_factor-1))
          ELSE
            ebr1=ebr11(Lelke,MEDIUM)*elke+ebr10(Lelke,MEDIUM)
          END IF
          IF((rng_seed .GT. 128))call ranmar_get
          rnno24 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF ((rnno24 .LE. ebr1)) THEN
            go to 24280
          ELSE
            IF ((e(np) .LE. thmoll(medium) .AND. eii_flag .EQ. 0)) THEN
              IF ((ebr1 .LE. 0)) THEN
                go to 24090
              END IF
              go to 24280
            END IF
            iarg = 8
            IF (( iausfl(iarg+1) .NE. 0 )) THEN
              call ausgab(iarg)
              IF (( wt(np) .LE. 0 )) THEN
                np = np-1
                return
              END IF
            END IF
            call moller
            iarg = 9
            IF (( iausfl(iarg+1) .NE. 0 )) THEN
              call ausgab(iarg)
              IF (( wt(np) .LE. 0 )) THEN
                np = np-1
                return
              END IF
            END IF
            IF((iq(np) .EQ. 0))return
          END IF
          go to 24090
        END IF
        IF (( use_bcse .AND. is_bcse_medium(medium) .AND. (ibrspl .LT. 2
     *   .OR. iphat(np) .GT. 1) )) THEN
          pbr1 = ebr1*bcse_factor/(1 + ebr1*(bcse_factor-1))
        ELSE
          pbr1=pbr11(Lelke,MEDIUM)*elke+pbr10(Lelke,MEDIUM)
        END IF
        IF((rng_seed .GT. 128))call ranmar_get
        rnno25 = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        IF ((rnno25 .LT. pbr1)) THEN
          go to 24280
        END IF
        pbr2=pbr21(Lelke,MEDIUM)*elke+pbr20(Lelke,MEDIUM)
        IF (( use_bcse .AND. is_bcse_medium(medium) .AND. (ibrspl .LT. 2
     *   .OR. iphat(np) .GT. 1) )) THEN
          pbr2 = (ebr1*(bcse_factor-1) + pbr2)/(1 + ebr1*(bcse_factor-1)
     *    )
        END IF
        IF ((rnno25 .LT. pbr2)) THEN
          iarg = 10
          IF (( iausfl(iarg+1) .NE. 0 )) THEN
            call ausgab(iarg)
            IF (( wt(np) .LE. 0 )) THEN
              np = np-1
              return
            END IF
          END IF
          call bhabha
          iarg = 11
          IF (( iausfl(iarg+1) .NE. 0 )) THEN
            call ausgab(iarg)
            IF (( wt(np) .LE. 0 )) THEN
              np = np-1
              return
            END IF
          END IF
          IF((iq(np) .EQ. 0))return
        ELSE
          iarg = 12
          IF (( iausfl(iarg+1) .NE. 0 )) THEN
            call ausgab(iarg)
            IF (( wt(np) .LE. 0 )) THEN
              np = np-1
              return
            END IF
          END IF
          call annih
          iarg = 13
          IF (( iausfl(iarg+1) .NE. 0 )) THEN
            call ausgab(iarg)
            IF (( wt(np) .LE. 0 )) THEN
              np = np-1
              return
            END IF
          END IF
          GO TO 24092
        END IF
      GO TO 24091
24092 CONTINUE
      return
24280 iarg = 6
      IF (( iausfl(iarg+1) .NE. 0 )) THEN
        call ausgab(iarg)
        IF (( wt(np) .LE. 0 )) THEN
          np = np-1
          return
        END IF
      END IF
      call brems
      iarg = 7
      IF (( iausfl(iarg+1) .NE. 0 )) THEN
        call ausgab(iarg)
        IF (( wt(np) .LE. 0 )) THEN
          np = np-1
          return
        END IF
      END IF
      IF ((iq(np) .EQ. 0)) THEN
        return
      ELSE
        go to 24090
      END IF
24100 IF (( medium .GT. 0 )) THEN
        IF ((eie .GT. ae(medium))) THEN
          idr = 1
          IF ((lelec .LT. 0)) THEN
            edep = e(np) - prm
          ELSE
            EDEP=PEIE-PRM
          END IF
        ELSE
          idr = 2
          edep = e(np) - prm
        END IF
      ELSE
        idr = 1
        edep = e(np) - prm
      END IF
      iarg = idr
      IF (( iausfl(iarg+1) .NE. 0 )) THEN
        call ausgab(iarg)
        IF (( wt(np) .LE. 0 )) THEN
          np = np-1
          return
        END IF
      END IF
24290 CONTINUE
      IF ((lelec .GT. 0)) THEN
        IF ((edep .LT. peie)) THEN
          iarg = 28
          IF (( iausfl(iarg+1) .NE. 0 )) THEN
            call ausgab(iarg)
            IF (( wt(np) .LE. 0 )) THEN
              np = np-1
              return
            END IF
          END IF
          call annih_at_rest
          iarg = 14
          IF (( iausfl(iarg+1) .NE. 0 )) THEN
            call ausgab(iarg)
            IF (( wt(np) .LE. 0 )) THEN
              np = np-1
              return
            END IF
          END IF
          return
        END IF
      END IF
      np = np - 1
      ircode = 2
      return
24110 idisc = abs(idisc)
      IF (((lelec .LT. 0) .OR. (idisc .EQ. 99))) THEN
        edep = e(np) - prm
      ELSE
        edep = e(np) + prm
      END IF
      iarg = 3
      IF (( iausfl(iarg+1) .NE. 0 )) THEN
        call ausgab(iarg)
        IF (( wt(np) .LE. 0 )) THEN
          np = np-1
          return
        END IF
      END IF
      IF((idisc .EQ. 99))goto 24290
      np = np - 1
      ircode = 2
      return
      end
      SUBROUTINE HATCH
      implicit none
      character*512 toUpper
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/ELECIN/ esig_e(12),psig_e(12), esige_max, psige_max, range_
     *ep(0:1,500,12), E_array(500,12), etae_ms0(500,12),etae_ms1(500,12)
     *,etap_ms0(500,12),etap_ms1(500,12),q1ce_ms0(500,12),q1ce_ms1(500,1
     *2),q1cp_ms0(500,12),q1cp_ms1(500,12),q2ce_ms0(500,12),q2ce_ms1(500
     *,12),q2cp_ms0(500,12),q2cp_ms1(500,12),blcce0(500,12),blcce1(500,1
     *2), EKE0(12),EKE1(12), XR0(12),TEFF0(12),BLCC(12),XCC(12), ESIG0(5
     *00,12),ESIG1(500,12),PSIG0(500,12),PSIG1(500,12),EDEDX0(500,12),ED
     *EDX1(500,12),PDEDX0(500,12),PDEDX1(500,12),EBR10(500,12),EBR11(500
     *,12),PBR10(500,12),PBR11(500,12),PBR20(500,12),PBR21(500,12),TMXS0
     *(500,12),TMXS1(500,12), expeke1(12), IUNRST(12),EPSTFL(12),IAPRIM(
     *12), sig_ismonotone(0:1,12)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/PHOTIN/ EBINDA(12), GE0(12),GE1(12), GMFP0(2000,12),GMFP1(2
     *000,12),GBR10(2000,12),GBR11(2000,12),GBR20(2000,12),GBR21(2000,12
     *), RCO0(12),RCO1(12), RSCT0(100,12),RSCT1(100,12), COHE0(2000,12),
     *COHE1(2000,12),  PHOTONUC0(2000,12),PHOTONUC1(2000,12), DPMFP, MPG
     *EM(1,12), NGR(12)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIIN/SINC0,SINC1,SIN0(1002),SIN1(1002)
      real*8 SINC0,SINC1,SIN0,SIN1
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common/ET_control/ smaxir(3000),estepe,ximax,  skindepth_for_bca,t
     *ransport_algorithm, bca_algorithm,exact_bca,spin_effects
      real*8 smaxir,  estepe,  ximax,      skindepth_for_bca
      integer*4 transport_algorithm, bca_algorithm
      logical exact_bca,  spin_effects
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/x_options/eadl_relax,  mcdf_pe_xsections
      logical eadl_relax, mcdf_pe_xsections
      common/egs_vr/ e_max_rr(3000),  prob_RR,  nbr_split,  i_play_RR,
     *    i_survived_RR,
     *        n_RR_warning,                                        i_do_
     *rr(3000)
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      COMMON/LBREMZ/CONST,DELC,EBREMZ,DELTAM,XLNZ
      real*4 CONST,DELC,EBREMZ,DELTAM,XLNZ
      COMMON/PMCONS/PIP,C,RME,HBAR,ECGS,EMKS,AN
      real*4 PIP,C,RME,HBAR,ECGS,EMKS,AN
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      COMMON/EPSTAR/EPSTEN(150),EPSTD(150),WEPST(20), EPSTTL,NEPST,IEPST
     *,EPSTFLP, NELEPS,ZEPST(20),IAPRFL,IAPRIMP
      integer*4 ZEPST,NELEPS,IAPRFL,NEPST,IEPST,EPSTFLP,IAPRIMP
      CHARACTER EPSTTL*80
      real*4 EPSTEN,EPSTD,WEPST
      COMMON/MOLVAR/WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU, RLCP,EDEN,RH
     *OP,XCCP,BLCCP,TEFF0P,XR0P
      real*4 WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU,RLCP,EDEN,RHOP, XCCP
     *,BLCCP,TEFF0P,XR0P
      COMMON/LSPION/CBAR,X0,X1,SK,TOLN10,AFACT,SPC1,SPC2,IEV
      real*4 CBAR,X0,X1,SK,TOLN10,AFACT,SPC1,SPC2,IEV
      COMMON/PWLFIN/EPE,ZTHRE(8),ZEPE(8),NIPE,NALE
      real*4 EPE,ZTHRE,ZEPE
      integer*4 NIPE,NALE
      COMMON/RSLTS/NEL,AXE,BXE,AFE(500,8),BFE(500,8)
      real*4 AXE,BXE,AFE,BFE
      integer*4 NEL
      COMMON/SPCOMM/MEDTBL(24,73), NUMSTMED,STDATA(6,73)
      CHARACTER*4 MEDTBL
      integer*4 NUMSTMED
      real*4 STDATA
      COMMON/MIXDAT/NEP,LMED,PZP(50),ZELEMP(50),WAP(50),RHOZP(50), GASPP
     *,EZ,TPZ,IDSTRN(24)
      integer*4 NEP,LMED
      real*4 PZP,ZELEMP,WAP,RHOZP,GASPP,EZ,TPZ
      CHARACTER*4 IDSTRN
      COMMON/ADLEN/ALRAD(4),ALRADP(4),A1440,A183
      real*4 ALRAD,ALRADP,A1440,A183
      COMMON/MIMSD/BMIN
      real*4 BMIN
      COMMON/THRESHP/APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP,IUNRSTP
      real*4 APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP
      integer*4 IUNRSTP
      COMMON/BREMPRP/DLP1(6),DLP2(6),DLP3(6),DLP4(6),DLP5(6),DLP6(6), DE
     *LCMP,ALPHIP(2),BPARP(2),DELPOSP(2)
      real*4 dlP1,dlP2,dlP3,dlP4,dlP5,dlP6,delcmP,alphiP,bparP,delposP
      COMMON/ELEMTB/NET,ITBL(100),WATBL(100),RHOTBL(100),ASYMT(100)
      integer*4 NET
      real*4 ITBL,WATBL,RHOTBL
      CHARACTER*4 ASYMT
      COMMON/MEDINP/inpdensity_file(12),inpasym(12,50), inpstrn(24,12),p
     *z4(12,50), rhoz4(12,50),wa4(12,50),inpgasp(12)
      character*256 inpdensity_file
      CHARACTER*4 inpasym,inpstrn
      real*4 pz4,rhoz4,wa4,inpgasp
      real*4 XSIFP,WADUM,PZDUM,RHOZDUM,RLCDUM,ALKE,ALKEI
      integer*4 I01
      EXTERNAL ALKE,ALKEI,EFUNS
      CHARACTER*4 MEDTB1(24,20),MEDTB2(24,20),MEDTB3(24,20),MEDTB4(24,13
     *)
      EQUIVALENCE (MEDTBL(1,1),MEDTB1(1,1))
      EQUIVALENCE (MEDTBL(1,21),MEDTB2(1,1))
      EQUIVALENCE (MEDTBL(1,41),MEDTB3(1,1))
      EQUIVALENCE (MEDTBL(1,61),MEDTB4(1,1))
      real*4 STDAT1(6,20),STDAT2(6,20),STDAT3(6,20),STDAT4(6,13)
      EQUIVALENCE (STDATA(1,1),STDAT1(1,1))
      EQUIVALENCE (STDATA(1,21),STDAT2(1,1))
      EQUIVALENCE (STDATA(1,41),STDAT3(1,1))
      EQUIVALENCE (STDATA(1,61),STDAT4(1,1))
      CHARACTER*4 MBUF(72),MDLABL(8)
      real*8 ACD ,  ADEV ,  ASD ,  COST ,  CTHET ,  DEL ,  DFACT ,  DFAC
     *TI,  DUNITO,  DUNITR,  FNSSS ,  P ,  PZNORM,  RDEV ,  S2C2 ,  S2C2
     *MN,  S2C2MX,  SINT ,  SX ,  SXX ,  SXY ,   SY ,   WID ,  XS ,  XS0
     * ,  XS1 ,  XSI ,  WSS ,  YS ,  ZEROS(3)
      integer*4 I ,  I1ST ,  IB ,  ID ,  IE ,  IL ,  IM ,  IRAYL ,  IRN
     *,  ISTEST,  ISUB ,  ISS ,  IZ ,   IZZ ,  J ,  JR ,  LCTHET,  LMDL
     *,  LMDN ,  LTHETA,  MD ,  MXSINC,  NCMFP ,   NEKE ,   NGE ,   NGRI
     *M ,  NISUB ,  NLEKE ,    NM ,  NRANGE,    NRNA ,  NSEKE ,   NSGE ,
     *   NSINSS,  LOK(12)
      character*256 tmp_string
      integer*4 lnblnk1
      DATA MDLABL/' ','M','E','D','I','U','M','='/,LMDL/8/,LMDN/24/,DUNI
     *TO/1./
      DATA I1ST/1/,NSINSS/37/,MXSINC/1002/,ISTEST/0/,NRNA/1000/
      PIP=3.1415926536
      C=2.997925E+10
      HBAR=1.05450E-27
      ECGS=4.80298E-10
      EMKS=1.60210E-19
      AN=6.02252E+23
      RADDEG=180./PIP
      FSC = ECGS**2/(HBAR*C)
      ERGMEV = (1.E+6)*(EMKS*1.E+7)
      RME = PRM/C**2*ERGMEV
      RMP = PRM
      R0 = (ECGS**2)/(RME*C**2)
      RMPSQ = RMP*RMP
      A22P9 = RADDEG*SQRT(4.*PIP*AN)*ECGS**2/ERGMEV
      A6680 = 4.0*PIP*AN*(HBAR/(RME*C))**2*(0.885**2/(1.167*1.13))
      DATA AFACT/0.0/,SK/0.0/,X0/0.0/,X1/0.0/,CBAR/0.0/,IEV/0.0/
      DATA LMED/24/,NUMSTMED/73/
      DATA EPE/.01/,ZTHRE,ZEPE/16*0.0/,NIPE/20/,NALE/500/
      DATA BMIN/4.5/
      DATA ALRAD/5.31,4.79,4.74,4.71/,ALRADP/6.144,5.621,5.805,5.924/, A
     *1440/1194.0/,A183/184.15/
      DATA MEDTB1/ 'H','2','-','G','A','S',18*' ','H','2','-','L','I','Q
     *','U','I','D',15*' ','H','E','-','G','A','S',18*' ','L','I',22*' '
     *, 'B','E',22*' ','C','-','2','.','2','6','5',' ','G','/','C','M','
     **','*','3',9*' ','C','-','1','.','7','0',' ','G','/','C','M','*','
     **','3',10*' ', 'N','2','-','G','A','S',18*' ','O','2','-','G','A',
     *'S',18*' ','N','E','-','G','A','S',18*' ','N','A',22*' ', 'M','G',
     *22*' ','A','L',22*' ','S','I',22*' ','A','R','-','G','A','S',18*'
     *', 'K',23*' ','C','A',22*' ','T','I',22*' ','V',23*' ','M','N',22*
     *' ' /
      DATA MEDTB2/ 'F','E',22*' ','C','O',22*' ','N','I',22*' ','C','U',
     *22*' ','Z','N',22*' ', 'G','E',22*' ','S','E',22*' ','K','R','-','
     *G','A','S',18*' ','R','B',22*' ', 'M','O',22*' ','A','G',22*' ','C
     *','D',22*' ','I','N',22*' ','S','N',22*' ', 'X','E','-','G','A','S
     *',18*' ','C','S',22*' ','G','D',22*' ','T','A',22*' ', 'W',23*' ',
     *'P','T',22*' ' /
      DATA MEDTB3/ 'A','U',22*' ','H','G',22*' ','P','B',22*' ','R','N',
     *'-','G','A','S',18*' ', 'U',23*' ', 'A','I','R','-','G','A','S',17
     **' ','C','O','2','-','G','A','S',17*' ','P','O','L','Y','E','T','H
     *','Y','L','E','N','E',12*' ', 'P','O','L','Y','P','R','O','P','Y',
     *'L','E','N','E',11*' ','X','Y','L','E','N','E',18*' ','T','O','L',
     *'U','E','N','E',17*' ', 'N','Y','L','O','N',19*' ','V','I','N','Y'
     *,'L','T','O','L','U','E','N','E',12*' ','A','1','5','0','-','P','L
     *','A','S','T','I','C',12*' ', 'S','T','I','L','B','E','N','E',16*'
     * ','P','O','L','Y','S','T','Y','R','E','N','E',13*' ','A','N','T',
     *'H','R','A','C','E','N','E',14*' ', 'L','E','X','A','N',19*' ','L'
     *,'U','C','I','T','E',18*' ','H','2','O',21*' ' /
      DATA MEDTB4/ 'M','Y','L','A','R',19*' ', 'K','A','P','T','O','N',1
     *8*' ','L','I','F',21*' ','P','O','L','Y','V','I','N','Y','L','-','
     *C','L',12*' ', 'P','Y','R','E','X','-','G','L','A','S','S',13*' ',
     *'S','I','O','2',20*' ','C','A','F','2',20*' ', 'P','H','O','T','O'
     *,'E','M','U','L','S','I','O','N',11*' ','A','G','C','L',20*' ','N'
     *,'A','I',21*' ', 'L','I','I',21*' ','A','G','B','R',20*' ','C','S'
     *,'I',21*' ' /
      DATA STDAT1/ 0.03535,6.790,1.864,3.5,19.2,9.584, 0.09179,5.831,0.4
     *76,2.0,21.8,3.263, 0.0114,7.625,2.202,4.0,41.8,11.139, 0.3492,3.23
     *3,0.0966,2.0,40.0,3.122, 0.3518,3.034,-0.0089,2.0,63.7,2.785, 0.58
     *48,2.360,-0.0089,2.0,78.0,2.868, 0.7154,2.191,-0.0089,2.0,78.0,3.1
     *55, 0.2120,3.041,1.738,4.0,82.0,10.540, 0.2666,2.825,1.754,4.0,95.
     *0,10.700, 0.1202,3.357,2.073,4.5,137.0,11.904, 0.2204,3.103,0.4515
     *,2.8,149.0,5.053, 0.1714,3.223,0.2386,2.8,156.0,4.530, 0.3346,2.79
     *5,0.0966,2.5,166.0,4.239, 0.3755,2.720,0.0966,2.5,173.0,4.435, 0.1
     *902,2.982,1.764,4.5,188.0,11.948, 0.3041,2.674,0.2386,3.0,190.0,5.
     *642, 0.2177,2.874,0.1751,3.0,191.0,5.040, 0.1782,2.946,0.0485,3.0,
     *233.0,4.445, 0.1737,2.935,-0.0089,3.0,245.0,4.266, 0.1996,2.812,-0
     *.0089,3.0,272.0,4.270 /
      DATA STDAT2/ 0.2101,2.771,-0.0089,3.0,286.0,4.291, 0.2229,2.713,-0
     *.0089,3.0,297.0,4.260, 0.2504,2.619,-0.0089,3.0,311.0,4.312, 0.255
     *7,2.613,-0.0089,3.0,322.0,4.419, 0.3163,2.468,0.0485,3.0,330.0,4.6
     *91, 0.2809,2.647,0.2386,3.0,350.0,5.141, 0.2979,2.635,0.2386,3.0,3
     *48.0,5.321, 0.1519,3.030,1.716,4.8,352.0,12.512, 0.1450,3.078,0.45
     *15,3.5,363.0,6.478, 0.2228,2.824,0.1751,3.0,424.0,4.879, 0.3091,2.
     *563,-0.0089,3.0,470.0,5.063, 0.1853,2.819,0.0485,3.3,469.0,5.273,
     *0.2004,2.790,0.1751,3.3,487.0,5.517, 0.1898,2.839,0.2386,3.3,488.0
     *,5.534, 0.1329,3.020,1.563,5.0,482.0,12.728, 0.2214,2.784,0.4515,3
     *.5,488.0,6.914, 0.2068,2.686,0.0485,3.5,591.0,5.874, 0.1663,2.805,
     *0.1751,3.5,718.0,5.526, 0.1499,2.870,0.1751,3.5,727.0,5.406, 0.146
     *5,2.903,0.0966,3.5,790.0,5.473 /
      DATA STDAT3/ 0.1533,2.881,0.0966,3.5,790.0,5.575, 0.1824,2.798,0.2
     *386,3.5,800.0,5.961, 0.1861,2.814,0.2386,3.5,823.0,6.202, 0.1130,3
     *.023,1.537,5.3,794.0,13.284, 0.1362,3.034,0.2386,3.5,890.0,5.869,
     *0.2466,2.879,1.742,4.0,85.7,10.595, 0.1999,3.022,1.648,4.0,88.7,10
     *.239, 0.4875,2.544,0.1379,2.0,57.4,3.002, 0.2493,2.975,0.1537,2.3,
     *59.2,3.126, 0.2755,2.911,0.1695,2.3,61.8,3.270, 0.2830,2.890,0.172
     *2,2.3,62.5,3.303, 0.5345,2.439,0.1336,2.0,63.9,3.063, 0.3495,2.749
     *,0.1467,2.2,64.7,3.201, 0.5462,2.435,0.1329,2.0,65.1,3.110, 0.2989
     *,2.851,0.1731,2.3,67.7,3.367, 0.3670,2.724,0.1647,2.2,68.7,3.300,
     *0.5858,2.364,0.1146,2.0,69.5,3.151, 0.3865,2.664,0.1608,2.2,73.1,3
     *.321, 0.3996,2.606,0.1824,2.2,74.0,3.330, 0.2065,3.007,0.2400,2.5,
     *75.0,3.502 /
      DATA STDAT4/ 0.3124,2.782,0.1561,2.3,78.7,3.326, 0.4061,2.614,0.14
     *92,2.2,79.3,3.342, 0.1308,3.476,0.0171,2.5,94.0,3.167, 0.1873,2.96
     *2,0.1558,2.8,108.2,4.053, 0.2988,2.805,0.1479,2.5,134.0,3.971, 0.1
     *440,3.220,0.1385,2.8,139.2,4.003, 0.3750,2.592,0.0676,2.5,166.0,4.
     *065, 0.3416,2.496,0.1009,3.0,331.0,5.332, 0.1243,3.002,-0.0138,3.5
     *,398.4,5.344, 0.1560,2.926,0.1203,3.5,452.0,6.057, 0.1785,2.845,0.
     *0892,3.5,485.1,6.267, 0.1351,2.976,0.0358,3.5,487.2,5.616, 0.1796,
     *2.840,0.0395,3.5,553.1,6.281 /
      DATA NET/100/
      DATA ITBL/19.2,41.8,40.,63.7,76.0,78.0,82.0,95.0,115.,137., 149.,1
     *56.,166.,173.,173.,180.,174.,188.,190.,191.,216.,233.,245., 257.,2
     *72.,286.,297.,311.,322.,330.,334.,350.,347.,348.,357.,352., 363.,3
     *66.,379.,393.,417.,424.,428.,441.,449.,470.,470.,469.,488., 488.,4
     *87.,485.,491.,482.,488.,491.,501.,523.,535.,546.,560.,574., 580.,5
     *91.,614.,628.,650.,658.,674.,684.,694.,705.,718.,727.,736., 746.,7
     *57.,790.,790.,800.,810.,823.,823.,830.,825.,794.,827.,826., 841.,8
     *47.,878.,890.,902.,921.,934.,939.,952.,966.,980.,994./
      DATA WATBL/1.00797,4.0026,6.939,9.0122,10.811,12.01115,14.0067, 15
     *.9994,18.9984,20.183,22.9898,24.312,26.9815,28.088,30.9738, 32.064
     *,35.453,39.948,39.102,40.08,44.956,47.90,50.942,51.998, 54.9380,55
     *.847,58.9332,58.71,63.54,65.37,69.72,72.59,74.9216, 78.96,79.808,8
     *3.80,85.47,87.62,88.905,91.22,92.906,95.94,99.0, 101.07,102.905,10
     *6.4,107.87,112.4,114.82,118.69,121.75,127.60, 126.9044,131.30,132.
     *905,137.34,138.91, 140.12,140.907,144.24,147.,150.35,151.98,157.25
     *,158.924,162.50, 164.930,167.26,168.934,173.04,174.97,178.49,180.9
     *48,183.85, 186.2,190.2,192.2,195.08,196.987,200.59,204.37,207.19,2
     *08.980, 210.,210.,222.,223.,226.,227.,232.036,231.,238.03,237.,242
     *., 243.,247.,247.,248.,254.,253./
      DATA RHOTBL/0.0808,0.19,0.534,1.85,2.5,2.26,1.14,1.568,1.5,1.0, 0.
     *9712,1.74,2.702,2.4,1.82,2.07,2.2,1.65,0.86,1.55,3.02,4.54, 5.87,7
     *.14,7.3,7.86,8.71,8.90,8.9333,7.140,5.91,5.36,5.73,4.80, 4.2,3.4,1
     *.53,2.6,4.47,6.4,8.57,9.01,11.50,12.20,12.50,12.,10.5, 8.65,7.30,7
     *.31,6.684,6.24,4.93,2.7,1.873,3.5,6.15,6.90,6.769, 7.007, 1. ,7.54
     *,5.17,7.87,8.25,8.56,8.80,9.06,9.32,6.96,9.85, 11.40,16.60,19.30,2
     *0.53,22.48,22.42,21.45,19.30,14.19,11.85, 11.34,9.78,9.30, 1. ,4.,
     * 1. ,5., 1. ,11.0,15.37,18.90, 20.5,19.737,11.7,7.,1. , 1. , 1. ,
     *1. /
      DATA ASYMT/'H','HE','LI','BE','B','C','N','O','F','NE', 'NA','MG',
     *'AL','SI','P','S','CL','AR','K','CA','SC','TI', 'V','CR','MN','FE'
     *,'CO','NI','CU','ZN','GA','GE','AS','SE','BR', 'KR','RB','SR','Y',
     *'ZR','NB','MO','TC','RU','RH','PD','AG','CD', 'IN','SN','SB','TE',
     *'I','XE','CS','BA','LA','CE','PR','ND', 'PM','SM','EU','GD','TB','
     *DY','HO','ER','TM','YB','LU','HF','TA', 'W','RE','OS','IR','PT','A
     *U','HG','TL','PB','BI','PO','AT','RN', 'FR','RA','AC','TH','PA','U
     *','NP','PU','AM','CM','BK','CF','ES', 'FM'/
      DATA EPSTFLP/0/,IEPST/1/,IAPRIMP/1/,IAPRFL/0/
24300 FORMAT(1X,14I5)
24310 FORMAT(1X,1PE14.5,4E14.5)
24320 FORMAT(72A1)
      IF ((I1ST.NE.0)) THEN
        I1ST=0
        DO 24331 J=1,3000
          IF ((SMAXIR(J).LE.0.0)) THEN
            SMAXIR(J)=1E10
          END IF
24331   CONTINUE
24332   CONTINUE
        NISUB=MXSINC-2
        FNSSS=NSINSS
        WID=PI5D2/FLOAT(NISUB)
        WSS=WID/(FNSSS-1.0)
        ZEROS(1)=0.
        ZEROS(2)=PI
        ZEROS(3)=TWOPI
        DO 24341 ISUB=1,MXSINC
          SX=0.
          SY=0.
          SXX=0.
          SXY=0.
          XS0=WID*FLOAT(ISUB-2)
          XS1=XS0+WID
          IZ=0
          DO 24351 IZZ=1,3
            IF (((XS0.LE.ZEROS(IZZ)).AND.(ZEROS(IZZ).LE.XS1))) THEN
              IZ=IZZ
              GO TO24352
            END IF
24351     CONTINUE
24352     CONTINUE
          IF ((IZ.EQ.0)) THEN
            XSI=XS0
          ELSE
            XSI=ZEROS(IZ)
          END IF
          DO 24361 ISS=1,NSINSS
            XS=WID*FLOAT(ISUB-2)+WSS*FLOAT(ISS-1)-XSI
            YS=SIN(XS+XSI)
            SX=SX+XS
            SY=SY+YS
            SXX=SXX+XS*XS
            SXY=SXY+XS*YS
24361     CONTINUE
24362     CONTINUE
          IF ((IZ.NE.0)) THEN
            SIN1(ISUB)=SXY/SXX
            SIN0(ISUB)=-SIN1(ISUB)*XSI
          ELSE
            DEL=FNSSS*SXX-SX*SX
            SIN1(ISUB)=(FNSSS*SXY-SY*SX)/DEL
            SIN0(ISUB)=(SY*SXX-SX*SXY)/DEL - SIN1(ISUB)*XSI
          END IF
24341   CONTINUE
24342   CONTINUE
        SINC0=2.0
        SINC1=1.0/WID
        IF ((ISTEST.NE.0)) THEN
          ADEV=0.
          RDEV=0.
          S2C2MN=10.
          S2C2MX=0.
          DO 24371 ISUB=1,NISUB
            DO 24381 ISS=1,NSINSS
              THETA=WID*FLOAT(ISUB-1)+WSS*FLOAT(ISS-1)
              CTHET=PI5D2-THETA
              SINTHE=sin(THETA)
              COSTHE=sin(CTHET)
              SINT=SIN(THETA)
              COST=COS(THETA)
              ASD=ABS(SINTHE-SINT)
              ACD=ABS(COSTHE-COST)
              ADEV=max(ADEV,ASD,ACD)
              IF((SINT.NE.0.0))RDEV=max(RDEV,ASD/ABS(SINT))
              IF((COST.NE.0.0))RDEV=max(RDEV,ACD/ABS(COST))
              S2C2=SINTHE**2+COSTHE**2
              S2C2MN=min(S2C2MN,S2C2)
              S2C2MX=max(S2C2MX,S2C2)
              IF ((ISUB.LT.11)) THEN
                write(i_log,'(1PE20.7,4E20.7)') THETA,SINTHE,SINT,COSTHE
     *          ,COST
              END IF
24381       CONTINUE
24382       CONTINUE
24371     CONTINUE
24372     CONTINUE
          write(i_log,'(a,2i5)') ' SINE TESTS,MXSINC,NSINSS=',MXSINC,NSI
     *    NSS
          write(i_log,'(a,1PE16.8,3e16.8)') ' ADEV,RDEV,S2C2(MN,MX) =',
     *    ADEV,RDEV,S2C2MN,S2C2MX
          ADEV=0.
          RDEV=0.
          S2C2MN=10.
          S2C2MX=0.
          DO 24391 IRN=1,NRNA
            IF((rng_seed .GT. 128))call ranmar_get
            THETA = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            THETA=THETA*PI5D2
            CTHET=PI5D2-THETA
            SINTHE=sin(THETA)
            COSTHE=sin(CTHET)
            SINT=SIN(THETA)
            COST=COS(THETA)
            ASD=ABS(SINTHE-SINT)
            ACD=ABS(COSTHE-COST)
            ADEV=max(ADEV,ASD,ACD)
            IF((SINT.NE.0.0))RDEV=max(RDEV,ASD/ABS(SINT))
            IF((COST.NE.0.0))RDEV=max(RDEV,ACD/ABS(COST))
            S2C2=SINTHE**2+COSTHE**2
            S2C2MN=min(S2C2MN,S2C2)
            S2C2MX=max(S2C2MX,S2C2)
24391     CONTINUE
24392     CONTINUE
          write(i_log,'(a,i7,a)') ' TEST AT ',NRNA,' RANDOM ANGLES IN (0
     *,5*PI/2)'
          write(i_log,'(1PE16.8,3E16.8)') ' ADEV,RDEV,S2C2(MN,MX) =', AD
     *    EV,RDEV,S2C2MN,S2C2MX
        END IF
        P=1.
        DO 24401 I=1,50
          PWR2I(I)=P
          P=P/2.
24401   CONTINUE
24402   CONTINUE
      END IF
      DO 24411 J=1,NMED
24420   CONTINUE
          DO 24421 I=1,3000
          IF ((IRAYLR(I).EQ.1.AND.MED(I).EQ.J)) THEN
            IRAYLM(J)=1
            GO TO 24422
          END IF
24421   CONTINUE
24422   CONTINUE
24411 CONTINUE
24412 CONTINUE
      IPHOTONUC=0
      DO 24431 J=1,NMED
24440   CONTINUE
          DO 24441 I=1,3000
          IF ((IPHOTONUCR(I).EQ.1.AND.MED(I).EQ.J)) THEN
            IPHOTONUCM(J)=1
            IPHOTONUC=1
            GO TO 24442
          END IF
24441   CONTINUE
24442   CONTINUE
24431 CONTINUE
24432 CONTINUE
      write(i_log,'(a,i3)') ' ===> Photonuclear flag: ', iphotonuc
      IF((.NOT.is_pegsless))REWIND KMPI
      NM=0
      DO 24451 IM=1,NMED
        LOK(IM)=0
        IF ((IRAYLM(IM).EQ.1)) THEN
          write(i_log,'(a,i3/)') ' RAYLEIGH OPTION REQUESTED FOR MEDIUM
     *NUMBER',IM
        END IF
24451 CONTINUE
24452 CONTINUE
      DO 24461 IM=1,NMED
        IF ((IPHOTONUCM(IM).EQ.1)) THEN
          write(i_log,'(a,i3/)') ' PHOTONUCLEAR REQUESTED FOR MEDIUM NUM
     *BER',IM
        END IF
24461 CONTINUE
24462 CONTINUE
      IF ((.NOT.is_pegsless)) THEN
24470   CONTINUE
24471     CONTINUE
24480     CONTINUE
24481       CONTINUE
            READ(KMPI,24320,END=24490)MBUF
            DO 24501 IB=1,LMDL
              IF((MBUF(IB).NE.MDLABL(IB)))GO TO 24481
24501       CONTINUE
24502       CONTINUE
24510       CONTINUE
              DO 24511 IM=1,NMED
              DO 24521 IB=1,LMDN
                IL=LMDL+IB
                IF((MBUF(IL).NE.MEDIA(IB,IM)))GO TO 24511
                IF((IB.EQ.LMDN))GO TO 24482
24521         CONTINUE
24522         CONTINUE
24511       CONTINUE
24512       CONTINUE
          GO TO 24481
24482     CONTINUE
          IF((LOK(IM).NE.0))GO TO 24480
          LOK(IM)=1
          NM=NM+1
          read(kmpi,'(a)',err=24530) tmp_string
          goto 24540
24530     write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'Error while reading pegs4 file'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
24540     CONTINUE
          read(tmp_string,1,ERR=24550)  (MBUF(I),I=1,5),RHO(IM),NNE(IM),
     *    IUNRST(IM),EPSTFL(IM),IAPRIM(IM)
1         FORMAT(5A1,5X,F11.0,4X,I2,9X,I1,9X,I1,9X,I1)
          GO TO 24560
24550     CONTINUE
          write(i_log,*) 'Found medium with gas pressure'
          read(tmp_string,2) (MBUF(I),I=1,5),RHO(IM),NNE(IM),IUNRST(IM),
     *    EPSTFL(IM), IAPRIM(IM)
2         FORMAT(5A1,5X,F11.0,4X,I2,26X,I1,9X,I1,9X,I1)
24560     CONTINUE
            DO 24561 IE=1,NNE(IM)
            READ(KMPI,24570)(MBUF(I),I=1,6),(ASYM(IM,IE,I),I=1,2), ZELEM
     *      (IM,IE),WA(IM,IE),PZ(IM,IE),RHOZ(IM,IE)
24570       FORMAT (6A1,2A1,3X,F3.0,3X,F9.0,4X,F12.0,6X,F12.0)
24561     CONTINUE
24562     CONTINUE
          READ(KMPI,24310) RLC(IM),AE(IM),AP(IM),UE(IM),UP(IM)
          TE(IM)=AE(IM)-RM
          THMOLL(IM)=TE(IM)*2. + RM
          READ(KMPI,24300) MSGE(IM),MGE(IM),MSEKE(IM),MEKE(IM),MLEKE(IM)
     *    ,MCMFP(IM),MRANGE(IM),IRAYL
          NSGE=MSGE(IM)
          NGE=MGE(IM)
          NSEKE=MSEKE(IM)
          NEKE=MEKE(IM)
          NLEKE=MLEKE(IM)
          NCMFP=MCMFP(IM)
          NRANGE=MRANGE(IM)
          READ(KMPI,24310)(DL1(I,IM),DL2(I,IM),DL3(I,IM),DL4(I,IM),DL5(I
     *    ,IM),DL6(I,IM),I=1,6)
          READ(KMPI,24310)DELCM(IM),(ALPHI(I,IM),BPAR(I,IM),DELPOS(I,IM)
     *    ,I=1,2)
          READ(KMPI,24310)XR0(IM),TEFF0(IM),BLCC(IM),XCC(IM)
          READ(KMPI,24310)EKE0(IM),EKE1(IM)
          READ(KMPI,24310) (ESIG0(I,IM),ESIG1(I,IM),PSIG0(I,IM),PSIG1(I,
     *    IM),EDEDX0(I,IM),EDEDX1(I,IM),PDEDX0(I,IM),PDEDX1(I,IM),EBR10(
     *    I,IM),EBR11(I,IM),PBR10(I,IM),PBR11(I,IM),PBR20(I,IM),PBR21(I,
     *    IM),TMXS0(I,IM),TMXS1(I,IM),I=1,NEKE)
          READ(KMPI,24310)EBINDA(IM),GE0(IM),GE1(IM)
          READ(KMPI,24310)(GMFP0(I,IM),GMFP1(I,IM),GBR10(I,IM),GBR11(I,I
     *    M),GBR20(I,IM),GBR21(I,IM),I=1,NGE)
          IF ((IRAYL.EQ.1)) THEN
            READ(KMPI,24300) NGR(IM)
            NGRIM=NGR(IM)
            READ(KMPI,24310)RCO0(IM),RCO1(IM)
            READ(KMPI,24310)(RSCT0(I,IM),RSCT1(I,IM),I=1,NGRIM)
            READ(KMPI,24310)(COHE0(I,IM),COHE1(I,IM),I=1,NGE)
            write(i_log,'(a,i3,a)') ' Rayleigh data available for medium
     *', IM, ' in PEGS4 data set.'
          END IF
          IF ((IRAYLM(IM).EQ.1)) THEN
            IF ((IRAYL.NE.1)) THEN
              IF ((toUpper(photon_xsections(:lnblnk1(photon_xsections)))
     *        .EQ.'PEGS4')) THEN
                write(i_log,'(/a)') '***************** Error: '
                write(i_log,'(a,i3 /,a /,a)') ' IN HATCH: REQUESTED RAYL
     *EIGH OPTION FOR MEDIUM', IM,' BUT RAYLEIGH DATA NOT INCLUDED IN PE
     *GS4 FILE.', ' YOU WILL NOT BE ABLE TO USE THE PEGS4 DATA WITH RAYL
     *EIGH ON!'
                write(i_log,'(/a)') '***************** Quiting now.'
                call exit(1)
              ELSE
                write(i_log,'(/a)') '***************** Warning: '
                write(i_log,'(a,i3 /,a)') ' IN HATCH: REQUESTED RAYLEIGH
     * OPTION FOR MEDIUM', IM,' BUT RAYLEIGH DATA NOT INCLUDED IN PEGS4
     *FILE.'
              END IF
            ELSE
              IF ((toUpper(photon_xsections(:lnblnk1(photon_xsections)))
     *        .EQ.'PEGS4')) THEN
                call egs_init_rayleigh_sampling(IM)
              END IF
            END IF
          END IF
          IF((NM.GE.NMED))GO TO24472
        GO TO 24471
24472   CONTINUE
        CLOSE (UNIT=KMPI)
        DUNITR=DUNIT
        IF ((DUNIT.LT.0.0)) THEN
          ID=MAX0(1,MIN0(12,int(-DUNIT)))
          DUNIT=RLC(ID)
        END IF
        IF ((DUNIT.NE.1.0)) THEN
          write(i_log,'(a,1PE14.5,E14.5,a)') ' DUNIT REQUESTED&USED ARE:
     * ', DUNITR,DUNIT,'(CM.)'
        END IF
        DO 24581 IM=1,NMED
          DFACT=RLC(IM)/DUNIT
          DFACTI=1.0/DFACT
          I=1
            GO TO 24593
24591       I=I+1
24593       IF(I-(MEKE(IM)).GT.0)GO TO 24592
            ESIG0(I,IM)=ESIG0(I,IM)*DFACTI
            ESIG1(I,IM)=ESIG1(I,IM)*DFACTI
            PSIG0(I,IM)=PSIG0(I,IM)*DFACTI
            PSIG1(I,IM)=PSIG1(I,IM)*DFACTI
            EDEDX0(I,IM)=EDEDX0(I,IM)*DFACTI
            EDEDX1(I,IM)=EDEDX1(I,IM)*DFACTI
            PDEDX0(I,IM)=PDEDX0(I,IM)*DFACTI
            PDEDX1(I,IM)=PDEDX1(I,IM)*DFACTI
            TMXS0(I,IM)=TMXS0(I,IM)*DFACT
            TMXS1(I,IM)=TMXS1(I,IM)*DFACT
          GO TO 24591
24592     CONTINUE
          TEFF0(IM)=TEFF0(IM)*DFACT
          BLCC(IM)=BLCC(IM)*DFACTI
          XCC(IM)=XCC(IM)*SQRT(DFACTI)
          RLDU(IM)=RLC(IM)/DUNIT
          I=1
            GO TO 24603
24601       I=I+1
24603       IF(I-(MGE(IM)).GT.0)GO TO 24602
            GMFP0(I,IM)=GMFP0(I,IM)*DFACT
            GMFP1(I,IM)=GMFP1(I,IM)*DFACT
          GO TO 24601
24602     CONTINUE
24581   CONTINUE
24582   CONTINUE
        VACDST=VACDST*DUNITO/DUNIT
        DUNITO=DUNIT
      ELSE
        write(i_log,*) ' PEGSLESS INPUT.  CALCULATING ELECTRON CROSS-SEC
     *TIONS.'
        call get_media_inputs(-1)
        DO 24611 IM=1,NMED
          AEP=AE(IM)
          UEP=UE(IM)
          APP=AP(IM)
          UPP=UP(IM)
          NEP=NNE(IM)
          IUNRSTP=IUNRST(IM)
          IAPRIMP=IAPRIM(IM)
          EPSTFLP=EPSTFL(IM)
          GASPP=INPGASP(IM)
          RHOP=RHO(IM)
          DO 24621 J=1,NEP
            ZELEMP(J)=ZELEM(IM,J)
            PZP(J)=PZ4(IM,J)
            RHOZP(J)=RHOZ4(IM,J)
            WAP(J)=WA4(IM,J)
24621     CONTINUE
24622     CONTINUE
          DO 24631 IB=1,LMDN
            IDSTRN(IB)=INPSTRN(IB,IM)
24631     CONTINUE
24632     CONTINUE
          TEP=AEP-RMP
          THMOLLP=AEP+TEP
          IF ((UEP.LE.AEP)) THEN
            write(i_log,'(a,24a1)')'  Error: Material not defined: ', (m
     *      edia(j,IM),j=1,24)
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,*) 'Material used in the geometry was not define
     *d in the' ,' material data.'
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          CALL MIX
          CALL SPINIT(inpdensity_file(IM))
          CALL DIFFER
          CALL PWLF1(NEL,NALE,AEP,UEP,THMOLLP,EPE,ZTHRE,ZEPE,NIPE,ALKE,
     *    ALKEI,AXE,BXE,500,8,AFE,BFE,EFUNS)
          TE(IM)=AE(IM)-RM
          THMOLL(IM)=TE(IM)*2. + RM
          RLC(IM)=RLCP
          XCC(IM)=XCCP
          BLCC(IM)=BLCCP
          XR0(IM)=XR0P
          TEFF0(IM)=TEFF0P
          DELCM(IM)=DELCMP
          DO 24641 I=1,2
            ALPHI(I,IM)=ALPHIP(I)
            BPAR(I,IM)=BPARP(I)
            DELPOS(I,IM)=DELPOSP(I)
24641     CONTINUE
24642     CONTINUE
          DO 24651 I=1,6
            DL1(I,IM)=DLP1(I)
            DL2(I,IM)=DLP2(I)
            DL3(I,IM)=DLP3(I)
            DL4(I,IM)=DLP4(I)
            DL5(I,IM)=DLP5(I)
            DL6(I,IM)=DLP6(I)
24651     CONTINUE
24652     CONTINUE
          MSGE(IM)=0
          MSEKE(IM)=0
          MLEKE(IM)=0
          MCMFP(IM)=0
          MRANGE(IM)=0
          MGE(IM)=2000
          MEKE(IM)=NEL
          NSGE=MSGE(IM)
          NGE=MGE(IM)
          NSEKE=MSEKE(IM)
          NEKE=MEKE(IM)
          NLEKE=MLEKE(IM)
          NCMFP=MCMFP(IM)
          NRANGE=MRANGE(IM)
          EKE0(IM)=BXE
          EKE1(IM)=AXE
          DO 24661 I=1,NEKE
            ESIG0(I,IM)=BFE(I,1)
            ESIG1(I,IM)=AFE(I,1)
            PSIG0(I,IM)=BFE(I,2)
            PSIG1(I,IM)=AFE(I,2)
            EDEDX0(I,IM)=BFE(I,3)
            EDEDX1(I,IM)=AFE(I,3)
            PDEDX0(I,IM)=BFE(I,4)
            PDEDX1(I,IM)=AFE(I,4)
            EBR10(I,IM)=BFE(I,5)
            EBR11(I,IM)=AFE(I,5)
            PBR10(I,IM)=BFE(I,6)
            PBR11(I,IM)=AFE(I,6)
            PBR20(I,IM)=BFE(I,7)
            PBR21(I,IM)=AFE(I,7)
            TMXS0(I,IM)=BFE(I,8)
            TMXS1(I,IM)=AFE(I,8)
24661     CONTINUE
24662     CONTINUE
24611   CONTINUE
24612   CONTINUE
        DUNITR=DUNIT
        IF ((DUNIT.LT.0.0)) THEN
          ID=MAX0(1,MIN0(12,int(-DUNIT)))
          DUNIT=RLC(ID)
        END IF
        IF ((DUNIT.NE.1.0)) THEN
          write(i_log,'(a,1PE14.5,E14.5,a)') ' DUNIT REQUESTED&USED ARE:
     * ', DUNITR,DUNIT,'(CM.)'
        END IF
        DO 24671 IM=1,NMED
          DFACT=RLC(IM)/DUNIT
          DFACTI=1.0/DFACT
          I=1
            GO TO 24683
24681       I=I+1
24683       IF(I-(MEKE(IM)).GT.0)GO TO 24682
            ESIG0(I,IM)=ESIG0(I,IM)*DFACTI
            ESIG1(I,IM)=ESIG1(I,IM)*DFACTI
            PSIG0(I,IM)=PSIG0(I,IM)*DFACTI
            PSIG1(I,IM)=PSIG1(I,IM)*DFACTI
            EDEDX0(I,IM)=EDEDX0(I,IM)*DFACTI
            EDEDX1(I,IM)=EDEDX1(I,IM)*DFACTI
            PDEDX0(I,IM)=PDEDX0(I,IM)*DFACTI
            PDEDX1(I,IM)=PDEDX1(I,IM)*DFACTI
            TMXS0(I,IM)=TMXS0(I,IM)*DFACT
            TMXS1(I,IM)=TMXS1(I,IM)*DFACT
          GO TO 24681
24682     CONTINUE
          TEFF0(IM)=TEFF0(IM)*DFACT
          BLCC(IM)=BLCC(IM)*DFACTI
          XCC(IM)=XCC(IM)*SQRT(DFACTI)
          RLDU(IM)=RLC(IM)/DUNIT
          I=1
            GO TO 24693
24691       I=I+1
24693       IF(I-(MGE(IM)).GT.0)GO TO 24692
            GMFP0(I,IM)=GMFP0(I,IM)*DFACT
            GMFP1(I,IM)=GMFP1(I,IM)*DFACT
          GO TO 24691
24692     CONTINUE
24671   CONTINUE
24672   CONTINUE
        VACDST=VACDST*DUNITO/DUNIT
        DUNITO=DUNIT
        call show_media_parameters(i_log)
      END IF
      DO 24701 JR=1,3000
        MD=MED(JR)
        IF (((MD.GE.1).AND.(MD.LE.NMED))) THEN
          ECUT(JR)=max(ECUT(JR),AE(MD))
          PCUT(JR)=max(PCUT(JR),AP(MD))
          IF ((RHOR(JR).EQ.0.0)) THEN
            RHOR(JR)=RHO(MD)
          END IF
        END IF
24701 CONTINUE
24702 CONTINUE
      IF ((IBRDST.EQ.1)) THEN
        DO 24711 IM=1,NMED
          ZBRANG(IM)=0.0
          PZNORM=0.0
          DO 24721 IE=1,NNE(IM)
            ZBRANG(IM)= ZBRANG(IM)+PZ(IM,IE)*ZELEM(IM,IE)*(ZELEM(IM,IE)+
     *      1.0)
            PZNORM=PZNORM+PZ(IM,IE)
24721     CONTINUE
24722     CONTINUE
          ZBRANG(IM)=(8.116224E-05)*(ZBRANG(IM)/PZNORM)**(1./3.)
          LZBRANG(IM)=-log(ZBRANG(IM))
24711   CONTINUE
24712   CONTINUE
      END IF
      IF ((IPRDST.GT.0)) THEN
        DO 24731 IM=1,NMED
          ZBRANG(IM)=0.0
          PZNORM=0.0
          DO 24741 IE=1,NNE(IM)
            ZBRANG(IM)= ZBRANG(IM)+PZ(IM,IE)*ZELEM(IM,IE)*(ZELEM(IM,IE)+
     *      1.0)
            PZNORM=PZNORM+PZ(IM,IE)
24741     CONTINUE
24742     CONTINUE
          ZBRANG(IM)=(8.116224E-05)*(ZBRANG(IM)/PZNORM)**(1./3.)
24731   CONTINUE
24732   CONTINUE
      END IF
      IF ((toUpper(photon_xsections(:lnblnk1(photon_xsections))) .EQ. 'P
     *EGS4')) THEN
        write(i_log,'(/a)') '***************** Warning: '
        write(i_log,'(6(a/))') 'Using photon data from PEGS4 file!!!', '
     *However, the new Rayleigh angular sampling will be used.', 'The or
     *iginal EGS4 angular sampling undersamples large scattering ', 'ang
     *les. This may have little impact as Rayleigh scattering ', 'is for
     *ward peaked.', '**************************************************
     ********'
      ELSE
        call egs_init_user_photon(photon_xsections,comp_xsections, photo
     *  nuc_xsections,xsec_out)
      END IF
      call mscati
      IF (( eadl_relax .AND. photon_xsections .EQ. 'xcom' )) THEN
        call init_compton
        call EDGSET(1,1)
      ELSE
        call EDGSET(1,1)
        call init_compton
      END IF
      IF (( xsec_out .EQ. 1 .AND. eadl_relax)) THEN
        call egs_print_binding_energies
      END IF
      call fix_brems
      IF (( ibr_nist .GE. 1 )) THEN
        call init_nist_brems
      END IF
      IF (( pair_nrc .EQ. 1 )) THEN
        call init_nrc_pair
      END IF
      call eii_init
      call init_triplet
      IF ((NMED.EQ.1)) THEN
        write(i_log,*) 'EGSnrc SUCCESSFULLY ''HATCHED'' FOR ONE MEDIUM.'
      ELSE
        write(i_log,'(a,i5,a)') 'EGSnrc SUCCESSFULLY ''HATCHED'' FOR ',N
     *  MED,' MEDIA.'
      END IF
      RETURN
24490 write(i_log,'(a,i2//,a/,a/)') ' END OF FILE ON UNIT ',KMPI, ' PROG
     *RAM STOPPED IN HATCH BECAUSE THE', ' FOLLOWING NAMES WERE NOT RECO
     *GNIZED:'
      DO 24751 IM=1,NMED
        IF ((LOK(IM).NE.1)) THEN
          write(i_log,'(40x,a,24a1,a)') '''',(MEDIA(I,IM),I=1,LMDN),''''
        END IF
24751 CONTINUE
24752 CONTINUE
      STOP
      END
      subroutine fix_brems
      implicit none
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      common/nist_brems/ nb_fdata(0:50,100,12), nb_xdata(0:50,100,12), n
     *b_wdata(50,100,12), nb_idata(50,100,12), nb_emin(12),nb_emax(12),
     *nb_lemin(12),nb_lemax(12), nb_dle(12),nb_dlei(12), log_ap(12)
      real*8 nb_fdata,nb_xdata,nb_wdata,nb_emin,nb_emax,nb_lemin,nb_lema
     *x, nb_dle,nb_dlei,log_ap
      integer*4 nb_idata
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      integer*4 medium,i
      real*8 Zt,Zb,Zf,Zg,Zv,fmax1,fmax2,Zi,pi,fc,xi,aux, XSIF,FCOULC
      DO 24761 medium=1,nmed
        log_ap(medium) = log(ap(medium))
        Zt = 0
        Zb = 0
        Zf = 0
        DO 24771 i=1,NNE(medium)
          Zi = ZELEM(medium,i)
          pi = PZ(medium,i)
          fc = FCOULC(Zi)
          xi = XSIF(Zi)
          aux = pi*Zi*(Zi + xi)
          Zt = Zt + aux
          Zb = Zb - aux*Log(Zi)/3
          Zf = Zf + aux*fc
24771   CONTINUE
24772   CONTINUE
        Zv = (Zb - Zf)/Zt
        Zg = Zb/Zt
        fmax1 = 2*(20.863 + 4*Zg) - 2*(20.029 + 4*Zg)/3
        fmax2 = 2*(20.863 + 4*Zv) - 2*(20.029 + 4*Zv)/3
        dl1(1,medium) = (20.863 + 4*Zg)/fmax1
        dl2(1,medium) = -3.242/fmax1
        dl3(1,medium) = 0.625/fmax1
        dl4(1,medium) = (21.12+4*Zg)/fmax1
        dl5(1,medium) = -4.184/fmax1
        dl6(1,medium) = 0.952
        dl1(2,medium) = (20.029+4*Zg)/fmax1
        dl2(2,medium) = -1.93/fmax1
        dl3(2,medium) = -0.086/fmax1
        dl4(2,medium) = (21.12+4*Zg)/fmax1
        dl5(2,medium) = -4.184/fmax1
        dl6(2,medium) = 0.952
        dl1(3,medium) = (20.863 + 4*Zv)/fmax2
        dl2(3,medium) = -3.242/fmax2
        dl3(3,medium) = 0.625/fmax2
        dl4(3,medium) = (21.12+4*Zv)/fmax2
        dl5(3,medium) = -4.184/fmax2
        dl6(3,medium) = 0.952
        dl1(4,medium) = (20.029+4*Zv)/fmax2
        dl2(4,medium) = -1.93/fmax2
        dl3(4,medium) = -0.086/fmax2
        dl4(4,medium) = (21.12+4*Zv)/fmax2
        dl5(4,medium) = -4.184/fmax2
        dl6(4,medium) = 0.952
        dl1(5,medium) = (3*(20.863 + 4*Zg) - (20.029 + 4*Zg))
        dl2(5,medium) = (3*(-3.242) - (-1.930))
        dl3(5,medium) = (3*(0.625)-(-0.086))
        dl4(5,medium) = (2*21.12+8*Zg)
        dl5(5,medium) = (2*(-4.184))
        dl6(5,medium) = 0.952
        dl1(6,medium) = (3*(20.863 + 4*Zg) + (20.029 + 4*Zg))
        dl2(6,medium) = (3*(-3.242) + (-1.930))
        dl3(6,medium) = (3*0.625+(-0.086))
        dl4(6,medium) = (4*21.12+16*Zg)
        dl5(6,medium) = (4*(-4.184))
        dl6(6,medium) = 0.952
        dl1(7,medium) = (3*(20.863 + 4*Zv) - (20.029 + 4*Zv))
        dl2(7,medium) = (3*(-3.242) - (-1.930))
        dl3(7,medium) = (3*(0.625)-(-0.086))
        dl4(7,medium) = (2*21.12+8*Zv)
        dl5(7,medium) = (2*(-4.184))
        dl6(7,medium) = 0.952
        dl1(8,medium) = (3*(20.863 + 4*Zv) + (20.029 + 4*Zv))
        dl2(8,medium) = (3*(-3.242) + (-1.930))
        dl3(8,medium) = (3*0.625+(-0.086))
        dl4(8,medium) = (4*21.12+16*Zv)
        dl5(8,medium) = (4*(-4.184))
        dl6(8,medium) = 0.952
        bpar(2,medium) = dl1(7,medium)/(3*dl1(8,medium) + dl1(7,medium))
        bpar(1,medium) = 12*dl1(8,medium)/(3*dl1(8,medium) + dl1(7,mediu
     *  m))
24761 CONTINUE
24762 CONTINUE
      return
      end
      real*8 function FCOULC(Z)
      implicit none
      real*8 Z
      real*8 fine,asq
      data fine/137.03604/
      asq = Z/fine
      asq = asq*asq
      FCOULC = asq*(1.0/(1.0+ASQ)+0.20206+ASQ*(-0.0369+ASQ*(0.0083+ASQ*(
     *-0.002))))
      return
      end
      real*8 function XSIF(Z)
      implicit none
      real*8 Z
      integer*4 iZ
      real*8 alrad(4),alradp(4),a1440,a183,FCOULC
      data alrad/5.31,4.79,4.74,4.71/
      data alradp/6.144,5.621,5.805,5.924/
      data a1440/1194.0/,A183/184.15/
      IF (( Z .LE. 4 )) THEN
        iZ = Z
        xsif = alradp(iZ)/(alrad(iZ) - FCOULC(Z))
      ELSE
        xsif = Log(A1440*Z**(-0.666667))/(Log(A183*Z**(-0.33333))-FCOULC
     *  (Z))
      END IF
      return
      end
      subroutine init_compton
      implicit none
      common/compton_data/ iz_array(1538),  be_array(1538),  Jo_array(15
     *38),  erfJo_array(1538),   ne_array(1538),  shn_array(1538),
     *shell_array(200,12), eno_array(200,12), eno_atbin_array(200,12), n
     *_shell(12), radc_flag,  ibcmp(3000)
      integer*4 iz_array,ne_array,shn_array,eno_atbin_array, shell_array
     *,n_shell,radc_flag
      real*8 be_array,Jo_array,erfJo_array,eno_array
      integer*2 ibcmp
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L(3000),IPHTER(3000)
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/x_options/eadl_relax,  mcdf_pe_xsections
      logical eadl_relax, mcdf_pe_xsections
      integer*4 i,j,iz,nsh,j_l,j_h
      real*8 aux,pztot,atav
      real*8 aux_erf,erf1
      logical getd
      IF (( radc_flag .EQ. 1 )) THEN
        write(i_log,'(/a)') '***************** Warning: '
        write(i_log,*) 'You are trying to use radiative Compton correcti
     *ons'
        write(i_log,*) 'without having included rad_compton1.mortran'
        write(i_log,'(a//)') 'Turning radiative Compton corrections OFF
     *...'
        radc_flag = 0
      END IF
      getd = .false.
      DO 24781 j=1,3000
        medium = med(j)
        IF (( medium .GT. 0 .AND. medium .LE. nmed)) THEN
          IF (( ibcmp(j) .GT. 0 )) THEN
            getd = .true.
            GO TO24782
          END IF
        END IF
24781 CONTINUE
24782 CONTINUE
      IF (( .NOT.getd )) THEN
        IF (( eadl_relax .AND. photon_xsections .EQ. 'xcom' )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(a,/a,/a)') 'You must turn ON Compton binding cor
     *rections when using', 'a detailed atomic relaxation (eadl_relax=tr
     *ue) since ', 'binding energies taken from incoh.data below 1 keV!'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        write(i_log,'(a/)') ' Bound Compton scattering not requested! '
        return
      END IF
      write(i_log,'(/a$)') 'Bound Compton scattering requested, reading
     *data ......'
      rewind(i_incoh)
      DO 24791 j=1,18
        read(i_incoh,*)
24791 CONTINUE
24792 CONTINUE
      iz = 0
      DO 24801 j=1,1538
        read(i_incoh,*) iz_array(j),shn_array(j),ne_array(j), Jo_array(j
     *  ),be_array(j)
        Jo_array(j) = Jo_array(j)*137.
        be_array(j) = be_array(j)*1e-6/PRM
        aux_erf = 0.70710678119*(1+0.3*Jo_array(j))
        erfJo_array(j) = 0.82436063535*(erf1(aux_erf)-1)
        IF ((eadl_relax)) THEN
          IF ((iz_array(j) .NE. iz)) THEN
            shn_array(j) = 1
            iz = iz_array(j)
          ELSE
            shn_array(j) = shn_array(j-1)+1
          END IF
          IF ((binding_energies(shn_array(j),iz_array(j)) .GT. 0)) THEN
            be_array(j) = binding_energies(shn_array(j),iz_array(j))/PRM
          ELSE IF((photon_xsections .EQ. 'xcom')) THEN
            binding_energies(shn_array(j),iz_array(j)) = be_array(j)*PRM
          END IF
        END IF
24801 CONTINUE
24802 CONTINUE
      write(i_log,*) ' Done'
      write(i_log,'(/a)') ' Initializing Bound Compton scattering ......
     *'
      DO 24811 medium=1,nmed
        pztot = 0
        nsh = 0
        DO 24821 i=1,nne(medium)
          iz = int(zelem(medium,i))
          DO 24831 j=1,1538
            IF (( iz .EQ. iz_array(j) )) THEN
              nsh = nsh + 1
              IF (( nsh .GT. 200 )) THEN
                write(i_log,'(/a)') '***************** Error: '
                write(i_log,'(/a,i3,a,i4,a/,a)') ' For medium ',medium,
     *          ' the number of shells is > ',200,'!', ' Increase the pa
     *rameter $MXMDSH! '
                write(i_log,'(/a)') '***************** Quiting now.'
                call exit(1)
              END IF
              shell_array(nsh,medium) = j
              aux = pz(medium,i)*ne_array(j)
              eno_array(nsh,medium) = aux
              pztot = pztot + aux
            END IF
24831     CONTINUE
24832     CONTINUE
24821   CONTINUE
24822   CONTINUE
        IF (( nsh .EQ. 0 )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(a,i3,a)') ' Medium ',medium,' has zero shells! '
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        n_shell(medium) = nsh
        write(i_log,'(a,i3,a,i3,a)') ' Medium ',medium,' has ',nsh,' she
     *lls: '
        DO 24841 i=1,nsh
          j = shell_array(i,medium)
          eno_array(i,medium) = eno_array(i,medium)/pztot
          write(i_log,'(i4,i5,i4,f9.5,e10.3,f10.3)') i,j,shn_array(j),en
     *    o_array(i,medium), Jo_array(j),be_array(j)*PRM*1000.
          eno_array(i,medium) = -eno_array(i,medium)
          eno_atbin_array(i,medium) = i
24841   CONTINUE
24842   CONTINUE
        atav = 1./nsh
        DO 24851 i=1,nsh-1
          DO 24861 j_h=1,nsh-1
            IF (( eno_array(j_h,medium) .LT. 0 )) THEN
              IF((abs(eno_array(j_h,medium)) .GT. atav))GO TO24862
            END IF
24861     CONTINUE
24862     CONTINUE
          DO 24871 j_l=1,nsh-1
            IF (( eno_array(j_l,medium) .LT. 0 )) THEN
              IF((abs(eno_array(j_l,medium)) .LT. atav))GO TO24872
            END IF
24871     CONTINUE
24872     CONTINUE
          aux = atav - abs(eno_array(j_l,medium))
          eno_array(j_h,medium) = eno_array(j_h,medium) + aux
          eno_array(j_l,medium) = -eno_array(j_l,medium)/atav + j_l
          eno_atbin_array(j_l,medium) = j_h
          IF((i .EQ. nsh-1))eno_array(j_h,medium) = 1 + j_h
24851   CONTINUE
24852   CONTINUE
        DO 24881 i=1,nsh
          IF (( eno_array(i,medium) .LT. 0 )) THEN
            eno_array(i,medium) = 1 + i
          END IF
24881   CONTINUE
24882   CONTINUE
24811 CONTINUE
24812 CONTINUE
      write(i_log,'(a/)') ' ...... Done.'
      getd = .false.
      DO 24891 j=1,3000
        IF (( iedgfl(j) .GT. 0 .AND. iedgfl(j) .LE. 100 )) THEN
          getd = .true.
          GO TO24892
        END IF
24891 CONTINUE
24892 CONTINUE
      IF((getd))return
      write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(/a,/a,/a,/a)') ' In subroutine init_compton: ', '
     *Scattering off bound electrons creates atomic vacancies,', '   pot
     *entially starting an atomic relaxation cascade. ', '   Please turn
     * ON atomic relaxations.'
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      return
      end
      SUBROUTINE MOLLER
      implicit none
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/egs_vr/ e_max_rr(3000),  prob_RR,  nbr_split,  i_play_RR,
     *    i_survived_RR,
     *        n_RR_warning,                                        i_do_
     *rr(3000)
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common/eii_data/ eii_xsection_a( 10000),  eii_xsection_b( 10000),
     * eii_cons(12), eii_a(40),  eii_b(40),  eii_L_factor,  eii_z(40),
     *eii_sh(40),  eii_nshells(100),  eii_nsh(12),  eii_first(12,50),  e
     *ii_no(12,50),  eii_flag
      real*8 eii_xsection_a,eii_xsection_b,eii_a,eii_b,eii_cons,eii_L_fa
     *ctor
      integer*4 eii_z,eii_sh,eii_nshells
      integer*4 eii_first,eii_no
      integer*4 eii_elements,eii_flag,eii_nsh
      COMMON/ELECIN/ esig_e(12),psig_e(12), esige_max, psige_max, range_
     *ep(0:1,500,12), E_array(500,12), etae_ms0(500,12),etae_ms1(500,12)
     *,etap_ms0(500,12),etap_ms1(500,12),q1ce_ms0(500,12),q1ce_ms1(500,1
     *2),q1cp_ms0(500,12),q1cp_ms1(500,12),q2ce_ms0(500,12),q2ce_ms1(500
     *,12),q2cp_ms0(500,12),q2cp_ms1(500,12),blcce0(500,12),blcce1(500,1
     *2), EKE0(12),EKE1(12), XR0(12),TEFF0(12),BLCC(12),XCC(12), ESIG0(5
     *00,12),ESIG1(500,12),PSIG0(500,12),PSIG1(500,12),EDEDX0(500,12),ED
     *EDX1(500,12),PDEDX0(500,12),PDEDX1(500,12),EBR10(500,12),EBR11(500
     *,12),PBR10(500,12),PBR11(500,12),PBR20(500,12),PBR21(500,12),TMXS0
     *(500,12),TMXS1(500,12), expeke1(12), IUNRST(12),EPSTFL(12),IAPRIM(
     *12), sig_ismonotone(0:1,12)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L(3000),IPHTER(3000)
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      DOUBLE PRECISION PEIE,  PEKSE2,  PESE1,  PESE2,  PEKIN,  H1,  DCOS
     *TH
      real*8 EIE,  EKIN,  T0,  E0,  EXTRAE,  E02,  EP0,  G2,G3,  GMAX,
     *BR,  R,  REJF4,  RNNO27,  RNNO28,  ESE1,  ESE2
      real*8 sigm,pbrem,rsh,Uj,sig_j
      integer*4 lelke,iele,ish,nsh,ifirst,i,jj,iZ,iarg
      NPold = NP
      PEIE=E(NP)
      EIE=PEIE
      PEKIN=PEIE-PRM
      EKIN=PEKIN
      IF (( eii_flag .GT. 0 .AND. eii_nsh(medium) .GT. 0 )) THEN
        Lelke=eke1(MEDIUM)*elke+eke0(MEDIUM)
        sigm=esig1(Lelke,MEDIUM)*elke+esig0(Lelke,MEDIUM)
        pbrem=ebr11(Lelke,MEDIUM)*elke+ebr10(Lelke,MEDIUM)
        sigm = sigm*(1 - pbrem)
        IF((rng_seed .GT. 128))call ranmar_get
        rsh = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        rsh = sigm*rsh
        DO 24901 iele=1,nne(medium)
          iZ = int(zelem(medium,iele)+0.5)
          nsh = eii_no(medium,iele)
          IF (( nsh .GT. 0 )) THEN
            ifirst = eii_first(medium,iele)
            DO 24911 ish=1,nsh
              Uj = binding_energies(ish,iZ)
              IF (( ekin .GT. Uj .AND. (Uj .GT. te(medium) .OR. Uj .GT.
     *        ap(medium)) )) THEN
                jj = ifirst + ish - 1
                i = eii_a(jj)*elke + eii_b(jj) + (jj-1)*250
                sig_j = eii_xsection_a(i)*elke + eii_xsection_b(i)
                sig_j = sig_j*pz(medium,iele)*eii_cons(medium)
                rsh = rsh - sig_j
                IF (( rsh .LT. 0 )) THEN
                  iarg = 31
                  IF (( iausfl(iarg+1) .NE. 0 )) THEN
                    call ausgab(iarg)
                    IF (( wt(np) .LE. 0 )) THEN
                      np = np-1
                      return
                    END IF
                  END IF
                  call eii_sample(ish,iZ,Uj)
                  iarg = 32
                  IF (( iausfl(iarg+1) .NE. 0 )) THEN
                    call ausgab(iarg)
                    IF (( wt(np) .LE. 0 )) THEN
                      np = np-1
                      return
                    END IF
                  END IF
                  return
                END IF
              END IF
24911       CONTINUE
24912       CONTINUE
          END IF
24901   CONTINUE
24902   CONTINUE
      END IF
      IF((ekin .LE. 2*te(medium)))return
      T0=EKIN/RM
      E0=T0+1.0
      EXTRAE = EIE - THMOLL(MEDIUM)
      E02=E0*E0
      EP0=TE(MEDIUM)/EKIN
      G2=T0*T0/E02
      G3=(2.*T0+1.)/E02
      GMAX=(1.+1.25*G2)
24921 CONTINUE
        IF((rng_seed .GT. 128))call ranmar_get
        RNNO27 = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        BR = TE(MEDIUM)/(EKIN-EXTRAE*RNNO27)
        R=BR/(1.-BR)
        IF((rng_seed .GT. 128))call ranmar_get
        RNNO28 = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        REJF4=(1.+G2*BR*BR+R*(R-G3))
        RNNO28=GMAX*RNNO28
        IF((RNNO28.LE.REJF4))GO TO24922
      GO TO 24921
24922 CONTINUE
      PEKSE2=BR*EKIN
      PESE1=PEIE-PEKSE2
      PESE2=PEKSE2+PRM
      ESE1=PESE1
      ESE2=PESE2
      E(NP)=PESE1
      IF (( np+1 .GT. 10000 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','MOLLER', ' s
     *tack size exceeded! ',' $MAXSTACK = ',10000,' np = ',np+1
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      E(NP+1)=PESE2
      H1=(PEIE+PRM)/PEKIN
      DCOSTH=H1*(PESE1-PRM)/(PESE1+PRM)
      SINTHE=DSQRT(1.D0-DCOSTH)
      COSTHE=DSQRT(DCOSTH)
      CALL UPHI(2,1)
      NP=NP+1
      IQ(NP)=-1
      DCOSTH=H1*(PESE2-PRM)/(PESE2+PRM)
      SINTHE=-DSQRT(1.D0-DCOSTH)
      COSTHE=DSQRT(DCOSTH)
      CALL UPHI(3,2)
      RETURN
      END
      subroutine mscati
      implicit none
      real*8 ededx,ei,eil,eip1,eip1l,si,sip1,eke,elke,aux,ecutmn,tstbm,t
     *stbmn
      real*8 p2,beta2,dedx0,ekef,elkef,estepx,ektmp,elktmp,chi_a2
      integer*4 i,leil,leip1l,neke,lelke,lelkef,lelktmp
      logical ise_monoton, isp_monoton
      real*8 sigee,sigep,sig,sige_old,sigp_old
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/ELECIN/ esig_e(12),psig_e(12), esige_max, psige_max, range_
     *ep(0:1,500,12), E_array(500,12), etae_ms0(500,12),etae_ms1(500,12)
     *,etap_ms0(500,12),etap_ms1(500,12),q1ce_ms0(500,12),q1ce_ms1(500,1
     *2),q1cp_ms0(500,12),q1cp_ms1(500,12),q2ce_ms0(500,12),q2ce_ms1(500
     *,12),q2cp_ms0(500,12),q2cp_ms1(500,12),blcce0(500,12),blcce1(500,1
     *2), EKE0(12),EKE1(12), XR0(12),TEFF0(12),BLCC(12),XCC(12), ESIG0(5
     *00,12),ESIG1(500,12),PSIG0(500,12),PSIG1(500,12),EDEDX0(500,12),ED
     *EDX1(500,12),PDEDX0(500,12),PDEDX1(500,12),EBR10(500,12),EBR11(500
     *,12),PBR10(500,12),PBR11(500,12),PBR20(500,12),PBR21(500,12),TMXS0
     *(500,12),TMXS1(500,12), expeke1(12), IUNRST(12),EPSTFL(12),IAPRIM(
     *12), sig_ismonotone(0:1,12)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common/ET_control/ smaxir(3000),estepe,ximax,  skindepth_for_bca,t
     *ransport_algorithm, bca_algorithm,exact_bca,spin_effects
      real*8 smaxir,  estepe,  ximax,      skindepth_for_bca
      integer*4 transport_algorithm, bca_algorithm
      logical exact_bca,  spin_effects
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      IF (( bca_algorithm .EQ. 0 )) THEN
        exact_bca = .true.
      ELSE
        exact_bca = .false.
      END IF
      IF (( estepe .LE. 0 .OR. estepe .GE. 1)) THEN
        estepe = 0.25
      END IF
      IF (( ximax .LE. 0 .OR. ximax .GE. 1 )) THEN
        IF (( exact_bca )) THEN
          ximax = 0.5
        ELSE
          ximax = 0.5
        END IF
      END IF
      IF ((transport_algorithm .NE. 0 .AND. transport_algorithm .NE. 1 .
     *AND. transport_algorithm .NE. 2 )) THEN
        transport_algorithm = 0
      END IF
      IF (( skindepth_for_bca .LE. 1e-4 )) THEN
        IF (( .NOT.exact_bca )) THEN
          write(i_log,*) ' old PRESTA calculates default min. step-size
     *for BCA: '
          ecutmn = 1e30
          DO 24931 i=1,3000
            IF (( med(i) .GT. 0 .AND. med(i) .LE. nmed )) THEN
              ecutmn = Min(ecutmn,ecut(i))
            END IF
24931     CONTINUE
24932     CONTINUE
          write(i_log,*) '     minimum ECUT found: ',ecutmn
          tstbmn = 1e30
          DO 24941 medium=1,nmed
            tstbm = (ecutmn-prm)*(ecutmn+prm)/ecutmn**2
            tstbm = blcc(medium)*tstbm*(ecutmn/xcc(medium))**2
            aux = Log(tstbm)
            IF((aux .GT. 300))write(i_log,*) 'aux > 300 ? ',aux
            tstbm = Log(tstbm/aux)
            tstbmn = Min(tstbmn,tstbm)
24941     CONTINUE
24942     CONTINUE
          write(i_log,*) '     default BLCMIN is: ',tstbmn
          skindepth_for_bca = Exp(tstbmn)
          write(i_log,*) '     this corresponds to ',skindepth_for_bca,
     *    ' elastic MFPs '
        ELSE
          skindepth_for_bca = 3
        END IF
      END IF
      call init_ms_SR
      DO 24951 medium=1,nmed
        blcc(medium) = 1.16699413758864573*blcc(medium)
        xcc(medium) = xcc(medium)**2
24951 CONTINUE
24952 CONTINUE
      IF (( spin_effects )) THEN
        call init_spin
      END IF
      write(i_log,*) ' '
      esige_max = 0
      psige_max = 0
      DO 24961 medium=1,nmed
        sigee = 1E-15
        sigep = 1E-15
        neke = meke(medium)
        ise_monoton = .true.
        isp_monoton = .true.
        sige_old = -1
        sigp_old = -1
        DO 24971 i=1,neke
          ei = exp((float(i) - eke0(medium))/eke1(medium))
          eil = log(ei)
          leil = i
          ededx=ededx1(Leil,MEDIUM)*eil+ededx0(Leil,MEDIUM)
          sig=esig1(Leil,MEDIUM)*eil+esig0(Leil,MEDIUM)
          sig = sig/ededx
          IF((sig .GT. sigee))sigee = sig
          IF((sig .LT. sige_old))ise_monoton = .false.
          sige_old = sig
          ededx=pdedx1(Leil,MEDIUM)*eil+pdedx0(Leil,MEDIUM)
          sig=psig1(Leil,MEDIUM)*eil+psig0(Leil,MEDIUM)
          sig = sig/ededx
          IF((sig .GT. sigep))sigep = sig
          IF((sig .LT. sigp_old))isp_monoton = .false.
          sigp_old = sig
24971   CONTINUE
24972   CONTINUE
        write(i_log,*) ' Medium ',medium,' sige = ',sigee,sigep,' monoto
     *ne = ', ise_monoton,isp_monoton
        sig_ismonotone(0,medium) = ise_monoton
        sig_ismonotone(1,medium) = isp_monoton
        esig_e(medium) = sigee
        psig_e(medium) = sigep
        IF((sigee .GT. esige_max))esige_max = sigee
        IF((sigep .GT. psige_max))psige_max = sigep
24961 CONTINUE
24962 CONTINUE
      write(i_log,*) ' '
      write(i_log,*) ' Initializing tmxs for estepe = ',estepe,' and xim
     *ax = ',ximax
      write(i_log,*) ' '
      DO 24981 medium=1,nmed
        ei = exp((1 - eke0(medium))/eke1(medium))
        eil = log(ei)
        leil = 1
        E_array(1,medium) = ei
        expeke1(medium) = Exp(1./eke1(medium))-1
        range_ep(0,1,medium) = 0
        range_ep(1,1,medium) = 0
        neke = meke(medium)
        DO 24991 i=1,neke - 1
          eip1 = exp((float(i + 1) - eke0(medium))/eke1(medium))
          E_array(i+1,medium) = eip1
          eke = 0.5*(eip1+ei)
          elke = Log(eke)
          Lelke=eke1(MEDIUM)*elke+eke0(MEDIUM)
          ededx=pdedx1(Lelke,MEDIUM)*elke+pdedx0(Lelke,MEDIUM)
          aux = pdedx1(i,medium)/ededx
          range_ep(1,i+1,medium) = range_ep(1,i,medium) + (eip1-ei)/eded
     *    x*(1+aux*(1+2*aux)*((eip1-ei)/eke)**2/24)
          ededx=ededx1(Lelke,MEDIUM)*elke+ededx0(Lelke,MEDIUM)
          aux = ededx1(i,medium)/ededx
          range_ep(0,i+1,medium) = range_ep(0,i,medium) + (eip1-ei)/eded
     *    x*(1+aux*(1+2*aux)*((eip1-ei)/eke)**2/24)
          ei = eip1
24991   CONTINUE
24992   CONTINUE
        eil = (1 - eke0(medium))/eke1(medium)
        ei = Exp(eil)
        leil = 1
        p2 = ei*(ei+2*rm)
        beta2 = p2/(p2+rm*rm)
        chi_a2 = Xcc(medium)/(4*p2*blcc(medium))
        dedx0=ededx1(Leil,MEDIUM)*eil+ededx0(Leil,MEDIUM)
        estepx = 2*p2*beta2*dedx0/ei/Xcc(medium)/(Log(1+1./chi_a2)*(1+ch
     *  i_a2)-1)
        estepx = estepx*ximax
        IF (( estepx .GT. estepe )) THEN
          estepx = estepe
        END IF
        si = estepx*ei/dedx0
        DO 25001 i=1,neke - 1
          elke = (i + 1 - eke0(medium))/eke1(medium)
          eke = Exp(elke)
          lelke = i+1
          p2 = eke*(eke+2*rm)
          beta2 = p2/(p2+rm*rm)
          chi_a2 = Xcc(medium)/(4*p2*blcc(medium))
          ededx=ededx1(Lelke,MEDIUM)*elke+ededx0(Lelke,MEDIUM)
          estepx = 2*p2*beta2*ededx/eke/ Xcc(medium)/(Log(1+1./chi_a2)*(
     *    1+chi_a2)-1)
          estepx = estepx*ximax
          IF (( estepx .GT. estepe )) THEN
            estepx = estepe
          END IF
          ekef = (1-estepx)*eke
          IF (( ekef .LE. E_array(1,medium) )) THEN
            sip1 = (E_array(1,medium) - ekef)/dedx0
            ekef = E_array(1,medium)
            elkef = (1 - eke0(medium))/eke1(medium)
            lelkef = 1
          ELSE
            elkef = Log(ekef)
            Lelkef=eke1(MEDIUM)*elkef+eke0(MEDIUM)
            leip1l = lelkef + 1
            eip1l = (leip1l - eke0(medium))/eke1(medium)
            eip1 = E_array(leip1l,medium)
            aux = (eip1 - ekef)/eip1
            elktmp = 0.5*(elkef+eip1l+0.25*aux*aux*(1+aux*(1+0.875*aux))
     *      )
            ektmp = 0.5*(ekef+eip1)
            lelktmp = lelkef
            ededx=ededx1(Lelktmp,MEDIUM)*elktmp+ededx0(Lelktmp,MEDIUM)
            aux = ededx1(lelktmp,medium)/ededx
            sip1 = (eip1 - ekef)/ededx*( 1+aux*(1+2*aux)*((eip1-ekef)/ek
     *      tmp)**2/24)
          END IF
          sip1 = sip1 + range_ep(0,lelke,medium) - range_ep(0,lelkef+1,m
     *    edium)
          tmxs1(i,medium) = (sip1 - si)*eke1(medium)
          tmxs0(i,medium) = sip1 - tmxs1(i,medium)*elke
          si = sip1
25001   CONTINUE
25002   CONTINUE
        tmxs0(neke,medium) = tmxs0(neke - 1,medium)
        tmxs1(neke,medium) = tmxs1(neke - 1,medium)
24981 CONTINUE
24982 CONTINUE
      return
      end
      subroutine mscat(lambda,chia2,q1,elke,beta2,qel,medium, spin_effec
     *ts,find_index,spin_index, cost,sint)
      implicit none
      real*8 lambda, chia2,q1,elke,beta2,cost,sint
      integer*4 qel,medium
      logical spin_effects,find_index,spin_index
      common/ms_data/ ums_array(0:63,0:7,0:31), fms_array(0:63,0:7,0:31)
     *, wms_array(0:63,0:7,0:31), ims_array(0:63,0:7,0:31), llammin,llam
     *max,dllamb,dllambi,dqms,dqmsi
      real*4 ums_array,fms_array,wms_array, llammin,llammax,dllamb,dllam
     *bi,dqms,dqmsi
      integer*2 ims_array
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 sprob,explambda,wsum,wprob,xi,rejf,spin_rejection, cosz,sin
     *z,phi,omega2,llmbda,ai,aj,ak,a,u,du,x1,rnno
      integer*4 icount,i,j,k
      save i,j,omega2
      IF ((lambda .LE. 13.8)) THEN
        IF((rng_seed .GT. 128))call ranmar_get
        sprob = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        explambda = Exp(-lambda)
        IF ((sprob .LT. explambda)) THEN
          cost = 1
          sint = 0
          return
        END IF
        wsum = (1+lambda)*explambda
        IF (( sprob .LT. wsum )) THEN
25010     CONTINUE
          IF((rng_seed .GT. 128))call ranmar_get
          xi = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          xi = 2*chia2*xi/(1 - xi + chia2)
          cost = 1 - xi
          IF (( spin_effects )) THEN
            rejf = spin_rejection(qel,medium,elke,beta2,q1,cost, spin_in
     *      dex,.false.)
            IF((rng_seed .GT. 128))call ranmar_get
            rnno = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            IF (( rnno .GT. rejf )) THEN
              GOTO 25010
            END IF
          END IF
          sint = sqrt(xi*(2 - xi))
          return
        END IF
        IF (( lambda .LE. 1 )) THEN
          wprob = explambda
          wsum = explambda
          cost = 1
          sint = 0
          icount = 0
25021     CONTINUE
            icount = icount + 1
            IF((icount .GT. 20))GO TO25022
            wprob = wprob*lambda/icount
            wsum = wsum + wprob
25030       CONTINUE
            IF((rng_seed .GT. 128))call ranmar_get
            xi = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            xi = 2*chia2*xi/(1 - xi + chia2)
            cosz = 1 - xi
            IF (( spin_effects )) THEN
              rejf = spin_rejection(qel,medium,elke,beta2,q1,cosz, spin_
     *        index,.false.)
              IF((rng_seed .GT. 128))call ranmar_get
              rnno = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF (( rnno .GT. rejf )) THEN
                GOTO 25030
              END IF
            END IF
            sinz = xi*(2 - xi)
            IF (( sinz .GT. 1.e-20 )) THEN
              sinz = Sqrt(sinz)
              IF((rng_seed .GT. 128))call ranmar_get
              xi = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              phi = xi*6.2831853
              cost = cost*cosz - sint*sinz*Cos(phi)
              sint = Sqrt(Max(0.0,(1-cost)*(1+cost)))
            END IF
            IF((( wsum .GT. sprob)))GO TO25022
          GO TO 25021
25022     CONTINUE
          return
        END IF
      END IF
      IF ((lambda .LE. 1e5 )) THEN
        IF ((find_index)) THEN
          llmbda = log(lambda)
          ai = llmbda*dllambi
          i = ai
          ai = ai - i
          IF((rng_seed .GT. 128))call ranmar_get
          xi = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF((xi .LT. ai))i = i + 1
          IF (( q1 .LT. 1e-3 )) THEN
            j = 0
          ELSE IF(( q1 .LT. 0.5 )) THEN
            aj = q1*dqmsi
            j = aj
            aj = aj - j
            IF((rng_seed .GT. 128))call ranmar_get
            xi = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            IF((xi .LT. aj))j = j + 1
          ELSE
            j = 7
          END IF
          IF ((llmbda .LT. 2.2299)) THEN
            omega2 = chia2*(lambda + 4)*(1.347006 + llmbda*( 0.209364 -
     *      llmbda*(0.45525 - llmbda*(0.50142 - 0.081234*llmbda))))
          ELSE
            omega2 = chia2*(lambda + 4)*(-2.77164 + llmbda*(2.94874 - ll
     *      mbda*(0.1535754 - llmbda*0.00552888)))
          END IF
          find_index = .false.
        END IF
25040   CONTINUE
        IF((rng_seed .GT. 128))call ranmar_get
        xi = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        ak = xi*31
        k = ak
        ak = ak - k
        IF((ak .GT. wms_array(i,j,k)))k = ims_array(i,j,k)
        a = fms_array(i,j,k)
        u = ums_array(i,j,k)
        du = ums_array(i,j,k+1) - u
        IF((rng_seed .GT. 128))call ranmar_get
        xi = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        IF (( abs(a) .LT. 0.2 )) THEN
          x1 = 0.5*(1-xi)*a
          u = u + xi*du*(1+x1*(1-xi*a))
        ELSE
          u = u - du/a*(1-Sqrt(1+xi*a*(2+a)))
        END IF
        xi = omega2*u/(1 + 0.5*omega2 - u)
        IF (( xi .GT. 1.99999 )) THEN
          xi = 1.99999
        END IF
        cost = 1 - xi
        IF (( spin_effects )) THEN
          rejf=spin_rejection(qel,medium,elke,beta2,q1,cost,spin_index,.
     *    false.)
          IF((rng_seed .GT. 128))call ranmar_get
          rnno = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF (( rnno .GT. rejf )) THEN
            GOTO 25040
          END IF
        END IF
        sint = sqrt(xi*(2-xi))
        return
      END IF
      write(i_log,*) ' '
      write(i_log,*) ' *************************************'
      write(i_log,*) ' Maximum step size in mscat exceeded! '
      write(i_log,*) ' Maximum step size initialized: 100000'
      write(i_log,*) ' Present lambda: ',lambda
      write(i_log,*) ' chia2: ',chia2
      write(i_log,*) ' q1 elke beta2: ',q1,elke,beta2
      write(i_log,*) ' medium: ',medium
      write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) ' Stopping execution'
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      end
      real*8 function spin_rejection(qel,medium,elke,beta2,q1,cost, spin
     *_index,is_single)
      implicit none
      real*8 elke,beta2,q1,cost
      integer*4 qel,medium
      logical spin_index,is_single
      common/spin_data/ spin_rej(12,0:1,0: 31,0:15,0:31), espin_min,espi
     *n_max,espml,b2spin_min,b2spin_max, dbeta2,dbeta2i,dlener,dleneri,d
     *qq1,dqq1i, fool_intel_optimizer
      real*4 spin_rej,espin_min,espin_max,espml,b2spin_min,b2spin_max, d
     *beta2,dbeta2i,dlener,dleneri,dqq1,dqq1i
      logical fool_intel_optimizer
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      real*8 rnno,ai,qq1,aj,xi,ak
      integer*4 i,j,k
      save i,j
      IF (( spin_index )) THEN
        spin_index = .false.
        IF (( beta2 .GE. b2spin_min )) THEN
          ai = (beta2 - b2spin_min)*dbeta2i
          i = ai
          ai = ai - i
          i = i + 15 + 1
        ELSE IF(( elke .GT. espml )) THEN
          ai = (elke - espml)*dleneri
          i = ai
          ai = ai - i
        ELSE
          i = 0
          ai = -1
        END IF
        IF((rng_seed .GT. 128))call ranmar_get
        rnno = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        IF((rnno .LT. ai))i = i + 1
        IF (( is_single )) THEN
          j = 0
        ELSE
          qq1 = 2*q1
          qq1 = qq1/(1 + qq1)
          aj = qq1*dqq1i
          j = aj
          IF (( j .GE. 15 )) THEN
            j = 15
          ELSE
            aj = aj - j
            IF((rng_seed .GT. 128))call ranmar_get
            rnno = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            IF((rnno .LT. aj))j = j + 1
          END IF
        END IF
      END IF
      xi = Sqrt(0.5*(1-cost))
      ak = xi*31
      k = ak
      ak = ak - k
      spin_rejection = (1-ak)*spin_rej(medium,qel,i,j,k) + ak*spin_rej(m
     *edium,qel,i,j,k+1)
      return
      end
      subroutine sscat(chia2,elke,beta2,qel,medium,spin_effects,cost,sin
     *t)
      implicit none
      real*8 chia2,elke,beta2,cost,sint
      integer*4 qel,medium
      logical spin_effects
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      real*8 xi,rnno,rejf,spin_rejection,qzero
      logical spin_index
      spin_index = .true.
25050 CONTINUE
      IF((rng_seed .GT. 128))call ranmar_get
      xi = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      xi = 2*chia2*xi/(1 - xi + chia2)
      cost = 1 - xi
      IF (( spin_effects )) THEN
        qzero=0
        rejf = spin_rejection(qel,medium,elke,beta2,qzero,cost,spin_inde
     *  x,.true.)
        IF((rng_seed .GT. 128))call ranmar_get
        rnno = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        IF((rnno .GT. rejf))goto 25050
      END IF
      sint = sqrt(xi*(2 - xi))
      return
      end
      subroutine init_ms_SR
      implicit none
      common/ms_data/ ums_array(0:63,0:7,0:31), fms_array(0:63,0:7,0:31)
     *, wms_array(0:63,0:7,0:31), ims_array(0:63,0:7,0:31), llammin,llam
     *max,dllamb,dllambi,dqms,dqmsi
      real*4 ums_array,fms_array,wms_array, llammin,llammax,dllamb,dllam
     *bi,dqms,dqmsi
      integer*2 ims_array
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer*4 i,j,k
      write(i_log,'(/a,$)') 'Reading screened Rutherford MS data .......
     *........ '
      rewind(i_mscat)
      DO 25061 i=0,63
        DO 25071 j=0,7
          read(i_mscat,*) (ums_array(i,j,k),k=0,31)
          read(i_mscat,*) (fms_array(i,j,k),k=0,31)
          read(i_mscat,*) (wms_array(i,j,k),k=0,31-1)
          read(i_mscat,*) (ims_array(i,j,k),k=0,31-1)
          DO 25081 k=0,31-1
            fms_array(i,j,k) = fms_array(i,j,k+1)/fms_array(i,j,k)-1
            ims_array(i,j,k) = ims_array(i,j,k)-1
25081     CONTINUE
25082     CONTINUE
          fms_array(i,j,31)=fms_array(i,j,31-1)
25071   CONTINUE
25072   CONTINUE
25061 CONTINUE
25062 CONTINUE
      write(i_log,'(a)') ' done '
      llammin = Log(1.)
      llammax = Log(1e5)
      dllamb = (llammax-llammin)/63
      dllambi = 1./dllamb
      dqms = 0.5/7
      dqmsi = 1./dqms
      return
      end
      subroutine init_spin
      implicit none
      common/spin_data/ spin_rej(12,0:1,0: 31,0:15,0:31), espin_min,espi
     *n_max,espml,b2spin_min,b2spin_max, dbeta2,dbeta2i,dlener,dleneri,d
     *qq1,dqq1i, fool_intel_optimizer
      real*4 spin_rej,espin_min,espin_max,espml,b2spin_min,b2spin_max, d
     *beta2,dbeta2i,dlener,dleneri,dqq1,dqq1i
      logical fool_intel_optimizer
      COMMON/ELECIN/ esig_e(12),psig_e(12), esige_max, psige_max, range_
     *ep(0:1,500,12), E_array(500,12), etae_ms0(500,12),etae_ms1(500,12)
     *,etap_ms0(500,12),etap_ms1(500,12),q1ce_ms0(500,12),q1ce_ms1(500,1
     *2),q1cp_ms0(500,12),q1cp_ms1(500,12),q2ce_ms0(500,12),q2ce_ms1(500
     *,12),q2cp_ms0(500,12),q2cp_ms1(500,12),blcce0(500,12),blcce1(500,1
     *2), EKE0(12),EKE1(12), XR0(12),TEFF0(12),BLCC(12),XCC(12), ESIG0(5
     *00,12),ESIG1(500,12),PSIG0(500,12),PSIG1(500,12),EDEDX0(500,12),ED
     *EDX1(500,12),PDEDX0(500,12),PDEDX1(500,12),EBR10(500,12),EBR11(500
     *,12),PBR10(500,12),PBR11(500,12),PBR20(500,12),PBR21(500,12),TMXS0
     *(500,12),TMXS1(500,12), expeke1(12), IUNRST(12),EPSTFL(12),IAPRIM(
     *12), sig_ismonotone(0:1,12)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 eta_array(0:1,0: 31), c_array(0:1,0: 31),g_array(0:1,0: 31)
     *, earray(0: 31),tmp_array(0: 31), sum_Z2,sum_Z,sum_A,sum_pz,Z,tmp,
     *Z23,g_m,g_r,sig,dedx, tau,tauc,beta2,eta,gamma,fmax, eil,e,si1e,si
     *2e,si1p,si2p,aae,etap, elarray(0: 31),farray(0: 31), af(0: 31),bf(
     *0: 31),cf(0: 31), df(0: 31),spline,dloge,eloge
      real*4 dum1,dum2,dum3,aux_o
      real*4 fmax_array(0:15)
      integer*2 i2_array(512),ii2
      integer*4 iq,i,j,k,i_ele,iii,iZ,iiZ,n_ener,n_q,n_point,je,neke, nd
     *ata,leil,length,ii4,irec
      character spin_file*256
      character*6 string
      integer*4 lnblnk1
      integer*4 spin_unit, rec_length, want_spin_unit
      integer egs_get_unit
      character data_version*32,endianess*4
      logical swap
      real*8 fine,TF_constant
      parameter (fine=137.03604,TF_constant=0.88534138)
      real*4 tmp_4
      character c_2(2), c_4(4)
      equivalence (ii2,c_2), (tmp_4,c_4)
      DO 25091 i=1,len(spin_file)
        spin_file(i:i) = ' '
25091 CONTINUE
25092 CONTINUE
      spin_file = hen_house(:lnblnk1(hen_house)) // 'data' // '/' // 'sp
     *inms.data'
      want_spin_unit = 61
      spin_unit = egs_get_unit(want_spin_unit)
      IF (( spin_unit .LT. 1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'init_spin: failed to get a free fortran unit'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      rec_length = 276*4
      open(spin_unit,file=spin_file,form='unformatted',access='direct',
     *status='old',recl=rec_length,err=25100)
      read(spin_unit,rec=1,err=25110) data_version,endianess, espin_min,
     *espin_max,b2spin_min,b2spin_max
      swap = endianess.ne.'1234'
      IF (( swap )) THEN
        tmp_4 = espin_min
        call egs_swap_4(c_4)
        espin_min = tmp_4
        tmp_4 = espin_max
        call egs_swap_4(c_4)
        espin_max = tmp_4
        tmp_4 = b2spin_min
        call egs_swap_4(c_4)
        b2spin_min = tmp_4
        tmp_4 = b2spin_max
        call egs_swap_4(c_4)
        b2spin_max = tmp_4
      END IF
      write(i_log,'(//a,a)') 'Reading spin data base from ',spin_file(:l
     *nblnk1(spin_file))
      write(i_log,'(a)') data_version
      write(i_log,'(a,a,a)') 'Data generated on a machine with ',endiane
     *ss, ' endianess'
      write(i_log,'(a,a)') 'The endianess of this CPU is ','1234'
      IF((swap))write(i_log,'(a)') '=> will need to do byte swaping'
      write(i_log,'(a,2f9.2,2f9.5,//)') 'Ranges: ',espin_min,espin_max,
     *b2spin_min,b2spin_max
      n_ener = 15
      n_q = 15
      n_point = 31
      dloge = log(espin_max/espin_min)/n_ener
      eloge = log(espin_min)
      earray(0) = espin_min
      IF (( fool_intel_optimizer )) THEN
        write(25,*) 'Energy grid:'
      END IF
      DO 25121 i=1,n_ener
        eloge = eloge + dloge
        earray(i) = exp(eloge)
        IF (( fool_intel_optimizer )) THEN
          write(25,*) i,earray(i)
        END IF
25121 CONTINUE
25122 CONTINUE
      dbeta2 = (b2spin_max - b2spin_min)/n_ener
      beta2 = b2spin_min
      earray(n_ener+1) = espin_max
      DO 25131 i=n_ener+2,2*n_ener+1
        beta2 = beta2 + dbeta2
        IF (( beta2 .LT. 0.999 )) THEN
          earray(i) = prm*1000.0*(1/sqrt(1-beta2)-1)
        ELSE
          earray(i) = 50585.1
        END IF
        IF (( fool_intel_optimizer )) THEN
          write(25,*) i,earray(i)
        END IF
25131 CONTINUE
25132 CONTINUE
      espin_min = espin_min/1000
      espin_max = espin_max/1000
      dlener = Log(espin_max/espin_min)/15
      dleneri = 1/dlener
      espml = Log(espin_min)
      dbeta2 = (b2spin_max-b2spin_min)/15
      dbeta2i = 1/dbeta2
      dqq1 = 0.5/15
      dqq1i = 1/dqq1
      DO 25141 medium=1,NMED
        write(i_log,'(a,i4,a,$)') '  medium ',medium,' .................
     *.... '
        DO 25151 iq=0,1
          DO 25161 i=0, 31
            eta_array(iq,i)=0
            c_array(iq,i)=0
            g_array(iq,i)=0
            DO 25171 j=0,15
              DO 25181 k=0,31
                spin_rej(medium,iq,i,j,k) = 0
25181         CONTINUE
25182         CONTINUE
25171       CONTINUE
25172       CONTINUE
25161     CONTINUE
25162     CONTINUE
25151   CONTINUE
25152   CONTINUE
        sum_Z2=0
        sum_A=0
        sum_pz=0
        sum_Z=0
        DO 25191 i_ele=1,NNE(medium)
          Z = ZELEM(medium,i_ele)
          iZ = int(Z+0.5)
          IF (( fool_intel_optimizer )) THEN
            write(25,*) ' Z = ',iZ
          END IF
          tmp = PZ(medium,i_ele)*Z*(Z+1)
          sum_Z2 = sum_Z2 + tmp
          sum_Z = sum_Z + PZ(medium,i_ele)*Z
          sum_A = sum_A + PZ(medium,i_ele)*WA(medium,i_ele)
          sum_pz = sum_pz + PZ(medium,i_ele)
          Z23 = Z**0.6666667
          DO 25201 iq=0,1
            DO 25211 i=0, 31
              irec = 1 + (iz-1)*4*(n_ener+1) + 2*iq*(n_ener+1) + i+1
              IF (( fool_intel_optimizer )) THEN
                write(25,*) '**** energy ',i,earray(i),irec
              END IF
              read(spin_unit,rec=irec,err=25110) dum1,dum2,dum3,aux_o,fm
     *        ax_array,i2_array
              IF (( swap )) THEN
                tmp_4 = dum1
                call egs_swap_4(c_4)
                dum1 = tmp_4
                tmp_4 = dum2
                call egs_swap_4(c_4)
                dum2 = tmp_4
                tmp_4 = dum3
                call egs_swap_4(c_4)
                dum3 = tmp_4
                tmp_4 = aux_o
                call egs_swap_4(c_4)
                aux_o = tmp_4
              END IF
              eta_array(iq,i)=eta_array(iq,i)+tmp*Log(Z23*aux_o)
              tau = earray(i)/prm*0.001
              beta2 = tau*(tau+2)/(tau+1)**2
              eta = Z23/(fine*TF_constant)**2*aux_o/4/tau/(tau+2)
              c_array(iq,i)=c_array(iq,i)+ tmp*(Log(1+1/eta)-1/(1+eta))*
     *        dum1*dum3
              g_array(iq,i)=g_array(iq,i)+tmp*dum2
              DO 25221 j=0,15
                tmp_4 = fmax_array(j)
                IF((swap))call egs_swap_4(c_4)
                DO 25231 k=0,31
                  ii2 = i2_array((n_point+1)*j + k+1)
                  IF((swap))call egs_swap_2(c_2)
                  ii4 = ii2
                  IF((ii4 .LT. 0))ii4 = ii4 + 65536
                  dum1 = ii4
                  dum1 = dum1*tmp_4/65535
                  spin_rej(medium,iq,i,j,k) = spin_rej(medium,iq,i,j,k)
     *            + tmp*dum1
25231           CONTINUE
25232           CONTINUE
25221         CONTINUE
25222         CONTINUE
25211       CONTINUE
25212       CONTINUE
25201     CONTINUE
25202     CONTINUE
25191   CONTINUE
25192   CONTINUE
        DO 25241 iq=0,1
          DO 25251 i=0, 31
            DO 25261 j=0,15
              fmax = 0
              DO 25271 k=0,31
                IF (( spin_rej(medium,iq,i,j,k) .GT. fmax )) THEN
                  fmax = spin_rej(medium,iq,i,j,k)
                END IF
25271         CONTINUE
25272         CONTINUE
              DO 25281 k=0,31
                spin_rej(medium,iq,i,j,k) = spin_rej(medium,iq,i,j,k)/fm
     *          ax
25281         CONTINUE
25282         CONTINUE
25261       CONTINUE
25262       CONTINUE
25251     CONTINUE
25252     CONTINUE
25241   CONTINUE
25242   CONTINUE
        IF (( fool_intel_optimizer )) THEN
          write(25,*) 'Spin corrections as read in from file'
        END IF
        DO 25291 i=0, 31
          tau = earray(i)/prm*0.001
          beta2 = tau*(tau+2)/(tau+1)**2
          DO 25301 iq=0,1
            aux_o = Exp(eta_array(iq,i)/sum_Z2)/(fine*TF_constant)**2
            eta_array(iq,i) = 0.26112447*aux_o*blcc(medium)/xcc(medium)
            eta = aux_o/4/tau/(tau+2)
            gamma = 3*(1+eta)*(Log(1+1/eta)*(1+2*eta)-2)/ (Log(1+1/eta)*
     *      (1+eta)-1)
            g_array(iq,i) = g_array(iq,i)/sum_Z2/gamma
            c_array(iq,i) = c_array(iq,i)/sum_Z2/(Log(1+1/eta)-1/(1+eta)
     *      )
25301     CONTINUE
25302     CONTINUE
          IF (( fool_intel_optimizer )) THEN
            write(25,*) i,earray(i),eta_array(0,i),eta_array(1,i), c_arr
     *      ay(0,i),c_array(1,i),g_array(0,i),g_array(1,i)
          END IF
25291   CONTINUE
25292   CONTINUE
        eil = (1 - eke0(medium))/eke1(medium)
        e = Exp(eil)
        IF (( e .LE. espin_min )) THEN
          si1e = eta_array(0,0)
          si1p = eta_array(1,0)
        ELSE
          IF (( e .LE. espin_max )) THEN
            aae = (eil-espml)*dleneri
            je = aae
            aae = aae - je
          ELSE
            tau = e/prm
            beta2 = tau*(tau+2)/(tau+1)**2
            aae = (beta2 - b2spin_min)*dbeta2i
            je = aae
            aae = aae - je
            je = je + 15 + 1
          END IF
          si1e = (1-aae)*eta_array(0,je) + aae*eta_array(0,je+1)
          si1p = (1-aae)*eta_array(1,je) + aae*eta_array(1,je+1)
        END IF
        neke = meke(medium)
        IF (( fool_intel_optimizer )) THEN
          write(25,*) 'Interpolation table for eta correction'
        END IF
        DO 25311 i=1,neke - 1
          eil = (i+1 - eke0(medium))/eke1(medium)
          e = Exp(eil)
          IF (( e .LE. espin_min )) THEN
            si2e = eta_array(0,0)
            si2p = eta_array(1,0)
          ELSE
            IF (( e .LE. espin_max )) THEN
              aae = (eil-espml)*dleneri
              je = aae
              aae = aae - je
            ELSE
              tau = e/prm
              beta2 = tau*(tau+2)/(tau+1)**2
              aae = (beta2 - b2spin_min)*dbeta2i
              je = aae
              aae = aae - je
              je = je + 15 + 1
            END IF
            si2e = (1-aae)*eta_array(0,je) + aae*eta_array(0,je+1)
            si2p = (1-aae)*eta_array(1,je) + aae*eta_array(1,je+1)
          END IF
          etae_ms1(i,medium) = (si2e - si1e)*eke1(medium)
          etae_ms0(i,medium) = si2e - etae_ms1(i,medium)*eil
          etap_ms1(i,medium) = (si2p - si1p)*eke1(medium)
          etap_ms0(i,medium) = si2p - etap_ms1(i,medium)*eil
          IF (( fool_intel_optimizer )) THEN
            write(25,*) i,e,si2e,si2p,etae_ms1(i,medium), etae_ms0(i,med
     *      ium),etap_ms1(i,medium),etap_ms0(i,medium)
          END IF
          si1e = si2e
          si1p = si2p
25311   CONTINUE
25312   CONTINUE
        etae_ms1(neke,medium) = etae_ms1(neke-1,medium)
        etae_ms0(neke,medium) = etae_ms0(neke-1,medium)
        etap_ms1(neke,medium) = etap_ms1(neke-1,medium)
        etap_ms0(neke,medium) = etap_ms0(neke-1,medium)
        IF (( fool_intel_optimizer )) THEN
          write(25,*) 'elarray:'
        END IF
        DO 25321 i=0,15
          elarray(i) = Log(earray(i)/1000)
          farray(i) = c_array(0,i)
          IF (( fool_intel_optimizer )) THEN
            write(25,*) elarray(i),earray(i)
          END IF
25321   CONTINUE
25322   CONTINUE
        DO 25331 i=15+1, 31-1
          elarray(i) = Log(earray(i+1)/1000)
          farray(i) = c_array(0,i+1)
          IF (( fool_intel_optimizer )) THEN
            write(25,*) elarray(i),earray(i+1)
          END IF
25331   CONTINUE
25332   CONTINUE
        ndata =  31+1
        IF (( ue(medium) .GT. 1e5 )) THEN
          elarray(ndata-1) = Log(ue(medium))
        ELSE
          elarray(ndata-1) = Log(1e5)
        END IF
        farray(ndata-1) = 1
        call set_spline(elarray,farray,af,bf,cf,df,ndata)
        eil = (1 - eke0(medium))/eke1(medium)
        si1e = spline(eil,elarray,af,bf,cf,df,ndata)
        IF (( fool_intel_optimizer )) THEN
          write(25,*) 'Interpolation table for q1 correction (e-)'
        END IF
        DO 25341 i=1,neke-1
          eil = (i+1 - eke0(medium))/eke1(medium)
          si2e = spline(eil,elarray,af,bf,cf,df,ndata)
          q1ce_ms1(i,medium) = (si2e - si1e)*eke1(medium)
          q1ce_ms0(i,medium) = si2e - q1ce_ms1(i,medium)*eil
          IF (( fool_intel_optimizer )) THEN
            write(25,*) Exp(eil),si2e,q1ce_ms1(i,medium), q1ce_ms0(i,med
     *      ium)
          END IF
          si1e = si2e
25341   CONTINUE
25342   CONTINUE
        q1ce_ms1(neke,medium) = q1ce_ms1(neke-1,medium)
        q1ce_ms0(neke,medium) = q1ce_ms0(neke-1,medium)
        IF (( fool_intel_optimizer )) THEN
          write(25,*) 'Postrons:'
        END IF
        DO 25351 i=0,15
          farray(i) = c_array(1,i)
25351   CONTINUE
25352   CONTINUE
        DO 25361 i=15+1, 31-1
          farray(i) = c_array(1,i+1)
25361   CONTINUE
25362   CONTINUE
        call set_spline(elarray,farray,af,bf,cf,df,ndata)
        eil = (1 - eke0(medium))/eke1(medium)
        si1e = spline(eil,elarray,af,bf,cf,df,ndata)
        IF (( fool_intel_optimizer )) THEN
          write(25,*) 'Interpolation table for q1 correction (e+)'
        END IF
        DO 25371 i=1,neke-1
          eil = (i+1 - eke0(medium))/eke1(medium)
          si2e = spline(eil,elarray,af,bf,cf,df,ndata)
          q1cp_ms1(i,medium) = (si2e - si1e)*eke1(medium)
          q1cp_ms0(i,medium) = si2e - q1cp_ms1(i,medium)*eil
          IF (( fool_intel_optimizer )) THEN
            write(25,*) Exp(eil),si2e,q1cp_ms1(i,medium), q1cp_ms0(i,med
     *      ium)
          END IF
          si1e = si2e
25371   CONTINUE
25372   CONTINUE
        q1cp_ms1(neke,medium) = q1cp_ms1(neke-1,medium)
        q1cp_ms0(neke,medium) = q1cp_ms0(neke-1,medium)
        DO 25381 i=0,15
          farray(i) = g_array(0,i)
25381   CONTINUE
25382   CONTINUE
        DO 25391 i=15+1, 31-1
          farray(i) = g_array(0,i+1)
25391   CONTINUE
25392   CONTINUE
        call set_spline(elarray,farray,af,bf,cf,df,ndata)
        eil = (1 - eke0(medium))/eke1(medium)
        si1e = spline(eil,elarray,af,bf,cf,df,ndata)
        IF (( fool_intel_optimizer )) THEN
          write(25,*) 'Interpolation table for q2 correction (e-)'
        END IF
        DO 25401 i=1,neke-1
          eil = (i+1 - eke0(medium))/eke1(medium)
          si2e = spline(eil,elarray,af,bf,cf,df,ndata)
          q2ce_ms1(i,medium) = (si2e - si1e)*eke1(medium)
          q2ce_ms0(i,medium) = si2e - q2ce_ms1(i,medium)*eil
          IF (( fool_intel_optimizer )) THEN
            write(25,*) Exp(eil),si2e,q2ce_ms1(i,medium), q2ce_ms0(i,med
     *      ium)
          END IF
          si1e = si2e
25401   CONTINUE
25402   CONTINUE
        q2ce_ms1(neke,medium) = q2ce_ms1(neke-1,medium)
        q2ce_ms0(neke,medium) = q2ce_ms0(neke-1,medium)
        DO 25411 i=0,15
          farray(i) = g_array(1,i)
25411   CONTINUE
25412   CONTINUE
        DO 25421 i=15+1, 31-1
          farray(i) = g_array(1,i+1)
25421   CONTINUE
25422   CONTINUE
        call set_spline(elarray,farray,af,bf,cf,df,ndata)
        eil = (1 - eke0(medium))/eke1(medium)
        si1e = spline(eil,elarray,af,bf,cf,df,ndata)
        IF (( fool_intel_optimizer )) THEN
          write(25,*) 'Interpolation table for q2 correction (e+)'
        END IF
        DO 25431 i=1,neke-1
          eil = (i+1 - eke0(medium))/eke1(medium)
          si2e = spline(eil,elarray,af,bf,cf,df,ndata)
          q2cp_ms1(i,medium) = (si2e - si1e)*eke1(medium)
          q2cp_ms0(i,medium) = si2e - q2cp_ms1(i,medium)*eil
          IF (( fool_intel_optimizer )) THEN
            write(25,*) Exp(eil),si2e,q2cp_ms1(i,medium), q2cp_ms0(i,med
     *      ium)
          END IF
          si1e = si2e
25431   CONTINUE
25432   CONTINUE
        q2cp_ms1(neke,medium) = q2cp_ms1(neke-1,medium)
        q2cp_ms0(neke,medium) = q2cp_ms0(neke-1,medium)
        tauc = te(medium)/prm
        si1e = 1
        DO 25441 i=1,neke-1
          eil = (i+1 - eke0(medium))/eke1(medium)
          e = Exp(eil)
          leil=i+1
          tau=e/prm
          IF (( tau .GT. 2*tauc )) THEN
            sig=esig1(Leil,MEDIUM)*eil+esig0(Leil,MEDIUM)
            dedx=ededx1(Leil,MEDIUM)*eil+ededx0(Leil,MEDIUM)
            sig = sig/dedx
            IF (( sig .GT. 1e-6 )) THEN
              etap=etae_ms1(Leil,MEDIUM)*eil+etae_ms0(Leil,MEDIUM)
              eta = 0.25*etap*xcc(medium)/blcc(medium)/tau/(tau+2)
              g_r = (1+2*eta)*Log(1+1/eta)-2
              g_m = Log(0.5*tau/tauc)+ (1+((tau+2)/(tau+1))**2)*Log(2*(t
     *        au-tauc+2)/(tau+4))- 0.25*(tau+2)*(tau+2+2*(2*tau+1)/(tau+
     *        1)**2)* Log((tau+4)*(tau-tauc)/tau/(tau-tauc+2))+ 0.5*(tau
     *        -2*tauc)*(tau+2)*(1/(tau-tauc)-1/(tau+1)**2)
              IF (( g_m .LT. g_r )) THEN
                g_m = g_m/g_r
              ELSE
                g_m = 1
              END IF
              si2e = 1 - g_m*sum_Z/sum_Z2
            ELSE
              si2e = 1
            END IF
          ELSE
            si2e = 1
          END IF
          blcce1(i,medium) = (si2e - si1e)*eke1(medium)
          blcce0(i,medium) = si2e - blcce1(i,medium)*eil
          si1e = si2e
25441   CONTINUE
25442   CONTINUE
        blcce1(neke,medium) = blcce1(neke-1,medium)
        blcce0(neke,medium) = blcce0(neke-1,medium)
        write(i_log,'(a)') ' done'
25141 CONTINUE
25142 CONTINUE
      close(spin_unit)
      return
25100 write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(a,a)') 'Failed to open spin data file ',spin_file(:l
     *nblnk1(spin_file))
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
25110 write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) 'Error while reading spin data file for element',iZ
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      return
      end
      subroutine init_spin_old
      implicit none
      common/spin_data/ spin_rej(12,0:1,0: 31,0:15,0:31), espin_min,espi
     *n_max,espml,b2spin_min,b2spin_max, dbeta2,dbeta2i,dlener,dleneri,d
     *qq1,dqq1i, fool_intel_optimizer
      real*4 spin_rej,espin_min,espin_max,espml,b2spin_min,b2spin_max, d
     *beta2,dbeta2i,dlener,dleneri,dqq1,dqq1i
      logical fool_intel_optimizer
      COMMON/ELECIN/ esig_e(12),psig_e(12), esige_max, psige_max, range_
     *ep(0:1,500,12), E_array(500,12), etae_ms0(500,12),etae_ms1(500,12)
     *,etap_ms0(500,12),etap_ms1(500,12),q1ce_ms0(500,12),q1ce_ms1(500,1
     *2),q1cp_ms0(500,12),q1cp_ms1(500,12),q2ce_ms0(500,12),q2ce_ms1(500
     *,12),q2cp_ms0(500,12),q2cp_ms1(500,12),blcce0(500,12),blcce1(500,1
     *2), EKE0(12),EKE1(12), XR0(12),TEFF0(12),BLCC(12),XCC(12), ESIG0(5
     *00,12),ESIG1(500,12),PSIG0(500,12),PSIG1(500,12),EDEDX0(500,12),ED
     *EDX1(500,12),PDEDX0(500,12),PDEDX1(500,12),EBR10(500,12),EBR11(500
     *,12),PBR10(500,12),PBR11(500,12),PBR20(500,12),PBR21(500,12),TMXS0
     *(500,12),TMXS1(500,12), expeke1(12), IUNRST(12),EPSTFL(12),IAPRIM(
     *12), sig_ismonotone(0:1,12)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 eta_array(0:1,0: 31), c_array(0:1,0: 31),g_array(0:1,0: 31)
     *, earray(0: 31),tmp_array(0: 31), sum_Z2,sum_Z,sum_A,sum_pz,Z,tmp,
     *Z23,g_m,g_r,sig,dedx, dum1,dum2,dum3,aux_o,tau,tauc,beta2,eta,gamm
     *a,fmax, eil,e,si1e,si2e,si1p,si2p,aae,etap, elarray(0: 31),farray(
     *0: 31), af(0: 31),bf(0: 31),cf(0: 31), df(0: 31),spline
      integer*4 iq,i,j,k,i_ele,iii,iZ,iiZ,n_ener,n_q,n_point,je,neke, nd
     *ata,leil,length,want_spin_unit,spin_unit,egs_get_unit
      character spin_file*256
      character*6 string
      integer*4 lnblnk1
      real*8 fine,TF_constant
      parameter (fine=137.03604,TF_constant=0.88534138)
      DO 25451 i=1,len(spin_file)
        spin_file(i:i) = ' '
25451 CONTINUE
25452 CONTINUE
      spin_file = hen_house(:lnblnk1(hen_house)) // 'data' // '/' // 'sp
     *inms' // '/' // 'z000'
      length = lnblnk1(spin_file)
      DO 25461 medium=1,NMED
        write(i_log,'(a,i4,a,$)') '  Initializing spin data for medium '
     *  ,medium, ' ..................... '
        DO 25471 iq=0,1
          DO 25481 i=0, 31
            eta_array(iq,i)=0
            c_array(iq,i)=0
            g_array(iq,i)=0
            DO 25491 j=0,15
              DO 25501 k=0,31
                spin_rej(medium,iq,i,j,k) = 0
25501         CONTINUE
25502         CONTINUE
25491       CONTINUE
25492       CONTINUE
25481     CONTINUE
25482     CONTINUE
25471   CONTINUE
25472   CONTINUE
        sum_Z2=0
        sum_A=0
        sum_pz=0
        sum_Z=0
        DO 25511 i_ele=1,NNE(medium)
          Z = ZELEM(medium,i_ele)
          iZ = int(Z+0.5)
          tmp = PZ(medium,i_ele)*Z*(Z+1)
          iii = iZ/100
          spin_file(length-2:length-2) = char(iii+48)
          iiZ = iZ - iii*100
          iii = iiZ/10
          spin_file(length-1:length-1) = char(iii+48)
          iiZ = iiZ - 10*iii
          spin_file(length:length) = char(iiZ+48)
          want_spin_unit = 61
          spin_unit = egs_get_unit(want_spin_unit)
          IF (( spin_unit .LT. 1 )) THEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,*) 'init_spin: failed to get a free fortran unit
     *'
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          open(spin_unit,file=spin_file,status='old',err=25520)
          read(spin_unit,*) espin_min,espin_max,b2spin_min,b2spin_max
          read(spin_unit,*) n_ener,n_q,n_point
          IF (( n_ener .NE. 15 .OR. n_q .NE. 15 .OR. n_point .NE. 31)) T
     *    HEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,*) ' Wrong spin file for Z = ',iZ
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          sum_Z2 = sum_Z2 + tmp
          sum_Z = sum_Z + PZ(medium,i_ele)*Z
          sum_A = sum_A + PZ(medium,i_ele)*WA(medium,i_ele)
          sum_pz = sum_pz + PZ(medium,i_ele)
          Z23 = Z**0.6666667
          DO 25531 iq=0,1
            read(spin_unit,*)
            read(spin_unit,*)
            DO 25541 i=0, 31
              read(spin_unit,'(a,g14.6)') string,earray(i)
              read(spin_unit,*) dum1,dum2,dum3,aux_o
              eta_array(iq,i)=eta_array(iq,i)+tmp*Log(Z23*aux_o)
              tau = earray(i)/prm*0.001
              beta2 = tau*(tau+2)/(tau+1)**2
              eta = Z23/(fine*TF_constant)**2*aux_o/4/tau/(tau+2)
              c_array(iq,i)=c_array(iq,i)+ tmp*(Log(1+1/eta)-1/(1+eta))*
     *        dum1*dum3
              g_array(iq,i)=g_array(iq,i)+tmp*dum2
              DO 25551 j=0,15
                read(spin_unit,*) tmp_array
                DO 25561 k=0,31
                  spin_rej(medium,iq,i,j,k) = spin_rej(medium,iq,i,j,k)
     *            + tmp*tmp_array(k)
25561           CONTINUE
25562           CONTINUE
25551         CONTINUE
25552         CONTINUE
25541       CONTINUE
25542       CONTINUE
25531     CONTINUE
25532     CONTINUE
          close(spin_unit)
25511   CONTINUE
25512   CONTINUE
        DO 25571 iq=0,1
          DO 25581 i=0, 31
            DO 25591 j=0,15
              fmax = 0
              DO 25601 k=0,31
                IF (( spin_rej(medium,iq,i,j,k) .GT. fmax )) THEN
                  fmax = spin_rej(medium,iq,i,j,k)
                END IF
25601         CONTINUE
25602         CONTINUE
              DO 25611 k=0,31
                spin_rej(medium,iq,i,j,k) = spin_rej(medium,iq,i,j,k)/fm
     *          ax
25611         CONTINUE
25612         CONTINUE
25591       CONTINUE
25592       CONTINUE
25581     CONTINUE
25582     CONTINUE
25571   CONTINUE
25572   CONTINUE
        DO 25621 i=0, 31
          tau = earray(i)/prm*0.001
          beta2 = tau*(tau+2)/(tau+1)**2
          DO 25631 iq=0,1
            aux_o = Exp(eta_array(iq,i)/sum_Z2)/(fine*TF_constant)**2
            eta_array(iq,i) = 0.26112447*aux_o*blcc(medium)/xcc(medium)
            eta = aux_o/4/tau/(tau+2)
            gamma = 3*(1+eta)*(Log(1+1/eta)*(1+2*eta)-2)/ (Log(1+1/eta)*
     *      (1+eta)-1)
            g_array(iq,i) = g_array(iq,i)/sum_Z2/gamma
            c_array(iq,i) = c_array(iq,i)/sum_Z2/(Log(1+1/eta)-1/(1+eta)
     *      )
25631     CONTINUE
25632     CONTINUE
25621   CONTINUE
25622   CONTINUE
        espin_min = espin_min/1000
        espin_max = espin_max/1000
        dlener = Log(espin_max/espin_min)/15
        dleneri = 1/dlener
        espml = Log(espin_min)
        dbeta2 = (b2spin_max-b2spin_min)/15
        dbeta2i = 1/dbeta2
        dqq1 = 0.5/15
        dqq1i = 1/dqq1
        eil = (1 - eke0(medium))/eke1(medium)
        e = Exp(eil)
        IF (( e .LE. espin_min )) THEN
          si1e = eta_array(0,0)
          si1p = eta_array(1,0)
        ELSE
          IF (( e .LE. espin_max )) THEN
            aae = (eil-espml)*dleneri
            je = aae
            aae = aae - je
          ELSE
            tau = e/prm
            beta2 = tau*(tau+2)/(tau+1)**2
            aae = (beta2 - b2spin_min)*dbeta2i
            je = aae
            aae = aae - je
            je = je + 15 + 1
          END IF
          si1e = (1-aae)*eta_array(0,je) + aae*eta_array(0,je+1)
          si1p = (1-aae)*eta_array(1,je) + aae*eta_array(1,je+1)
        END IF
        neke = meke(medium)
        DO 25641 i=1,neke - 1
          eil = (i+1 - eke0(medium))/eke1(medium)
          e = Exp(eil)
          IF (( e .LE. espin_min )) THEN
            si2e = eta_array(0,0)
            si2p = eta_array(1,0)
          ELSE
            IF (( e .LE. espin_max )) THEN
              aae = (eil-espml)*dleneri
              je = aae
              aae = aae - je
            ELSE
              tau = e/prm
              beta2 = tau*(tau+2)/(tau+1)**2
              aae = (beta2 - b2spin_min)*dbeta2i
              je = aae
              aae = aae - je
              je = je + 15 + 1
            END IF
            si2e = (1-aae)*eta_array(0,je) + aae*eta_array(0,je+1)
            si2p = (1-aae)*eta_array(1,je) + aae*eta_array(1,je+1)
          END IF
          etae_ms1(i,medium) = (si2e - si1e)*eke1(medium)
          etae_ms0(i,medium) = si2e - etae_ms1(i,medium)*eil
          etap_ms1(i,medium) = (si2p - si1p)*eke1(medium)
          etap_ms0(i,medium) = si2p - etap_ms1(i,medium)*eil
          si1e = si2e
          si1p = si2p
25641   CONTINUE
25642   CONTINUE
        etae_ms1(neke,medium) = etae_ms1(neke-1,medium)
        etae_ms0(neke,medium) = etae_ms0(neke-1,medium)
        etap_ms1(neke,medium) = etap_ms1(neke-1,medium)
        etap_ms0(neke,medium) = etap_ms0(neke-1,medium)
        DO 25651 i=0,15
          elarray(i) = Log(earray(i)/1000)
          farray(i) = c_array(0,i)
25651   CONTINUE
25652   CONTINUE
        DO 25661 i=15+1, 31-1
          elarray(i) = Log(earray(i+1)/1000)
          farray(i) = c_array(0,i+1)
25661   CONTINUE
25662   CONTINUE
        ndata =  31+1
        IF (( ue(medium) .GT. 1e5 )) THEN
          elarray(ndata-1) = Log(ue(medium))
        ELSE
          elarray(ndata-1) = Log(1e5)
        END IF
        farray(ndata-1) = 1
        call set_spline(elarray,farray,af,bf,cf,df,ndata)
        eil = (1 - eke0(medium))/eke1(medium)
        si1e = spline(eil,elarray,af,bf,cf,df,ndata)
        DO 25671 i=1,neke-1
          eil = (i+1 - eke0(medium))/eke1(medium)
          si2e = spline(eil,elarray,af,bf,cf,df,ndata)
          q1ce_ms1(i,medium) = (si2e - si1e)*eke1(medium)
          q1ce_ms0(i,medium) = si2e - q1ce_ms1(i,medium)*eil
          si1e = si2e
25671   CONTINUE
25672   CONTINUE
        q1ce_ms1(neke,medium) = q1ce_ms1(neke-1,medium)
        q1ce_ms0(neke,medium) = q1ce_ms0(neke-1,medium)
        DO 25681 i=0,15
          farray(i) = c_array(1,i)
25681   CONTINUE
25682   CONTINUE
        DO 25691 i=15+1, 31-1
          farray(i) = c_array(1,i+1)
25691   CONTINUE
25692   CONTINUE
        call set_spline(elarray,farray,af,bf,cf,df,ndata)
        eil = (1 - eke0(medium))/eke1(medium)
        si1e = spline(eil,elarray,af,bf,cf,df,ndata)
        DO 25701 i=1,neke-1
          eil = (i+1 - eke0(medium))/eke1(medium)
          si2e = spline(eil,elarray,af,bf,cf,df,ndata)
          q1cp_ms1(i,medium) = (si2e - si1e)*eke1(medium)
          q1cp_ms0(i,medium) = si2e - q1cp_ms1(i,medium)*eil
          si1e = si2e
25701   CONTINUE
25702   CONTINUE
        q1cp_ms1(neke,medium) = q1cp_ms1(neke-1,medium)
        q1cp_ms0(neke,medium) = q1cp_ms0(neke-1,medium)
        DO 25711 i=0,15
          farray(i) = g_array(0,i)
25711   CONTINUE
25712   CONTINUE
        DO 25721 i=15+1, 31-1
          farray(i) = g_array(0,i+1)
25721   CONTINUE
25722   CONTINUE
        call set_spline(elarray,farray,af,bf,cf,df,ndata)
        eil = (1 - eke0(medium))/eke1(medium)
        si1e = spline(eil,elarray,af,bf,cf,df,ndata)
        DO 25731 i=1,neke-1
          eil = (i+1 - eke0(medium))/eke1(medium)
          si2e = spline(eil,elarray,af,bf,cf,df,ndata)
          q2ce_ms1(i,medium) = (si2e - si1e)*eke1(medium)
          q2ce_ms0(i,medium) = si2e - q2ce_ms1(i,medium)*eil
          si1e = si2e
25731   CONTINUE
25732   CONTINUE
        q2ce_ms1(neke,medium) = q2ce_ms1(neke-1,medium)
        q2ce_ms0(neke,medium) = q2ce_ms0(neke-1,medium)
        DO 25741 i=0,15
          farray(i) = g_array(1,i)
25741   CONTINUE
25742   CONTINUE
        DO 25751 i=15+1, 31-1
          farray(i) = g_array(1,i+1)
25751   CONTINUE
25752   CONTINUE
        call set_spline(elarray,farray,af,bf,cf,df,ndata)
        eil = (1 - eke0(medium))/eke1(medium)
        si1e = spline(eil,elarray,af,bf,cf,df,ndata)
        DO 25761 i=1,neke-1
          eil = (i+1 - eke0(medium))/eke1(medium)
          si2e = spline(eil,elarray,af,bf,cf,df,ndata)
          q2cp_ms1(i,medium) = (si2e - si1e)*eke1(medium)
          q2cp_ms0(i,medium) = si2e - q2cp_ms1(i,medium)*eil
25761   CONTINUE
25762   CONTINUE
        q2cp_ms1(neke,medium) = q2cp_ms1(neke-1,medium)
        q2cp_ms0(neke,medium) = q2cp_ms0(neke-1,medium)
        tauc = te(medium)/prm
        si1e = 1
        DO 25771 i=1,neke-1
          eil = (i+1 - eke0(medium))/eke1(medium)
          e = Exp(eil)
          leil=i+1
          tau=e/prm
          IF (( tau .GT. 2*tauc )) THEN
            sig=esig1(Leil,MEDIUM)*eil+esig0(Leil,MEDIUM)
            dedx=ededx1(Leil,MEDIUM)*eil+ededx0(Leil,MEDIUM)
            sig = sig/dedx
            IF (( sig .GT. 1e-6 )) THEN
              etap=etae_ms1(Leil,MEDIUM)*eil+etae_ms0(Leil,MEDIUM)
              eta = 0.25*etap*xcc(medium)/blcc(medium)/tau/(tau+2)
              g_r = (1+2*eta)*Log(1+1/eta)-2
              g_m = Log(0.5*tau/tauc)+ (1+((tau+2)/(tau+1))**2)*Log(2*(t
     *        au-tauc+2)/(tau+4))- 0.25*(tau+2)*(tau+2+2*(2*tau+1)/(tau+
     *        1)**2)* Log((tau+4)*(tau-tauc)/tau/(tau-tauc+2))+ 0.5*(tau
     *        -2*tauc)*(tau+2)*(1/(tau-tauc)-1/(tau+1)**2)
              IF (( g_m .LT. g_r )) THEN
                g_m = g_m/g_r
              ELSE
                g_m = 1
              END IF
              si2e = 1 - g_m*sum_Z/sum_Z2
            ELSE
              si2e = 1
            END IF
          ELSE
            si2e = 1
          END IF
          blcce1(i,medium) = (si2e - si1e)*eke1(medium)
          blcce0(i,medium) = si2e - blcce1(i,medium)*eil
          si1e = si2e
25771   CONTINUE
25772   CONTINUE
        blcce1(neke,medium) = blcce1(neke-1,medium)
        blcce0(neke,medium) = blcce0(neke-1,medium)
        write(i_log,'(a)') ' done'
25461 CONTINUE
25462 CONTINUE
      return
25520 write(i_log,*) ' ******************** Error in init_spin *********
     *********** '
      write(i_log,'(a,a)') '  could not open file ',spin_file
      write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) ' terminating execution '
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      end
      subroutine msdist_pII ( e0,eloss,tustep,rhof,med,qel,spin_effects,
     *u0,v0,w0,x0,y0,z0,  us,vs,ws,xf,yf,zf,ustep )
      implicit none
      real*8 e0,  eloss,  rhof,  tustep,  u0,  v0,  w0,  x0,  y0,  z0
      integer*4 med, qel
      logical spin_effects
      real*8 us,  vs,  ws,  xf,  yf,  zf,  ustep
      real*8 b,  blccc,  xcccc,  c,  eta,eta1,  chia2,  chilog,  cphi0,
     *  cphi1,  cphi2,  w1,  w2,  w1v2,  delta,  e,  elke,  beta2,  etap
     *,  xi_corr,  ms_corr, tau,  tau2,  epsilon,  epsilonp,  temp,temp1
     *, temp2,  factor,  gamma,  lambda,   p2,  p2i,  q1,  rhophi2,  sin
     *t0,  sint02,  sint0i,  sint1,  sint2,  sphi0,   sphi1,  sphi2,  u2
     *p,  u2,  v2,  ut,  vt,  wt,  xi,  xphi,  xphi2,  yphi,  yphi2
      logical find_index,  spin_index
      integer*4 lelke
      COMMON/ELECIN/ esig_e(12),psig_e(12), esige_max, psige_max, range_
     *ep(0:1,500,12), E_array(500,12), etae_ms0(500,12),etae_ms1(500,12)
     *,etap_ms0(500,12),etap_ms1(500,12),q1ce_ms0(500,12),q1ce_ms1(500,1
     *2),q1cp_ms0(500,12),q1cp_ms1(500,12),q2ce_ms0(500,12),q2ce_ms1(500
     *,12),q2cp_ms0(500,12),q2cp_ms1(500,12),blcce0(500,12),blcce1(500,1
     *2), EKE0(12),EKE1(12), XR0(12),TEFF0(12),BLCC(12),XCC(12), ESIG0(5
     *00,12),ESIG1(500,12),PSIG0(500,12),PSIG1(500,12),EDEDX0(500,12),ED
     *EDX1(500,12),PDEDX0(500,12),PDEDX1(500,12),EBR10(500,12),EBR11(500
     *,12),PBR10(500,12),PBR11(500,12),PBR20(500,12),PBR21(500,12),TMXS0
     *(500,12),TMXS1(500,12), expeke1(12), IUNRST(12),EPSTFL(12),IAPRIM(
     *12), sig_ismonotone(0:1,12)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common/CH_steps/ count_pII_steps,count_all_steps,is_ch_step
      real*8 count_pII_steps,count_all_steps
      logical is_ch_step
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/emf_inputs/ExIN,EyIN,EzIN,  EMLMTIN,  BxIN, ByIN, BzIN,  Bx
     *, By, Bz,  Bx_new, By_new, Bz_new,  emfield_on
      real*8 ExIN,EyIN,EzIN, EMLMTIN, BxIN,ByIN,BzIN, Bx,By,Bz, Bx_new,B
     *y_new,Bz_new
      logical emfield_on
      medium = med
      count_pII_steps = count_pII_steps + 1
      blccc = blcc(medium)
      xcccc = xcc(medium)
      e = e0 - 0.5*eloss
      tau = e/prm
      tau2 = tau*tau
      epsilon = eloss/e0
      epsilonp= eloss/e
      e = e * (1 - epsilonp*epsilonp*(6+10*tau+5*tau2)/(24*tau2+72*tau+4
     *8))
      p2 = e*(e + rmt2)
      beta2 = p2/(p2 + rmsq)
      chia2 = xcccc/(4*p2*blccc)
      lambda = 0.5*tustep*rhof*blccc/beta2
      temp2 = 0.166666*(4+tau*(6+tau*(7+tau*(4+tau))))* (epsilonp/((tau+
     *1)*(tau+2)))**2
      lambda = lambda*(1 - temp2)
      IF (( spin_effects )) THEN
        elke = Log(e)
        Lelke=eke1(MEDIUM)*elke+eke0(MEDIUM)
        IF (( lelke .LT. 1 )) THEN
          lelke = 1
          elke = (1 - eke0(medium))/eke1(medium)
        END IF
        IF (( qel .EQ. 0 )) THEN
          etap=etae_ms1(Lelke,MEDIUM)*elke+etae_ms0(Lelke,MEDIUM)
          xi_corr=q1ce_ms1(Lelke,MEDIUM)*elke+q1ce_ms0(Lelke,MEDIUM)
          gamma=q2ce_ms1(Lelke,MEDIUM)*elke+q2ce_ms0(Lelke,MEDIUM)
        ELSE
          etap=etap_ms1(Lelke,MEDIUM)*elke+etap_ms0(Lelke,MEDIUM)
          xi_corr=q1cp_ms1(Lelke,MEDIUM)*elke+q1cp_ms0(Lelke,MEDIUM)
          gamma=q2cp_ms1(Lelke,MEDIUM)*elke+q2cp_ms0(Lelke,MEDIUM)
        END IF
        ms_corr=blcce1(Lelke,MEDIUM)*elke+blcce0(Lelke,MEDIUM)
      ELSE
        etap = 1
        xi_corr = 1
        gamma = 1
        ms_corr = 1
      END IF
      chia2 = chia2*etap
      lambda = lambda/(etap*(1+chia2))*ms_corr
      chilog = Log(1 + 1/chia2)
      q1 = 2*chia2*(chilog*(1 + chia2) - 1)
      gamma = 6*chia2*(1 + chia2)*(chilog*(1 + 2*chia2) - 2)/q1*gamma
      xi = q1*lambda
      find_index = .true.
      spin_index = .true.
      call mscat(lambda,chia2,xi,elke,beta2,qel,medium, spin_effects,fin
     *d_index,spin_index, w1,sint1)
25781 CONTINUE
        IF((rng_seed .GT. 128))call ranmar_get
        xphi = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        xphi = 2*xphi - 1
        xphi2 = xphi*xphi
        IF((rng_seed .GT. 128))call ranmar_get
        yphi = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        yphi2 = yphi*yphi
        rhophi2 = xphi2 + yphi2
        IF(rhophi2.LE.1)GO TO25782
      GO TO 25781
25782 CONTINUE
      rhophi2 = 1/rhophi2
      cphi1 = (xphi2 - yphi2)*rhophi2
      sphi1 = 2*xphi*yphi*rhophi2
      call mscat(lambda,chia2,xi,elke,beta2,qel,medium, spin_effects,fin
     *d_index,spin_index, w2,sint2)
25791 CONTINUE
        IF((rng_seed .GT. 128))call ranmar_get
        xphi = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        xphi = 2*xphi - 1
        xphi2 = xphi*xphi
        IF((rng_seed .GT. 128))call ranmar_get
        yphi = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        yphi2 = yphi*yphi
        rhophi2 = xphi2 + yphi2
        IF(rhophi2.LE.1)GO TO25792
      GO TO 25791
25792 CONTINUE
      rhophi2 = 1/rhophi2
      cphi2 = (xphi2 - yphi2)*rhophi2
      sphi2 = 2*xphi*yphi*rhophi2
      u2 = sint2*cphi2
      v2 = sint2*sphi2
      u2p = w1*u2 + sint1*w2
      us = u2p*cphi1 - v2*sphi1
      vs = u2p*sphi1 + v2*cphi1
      ws = w1*w2 - sint1*u2
      xi = 2*xi*xi_corr
      IF((rng_seed .GT. 128))call ranmar_get
      eta = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      eta = Sqrt(eta)
      eta1 = 0.5*(1 - eta)
      delta = 0.9082483-(0.1020621-0.0263747*gamma)*xi
      temp1 = 2 + tau
      temp = (2+tau*temp1)/((tau+1)*temp1)
      temp = temp - (tau+1)/((tau+2)*(chilog*(1+chia2)-1))
      temp = temp * epsilonp
      temp1 = 1 - temp
      delta = delta + 0.40824829*(epsilon*(tau+1)/((tau+2)* (chilog*(1+c
     *hia2)-1)*(chilog*(1+2*chia2)-2)) - 0.25*temp*temp)
      b = eta*delta
      c = eta*(1-delta)
      w1v2 = w1*v2
      ut = b*sint1*cphi1 + c*(cphi1*u2 - sphi1*w1v2) + eta1*us*temp1
      vt = b*sint1*sphi1 + c*(sphi1*u2 + cphi1*w1v2) + eta1*vs*temp1
      wt = eta1*(1+temp) + b*w1 + c*w2 + eta1*ws*temp1
      ustep = tustep*sqrt(ut*ut + vt*vt + wt*wt)
      sint02 = u0**2 + v0**2
      IF ((sint02 .GT. 1e-20)) THEN
        sint0 = sqrt(sint02)
        sint0i = 1/sint0
        cphi0 = sint0i*u0
        sphi0 = sint0i*v0
        u2p = w0*us + sint0*ws
        ws = w0*ws - sint0*us
        us = u2p*cphi0 - vs*sphi0
        vs = u2p*sphi0 + vs*cphi0
        u2p = w0*ut + sint0*wt
        wt = w0*wt - sint0*ut
        ut = u2p*cphi0 - vt*sphi0
        vt = u2p*sphi0 + vt*cphi0
      ELSE
        wt = w0*wt
        ws = w0*ws
      END IF
      xf = x0 + tustep*ut
      yf = y0 + tustep*vt
      zf = z0 + tustep*wt
      return
      end
      subroutine msdist_pI ( e0,eloss,tustep,rhof,medium,qel,spin_effect
     *s,u0,v0,w0,x0,y0,z0,  us,vs,ws,xf,yf,zf,ustep )
      implicit none
      real*8 e0,  eloss,  rhof,  tustep,  u0,  v0,  w0,  x0,  y0,  z0
      integer*4 medium, qel
      logical spin_effects
      real*8 us,  vs,  ws,  xf,  yf,  zf,  ustep
      real*8 blccc,  xcccc,  z,r,z2,r2,  r2max, chia2,  chilog,  cphi0,
     *  cphi,  sphi,  e,  elke,  beta2,  etap,  xi_corr,  ms_corr, epsil
     *on,  temp,  factor,  lambda,  p2,  p2i,  q1,  rhophi2,  sint,  sin
     *t0,  sint02,  sint0i,  sphi0,   u2p,  ut,  vt,  wt,  xi,  xphi,  x
     *phi2,  yphi,  yphi2
      logical find_index,  spin_index
      integer*4 lelke
      COMMON/ELECIN/ esig_e(12),psig_e(12), esige_max, psige_max, range_
     *ep(0:1,500,12), E_array(500,12), etae_ms0(500,12),etae_ms1(500,12)
     *,etap_ms0(500,12),etap_ms1(500,12),q1ce_ms0(500,12),q1ce_ms1(500,1
     *2),q1cp_ms0(500,12),q1cp_ms1(500,12),q2ce_ms0(500,12),q2ce_ms1(500
     *,12),q2cp_ms0(500,12),q2cp_ms1(500,12),blcce0(500,12),blcce1(500,1
     *2), EKE0(12),EKE1(12), XR0(12),TEFF0(12),BLCC(12),XCC(12), ESIG0(5
     *00,12),ESIG1(500,12),PSIG0(500,12),PSIG1(500,12),EDEDX0(500,12),ED
     *EDX1(500,12),PDEDX0(500,12),PDEDX1(500,12),EBR10(500,12),EBR11(500
     *,12),PBR10(500,12),PBR11(500,12),PBR20(500,12),PBR21(500,12),TMXS0
     *(500,12),TMXS1(500,12), expeke1(12), IUNRST(12),EPSTFL(12),IAPRIM(
     *12), sig_ismonotone(0:1,12)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common/emf_inputs/ExIN,EyIN,EzIN,  EMLMTIN,  BxIN, ByIN, BzIN,  Bx
     *, By, Bz,  Bx_new, By_new, Bz_new,  emfield_on
      real*8 ExIN,EyIN,EzIN, EMLMTIN, BxIN,ByIN,BzIN, Bx,By,Bz, Bx_new,B
     *y_new,Bz_new
      logical emfield_on
      blccc = blcc(medium)
      xcccc = xcc(medium)
      e = e0 - 0.5*eloss
      p2 = e*(e + rmt2)
      p2i = 1/p2
      chia2 = xcccc*p2i/(4*blccc)
      beta2 = p2/(p2 + rmsq)
      lambda = tustep*rhof*blccc/beta2
      factor = 1/(1 + 0.9784671*e)
      epsilon= eloss/e0
      epsilon= epsilon/(1-0.5*epsilon)
      temp = 0.25*(1 - factor*(1 - 0.333333*factor))*epsilon**2
      lambda = lambda*(1 + temp)
      IF (( spin_effects )) THEN
        elke = Log(e)
        Lelke=eke1(MEDIUM)*elke+eke0(MEDIUM)
        IF (( lelke .LT. 1 )) THEN
          lelke = 1
          elke = (1 - eke0(medium))/eke1(medium)
        END IF
        IF (( qel .EQ. 0 )) THEN
          etap=etae_ms1(Lelke,MEDIUM)*elke+etae_ms0(Lelke,MEDIUM)
          xi_corr=q1ce_ms1(Lelke,MEDIUM)*elke+q1ce_ms0(Lelke,MEDIUM)
        ELSE
          etap=etap_ms1(Lelke,MEDIUM)*elke+etap_ms0(Lelke,MEDIUM)
          xi_corr=q1cp_ms1(Lelke,MEDIUM)*elke+q1cp_ms0(Lelke,MEDIUM)
        END IF
        ms_corr=blcce1(Lelke,MEDIUM)*elke+blcce0(Lelke,MEDIUM)
      ELSE
        etap = 1
        xi_corr = 1
        ms_corr = 1
      END IF
      chia2 = xcccc*p2i/(4*blccc)*etap
      lambda = lambda/etap/(1+chia2)*ms_corr
      chilog = Log(1 + 1/chia2)
      q1 = 2*chia2*(chilog*(1 + chia2) - 1)
      xi = q1*lambda
      find_index = .true.
      spin_index = .true.
      call mscat(lambda,chia2,xi,elke,beta2,qel,medium, spin_effects,fin
     *d_index,spin_index, ws,sint)
25801 CONTINUE
        IF((rng_seed .GT. 128))call ranmar_get
        xphi = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        xphi = 2*xphi - 1
        xphi2 = xphi*xphi
        IF((rng_seed .GT. 128))call ranmar_get
        yphi = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        yphi2 = yphi*yphi
        rhophi2 = xphi2 + yphi2
        IF(rhophi2.LE.1)GO TO25802
      GO TO 25801
25802 CONTINUE
      rhophi2 = 1/rhophi2
      cphi = (xphi2 - yphi2)*rhophi2
      sphi = 2*xphi*yphi*rhophi2
      us = sint*cphi
      vs = sint*sphi
      xi = xi*xi_corr
      IF (( xi .LT. 0.1 )) THEN
        z = 1 - xi*(0.5 - xi*(0.166666667 - 0.041666667*xi))
      ELSE
        z = (1 - Exp(-xi))/xi
      END IF
      r = 0.5*sint
      r2 = r*r
      z2 = z*z
      r2max = 1 - z2
      IF (( r2max .LT. r2 )) THEN
        r2 = r2max
        r = Sqrt(r2)
      END IF
      ut = r*cphi
      vt = r*sphi
      wt = z
      ustep = Sqrt(z2 + r2)*tustep
      sint02 = u0**2 + v0**2
      IF ((sint02 .GT. 1e-20)) THEN
        sint0 = sqrt(sint02)
        sint0i = 1/sint0
        cphi0 = sint0i*u0
        sphi0 = sint0i*v0
        u2p = w0*us + sint0*ws
        ws = w0*ws - sint0*us
        us = u2p*cphi0 - vs*sphi0
        vs = u2p*sphi0 + vs*cphi0
        u2p = w0*ut + sint0*wt
        wt = w0*wt - sint0*ut
        ut = u2p*cphi0 - vt*sphi0
        vt = u2p*sphi0 + vt*cphi0
      ELSE
        wt = w0*wt
        ws = w0*ws
      END IF
      xf = x0 + tustep*ut
      yf = y0 + tustep*vt
      zf = z0 + tustep*wt
      return
      end
      SUBROUTINE PAIR
      implicit none
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      common/nrc_pair/ nrcp_fdata(65,84,12), nrcp_wdata(65,84,12), nrcp_
     *idata(65,84,12), nrcp_xdata(65), nrcp_emin, nrcp_emax, nrcp_dle, n
     *rcp_dlei
      real*8 nrcp_fdata,nrcp_wdata,nrcp_xdata, nrcp_emin, nrcp_emax, nrc
     *p_dle, nrcp_dlei
      integer*4 nrcp_idata
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      common/triplet_data/ a_triplet(250,12), b_triplet(250,12), dl_trip
     *let, dli_triplet, bli_triplet, log_4rm
      real*8 a_triplet,b_triplet,dl_triplet, dli_triplet, bli_triplet, l
     *og_4rm
      common/egs_vr/ e_max_rr(3000),  prob_RR,  nbr_split,  i_play_RR,
     *    i_survived_RR,
     *        n_RR_warning,                                        i_do_
     *rr(3000)
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      DOUBLE PRECISION PEIG,  PESE1,  PESE2
      real*8 EIG,  ESE2,  RNNO30,RNNO31,rnno32,rnno33,rnno34,  DELTA,  R
     *EJF,  rejmax,  aux1,aux2,  Amax,  Bmax,  del0,  br,
     *                               Eminus,Eplus,Eavail,rnno_RR
      integer*4
     *                     L,L1
      real*8 ESE,  PSE,  ZTARG,  TTEIG,  TTESE,  TTPSE,  ESEDEI, ESEDER,
     * XIMIN,  XIMID,  REJMIN, REJMID, REJTOP, YA,XITRY,GALPHA,GBETA,  X
     *ITST,  REJTST_on_REJTOP ,  REJTST, RTEST
      integer*4 ICHRG
      real*8 k,xx,abin,rbin,alias_sample1
      integer*4 ibin, iq1, iq2, iprdst_use
      logical do_nrc_pair
      integer*4 itrip
      real*8 ftrip
      NPold = NP
      IF (( i_play_RR .EQ. 1 )) THEN
        i_survived_RR = 0
        IF (( prob_RR .LE. 0 )) THEN
          IF (( n_RR_warning .LT. 50 )) THEN
            n_RR_warning = n_RR_warning + 1
            write(i_log,'(/a)') '***************** Warning: '
            write(i_log,'(a,g14.6)') 'Attempt to play Russian Roulette w
     *ith prob_RR<0! '
          END IF
        ELSE
          IF((rng_seed .GT. 128))call ranmar_get
          rnno_RR = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF (( rnno_RR .GT. prob_RR )) THEN
            i_survived_RR =2
            IF (( np .GT. 1 )) THEN
              np = np-1
            ELSE
              wt(np) = 0
              e(np) = 0
            END IF
            return
          ELSE
            wt(np) = wt(np)/prob_RR
          END IF
        END IF
      END IF
      IF (( np+1 .GT. 10000 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','PAIR', ' sta
     *ck size exceeded! ',' $MAXSTACK = ',10000,' np = ',np+1
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      PEIG=E(NP)
      EIG=PEIG
      do_nrc_pair = .false.
      IF (( itriplet .GT. 0 .AND. eig .GT. 4*rm )) THEN
        itrip = dli_triplet*gle + bli_triplet
        ftrip = a_triplet(itrip,medium)*gle + b_triplet(itrip,medium)
        IF((rng_seed .GT. 128))call ranmar_get
        rnno34 = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        IF (( rnno34 .LT. ftrip )) THEN
          call sample_triplet
          return
        END IF
      END IF
      IF (( pair_nrc .EQ. 1 )) THEN
        k = eig/rm
        IF (( k .LT. nrcp_emax )) THEN
          do_nrc_pair = .true.
          IF (( k .LE. nrcp_emin )) THEN
            ibin = 1
          ELSE
            abin = 1 + log((k-2)/(nrcp_emin-2))*nrcp_dlei
            ibin = abin
            abin = abin - ibin
            IF((rng_seed .GT. 128))call ranmar_get
            rbin = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            IF((rbin .LT. abin))ibin = ibin + 1
          END IF
          xx = alias_sample1(64,nrcp_xdata, nrcp_fdata(1,ibin,medium),nr
     *    cp_wdata(1,ibin,medium), nrcp_idata(1,ibin,medium))
          IF (( xx .GT. 0.5 )) THEN
            pese1 = prm*(1 + xx*(k-2))
            iq1 = 1
            pese2 = peig - pese1
            iq2 = -1
          ELSE
            pese2 = prm*(1 + xx*(k-2))
            iq2 = 1
            pese1 = peig - pese2
            iq1 = -1
          END IF
        END IF
      END IF
      IF (( .NOT.do_nrc_pair )) THEN
        IF ((EIG.LE.2.1)) THEN
          IF((rng_seed .GT. 128))call ranmar_get
          RNNO30 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF((rng_seed .GT. 128))call ranmar_get
          rnno34 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          PESE2 = PRM + 0.5*RNNO30*(PEIG-2*PRM)
          PESE1 = PEIG - PESE2
          IF (( rnno34 .LT. 0.5 )) THEN
            iq1 = -1
            iq2 = 1
          ELSE
            iq1 = 1
            iq2 = -1
          END IF
        ELSE
          IF ((EIG.LT.50.)) THEN
            L = 5
            L1 = L + 1
            delta = 4*delcm(medium)/eig
            IF (( delta .LT. 1 )) THEN
              Amax = dl1(l,medium)+delta*(dl2(l,medium)+delta*dl3(l,medi
     *        um))
              Bmax = dl1(l1,medium)+delta*(dl2(l1,medium)+delta*dl3(l1,m
     *        edium))
            ELSE
              aux2 = log(delta+dl6(l,medium))
              Amax = dl4(l,medium)+dl5(l,medium)*aux2
              Bmax = dl4(l1,medium)+dl5(l1,medium)*aux2
            END IF
            aux1 = 1 - rmt2/eig
            aux1 = aux1*aux1
            aux1 = aux1*Amax/3
            aux1 = aux1/(Bmax+aux1)
          ELSE
            L = 7
            Amax = dl1(l,medium)
            Bmax = dl1(l+1,medium)
            aux1 = bpar(2,medium)*(1-bpar(1,medium)*rm/eig)
          END IF
          del0 = eig*delcm(medium)
          Eavail = eig - rmt2
25811     CONTINUE
            IF((rng_seed .GT. 128))call ranmar_get
            RNNO30 = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            IF((rng_seed .GT. 128))call ranmar_get
            RNNO31 = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            IF((rng_seed .GT. 128))call ranmar_get
            RNNO34 = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            IF (( rnno30 .GT. aux1 )) THEN
              br = 0.5*rnno31
              rejmax = Bmax
              l1 = l+1
            ELSE
              IF((rng_seed .GT. 128))call ranmar_get
              rnno32 = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF((rng_seed .GT. 128))call ranmar_get
              rnno33 = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              br = 0.5*(1-max(rnno31,rnno32,rnno33))
              rejmax = Amax
              l1 = l
            END IF
            Eminus = br*Eavail + rm
            Eplus = eig - Eminus
            delta = del0/(Eminus*Eplus)
            IF (( delta .LT. 1 )) THEN
              rejf = dl1(l1,medium)+delta*(dl2(l1,medium)+delta*dl3(l1,m
     *        edium))
            ELSE
              rejf = dl4(l1,medium)+dl5(l1,medium)*log(delta+dl6(l1,medi
     *        um))
            END IF
            IF((( rnno34*rejmax .LE. rejf )))GO TO25812
          GO TO 25811
25812     CONTINUE
          pese2 = Eminus
          pese1 = peig - pese2
          IF((rng_seed .GT. 128))call ranmar_get
          RNNO34 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF (( rnno34 .LT. 0.5 )) THEN
            iq1 = -1
            iq2 = 1
          ELSE
            iq1 = 1
            iq2 = -1
          END IF
        END IF
      END IF
      ESE2=PESE2
      E(NP)=PESE1
      E(NP+1)=PESE2
      IF (( iprdst .GT. 0 )) THEN
        IF (( iprdst .EQ. 4 )) THEN
          IF((rng_seed .GT. 128))call ranmar_get
          rtest = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          gbeta = PESE1/(PESE1+10)
          IF (( rtest .LT. gbeta )) THEN
            iprdst_use = 1
          ELSE
            iprdst_use = 4
          END IF
        ELSE IF(( iprdst .EQ. 2 .AND. eig .LT. 4.14 )) THEN
          iprdst_use = 1
        ELSE
          iprdst_use = iprdst
        END IF
        DO 25821 ichrg=1,2
          IF ((ICHRG.EQ.1)) THEN
            ESE=PESE1
          ELSE
            ESE=ESE2
            IF (( iprdst .EQ. 4 )) THEN
              gbeta = ESE/(ESE+10)
              IF((rng_seed .GT. 128))call ranmar_get
              rtest = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF (( rtest .LT. gbeta )) THEN
                iprdst_use = 1
              ELSE
                iprdst_use = 4
              END IF
            END IF
          END IF
          IF (( iprdst_use .EQ. 1 )) THEN
            PSE=SQRT(MAX(0.0,(ESE-RM)*(ESE+RM)))
            IF((rng_seed .GT. 128))call ranmar_get
            COSTHE = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            COSTHE=1.0-2.0*COSTHE
            SINTHE=RM*SQRT((1.0-COSTHE)*(1.0+COSTHE))/(PSE*COSTHE+ESE)
            COSTHE=(ESE*COSTHE+PSE)/(PSE*COSTHE+ESE)
          ELSE IF(( iprdst_use .EQ. 2 )) THEN
            ZTARG=ZBRANG(MEDIUM)
            TTEIG=EIG/RM
            TTESE=ESE/RM
            TTPSE=SQRT((TTESE-1.0)*(TTESE+1.0))
            ESEDEI=TTESE/(TTEIG-TTESE)
            ESEDER=1.0/ESEDEI
            XIMIN=1.0/(1.0+(3.141593*TTESE)**2)
            REJMIN = 2.0+3.0*(ESEDEI+ESEDER) - 4.00*(ESEDEI+ESEDER+1.0-4
     *      .0*(XIMIN-0.5)**2)*( 1.0+0.25*LOG( ((1.0+ESEDER)*(1.0+ESEDEI
     *      )/(2.*TTEIG))**2+ZTARG*XIMIN**2 ) )
            YA=(2.0/TTEIG)**2
            XITRY=MAX(0.01,MAX(XIMIN,MIN(0.5,SQRT(YA/ZTARG))))
            GALPHA=1.0+0.25*LOG(YA+ZTARG*XITRY**2)
            GBETA=0.5*ZTARG*XITRY/(YA+ZTARG*XITRY**2)
            GALPHA=GALPHA-GBETA*(XITRY-0.5)
            XIMID=GALPHA/(3.0*GBETA)
            IF ((GALPHA.GE.0.0)) THEN
              XIMID=0.5-XIMID+SQRT(XIMID**2+0.25)
            ELSE
              XIMID=0.5-XIMID-SQRT(XIMID**2+0.25)
            END IF
            XIMID=MAX(0.01,MAX(XIMIN,MIN(0.5,XIMID)))
            REJMID = 2.0+3.0*(ESEDEI+ESEDER) - 4.00*(ESEDEI+ESEDER+1.0-4
     *      .0*(XIMID-0.5)**2)*( 1.0+0.25*LOG( ((1.0+ESEDER)*(1.0+ESEDEI
     *      )/(2.*TTEIG))**2+ZTARG*XIMID**2 ) )
            REJTOP=1.02*MAX(REJMIN,REJMID)
25831       CONTINUE
              IF((rng_seed .GT. 128))call ranmar_get
              XITST = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              REJTST = 2.0+3.0*(ESEDEI+ESEDER) - 4.00*(ESEDEI+ESEDER+1.0
     *        -4.0*(XITST-0.5)**2)*( 1.0+0.25*LOG( ((1.0+ESEDER)*(1.0+ES
     *        EDEI)/(2.*TTEIG))**2+ZTARG*XITST**2 ) )
              IF((rng_seed .GT. 128))call ranmar_get
              RTEST = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              THETA=SQRT(1.0/XITST-1.0)/TTESE
              REJTST_on_REJTOP = REJTST/REJTOP
              IF((((RTEST .LE. REJTST_on_REJTOP) .AND. (THETA .LT. PI) )
     *        ))GO TO25832
            GO TO 25831
25832       CONTINUE
            SINTHE=SIN(THETA)
            COSTHE=COS(THETA)
          ELSE IF(( iprdst_use .EQ. 3 )) THEN
            IF((rng_seed .GT. 128))call ranmar_get
            COSTHE = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            COSTHE=1.0-2.0*COSTHE
            sinthe=(1-costhe)*(1+costhe)
            IF (( sinthe .GT. 0 )) THEN
              sinthe = sqrt(sinthe)
            ELSE
              sinthe = 0
            END IF
          ELSE
            IF((rng_seed .GT. 128))call ranmar_get
            costhe = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            costhe=1-2*sqrt(costhe)
            sinthe=(1-costhe)*(1+costhe)
            IF (( sinthe .GT. 0 )) THEN
              sinthe=sqrt(sinthe)
            ELSE
              sinthe=0
            END IF
          END IF
          IF (( ichrg .EQ. 1 )) THEN
            CALL UPHI(2,1)
          ELSE
            sinthe=-sinthe
            NP=NP+1
            CALL UPHI(3,2)
          END IF
25821   CONTINUE
25822   CONTINUE
        iq(np) = iq2
        iq(np-1) = iq1
        return
      ELSE
        THETA=0
      END IF
      CALL UPHI(1,1)
      NP=NP+1
      SINTHE=-SINTHE
      CALL UPHI(3,2)
      IQ(NP)=iq2
      IQ(NP-1)=iq1
      RETURN
      END
      subroutine sample_triplet
      implicit none
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 fmax_array(250), eta_p_array(250), eta_Ep_array(250), eta_c
     *ostp_array(250), eta_costm_array(250), ebin_array(250), wp_array(2
     *50), qmin_array(250)
      real*8 kmin, kmax, dlogki, alogkm, prmi, tiny_eta
      real*8 ai,rnno,k,qmin,qmax,aux,a1,a2,a3,D,px1,px2,pp_min,pp_max, E
     *p_min,Ep_max,k2p2,k2p2x,peig,b,aux1,aux12,D1,aux3,xmin,xmax, aux6,
     *aux7,uu,cphi,sphi,cphi_factor,aux5,phi,tmp
      real*8 Er,pr,pr2,eta_pr
      real*8 Ep,pp,pp2,wEp,cost_p,sint_p,eta_Ep,mup_min,wmup, eta_costp,
     *Epp,pp_sintp,pp_sntp2
      real*8 Em,pm,pm2,cost_m,sint_m,Emm,wmum,pm_sintm, eta_costm
      real*8 k2,k3,s2,s3,k2k3i,k22,k32,q2,aux4,S_1,S_2,sigma
      real*8 ppx, ppy, ppz, pmx, pmy, pmz, prx, pry, prz, a,c,sindel,cos
     *del,sinpsi
      integer*4 i
      logical use_it
      integer*4 iscore
      logical is_initialized
      data is_initialized/.false./
      save is_initialized,fmax_array,eta_p_array,eta_Ep_array,eta_costp_
     *array, eta_costm_array,ebin_array,wp_array,qmin_array, kmin,kmax,d
     *logki,alogkm,prmi,tiny_eta
      IF (( .NOT.is_initialized )) THEN
        is_initialized = .true.
        tiny_eta = 1e-6
        DO 25841 i=1,250
          fmax_array(i) = -1
25841   CONTINUE
25842   CONTINUE
        kmax = 0
        kmin = 4.1*prm
        DO 25851 i=1,nmed
          IF((up(i) .GT. kmax))kmax = UP(i)
25851   CONTINUE
25852   CONTINUE
        IF((kmax .LE. kmin))return
        dlogki = 250 - 1
        dlogki = dlogki/log(kmax/kmin)
        alogkm = 1 - dlogki*log(kmin)
        prmi = 1/prm
        DO 25861 i=1,250
          k = 4.1*exp((i-1.)/dlogki)
          ebin_array(i) = k
          qmin = 4*k/(k*(k-1)+(k+1)*sqrt(k*(k-4)))
          qmax = (k*(k-1) + (k+1)*sqrt(k*(k-4)))/(2*k+1)
          qmin_array(i) = qmin
          wp_array(i) = log(qmax/qmin)
25861   CONTINUE
25862   CONTINUE
      END IF
      peig = e(np)
      IF((peig .LE. 4*prm))return
      IF (( np+2 .GT. 10000 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','sample_tripl
     *et', ' stack size exceeded! ',' $MAXSTACK = ',10000,' np = ',np+2
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF (( peig .LE. kmin )) THEN
        i = 1
      ELSE IF(( peig .GE. kmax )) THEN
        i = 250
      ELSE
        ai = alogkm + dlogki*gle
        i = ai
        ai = ai - i
        IF((rng_seed .GT. 128))call ranmar_get
        rnno = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        IF (( rnno .LT. ai )) THEN
          i = i+1
        END IF
      END IF
      k = ebin_array(i)
25870 CONTINUE
      IF((rng_seed .GT. 128))call ranmar_get
      eta_pr = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      IF((eta_pr .LT. tiny_eta))eta_pr = tiny_eta
      pr = qmin_array(i)*exp(eta_pr*wp_array(i))
      pr2 = pr*pr
      Er = sqrt(1+pr2)
      aux = Er-pr-1
      a1=(k-pr)*(1-Er-k*aux)
      a2=1+k-Er
      a3=1/(aux*(pr+Er-2*k-1))
      D = a2*sqrt(aux*(2*k*Er+k*k*aux-pr*(Er+pr+1)/2))
      px1 = (a1 + D)*a3
      px2 = (a1 - D)*a3
      IF (( px1 .LT. px2 )) THEN
        pp_min = px1
        pp_max = px2
      ELSE
        pp_min = px2
        pp_max = px1
      END IF
      Ep_min = sqrt(1 + pp_min*pp_min)
      Ep_max = sqrt(1 + pp_max*pp_max)
      IF((rng_seed .GT. 128))call ranmar_get
      eta_Ep = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      IF((eta_Ep .LT. tiny_eta))eta_Ep = tiny_eta
      wEp = Ep_max - Ep_min
      Ep = Ep_min + eta_Ep*wEp
      pp2 = Ep*Ep - 1
      pp = sqrt(pp2)
      k2p2 = k*k + pp2
      Em = k + 1 - Er - Ep
      pm2 = Em*Em-1
      pm = sqrt(pm2)
      mup_min = (k2p2 - (pr + pm)*(pr + pm))/(2*k*pp)
      IF((rng_seed .GT. 128))call ranmar_get
      eta_costp = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      IF((eta_costp .LT. tiny_eta))eta_costp = tiny_eta
      Epp = Ep/pp
      wmup = log((Epp-1)/(Epp-mup_min))
      cost_p = Epp - (Epp - mup_min)*exp(wmup*eta_costp)
      wmup = wmup*(cost_p - Epp)
      sint_p = 1-cost_p*cost_p
      IF (( sint_p .GT. 1e-20 )) THEN
        sint_p = sqrt(sint_p)
      ELSE
        sint_p = 1e-10
      END IF
      k2p2x = k2p2 - 2*k*pp*cost_p
      b = pr2-k2p2x-pm2
      aux1 = k - pp*cost_p
      aux12 = aux1*aux1
      pp_sintp = pp*sint_p
      pp_sntp2 = pp_sintp*pp_sintp
      D1 = pm2*(aux12+pp_sntp2)-b*b/4
      IF (( D1 .LE. 0 )) THEN
        goto 25870
      END IF
      D = 2*pp_sintp*sqrt(D1)
      aux3 = 0.5/(aux12+pp_sntp2)
      xmin = (-b*aux1-D)*aux3
      xmax = (-b*aux1+D)*aux3
      IF((rng_seed .GT. 128))call ranmar_get
      eta_costm = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      IF((eta_costm .LT. tiny_eta))eta_costm = tiny_eta
      aux6 = sqrt((Em-xmin)/(Em-xmax))
      aux7 = aux6*tan(1.570796326794897*eta_costm)
      uu = (aux7-1)/(aux7+1)
      cost_m = 0.5*(xmax + xmin + 2*uu*(xmax-xmin)/(1+uu*uu))
      wmum = sqrt((xmax-cost_m)*(cost_m-xmin))
      wmum = wmum*aux6*(Em-cost_m)/(Em-xmin)
      cost_m = cost_m/pm
      sint_m = sqrt(1-cost_m*cost_m)
      pm_sintm = pm*sint_m
      cphi = (b + 2*pm*cost_m*aux1)/(2*pp_sintp*pm_sintm)
      IF (( abs(cphi) .GE. 1 )) THEN
        goto 25870
      END IF
      sphi = sqrt(1-cphi*cphi)
      k3 = k*(pp*cost_p - Ep)
      k2 = k*(pm*cost_m - Em)
      k22 = k2*k2
      k32 = k3*k3
      k2k3i = 1/(k2*k3)
      s2 = pp*pm*(cost_p*cost_m + sint_p*sint_m*cphi) - Ep*Em
      s3 = k2 - Em + 1 - s2
      q2 = 2*(Er-1)
      S_1 = k32+k22+(q2-2)*s2-(1-q2/2)*(k32+k22)*k2k3i
      aux4 = k3*Ep-k2*Em
      S_2 = -q2*(Ep*Ep+Em*Em) + 2*s2 - (2*aux4*aux4 - k22 - k32)*k2k3i
      sigma = abs(pp*pm2*pm*k2k3i/(q2*q2*(Em*s3+Er))*(S_1*(1-q2/4)+S_2*(
     *1+q2/4)))
      cphi_factor = abs(2*Er*pm2-Em*(k2p2x-pr2-pm2))/(2*pp_sintp*pm_sint
     *m*pm2*sphi)
      sigma = sigma*cphi_factor*wEp*wmup*wmum*wp_array(i)*pr2/Er
      IF (( sigma .LT. 0 )) THEN
        write(i_log,'(/a)') '***************** Warning: '
        write(i_log,*) 'In triplet sigma < 0 ? ',sigma
      END IF
      use_it = .true.
      IF (( sigma .LT. fmax_array(i) )) THEN
        IF((rng_seed .GT. 128))call ranmar_get
        rnno = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        IF (( sigma .LT. fmax_array(i)*rnno )) THEN
          use_it = .false.
        END IF
      END IF
      IF (( use_it )) THEN
        fmax_array(i) = sigma
        eta_p_array(i) = eta_pr
        eta_Ep_array(i) = eta_Ep
        eta_costp_array(i) = eta_costp
        eta_costm_array(i) = eta_costm
      ELSE
        eta_pr = eta_p_array(i)
        eta_Ep = eta_Ep_array(i)
        eta_costp = eta_costp_array(i)
        eta_costm = eta_costm_array(i)
      END IF
      k = peig*prmi
      aux5 = k*(k-1)+(k+1)*sqrt(k*(k-4))
      qmin = 4*k/aux5
      qmax = aux5/(2*k+1)
      pr = qmin*exp(eta_pr*log(qmax/qmin))
      pr2 = pr*pr
      Er = sqrt(1+pr2)
      aux = Er-pr-1
      a1=(k-pr)*(1-Er-k*aux)
      a2=1+k-Er
      a3=1/(aux*(pr+Er-2*k-1))
      D = a2*sqrt(aux*(2*k*Er+k*k*aux-pr*(Er+pr+1)/2))
      px1 = (a1 + D)*a3
      px2 = (a1 - D)*a3
      IF (( px1 .LT. px2 )) THEN
        pp_min = px1
        pp_max = px2
      ELSE
        pp_min = px2
        pp_max = px1
      END IF
      Ep_min = sqrt(1 + pp_min*pp_min)
      Ep_max = sqrt(1 + pp_max*pp_max)
      wEp = Ep_max - Ep_min
      Ep = Ep_min + eta_Ep*wEp
      pp2 = Ep*Ep - 1
      pp = sqrt(pp2)
      k2p2 = k*k + pp2
      Em = k + 1 - Er - Ep
      pm2 = Em*Em-1
      pm = sqrt(pm2)
      mup_min = (k2p2 - (pr + pm)*(pr + pm))/(2*k*pp)
      Epp = Ep/pp
      wmup = log((Epp-1)/(Epp-mup_min))
      cost_p = Epp - (Epp - mup_min)*exp(wmup*eta_costp)
      sint_p = sqrt(1-cost_p*cost_p)
      k2p2x = k2p2 - 2*k*pp*cost_p
      b = pr2-k2p2x-pm2
      aux1 = k - pp*cost_p
      aux12 = aux1*aux1
      pp_sintp = pp*sint_p
      pp_sntp2 = pp_sintp*pp_sintp
      D1 = pm2*(aux12+pp_sntp2)-b*b/4
      IF (( D1 .LE. 0 )) THEN
        goto 25870
      END IF
      D = 2*pp_sintp*sqrt(D1)
      aux3 = 0.5/(aux12+pp_sntp2)
      xmin = (-b*aux1-D)*aux3
      xmax = (-b*aux1+D)*aux3
      aux6 = sqrt((Em-xmin)/(Em-xmax))
      aux7 = aux6*tan(1.570796326794897*eta_costm)
      uu = (aux7-1)/(aux7+1)
      cost_m = 0.5*(xmax + xmin + 2*uu*(xmax-xmin)/(1+uu*uu))/pm
      sint_m = sqrt(1-cost_m*cost_m)
      pm_sintm = pm*sint_m
      cphi = (b + 2*pm*cost_m*aux1)/(2*pp_sintp*pm_sintm)
      IF (( abs(cphi) .GE. 1 )) THEN
        goto 25870
      END IF
      sphi = sqrt(1-cphi*cphi)
      IF((rng_seed .GT. 128))call ranmar_get
      phi = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      phi = phi*6.283185307179586
      ppx = pp*sint_p
      ppy = 0
      pmx = pm*sint_m*cphi
      pmy = pm*sint_m*sphi
      cphi = cos(phi)
      sphi = sin(phi)
      tmp = ppx*sphi
      ppx = ppx*cphi - ppy*sphi
      ppy = tmp + ppy*cphi
      tmp = pmx*sphi
      pmx = pmx*cphi - pmy*sphi
      pmy = tmp + pmy*cphi
      ppz = pp*cost_p
      pmz = pm*cost_m
      prx = -ppx-pmx
      pry = -ppy-pmy
      prz = k - ppz - pmz
      NPold = np
      X(np)=X(np)
      Y(np)=Y(np)
      Z(np)=Z(np)
      IR(np)=IR(np)
      WT(np)=WT(np)
      DNEAR(np)=DNEAR(np)
      LATCH(np)=LATCH(np)
      ZLAST(np)=ZLAST(np)
      NFTIME(np)=NFTIME(np)
      DO 25881 ISCORE=1,3
        NPASS(np,ISCORE)=NPASS(np,ISCORE)
25881 CONTINUE
25882 CONTINUE
      NSPLIT(np)=NSPLIT(np)
      IPHAT(np)=IPHAT(np)
      X(np+1)=X(np)
      Y(np+1)=Y(np)
      Z(np+1)=Z(np)
      IR(np+1)=IR(np)
      WT(np+1)=WT(np)
      DNEAR(np+1)=DNEAR(np)
      LATCH(np+1)=LATCH(np)
      ZLAST(np+1)=ZLAST(np)
      NFTIME(np+1)=NFTIME(np)
      DO 25891 ISCORE=1,3
        NPASS(np+1,ISCORE)=NPASS(np,ISCORE)
25891 CONTINUE
25892 CONTINUE
      NSPLIT(np+1)=NSPLIT(np)
      IPHAT(np+1)=IPHAT(np)
      X(np+2)=X(np+1)
      Y(np+2)=Y(np+1)
      Z(np+2)=Z(np+1)
      IR(np+2)=IR(np+1)
      WT(np+2)=WT(np+1)
      DNEAR(np+2)=DNEAR(np+1)
      LATCH(np+2)=LATCH(np+1)
      ZLAST(np+2)=ZLAST(np+1)
      NFTIME(np+2)=NFTIME(np+1)
      DO 25901 ISCORE=1,3
        NPASS(np+2,ISCORE)=NPASS(np+1,ISCORE)
25901 CONTINUE
25902 CONTINUE
      NSPLIT(np+2)=NSPLIT(np+1)
      IPHAT(np+2)=IPHAT(np+1)
      pp = 1/pp
      pm = 1/pm
      pr = 1/pr
      a = u(np)
      b = v(np)
      c = w(np)
      sinpsi = a*a + b*b
      IF (( sinpsi .GT. 1e-20 )) THEN
        sinpsi = sqrt(sinpsi)
        sindel = b/sinpsi
        cosdel = a/sinpsi
        IF (( Ep .GT. Em )) THEN
          u(np) = pp*(c*cosdel*ppx - sindel*ppy + a*ppz)
          v(np) = pp*(c*sindel*ppx + cosdel*ppy + b*ppz)
          w(np) = pp*(c*ppz - sinpsi*ppx)
          iq(np) = 1
          E(np) = Ep*prm
          u(np+1) = pm*(c*cosdel*pmx - sindel*pmy + a*pmz)
          v(np+1) = pm*(c*sindel*pmx + cosdel*pmy + b*pmz)
          w(np+1) = pm*(c*pmz - sinpsi*pmx)
          iq(np+1) = -1
          E(np+1) = Em*prm
        ELSE
          u(np+1) = pp*(c*cosdel*ppx - sindel*ppy + a*ppz)
          v(np+1) = pp*(c*sindel*ppx + cosdel*ppy + b*ppz)
          w(np+1) = pp*(c*ppz - sinpsi*ppx)
          iq(np+1) = 1
          E(np+1) = Ep*prm
          u(np) = pm*(c*cosdel*pmx - sindel*pmy + a*pmz)
          v(np) = pm*(c*sindel*pmx + cosdel*pmy + b*pmz)
          w(np) = pm*(c*pmz - sinpsi*pmx)
          iq(np) = -1
          E(np) = Em*prm
        END IF
        np = np + 2
        u(np) = pr*(c*cosdel*prx - sindel*pry + a*prz)
        v(np) = pr*(c*sindel*prx + cosdel*pry + b*prz)
        w(np) = pr*(c*prz - sinpsi*prx)
        iq(np) = -1
        E(np) = Er*prm
      ELSE
        IF (( Ep .GT. Em )) THEN
          u(np) = pp*ppx
          v(np) = pp*ppy
          w(np) = c*pp*ppz
          iq(np) = 1
          E(np) = Ep*prm
          u(np+1) = pm*pmx
          v(np+1) = pm*pmy
          w(np+1) = c*pm*pmz
          iq(np+1) = -1
          E(np+1) = Em*prm
        ELSE
          u(np+1) = pp*ppx
          v(np+1) = pp*ppy
          w(np+1) = c*pp*ppz
          iq(np+1) = 1
          E(np+1) = Ep*prm
          u(np) = pm*pmx
          v(np) = pm*pmy
          w(np) = c*pm*pmz
          iq(np) = -1
          E(np) = Em*prm
        END IF
        np = np + 2
        u(np) = pr*prx
        v(np) = pr*pry
        w(np) = c*pr*prz
        iq(np) = -1
        E(np) = Er*prm
      END IF
      return
      end
      SUBROUTINE PHOTO
      implicit none
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L(3000),IPHTER(3000)
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/PHOTIN/ EBINDA(12), GE0(12),GE1(12), GMFP0(2000,12),GMFP1(2
     *000,12),GBR10(2000,12),GBR11(2000,12),GBR20(2000,12),GBR21(2000,12
     *), RCO0(12),RCO1(12), RSCT0(100,12),RSCT1(100,12), COHE0(2000,12),
     *COHE1(2000,12),  PHOTONUC0(2000,12),PHOTONUC1(2000,12), DPMFP, MPG
     *EM(1,12), NGR(12)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/x_options/eadl_relax,  mcdf_pe_xsections
      logical eadl_relax, mcdf_pe_xsections
      common/egs_vr/ e_max_rr(3000),  prob_RR,  nbr_split,  i_play_RR,
     *    i_survived_RR,
     *        n_RR_warning,                                        i_do_
     *rr(3000)
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common/relax_data/ relax_first(3000),  relax_ntran(3000),  relax_s
     *tate(10000),  relax_prob(10000),  relax_atbin(10000),  relax_ntot
      real*8 relax_prob
      integer*4 relax_first, relax_ntran, relax_state, relax_atbin, rela
     *x_ntot
      real*8 EELEC,  BETA,  GAMMA,  ALPHA,  RATIO,  RNPHT,  FKAPPA, XI,
     * SINTH2, RNPHT2
      DOUBLE PRECISION PEIG
      real*8 BR,  sigma,  aux,aux1,  probs(50),  sigtot,  e_vac,  rnno_R
     *R
      integer*4 IARG,  iZ,   irl,  ints(50),  j,ip,  n_warning,  k
      logical do_relax
      save n_warning
      data n_warning/0/
      IF (( mcdf_pe_xsections )) THEN
        call egs_shellwise_photo()
        return
      END IF
      NPold = NP
      PEIG=E(NP)
      irl = ir(np)
      IF (( peig .LT. edge_energies(2,1) )) THEN
        IF (( n_warning .LT. 100 )) THEN
          n_warning = n_warning + 1
          write(i_log,*) ' Subroutine PHOTO called with E = ',peig, ' wh
     *ich is below the current min. energy of 1 keV! '
          write(i_log,*) ' Converting now this photon to an electron, '
          write(i_log,*) ' but you should check your code! '
        END IF
        iq(np) = -1
        e(np) = peig + prm
        return
      END IF
      iZ = iedgfl(irl)
      do_relax = .false.
      edep = pzero
      IF (( iedgfl(irl) .NE. 0 )) THEN
        IF (( nne(medium) .EQ. 1 )) THEN
          iZ = int( zelem(medium,1) + 0.5 )
          DO 25911 j=1,edge_number(iZ)
            IF((peig .GE. edge_energies(j,iZ)))GO TO25912
25911     CONTINUE
25912     CONTINUE
        ELSE
          aux = peig*peig
          aux1 = aux*peig
          aux = aux*Sqrt(peig)
          sigtot = 0
          DO 25921 k=1,nne(medium)
            iZ = int( zelem(medium,k) + 0.5 )
            IF (( iZ .LT. 1 .OR. iZ .GT. 100 )) THEN
              write(i_log,*) ' Error in PHOTO: '
              write(i_log,'(/a)') '***************** Error: '
              write(i_log,*) '   Atomic number of element ',k, ' in medi
     *um ',medium,' is not between 1 and ',100
              write(i_log,'(/a)') '***************** Quiting now.'
              call exit(1)
            END IF
            IF (( peig .GT. edge_energies(1,iZ) )) THEN
              j = 1
              sigma = (edge_a(1,iZ) + edge_b(1,iZ)/peig + edge_c(1,iZ)/a
     *        ux + edge_d(1,iZ)/aux1)/peig
            ELSE
              DO 25931 j=2,edge_number(iZ)
                IF((peig .GE. edge_energies(j,iZ)))GO TO25932
25931         CONTINUE
25932         CONTINUE
              sigma = edge_a(j,iZ) + gle*(edge_b(j,iZ) + gle*(edge_c(j,i
     *        Z) + gle*edge_d(j,iZ) ))
              sigma = Exp(sigma)
            END IF
            sigma = sigma * pz(medium,k)
            sigtot = sigtot + sigma
            probs(k) = sigma
            ints(k) = j
25921     CONTINUE
25922     CONTINUE
          IF((rng_seed .GT. 128))call ranmar_get
          br = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          br = br*sigtot
          DO 25941 k=1,nne(medium)
            br = br - probs(k)
            IF((br .LE. 0))GO TO25942
25941     CONTINUE
25942     CONTINUE
          iZ = int( zelem(medium,k) + 0.5 )
          j = ints(k)
        END IF
        IF (( peig .LE. binding_energies(6,iZ) )) THEN
          iq(np) = -1
          e(np) = peig + prm
        ELSE
          IF((rng_seed .GT. 128))call ranmar_get
          br = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          DO 25951 k=1,5
            IF (( peig .GT. binding_energies(k,iZ) )) THEN
              IF((br .LT. interaction_prob(k,iZ)))GO TO25952
              br = (br - interaction_prob(k,iZ))/(1-interaction_prob(k,i
     *        Z))
            END IF
25951     CONTINUE
25952     CONTINUE
          IF ((eadl_relax .AND. k .GT. 4)) THEN
            iq(np) = -1
            e(np) = peig + prm
          ELSE
            e_vac = binding_energies(k,iZ)
            e(np) = peig - e_vac + prm
            do_relax = .true.
            iq(np) = -1
          END IF
        END IF
      ELSE
        e(np) = peig + prm
        iq(np) = -1
      END IF
      IF (( iq(np) .EQ. -1 )) THEN
        IF ((IPHTER(IR(NP)).EQ.1)) THEN
          EELEC=E(NP)
          IF ((EELEC.GT.ECUT(IR(NP)))) THEN
            BETA=SQRT((EELEC-RM)*(EELEC+RM))/EELEC
            GAMMA=EELEC/RM
            ALPHA=0.5*GAMMA-0.5+1./GAMMA
            RATIO=BETA/ALPHA
25961       CONTINUE
              IF((rng_seed .GT. 128))call ranmar_get
              RNPHT = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              RNPHT=2.*RNPHT-1.
              IF ((RATIO.LE.0.2)) THEN
                FKAPPA=RNPHT+0.5*RATIO*(1.-RNPHT)*(1.+RNPHT)
                IF (( gamma .LT. 100 )) THEN
                  COSTHE=(BETA+FKAPPA)/(1.+BETA*FKAPPA)
                ELSE
                  IF (( fkappa .GT. 0 )) THEN
                    costhe = 1 - (1-fkappa)*(gamma-3)/(2*(1+fkappa)*(gam
     *              ma-1)**3)
                  ELSE
                    COSTHE=(BETA+FKAPPA)/(1.+BETA*FKAPPA)
                  END IF
                END IF
                xi = (1+beta*fkappa)*gamma*gamma
              ELSE
                XI=GAMMA*GAMMA*(1.+ALPHA*(SQRT(1.+RATIO*(2.*RNPHT+RATIO)
     *          )-1.))
                COSTHE=(1.-1./XI)/BETA
              END IF
              SINTH2=MAX(0.,(1.-COSTHE)*(1.+COSTHE))
              IF((rng_seed .GT. 128))call ranmar_get
              RNPHT2 = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF(RNPHT2.LE.0.5*(1.+GAMMA)*SINTH2*XI/GAMMA)GO TO25962
            GO TO 25961
25962       CONTINUE
            SINTHE=SQRT(SINTH2)
            CALL UPHI(2,1)
          END IF
        END IF
      END IF
      IF (( do_relax )) THEN
        call relax(e_vac,k,iZ)
      END IF
      IF (( EDEP .GT. 0 )) THEN
        iarg = 4
        IF (( iausfl(iarg+1) .NE. 0 )) THEN
          call ausgab(iarg)
          IF (( wt(np) .LE. 0 )) THEN
            np = np-1
            return
          END IF
        END IF
      END IF
      i_survived_RR = 0
      IF (( i_play_RR .EQ. 1 )) THEN
        IF (( prob_RR .LE. 0 )) THEN
          IF (( n_RR_warning .LT. 50 )) THEN
            n_RR_warning = n_RR_warning + 1
            WRITE(6,25970)prob_RR
25970       FORMAT('**** Warning, attempt to play Roussian Roulette with
     * prob_RR<=0! ',g14.6)
          END IF
        ELSE
          ip = NPold
25981     CONTINUE
            IF (( iq(ip) .NE. 0 )) THEN
              IF((rng_seed .GT. 128))call ranmar_get
              rnno_RR = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF (( rnno_RR .LT. prob_RR )) THEN
                wt(ip) = wt(ip)/prob_RR
                ip = ip + 1
              ELSE
                i_survived_RR = i_survived_RR + 1
                IF ((ip .LT. np)) THEN
                  e(ip) = e(np)
                  iq(ip) = iq(np)
                  wt(ip) = wt(np)
                  u(ip) = u(np)
                  v(ip) = v(np)
                  w(ip) = w(np)
                END IF
                np = np-1
              END IF
            ELSE
              ip = ip+1
            END IF
            IF(((ip .GT. np)))GO TO25982
          GO TO 25981
25982     CONTINUE
          IF (( np .EQ. 0 )) THEN
            np = 1
            e(np) = 0
            iq(np) = 0
            wt(np) = 0
          END IF
        END IF
      END IF
      return
      end
      subroutine egs_shellwise_photo
      implicit none
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L(3000),IPHTER(3000)
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/PHOTIN/ EBINDA(12), GE0(12),GE1(12), GMFP0(2000,12),GMFP1(2
     *000,12),GBR10(2000,12),GBR11(2000,12),GBR20(2000,12),GBR21(2000,12
     *), RCO0(12),RCO1(12), RSCT0(100,12),RSCT1(100,12), COHE0(2000,12),
     *COHE1(2000,12),  PHOTONUC0(2000,12),PHOTONUC1(2000,12), DPMFP, MPG
     *EM(1,12), NGR(12)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/x_options/eadl_relax,  mcdf_pe_xsections
      logical eadl_relax, mcdf_pe_xsections
      common/egs_vr/ e_max_rr(3000),  prob_RR,  nbr_split,  i_play_RR,
     *    i_survived_RR,
     *        n_RR_warning,                                        i_do_
     *rr(3000)
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common/relax_data/ relax_first(3000),  relax_ntran(3000),  relax_s
     *tate(10000),  relax_prob(10000),  relax_atbin(10000),  relax_ntot
      real*8 relax_prob
      integer*4 relax_first, relax_ntran, relax_state, relax_atbin, rela
     *x_ntot
      common/pe_shell_data/ pe_xsection(500,100,0:16),  pe_elem_prob(500
     *,100,12),   pe_energy(500,100),  pe_zsorted(100,12), pe_be(100,16)
     *,  pe_nshell(100),  pe_zpos(100),  pe_nge(100),  pe_ne
      real*8 pe_be, pe_energy, pe_xsection, pe_elem_prob
      integer*4 pe_zsorted, pe_nshell, pe_zpos, pe_nge, pe_ne
      real*8 EELEC,  BETA,  GAMMA,  ALPHA,  RATIO,  RNPHT,  FKAPPA, XI,
     * SINTH2, RNPHT2
      DOUBLE PRECISION PEIG
      real*8 BR,  sigma,  aux,aux1,  probs(50),  sigtot,  e_vac,  rnno_R
     *R
      integer*4 IARG,  iZ,   irl,  ints(50),  j,ip,  n_warning,  k
      logical do_relax
      save n_warning
      real*8 slope, logE, int_prob
      integer*4 zpos, ibsearch
      data n_warning/0/
      NPold = NP
      PEIG=E(NP)
      irl = ir(np)
      do_relax = .false.
      IF (( peig .LT. 0.001 )) THEN
        IF (( n_warning .LT. 100 )) THEN
          n_warning = n_warning + 1
          write(i_log,*) ' Subroutine egs_shellwise_photo called with E
     *= ', peig,' which is below the current min. energy of ', 0.001,' k
     *eV! '
          write(i_log,*) ' Converting now this photon to an electron, '
          write(i_log,*) ' but you should check your code! '
        END IF
        iq(np) = -1
        e(np) = peig + prm
        return
      END IF
      edep = pzero
      IF (( iedgfl(irl) .NE. 0 )) THEN
        j = -1
        IF (( nne(medium) .EQ. 1 )) THEN
          iZ = int( zelem(medium,1) + 0.5 )
          zpos = pe_zpos(iZ)
          IF (( pe_nshell(zpos) .GT. 0)) THEN
            logE = log(peig)
            j = ibsearch(logE,pe_nge(zpos),pe_energy(1,zpos))
          END IF
        ELSE
          IF((rng_seed .GT. 128))call ranmar_get
          br = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          logE = log(peig)
          DO 25991 k=nne(medium),1,-1
            iZ = int( zelem(medium,k) + 0.5 )
            zpos = pe_zpos(iZ)
            IF (( iZ .LT. 1 .OR. iZ .GT. 100 )) THEN
              write(i_log,*) ' Error in egs_shellwise_photo: '
              write(i_log,'(/a)') '***************** Error: '
              write(i_log,*) '   Atomic number of element ',k, ' in medi
     *um ',medium,' is not between 1 and ',100
              write(i_log,'(/a)') '***************** Quiting now.'
              call exit(1)
            END IF
            j = ibsearch(logE,pe_nge(zpos),pe_energy(1,zpos))
            slope = pe_elem_prob(j+1,k,medium) - pe_elem_prob(j,k,medium
     *      )
            slope = slope/(pe_energy(j+1,zpos)-pe_energy(j,zpos))
            int_prob = pe_elem_prob(j,k,medium)+slope*(logE-pe_energy(j,
     *      zpos))
            br = br - exp(int_prob)
            IF((br .LE. 0))GO TO25992
25991     CONTINUE
25992     CONTINUE
        END IF
        IF (( peig .LT. pe_be(zpos,pe_nshell(zpos)) .OR. pe_nshell(zpos)
     *   .EQ. 0 )) THEN
          iq(np) = -1
          e(np) = peig + prm
        ELSE
          IF((rng_seed .GT. 128))call ranmar_get
          br = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          sigtot = 0
          DO 26001 k=1,pe_nshell(zpos)
            IF (( peig .GT. pe_be(zpos,k) )) THEN
              slope = pe_xsection(j+1,zpos,k) - pe_xsection(j,zpos,k)
              slope = slope/(pe_energy(j+1,zpos)-pe_energy(j,zpos))
              int_prob=pe_xsection(j,zpos,k)+slope*(logE-pe_energy(j,zpo
     *        s))
              br = br - exp(int_prob)
              sigtot = sigtot + exp(int_prob)
              IF((br .LE. 0))GO TO26002
            END IF
26001     CONTINUE
26002     CONTINUE
          IF ((k .GT. pe_nshell(zpos))) THEN
            iq(np) = -1
            e(np) = peig + prm
          ELSE
            e_vac = pe_be(zpos,k)
            e(np) = peig - e_vac + prm
            do_relax = .true.
            iq(np) = -1
          END IF
        END IF
      ELSE
        e(np) = peig + prm
        iq(np) = -1
      END IF
      IF (( iq(np) .EQ. -1 )) THEN
        IF ((IPHTER(IR(NP)).EQ.1)) THEN
          EELEC=E(NP)
          IF ((EELEC.GT.ECUT(IR(NP)))) THEN
            BETA=SQRT((EELEC-RM)*(EELEC+RM))/EELEC
            GAMMA=EELEC/RM
            ALPHA=0.5*GAMMA-0.5+1./GAMMA
            RATIO=BETA/ALPHA
26011       CONTINUE
              IF((rng_seed .GT. 128))call ranmar_get
              RNPHT = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              RNPHT=2.*RNPHT-1.
              IF ((RATIO.LE.0.2)) THEN
                FKAPPA=RNPHT+0.5*RATIO*(1.-RNPHT)*(1.+RNPHT)
                IF (( gamma .LT. 100 )) THEN
                  COSTHE=(BETA+FKAPPA)/(1.+BETA*FKAPPA)
                ELSE
                  IF (( fkappa .GT. 0 )) THEN
                    costhe = 1 - (1-fkappa)*(gamma-3)/(2*(1+fkappa)*(gam
     *              ma-1)**3)
                  ELSE
                    COSTHE=(BETA+FKAPPA)/(1.+BETA*FKAPPA)
                  END IF
                END IF
                xi = (1+beta*fkappa)*gamma*gamma
              ELSE
                XI=GAMMA*GAMMA*(1.+ALPHA*(SQRT(1.+RATIO*(2.*RNPHT+RATIO)
     *          )-1.))
                COSTHE=(1.-1./XI)/BETA
              END IF
              SINTH2=MAX(0.,(1.-COSTHE)*(1.+COSTHE))
              IF((rng_seed .GT. 128))call ranmar_get
              RNPHT2 = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF(RNPHT2.LE.0.5*(1.+GAMMA)*SINTH2*XI/GAMMA)GO TO26012
            GO TO 26011
26012       CONTINUE
            SINTHE=SQRT(SINTH2)
            CALL UPHI(2,1)
          END IF
        END IF
      END IF
      IF (( do_relax )) THEN
        call egs_eadl_relax(iZ,k)
      END IF
      IF (( EDEP .GT. 0 )) THEN
        iarg = 4
        IF (( iausfl(iarg+1) .NE. 0 )) THEN
          call ausgab(iarg)
          IF (( wt(np) .LE. 0 )) THEN
            np = np-1
            return
          END IF
        END IF
      END IF
      i_survived_RR = 0
      IF (( i_play_RR .EQ. 1 )) THEN
        IF (( prob_RR .LE. 0 )) THEN
          IF (( n_RR_warning .LT. 50 )) THEN
            n_RR_warning = n_RR_warning + 1
            WRITE(6,26020)prob_RR
26020       FORMAT('**** Warning, attempt to play Roussian Roulette with
     * prob_RR<=0! ',g14.6)
          END IF
        ELSE
          ip = NPold
26031     CONTINUE
            IF (( iq(ip) .NE. 0 )) THEN
              IF((rng_seed .GT. 128))call ranmar_get
              rnno_RR = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF (( rnno_RR .LT. prob_RR )) THEN
                wt(ip) = wt(ip)/prob_RR
                ip = ip + 1
              ELSE
                i_survived_RR = i_survived_RR + 1
                IF ((ip .LT. np)) THEN
                  e(ip) = e(np)
                  iq(ip) = iq(np)
                  wt(ip) = wt(np)
                  u(ip) = u(np)
                  v(ip) = v(np)
                  w(ip) = w(np)
                END IF
                np = np-1
              END IF
            ELSE
              ip = ip+1
            END IF
            IF(((ip .GT. np)))GO TO26032
          GO TO 26031
26032     CONTINUE
          IF (( np .EQ. 0 )) THEN
            np = 1
            e(np) = 0
            iq(np) = 0
            wt(np) = 0
          END IF
        END IF
      END IF
      return
      end
      subroutine egs_read_shellwise_pe
      implicit none
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L(3000),IPHTER(3000)
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/PHOTIN/ EBINDA(12), GE0(12),GE1(12), GMFP0(2000,12),GMFP1(2
     *000,12),GBR10(2000,12),GBR11(2000,12),GBR20(2000,12),GBR21(2000,12
     *), RCO0(12),RCO1(12), RSCT0(100,12),RSCT1(100,12), COHE0(2000,12),
     *COHE1(2000,12),  PHOTONUC0(2000,12),PHOTONUC1(2000,12), DPMFP, MPG
     *EM(1,12), NGR(12)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      common/x_options/eadl_relax,  mcdf_pe_xsections
      logical eadl_relax, mcdf_pe_xsections
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/pe_shell_data/ pe_xsection(500,100,0:16),  pe_elem_prob(500
     *,100,12),   pe_energy(500,100),  pe_zsorted(100,12), pe_be(100,16)
     *,  pe_nshell(100),  pe_zpos(100),  pe_nge(100),  pe_ne
      real*8 pe_be, pe_energy, pe_xsection, pe_elem_prob
      integer*4 pe_zsorted, pe_nshell, pe_zpos, pe_nge, pe_ne
      integer*4 lnblnk1,egs_get_unit,pe_sw_unit,ounit,egs_open_file
      integer*4 sorted(100),i,j,k,l,m
      real*8 z_sorted(100),pz_sorted(100)
      real*8 rest_xs(500,100)
      real*8 tmp_e(500,16), tmp_xs(500,16)
      real*8 new_e(500),deltaEb,slope
      integer*4 zread(100),ib(16),ibsearch
      character data_dir*128,pe_sw_file*144
      integer*4 medio,iZ,iZpos,egs_read_int,pos,curr_rec
      real*4 egs_read_real,e_r, e_old,sigma_r
      integer*2 nz, egs_read_short,ish, i_nshell,i_nge
      logical is_open, is_there, shift_required
      character*3 labels(16)
      data labels/'  K',' L1',' L2',' L3', ' M1',' M2',' M3',' M4',' M5'
     *, ' N1',' N2',' N3',' N4',' N5',' N6',' N7'/
      write(i_log,'(/a$)') ' Reading renormalized photoelectric cross se
     *ctions ......'
      data_dir = hen_house(:lnblnk1(hen_house)) // 'data' // '/'
      pe_sw_file = data_dir(:lnblnk1(data_dir)) // 'photo_shellwise.data
     *'
      pe_sw_unit = egs_get_unit(0)
      IF (( pe_sw_unit .LT. 1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'egs_init_shellwise_pe: failed to get a free Fort
     *ran I/O unit'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      open(pe_sw_unit,file=pe_sw_file,status='old', form='UNFORMATTED',A
     *CCESS='direct',recl=1, err=26040)
      GOTO 26050
26040 write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(2a)') 'egs_init_shellwise_pe: failed to open ', pe_s
     *w_file
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
26050 is_open = .true.
      DO 26061 medio=1,nmed
        DO 26071 i=1,nne(medio)
          pe_nshell(i*medio) = 0
          pe_nge(i*medio) = 0
          pe_zsorted(i,medio) = 0
26071   CONTINUE
26072   CONTINUE
26061 CONTINUE
26062 CONTINUE
      DO 26081 l=1,100
        pe_zpos(l) = -1
        DO 26091 k=1,500
          pe_energy(k,l) = 0.0
          DO 26101 m=1,16
            pe_xsection(k,l,m) = 0.0
26101     CONTINUE
26102     CONTINUE
26091   CONTINUE
26092   CONTINUE
        DO 26111 k=1,16
          pe_be(l,k) = -99
26111   CONTINUE
26112   CONTINUE
26081 CONTINUE
26082 CONTINUE
      curr_rec = 1
      iZpos = 0
      nz = egs_read_short(pe_sw_unit,curr_rec)
      DO 26121 medio=1,nmed
        DO 26131 i=1,nne(medio)
          z_sorted(i) = zelem(medio,i)
26131   CONTINUE
26132   CONTINUE
        call egs_heap_sort(nne(medio),z_sorted,sorted)
        DO 26141 i=1,nne(medio)
          pe_zsorted(i,medio) = z_sorted(i)
26141   CONTINUE
26142   CONTINUE
        DO 26151 i=1,nne(medio)
          iZ = z_sorted(i)
          is_there = .false.
          DO 26161 j=1,medio-1
            DO 26171 k=1,nne(j)
              IF (( iZ .EQ. pe_zsorted(k,j) )) THEN
                is_there = .true.
                GO TO26172
              END IF
26171       CONTINUE
26172       CONTINUE
26161     CONTINUE
26162     CONTINUE
          IF((is_there))GO TO26151
          iZpos = iZpos + 1
          zread(iZpos) = iZ
          pe_zpos(iZ) = iZpos
          pos = 3 + (iZ-1)*4
          curr_rec = egs_read_int(pe_sw_unit,pos) + 1
          i_nge = egs_read_short(pe_sw_unit,curr_rec)
          i_nshell = egs_read_short(pe_sw_unit,curr_rec)
          pe_nge(iZpos) = i_nge
          pe_nshell(iZpos) = i_nshell
          e_old = -1.0
          ish = 0
          DO 26181 j=1,i_nge
            e_r = egs_read_real(pe_sw_unit,curr_rec)
            sigma_r = egs_read_real(pe_sw_unit,curr_rec)
            pe_energy(j,iZpos) = e_r
            pe_xsection(j,iZpos,0) = sigma_r
            rest_xs(j,iZpos) = sigma_r
            DO 26191 k=1,i_nshell
              sigma_r = egs_read_real(pe_sw_unit,curr_rec)
              pe_xsection(j,iZpos,k) = sigma_r
              rest_xs(j,iZpos) = rest_xs(j,iZpos) - sigma_r
26191       CONTINUE
26192       CONTINUE
            IF ((e_r - e_old .LT. 1e-15)) THEN
              pe_be(iZpos,i_nshell-ish) = e_r
              ish = ish + 1
            END IF
            e_old = e_r
26181     CONTINUE
26182     CONTINUE
26151   CONTINUE
26152   CONTINUE
26121 CONTINUE
26122 CONTINUE
      pe_ne = iZpos
      DO 26201 i=1,pe_ne
        iZ = zread(i)
        IF ((pe_nshell(i) .EQ. 0)) THEN
          DO 26211 j=1,pe_nge(i)
            pe_energy(j,i) = log(pe_energy(j,i))
26211     CONTINUE
26212     CONTINUE
          GO TO26201
        END IF
        DO 26221 l=1,pe_nshell(i)
          IF (( pe_be(i,l) .NE. binding_energies(l,iZ))) THEN
            shift_required = .true.
            deltaEb = binding_energies(l,iZ)-pe_be(i,l)
          ELSE
            shift_required =.false.
          END IF
          is_there = .false.
          DO 26231 j=1,pe_nge(i)
            tmp_e(j,l) = pe_energy(j,i)
            tmp_xs(j,l) = pe_xsection(j,i,l)
            IF (( shift_required .AND. pe_energy(j,i) .GE. pe_be(i,l) ))
     *       THEN
              tmp_e(j,l) = tmp_e(j,l) + deltaEb
              IF ((pe_energy(j,i) .EQ. pe_be(i,l) .AND. .NOT.is_there))
     *        THEN
                ib(l) = j
                is_there = .true.
              END IF
              IF ((l .EQ. 1)) THEN
                new_e(j) = tmp_e(j,l)
              ELSE IF((j .LT. ib(l-1))) THEN
                new_e(j) = tmp_e(j,l)
              END IF
            END IF
26231     CONTINUE
26232     CONTINUE
          pe_be(i,l) = binding_energies(l,iZ)
26221   CONTINUE
26222   CONTINUE
        DO 26241 l=2,pe_nshell(i)
          DO 26251 j=1,pe_nge(i)
            IF (( new_e(j) .GE. pe_be(i,l-1) )) THEN
              m = ibsearch(new_e(j),pe_nge(i),tmp_e(1,l))
              slope = log(tmp_xs(m+1,l)/tmp_xs(m,l))
              slope = slope/log(tmp_e(m+1,l)/tmp_e(m,l))
              pe_xsection(j,i,l) = log(tmp_xs(m,l))
              pe_xsection(j,i,l) = pe_xsection(j,i,l) + slope*log(new_e(
     *        j)/tmp_e(m,l))
              pe_xsection(j,i,l) = exp(pe_xsection(j,i,l))
            END IF
26251     CONTINUE
26252     CONTINUE
26241   CONTINUE
26242   CONTINUE
        DO 26261 j=1,pe_nge(i)
          IF (( j .LT. ib(pe_nshell(i)))) THEN
            new_e(j) = pe_energy(j,i)
          END IF
          m = ibsearch(new_e(j),pe_nge(i),pe_energy(1,i))
          slope = log(rest_xs(m+1,i)/rest_xs(m,i))
          slope = slope/log(pe_energy(m+1,i)/pe_energy(m,i))
          pe_xsection(j,i,0) = log(rest_xs(m,i))
          pe_xsection(j,i,0) = pe_xsection(j,i,0) + slope*log(new_e(j)/p
     *    e_energy(m,i))
          pe_xsection(j,i,0) = exp(pe_xsection(j,i,0))
          DO 26271 l=1,pe_nshell(i)
            pe_xsection(j,i,0) = pe_xsection(j,i,0) + pe_xsection(j,i,l)
26271     CONTINUE
26272     CONTINUE
26261   CONTINUE
26262   CONTINUE
        DO 26281 j=1,pe_nge(i)
          pe_energy(j,i) = log(new_e(j))
          DO 26291 l=1,pe_nshell(i)
            pe_xsection(j,i,l) = log(pe_xsection(j,i,l)/pe_xsection(j,i,
     *      0))
26291     CONTINUE
26292     CONTINUE
26281   CONTINUE
26282   CONTINUE
26201 CONTINUE
26202 CONTINUE
      write(i_log,'(a/)') ' done'
      IF((is_open))close(pe_sw_unit)
      return
      end
      SUBROUTINE RELAX(energy,n,iZ)
      implicit none
      integer*4 n,iZ
      real*8 energy
      integer*4 vac_array(50),  n_vac,  shell
      integer*4 final,finala,  final1,final2,   iql,  irl
      integer*4 first_transition(5), last_transition(5)
      integer*4 final_state(39)
      integer*4 k, np_old, ip, iarg
      real*8 e_array(50),  Ei,Ef,  Ex,  eta,  e_check,  min_E,ekcut,pkcu
     *t,elcut
      real*8 xphi,yphi,xphi2,yphi2,rhophi2, cphi,sphi
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L(3000),IPHTER(3000)
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/relax_data/ relax_first(3000),  relax_ntran(3000),  relax_s
     *tate(10000),  relax_prob(10000),  relax_atbin(10000),  relax_ntot
      real*8 relax_prob
      integer*4 relax_first, relax_ntran, relax_state, relax_atbin, rela
     *x_ntot
      common/x_options/eadl_relax,  mcdf_pe_xsections
      logical eadl_relax, mcdf_pe_xsections
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      common/user_relax/ u_relax,ish_relax,iZ_relax
      real*8 u_relax
      integer*4 ish_relax, iZ_relax
      data first_transition/1,20,27,33,38/
      data last_transition/19,26,32,37,39/
      data final_state/  4,3,5,6,  202,302,402,404,403,303,  502,503,504
     *,602,603,604,  505,605,606,  13,14,  5,6,  505,605,606,  14,  5,6,
     *  505,605,606,  5,6,  505,605,606,  6,  606/
      save first_transition,last_transition,final_state
      IF ((eadl_relax)) THEN
        call egs_eadl_relax(iZ,n)
        return
      END IF
      IF (( n .LT. 1 .OR. n .GT. 6 )) THEN
        return
      END IF
      iz_relax = iZ
      irl = ir(np)
      ekcut = ecut(irl)-rm
      pkcut = pcut(irl)
      min_E = 0.001
      IF (( energy .LE. min_E )) THEN
        edep = edep + energy
        edep_local = energy
        iarg = 34
        IF (( iausfl(iarg+1) .NE. 0 )) THEN
          call ausgab(iarg)
          IF (( wt(np) .LE. 0 )) THEN
            np = np-1
            return
          END IF
        END IF
        return
      END IF
      n_vac = 1
      vac_array(n_vac) = n
      np_old = np
      e_check = 0
      e_array(n_vac) = energy
26300 CONTINUE
26301   CONTINUE
        shell = vac_array(n_vac)
        Ei = e_array(n_vac)
        n_vac = n_vac - 1
        IF (( Ei .LE. min_E )) THEN
          edep = edep + Ei
          edep_local = Ei
          iarg = 34
          IF (( iausfl(iarg+1) .NE. 0 )) THEN
            call ausgab(iarg)
            IF (( wt(np) .LE. 0 )) THEN
              np = np-1
              return
            END IF
          END IF
          IF((n_vac .GT. 0))goto 26300
          GO TO26302
        END IF
        ish_relax = shell
        u_relax = Ei
        IF (( shell .EQ. 6 )) THEN
          IF (( Ei .GT. ekcut )) THEN
            np = np + 1
            IF (( np .GT. 10000 )) THEN
              write(i_log,'(/a)') '***************** Error: '
              write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','RELAX'
     *        , ' stack size exceeded! ',' $MAXSTACK = ',10000,' np = ',
     *        np
              write(i_log,'(/a)') '***************** Quiting now.'
              call exit(1)
            END IF
            e(np) = Ei + prm
            iq(np) = -1
            X(np)=X(np-1)
            Y(np)=Y(np-1)
            Z(np)=Z(np-1)
            IR(np)=IR(np-1)
            WT(np)=WT(np-1)
            DNEAR(np)=DNEAR(np-1)
            LATCH(np)=LATCH(np-1)
            ZLAST(np)=ZLAST(np-1)
            NFTIME(np)=NFTIME(np-1)
            DO 26311 ISCORE=1,3
              NPASS(np,ISCORE)=NPASS(np-1,ISCORE)
26311       CONTINUE
26312       CONTINUE
            NSPLIT(np)=NSPLIT(np-1)
            IPHAT(np)=IPHAT(np-1)
            IF((rng_seed .GT. 128))call ranmar_get
            eta = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            eta = 2*eta - 1
            w(np) = eta
            eta = (1-eta)*(1+eta)
            IF (( eta .GT. 1e-20 )) THEN
              eta = Sqrt(eta)
26321         CONTINUE
                IF((rng_seed .GT. 128))call ranmar_get
                xphi = rng_array(rng_seed)*twom24
                rng_seed = rng_seed + 1
                xphi = 2*xphi - 1
                xphi2 = xphi*xphi
                IF((rng_seed .GT. 128))call ranmar_get
                yphi = rng_array(rng_seed)*twom24
                rng_seed = rng_seed + 1
                yphi2 = yphi*yphi
                rhophi2 = xphi2 + yphi2
                IF(rhophi2.LE.1)GO TO26322
              GO TO 26321
26322         CONTINUE
              rhophi2 = 1/rhophi2
              cphi = (xphi2 - yphi2)*rhophi2
              sphi = 2*xphi*yphi*rhophi2
              u(np) = eta*cphi
              v(np) = eta*sphi
            ELSE
              u(np) = 0
              v(np) = 0
              w(np) = 1
            END IF
            iarg = 27
            IF (( iausfl(iarg+1) .NE. 0 )) THEN
              call ausgab(iarg)
              IF (( wt(np) .LE. 0 )) THEN
                np = np-1
                return
              END IF
            END IF
          ELSE
            edep = edep + Ei
            edep_local = Ei
            iarg = 34
            IF (( iausfl(iarg+1) .NE. 0 )) THEN
              call ausgab(iarg)
              IF (( wt(np) .LE. 0 )) THEN
                np = np-1
                return
              END IF
            END IF
          END IF
          IF((n_vac .GT. 0))goto 26300
          GO TO26302
        END IF
        IF((rng_seed .GT. 128))call ranmar_get
        eta = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        DO 26331 k=first_transition(shell),last_transition(shell)-1
          eta = eta - relaxation_prob(k,iZ)
          IF((eta .LE. 0))GO TO26332
26331   CONTINUE
26332   CONTINUE
        final = final_state(k)
        finala = final
        IF (( final .LT. 100 )) THEN
          IF (( final .LT. 10 )) THEN
            iql = 0
            elcut = pkcut
          ELSE
            final = final - 10
            iql = -1
            elcut = ekcut
          END IF
          Ef = binding_energies(final,iZ)
          Ex = Ei - Ef
          n_vac = n_vac + 1
          vac_array(n_vac) = final
          e_array(n_vac) = Ef
        ELSE
          final1 = final/100
          final2 = final - final1*100
          n_vac = n_vac + 1
          vac_array(n_vac) = final1
          e_array(n_vac) = binding_energies(final1,iZ)
          n_vac = n_vac + 1
          vac_array(n_vac) = final2
          e_array(n_vac) = binding_energies(final2,iZ)
          iql = -1
          Ex = Ei - e_array(n_vac) - e_array(n_vac-1)
          elcut = ekcut
        END IF
        IF (( Ex .LE. elcut )) THEN
          edep = edep + Ex
          IF (( finala .LT. 10 )) THEN
            edep_local = Ex
            iarg = 33
            IF (( iausfl(iarg+1) .NE. 0 )) THEN
              call ausgab(iarg)
              IF (( wt(np) .LE. 0 )) THEN
                np = np-1
                return
              END IF
            END IF
          ELSE
            edep_local = Ex
            iarg = 34
            IF (( iausfl(iarg+1) .NE. 0 )) THEN
              call ausgab(iarg)
              IF (( wt(np) .LE. 0 )) THEN
                np = np-1
                return
              END IF
            END IF
          END IF
        ELSE
          np = np + 1
          IF (( np .GT. 10000 )) THEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','RELAX',
     *      ' stack size exceeded! ',' $MAXSTACK = ',10000,' np = ',np
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          iq(np) = iql
          IF (( iql .EQ. 0 )) THEN
            e(np) = Ex
          ELSE
            e(np) = Ex + rm
          END IF
          X(np)=X(np-1)
          Y(np)=Y(np-1)
          Z(np)=Z(np-1)
          IR(np)=IR(np-1)
          WT(np)=WT(np-1)
          DNEAR(np)=DNEAR(np-1)
          LATCH(np)=LATCH(np-1)
          ZLAST(np)=ZLAST(np-1)
          NFTIME(np)=NFTIME(np-1)
          DO 26341 ISCORE=1,3
            NPASS(np,ISCORE)=NPASS(np-1,ISCORE)
26341     CONTINUE
26342     CONTINUE
          NSPLIT(np)=NSPLIT(np-1)
          IPHAT(np)=IPHAT(np-1)
          IF((rng_seed .GT. 128))call ranmar_get
          eta = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          eta = 2*eta - 1
          w(np) = eta
          eta = (1-eta)*(1+eta)
          IF (( eta .GT. 1e-20 )) THEN
            eta = Sqrt(eta)
26351       CONTINUE
              IF((rng_seed .GT. 128))call ranmar_get
              xphi = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              xphi = 2*xphi - 1
              xphi2 = xphi*xphi
              IF((rng_seed .GT. 128))call ranmar_get
              yphi = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              yphi2 = yphi*yphi
              rhophi2 = xphi2 + yphi2
              IF(rhophi2.LE.1)GO TO26352
            GO TO 26351
26352       CONTINUE
            rhophi2 = 1/rhophi2
            cphi = (xphi2 - yphi2)*rhophi2
            sphi = 2*xphi*yphi*rhophi2
            u(np) = eta*cphi
            v(np) = eta*sphi
          ELSE
            u(np) = 0
            v(np) = 0
            w(np) = 1
          END IF
          IF (( finala .LT. 10 )) THEN
            iarg = 25
            IF (( iausfl(iarg+1) .NE. 0 )) THEN
              call ausgab(iarg)
              IF (( wt(np) .LE. 0 )) THEN
                np = np-1
                return
              END IF
            END IF
          ELSE IF(( finala .LT. 100 )) THEN
            iarg = 26
            IF (( iausfl(iarg+1) .NE. 0 )) THEN
              call ausgab(iarg)
              IF (( wt(np) .LE. 0 )) THEN
                np = np-1
                return
              END IF
            END IF
          ELSE
            iarg = 27
            IF (( iausfl(iarg+1) .NE. 0 )) THEN
              call ausgab(iarg)
              IF (( wt(np) .LE. 0 )) THEN
                np = np-1
                return
              END IF
            END IF
          END IF
        END IF
      GO TO 26301
26302 CONTINUE
      return
      end
      subroutine egs_init_relax
      implicit none
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L(3000),IPHTER(3000)
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/PHOTIN/ EBINDA(12), GE0(12),GE1(12), GMFP0(2000,12),GMFP1(2
     *000,12),GBR10(2000,12),GBR11(2000,12),GBR20(2000,12),GBR21(2000,12
     *), RCO0(12),RCO1(12), RSCT0(100,12),RSCT1(100,12), COHE0(2000,12),
     *COHE1(2000,12),  PHOTONUC0(2000,12),PHOTONUC1(2000,12), DPMFP, MPG
     *EM(1,12), NGR(12)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      common/x_options/eadl_relax,  mcdf_pe_xsections
      logical eadl_relax, mcdf_pe_xsections
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/relax_data/ relax_first(3000),  relax_ntran(3000),  relax_s
     *tate(10000),  relax_prob(10000),  relax_atbin(10000),  relax_ntot
      real*8 relax_prob
      integer*4 relax_first, relax_ntran, relax_state, relax_atbin, rela
     *x_ntot
      common/shell_data/ shell_be(3000),  shell_type(3000),  shell_num(3
     *000),  shell_Z(3000),  shell_eadl(100,30),  shell_ntot
      real*8 shell_be
      integer*4 shell_type,shell_Z,shell_ntot,shell_num,shell_eadl
      integer*4 lnblnk1,egs_get_unit,relax_unit,ounit,egs_open_file
      integer*4 sorted(100),i,j,k,k1,k2,m
      real*8 z_sorted(100),pz_sorted(100)
      character data_dir*128,relax_file*144
      integer*4 ish,medio,iZ,ntran
      real*8 Ec, Pc, tmp, min_be, sumw,Ex
      logical is_open, is_there
      real*8 wtmp(300)
      integer*4 itmp(300)
      integer*4 pos, curr_rec, sh_eadl
      integer*4 nz, nshell, tr_type
      integer*4 ttype
      real*4 be_r, prob_r
      DO 26361 iZ=1,100
        DO 26371 k=1,30
          shell_eadl(iZ,k) = -1
26371   CONTINUE
26372   CONTINUE
26361 CONTINUE
26362 CONTINUE
      min_be = 0.001
      write(i_log,'(/a)') ' Reading EADL relaxation data ......'
      data_dir = hen_house(:lnblnk1(hen_house)) // 'data' // '/'
      relax_file = data_dir(:lnblnk1(data_dir)) // 'relax.data'
      relax_unit = egs_get_unit(0)
      IF (( relax_unit .LT. 1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'egs_init_relax: failed to get a free Fortran I/O
     * unit'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      open(relax_unit,file=relax_file,status='old', form='UNFORMATTED',A
     *CCESS='direct',recl=4, err=26380)
      GOTO 26390
26380 write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(2a)') 'egs_init_relax: failed to open ', relax_file
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
26390 is_open = .true.
      curr_rec = 1
      read(relax_unit,rec=curr_rec) nz
      shell_ntot = 0
      relax_ntot = 0
      DO 26401 medio=1,nmed
        DO 26411 i=1,nne(medio)
          z_sorted(i) = zelem(medio,i)
26411   CONTINUE
26412   CONTINUE
        call egs_heap_sort(nne(medio),z_sorted,sorted)
        DO 26421 i=1,nne(medio)
          iZ = z_sorted(i)
          is_there = .false.
          DO 26431 j=1,shell_ntot
            IF (( iZ .EQ. shell_Z(j) )) THEN
              is_there = .true.
              GO TO26432
            END IF
26431     CONTINUE
26432     CONTINUE
          IF((is_there))GO TO26421
          pos = iZ + 1
          read(relax_unit,rec=pos) curr_rec
          read(relax_unit,rec=curr_rec) nshell
          IF (( shell_ntot + nshell .GT. 3000 )) THEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,'(a,i5,a/,a//)') ' Too many shells to fit in the
     * list: ', shell_ntot + nshell,' (at least).', ' Increase the param
     *eter $MAXSHELL and retry '
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          write(i_log,'(a,i3,a,i2,a)') '  Z = ',iZ,' has ',nshell,' shel
     *ls'
          DO 26441 ish=shell_ntot+1,shell_ntot+nshell
            curr_rec = curr_rec+1
            read(relax_unit,rec=curr_rec) shell_type(ish)
            curr_rec = curr_rec+1
            read(relax_unit,rec=curr_rec) ntran
            curr_rec = curr_rec+1
            read(relax_unit,rec=curr_rec) be_r
            shell_be(ish) = be_r
            shell_Z(ish) = iZ
            shell_num(ish) = ish - shell_ntot
            shell_eadl(iZ,shell_num(ish)) = ish
            IF ((binding_energies(shell_num(ish),iZ) .GT. 0)) THEN
              shell_be(ish) = binding_energies(shell_num(ish),iZ)
            ELSE IF(( photon_xsections .EQ. 'epdl' )) THEN
              binding_energies(shell_num(ish),iZ) = shell_be(ish)
            END IF
            DO 26451 k=1,ntran
              curr_rec = curr_rec+1
              read(relax_unit,rec=curr_rec) itmp(k)
              curr_rec = curr_rec+1
              read(relax_unit,rec=curr_rec) prob_r
              wtmp(k)=prob_r
              IF ((itmp(k).LT.64)) THEN
                itmp(k) = itmp(k) + 1
              ELSE
                itmp(k) = itmp(k) + 65
              END IF
26451       CONTINUE
26452       CONTINUE
            IF (( shell_be(ish) .LT. min_be )) THEN
              relax_first(ish) = -1
              relax_ntran(ish) = -1
            ELSE
              sumw = 0
              DO 26461 k=1,ntran
                sumw = sumw + wtmp(k)
26461         CONTINUE
26462         CONTINUE
              IF (( sumw .GT. 1 )) THEN
                DO 26471 k=1,ntran
                  wtmp(k) = wtmp(k)/sumw
26471           CONTINUE
26472           CONTINUE
              ELSE IF(( sumw .LT. 1 )) THEN
                ntran = ntran + 1
                itmp(ntran) = -1
                wtmp(ntran) = 1-sumw
              END IF
              IF (( relax_ntot + ntran .GT. 10000 )) THEN
                write(i_log,'(/a)') '***************** Error: '
                write(i_log,'(a,i5,a/,a/)') ' Too many relaxation transi
     *tions: ', relax_ntot + ntran,' (at least).', ' Increase $MAXRELAX
     *and retry '
                write(i_log,'(/a)') '***************** Quiting now.'
                call exit(1)
              END IF
              relax_first(ish) = relax_ntot+1
              relax_ntran(ish) = ntran
              call prepare_alias_histogram(ntran,wtmp, relax_atbin(relax
     *        _ntot+1))
              DO 26481 k=1,ntran
                j = relax_ntot + k
                relax_state(j) = itmp(k)
                relax_prob(j) = wtmp(k)
26481         CONTINUE
26482         CONTINUE
              relax_ntot = relax_ntot + ntran
            END IF
26441     CONTINUE
26442     CONTINUE
          shell_ntot = shell_ntot + nshell
26421   CONTINUE
26422   CONTINUE
26401 CONTINUE
26402 CONTINUE
      write(i_log,'(a/)') ' ...... Done.'
      IF((is_open))close(relax_unit)
      return
      stop
      end
      subroutine egs_eadl_relax(iZ, shell_egs)
      implicit none
      common/relax_data/ relax_first(3000),  relax_ntran(3000),  relax_s
     *tate(10000),  relax_prob(10000),  relax_atbin(10000),  relax_ntot
      real*8 relax_prob
      integer*4 relax_first, relax_ntran, relax_state, relax_atbin, rela
     *x_ntot
      common/relax_for_user/ rfu_E0,  rfu_E,  rfu_Z,  rfu_j0,  rfu_n0,
     *rfu_t0,  rfu_j,  rfu_n,  rfu_t
      integer*4 rfu_Z,rfu_j0,rfu_n0,rfu_t0,rfu_j,rfu_n,rfu_t
      real*8 rfu_E0,rfu_E
      common/shell_data/ shell_be(3000),  shell_type(3000),  shell_num(3
     *000),  shell_Z(3000),  shell_eadl(100,30),  shell_ntot
      real*8 shell_be
      integer*4 shell_type,shell_Z,shell_ntot,shell_num,shell_eadl
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      common/x_options/eadl_relax,  mcdf_pe_xsections
      logical eadl_relax, mcdf_pe_xsections
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      common/user_relax/ u_relax,ish_relax,iZ_relax
      real*8 u_relax
      integer*4 ish_relax, iZ_relax
      real*8 Ec,Pc,min_E,rnno,Evac,Ef,Ef1,Ef2,Ex,Ecc, cost,sint,cphi,sph
     *i
      integer*4 shell, shell_egs, iZ, iarg
      integer*4 irl,vacs(100),nvac,vac,new_state,iqf,np_save,new1,new2
      integer*4 sample_alias_histogram
      real*8 xphi,xphi2,yphi,yphi2,rhophi2
      shell = shell_eadl(iZ,shell_egs)
      IF (( shell .LT. 1 .OR. shell .GT. 3000 )) THEN
        return
      END IF
      irl = ir(np)
      Ec = ecut(irl) - rm
      Pc = pcut(irl)
      min_E = 0.001
      Evac = shell_be(shell)
      rfu_Z = shell_Z(shell)
      rfu_j0 = shell
      rfu_n0 = shell_num(shell)
      rfu_t0 = shell_type(shell)
      rfu_E0 = Evac
      IF ((shell_egs .GT. 4 .AND. .NOT.mcdf_pe_xsections)) THEN
        edep = Evac
        edep_local = Evac
        iarg = 34
        IF (( iausfl(iarg+1) .NE. 0 )) THEN
          call ausgab(iarg)
          IF (( wt(np) .LE. 0 )) THEN
            np = np-1
            return
          END IF
        END IF
        return
      END IF
      vac = shell
      Nvac = 0
      np_save = np
26491 CONTINUE
        IF (( Evac .LT. min_E .OR. relax_ntran(vac) .LT. 1 )) THEN
          edep = edep + Evac
          edep_local = Evac
          iarg = 34
          IF (( iausfl(iarg+1) .NE. 0 )) THEN
            call ausgab(iarg)
            IF (( wt(np) .LE. 0 )) THEN
              np = np-1
              return
            END IF
          END IF
          go to 26500
        END IF
        new_state = sample_alias_histogram(relax_ntran(vac), relax_prob(
     *  relax_first(vac)), relax_atbin(relax_first(vac)))
        IF (( new_state .LT. 0 )) THEN
          Ef = 0
          iqf = -1
          Ecc = Ec
        ELSE
          new_state = relax_state(relax_first(vac)+new_state-1)
          IF (( new_state .LE. 64 )) THEN
            iqf = 0
            new_state = new_state + vac - shell_num(vac)
            Ef = shell_be(new_state)
            Nvac = Nvac + 1
            vacs(Nvac) = new_state
            Ecc = Pc
          ELSE
            iqf = -1
            new1 = new_state/64
            new2 = new_state - 64*new1
            new1 = new1 + vac - shell_num(vac)
            new2 = new2 + vac - shell_num(vac)
            Ef1 = shell_be(new1)
            Ef2 = shell_be(new2)
            Nvac = Nvac + 1
            vacs(Nvac) = new1
            Nvac = Nvac + 1
            vacs(Nvac) = new2
            Ef = Ef1 + Ef2
            Ecc = Ec
          END IF
        END IF
        Ex = Evac - Ef
        edep_local = 0
        IF (( Ex .GT. Ecc )) THEN
          np = np + 1
          IF (( np .GT. 10000 )) THEN
            write(i_log,'(/a)') '***************** Warning: '
            write(i_log,'(3(a,f10.6),a,i2)') 'Evac = ',Evac, ' Ef = ',Ef
     *      ,  ' min_E = ', min_E,' iq = ',iqf
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,'(//,3a,/,2(a,i9),/,a)') ' In subroutine ','new_
     *relax', ' stack size exceeded! ',' $MXSTACK = ',10000,' np = ',np,
     *       ' Increase $MXSTACK and try again '
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          iq(np) = iqf
          X(np)=X(np_save)
          Y(np)=Y(np_save)
          Z(np)=Z(np_save)
          IR(np)=IR(np_save)
          WT(np)=WT(np_save)
          DNEAR(np)=DNEAR(np_save)
          LATCH(np)=LATCH(np_save)
          ZLAST(np)=ZLAST(np_save)
          NFTIME(np)=NFTIME(np_save)
          DO 26511 ISCORE=1,3
            NPASS(np,ISCORE)=NPASS(np_save,ISCORE)
26511     CONTINUE
26512     CONTINUE
          NSPLIT(np)=NSPLIT(np_save)
          IPHAT(np)=IPHAT(np_save)
          IF((rng_seed .GT. 128))call ranmar_get
          rnno = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          cost = 2*rnno-1
          sint = 1-cost*cost
          IF (( sint .GT. 0 )) THEN
            sint = sqrt(sint)
26521       CONTINUE
              IF((rng_seed .GT. 128))call ranmar_get
              xphi = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              xphi = 2*xphi - 1
              xphi2 = xphi*xphi
              IF((rng_seed .GT. 128))call ranmar_get
              yphi = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              yphi2 = yphi*yphi
              rhophi2 = xphi2 + yphi2
              IF(rhophi2.LE.1)GO TO26522
            GO TO 26521
26522       CONTINUE
            rhophi2 = 1/rhophi2
            cphi = (xphi2 - yphi2)*rhophi2
            sphi = 2*xphi*yphi*rhophi2
            u(np) = sint*cphi
            v(np) = sint*sphi
            w(np) = cost
          ELSE
            u(np) = 0
            v(np) = 0
            w(np) = cost
          END IF
          rfu_j = vac
          rfu_n = shell_num(vac)
          rfu_t = shell_type(vac)
          rfu_E = shell_be(vac)
          IF (( iqf .EQ. 0 )) THEN
            e(np) = Ex
            iarg = 25
            IF (( iausfl(iarg+1) .NE. 0 )) THEN
              call ausgab(iarg)
              IF (( wt(np) .LE. 0 )) THEN
                np = np-1
                return
              END IF
            END IF
          ELSE
            e(np) = Ex + rm
            iarg = 27
            IF (( iausfl(iarg+1) .NE. 0 )) THEN
              call ausgab(iarg)
              IF (( wt(np) .LE. 0 )) THEN
                np = np-1
                return
              END IF
            END IF
          END IF
        ELSE
          edep = edep + Ex
          IF (( iqf .EQ. 0 )) THEN
            edep_local = Ex
            iarg = 33
            IF (( iausfl(iarg+1) .NE. 0 )) THEN
              call ausgab(iarg)
              IF (( wt(np) .LE. 0 )) THEN
                np = np-1
                return
              END IF
            END IF
          ELSE
            edep_local = Ex
            iarg = 34
            IF (( iausfl(iarg+1) .NE. 0 )) THEN
              call ausgab(iarg)
              IF (( wt(np) .LE. 0 )) THEN
                np = np-1
                return
              END IF
            END IF
          END IF
        END IF
26500   CONTINUE
        IF((Nvac .EQ. 0))GO TO26492
        vac = vacs(Nvac)
        Evac = shell_be(vac)
        Nvac = Nvac - 1
      GO TO 26491
26492 CONTINUE
      return
      end
      subroutine init_triplet
      implicit none
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      common/triplet_data/ a_triplet(250,12), b_triplet(250,12), dl_trip
     *let, dli_triplet, bli_triplet, log_4rm
      real*8 a_triplet,b_triplet,dl_triplet, dli_triplet, bli_triplet, l
     *og_4rm
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      real*8 energies(55), sig_pair(100,55), sig_triplet(100,55), f_trip
     *let(55), sigp(55), sigt(55), as(55), bs(55), cs(55), ds(55)
      character*128 triplet_data_file
      integer*4 want_triplet_unit, triplet_unit, triplet_out
      integer*4 i, iel, imed, lnblnk1, egs_get_unit, ntrip, iz1, izi, if
     *irst
      real*8 logE, f_new, f_old, spline
      IF((itriplet .EQ. 0))return
      DO 26531 i=1,len(triplet_data_file)
        triplet_data_file(i:i) = ' '
26531 CONTINUE
26532 CONTINUE
      triplet_data_file = hen_house(:lnblnk1(hen_house)) // 'data' // '/
     *' // 'triplet.data'
      want_triplet_unit = 63
      triplet_unit = egs_get_unit(want_triplet_unit)
      IF (( triplet_unit .LT. 1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'init_triplet: failed to get a free Fortran I/O u
     *nit'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      open(triplet_unit,file=triplet_data_file,err=26540)
      write(i_log,'(a,$)') ' init_triplet: reading triplet data ... '
      read(triplet_unit,*) ntrip
      IF (( ntrip .GT. 55 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'Max. number of data points per element is ',55
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      read(triplet_unit,*,err=26550) (energies(i),i=1,ntrip)
      DO 26561 iel=1,100
        read(triplet_unit,*)
        read(triplet_unit,*,err=26550) (sig_pair(iel,i),i=1,ntrip)
        read(triplet_unit,*,err=26550) (sig_triplet(iel,i),i=1,ntrip)
26561 CONTINUE
26562 CONTINUE
      write(i_log,*) 'OK'
      ifirst = 0
      DO 26571 i=1,ntrip
        IF((ifirst .EQ. 0 .AND. energies(i) .GT. 4.01*rm))ifirst = i
        energies(i) = log(energies(i))
26571 CONTINUE
26572 CONTINUE
      log_4rm = log(4*rm)
      energies(ifirst-1) = log_4rm
      dl_triplet = (energies(ntrip) - log_4rm)/250
      dli_triplet = 1/dl_triplet
      bli_triplet = 1 - log_4rm/dl_triplet
      DO 26581 imed=1,nmed
        write(i_log,'(a,i3,a,$)') '   Preparing triplet fraction data fo
     *r medium ',imed,' ... '
        iz1 = zelem(imed,1) + 0.1
        DO 26591 i=1,ntrip
          sigp(i) = pz(imed,1)*sig_pair(iz1,i)
          sigt(i) = pz(imed,1)*sig_triplet(iz1,i)
          DO 26601 iel=2,nne(imed)
            izi = zelem(imed,iel) + 0.1
            sigp(i) = sigp(i) + pz(imed,iel)*sig_pair(izi,i)
            sigt(i) = sigt(i) + pz(imed,iel)*sig_triplet(izi,i)
26601     CONTINUE
26602     CONTINUE
26591   CONTINUE
26592   CONTINUE
        DO 26611 i=ifirst,ntrip
          f_triplet(i-ifirst+2) = sigt(i)/(sigp(i) + sigt(i))
26611   CONTINUE
26612   CONTINUE
        f_triplet(1) = 0
        call set_spline(energies(ifirst-1),f_triplet,as,bs,cs,ds,ntrip-i
     *  first+2)
        logE = log_4rm
        f_old = 0
        DO 26621 i=1,250-1
          logE = logE + dl_triplet
          f_new = spline(logE,energies(ifirst-1),as,bs,cs,ds,ntrip-ifirs
     *    t+2)
          a_triplet(i,imed) = (f_new - f_old)*dli_triplet
          b_triplet(i,imed) = f_new - a_triplet(i,imed)*logE
          f_old = f_new
26621   CONTINUE
26622   CONTINUE
        write(i_log,*) 'OK'
26581 CONTINUE
26582 CONTINUE
      close(triplet_unit)
      return
26540 CONTINUE
      write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(a,a)') ' init_triplet: failed to open the data file
     *', triplet_data_file(:lnblnk1(triplet_data_file))
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
26550 CONTINUE
      write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) ' init_triplet: error while reading triplet data '
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      return
      end
      SUBROUTINE EDGSET(NREGLO,NREGHI)
      implicit none
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L(3000),IPHTER(3000)
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      common/x_options/eadl_relax,  mcdf_pe_xsections
      logical eadl_relax, mcdf_pe_xsections
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer NREGLO,NREGHI
      integer*4 i,j,k,jj,iz
      logical do_relax
      logical got_data
      save got_data
      data got_data/.false./
      IF((got_data))return
      write(i_log,'(a/,a)') 'Output from subroutine EDGSET:', '=========
     *====================='
      do_relax = .false.
      DO 26631 j=1,3000
        IF (( iedgfl(j) .GT. 0 .AND. iedgfl(j) .LE. 100 )) THEN
          do_relax = .true.
          GO TO26632
        END IF
26631 CONTINUE
26632 CONTINUE
      IF (( .NOT.do_relax )) THEN
        IF ((eadl_relax)) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(a,/a)') 'You must turn ON atomic relaxations whe
     *n requesting', 'detailed atomic relaxation (eadl_relax=true)!'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        write(i_log,'(a/)') ' Atomic relaxations not requested! '
        return
      END IF
      write(i_log,'(a/)') ' Atomic relaxations requested! '
      write(i_log,'(a$)') ' Reading simplified photo-absorption data ...
     *..'
      got_data = .true.
      rewind(i_photo_relax)
      DO 26641 i=1,100
        IF ((eadl_relax)) THEN
          read(i_photo_relax,*)
        ELSE
          read(i_photo_relax,*) j,(binding_energies(k,i),k=1,6)
          DO 26651 k=1,6
            binding_energies(k,i) = binding_energies(k,i)*1e-6
26651     CONTINUE
26652     CONTINUE
        END IF
26641 CONTINUE
26642 CONTINUE
      read(i_photo_relax,*)
      DO 26661 i=1,100
        read(i_photo_relax,*) j,(interaction_prob(k,i),k=1,5)
        interaction_prob(6,i)=1.01
26661 CONTINUE
26662 CONTINUE
      write(i_log,'(a)') ' Done'
      write(i_log,'(/a$)') ' Reading simplified relaxation data .....'
      read(i_photo_relax,*)
      DO 26671 i=1,100
        read(i_photo_relax,*) j,(relaxation_prob(k,i),k=1,19)
26671 CONTINUE
26672 CONTINUE
      read(i_photo_relax,*)
      DO 26681 i=1,100
        read(i_photo_relax,*) j,(relaxation_prob(k,i),k=20,26)
26681 CONTINUE
26682 CONTINUE
      read(i_photo_relax,*)
      DO 26691 i=1,100
        read(i_photo_relax,*) j,(relaxation_prob(k,i),k=27,32)
26691 CONTINUE
26692 CONTINUE
      read(i_photo_relax,*)
      DO 26701 i=1,100
        read(i_photo_relax,*) j,(relaxation_prob(k,i),k=33,37)
26701 CONTINUE
26702 CONTINUE
      read(i_photo_relax,*)
      DO 26711 i=1,100
        read(i_photo_relax,*) j,relaxation_prob(38,i)
26711 CONTINUE
26712 CONTINUE
      write(i_log,'(a)') ' Done'
      write(i_log,'(/a$)') ' Reading parametrized XCOM photo cross secti
     *on data .....'
      rewind(i_photo_cs)
      DO 26721 i=1,100
        read(i_photo_cs,*) j,edge_number(i)
        DO 26731 j=1,edge_number(i)
          read(i_photo_cs,*) edge_a(j,i),edge_b(j,i),edge_c(j,i), edge_d
     *    (j,i),edge_energies(j,i)
26731   CONTINUE
26732   CONTINUE
26721 CONTINUE
26722 CONTINUE
      write(i_log,'(a)') ' Done'
      IF ((eadl_relax)) THEN
        call egs_init_relax
      END IF
      RETURN
      END
      SUBROUTINE PHOTON(IRCODE)
      implicit none
      integer*4 IRCODE
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/BOUNDS/ECUT(3000),PCUT(3000),VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/PHOTIN/ EBINDA(12), GE0(12),GE1(12), GMFP0(2000,12),GMFP1(2
     *000,12),GBR10(2000,12),GBR11(2000,12),GBR20(2000,12),GBR21(2000,12
     *), RCO0(12),RCO1(12), RSCT0(100,12),RSCT1(100,12), COHE0(2000,12),
     *COHE1(2000,12),  PHOTONUC0(2000,12),PHOTONUC1(2000,12), DPMFP, MPG
     *EM(1,12), NGR(12)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common/egs_vr/ e_max_rr(3000),  prob_RR,  nbr_split,  i_play_RR,
     *    i_survived_RR,
     *        n_RR_warning,                                        i_do_
     *rr(3000)
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/CMs/ Z_min_CM,Z_gap_THICK,E_min_out,RMAX_CM,RMAX_CM2,Z_min_
     *thick,ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD, ICM,ICMNEW,ICM_to_SC
     *ORE,IERR_GEOM, IR_start_CM,MAX_CMs,IR_to_CM,RMAX_CM_FLAG, MED_min_
     *thick, ITDOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIR
     *G, MED_IN, CMTYPE, CMLIST
      real*8 Z_min_CM( 26),Z_gap_THICK(25),E_min_out(25),RMAX_CM(25),RMA
     *X_CM2(25),Z_min_thick(25,5),ANGLE, BEAM_MU_INDEX,BEAM_MU_INDEX_OLD
      INTEGER ICM,ICMNEW,ICM_to_SCORE(25),IERR_GEOM(25), IR_start_CM( 26
     *),MAX_CMs,IR_to_CM(3000),RMAX_CM_FLAG(25), MED_min_thick(25,5), IT
     *DOSE_ON,ICM_CONTAM, IQ_CONTAM,XTUBE_EXISTS,AIR_INDEX,IDIRG
      CHARACTER*4 MED_IN(24)
      CHARACTER*8 CMTYPE(25), CMLIST(25)
      DOUBLE PRECISION PEIG
      real*8 EIG,  RNNO35,  GMFPR0,  GMFP,  COHFAC,  RNNO37,  XXX,  X2,
     * Q2,  CSQTHE,  REJF,  RNNORJ,  RNNO36,  GBR1,  GBR2,  T,   PHOTONU
     *CFAC,  RNNO39
      integer*4 IARG,  IDR,  IRL,  LGLE,  LXXX
      real*4 time_array(2),etime
      real*8 xphi, xphi2, yphi, yphi2, rhophi2
      IRCODE=1
      PEIG=E(NP)
      EIG=PEIG
      IRL=IR(NP)
      medium = med(irl)
      IF ((EIG .LE. PCUT(IRL))) THEN
        GO TO 26740
      END IF
26750 CONTINUE
26751   CONTINUE
        IF ((WT(NP) .EQ. 0.0)) THEN
          go to 26760
        END IF
        GLE=LOG(EIG)
        CALL SELECT_PHOTON_MFP(DPMFP)
        IROLD=IR(NP)
26770   CONTINUE
26771     CONTINUE
          IF ((MEDIUM.NE.0)) THEN
            LGLE=GE1(MEDIUM)*GLE+GE0(MEDIUM)
            GMFPR0=GMFP1(LGLE,MEDIUM)*GLE+GMFP0(LGLE,MEDIUM)
          END IF
26780     CONTINUE
26781       CONTINUE
            IF ((MEDIUM.EQ.0)) THEN
              TSTEP=VACDST
            ELSE
              RHOF=RHOR(IRL)/RHO(MEDIUM)
              GMFP=GMFPR0/RHOF
              IF ((IRAYLR(IRL) .EQ. 1)) THEN
                COHFAC=COHE1(LGLE,MEDIUM)*GLE+COHE0(LGLE,MEDIUM)
                GMFP=GMFP*COHFAC
              END IF
              IF (( use_cs_enhance )) THEN
                iarg = IR_to_CM(IR(NP))
                IF (( cs_enhance(iarg) .GT. 1 )) THEN
                  gmfp = gmfp/cs_enhance(iarg)
                END IF
              END IF
              IF ((IPHOTONUCR(IRL).EQ.1)) THEN
                PHOTONUCFAC=PHOTONUC1(LGLE,MEDIUM)*GLE+PHOTONUC0(LGLE,ME
     *          DIUM)
                GMFP=GMFP*PHOTONUCFAC
              END IF
              TSTEP=GMFP*DPMFP
            END IF
            IRNEW=IR(NP)
            IDISC=0
            USTEP=TSTEP
            TUSTEP=USTEP
            IF (( ustep .GT. dnear(np) .OR. wt(np) .LE. 0 )) THEN
              call howfar
            END IF
            IF ((IDISC.GT.0)) THEN
              GO TO 26760
            END IF
            VSTEP=USTEP
            TVSTEP=VSTEP
            EDEP=PZERO
            x_final = x(np) + u(np)*vstep
            y_final = y(np) + v(np)*vstep
            z_final = z(np) + w(np)*vstep
            iarg = 0
            IF (( iausfl(iarg+1) .NE. 0 )) THEN
              call ausgab(iarg)
              IF (( wt(np) .LE. 0 )) THEN
                np = np-1
                return
              END IF
            END IF
            x(np) = x_final
            y(np) = y_final
            z(np) = z_final
            DNEAR(NP)=DNEAR(NP)-USTEP
            IF ((MEDIUM.NE.0)) THEN
              DPMFP=MAX(0.,DPMFP-USTEP/GMFP)
            END IF
            IROLD=IR(NP)
            MEDOLD=MEDIUM
            IF ((IRNEW.NE.IROLD)) THEN
              ir(np) = irnew
              irl = irnew
              medium = med(irl)
            END IF
            iarg = 5
            IF (( iausfl(iarg+1) .NE. 0 )) THEN
              call ausgab(iarg)
              IF (( wt(np) .LE. 0 )) THEN
                np = np-1
                return
              END IF
            END IF
            IF ((EIG.LE.PCUT(IRL))) THEN
              GO TO 26740
            END IF
            IF((IDISC.LT.0))GO TO 26760
            IF((MEDIUM.NE.MEDOLD))GO TO 26782
            IF ((MEDIUM.NE.0.AND.DPMFP.LE.1.E-5)) THEN
              GO TO 26772
            END IF
          GO TO 26781
26782     CONTINUE
        GO TO 26771
26772   CONTINUE
        IF ((IRAYLR(IRL).EQ.1)) THEN
          IF((rng_seed .GT. 128))call ranmar_get
          RNNO37 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF ((RNNO37.LE.(1.0-COHFAC))) THEN
            iarg = 23
            IF (( iausfl(iarg+1) .NE. 0 )) THEN
              call ausgab(iarg)
              IF (( wt(np) .LE. 0 )) THEN
                np = np-1
                return
              END IF
            END IF
            NPold = NP
            call egs_rayleigh_sampling(MEDIUM,E(NP),GLE,LGLE,COSTHE,SINT
     *      HE)
            CALL UPHI(2,1)
            iarg = 24
            IF (( iausfl(iarg+1) .NE. 0 )) THEN
              call ausgab(iarg)
              IF (( wt(np) .LE. 0 )) THEN
                np = np-1
                return
              END IF
            END IF
            GOTO 26750
          END IF
        END IF
        IF ((IPHOTONUCR(IRL).EQ.1)) THEN
          IF((rng_seed .GT. 128))call ranmar_get
          RNNO39 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF ((RNNO39.LE.(1.0-PHOTONUCFAC))) THEN
            iarg = 29
            IF (( iausfl(iarg+1) .NE. 0 )) THEN
              call ausgab(iarg)
              IF (( wt(np) .LE. 0 )) THEN
                np = np-1
                return
              END IF
            END IF
            call PHOTONUC
            iarg = 30
            IF (( iausfl(iarg+1) .NE. 0 )) THEN
              call ausgab(iarg)
              IF (( wt(np) .LE. 0 )) THEN
                np = np-1
                return
              END IF
            END IF
            GOTO 26750
          END IF
        END IF
        IF((rng_seed .GT. 128))call ranmar_get
        RNNO36 = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        GBR1=GBR11(LGLE,MEDIUM)*GLE+GBR10(LGLE,MEDIUM)
        IF (((RNNO36.LE.GBR1).AND.(E(NP).GT.RMT2) )) THEN
          iarg = 15
          IF (( iausfl(iarg+1) .NE. 0 )) THEN
            call ausgab(iarg)
            IF (( wt(np) .LE. 0 )) THEN
              np = np-1
              return
            END IF
          END IF
          CALL PAIR
          iarg = 16
          IF (( iausfl(iarg+1) .NE. 0 )) THEN
            call ausgab(iarg)
            IF (( wt(np) .LE. 0 )) THEN
              np = np-1
              return
            END IF
          END IF
          IF (( iq(np) .NE. 0 )) THEN
            GO TO 26752
          ELSE
            goto 26790
          END IF
        END IF
        GBR2=GBR21(LGLE,MEDIUM)*GLE+GBR20(LGLE,MEDIUM)
        IF ((RNNO36.LT.GBR2)) THEN
          iarg = 17
          IF (( iausfl(iarg+1) .NE. 0 )) THEN
            call ausgab(iarg)
            IF (( wt(np) .LE. 0 )) THEN
              np = np-1
              return
            END IF
          END IF
          CALL COMPT
          iarg = 18
          IF (( iausfl(iarg+1) .NE. 0 )) THEN
            call ausgab(iarg)
            IF (( wt(np) .LE. 0 )) THEN
              np = np-1
              return
            END IF
          END IF
          IF((IQ(NP).NE.0))GO TO 26752
        ELSE
          iarg = 19
          IF (( iausfl(iarg+1) .NE. 0 )) THEN
            call ausgab(iarg)
            IF (( wt(np) .LE. 0 )) THEN
              np = np-1
              return
            END IF
          END IF
          CALL PHOTO
          IF ((NP .EQ. 0 .OR. NP .LT. NPOLD )) THEN
            RETURN
          END IF
          iarg = 20
          IF (( iausfl(iarg+1) .NE. 0 )) THEN
            call ausgab(iarg)
            IF (( wt(np) .LE. 0 )) THEN
              np = np-1
              return
            END IF
          END IF
          IF((IQ(NP) .NE. 0))GO TO 26752
        END IF
26790   PEIG=E(NP)
        EIG=PEIG
        IF((EIG.LT.PCUT(IRL)))GO TO 26740
      GO TO 26751
26752 CONTINUE
      RETURN
26740 IF (( medium .GT. 0 )) THEN
        IF ((EIG.GT.AP(MEDIUM))) THEN
          IDR=1
        ELSE
          IDR=2
        END IF
      ELSE
        IDR=1
      END IF
      EDEP=PEIG
      iarg = IDR
      IF (( iausfl(iarg+1) .NE. 0 )) THEN
        call ausgab(iarg)
        IF (( wt(np) .LE. 0 )) THEN
          np = np-1
          return
        END IF
      END IF
      IRCODE=2
      NP=NP-1
      RETURN
26760 EDEP=PEIG
      iarg = 3
      IF (( iausfl(iarg+1) .NE. 0 )) THEN
        call ausgab(iarg)
        IF (( wt(np) .LE. 0 )) THEN
          np = np-1
          return
        END IF
      END IF
      IRCODE=2
      NP=NP-1
      RETURN
      END
      SUBROUTINE SHOWER(IQI,EI,XI,YI,ZI,UI,VI,WI,IRI,WTI)
      implicit none
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      real*8 EI,  XI,YI,ZI, UI,VI,WI, WTI
      integer*4 IQI,  IRI
      DOUBLE PRECISION DEG,  DPGL,  DEI,  DPI,  DCSTH,  DCOSTH,  PI0MSQ
      real*8 DNEARI,  CSTH
      integer*4 IRCODE
      DATA PI0MSQ/1.8215416D4/
      NP=1
      NPold = NP
      DNEARI=0.0
      IQ(1)=IQI
      E(1)=EI
      U(1)=UI
      V(1)=VI
      W(1)=WI
      X(1)=XI
      Y(1)=YI
      Z(1)=ZI
      IR(1)=IRI
      WT(1)=WTI
      DNEAR(1)=DNEARI
      LATCH((1))=LATCHI
      DO 26801 ISCORE=1,3
        NPASS((1),ISCORE)=NPASSI
26801 CONTINUE
26802 CONTINUE
      NSPLIT((1))=NSPLITI
      IPHAT((1))=IPHATI
      IF ((IQI .EQ. 2)) THEN
        IF ((EI**2 .LE. PI0MSQ)) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(//a/,a,g15.5,a)') ' Stopped in subroutine SHOWER
     *---PI-ZERO option invoked', ' but the total energy was too small (
     *EI=',EI,' MeV)'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        IF((rng_seed .GT. 128))call ranmar_get
        CSTH = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        DCSTH=CSTH
        DEI=EI
        DPI=DSQRT(DEI*DEI-PI0MSQ)
        DEG=DEI+DPI*DCSTH
        DPGL=DPI+DEI*DCSTH
        DCOSTH=DPGL/DEG
        COSTHE=DCOSTH
        SINTHE=DSQRT(1.D0-DCOSTH*DCOSTH)
        IQ(1)=0
        E(1)=DEG/2.
        CALL UPHI(2,1)
        NP=2
        DEG=DEI-DPI*DCSTH
        DPGL=DPI-DEI*DCSTH
        DCOSTH=DPGL/DEG
        COSTHE=DCOSTH
        SINTHE=-DSQRT(1.D0-DCOSTH*DCOSTH)
        IQ(2)=0
        E(2)=DEG/2.
        CALL UPHI(3,2)
      END IF
26811 CONTINUE
        IF((np .LE. 0))GO TO26812
        IF (( iq(np) .EQ. 0 )) THEN
          call photon(ircode)
        ELSE
          call electr(ircode)
        END IF
      GO TO 26811
26812 CONTINUE
      RETURN
      END
      SUBROUTINE UPHI(IENTRY,LVL)
      implicit none
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/UPHIIN/SINC0,SINC1,SIN0(1002),SIN1(1002)
      real*8 SINC0,SINC1,SIN0,SIN1
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      integer IENTRY,LVL
      real*8 CTHET,  RNNO38,  PHI,  CPHI,  A,B,C,  SINPS2,  SINPSI,  US,
     *VS,  SINDEL,COSDEL
      integer*4 IARG,  LPHI,LTHETA,LCTHET,LCPHI
      real*8 xphi,xphi2,yphi,yphi2,rhophi2
      save CTHET,PHI,CPHI,A,B,C,SINPS2,SINPSI,US,VS,SINDEL,COSDEL
      iarg = 21
      IF (( iausfl(iarg+1) .NE. 0 )) THEN
        call ausgab(iarg)
        IF (( wt(np) .LE. 0 )) THEN
          np = np-1
          return
        END IF
      END IF
      GO TO (26820,26830,26840),IENTRY
      GO TO 26850
26820 CONTINUE
      SINTHE=sin(THETA)
      CTHET=PI5D2-THETA
      COSTHE=sin(CTHET)
26830 CONTINUE
26861 CONTINUE
        IF((rng_seed .GT. 128))call ranmar_get
        xphi = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        xphi = 2*xphi - 1
        xphi2 = xphi*xphi
        IF((rng_seed .GT. 128))call ranmar_get
        yphi = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        yphi2 = yphi*yphi
        rhophi2 = xphi2 + yphi2
        IF(rhophi2.LE.1)GO TO26862
      GO TO 26861
26862 CONTINUE
      rhophi2 = 1/rhophi2
      cosphi = (xphi2 - yphi2)*rhophi2
      sinphi = 2*xphi*yphi*rhophi2
26840 GO TO (26870,26880,26890),LVL
      GO TO 26850
26870 A=U(NP)
      B=V(NP)
      C=W(NP)
      GO TO 26900
26890 A=U(NP-1)
      B=V(NP-1)
      C=W(NP-1)
26880 X(NP)=X(NP-1)
      Y(NP)=Y(NP-1)
      Z(NP)=Z(NP-1)
      IR(NP)=IR(NP-1)
      WT(NP)=WT(NP-1)
      DNEAR(NP)=DNEAR(NP-1)
      LATCH(NP)=LATCH(NP-1)
      ZLAST(NP)=ZLAST(NP-1)
      NFTIME(NP)=NFTIME(NP-1)
      DO 26911 ISCORE=1,3
        NPASS(NP,ISCORE)=NPASS(NP-1,ISCORE)
26911 CONTINUE
26912 CONTINUE
      NSPLIT(NP)=NSPLIT(NP-1)
      IPHAT(NP)=IPHAT(NP-1)
26900 SINPS2=A*A+B*B
      IF ((SINPS2.LT.1.0E-20)) THEN
        U(NP)=SINTHE*COSPHI
        V(NP)=SINTHE*SINPHI
        W(NP)=C*COSTHE
      ELSE
        SINPSI=SQRT(SINPS2)
        US=SINTHE*COSPHI
        VS=SINTHE*SINPHI
        SINDEL=B/SINPSI
        COSDEL=A/SINPSI
        U(NP)=C*COSDEL*US-SINDEL*VS+A*COSTHE
        V(NP)=C*SINDEL*US+COSDEL*VS+B*COSTHE
        W(NP)=-SINPSI*US+C*COSTHE
      END IF
      iarg = 22
      IF (( iausfl(iarg+1) .NE. 0 )) THEN
        call ausgab(iarg)
        IF (( wt(np) .LE. 0 )) THEN
          np = np-1
          return
        END IF
      END IF
      RETURN
26850 write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(a,2i6)') ' STOPPED IN UPHI WITH IENTRY,LVL=',IENTRY,
     *LVL
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      END
      subroutine init_nist_brems
      implicit none
      real*8 energy_array(57),x_array(54), cs_array(57,54,100)
      real*8 xi_array(54)
      real*8 x_gauss(64),w_gauss(64)
      integer*4 nmix,kmix,i,n,k,j,ii
      integer*4 ngauss,i_gauss
      integer*4 lnblnk1,egs_get_unit
      integer*4 ifirst,ilast,nener,neke,leil
      real*8 cs(57,54),ee(57),ele(57)
      real*8 csx(54),afx(54),bfx(54),cfx(54),dfx(54)
      real*8 cse(57),afe(57),bfe(57),cfe(57),dfe(57)
      real*8 Z,sumA
      real*8 emin,xi,res,spline,eil,ei,beta2,aux,sigb,sigt,ebr1,ebr2
      real*8 sigee,sigep,sige,si_esig,si1_esig,si_ebr1,si1_ebr1,ededx, s
     *ig_bhabha,si_psig,si1_psig,si_pbr1,si1_pbr1,si_pbr2,si1_pbr2
      integer*4 iz
      real*8 ple,qle,x,f,error,max_error,x_max_error,f_max_error
      integer*4 ndat,k_max_error
      character tmp_string*512, tmp1_string*512
      integer itmp
      real*8 amu
      parameter (amu = 1660.5655)
      logical ex,is_opened
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/ELECIN/ esig_e(12),psig_e(12), esige_max, psige_max, range_
     *ep(0:1,500,12), E_array(500,12), etae_ms0(500,12),etae_ms1(500,12)
     *,etap_ms0(500,12),etap_ms1(500,12),q1ce_ms0(500,12),q1ce_ms1(500,1
     *2),q1cp_ms0(500,12),q1cp_ms1(500,12),q2ce_ms0(500,12),q2ce_ms1(500
     *,12),q2cp_ms0(500,12),q2cp_ms1(500,12),blcce0(500,12),blcce1(500,1
     *2), EKE0(12),EKE1(12), XR0(12),TEFF0(12),BLCC(12),XCC(12), ESIG0(5
     *00,12),ESIG1(500,12),PSIG0(500,12),PSIG1(500,12),EDEDX0(500,12),ED
     *EDX1(500,12),PDEDX0(500,12),PDEDX1(500,12),EBR10(500,12),EBR11(500
     *,12),PBR10(500,12),PBR11(500,12),PBR20(500,12),PBR21(500,12),TMXS0
     *(500,12),TMXS1(500,12), expeke1(12), IUNRST(12),EPSTFL(12),IAPRIM(
     *12), sig_ismonotone(0:1,12)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/nist_brems/ nb_fdata(0:50,100,12), nb_xdata(0:50,100,12), n
     *b_wdata(50,100,12), nb_idata(50,100,12), nb_emin(12),nb_emax(12),
     *nb_lemin(12),nb_lemax(12), nb_dle(12),nb_dlei(12), log_ap(12)
      real*8 nb_fdata,nb_xdata,nb_wdata,nb_emin,nb_emax,nb_lemin,nb_lema
     *x, nb_dle,nb_dlei,log_ap
      integer*4 nb_idata
      common/spin_data/ spin_rej(12,0:1,0: 31,0:15,0:31), espin_min,espi
     *n_max,espml,b2spin_min,b2spin_max, dbeta2,dbeta2i,dlener,dleneri,d
     *qq1,dqq1i, fool_intel_optimizer
      real*4 spin_rej,espin_min,espin_max,espml,b2spin_min,b2spin_max, d
     *beta2,dbeta2i,dlener,dleneri,dqq1,dqq1i
      logical fool_intel_optimizer
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      DO 26921 i=1,len(tmp_string)
        tmp_string(i:i) = ' '
26921 CONTINUE
26922 CONTINUE
      tmp_string = hen_house(:lnblnk1(hen_house)) // 'data' // '/'
      IF (( ibr_nist .EQ. 1 )) THEN
        DO 26931 i=1,len(tmp1_string)
          tmp1_string(i:i) = ' '
26931   CONTINUE
26932   CONTINUE
        tmp1_string = tmp_string(:lnblnk1(tmp_string)) // 'nist_brems.da
     *ta'
        inquire(file=tmp1_string,exist=ex,opened=is_opened,number=itmp)
        IF (( .NOT.ex )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'EGSnrc data file ','nist_brems.data',' does no
     *t exist'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        IF (( .NOT.is_opened )) THEN
          i_nist_data=egs_get_unit(i_nist_data)
          IF ((i_nist_data.LT.0)) THEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,*) 'failed to get a free Fortran I/O unit for da
     *ta file ', tmp1_string(:lnblnk1(tmp1_string))
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          open(i_nist_data,file=tmp1_string,status='old',err=19230)
        ELSE
          i_nist_data = itmp
        END IF
      ELSE IF((ibr_nist .EQ. 2)) THEN
        DO 26941 i=1,len(tmp1_string)
          tmp1_string(i:i) = ' '
26941   CONTINUE
26942   CONTINUE
        tmp1_string = tmp_string(:lnblnk1(tmp_string)) // 'nrc_brems.dat
     *a'
        inquire(file=tmp1_string,exist=ex,opened=is_opened,number=itmp)
        IF (( .NOT.ex )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'EGSnrc data file ','nrc_brems.data',' does not
     * exist'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        IF (( .NOT.is_opened )) THEN
          i_nist_data=egs_get_unit(i_nist_data)
          IF ((i_nist_data.LT.0)) THEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,*) 'failed to get a free Fortran I/O unit for da
     *ta file ', tmp1_string(:lnblnk1(tmp1_string))
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          open(i_nist_data,file=tmp1_string,status='old',err=19230)
        ELSE
          i_nist_data = itmp
        END IF
      ELSE
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) ' init_nist_brems: unknown value of ibr_nist!
     *                  ibr_nist = ', ibr_nist
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      rewind(i_nist_data)
      read(i_nist_data,*)
      read(i_nist_data,*) nmix,kmix
      IF ((kmix .GT. 54)) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) ' init_nist_brems: to many k values in data file!
     *'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF ((nmix .GT. 57)) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) ' init_nist_brems: to many T values in data file!
     *'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      read(i_nist_data,*) (energy_array(n),n=1,nmix)
      DO 26951 n=1,nmix
        energy_array(n) = 1.0*energy_array(n)
26951 CONTINUE
26952 CONTINUE
      read(i_nist_data,*) (x_array(k),k=1,kmix)
      read(i_nist_data,*)
      DO 26961 i=1,100
        read(i_nist_data,*) ((cs_array(n,k,i),n=1,nmix),k=1,kmix)
26961 CONTINUE
26962 CONTINUE
      close(i_nist_data)
      DO 26971 k=1,kmix
        xi_array(k)=Log(1-x_array(k)+1e-6)
        IF (( fool_intel_optimizer )) THEN
          write(i_log,*) 'xi_array(k): ',xi_array(k)
        END IF
26971 CONTINUE
26972 CONTINUE
      ngauss = 64
      call gauss_legendre(0d0,1d0,x_gauss,w_gauss,ngauss)
      write(i_log,*) ' '
      IF ((ibr_nist .EQ. 1)) THEN
        write(i_log,*) 'Using NIST brems cross sections! '
      ELSE IF((ibr_nist .EQ. 2)) THEN
        write(i_log,*) 'Using NRC brems cross sections! '
      END IF
      write(i_log,*) ' '
      DO 26981 medium=1,nmed
        log_ap(medium) = log(ap(medium))
        write(i_log,*) ' Initializing brems data for medium ',medium,'..
     *.'
        emin = max(ae(medium) - rm, ap(medium))
        DO 26991 i=1,nmix
          IF((energy_array(i) .GE. emin))GO TO26992
26991   CONTINUE
26992   CONTINUE
        ifirst = i
        DO 27001 i=nmix,1,-1
          IF((energy_array(i) .LT. ue(medium) - rm))GO TO27002
27001   CONTINUE
27002   CONTINUE
        ilast = i+1
        IF (( ifirst .LT. 1 .OR. ilast .GT. nmix )) THEN
          write(i_log,*) ' init_nist_brems: data available only for '
          write(i_log,*) energy_array(1),' <= E <= ',energy_array(nmix)
          write(i_log,*) ' will use spline interpolations to get cross '
          write(i_log,*) ' sections beyond the available data but this m
     *ay'
          write(i_log,*) ' produce nonsense!'
          IF((ifirst .LT. 1))ifirst=1
          IF((ilast .GT. nmix))ilast = nmix
        END IF
        DO 27011 i=ifirst,ilast
          ii = i+1 - ifirst
          ee(ii) = energy_array(i)
          ele(ii) = log(ee(ii))
          sumA = 0
          DO 27021 j=1,NNE(medium)
            sumA = sumA + pz(medium,j)*wa(medium,j)
27021     CONTINUE
27022     CONTINUE
          sumA = sumA*amu
          DO 27031 k=1,kmix
            cs(ii,k) = 0
            DO 27041 j=1,NNE(medium)
              Z = zelem(medium,j)
              iz = int(Z+0.1)
              Z = Z*Z/sumA
              cs(ii,k) = cs(ii,k) + pz(medium,j)*Z*cs_array(i,k,iz)
27041       CONTINUE
27042       CONTINUE
            csx(k) = Log(cs(ii,k))
27031     CONTINUE
27032     CONTINUE
          call set_spline(xi_array,csx,afx,bfx,cfx,dfx,kmix)
          cse(ii) = 0
          aux = Log(ee(ii)/ap(medium))
          DO 27051 i_gauss=1,ngauss
            xi = log(1 - ap(medium)/ee(ii)*exp(x_gauss(i_gauss)*aux)+1e-
     *      6)
            res = spline(xi,xi_array,afx,bfx,cfx,dfx,kmix)
            cse(ii) = cse(ii) + w_gauss(i_gauss)*exp(res)
27051     CONTINUE
27052     CONTINUE
27011   CONTINUE
27012   CONTINUE
        nener = ilast - ifirst + 1
        call set_spline(ele,cse,afe,bfe,cfe,dfe,nener)
        neke = meke(medium)
        sigee = 1E-15
        sigep = 1E-15
        DO 27061 i=1,neke
          eil = (float(i) - eke0(medium))/eke1(medium)
          ei = exp(eil)
          leil = i
          beta2 = ei*(ei+2*rm)/(ei+rm)**2
          IF (( ei .LE. ap(medium) )) THEN
            sigb = 1e-30
          ELSE
            sigb = spline(eil,ele,afe,bfe,cfe,dfe,nener)
            sigb = sigb*log(ei/ap(medium))/beta2*rho(medium)
          END IF
          sigt=esig1(Leil,MEDIUM)*eil+esig0(Leil,MEDIUM)
          ebr1=ebr11(Leil,MEDIUM)*eil+ebr10(Leil,MEDIUM)
          IF((sigt .LT. 0))sigt = 0
          IF((ebr1 .GT. 1))ebr1 = 1
          IF((ebr1 .LT. 0))ebr1 = 0
          IF (( i .GT. 1 )) THEN
            si_esig = si1_esig
            si_ebr1 = si1_ebr1
            si1_esig = sigt*(1 - ebr1) + sigb
            si1_ebr1 = sigb/si1_esig
            esig1(i-1,medium) = (si1_esig - si_esig)*eke1(medium)
            esig0(i-1,medium) = si1_esig - esig1(i-1,medium)*eil
            ebr11(i-1,medium) = (si1_ebr1 - si_ebr1)*eke1(medium)
            ebr10(i-1,medium) = si1_ebr1 - ebr11(i-1,medium)*eil
          ELSE
            si1_esig = sigt*(1 - ebr1) + sigb
            si1_ebr1 = sigb/si1_esig
          END IF
          sigt=psig1(Leil,MEDIUM)*eil+psig0(Leil,MEDIUM)
          ebr1=pbr11(Leil,MEDIUM)*eil+pbr10(Leil,MEDIUM)
          ebr2=pbr21(Leil,MEDIUM)*eil+pbr20(Leil,MEDIUM)
          IF((sigt .LT. 0))sigt = 0
          IF((ebr1 .GT. 1))ebr1 = 1
          IF((ebr1 .LT. 0))ebr1 = 0
          IF((ebr2 .GT. 1))ebr2 = 1
          IF((ebr2 .LT. 0))ebr2 = 0
          sig_bhabha = sigt*(ebr2 - ebr1)
          IF((sig_bhabha .LT. 0))sig_bhabha = 0
          IF (( i .GT. 1 )) THEN
            si_psig = si1_psig
            si_pbr1 = si1_pbr1
            si_pbr2 = si1_pbr2
            si1_psig = sigt*(1 - ebr1) + sigb
            si1_pbr1 = sigb/si1_psig
            si1_pbr2 = (sigb + sig_bhabha)/si1_psig
            psig1(i-1,medium) = (si1_psig - si_psig)*eke1(medium)
            psig0(i-1,medium) = si1_psig - psig1(i-1,medium)*eil
            pbr11(i-1,medium) = (si1_pbr1 - si_pbr1)*eke1(medium)
            pbr10(i-1,medium) = si1_pbr1 - pbr11(i-1,medium)*eil
            pbr21(i-1,medium) = (si1_pbr2 - si_pbr2)*eke1(medium)
            pbr20(i-1,medium) = si1_pbr2 - pbr21(i-1,medium)*eil
          ELSE
            si1_psig = sigt*(1 - ebr1) + sigb
            si1_pbr1 = sigb/si1_psig
            si1_pbr2 = (sigb + sig_bhabha)/si1_psig
          END IF
          ededx=ededx1(Leil,MEDIUM)*eil+ededx0(Leil,MEDIUM)
          sige = si1_esig/ededx
          IF((sige .GT. sigee))sigee = sige
          ededx=pdedx1(Leil,MEDIUM)*eil+pdedx0(Leil,MEDIUM)
          sige = si1_psig/ededx
          IF((sige .GT. sigep))sigep = sige
27061   CONTINUE
27062   CONTINUE
        esig1(neke,medium) = esig1(neke-1,medium)
        esig0(neke,medium) = esig0(neke-1,medium)
        ebr11(neke,medium) = ebr11(neke-1,medium)
        ebr10(neke,medium) = ebr10(neke-1,medium)
        psig1(neke,medium) = psig1(neke-1,medium)
        psig0(neke,medium) = psig0(neke-1,medium)
        pbr11(neke,medium) = pbr11(neke-1,medium)
        pbr10(neke,medium) = pbr10(neke-1,medium)
        pbr21(neke,medium) = pbr21(neke-1,medium)
        pbr20(neke,medium) = pbr20(neke-1,medium)
        write(i_log,*) ' Max. new cross sections per energy loss: ',sige
     *  e,sigep
        esig_e(medium) = sigee
        psig_e(medium) = sigep
        IF((sigee .GT. esige_max))esige_max = sigee
        IF((sigep .GT. psige_max))psige_max = sigep
        nb_emin(medium) = energy_array(ifirst)
        IF (( nb_emin(medium) .LE. ap(medium) )) THEN
          nb_emin(medium) = energy_array(ifirst+1)
        END IF
        nb_emax(medium) = energy_array(ilast)
        nb_lemin(medium) = log(nb_emin(medium))
        nb_lemax(medium) = log(nb_emax(medium))
        nb_dle(medium) = (nb_lemax(medium) - nb_lemin(medium))/(100-1)
        nb_dlei(medium) = 1/nb_dle(medium)
        eil = nb_lemin(medium) - nb_dle(medium)
        DO 27071 i=1,100
          eil = eil + nb_dle(medium)
          ei = exp(eil)
          DO 27081 ii=1,nener
            IF((ei .LT. ee(ii)))GO TO27082
27081     CONTINUE
27082     CONTINUE
          ii = ii-1
          IF((ii .LT. 1))ii = 1
          IF((ii .GT. nener-1))ii = nener-1
          ple = (eil - ele(ii))/(ele(ii+1)-ele(ii))
          qle = 1 - ple
          DO 27091 k=1,kmix
            csx(k) = log(qle*cs(ii,k) + ple*cs(ii+1,k))
27091     CONTINUE
27092     CONTINUE
          call set_spline(xi_array,csx,afx,bfx,cfx,dfx,kmix)
          x = ap(medium)/ei
          aux = -log(x)
          xi = log(1 - x+1e-6)
          res = spline(xi,xi_array,afx,bfx,cfx,dfx,kmix)
          nb_xdata(0,i,medium) = 0
          nb_fdata(0,i,medium) = exp(res)
          DO 27101 k=1,kmix
            IF((x_array(k) .GT. x))GO TO27102
27101     CONTINUE
27102     CONTINUE
          IF((k .GT. kmix))k = kmix
          ndat = 0
          DO 27111 j=k+1,kmix-1
            ndat = ndat+1
            nb_xdata(ndat,i,medium) = log(x_array(j)/x)/aux
            nb_fdata(ndat,i,medium) = exp(csx(j))
            IF (( fool_intel_optimizer )) THEN
              write(i_log,*) 'nb_xdata(ndat,i,medium): ', nb_xdata(ndat,
     *        i,medium)
            END IF
27111     CONTINUE
27112     CONTINUE
          ndat = ndat+1
          nb_xdata(ndat,i,medium) = 1
          nb_fdata(ndat,i,medium) = exp(csx(kmix))
          IF((ndat .GE. 50))goto 27120
27131     CONTINUE
            x_max_error = 0
            f_max_error = 0
            k_max_error = 0
            max_error = 0
            DO 27141 k=0,ndat-1
              x = 0.5*(nb_xdata(k,i,medium) + nb_xdata(k+1,i,medium))
              f = 0.5*(nb_fdata(k,i,medium) + nb_fdata(k+1,i,medium))
              xi = log(1 - ap(medium)/ei*exp(x*aux)+1e-6)
              res = spline(xi,xi_array,afx,bfx,cfx,dfx,kmix)
              res = exp(res)
              error = abs(1-f/res)
              IF (( error .GT. max_error )) THEN
                x_max_error = x
                f_max_error = res
                max_error = error
                k_max_error = k
              END IF
27141       CONTINUE
27142       CONTINUE
            ndat = ndat+1
            DO 27151 k=ndat,k_max_error+2,-1
              nb_xdata(k,i,medium) = nb_xdata(k-1,i,medium)
              nb_fdata(k,i,medium) = nb_fdata(k-1,i,medium)
27151       CONTINUE
27152       CONTINUE
            nb_xdata(k_max_error+1,i,medium) = x_max_error
            nb_fdata(k_max_error+1,i,medium) = f_max_error
            IF(((ndat .EQ. 50)))GO TO27132
          GO TO 27131
27132     CONTINUE
27120     call prepare_alias_table(50,nb_xdata(0,i,medium), nb_fdata(0,i
     *    ,medium),nb_wdata(1,i,medium),nb_idata(1,i,medium))
27071   CONTINUE
27072   CONTINUE
26981 CONTINUE
26982 CONTINUE
      write(i_log,*) ' '
      write(i_log,*) ' '
      return
19230 write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) 'failed to open EGSnrc data file ',tmp1_string(:lnb
     *lnk1(tmp1_string))
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      return
      end
      subroutine init_nrc_pair
      implicit none
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/ELECIN/ esig_e(12),psig_e(12), esige_max, psige_max, range_
     *ep(0:1,500,12), E_array(500,12), etae_ms0(500,12),etae_ms1(500,12)
     *,etap_ms0(500,12),etap_ms1(500,12),q1ce_ms0(500,12),q1ce_ms1(500,1
     *2),q1cp_ms0(500,12),q1cp_ms1(500,12),q2ce_ms0(500,12),q2ce_ms1(500
     *,12),q2cp_ms0(500,12),q2cp_ms1(500,12),blcce0(500,12),blcce1(500,1
     *2), EKE0(12),EKE1(12), XR0(12),TEFF0(12),BLCC(12),XCC(12), ESIG0(5
     *00,12),ESIG1(500,12),PSIG0(500,12),PSIG1(500,12),EDEDX0(500,12),ED
     *EDX1(500,12),PDEDX0(500,12),PDEDX1(500,12),EBR10(500,12),EBR11(500
     *,12),PBR10(500,12),PBR11(500,12),PBR20(500,12),PBR21(500,12),TMXS0
     *(500,12),TMXS1(500,12), expeke1(12), IUNRST(12),EPSTFL(12),IAPRIM(
     *12), sig_ismonotone(0:1,12)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      common/nrc_pair/ nrcp_fdata(65,84,12), nrcp_wdata(65,84,12), nrcp_
     *idata(65,84,12), nrcp_xdata(65), nrcp_emin, nrcp_emax, nrcp_dle, n
     *rcp_dlei
      real*8 nrcp_fdata,nrcp_wdata,nrcp_xdata, nrcp_emin, nrcp_emax, nrc
     *p_dle, nrcp_dlei
      integer*4 nrcp_idata
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      character nrcp_file*256, endianess*4
      integer egs_get_unit
      integer*4 nrcp_unit, want_nrcp_unit, rec_length
      integer*4 i, lnblnk1
      real*8 tmp, ddx, xx, Z
      real*4 emin, emax
      integer*4 ne, nb, ix, ie, irec, i_ele, nbb, iz
      character endian, cdum( 243)
      logical swap
      real*4 tmp_4, tarray(65)
      integer*4 itmp_4
      character c_4(4), ic_4(4)
      equivalence (tmp_4,c_4), (itmp_4, ic_4)
      DO 27161 i=1,len(nrcp_file)
        nrcp_file(i:i) = ' '
27161 CONTINUE
27162 CONTINUE
      nrcp_file = hen_house(:lnblnk1(hen_house)) // 'data' // '/' // 'pa
     *ir_nrc1.data'
      want_nrcp_unit = 62
      nrcp_unit = egs_get_unit(want_nrcp_unit)
      IF (( nrcp_unit .LT. 1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'init_nrc_pair: failed to get a free fortran unit
     *'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      rec_length = 65*4
      open(nrcp_unit,file=nrcp_file,form='unformatted',access='direct',
     *status='old',recl=rec_length,err=27170)
      read(nrcp_unit,rec=1,err=27180) emin, emax, ne, nb, endian, cdum
      IF (( ichar(endian) .EQ. 0 )) THEN
        endianess = '1234'
      ELSE
        endianess = '4321'
      END IF
      swap = endianess.ne.'1234'
      IF (( swap )) THEN
        tmp_4 = emin
        call egs_swap_4(c_4)
        emin = tmp_4
        tmp_4 = emax
        call egs_swap_4(c_4)
        emax = tmp_4
        itmp_4 = ne
        call egs_swap_4(ic_4)
        ne = itmp_4
        itmp_4 = nb
        call egs_swap_4(ic_4)
        nb = itmp_4
      END IF
      write(i_log,'(//a,a)') 'Reading NRC pair data base from ',nrcp_fil
     *e(:lnblnk1(nrcp_file))
      write(i_log,'(a,a,a)') 'Data generated on a machine with ',endiane
     *ss,' endianess'
      write(i_log,'(a,a)') 'The endianess of this CPU is ','1234'
      IF (( swap )) THEN
        write(i_log,'(a)') '=> will need to do byte swaping'
      END IF
      write(i_log,'(a,2f9.3)') 'Energy range of the data: ',emin,emax
      IF (( nb .NE. 65 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'Inconsistent x-grid size'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF (( ne .NE. 84 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'Inconsistent energy grid size'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      nrcp_emin = emin
      nrcp_emax = emax
      nrcp_dle = log((emax-2)/(emin-2))/(ne-1)
      nrcp_dlei = 1/nrcp_dle
      nbb = nb/2
      ddx = sqrt(0.5)/nbb
      DO 27191 ix=0,nbb
        xx = ddx*ix
        nrcp_xdata(ix+1) = xx*xx
27191 CONTINUE
27192 CONTINUE
      do ix=nbb-1,0,-1
        xx = ddx*ix
        nrcp_xdata(nb-ix) = 1 - xx*xx
      end do
      DO 27211 medium=1,NMED
        write(i_log,'(a,i4,a,$)') '  medium ',medium,' .................
     *.... '
        DO 27221 ie=1,84
          DO 27231 ix=1,65
            nrcp_fdata(ix,ie,medium) = 0
27231     CONTINUE
27232     CONTINUE
27221   CONTINUE
27222   CONTINUE
        DO 27241 i_ele=1,NNE(medium)
          Z = ZELEM(medium,i_ele)
          iz = int(Z+0.5)
          tmp = PZ(medium,i_ele)*Z*Z
          irec = (iz-1)*ne + 2
          DO 27251 ie=1,84
            read(nrcp_unit,rec=irec,err=27180) tarray
            DO 27261 ix=1,65
              tmp_4 = tarray(ix)
              IF (( swap )) THEN
                call egs_swap_4(c_4)
              END IF
              nrcp_fdata(ix,ie,medium)=nrcp_fdata(ix,ie,medium)+tmp*tmp_
     *        4
27261       CONTINUE
27262       CONTINUE
            irec = irec + 1
27251     CONTINUE
27252     CONTINUE
27241   CONTINUE
27242   CONTINUE
        DO 27271 ie=1,84
          call prepare_alias_table(nb-1,nrcp_xdata,nrcp_fdata(1,ie,mediu
     *    m), nrcp_wdata(1,ie,medium),nrcp_idata(1,ie,medium))
27271   CONTINUE
27272   CONTINUE
        write(i_log,'(a)') ' done'
27211 CONTINUE
27212 CONTINUE
      write(i_log,*) ' '
      close(nrcp_unit)
      return
27170 CONTINUE
      write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) 'Failed to open NRC pair data file'
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
27180 CONTINUE
      write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) 'I/O error while reading NRC pair data file'
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      end
      subroutine vmc_electron(ircode)
      implicit none
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer*4 ircode
      write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(//a//)') ' ********* VMC Transport option not in thi
     *s distribution ****** '
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      end
      subroutine egs_init_default_rng
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      ixx=0
      jxx=0
      call init_ranmar
      return
      end
      subroutine egs_init_rng(arg1,arg2)
      integer*4 arg1,arg2
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      ixx = arg1
      jxx = arg2
      call init_ranmar
      return
      end
      subroutine egs_get_rndm(ran)
      real*8 ran
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      IF((rng_seed .GT. 128))call ranmar_get
      ran = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      return
      end
      subroutine egs_get_rndm_array(n,rarray)
      integer*4 n
      real*8 rarray(*)
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      real*8 rtmp
      integer*4 i
      IF((n .LT. 1))return
      DO 27281 i=1,n
        IF((rng_seed .GT. 128))call ranmar_get
        rtmp = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        rarray(i) = rtmp
27281 CONTINUE
27282 CONTINUE
      return
      end
      subroutine eii_init
      implicit none
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L(3000),IPHTER(3000)
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/eii_data/ eii_xsection_a( 10000),  eii_xsection_b( 10000),
     * eii_cons(12), eii_a(40),  eii_b(40),  eii_L_factor,  eii_z(40),
     *eii_sh(40),  eii_nshells(100),  eii_nsh(12),  eii_first(12,50),  e
     *ii_no(12,50),  eii_flag
      real*8 eii_xsection_a,eii_xsection_b,eii_a,eii_b,eii_cons,eii_L_fa
     *ctor
      integer*4 eii_z,eii_sh,eii_nshells
      integer*4 eii_first,eii_no
      integer*4 eii_elements,eii_flag,eii_nsh
      COMMON/ELECIN/ esig_e(12),psig_e(12), esige_max, psige_max, range_
     *ep(0:1,500,12), E_array(500,12), etae_ms0(500,12),etae_ms1(500,12)
     *,etap_ms0(500,12),etap_ms1(500,12),q1ce_ms0(500,12),q1ce_ms1(500,1
     *2),q1cp_ms0(500,12),q1cp_ms1(500,12),q2ce_ms0(500,12),q2ce_ms1(500
     *,12),q2cp_ms0(500,12),q2cp_ms1(500,12),blcce0(500,12),blcce1(500,1
     *2), EKE0(12),EKE1(12), XR0(12),TEFF0(12),BLCC(12),XCC(12), ESIG0(5
     *00,12),ESIG1(500,12),PSIG0(500,12),PSIG1(500,12),EDEDX0(500,12),ED
     *EDX1(500,12),PDEDX0(500,12),PDEDX1(500,12),EBR10(500,12),EBR11(500
     *,12),PBR10(500,12),PBR11(500,12),PBR20(500,12),PBR21(500,12),TMXS0
     *(500,12),TMXS1(500,12), expeke1(12), IUNRST(12),EPSTFL(12),IAPRIM(
     *12), sig_ismonotone(0:1,12)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      integer*4 imed,iele,ish,nsh,iZ,j,i,itmp,nskip,nbin,ii,nsh_tot,iii,
     *k
      integer*4 jj,jjj
      integer*4 lnblnk1
      integer*4 tmp_array(100)
      integer*4 want_eii_unit,eii_unit,eii_out,egs_open_file
      integer egs_get_unit
      real*8 e_eii_min,emax,fmax,aux_array(250)
      real*8 sigo,loge,tau,beta2,p2,uwm,Wmax
      real*8 ss_0, ss_1, sh_0, sh_1, aux, av_e, con_med, dedx_old, sigm_
     *old
      real*8 dedx,e,sig,sigm,wbrem,sum_a,sum_z,sum_pz,sum_wa,Ec,Ecc
      real*8 sum_sh,sum_occn,U,sum_sigma,sum_dedx
      real*8 sigma,sigma_old,wbrem_old,sig_j,de
      integer*4 lloge
      logical check_it,is_monotone,getd
      real*8 sigma_max
      character eii_file*128
      character*512 toUpper
      integer*4 occn_numbers(4)
      real*8 cons
      parameter (cons = 0.153536)
      data occn_numbers/2,2,2,4/
      DO 27291 j=1,100
        eii_nshells(j) = 0
27291 CONTINUE
27292 CONTINUE
      DO 27301 j=1,12
        eii_nsh(j) = 0
27301 CONTINUE
27302 CONTINUE
      IF (( eii_flag .EQ. 0 )) THEN
        return
      END IF
      getd = .false.
      DO 27311 j=1,3000
        IF (( iedgfl(j) .GT. 0 .AND. iedgfl(j) .LE. 100 )) THEN
          getd = .true.
          GO TO27312
        END IF
27311 CONTINUE
27312 CONTINUE
      IF (( .NOT.getd )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,'(/a,/a,/a,/a)') ' In subroutine eii_init: ', '   Sc
     *attering off bound electrons creates atomic vacancies,', '   poten
     *tially starting an atomic relaxation cascade. ', '   Please turn O
     *N atomic relaxations.'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      e_eii_min = 1e30
      DO 27321 imed=1,nmed
        IF((ae(imed)-rm .LT. e_eii_min))e_eii_min = ae(imed) - rm
        IF((ap(imed) .LT. e_eii_min))e_eii_min = ap(imed)
27321 CONTINUE
27322 CONTINUE
      write(i_log,*) ' '
      write(i_log,*) 'eii_init: minimum threshold energy found: ',e_eii_
     *min
      DO 27331 imed=1,nmed
        DO 27341 iele=1,nne(imed)
          iZ = int(zelem(imed,iele)+0.5)
          IF (( eii_nshells(iZ) .EQ. 0 )) THEN
            nsh = 0
            DO 27351 ish=1,4
              IF((binding_energies(ish,iZ) .GT. e_eii_min))nsh = nsh+1
27351       CONTINUE
27352       CONTINUE
            eii_nshells(iZ) = nsh
          END IF
27341   CONTINUE
27342   CONTINUE
27331 CONTINUE
27332 CONTINUE
      nsh = 0
      DO 27361 iZ=1,100
        nsh = nsh + eii_nshells(iZ)
27361 CONTINUE
27362 CONTINUE
      IF (( nsh .EQ. 0 )) THEN
        write(i_log,*) '*** EII requested but no shells with binding ene
     *rgies '
        write(i_log,*) '    above the specified threshold found'
        write(i_log,*) '    => turning off EII'
        eii_flag = 0
      END IF
      IF (( nsh .GT. 40 )) THEN
        write(i_log,*) '*** Number of shells with binding energies great
     *er than '
        write(i_log,*) '    the specified thresholds is ',nsh
        write(i_log,*) '    This is more than the allocated arrays can h
     *old'
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) '    Increase the macro $MAX_EII_SHELLS and retry
     *'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      write(i_log,*) 'eii_init: number of shells to simulate EII: ',nsh
      nsh_tot = nsh
      tmp_array(1) = 0
      DO 27371 j=2,100
        tmp_array(j) = tmp_array(j-1) + eii_nshells(j-1)
27371 CONTINUE
27372 CONTINUE
      DO 27381 imed=1,nmed
        nsh = 0
        DO 27391 iele=1,nne(imed)
          iZ = int(zelem(imed,iele)+0.5)
          eii_no(imed,iele) = eii_nshells(iZ)
          nsh = nsh + eii_nshells(iZ)
          IF (( eii_nshells(iZ) .GT. 0 )) THEN
            eii_first(imed,iele) = tmp_array(iZ) + 1
          ELSE
            eii_first(imed,iele) = 0
          END IF
27391   CONTINUE
27392   CONTINUE
        eii_nsh(imed) = nsh
27381 CONTINUE
27382 CONTINUE
      DO 27401 i=1,len(eii_file)
        eii_file(i:i) = ' '
27401 CONTINUE
27402 CONTINUE
      eii_file = hen_house(:lnblnk1(hen_house)) // 'data' // '/' // 'eii
     *_'// eii_xfile(:lnblnk1(eii_xfile)) //'.data'
      want_eii_unit = 62
      eii_unit = egs_get_unit(want_eii_unit)
      IF (( eii_unit .LT. 1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'eii_init: failed to get a free Fortran I/O unit'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      open(eii_unit,file=eii_file(:lnblnk1(eii_file)),status='old',err=2
     *7410)
      write(i_log,'(//a,a)') 'Opened EII data file ',eii_file(:lnblnk1(e
     *ii_file))
      write(i_log,'(a,$)') ' eii_init: reading EII data ... '
      read(eii_unit,*,err=27420,end=27420) nskip
      DO 27431 j=1,nskip
        read(eii_unit,*,err=27420,end=27420)
27431 CONTINUE
27432 CONTINUE
      read(eii_unit,*,err=27420,end=27420) emax,nbin
      IF (( nbin .NE. 250 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'Inconsistent EII data file'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF ((xsec_out .EQ. 1)) THEN
        eii_out = egs_open_file(93,0,1,'.eiixsec')
      END IF
      ii = 0
      DO 27441 j=1,100
        read(eii_unit,*,err=27420,end=27420) iZ,nsh
        IF ((xsec_out .EQ. 1 .AND. eii_nshells(iZ) .GT. 0)) THEN
          write(eii_out,*) '================================='
          write(eii_out,'(a,i3)') 'EII xsections for element Z = ',iZ
          write(eii_out,*) '================================='
        END IF
        IF (( nsh .LT. eii_nshells(iZ) )) THEN
          write(i_log,*) 'EII data file has data for ',nsh,' shells for
     *element '
          write(i_log,*) iZ,' but according'
          write(i_log,*) 'to binding energies and thresholds ',eii_nshel
     *    ls(iZ)
          write(i_log,*) 'shells are required'
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'This is a fatal error.'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        DO 27451 ish=1,nsh
          read(eii_unit,*,err=27420,end=27420) fmax
          read(eii_unit,*,err=27420,end=27420) aux_array
          IF ((ish.GT.1 .AND. ish .LT. 5)) THEN
            fmax = fmax*eii_L_factor
          END IF
          IF (( ish .LE. eii_nshells(iZ) )) THEN
            IF ((xsec_out .EQ. 1)) THEN
              IF ((ish .EQ. 1)) THEN
                write(eii_out,'(a,f10.2,a)') 'K-shell sigma_max = ',fmax
     *          ,' b/atom'
              ELSE IF((ish .EQ. 2)) THEN
                write(eii_out,'(a,f9.2,a)') '=> LI-shell sigma_max = ',f
     *          max,' b/atom'
              ELSE IF((ish .EQ. 3)) THEN
                write(eii_out,'(a,f8.2,a)') '=> LII-shell sigma_max = ',
     *          fmax,' b/atom'
              ELSE IF((ish .EQ. 4)) THEN
                write(eii_out,'(a,f8.2,a)') '=> LIII-shell sigma_max = '
     *          ,fmax,' b/atom'
              ELSE
                write(eii_out,*) '=> Wrong number of shells!'
              END IF
              write(eii_out,*) '   E/keV     sigma/(b/atom)'
              write(eii_out,*) '---------------------------'
            END IF
            ii = ii+1
            eii_z(ii) = iZ
            eii_sh(ii) = ish
            eii_a(ii) = nbin
            eii_a(ii) = eii_a(ii)/log(emax/binding_energies(ish,iZ))
            eii_b(ii) = 1 - eii_a(ii)*log(binding_energies(ish,iZ))
            DO 27461 k=1,nbin
              IF (( k .GT. 1 )) THEN
                sigo = fmax*aux_array(k-1)
              ELSE
                sigo = 0
              END IF
              loge = (k - eii_b(ii))/eii_a(ii)
              iii = nbin*(ii-1)+k
              eii_xsection_a(iii) = (fmax*aux_array(k)-sigo)*eii_a(ii)
              eii_xsection_b(iii) = sigo - eii_xsection_a(iii)*loge
              IF ((xsec_out .EQ. 1)) THEN
                write(eii_out,'(f12.2,2X,10f9.2)') Exp((k+1-eii_b(ii))/e
     *          ii_a(ii))*1000.0,fmax*aux_array(k)
              END IF
27461       CONTINUE
27462       CONTINUE
          END IF
27451   CONTINUE
27452   CONTINUE
        IF (( ii .EQ. nsh_tot )) THEN
          GO TO27442
        END IF
27441 CONTINUE
27442 CONTINUE
      close(eii_unit)
      IF ((xsec_out .EQ. 1)) THEN
        close(eii_out)
      END IF
      write(i_log,*) ' OK '
      write(i_log,*) ' '
      DO 27471 imed=1,nmed
        Ec = ae(imed) - rm
        Ecc = min(Ec,ap(imed))
        sum_z=0
        sum_pz=0
        sum_a=0
        sum_wa=0
        DO 27481 iele=1,nne(imed)
          sum_z = sum_z + pz(imed,iele)*zelem(imed,iele)
          sum_pz = sum_pz + pz(imed,iele)
          sum_wa = sum_wa + rhoz(imed,iele)
          sum_a = sum_a + pz(imed,iele)*wa(imed,iele)
27481   CONTINUE
27482   CONTINUE
        con_med = rho(imed)/1.6605655/sum_a
        eii_cons(imed) = con_med
        IF (( eii_nsh(imed) .GT. 0 )) THEN
          is_monotone = .true.
          sigma_max = 0
          DO 27491 j=1,meke(imed)
            loge = (j - eke0(imed))/eke1(imed)
            e = Exp(loge)
            tau = e/rm
            beta2 = tau*(tau+2)/(tau+1)**2
            p2 = 2*rm*tau*(tau+2)
            lloge = j
            medium = imed
            dedx=ededx1(Lloge,MEDIUM)*loge+ededx0(Lloge,MEDIUM)
            IF (( e .GT. ap(medium) .OR. e .GT. 2*Ec )) THEN
              sig=esig1(Lloge,MEDIUM)*loge+esig0(Lloge,MEDIUM)
            ELSE
              sig = 0
            END IF
            IF (( e .GT. 2*Ec )) THEN
              wbrem=ebr11(Lloge,MEDIUM)*loge+ebr10(Lloge,MEDIUM)
              sigm = sig*(1-wbrem)
            ELSE
              sigm = 0
              wbrem = 1
            END IF
            sum_occn=0
            sum_sigma=0
            sum_dedx=0
            DO 27501 iele=1,nne(imed)
              iZ = int(zelem(imed,iele)+0.5)
              sum_sh = 0
              DO 27511 ish=1,eii_no(imed,iele)
                jj = eii_first(imed,iele) + ish - 1
                jjj = eii_sh(jj)
                U = binding_energies(jjj,iZ)
                Wmax = (e+U)/2
                uwm = U/Wmax
                IF (( U .LT. e .AND. U .GT. Ecc )) THEN
                  sum_sh = sum_sh + occn_numbers(jjj)
                  ss_0 = 2*(log(p2/U)-uwm**3*log(p2/Wmax)- (beta2+0.8333
     *            33)*(1-uwm**3))/3/U
                  sh_0 = ((1-uwm)*(1+uwm/(2-uwm))+U*(Wmax-U)/(e+rm)**2 -
     *             (2*tau+1)/(tau+1)**2*uwm/2*log((2-uwm)/uwm))/U
                  ss_1 = log(p2/U)-uwm**2*log(p2/Wmax)- (beta2+1)*(1-uwm
     *            **2)
                  sh_1 = log(Wmax/U/(2-uwm))+2*(Wmax-U)/(2*Wmax-U) +(Wma
     *            x**2-U**2)/(e+rm)**2/2 -(2*tau+1)/(tau+1)**2*log((2*Wm
     *            ax-U)/Wmax)
                  av_E = (ss_1 + sh_1)/(ss_0 + sh_0)
                  i = eii_a(jjj)*loge + eii_b(jjj)
                  i = (jj-1)*250 + i
                  sig_j = eii_xsection_a(i)*loge + eii_xsection_b(i)
                  sig_j = sig_j*pz(imed,iele)*con_med
                  sum_sigma = sum_sigma + sig_j
                  sum_dedx = sum_dedx + sig_j*av_E
                END IF
27511         CONTINUE
27512         CONTINUE
              sum_occn = sum_occn + sum_sh*pz(imed,iele)
27501       CONTINUE
27502       CONTINUE
            sigm = sigm + sum_sigma
            dedx = dedx - sum_dedx
            aux = Ec/e
            IF (( e .GT. 2*Ec )) THEN
              sigo = cons*sum_occn*rho(imed)/(beta2*Ec)*( (1-2*aux)*(1+a
     *        ux/(1-aux)+(tau/(tau+1))**2*aux/2)- (2*tau+1)/(tau+1)**2*a
     *        ux*log((1-aux)/aux))/sum_a
              de = cons*sum_occn*rho(imed)/beta2*( log(0.25/aux/(1-aux))
     *        +(1-2*aux)/(1-aux)+ (tau/(tau+1))**2*(1-4*aux*aux)/8- (2*t
     *        au+1)/(tau+1)**2*log(2*(1-aux)))/sum_a
              sigm = sigm - sigo
              dedx = dedx + de
            END IF
            sigma = sigm + wbrem*sig
            IF((sigma/dedx .GT. sigma_max))sigma_max = sigma/dedx
            IF (( sigma .GT. 0 )) THEN
              wbrem = wbrem*sig/sigma
            ELSE
              wbrem = 1
            END IF
            IF (( j .GT. 1 )) THEN
              ededx1(j-1,imed) = (dedx - dedx_old)*eke1(imed)
              ededx0(j-1,imed) = dedx - ededx1(j-1,imed)*loge
              esig1(j-1,imed) = (sigma - sigma_old)*eke1(imed)
              esig0(j-1,imed) = sigma - esig1(j-1,imed)*loge
              ebr11(j-1,imed) = (wbrem - wbrem_old)*eke1(imed)
              ebr10(j-1,imed) = wbrem - ebr11(j-1,imed)*loge
              IF((sigma/dedx .LT. sigma_old/dedx_old))is_monotone = .fal
     *        se.
            END IF
            dedx_old = dedx
            sigm_old = sigm
            sigma_old = sigma
            wbrem_old = wbrem
27491     CONTINUE
27492     CONTINUE
          ededx1(meke(imed),imed) = ededx1(meke(imed)-1,imed)
          ededx0(meke(imed),imed) = ededx0(meke(imed)-1,imed)
          esig1(meke(imed),imed) = esig1(meke(imed)-1,imed)
          esig0(meke(imed),imed) = esig0(meke(imed)-1,imed)
          ebr11(meke(imed),imed) = ebr11(meke(imed)-1,imed)
          ebr10(meke(imed),imed) = ebr10(meke(imed)-1,imed)
          write(i_log,*) 'eii_init: for medium ',imed,' adjusted sige =
     *', sigma_max,' monotone = ',is_monotone
          sig_ismonotone(0,imed) = is_monotone
          esig_e(imed) = sigma_max
        END IF
27471 CONTINUE
27472 CONTINUE
      return
27420 write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) 'I/O error while reading EII data'
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
27410 write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(//a,a,/a,/a/)') 'Failed to open EII data file ',eii_
     *file(:lnblnk1(eii_file)), 'Make sure file exists in your $HEN_HOUS
     *E/data directory!', '****BEWARE of case sensitive file names!!!'
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      return
      end
      subroutine eii_sample(ish,iZ,Uj)
      implicit none
      integer*4 ish,iZ
      real*8 Uj
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      common/eii_data/ eii_xsection_a( 10000),  eii_xsection_b( 10000),
     * eii_cons(12), eii_a(40),  eii_b(40),  eii_L_factor,  eii_z(40),
     *eii_sh(40),  eii_nshells(100),  eii_nsh(12),  eii_first(12,50),  e
     *ii_no(12,50),  eii_flag
      real*8 eii_xsection_a,eii_xsection_b,eii_a,eii_b,eii_cons,eii_L_fa
     *ctor
      integer*4 eii_z,eii_sh,eii_nshells
      integer*4 eii_first,eii_no
      integer*4 eii_elements,eii_flag,eii_nsh
      common/egs_vr/ e_max_rr(3000),  prob_RR,  nbr_split,  i_play_RR,
     *    i_survived_RR,
     *        n_RR_warning,                                        i_do_
     *rr(3000)
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/relax_data/ relax_first(3000),  relax_ntran(3000),  relax_s
     *tate(10000),  relax_prob(10000),  relax_atbin(10000),  relax_ntot
      real*8 relax_prob
      integer*4 relax_first, relax_ntran, relax_state, relax_atbin, rela
     *x_ntot
      COMMON/USERPF/GWTOLD,GWAIT,IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME
     *, NP_INC,MFORCF,DUMU,PATHL,DELTAP,EPSLON,ARG, IRODUM,IRNDUM,ICMNEW
     *DUM,ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      real*8 GWTOLD,GWAIT(10000),DUMU,PATHL,DELTAP,EPSLON,ARG
      INTEGER IFORCE,NFMIN,NFMAX,NFCMIN,NFCMAX,NFTIME(10000), NP_INC(100
     *00),MFORCF,IRODUM,IRNDUM,ICMNEWDUM, ICMOLDDUM,MEDDUM,IDUM,MEDTMP
      COMMON/USERRR/ESAVE_GLOBAL,ECUTRR, RANGE_ECUTRR,ESAVE, IREJCT,IREJ
     *CT_GLOBAL,i_rr_global
      real*8 ESAVE_GLOBAL,ECUTRR(3000),RANGE_ECUTRR(3000), ESAVE(3000)
      INTEGER IREJCT(3000),IREJCT_GLOBAL,i_rr_global
      COMMON/USERSPL/SSD,FS, IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,
     *NSPLIT_ELEC, NSPLITI,NSPLIT
      INTEGER IBRSPL,NBRSPL,IRRLTT,ICM_SPLIT,NSPLIT_PHOT,NSPLIT_ELEC, NS
     *PLITI,NSPLIT(10000)
      real*8 SSD,FS
      COMMON/USERST/ZLAST,XLAST,YLAST,FDUMMY,ZLASTOLD,LATCH_OPTION,LNOB2
     *9,NPASSI, IPHATI,NPASS,IDUMMY,LATCHIN,LATCHOUT,LATCHOLD
      real*8 ZLAST(10000),XLAST(10000),YLAST(10000),FDUMMY,ZLASTOLD
      INTEGER LATCH_OPTION,LNOB29,NPASSI,IPHATI, NPASS(10000,3),IDUMMY,L
     *ATCHIN,LATCHOUT,LATCHOLD
      COMMON/USERDBS/ E_DBS,time_brem,time_comp,time_start,time_end, U_D
     *BS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST_DBS,DIST_
     *DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_DBS, ZRR_D
     *BS,ZPOSN_DBS, IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS(3), NSPLIT_DBS
     *, NP_DBS,IDBS,JDBS,IPHAT(10000),IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLA
     *NE_DBS,IRAD_DBS,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,co
     *unt_nphoto,count_nannih, count_kill_brem,count_kill_comp,count_kil
     *l_photo,count_kill_annih, count_kill_tmp,count_esplit,  USE_REJPLN
     *,Z_REJPLN,FLAG_REJPLN
      logical USE_REJPLN
      real*8 Z_REJPLN
      integer*4 FLAG_REJPLN
      real*8 U_DBS,V_DBS,W_DBS,X_DBS,Y_DBS,Z_DBS,WT_DBS,DNEAR_DBS, ZLAST
     *_DBS,DIST_DBS,R2_DBS,RNNO_DBS,COSTHE_DBS,SINTHE_DBS,CPHI_DBS,SPHI_
     *DBS, ZRR_DBS,ZPOSN_DBS
      DOUBLE PRECISION E_DBS
      integer*4 IR_DBS,LATCH_DBS,NFTIME_DBS,NPASS_DBS,NSPLIT_DBS, NP_DBS
     *,IDBS,JDBS,IPHAT,IPHAT_DBS,PLAYRR_DBS, ICM_DBS,ZPLANE_DBS,IRAD_DBS
     *,ESPLIT_DBS, count_nbrem,count_ncomp,count_npair,count_nphoto,coun
     *t_nannih, count_kill_brem,count_kill_comp,count_kill_photo,count_k
     *ill_annih, count_kill_tmp,count_esplit
      real*8 time_brem,time_comp,time_start,time_end
      common/cs_enhancement/ cs_enhance(25), cse_return(35), use_cs_enha
     *nce
      real*8 cs_enhance
      logical cse_return, use_cs_enhance
      COMMON/USERDSB/rsq_dsb,rnno_dsb, i_dsb, do_dsb,splitcm_dsb,k_dsb,
     *dsb_delta,dsb_rbin(1000+1),dsb_prob(1000), dsb_ibin(1000),dsb_aeff
     *,dsb_nbin
      real*8 rsq_dsb,rnno_dsb, dsb_delta,dsb_rbin,dsb_prob,dsb_aeff
      integer*4 i_dsb,do_dsb,splitcm_dsb,k_dsb, dsb_ibin,dsb_nbin
      COMMON/BCSE/ BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL,
     *is_bcse_medium(12), MED_BCSE,NBRSPL_ORGNL,nmed_enhance,USE_BCSE
      logical USE_BCSE,is_bcse_medium
      integer*4 MED_BCSE,NBRSPL_ORGNL,nmed_enhance
      real*8 BCSE_FACTOR_C,BCSE_POWER_N,BCSE_FACTOR,ENPOLD_ORGNL
      COMMON/SCORE/  NX_ZONE,NY_ZONE,XMIN_ZONE,XMAX_ZONE,YMIN_ZONE,YMAX_
     *ZONE, SCDOSE,SCDOSE2, SCFLU, SCFLU2, SCFLU_COV, SCSTP,SCDSTP,SCSTP
     *2,SCDSTP2, PIISTP,PHSP_OUTDIR, AMASS,TMCPUO,TIMMAX,EIN, RSCORE_ZON
     *E, RSCORE_ZONE2, EKMAXPHSP, EKMINPHSPE, NINCPHSP, ZPHSP, ZPLOTCHM,
     *MAXWEIGHT, MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP, SCFLU_TMP, SCSTP_T
     *MP,SCDSTP_TMP, IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NP
     *PHSP, NPHOTPHSP, INPHSP,NPFLU, SCFLU_NUM, is_finished, data_unit,M
     *XNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,NSC_ZONES, IPLANE_t
     *o_CM,IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISCORE,ISZ,IDAT, IRESTART, I
     *QIN,MZONE_TYPE,NDOSE_ZONE,DOSE_ZONE, MAX_BIT,IREGION_TO_BIT, LNEXC
     *, LNINC, L_N_EXC,L_N_INC, FLUENCERR,IPLOTFLAG,DOSE_STAT,NUM_BREM,
     *SCFLU_NOCOV,NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST, SCFLU
     *_LAST
      REAL*8 SCDOSE(1500,12),SCDOSE2(1500,12), SCFLU(3,3,5+1,8), SCFLU2(
     *3,3,5+1,8), SCFLU_COV(3,3,5+1,4), SCSTP,SCDSTP,SCSTP2,SCDSTP2, PII
     *STP
      CHARACTER*80 PHSP_OUTDIR
      real*8 AMASS(1500),TMCPUO,TIMMAX,EIN, RSCORE_ZONE(3,5), RSCORE_ZON
     *E2(3,5), EKMAXPHSP(3), EKMINPHSPE(3), NINCPHSP, ZPHSP(3), ZPLOTCHM
     *(1500+1),MAXWEIGHT,MINWEIGHT,ECUTIN,PCUTIN, SCDOSE_TMP(1500,12), S
     *CFLU_TMP(3,3,5+1,8), SCSTP_TMP,SCDSTP_TMP,  XMIN_ZONE(3),XMAX_ZONE
     *(3), YMIN_ZONE(3),YMAX_ZONE(3)
      integer*8 IHSTRY,NHSTRY,NCASE,NCASEO,NHSTRYO,NCASET,JCASE, NPPHSP(
     *3),NPHOTPHSP(3),INPHSP, NPFLU(3), SCFLU_NUM(3,3,5+1,2)
      logical is_finished
      INTEGER data_unit,MXNP,ISTORE,IWATCH,IO_OPT,IOUTSP,ID, NSC_PLANES,
     *NSC_ZONES(3), IPLANE_to_CM(3),IZLAST,I_MU_PHSP,IZSCORE,JHSTRY, ISC
     *ORE,ISZ,IDAT, IRESTART, IQIN,MZONE_TYPE(3),NDOSE_ZONE,DOSE_ZONE(30
     *00), MAX_BIT,IREGION_TO_BIT(3000), LNEXC, LNINC, L_N_EXC(12, 32),L
     *_N_INC(12,32), FLUENCERR(3),IPLOTFLAG,DOSE_STAT,NUM_BREM, SCFLU_NO
     *COV(3,3,5+1,2),  NX_ZONE(3),NY_ZONE(3)
      integer*2 NHSTRY_LAST,SCSTP_LAST,SCDSTP_LAST, SCDOSE_LAST(1500,12)
     *, SCFLU_LAST(3,3,5+1,2)
      COMMON/SCORE_FORPARALLEL/INPHSP_MAX, INPHSP_MIN
      integer*8 INPHSP_MAX, INPHSP_MIN
      real*8 T,tau,tau1,tau12,tau2,p2,beta2,c1,c2,Wmax,xmax,fm_s,fm_h,pr
     *ob_s,prob
      real*8 r1,r2,r3,wx,wxx,aux,frej
      real*8 peie,pese1,pese2,dcosth,h1
      integer*4 iarg
      real*8 eta,cphi,sphi
      integer*4 np_save,ip,j
      real*8 xphi,xphi2,yphi,yphi2,rhophi2
      peie = e(np)
      T = peie - rm
      tau = T/rm
      tau1 = tau+1
      tau12 = tau1*tau1
      tau2 = tau*tau
      p2 = tau2 + 2*tau
      beta2 = p2/tau12
      Wmax = 0.5*(T+Uj)
      xmax = Uj/Wmax
      c1 = (Wmax/peie)**2
      c2 = (2*tau+1)/tau12
      fm_s = log(rmt2*p2/Uj) - beta2 - 0.5
      prob_s = 0.66666667*fm_s*(1+xmax+xmax*xmax)
      fm_h = 2 + c1 - c2
      IF((fm_h .LT. 1))fm_h = 1
      prob = fm_h + prob_s
27521 CONTINUE
        IF((rng_seed .GT. 128))call ranmar_get
        r1 = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        IF((rng_seed .GT. 128))call ranmar_get
        r2 = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        IF((rng_seed .GT. 128))call ranmar_get
        r3 = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        IF (( r1*prob .LT. fm_h )) THEN
          wx = 1/(r2*xmax+1-r2)
          wxx = wx*xmax
          aux = wxx/(2-wxx)
          frej = (1 + aux*(aux-c2)+c1*wxx*wxx)/fm_h
        ELSE
          wx = 1/(r2*xmax**3+1-r2)**0.333333333
          frej = 1 - log(wx)/fm_s
        END IF
        IF((( r3 .LT. frej )))GO TO27522
      GO TO 27521
27522 CONTINUE
      wx = wx*Uj
      h1 = (peie + prm)/T
      pese1 = peie - wx
      e(np) = pese1
      dcosth = h1*(pese1-prm)/(pese1+prm)
      sinthe = dsqrt(1-dcosth)
      costhe = dsqrt(dcosth)
      call uphi(2,1)
      pese2 = wx - Uj + prm
      edep_local = 0
      IF (( pese2 .GT. ae(medium) )) THEN
        IF (( np+1 .GT. 10000 )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','eii_sample
     *', ' stack size exceeded! ',' $MAXSTACK = ',10000,' np = ',np+1
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        np = np+1
        e(np) = pese2
        dcosth = h1*(pese2-prm)/(pese2+prm)
        sinthe = -dsqrt(1-dcosth)
        costhe = dsqrt(dcosth)
        iq(np) = -1
        call uphi(3,2)
        edep = 0
      ELSE
        edep = wx - Uj
        edep_local = edep
        iarg = 34
        IF (( iausfl(iarg+1) .NE. 0 )) THEN
          call ausgab(iarg)
          IF (( wt(np) .LE. 0 )) THEN
            np = np-1
            return
          END IF
        END IF
      END IF
      call relax(Uj,ish,iZ)
      IF (( edep .GT. 0 )) THEN
        iarg = 4
        IF (( iausfl(iarg+1) .NE. 0 )) THEN
          call ausgab(iarg)
          IF (( wt(np) .LE. 0 )) THEN
            np = np-1
            return
          END IF
        END IF
      END IF
      return
      end
      subroutine egs_scale_photon_xsection(imed,fac,which)
      implicit none
      integer*4 imed,which
      real*8 fac
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/PHOTIN/ EBINDA(12), GE0(12),GE1(12), GMFP0(2000,12),GMFP1(2
     *000,12),GBR10(2000,12),GBR11(2000,12),GBR20(2000,12),GBR21(2000,12
     *), RCO0(12),RCO1(12), RSCT0(100,12),RSCT1(100,12), COHE0(2000,12),
     *COHE1(2000,12),  PHOTONUC0(2000,12),PHOTONUC1(2000,12), DPMFP, MPG
     *EM(1,12), NGR(12)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer*4 ifirst,ilast,medium,j
      logical has_r
      real*8 gle,gmfp,gbr1,gbr2,cohfac,aux,gmfp_old,gbr1_old,gbr2_old,co
     *hfac_old
      character*8 strings(5)
      data strings/'photon','Rayleigh','Compton','pair','photo'/
      IF (( which .LT. 0 .OR. which .GT. 4 )) THEN
        return
      END IF
      IF (( imed .GT. 0 .AND. imed .LE. nmed )) THEN
        ifirst = imed
        ilast = imed
      ELSE
        ifirst = 1
        ilast = nmed
      END IF
      IF (( which .EQ. 1 )) THEN
        has_r = .false.
        DO 27531 medium=ifirst,ilast
          IF (( iraylm(medium) .EQ. 1 )) THEN
            has_r = .true.
          END IF
27531   CONTINUE
27532   CONTINUE
        IF((.NOT.has_r))return
      END IF
      write(i_log,*) ' '
      DO 27541 medium=ifirst,ilast
        write(i_log,'(a,a,a,i3,a,f9.5)') 'Scaling ',strings(which+1),' x
     *-section data for medium', medium,' with ',fac
        DO 27551 j=1,mge(medium)
          gle = (j - ge0(medium))/ge1(medium)
          gmfp = gmfp0(j,medium) + gmfp1(j,medium)*gle
          gbr1 = gbr10(j,medium) + gbr11(j,medium)*gle
          gbr2 = gbr20(j,medium) + gbr21(j,medium)*gle
          IF (( iraylm(medium) .EQ. 1 )) THEN
            cohfac = cohe0(j,medium) + cohe1(j,medium)*gle
          ELSE
            cohfac = 1
          END IF
          IF (( which .EQ. 0 )) THEN
            gmfp = gmfp/fac
          ELSE IF(( which .EQ. 1 )) THEN
            cohfac = cohfac/(fac*(1-cohfac)+cohfac)
          ELSE
            IF (( which .EQ. 2 )) THEN
              aux = fac*(gbr2-gbr1) + gbr1 + 1 - gbr2
              gbr2 = (gbr1 + fac*(gbr2-gbr1))/aux
              gbr1 = gbr1/aux
            ELSE IF(( which .EQ. 3 )) THEN
              aux = fac*gbr1 + 1 - gbr1
              gbr2 = (fac*gbr1 + gbr2-gbr1)/aux
              gbr1 = fac*gbr1/aux
            ELSE
              aux = gbr2 + fac*(1-gbr2)
              gbr1 = gbr1/aux
              gbr2 = gbr2/aux
            END IF
            gmfp = gmfp/aux
            cohfac = cohfac*aux/(aux*cohfac + 1 - cohfac)
          END IF
          IF (( j .GT. 1 )) THEN
            gmfp1(j-1,medium) = (gmfp - gmfp_old)*ge1(medium)
            gmfp0(j-1,medium) = gmfp - gmfp1(j-1,medium)*gle
            gbr11(j-1,medium) = (gbr1 - gbr1_old)*ge1(medium)
            gbr10(j-1,medium) = gbr1 - gbr11(j-1,medium)*gle
            gbr21(j-1,medium) = (gbr2 - gbr2_old)*ge1(medium)
            gbr20(j-1,medium) = gbr2 - gbr21(j-1,medium)*gle
            cohe1(j-1,medium) = (cohfac - cohfac_old)*ge1(medium)
            cohe0(j-1,medium) = cohfac - cohe1(j-1,medium)*gle
          END IF
          gmfp_old = gmfp
          gbr1_old = gbr1
          gbr2_old = gbr2
          cohfac_old = cohfac
27551   CONTINUE
27552   CONTINUE
        gmfp1(mge(medium),medium) = gmfp1(mge(medium)-1,medium)
        gmfp0(mge(medium),medium) = gmfp0(mge(medium)-1,medium)
        gbr11(mge(medium),medium) = gbr11(mge(medium)-1,medium)
        gbr10(mge(medium),medium) = gbr10(mge(medium)-1,medium)
        gbr21(mge(medium),medium) = gbr21(mge(medium)-1,medium)
        gbr20(mge(medium),medium) = gbr20(mge(medium)-1,medium)
        cohe1(mge(medium),medium) = cohe1(mge(medium)-1,medium)
        cohe0(mge(medium),medium) = cohe0(mge(medium)-1,medium)
27541 CONTINUE
27542 CONTINUE
      return
      end
      subroutine egs_init_user_photon(prefix,comp_prefix,photonuc_prefix
     *,out)
      implicit none
      character*(*) prefix, comp_prefix,  photonuc_prefix
      integer*4 out
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L(3000),IPHTER(3000)
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/PHOTIN/ EBINDA(12), GE0(12),GE1(12), GMFP0(2000,12),GMFP1(2
     *000,12),GBR10(2000,12),GBR11(2000,12),GBR20(2000,12),GBR21(2000,12
     *), RCO0(12),RCO1(12), RSCT0(100,12),RSCT1(100,12), COHE0(2000,12),
     *COHE1(2000,12),  PHOTONUC0(2000,12),PHOTONUC1(2000,12), DPMFP, MPG
     *EM(1,12), NGR(12)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      common/compton_data/ iz_array(1538),  be_array(1538),  Jo_array(15
     *38),  erfJo_array(1538),   ne_array(1538),  shn_array(1538),
     *shell_array(200,12), eno_array(200,12), eno_atbin_array(200,12), n
     *_shell(12), radc_flag,  ibcmp(3000)
      integer*4 iz_array,ne_array,shn_array,eno_atbin_array, shell_array
     *,n_shell,radc_flag
      real*8 be_array,Jo_array,erfJo_array,eno_array
      integer*2 ibcmp
      common/x_options/eadl_relax,  mcdf_pe_xsections
      logical eadl_relax, mcdf_pe_xsections
      integer*4 lnblnk1,egs_get_unit,medium, photo_unit,pair_unit,raylei
     *gh_unit,triplet_unit, ounit,egs_open_file,compton_unit,  photonuc_
     *unit
      integer*4 nge,sorted(50),i,j,k,iz,iz_old,ndat
      real*8 z_sorted(50),pz_sorted(50)
      real*8 sig_photo(2000),sig_pair(2000),sig_triplet(2000), sig_rayle
     *igh(2000),sig_compton(2000)
      real*8 sigma,cohe,gmfp,gbr1,gbr2,sig_KN,gle,e,sig_p
      real*8 cohe_old,gmfp_old,gbr1_old,gbr2_old,  sig_photonuc(2000), p
     *hotonuc, photonuc_old
      real*8 etmp(2000),ftmp(2000)
      real*8 sumZ,sumA,con1,con2,egs_KN_sigma0
      real*8 bc_emin,bc_emax,bc_dle,bc_data(183),bc_tmp(183),bcf,aj
      integer*4 bc_ne
      logical input_compton_data,  input_photonuc_data
      character data_dir*128,photo_file*140,pair_file*140,rayleigh_file*
     *144, triplet_file*142,tmp_string*144,compton_file*144,  photonuc_f
     *ile*144
      write(i_log,'(/a$)') '(Re)-initializing photon cross sections'
      write(i_log,'(a,a/)') ' with files from the series: ', prefix(:lnb
     *lnk1(prefix))
      write(i_log,'(a,a)') ' Compton cross sections: ',comp_prefix(:lnbl
     *nk1(comp_prefix))
      IF ((iphotonuc .EQ. 1)) THEN
        write(i_log,'(a,a)') ' Photonuclear cross sections: ', photonuc_
     *  prefix(:lnblnk1(photonuc_prefix))
        input_photonuc_data = .false.
        IF ((lnblnk1(photonuc_prefix) .GT. 0 .AND. photonuc_prefix(1:7)
     *  .NE. 'default')) THEN
          input_photonuc_data = .true.
        END IF
      END IF
      input_compton_data = .false.
      IF (( ibcmp(1) .GT. 1 .AND. lnblnk1(comp_prefix) .GT. 0 )) THEN
        IF((comp_prefix(1:7) .NE. 'default'))input_compton_data = .true.
      END IF
      data_dir = hen_house(:lnblnk1(hen_house)) // 'data' // '/'
      photo_file = data_dir(:lnblnk1(data_dir)) // prefix(:lnblnk1(prefi
     *x)) // '_photo.data'
      pair_file = data_dir(:lnblnk1(data_dir)) // prefix(:lnblnk1(prefix
     *)) // '_pair.data'
      triplet_file = data_dir(:lnblnk1(data_dir)) // prefix(:lnblnk1(pre
     *fix)) // '_triplet.data'
      rayleigh_file = data_dir(:lnblnk1(data_dir)) // prefix(:lnblnk1(pr
     *efix)) // '_rayleigh.data'
      IF (( input_compton_data )) THEN
        compton_file = data_dir(:lnblnk1(data_dir)) // comp_prefix(:lnbl
     *  nk1(comp_prefix)) // '_compton.data'
      ELSE
        compton_file = data_dir(:lnblnk1(data_dir)) // 'compton_sigma.da
     *ta'
      END IF
      write(i_log,'(a,a)') ' Using Compton cross sections from ', compto
     *n_file(:lnblnk1(compton_file))
      IF ((iphotonuc .EQ. 1)) THEN
        IF (( input_photonuc_data )) THEN
          photonuc_file = data_dir(:lnblnk1(data_dir)) // photonuc_prefi
     *    x(:lnblnk1(photonuc_prefix)) // '_photonuc.data'
        ELSE
          photonuc_file = data_dir(:lnblnk1(data_dir)) // 'iaea_photonuc
     *.data'
        END IF
        write(i_log,'(a,a)') ' Using photonuclear cross sections from ',
     *   photonuc_file(:lnblnk1(photonuc_file))
      END IF
      photo_unit = 83
      photo_unit = egs_get_unit(photo_unit)
      IF (( photo_unit .LT. 1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'egs_init_user_photon: failed to get a free Fortr
     *an I/O unit'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      tmp_string = photo_file
      open(photo_unit,file=photo_file,status='old',err=27560)
      pair_unit = 84
      pair_unit = egs_get_unit(pair_unit)
      IF (( pair_unit .LT. 1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'egs_init_user_photon: failed to get a free Fortr
     *an I/O unit'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      tmp_string = pair_file
      open(pair_unit,file=pair_file,status='old',err=27560)
      triplet_unit = 85
      triplet_unit = egs_get_unit(triplet_unit)
      IF (( triplet_unit .LT. 1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'egs_init_user_photon: failed to get a free Fortr
     *an I/O unit'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      tmp_string = triplet_file
      open(triplet_unit,file=triplet_file,status='old',err=27560)
      rayleigh_unit = 86
      rayleigh_unit = egs_get_unit(rayleigh_unit)
      IF (( rayleigh_unit .LT. 1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'egs_init_user_photon: failed to get a free Fortr
     *an I/O unit'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      tmp_string = rayleigh_file
      open(rayleigh_unit,file=rayleigh_file,status='old',err=27560)
      IF (( ibcmp(1) .GT. 1 )) THEN
        compton_unit = 88
        compton_unit = egs_get_unit(compton_unit)
        IF (( compton_unit .LT. 1 )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'egs_init_user_photon: failed to get a free For
     *tran I/O unit'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        tmp_string = compton_file
        open(compton_unit,file=compton_file,status='old',err=27560)
      END IF
      IF (( iphotonuc .EQ. 1 )) THEN
        photonuc_unit = 89
        photonuc_unit = egs_get_unit(photonuc_unit)
        IF (( photonuc_unit .LT. 1 )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'egs_init_user_photon: failed to get a free For
     *tran I/O unit'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        tmp_string = photonuc_file
        open(photonuc_unit,file=photonuc_file,status='old',err=27560)
      END IF
      IF (( out .EQ. 1 )) THEN
        ounit = egs_open_file(87,0,1,'.xsections')
        write(ounit,'(/a,a,a)') 'Photon cross sections initialized from
     *', prefix(:lnblnk1(prefix)),' data files'
        write(ounit,'(a,/)') '==========================================
     *=================================='
        write(ounit,'(a,/)') 'Grid energies and cross sections are outpu
     *t'
        IF ((iphotonuc .EQ. 1)) THEN
          write(ounit,'(5x,a,t19,a,t34,a,t49,a,t64,a,t79,a)') 'Energy','
     * GMFP(cm) ',' Pair ','Compton',' GMFP(cm) ', ' GMFP(cm) '
          write(ounit,'(5x,a,t19,a,t34,a,t49,a,t64,a,t79,a/)') '(MeV)','
     *no Rayleigh','(fraction)','(fraction)','with Rayleigh', 'w/ Ray +
     *photnuc'
        ELSE
          write(ounit,'(5x,a,t19,a,t34,a,t49,a,t64,a)') 'Energy',' GMFP(
     *cm) ',' Pair ','Compton',' GMFP(cm) '
          write(ounit,'(5x,a,t19,a,t34,a,t49,a,t64,a/)') '(MeV)','no Ray
     *leigh','(fraction)','(fraction)','with Rayleigh'
        END IF
      END IF
      DO 27571 iz=1,100
        read(photo_unit,*) ndat
        read(photo_unit,*) (etmp(k),ftmp(k),k=1,ndat)
        k = 0
        DO 27581 j=ndat,2,-1
          IF (( etmp(j)-etmp(j-1) .LT. 1e-5 )) THEN
            k = k+1
            IF (( k .LE. 30 )) THEN
              binding_energies(k,iz) = exp(etmp(j))
            ELSE
              write(i_log,'(/a)') '***************** Error: '
              write(i_log,'(i3,a,i3,//a)') k,' binding energies read exc
     *eeding array size of', 30,'Increase $MXSHXSEC in egsnrc.macros!'
              write(i_log,'(/a)') '***************** Quiting now.'
              call exit(1)
            END IF
            IF((.NOT.eadl_relax .AND. k .GE. 4))GO TO27582
          END IF
27581   CONTINUE
27582   CONTINUE
27571 CONTINUE
27572 CONTINUE
      IF ((mcdf_pe_xsections)) THEN
        call egs_read_shellwise_pe()
      END IF
      DO 27591 medium=1,nmed
        mge(medium) = 2000
        nge = 2000
        ge1(medium) = nge-1
        ge1(medium) = ge1(medium)/log(up(medium)/ap(medium))
        ge0(medium) = 1 - ge1(medium)*log(ap(medium))
        write(i_log,'(a,i3,a,$)') ' Working on medium ',medium,' ... '
        IF (( out .EQ. 1 )) THEN
          write(ounit,'(/,2x,a,i3,a,24a1/)') 'Medium ',medium,': ', (med
     *    ia(k,medium),k=1,24)
        END IF
        sumZ=0
        sumA=0
        DO 27601 i=1,nne(medium)
          z_sorted(i) = zelem(medium,i)
          sumZ = sumZ + pz(medium,i)*zelem(medium,i)
          sumA = sumA + pz(medium,i)*wa(medium,i)
27601   CONTINUE
27602   CONTINUE
        con1 = sumZ*rho(medium)/(sumA*1.6605655)
        con2 = rho(medium)/(sumA*1.6605655)
        call egs_heap_sort(nne(medium),z_sorted,sorted)
        DO 27611 i=1,nne(medium)
          pz_sorted(i) = pz(medium,sorted(i))
27611   CONTINUE
27612   CONTINUE
        IF ((mcdf_pe_xsections)) THEN
          call egsi_get_shell_data(medium,nge,nne(medium),z_sorted,pz_so
     *    rted, ge1(medium),ge0(medium),sig_photo)
        ELSE
          call egsi_get_data(0,photo_unit,nge,nne(medium),z_sorted,pz_so
     *    rted, ge1(medium),ge0(medium),sig_photo)
        END IF
        call egsi_get_data(0,rayleigh_unit,nge,nne(medium),z_sorted,pz_s
     *  orted, ge1(medium),ge0(medium),sig_rayleigh)
        call egsi_get_data(1,pair_unit,nge,nne(medium),z_sorted,pz_sorte
     *  d, ge1(medium),ge0(medium),sig_pair)
        call egsi_get_data(2,triplet_unit,nge,nne(medium),z_sorted,pz_so
     *  rted, ge1(medium),ge0(medium),sig_triplet)
        IF (( iphotonuc .EQ. 1 )) THEN
          call egsi_get_data(3,photonuc_unit,nge,nne(medium),z_sorted,pz
     *    _sorted, ge1(medium),ge0(medium),sig_photonuc)
        END IF
        IF (( ibcmp(1) .GT. 1 )) THEN
          IF (( input_compton_data )) THEN
            call egsi_get_data(0,compton_unit,nge,nne(medium), z_sorted,
     *      pz_sorted,ge1(medium),ge0(medium), sig_compton)
          ELSE
            rewind(compton_unit)
            read(compton_unit,*) bc_emin,bc_emax,bc_ne
            IF (( bc_ne .GT. 183 )) THEN
              write(i_log,'(/a)') '***************** Error: '
              write(i_log,*) 'Number of input Compton data exceeds array
     * size'
              write(i_log,'(/a)') '***************** Quiting now.'
              call exit(1)
            END IF
            bc_dle = log(bc_emax/bc_emin)/(bc_ne-1)
            DO 27621 j=1,bc_ne
              bc_data(j) = 0
27621       CONTINUE
27622       CONTINUE
            iz_old = 1
            DO 27631 i=1,nne(medium)
              iz = int(z_sorted(i)+0.5)
              DO 27641 j=iz_old,iz
                read(compton_unit,*) (bc_tmp(k),k=1,bc_ne)
27641         CONTINUE
27642         CONTINUE
              DO 27651 j=1,bc_ne
                bc_data(j)=bc_data(j)+pz_sorted(i)*z_sorted(i)*bc_tmp(j)
27651         CONTINUE
27652         CONTINUE
              iz_old = iz+1
27631       CONTINUE
27632       CONTINUE
            DO 27661 j=1,bc_ne
              bc_data(j)=log(bc_data(j)/sumZ)
27661       CONTINUE
27662       CONTINUE
          END IF
        END IF
        call egs_init_rayleigh(medium,sig_rayleigh)
        DO 27671 i=1,nge
          gle = (i - ge0(medium))/ge1(medium)
          e = exp(gle)
          sig_KN = sumZ*egs_KN_sigma0(e)
          IF (( ibcmp(1) .GT. 1 )) THEN
            IF (( input_compton_data )) THEN
              sig_KN = sig_compton(i)
            ELSE
              IF (( e .LE. bc_emin )) THEN
                bcf = exp(bc_data(1))
              ELSE IF(( e .LT. bc_emax )) THEN
                aj = 1 + log(e/bc_emin)/bc_dle
                j = int(aj)
                aj = aj - j
                bcf = exp(bc_data(j)*(1-aj) + bc_data(j+1)*aj)
              ELSE
                bcf = 1
              END IF
              sig_KN = sig_KN*bcf
            END IF
          END IF
          sig_p = sig_pair(i) + sig_triplet(i)
          sigma = sig_KN + sig_p + sig_photo(i)
          gmfp = 1/(sigma*con2)
          gbr1 = sig_p/sigma
          gbr2 = gbr1 + sig_KN/sigma
          cohe = sigma/(sig_rayleigh(i) + sigma)
          photonuc = sigma/(sig_photonuc(i) + sigma)
          IF (( out .EQ. 1 )) THEN
            IF ((iphotonucm(medium) .EQ. 1)) THEN
              write(ounit,'(6(1pe15.6))') e,gmfp,gbr1,gbr2-gbr1, gmfp*co
     *        he,gmfp*cohe*photonuc
            ELSE
              write(ounit,'(5(1pe15.6))') e,gmfp,gbr1,gbr2-gbr1,gmfp*coh
     *        e
            END IF
          END IF
          IF (( i .GT. 1 )) THEN
            gmfp1(i-1,medium) = (gmfp - gmfp_old)*ge1(medium)
            gmfp0(i-1,medium) = gmfp - gmfp1(i-1,medium)*gle
            gbr11(i-1,medium) = (gbr1 - gbr1_old)*ge1(medium)
            gbr10(i-1,medium) = gbr1 - gbr11(i-1,medium)*gle
            gbr21(i-1,medium) = (gbr2 - gbr2_old)*ge1(medium)
            gbr20(i-1,medium) = gbr2 - gbr21(i-1,medium)*gle
            cohe1(i-1,medium) = (cohe - cohe_old)*ge1(medium)
            cohe0(i-1,medium) = cohe - cohe1(i-1,medium)*gle
            photonuc1(i-1,medium) = (photonuc - photonuc_old)*ge1(medium
     *      )
            photonuc0(i-1,medium) = photonuc - photonuc1(i-1,medium)*gle
          END IF
          gmfp_old = gmfp
          gbr1_old = gbr1
          gbr2_old = gbr2
          cohe_old = cohe
          photonuc_old = photonuc
27671   CONTINUE
27672   CONTINUE
        gmfp1(nge,medium) = gmfp1(nge-1,medium)
        gmfp0(nge,medium) = gmfp - gmfp1(nge,medium)*gle
        gbr11(nge,medium) = gbr11(nge-1,medium)
        gbr10(nge,medium) = gbr1 - gbr11(nge,medium)*gle
        gbr21(nge,medium) = gbr21(nge-1,medium)
        gbr20(nge,medium) = gbr2 - gbr21(nge,medium)*gle
        cohe1(nge,medium) = cohe1(nge-1,medium)
        cohe0(nge,medium) = cohe - cohe1(nge,medium)*gle
        photonuc1(nge,medium) = photonuc1(nge-1,medium)
        photonuc0(nge,medium) = photonuc - photonuc1(nge,medium)*gle
        write(i_log,'(a)') 'OK'
27591 CONTINUE
27592 CONTINUE
      close(photo_unit)
      close(pair_unit)
      close(triplet_unit)
      close(rayleigh_unit)
      IF (( iphotonuc .EQ. 1 )) THEN
        close(photonuc_unit)
      END IF
      IF (( ibcmp(1) .GT. 1 )) THEN
        close(compton_unit)
      END IF
      IF (( out .EQ. 1 )) THEN
        close(ounit)
      END IF
      return
27560 CONTINUE
      write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(//a,a)') 'Failed to open data file ',tmp_string(:lnb
     *lnk1(tmp_string))
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      return
      end
      subroutine egs_init_rayleigh(medium,sig_rayleigh)
      implicit none
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/PHOTIN/ EBINDA(12), GE0(12),GE1(12), GMFP0(2000,12),GMFP1(2
     *000,12),GBR10(2000,12),GBR11(2000,12),GBR20(2000,12),GBR21(2000,12
     *), RCO0(12),RCO1(12), RSCT0(100,12),RSCT1(100,12), COHE0(2000,12),
     *COHE1(2000,12),  PHOTONUC0(2000,12),PHOTONUC1(2000,12), DPMFP, MPG
     *EM(1,12), NGR(12)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/rayleigh_inputs/iray_ff_media(12),iray_ff_file(12)
      character*24 iray_ff_media
      character*128 iray_ff_file
      COMMON/rayleigh_sampling/xgrid(100,12), fcum(100,12), b_array(100,
     *12), c_array(100,12), i_array(100,12), pmax0(2000,12),pmax1(2000,1
     *2)
      real*8 xgrid, fcum, b_array, c_array,pmax0, pmax1
      integer*4 i_array
      real*8 xval(100),aff(100,100),ff(100,12)
      real*8 xsc, fsc
      real*8 sig_rayleigh(2000), pe_array(2000,12)
      real*8 e,egs_rayleigh_sigma,gmfp,gle,conv,dle,dlei,sumA
      real*8 totRayleigh2,pzmin
      real*8 emin, emax
      integer*4 i,j,k,ff_unit, egs_get_unit, ne
      integer*4 lnblnk1, EOF, nff, medium, ncustom
      character dummy*24, afac_file*128, ff_file*128
      IF ((iraylm(medium).EQ.0)) THEN
        return
      END IF
      ncustom=0
      write(dummy,'(24a1)')(media(j,medium),j=1,24)
      ff_file=' '
      DO 27681 i=1,12
        IF ((lnblnk1(iray_ff_file(i)).NE.0)) THEN
          ncustom = ncustom + 1
        END IF
27681 CONTINUE
27682 CONTINUE
      DO 27691 i=1,ncustom
        IF ((dummy(:lnblnk1(dummy)) .EQ. iray_ff_media(i))) THEN
          ff_file = iray_ff_file(i)
        END IF
27691 CONTINUE
27692 CONTINUE
      ff_unit = egs_get_unit(0)
      IF (( ff_unit .LT. 1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'egs_init_rayleigh: failed to get a free Fortran
     *I/O unit'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF (( lnblnk1(ff_file) .GT. 0)) THEN
        open(ff_unit,file=ff_file(:lnblnk1(ff_file)), status='old',err=2
     *  7700)
        GOTO 27710
27700   write(i_log,'(/a)') '***************** Error: '
        write(i_log,'(2a)') 'egs_init_rayleigh: failed to open custom ff
     * file ', ff_file(:lnblnk1(ff_file))
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
27710   write(i_log,'(/2a)') 'Opened custom ff file ',ff_file(:lnblnk1(f
     *  f_file))
        j = 0
27721   CONTINUE
          j = j + 1
          read(ff_unit,*,IOSTAT=EOF) xsc, fsc
          IF((EOF .LT. 0))GO TO27722
          IF ((j .LE. 100)) THEN
            xgrid(j,medium)=xsc
            ff(j,medium)=fsc
          END IF
        GO TO 27721
27722   CONTINUE
        nff = j-1
        IF ((nff .GT. 100)) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(a,/,a,i5,a,i5,/,a)') 'subroutine egs_init_raylei
     *gh: form factors size too small!!', '$XRAYFF =  ', 100,', and need
     * to be ',nff, ' and try again!!!'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        IF((xgrid(1,medium) .LT. 1e-6))xgrid(1,medium) = 1e-4
        write(*,*) '\n  -> ', nff, ' values of mol. ff read!'
        sumA = 0.0
        DO 27731 j=1,nne(medium)
          sumA=sumA+PZ(medium,j)*WA(medium,j)
27731   CONTINUE
27732   CONTINUE
        DO 27741 j=1,MGE(medium)
          gle=(j-GE0(medium))/GE1(medium)
          e=exp(gle)
          sig_rayleigh(j)=egs_rayleigh_sigma(medium,e,nff, xgrid(1,mediu
     *    m),ff(1,medium))*sumA
27741   CONTINUE
27742   CONTINUE
      ELSE
        DO 27751 i=1,len(afac_file)
          afac_file(i:i) = ' '
27751   CONTINUE
27752   CONTINUE
        afac_file = hen_house(:lnblnk1(hen_house))//'pegs4'//'/'//'pgs4f
     *orm.dat'
        open(ff_unit,file=afac_file(:lnblnk1(afac_file)), status='old',e
     *  rr=27760)
        GOTO 27770
27760   write(i_log,'(/a)') '***************** Error: '
        write(i_log,'(2a)') 'egs_init_rayleigh: failed to open atomic ff
     * file', afac_file(:lnblnk1(afac_file))
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
27770   read(ff_unit,*) xval, aff
        DO 27781 i=1,100
          ff(i,medium) = 0.0
          xgrid(i,medium)=xval(i)
          DO 27791 j=1,nne(medium)
            ff(i,medium)=ff(i,medium)+PZ(medium,j)*aff(i,int(zelem(mediu
     *      m,j)))**2
27791     CONTINUE
27792     CONTINUE
          ff(i,medium) = sqrt(ff(i,medium))
27781   CONTINUE
27782   CONTINUE
        nff = 100
        IF((xgrid(1,medium) .LT. 1e-6))xgrid(1,medium) = 1e-4
        write(i_log,'(/a,i4,a)') '  -> ', nff, ' atomic ff values comput
     *ed!'
      END IF
      close(ff_unit)
      emin = exp((1 - ge0(medium))/ge1(medium))
      emax = exp((mge(medium) - ge0(medium))/ge1(medium))
      call prepare_rayleigh_data(nff,xgrid(1,medium),ff(1,medium), mge(m
     *edium),emin,emax, pe_array(1,medium),100, fcum(1,medium),i_array(1
     *,medium), b_array(1,medium),c_array(1,medium))
      ne=MGE(medium)
      dle=log(up(medium)/ap(medium))/(ne-1)
      dlei=1/dle
      DO 27801 i=1,ne-1
        gle = (i - ge0(medium))/ge1(medium)
        pmax1(i,medium)=(pe_array(i+1,medium)-pe_array(i,medium))*ge1(me
     *  dium)
        pmax0(i,medium)=pe_array(i,medium)-pmax1(i,medium)*gle
27801 CONTINUE
27802 CONTINUE
      pmax0(ne,medium)=pmax0(ne-1,medium)
      pmax1(ne,medium)=pmax1(ne-1,medium)
      return
      end
      subroutine egs_init_rayleigh_sampling(medium)
      implicit none
      COMMON/THRESH/RMT2,RMSQ, AP(12),AE(12),UP(12),UE(12),TE(12),THMOLL
     *(12)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR(3000),MED(3000),IRAYLR(3000),IP
     *HOTONUCR(3000)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/PHOTIN/ EBINDA(12), GE0(12),GE1(12), GMFP0(2000,12),GMFP1(2
     *000,12),GBR10(2000,12),GBR11(2000,12),GBR20(2000,12),GBR21(2000,12
     *), RCO0(12),RCO1(12), RSCT0(100,12),RSCT1(100,12), COHE0(2000,12),
     *COHE1(2000,12),  PHOTONUC0(2000,12),PHOTONUC1(2000,12), DPMFP, MPG
     *EM(1,12), NGR(12)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/rayleigh_inputs/iray_ff_media(12),iray_ff_file(12)
      character*24 iray_ff_media
      character*128 iray_ff_file
      COMMON/rayleigh_sampling/xgrid(100,12), fcum(100,12), b_array(100,
     *12), c_array(100,12), i_array(100,12), pmax0(2000,12),pmax1(2000,1
     *2)
      real*8 xgrid, fcum, b_array, c_array,pmax0, pmax1
      integer*4 i_array
      real*8 xval(100),aff(100,100),ff(100,12)
      real*8 xsc, fsc
      real*8 sig_rayleigh(2000), pe_array(2000,12)
      real*8 e,egs_rayleigh_sigma,gmfp,gle,conv,dle,dlei,sumA
      real*8 totRayleigh2,pzmin
      real*8 emin, emax
      integer*4 i,j,k,ff_unit, egs_get_unit, ne
      integer*4 lnblnk1, EOF, nff, medium, ncustom
      character dummy*24, afac_file*128, ff_file*128
      IF ((iraylm(medium).EQ.0)) THEN
        return
      END IF
      ff_unit = egs_get_unit(0)
      IF (( ff_unit .LT. 1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'egs_init_rayleigh: failed to get a free Fortran
     *I/O unit'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      DO 27811 i=1,len(afac_file)
        afac_file(i:i) = ' '
27811 CONTINUE
27812 CONTINUE
      afac_file = hen_house(:lnblnk1(hen_house))//'pegs4'//'/'//'pgs4for
     *m.dat'
      open(ff_unit,file=afac_file(:lnblnk1(afac_file)),status='old',err=
     *27760)
      GOTO 27770
27760 write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(2a)') 'egs_init_rayleigh_sampling: failed to open at
     *omic ff file ', afac_file(:lnblnk1(afac_file))
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
27770 read(ff_unit,*) xval, aff
      DO 27821 i=1,100
        ff(i,medium) = 0.0
        xgrid(i,medium)=xval(i)
        DO 27831 j=1,nne(medium)
          ff(i,medium)=ff(i,medium)+PZ(medium,j)*aff(i,int(zelem(medium,
     *    j)))**2
27831   CONTINUE
27832   CONTINUE
        ff(i,medium) = sqrt(ff(i,medium))
27821 CONTINUE
27822 CONTINUE
      nff = 100
      IF((xgrid(1,medium) .LT. 1e-6))xgrid(1,medium) = 1e-4
      write(i_log,'(/a,i4,a)') '  -> ', nff, ' atomic ff values computed
     *!'
      close(ff_unit)
      emin = exp((1 - ge0(medium))/ge1(medium))
      emax = exp((mge(medium) - ge0(medium))/ge1(medium))
      call prepare_rayleigh_data(nff,xgrid(1,medium),ff(1,medium), mge(m
     *edium),emin,emax, pe_array(1,medium),100, fcum(1,medium),i_array(1
     *,medium), b_array(1,medium),c_array(1,medium))
      ne=MGE(medium)
      DO 27841 i=1,ne-1
        gle = (i - ge0(medium))/ge1(medium)
        pmax1(i,medium)=(pe_array(i+1,medium)-pe_array(i,medium))*ge1(me
     *  dium)
        pmax0(i,medium)=pe_array(i,medium)-pmax1(i,medium)*gle
27841 CONTINUE
27842 CONTINUE
      pmax0(ne,medium)=pmax0(ne-1,medium)
      pmax1(ne,medium)=pmax1(ne-1,medium)
      return
      end
      real*8 function egs_rayleigh_sigma(imed,E,ndat,x,f)
      implicit none
      integer*4 i, j, k,imed, ndat
      real*8 hc2,conv,b,hc
      parameter (hc = 0.0123984768438,hc2=0.0001537222280)
      real*8 x(100), f(100), zero, E, xmax
      real*8 x1,x2,pow_x1,pow_x2,raysig,C,C2,f1,f2
      C=2.*hc2/(E*E)
      C2=C*C
      xmax=E/hc
      egs_rayleigh_sigma = 0.0
      DO 27851 i=1,ndat-1
        IF((x(i) .EQ. 0.0))x(i) = zero()
        IF((x(i+1) .EQ. 0.0))x(i+1) = zero()
        IF((f(i) .EQ. 0.0))f(i) = zero()
        IF((f(i+1) .EQ. 0.0))f(i+1) = zero()
        b = log(f(i+1)/f(i))/log(x(i+1)/x(i))
        x1=x(i)
        x2=x(i+1)
        IF ((x2 .GT. xmax)) THEN
          x2=xmax
        END IF
        pow_x1=x1**(2*b)
        pow_x2=x2**(2*b)
        raysig = pow_x2*(x2**2/(b+1)-(C*x2**4)/(b+2)+(C2*x2**6)/(2*b+6))
        raysig = raysig - pow_x1*(x1**2/(b+1)-(C*x1**4)/(b+2)+(C2*x1**6)
     *  /(2*b+6))
        raysig = raysig*f(i)*f(i)/pow_x1
        egs_rayleigh_sigma = egs_rayleigh_sigma + raysig
        IF ((x(i+1).GT.xmax)) THEN
          GO TO27852
        END IF
27851 CONTINUE
27852 CONTINUE
      egs_rayleigh_sigma = 0.49893439187842413747*C*egs_rayleigh_sigma
      return
      end
      subroutine egs_rayleigh_sampling(medium,e,gle,lgle,costhe,sinthe)
      implicit none
      real*8 e
      real*8 gle,costhe,sinthe,pmax,xv,xmax,csqthe
      real*8 rnnray1,rnnray0,hc_i,twice_hc2,dwi
      parameter(hc_i=80.65506856998,twice_hc2=0.000307444456)
      integer*4 lgle,ib,ibin,medium, trials
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/rayleigh_sampling/xgrid(100,12), fcum(100,12), b_array(100,
     *12), c_array(100,12), i_array(100,12), pmax0(2000,12),pmax1(2000,1
     *2)
      real*8 xgrid, fcum, b_array, c_array,pmax0, pmax1
      integer*4 i_array
      dwi = 100-1
      pmax=pmax1(Lgle,MEDIUM)*gle+pmax0(Lgle,MEDIUM)
      xmax = hc_i*e
27861 CONTINUE
        IF((rng_seed .GT. 128))call ranmar_get
        rnnray1 = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
27871   CONTINUE
          IF((rng_seed .GT. 128))call ranmar_get
          rnnray0 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          rnnray0 = rnnray0*pmax
          ibin = 1 + rnnray0*dwi
          ib = i_array(ibin,medium)
          IF (( i_array(ibin+1,medium) .GT. ib )) THEN
27881       CONTINUE
              IF((rnnray0.LT.fcum(ib+1,medium)))GO TO27882
              ib=ib+1
            GO TO 27881
27882       CONTINUE
          END IF
          rnnray0 = (rnnray0 - fcum(ib,medium))*c_array(ib,medium)
          xv = xgrid(ib,medium)*exp(log(1+rnnray0)*b_array(ib,medium))
          IF(((xv .LT. xmax)))GO TO27872
        GO TO 27871
27872   CONTINUE
        xv = xv/e
        costhe = 1 - twice_hc2*xv*xv
        csqthe=costhe*costhe
        IF((( 2*rnnray1 .LT. 1 + csqthe )))GO TO27862
      GO TO 27861
27862 CONTINUE
      sinthe=sqrt(1.0-csqthe)
      return
      end
      subroutine prepare_rayleigh_data(ndat,x,f, ne,emin,emax,pe_array,
     *ncbin,fcum,i_array, b_array,c_array)
      implicit none
      integer*4 ndat
      real*8 x(ndat),  f(ndat)
      integer*4 ne
      real*8 emin,  emax,  pe_array(ne)
      integer*4 ncbin
      real*8 fcum(ndat)
      integer*4 i_array(ncbin)
      real*8 b_array(ndat),  c_array(ndat)
      real*8 zero
      real*8 sum0,a,b,x1,x2,pow_x1,pow_x2,dle,e,xmax, anorm,anorm1,anorm
     *2,w,dw,xold,t,aux
      integer*4 i,j,k,ibin
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      write(*,'(a$)') '      preparing data for Rayleigh sampling ... '
      DO 27891 i=1,ndat
        IF((f(i) .EQ. 0.0))f(i) = zero()
27891 CONTINUE
27892 CONTINUE
      sum0=0
      fcum(1)=0
      DO 27901 i=1,ndat-1
        b = log(f(i+1)/f(i))/log(x(i+1)/x(i))
        b_array(i) = b
        x1 = x(i)
        x2 = x(i+1)
        pow_x1 = x1**(2*b)
        pow_x2 = x2**(2*b)
        sum0=sum0+f(i)*f(i)*(x2*x2*pow_x2-x1*x1*pow_x1)/((1+b)*pow_x1)
        fcum(i+1) = sum0
27901 CONTINUE
27902 CONTINUE
      dle = log(emax/emin)/(ne-1)
      i = 1
      DO 27911 j=1,ne
        e = emin*exp(dle*(j-1))
        xmax = 20.607544d0*2*e/prm
        DO 27921 k=i,ndat-1
          IF((xmax .GE. x(k) .AND. xmax .LT. x(k+1)))GO TO27922
27921   CONTINUE
27922   CONTINUE
        i = k
        b = b_array(i)
        x1 = x(i)
        x2 = xmax
        pow_x1 = x1**(2*b)
        pow_x2 = x2**(2*b)
        pe_array(j) = fcum(i) + f(i)*f(i)*(x2*x2*pow_x2-x1*x1*pow_x1)/((
     *  1+b)*pow_x1)
27911 CONTINUE
27912 CONTINUE
      i_array(ncbin) = i
      anorm = 1d0/sqrt(pe_array(ne))
      anorm1 = 1.005d0/pe_array(ne)
      anorm2 = 1d0/pe_array(ne)
      DO 27931 j=1,ne
        pe_array(j) = pe_array(j)*anorm1
        IF((pe_array(j) .GT. 1))pe_array(j) = 1
27931 CONTINUE
27932 CONTINUE
      DO 27941 j=1,ndat
        f(j) = f(j)*anorm
        fcum(j) = fcum(j)*anorm2
        c_array(j) = (1+b_array(j))/(x(j)*f(j))**2
27941 CONTINUE
27942 CONTINUE
      dw = 1d0/(ncbin-1)
      xold = x(1)
      ibin = 1
      b = b_array(1)
      pow_x1 = x(1)**(2*b)
      i_array(1) = 1
      DO 27951 i=2,ncbin-1
        w = dw
27961   CONTINUE
          x1 = xold
          x2 = x(ibin+1)
          t = x1*x1*x1**(2*b)
          pow_x2 = x2**(2*b)
          aux=f(ibin)*f(ibin)*(x2*x2*pow_x2-t)/((1+b)*pow_x1)
          IF (( aux .GT. w )) THEN
            xold = exp(log(t+w*(1+b)*pow_x1/f(ibin)/f(ibin))/(2+2*b))
            i_array(i) = ibin
            GO TO27962
          END IF
          w = w - aux
          xold = x2
          ibin = ibin+1
          b = b_array(ibin)
          pow_x1 = xold**(2*b)
        GO TO 27961
27962   CONTINUE
27951 CONTINUE
27952 CONTINUE
      DO 27971 j=1,ndat
        b_array(j) = 0.5/(1 + b_array(j))
27971 CONTINUE
27972 CONTINUE
      write(*,'(a /)') 'done'
      return
      end
      real*8 function egs_KN_sigma0(e)
      implicit none
      real*8 e
      real*8 con,ko,c1,c2,c3,eps1,eps2
      data con/0.1274783851/
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      ko = e/prm
      IF (( ko .LT. 0.01 )) THEN
        egs_KN_sigma0 = 8.*con/3.*(1-ko*(2-ko*(5.2-13.3*ko)))/prm
        return
      END IF
      c1 = 1./(ko*ko)
      c2 = 1. - 2*(1+ko)*c1
      c3 = (1+2*ko)*c1
      eps2 = 1
      eps1 = 1./(1+2*ko)
      egs_KN_sigma0 = (c1*(1./eps1-1./eps2)+c2*log(eps2/eps1)+eps2*(c3+0
     *.5*eps2)- eps1*(c3+0.5*eps1))/e*con
      return
      end
      real*8 function egs_KN_sigma1(e)
      implicit none
      real*8 e
      real*8 con,ko,c1,c2,c3,eps1,eps2
      data con/0.1274783851/
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      ko = e/prm
      c1 = 1./(ko*ko)
      c2 = 1. - 2*(1+ko)*c1
      c3 = (1+2*ko)*c1
      eps2 = 1
      eps1 = 1./(1+2*ko)
      egs_KN_sigma1 = c1*(1./eps1-1./eps2)
      egs_KN_sigma1 = egs_KN_sigma1 + log(eps2/eps1)*(c2 - c1) - c2*(eps
     *2-eps1)
      egs_KN_sigma1 = egs_KN_sigma1 + c3*(eps2-eps1)*(1-0.5*(eps1+eps2))
      egs_KN_sigma1 = egs_KN_sigma1 + (eps2-eps1)*(0.5*(eps1+eps2)-(eps1
     **eps1+eps2*eps2+eps1*eps2)/3)
      egs_KN_sigma1 = egs_KN_sigma1*con
      return
      end
      subroutine egsi_get_data(flag,iunit,n,ne,zsorted,pz_sorted,ge1,ge0
     *,data)
      implicit none
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 eth
      integer*4 flag,iunit,n,ne
      real*8 ge1,ge0,zsorted(*),pz_sorted(*),data(*)
      real*8 etmp(2000),ftmp(2000)
      real*8 gle,sig,p,e
      integer*4 i,j,k,kk,iz,iz_old,ndat,iiz
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      rewind(iunit)
      iz_old = 0
      DO 27981 k=1,n
        data(k) = 0
27981 CONTINUE
27982 CONTINUE
      DO 27991 i=1,ne
        iiz = int(zsorted(i)+0.5)
        DO 28001 iz=iz_old+1,iiz
          read(iunit,*,err=28010) ndat
          IF (( ndat .GT. 2000 )) THEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,*) 'Too many input data points. Max. is ',2000
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          IF (( flag .EQ. 0 .OR. flag .EQ. 3)) THEN
            read(iunit,*,err=28010) (etmp(k),ftmp(k),k=1,ndat)
          ELSE
            read(iunit,*,err=28010) (etmp(k+1),ftmp(k+1), k=1,ndat)
            IF (( flag .EQ. 1 )) THEN
              eth = 2*rm
            ELSE
              eth = 4*rm
            END IF
            ndat = ndat + 1
            DO 28021 k=2,ndat
              ftmp(k) = ftmp(k) - 3*log(1-eth/exp(etmp(k)))
28021       CONTINUE
28022       CONTINUE
            ftmp(1) = ftmp(2)
            etmp(1) = log(eth)
          END IF
28001   CONTINUE
28002   CONTINUE
        iz_old = iiz
        DO 28031 k=1,n
          gle = (k - ge0)/ge1
          e = exp(gle)
          IF (( gle .LT. etmp(1) .OR. gle .GE. etmp(ndat) )) THEN
            IF (( flag .EQ. 0 )) THEN
              write(i_log,'(/a)') '***************** Error: '
              write(i_log,*) 'Energy ',exp(gle), ' is outside the availa
     *ble data range of ', exp(etmp(1)),exp(etmp(ndat))
              write(i_log,'(/a)') '***************** Quiting now.'
              call exit(1)
            ELSE IF((flag .EQ. 1 .OR. flag .EQ. 2)) THEN
              IF (( gle .LT. etmp(1) )) THEN
                sig = 0
              ELSE
                sig = exp(ftmp(ndat))
              END IF
            ELSE
              sig = 0
            END IF
          ELSE
            DO 28041 kk=1,ndat-1
              IF((gle .GE. etmp(kk) .AND. gle .LT. etmp(kk+1)))GO TO2804
     *        2
28041       CONTINUE
28042       CONTINUE
            IF (( flag .NE. 3)) THEN
              p = (gle - etmp(kk))/(etmp(kk+1) - etmp(kk))
              sig = exp(p*ftmp(kk+1) + (1-p)*ftmp(kk))
            ELSE
              p = (e - exp(etmp(kk)))/(exp(etmp(kk+1)) - exp(etmp(kk)))
              sig = p*exp(ftmp(kk+1)) + (1-p)*exp(ftmp(kk))
            END IF
          END IF
          IF(((flag .EQ. 1 .OR. flag .EQ. 2) .AND. e .GT. eth))sig = sig
     *    *(1-eth/e)**3
          data(k) = data(k) + pz_sorted(i)*sig
28031   CONTINUE
28032   CONTINUE
27991 CONTINUE
27992 CONTINUE
      return
28010 CONTINUE
      write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) 'Error while reading user photon cross sections fro
     *m unit ', iunit
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      return
      end
      subroutine egsi_get_shell_data(imed,n,ne,zsorted,pz_sorted,ge1,ge0
     *,data)
      implicit none
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      COMMON/MEDIA/  RLC(12),RLDU(12),RHO(12),MSGE(12),MGE(12),MSEKE(12)
     *,MEKE(12),MLEKE(12),MCMFP(12),MRANGE(12),IRAYLM(12),IPHOTONUCM(12)
     *, MEDIA(24,12), photon_xsections, comp_xsections, photonuc_xsectio
     *ns,eii_xfile,IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      common/pe_shell_data/ pe_xsection(500,100,0:16),  pe_elem_prob(500
     *,100,12),   pe_energy(500,100),  pe_zsorted(100,12), pe_be(100,16)
     *,  pe_nshell(100),  pe_zpos(100),  pe_nge(100),  pe_ne
      real*8 pe_be, pe_energy, pe_xsection, pe_elem_prob
      integer*4 pe_zsorted, pe_nshell, pe_zpos, pe_nge, pe_ne
      integer*4 n,  ne,  ndat
      real*8 ge1,ge0,zsorted(*),pz_sorted(*),data(*)
      real*8 sigma(500),sigmaMedium
      real*4 etmp(2000),ftmp(2000)
      real*4 gle,sig,p
      integer*4 i,j,k,kk,iz,zpos,imed
      DO 28051 k=1,n
        data(k) = 0
28051 CONTINUE
28052 CONTINUE
      DO 28061 k=1,ne
        sigma(k) = 0
28061 CONTINUE
28062 CONTINUE
      DO 28071 i=1,ne
        iz = int(zsorted(i)+0.5)
        zpos = pe_zpos(iz)
        ndat = pe_nge(zpos)
        DO 28081 k=1,ndat
          pe_elem_prob(k,i,imed) = pz_sorted(i)*pe_xsection(k,zpos,0)
          etmp(k) = pe_energy(k,zpos)
          ftmp(k) = log(pe_xsection(k,zpos,0))
28081   CONTINUE
28082   CONTINUE
        DO 28091 k=1,n
          gle = (k - ge0)/ge1
          IF (( gle .LT. etmp(1) .OR. gle .GE. etmp(ndat) )) THEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,*) 'egsi_get_shell_data: Energy ',exp(gle), ' is
     * outside the available data range of ', exp(etmp(1)),exp(etmp(ndat
     *      ))
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          ELSE
            DO 28101 kk=1,ndat-1
              IF((gle .GE. etmp(kk) .AND. gle .LT. etmp(kk+1)))GO TO2810
     *        2
28101       CONTINUE
28102       CONTINUE
            p = (gle - etmp(kk))/(etmp(kk+1) - etmp(kk))
            sig = exp(p*ftmp(kk+1) + (1-p)*ftmp(kk))
          END IF
          data(k) = data(k) + pz_sorted(i)*sig
28091   CONTINUE
28092   CONTINUE
28071 CONTINUE
28072 CONTINUE
      DO 28111 i=1,ne
        iz = int(zsorted(i)+0.5)
        zpos = pe_zpos(iz)
        ndat = pe_nge(zpos)
        DO 28121 k=1,ndat
          sig = sigmaMedium(imed,pe_energy(k,zpos))
          pe_elem_prob(k,i,imed) = log(pe_elem_prob(k,i,imed)/sig)
28121   CONTINUE
28122   CONTINUE
28111 CONTINUE
28112 CONTINUE
      return
      end
      real*8 function sigmaMedium(imed, logE)
      implicit none
      COMMON/BREMPR/ DL1(8,12),DL2(8,12),DL3(8,12),DL4(8,12),DL5(8,12),D
     *L6(8,12), ALPHI(2,12),BPAR(2,12),DELPOS(2,12), WA(12,50),PZ(12,50)
     *,ZELEM(12,50),RHOZ(12,50), PWR2I(50), DELCM(12),ZBRANG(12),LZBRANG
     *(12),NNE(12), IBRDST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(12,50
     *,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      common/pe_shell_data/ pe_xsection(500,100,0:16),  pe_elem_prob(500
     *,100,12),   pe_energy(500,100),  pe_zsorted(100,12), pe_be(100,16)
     *,  pe_nshell(100),  pe_zpos(100),  pe_nge(100),  pe_ne
      real*8 pe_be, pe_energy, pe_xsection, pe_elem_prob
      integer*4 pe_zsorted, pe_nshell, pe_zpos, pe_nge, pe_ne
      real*8 logE, slope, sigma
      integer*4 k,imed,Z,zpos,m,ibsearch
      sigmaMedium = 0
      DO 28131 k=1,nne(imed)
        Z = int( zelem(imed,k) + 0.5 )
        zpos = pe_zpos(Z)
        m = ibsearch(logE,pe_nge(zpos),pe_energy(1,zpos))
        slope = log(pe_xsection(m+1,zpos,0)/pe_xsection(m,zpos,0))
        slope = slope/(pe_energy(m+1,zpos)-pe_energy(m,zpos))
        sigma = log(pe_xsection(m,zpos,0))
        sigma = sigma + slope*(logE - pe_energy(m,zpos))
        sigma = exp(sigma)
        sigmaMedium = sigmaMedium + pz(imed,k)*sigma
28131 CONTINUE
28132 CONTINUE
      return
      end
      subroutine egs_heap_sort(n,rarray,jarray)
      implicit none
      integer*4 n,jarray(*)
      real*8 rarray(*)
      integer*4 i,ir,j,l,ira
      real*8 rra
      DO 28141 i=1,n
        jarray(i)=i
28141 CONTINUE
28142 CONTINUE
      IF((n .LT. 2))return
      l=n/2+1
      ir=n
28151 CONTINUE
        IF ((l .GT. 1)) THEN
          l=l-1
          rra=rarray(l)
          ira=l
        ELSE
          rra=rarray(ir)
          ira=jarray(ir)
          rarray(ir)=rarray(1)
          jarray(ir)=jarray(1)
          ir=ir-1
          IF ((ir .EQ. 1)) THEN
            rarray(1)=rra
            jarray(1)=ira
            return
          END IF
        END IF
        i=l
        j=l+l
28161   CONTINUE
          IF((j .GT. ir))GO TO28162
          IF ((j .LT. ir)) THEN
            IF((rarray(j) .LT. rarray(j+1)))j=j+1
          END IF
          IF ((rra .LT. rarray(j))) THEN
            rarray(i)=rarray(j)
            jarray(i)=jarray(j)
            i=j
            j=j+j
          ELSE
            j=ir+1
          END IF
        GO TO 28161
28162   CONTINUE
        rarray(i)=rra
        jarray(i)=ira
      GO TO 28151
28152 CONTINUE
      return
      end
      SUBROUTINE PHOTONUC
      implicit none
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      npold = np
      edep = pzero
      e(np) = pzero
      wt(np) = 0
      return
      end
