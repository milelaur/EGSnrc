#define HAVE_C_COMPILER
#ifdef HAVE_C_COMPILER
#endif
      implicit none
      COMMON/BOUNDS/ECUT,PCUT,VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/BREMPR/ DL1(8,7),DL2(8,7),DL3(8,7),DL4(8,7),DL5(8,7),DL6(8,
     *7), ALPHI(2,7),BPAR(2,7),DELPOS(2,7), WA(7,50),PZ(7,50),ZELEM(7,50
     *),RHOZ(7,50), PWR2I(50), DELCM(7),ZBRANG(7),LZBRANG(7),NNE(7), IBR
     *DST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(7,50,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/ELECIN/ esig_e(7),psig_e(7), esige_max, psige_max, range_ep
     *(0:1,500,7), E_array(500,7), etae_ms0(500,7),etae_ms1(500,7),etap_
     *ms0(500,7),etap_ms1(500,7),q1ce_ms0(500,7),q1ce_ms1(500,7),q1cp_ms
     *0(500,7),q1cp_ms1(500,7),q2ce_ms0(500,7),q2ce_ms1(500,7),q2cp_ms0(
     *500,7),q2cp_ms1(500,7),blcce0(500,7),blcce1(500,7), EKE0(7),EKE1(7
     *), XR0(7),TEFF0(7),BLCC(7),XCC(7), ESIG0(500,7),ESIG1(500,7),PSIG0
     *(500,7),PSIG1(500,7),EDEDX0(500,7),EDEDX1(500,7),PDEDX0(500,7),PDE
     *DX1(500,7),EBR10(500,7),EBR11(500,7),PBR10(500,7),PBR11(500,7),PBR
     *20(500,7),PBR21(500,7),TMXS0(500,7),TMXS1(500,7), expeke1(7), IUNR
     *ST(7),EPSTFL(7),IAPRIM(7), sig_ismonotone(0:1,7)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      common/geom/ xbound(128+1),  ybound(128+1),  zbound(128+1),  xboun
     *d_min,  xbound_max,  ybound_min,  ybound_max,  zbound_min,  zbound
     *_max,  medsur,  dsurround(4),  IMAX,  JMAX,  KMAX,  ijmax,  irmax,
     *  howfarless
      real*4 xbound, ybound, zbound, xbound_min, xbound_max, ybound_min,
     * ybound_max, zbound_min, zbound_max,dsurround
      integer medsur,IMAX, JMAX, KMAX, ijmax,irmax
      logical howfarless
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR( 2097154),MED( 2097154),IRAYLR,
     *IPHOTONUCR( 2097154)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/PHSPFILE/BEAM_SIZE,MODE_PHSP1,LATCH_OPT, NCASE_PHSP,LATBIT,
     *NBIT1,NBIT2,I_BIT_FILTER,NofREPEAT,ISMOOTH, OUTCNT,NRCYCL,IPARALLE
     *L,PARNUM,CYCLNUM
      real BEAM_SIZE
      INTEGER MODE_PHSP1,LATCH_OPT,NCASE_PHSP,LATBIT(20),NBIT1,NBIT2, I_
     *BIT_FILTER,NofREPEAT,ISMOOTH,OUTCNT,NRCYCL,IPARALLEL,PARNUM,CYCLNU
     *M
      common/score/endep( 2097153), endep2( 2097153), temp2, planarefe,
     *planarefp,planarfe,planarfp, nestep, endep_tmp( 2097153), i_phsp_o
     *ut,i_muidx_out,i_unit_out,IWATCH,mxnp, endep_last( 2097153)
      REAL*8 endep, endep2, temp2,planarefe, planarefp, planarfe, planar
     *fp
      integer*8 nestep
      real endep_tmp
      integer i_phsp_out,   i_muidx_out,    i_unit_out,  IWATCH,mxnp
      integer*2 endep_last
      common/source/ esrc,  nhist,  nnread,  nshist,  nphist,  nnphsp,
     *einsrc,  xsrcold,  ysrcold,  zsrcold,  usrcold,  vsrcold,  wsrcold
     *,  weightold, mu_phspold,  frMU_indx,  zinc,  xinl,  xinu,  yinl,
     * yinu,  zinl,  zinu,  thetax,  thetay,  thetaz,  uinc,  vinc,  win
     *c,  beamarea, xcol,  ycol,  xiso,  yiso,  ziso,  phicol,  theta(60
     *000),  phi(60000),  pang(60000),  angfixed(60000),  angmin(60000),
     *  angmax(60000),  pgang(60000),  xtemp(60000),  ytemp(60000),  zte
     *mp(60000),  phicoltemp(60000), thetatemp(60000),  phitemp(60000),
     * muIndex(60000),  r_11(60000), r_12(60000), r_13(60000), r_21(6000
     *0), r_22(60000), r_23(60000), r_31(60000), r_32(60000), r_33(60000
     *), dsource, dsourcetemp(60000), ein,  eksrcm,  esrc_sp,  SSD,  ein
     *srcold, NINCSRC,  r_dbs,  ssd_dbs,  z_dbs,  iqinold,  latchold,  e
     *nflag,  dflag,  ismode,  isource,     iqin,        iqphsp,
     *           iqinc,                          SHLflag,     calflag,
     *   MLCflag,     ixinl,       ixinu,       jyinl,       jyinu,
     *  kzinl,       kzinu,       klowx,       khix,        klowy,
     * khiy,        klowz,       khiz,        survival_ratio,        nsm
     *iss,      nsblocked,     nsrjct,      nsoutside,     nmissm,
     *IPRIMARY,                                            OLDSRC,
     * npassi,                     nang,         ivary(60000),     ngang
     *(60000),       nset,            more_in_cont,                 numa
     *ng,       dose_stat,      ndbsrjct,                        i_dbs,
     *         iphatsrc,         e_split,                           i_ia
     *ea_in,      i_mu_phsp,           izscore,             i_unit_in,
     *                k_field,                       nhist_last,
     *         the_beam_code,         the_input_file,      the_vcu_input
     *_file,                        the_pegs_file,           the_shared_
     *lib,                    the_vcu_code,               the_phsp_file
      real*8    esrc,muIndex
      integer*8 nhist, nnread,nshist,nphist,nnphsp
      real*8 einsrc, xsrcold, ysrcold,usrcold,vsrcold,wsrcold,weightold,
     *               frMU_indx,zsrcold,mu_phspold
      real*4    zinc, xinl, xinu, yinl, yinu, zinl, zinu, thetax, thetay
     *, thetaz,     uinc, vinc, winc, beamarea, xcol,ycol,xiso, yiso, zi
     *so, phicol,                 theta, phi, xtemp, ytemp, ztemp, phico
     *ltemp,thetatemp, phitemp,                 pang,angfixed,angmin,ang
     *max,pgang,r_11, r_12, r_13, r_21,                       r_22, r_23
     *, r_31, r_32, r_33,dsource,dsourcetemp,
     *    ein, eksrcm, esrc_sp, SSD, NINCSRC,
     *                  r_dbs, ssd_dbs,z_dbs,survival_ratio,einsrcold
      integer*4 isource, iqin, iqphsp, iqinc,latchold,iqinold,MLCflag,SH
     *Lflag,         calflag, ixinl, ixinu, jyinl, jyinu, kzinl, kzinu,
     *                             klowx, khix, klowy, khiy, klowz, khiz
     *,                                          nsmiss, nsblocked, nsrj
     *ct,nsoutside, nmissm,enflag,                             dflag, is
     *mode, IPRIMARY, OLDSRC,npassi,nang,ivary,ngang,numang,dose_stat,
     *     ndbsrjct,i_dbs,iphatsrc,e_split,i_iaea_in,i_mu_phsp,izscore,i
     *_unit_in,          num_field,more_in_cont,nset,k_field
      integer*2 nhist_last
      character*80 the_beam_code, the_vcu_code, the_input_file,the_pegs_
     *file,        the_shared_lib,the_vcu_input_file
      character*256 the_phsp_file
      COMMON/SOURCE_FORPARALLEL/nnphsp_max, nnphsp_min
      integer*8 nnphsp_max, nnphsp_min
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/THRESH/RMT2,RMSQ, AP(7),AE(7),UP(7),UE(7),TE(7),THMOLL(7)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/TIMEINFO/ TIMEN,  DATEN,  DNTIME
      character timen*8, daten*11, dntime*24
      common/ET_control/ SMAXIR,estepe,ximax,  skindepth_for_bca,transpo
     *rt_algorithm, bca_algorithm,exact_bca,spin_effects
      real*8 smaxir,  estepe,  ximax,      skindepth_for_bca
      integer*4 transport_algorithm, bca_algorithm
      logical exact_bca,  spin_effects
      common/CH_steps/ count_pII_steps,count_all_steps,is_ch_step
      real*8 count_pII_steps,count_all_steps
      logical is_ch_step
      COMMON/USERPS/n_split
      integer*4 n_split
      COMMON/USERRR/ESAVE_GLOBAL,RANGE_ECUTRR(7),IREJECT
      real*8 ESAVE_GLOBAL,RANGE_ECUTRR
      integer*4 IREJECT
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/RWPHSP/ STRING_TEMP_ZLAST_OUT,  STRING_TEMP_OUT,  IHSTRY_PH
     *SP,   iaea_dummy_long,  NHSTRY_DOS,   ESHORT,  WEIGHTTMP,  WT_PHSP
     *_SHORT,  X_PHSP_SHORT,  Y_PHSP_SHORT,  Z_PHSP_SHORT,  U_PHSP_SHORT
     *,  V_PHSP_SHORT,  W_PHSP_SHORT,  ZLAST_PHSP_SHORT,  MUIDX_PHSP_SHO
     *RT,  EKMAX_PHSP_SHORT,  EKMINE_PHSP_SHORT,  NINC_PHSP_SHORT,  dosx
     *yz2beam_index,  iaea_extra_floats,  NUM_PHSP_TOT,  PHOT_PHSP_TOT,
     *iaea_result,   iaea_n_stat,  iaea_q_typ,  iaea_typ_q,  iaea_q_inde
     *x,  I_PHSP,  IERR_PHSP,  LATCHTMP,  WRITE_PHSP_COUNTER,  WRITE_PHS
     *P_SOFAR,  PHSP_RESTART,  PHSP_RECL,  PHSP_RECL_OLD,  iaea_extra_in
     *ts,  iaea_extra_int_types,iaea_extra_float_types,   iaea_i_zlast,
     * iaea_i_latch,  iaea_i_muidx,  iaea_n_extra_ints,  iaea_n_extra_fl
     *oats,  i_iaea_open_for_write,   iaea_i_zlast_out,  iaea_i_latch_ou
     *t,  iaea_i_muidx_out,  dosxyz2beam_izscore,  MODE_RW
      CHARACTER*32000 STRING_TEMP_ZLAST_OUT(1)
      CHARACTER*28000 STRING_TEMP_OUT(1)
      integer*8 IHSTRY_PHSP(1),iaea_dummy_long,NHSTRY_DOS
      REAL*4 ESHORT,WEIGHTTMP,WT_PHSP_SHORT,X_PHSP_SHORT,Y_PHSP_SHORT, Z
     *_PHSP_SHORT,U_PHSP_SHORT, V_PHSP_SHORT,W_PHSP_SHORT,ZLAST_PHSP_SHO
     *RT, MUIDX_PHSP_SHORT, EKMAX_PHSP_SHORT,EKMINE_PHSP_SHORT,NINC_PHSP
     *_SHORT,dosxyz2beam_index, iaea_extra_floats(10)
      INTEGER NUM_PHSP_TOT,PHOT_PHSP_TOT, iaea_result,iaea_n_stat,iaea_q
     *_typ(3),iaea_typ_q(3),iaea_q_index,I_PHSP, IERR_PHSP,LATCHTMP, WRI
     *TE_PHSP_COUNTER(1),WRITE_PHSP_SOFAR(1), PHSP_RESTART,PHSP_RECL,PHS
     *P_RECL_OLD,iaea_extra_ints(10), iaea_extra_int_types(10),iaea_extr
     *a_float_types(10),iaea_i_zlast, iaea_i_latch,iaea_i_muidx,iaea_n_e
     *xtra_ints,iaea_n_extra_floats, i_iaea_open_for_write,iaea_i_zlast_
     *out,iaea_i_latch_out, iaea_i_muidx_out,dosxyz2beam_izscore
      CHARACTER*5 MODE_RW
      INTEGER LATCH_TEMP_OUT,NUM_PHSP_TOFLUSH,TEMP_PHSP_COUNTER,REM_PHSP
      REAL*4 REAL_TEMP_OUT(7)
      CHARACTER*32 REC_TEMP_OUT
      integer*8 NCASE,IHSTRY,tempdiv,jcase,compensated_NCASE
      integer idosl(7),idosu(7),jdosl(7),jdosu(7), kdosl(7),kdosu(7),IZS
     *CAN(7),idgrp,n,j,i, maxx,maxy,maxz,maxbd,ngroup,igroup,nn,nnn,in,I
     *L,IU,JL,JU,KL,KU, medtmp,k,irl,ieof,IOUT,lnblnk1,IXXIN,JXXIN
      integer IRSECT,  ihist,  idose,  nperpg,  ipage,  ios,  irin,  tem
     *ppar,  jj,  idd,  iorstrt,  ioutgeom,  ioutgph,  ioutphant,  egs_o
     *pen_file, egs_open_datfile, ihowfarless,   i_par_temp
      real*8 xin,yin,zin,  uin,vin,win,  weight,etotin, etot,  mindelX,m
     *indelY,mindelZ
      real amass,tcpuold,ECUTIN,PCUTIN,ESTEPM(7),width, rhotmp,ECUTL,PCU
     *TL,TIMMAX,SMAX, timcpu,  ainflu,  minrhor,  maxrhor
      character*256 PhantFileName,  parname,  phsp_out_fn
      REAL XMIN_YMIN_ZMIN,YMIN_XMIN_ZMIN,ZMIN_XMIN_YMIN, XMIN_YMAX_ZMIN,
     *YMAX_XMIN_ZMIN,ZMIN_XMIN_YMAX, XMAX_YMAX_ZMIN,YMAX_XMAX_ZMIN,ZMIN_
     *XMAX_YMAX, XMAX_YMIN_ZMIN,YMIN_XMAX_ZMIN,ZMIN_XMAX_YMIN, XMIN_YMIN
     *_ZMAX,YMIN_XMIN_ZMAX,ZMAX_XMIN_YMIN, XMIN_YMAX_ZMAX,YMAX_XMIN_ZMAX
     *,ZMAX_XMIN_YMAX, XMAX_YMAX_ZMAX,YMAX_XMAX_ZMAX,ZMAX_XMAX_YMAX, XMA
     *X_YMIN_ZMAX,YMIN_XMAX_ZMAX,ZMAX_XMAX_YMIN
      INTEGER IRESTART,ibatch,ncaseold
      character title(80)
      REAL BATCHT,  TIMEB,  SECNDS
      Integer CTError
      INTEGER zerodose,  zerocount,  MAX20,  tempmax20,  doseprint,   ID
     *AT,    zeroairdose,   IPHANT
      INTEGER NETADJ
      REAL ETIMETOT
      integer*4 LELKE, lelktmp, lelec
      real*8 EKEI,ELKEI,fedep,elktmp,dedxmid,aux
      REAL*8 temp
      integer*8 nhist_old
      integer*4 n_repeat,i_repeat
      REAL z_score_tmp
      external combine_results
#ifdef HAVE_C_COMPILER
      real*8 part_dose, part2_dose, current_result, current_uncertainty
      integer*8 n_run,n_tot,n_last,n_left,other_num_1,other_num_2,p_per_
     *phsp_chunk
      integer*4 n_job,n_run_chunk
      logical first_time
#endif
      logical is_finished
      real CPUT0,CPUT1,CPUT2,TDUM
      real egs_tot_time, egs_etime
      call egs_init
      tdum = egs_tot_time(1)
      cput0=egs_etime()
      IOUT=1
      idd=3
      iorstrt=4
      ioutgeom=17
      ioutgph=13
      ioutphant=18
      i_unit_out=45
      DO 1011 I_PHSP=1,1
          WRITE_PHSP_COUNTER(I_PHSP)=0
          WRITE_PHSP_SOFAR(I_PHSP)=0
          IHSTRY_PHSP(I_PHSP)=0
1011  CONTINUE
1012  CONTINUE
      PHSP_RESTART=0
      PHSP_RECL_OLD=0
      iaea_q_typ(1)=2
      iaea_q_typ(2)=1
      iaea_q_typ(3)=3
      iaea_typ_q(1)=0
      iaea_typ_q(2)=-1
      iaea_typ_q(3)=1
      iaea_n_extra_ints=0
      iaea_n_extra_floats=0
      iaea_i_zlast=-99
      iaea_i_latch=-99
      iaea_i_muidx=-99
      i_iaea_open_for_write=0
      iaea_i_zlast_out=-99
      iaea_i_latch_out=-99
      iaea_i_muidx_out=-99
      WRITE(6,1020)
1020  FORMAT(/' Begin execution with large arrays being zeroed'/ ' Thisi
     *s only needed for Linux g77 compiler - comment'/ ' this code near 
     *the top of dosxyznrc.mortran if you are'/ ' not using a linux g77 
     *compiler'/)
      DO 1031 i=1, 2097154
          MED(i) = 1
          RHOR(i) =0.
1031  CONTINUE
1032  CONTINUE
      zeroairdose = 0
      MAX20=0
      IPHANT=0
      doseprint=1
      i_phsp_out=0
      CALL DATETIME(1)
      WRITE(6,1040)TIMEN, DATEN
      WRITE(1,1040)TIMEN, DATEN
1040  FORMAT(' ',79('*')/ ' NRCC/UW EGSnrc user-code DOSXYZnrc'/ ' ON ',
     *'linux',' ',T60,A,1X,A / ' ',79('*')/ ' **',T79,'**'/ ' **',T38,'D
     *OSXYZnrc',T79,'**'/ ' **',T34,'Z pronounced zed',T79,'**'/ ' **',T
     *79,'**'/ ' **',T10,'Code developed at the National Research Counci
     *l of Canada', ' and',T79,'**'/ ' **',T15,'University of Wisconsina
     *s part of the OMEGA project', T79,'**'/ ' **',T79,'**'/ ' **',T15,
     * T79,'**'/ ' **',T79,'**'/ 1X ,79('*'))
      WRITE(6,1050)7,10000,128,128,128, 2097153,1
      WRITE(1,1050)7,10000,128,128,128, 2097153,1
1050  FORMAT(/'     The following parameters may be adjusted in dosxyz_u
     *ser_macros.mortran'/' $MXMED:    Max number of media:',I3,/ ' $MXS
     *TACK:  Max stack size:',I10/ ' $IMAX,etc: Max dose scoring regions
     * in x,y,z directions:', 3I5/ ' $MAXDOSE:  Max dose scoring regions
     * consistent with above:',I7/ ' $DOSEZERO(=',I1,') 1=> all doses wi
     *th uncert > 50% are zeroed', ' in .3ddose file'/)
      WRITE(6,1060)1000, 200
      WRITE(1,1060)1000, 200
1060  FORMAT(/' The following parameters may be adjusted in srcxyz.macro
     *s'/ ' $INVDIM:   number of elements in inverse CPD for input energ
     *y spectra =', I5/ ' $NENSRC:   number of bins in input energy spec
     *trum =', I5/)
      WRITE(6,1070)
      WRITE(1,1070)
1070  FORMAT(1x,79('=')/1x,79('-')//' Title: ',$)
      READ(5,1080)title
1080  FORMAT(80a1)
      WRITE(6,1090)Title
      WRITE(1,1090)Title
1090  FORMAT(' ',80a1/1x,79('-')/1x,79('=')//)
      WRITE(6,1100)7
      WRITE(1,1100)7
1100  FORMAT(' Number of media (min = 1, max =',I4,', 0 => CT data): ',$
     *)
      read(5,'(I10)') NMED
      IF ((NMED .GT. 7 )) THEN
          NMED= 1
      END IF
      WRITE(6,1110)NMED
      WRITE(1,1110)NMED
1110  FORMAT(' ',t10,i7)
      IF ((NMED .EQ. 0)) THEN
          WRITE(6,1120)
          WRITE(1,1120)
1120      FORMAT(' Input the full name of the file containing the CT pha
     *ntom created '/ ' using ctcreate '/ ' : ',$)
          read(5,'(A256)') PhantFileName
          WRITE(6,1130)PhantFileName(:lnblnk1(PhantFileName))
          WRITE(1,1130)PhantFileName(:lnblnk1(PhantFileName))
1130      FORMAT(A)
          call replace_env(PhantFileName)
          Open(45,file=PhantFileName,status='old',access='sequential', i
     *    ostat=ios)
          IF ((ios.NE.0)) THEN
              WRITE(6,1140)
              WRITE(1,1140)
1140          FORMAT(/' The CT phantom file does not exist.'/ ' Try agai
     *n. ')
              STOP
          END IF
          WRITE(6,1150)
          WRITE(1,1150)
1150      FORMAT(/' CT Phantom summary: ')
          read(45,'(i2)')NMED
          WRITE(6,1160)NMED
          WRITE(1,1160)NMED
1160      FORMAT(/' NMED = ',i2)
          WRITE(6,1170)
          WRITE(1,1170)
1170      FORMAT(/' media:')
          DO 1181 n=1,NMED
              read(45,'(24a1)') (media(j,n),j=1,24)
              WRITE(6,1190)(media(j,n),j=1,24)
              WRITE(1,1190)(media(j,n),j=1,24)
1190          FORMAT(' ',24a1)
1181      CONTINUE
1182      CONTINUE
          read(45,*) (ESTEPM(i),i=1,NMED)
          WRITE(6,1200)(ESTEPM(i),i=1,NMED)
          WRITE(1,1200)(ESTEPM(i),i=1,NMED)
1200      FORMAT(/' Dummy values of (ESTEPM(i),i=1,NMED)'/ ' : ',10f10.3
     *)
          read(45,*) IMAX,JMAX,KMAX
          WRITE(6,1210)IMAX,JMAX,KMAX
          WRITE(1,1210)IMAX,JMAX,KMAX
1210      FORMAT(/' IMAX, JMAX, KMAX : ',3i4)
          IF ((IMAX .GT. 128 .OR. JMAX .GT. 128 .OR. KMAX .GT. 128)) THE
     *    N
              WRITE(6,1220)
              WRITE(1,1220)
1220          FORMAT(/' ***ERROR:'/ ' X, Y or Z dimension(s) of CT phant
     *om > maximum allowed in DOSXYZnrc '/ ' Change $IMAX, $JMAX, $KMAXi
     *n dosxyz_user_macros.mortran and recompile.')
              STOP
          END IF
          ijmax = IMAX*JMAX
          irmax =1 + IMAX*JMAX*KMAX
          read(45,*) (xbound(i),i=1,IMAX+1)
          read(45,*) (ybound(j),j=1,JMAX+1)
          read(45,*) (zbound(k),k=1,KMAX+1)
          xbound_min = xbound(1)
          xbound_max = xbound(IMAX+1)
          ybound_min = ybound(1)
          ybound_max = ybound(JMAX+1)
          zbound_min = zbound(1)
          zbound_max = zbound(KMAX+1)
          WRITE(6,1230)xbound_min,xbound_max,ybound_min,ybound_max, zbou
     *    nd_min,zbound_max
          WRITE(1,1230)xbound_min,xbound_max,ybound_min,ybound_max, zbou
     *    nd_min,zbound_max
1230      FORMAT(/' x range : ',F12.5,' - ',F12.5,' cm'/ ' y range : ',F
     *12.5,' - ',F12.5,' cm'/ ' z range : ',F12.5,' - ',F12.5,' cm')
          DO 1241 k=1,KMAX
              DO 1251 j=1,JMAX
                  read(45,1260) (med((1 + i + (j-1)*IMAX + (k-1)*ijmax))
     *            ,i=1,IMAX)
1251          CONTINUE
1252          CONTINUE
              read(45,*)
1241      CONTINUE
1242      CONTINUE
1260      FORMAT(128i1)
          maxrhor=0.
          minrhor=999.
          DO 1271 k=1,KMAX
              DO 1281 j=1,JMAX
                  read(45,*) (rhor((1 + i + (j-1)*IMAX + (k-1)*ijmax)),i
     *            =1,IMAX)
                  DO 1291 i=1,IMAX
                      IF ((rhor((1 + i + (j-1)*IMAX + (k-1)*ijmax)) .GT.
     *                 maxrhor)) THEN
                          maxrhor=rhor((1 + i + (j-1)*IMAX + (k-1)*ijmax
     *                    ))
                      END IF
                      IF ((rhor((1 + i + (j-1)*IMAX + (k-1)*ijmax)) .LT.
     *                 minrhor)) THEN
                          minrhor=rhor((1 + i + (j-1)*IMAX + (k-1)*ijmax
     *                    ))
                      END IF
1291              CONTINUE
1292              CONTINUE
1281          CONTINUE
1282          CONTINUE
              read(45,*)
1271      CONTINUE
1272      CONTINUE
          WRITE(6,1300)minrhor,maxrhor
          WRITE(1,1300)minrhor,maxrhor
1300      FORMAT(/' Densities range from ',F12.5,' - ',F12.5,' g/cc')
          close(45)
          WRITE(6,1310)
          WRITE(1,1310)
1310      FORMAT(/' ECUTIN,PCUTIN,(SMAX--DUMMY INPUT): ',$)
          read(5,'(3F15.0)') ECUTIN,PCUTIN,SMAX
          WRITE(6,1320)ECUTIN,PCUTIN,SMAX
          WRITE(1,1320)ECUTIN,PCUTIN,SMAX
1320      FORMAT(/t10,3f10.3)
          WRITE(6,1330)
          WRITE(1,1330)
1330      FORMAT(/' Input zeroairdose (1 to zero dose in air in .3ddosef
     *ile; 0[default]'/ ' to not zero this dose), doseprint (1 for full 
     *dose output in .egslst;'/ ' 0[default] otherwise), MAX20 (1 to pri
     *nt out summary of 20 highest'/ ' doses; 0[default] to not print th
     *is summary)'/ ' : ',$)
          READ(5,'(3I5)')zeroairdose,doseprint,MAX20
          IF((zeroairdose .NE.1))zeroairdose=0
          IF((MAX20 .NE. 1))MAX20=0
          IF((doseprint .NE. 1))doseprint=0
          WRITE(6,1340)zeroairdose,doseprint,MAX20
          WRITE(1,1340)zeroairdose,doseprint,MAX20
1340      FORMAT(3I5)
          idgrp=1
          idosl(idgrp)=1
          idosu(idgrp)=IMAX
          jdosl(idgrp)=1
          jdosu(idgrp)=JMAX
          kdosl(idgrp)=1
          kdosu(idgrp)=KMAX
          IZSCAN(idgrp)=1
      ELSE
          DO 1351 n=1,NMED
              WRITE(6,1360)n
              WRITE(1,1360)n
1360          FORMAT(' Medium',i3,':  ',$)
              READ(5,1370)(media(j,n),j=1,24)
1370          FORMAT(24a1)
              WRITE(6,1380)(media(j,n),j=1,24)
              WRITE(1,1380)(media(j,n),j=1,24)
1380          FORMAT(' ',t20,24a1)
1351      CONTINUE
1352      CONTINUE
          med(1)=0
          DO 1391 n=2, 2097154
              med(n)=1
1391      CONTINUE
1392      CONTINUE
          WRITE(6,1400)
          WRITE(1,1400)
1400      FORMAT(/' ECUTIN,PCUTIN,(ESTEPE,SMAX--DUMMY INPUTS): ',$)
          read(5,'(2F15.0,30F10.0,F15.0)') ECUTIN,PCUTIN,(ESTEPM(i),i=1,
     *    NMED),SMAX
          WRITE(6,1410)ECUTIN,PCUTIN,(ESTEPM(i),i=1,NMED),SMAX
          WRITE(1,1410)ECUTIN,PCUTIN,(ESTEPM(i),i=1,NMED),SMAX
1410      FORMAT(/t10,13f10.3)
          write(6,1420)128,128,128
          write(1,1420)128,128,128
1420      format(/' # regions in x (max=',I4,'),y (max=',I4,'),z (max=',
     *I4,') directions'/ ' (if<0,implies # groups of reg), IPHANT (1 to 
     *output a .egsphant'/ ' file for dosxyz_show, 0[default] to not out
     *put this file)'/ '     : ',$)
          read(5,'(4I10)') maxx,maxy,maxz,IPHANT
          IF((maxx .EQ. 0))maxx=1
          IF((maxx.GT.128))maxx=128
          IF((maxy .EQ. 0))maxy=1
          IF((maxy.GT.128))maxy=128
          IF((maxz .EQ. 0))maxz=1
          IF((maxz.GT.128))maxz=128
          WRITE(6,1430)maxx,maxy,maxz,IPHANT
          WRITE(1,1430)maxx,maxy,maxz,IPHANT
1430      FORMAT(' ',4i6)
          IF ((IPHANT.EQ.1)) THEN
              WRITE(6,1440)
1440          FORMAT(//' Will output a .egsphant file to display isodose
     * contours'/ ' with dosxyz_show.'//)
          END IF
          maxbd=128
          WRITE(6,1450)
          WRITE(1,1450)
1450      FORMAT( / ' Input boundaries in the x-direction'/ ' ----------
     *-------------------------')
          mindelX=1.e20
          IF ((maxX .GT. 0)) THEN
              mindelX=1.e20
              IF ((maxX .GT. maxbd)) THEN
                  WRITE(6,1460)maxbd
                  WRITE(1,1460)maxbd
1460              FORMAT(t15,'***ERROR:'/ t15,'number of regions > max a
     *llowed (',i5,')')
                  STOP
              END IF
              DO 1471 i=1,maxX
                  WRITE(6,1480)i
                  WRITE(1,1480)i
1480              FORMAT(' Small boundary for region(',i3,')  ',$)
                  read(5,'(F15.0)') Xbound(i)
                  IF (( (i .NE.1 ) .AND. ( Xbound(i) .LE. Xbound(i-1) ))
     *            ) THEN
                      WRITE(6,1490)
                      WRITE(1,1490)
1490                  FORMAT(' *** Boundary out of order ***')
                  END IF
                  WRITE(6,1500)Xbound(i)
                  WRITE(1,1500)Xbound(i)
1500              FORMAT(' ',t10,f12.3)
                  IF ((i.GE.2 .AND. Xbound(i)-Xbound(i-1).LT.mindelX)) T
     *            HEN
                      mindelX=Xbound(i)-Xbound(i-1)
                  END IF
1471          CONTINUE
1472          CONTINUE
              WRITE(6,1510)maxX
              WRITE(1,1510)maxX
1510          FORMAT(' Outer boundary for region(',i3,')  ',$)
              read(5,'(F15.0)') Xbound(maxX + 1)
              WRITE(6,1520)Xbound(maxX+1)
              WRITE(1,1520)Xbound(maxX+1)
1520          FORMAT(' ',t10,f12.3)
              IF((Xbound(maxX+1)-Xbound(maxX).LT.mindelX))mindelX=Xbound
     *        (maxX+1)-Xbound(maxX)
          ELSE
              WRITE(6,1530)
              WRITE(1,1530)
1530          FORMAT(' Initial boundary: ',$)
              read(5,'(F15.0)') Xbound(1)
              WRITE(6,1540)Xbound(1)
              WRITE(1,1540)Xbound(1)
1540          FORMAT(' ',f12.3)
              ngroup = - maxX
              maxX = 0
              DO 1551 igroup=1,ngroup
                  WRITE(6,1560)
                  WRITE(1,1560)
1560              FORMAT(' Width in this group, number of regions in gro
     *up: ',$)
                  read(5,'(F15.0,I10)') width,nn
                  IF ((nn.LE.0)) THEN
                      nn=1
                  END IF
                  IF ((width.LE.0.0)) THEN
                      width=1.0
                  END IF
                  IF((width.LT.mindelX))mindelX=width
                  WRITE(6,1570)width,nn
                  WRITE(1,1570)width,nn
1570              FORMAT(' ',f12.3,i5)
                  nnn = min(nn,maxbd-maxX)
                  IF ((nnn .NE. 0)) THEN
                      DO 1581 in=maxX+1,maxX+nnn
                          Xbound(in+1) = Xbound(in)+width
1581                  CONTINUE
1582                  CONTINUE
                  END IF
                  IF ((nn .NE. nnn)) THEN
                      WRITE(6,1590)maxbd
                      WRITE(1,1590)maxbd
1590                  FORMAT(t15,'***ERROR:'/ t15,'number of regions > m
     *ax allowed (',i5,')')
                      STOP
                  END IF
                  maxX = maxX+nnn
1551          CONTINUE
1552          CONTINUE
              WRITE(6,1600)(Xbound(i),i=1,maxX+1)
              WRITE(1,1600)(Xbound(i),i=1,maxX+1)
1600          FORMAT(' Boundaries'/(6f12.3))
          END IF
          IMAX=maxx
          maxbd=128
          WRITE(6,1610)
          WRITE(1,1610)
1610      FORMAT( / ' Input boundaries in the y-direction'/ ' ----------
     *-------------------------')
          mindelY=1.e20
          IF ((maxY .GT. 0)) THEN
              mindelY=1.e20
              IF ((maxY .GT. maxbd)) THEN
                  WRITE(6,1620)maxbd
                  WRITE(1,1620)maxbd
1620              FORMAT(t15,'***ERROR:'/ t15,'number of regions > max a
     *llowed (',i5,')')
                  STOP
              END IF
              DO 1631 i=1,maxY
                  WRITE(6,1640)i
                  WRITE(1,1640)i
1640              FORMAT(' Small boundary for region(',i3,')  ',$)
                  read(5,'(F15.0)') Ybound(i)
                  IF (( (i .NE.1 ) .AND. ( Ybound(i) .LE. Ybound(i-1) ))
     *            ) THEN
                      WRITE(6,1650)
                      WRITE(1,1650)
1650                  FORMAT(' *** Boundary out of order ***')
                  END IF
                  WRITE(6,1660)Ybound(i)
                  WRITE(1,1660)Ybound(i)
1660              FORMAT(' ',t10,f12.3)
                  IF ((i.GE.2 .AND. Ybound(i)-Ybound(i-1).LT.mindelY)) T
     *            HEN
                      mindelY=Ybound(i)-Ybound(i-1)
                  END IF
1631          CONTINUE
1632          CONTINUE
              WRITE(6,1670)maxY
              WRITE(1,1670)maxY
1670          FORMAT(' Outer boundary for region(',i3,')  ',$)
              read(5,'(F15.0)') Ybound(maxY + 1)
              WRITE(6,1680)Ybound(maxY+1)
              WRITE(1,1680)Ybound(maxY+1)
1680          FORMAT(' ',t10,f12.3)
              IF((Ybound(maxY+1)-Ybound(maxY).LT.mindelY))mindelY=Ybound
     *        (maxY+1)-Ybound(maxY)
          ELSE
              WRITE(6,1690)
              WRITE(1,1690)
1690          FORMAT(' Initial boundary: ',$)
              read(5,'(F15.0)') Ybound(1)
              WRITE(6,1700)Ybound(1)
              WRITE(1,1700)Ybound(1)
1700          FORMAT(' ',f12.3)
              ngroup = - maxY
              maxY = 0
              DO 1711 igroup=1,ngroup
                  WRITE(6,1720)
                  WRITE(1,1720)
1720              FORMAT(' Width in this group, number of regions in gro
     *up: ',$)
                  read(5,'(F15.0,I10)') width,nn
                  IF ((nn.LE.0)) THEN
                      nn=1
                  END IF
                  IF ((width.LE.0.0)) THEN
                      width=1.0
                  END IF
                  IF((width.LT.mindelY))mindelY=width
                  WRITE(6,1730)width,nn
                  WRITE(1,1730)width,nn
1730              FORMAT(' ',f12.3,i5)
                  nnn = min(nn,maxbd-maxY)
                  IF ((nnn .NE. 0)) THEN
                      DO 1741 in=maxY+1,maxY+nnn
                          Ybound(in+1) = Ybound(in)+width
1741                  CONTINUE
1742                  CONTINUE
                  END IF
                  IF ((nn .NE. nnn)) THEN
                      WRITE(6,1750)maxbd
                      WRITE(1,1750)maxbd
1750                  FORMAT(t15,'***ERROR:'/ t15,'number of regions > m
     *ax allowed (',i5,')')
                      STOP
                  END IF
                  maxY = maxY+nnn
1711          CONTINUE
1712          CONTINUE
              WRITE(6,1760)(Ybound(i),i=1,maxY+1)
              WRITE(1,1760)(Ybound(i),i=1,maxY+1)
1760          FORMAT(' Boundaries'/(6f12.3))
          END IF
          JMAX=maxy
          maxbd=128
          WRITE(6,1770)
          WRITE(1,1770)
1770      FORMAT( / ' Input boundaries in the z-direction'/ ' ----------
     *-------------------------')
          mindelZ=1.e20
          IF ((maxZ .GT. 0)) THEN
              mindelZ=1.e20
              IF ((maxZ .GT. maxbd)) THEN
                  WRITE(6,1780)maxbd
                  WRITE(1,1780)maxbd
1780              FORMAT(t15,'***ERROR:'/ t15,'number of regions > max a
     *llowed (',i5,')')
                  STOP
              END IF
              DO 1791 i=1,maxZ
                  WRITE(6,1800)i
                  WRITE(1,1800)i
1800              FORMAT(' Small boundary for region(',i3,')  ',$)
                  read(5,'(F15.0)') Zbound(i)
                  IF (( (i .NE.1 ) .AND. ( Zbound(i) .LE. Zbound(i-1) ))
     *            ) THEN
                      WRITE(6,1810)
                      WRITE(1,1810)
1810                  FORMAT(' *** Boundary out of order ***')
                  END IF
                  WRITE(6,1820)Zbound(i)
                  WRITE(1,1820)Zbound(i)
1820              FORMAT(' ',t10,f12.3)
                  IF ((i.GE.2 .AND. Zbound(i)-Zbound(i-1).LT.mindelZ)) T
     *            HEN
                      mindelZ=Zbound(i)-Zbound(i-1)
                  END IF
1791          CONTINUE
1792          CONTINUE
              WRITE(6,1830)maxZ
              WRITE(1,1830)maxZ
1830          FORMAT(' Outer boundary for region(',i3,')  ',$)
              read(5,'(F15.0)') Zbound(maxZ + 1)
              WRITE(6,1840)Zbound(maxZ+1)
              WRITE(1,1840)Zbound(maxZ+1)
1840          FORMAT(' ',t10,f12.3)
              IF((Zbound(maxZ+1)-Zbound(maxZ).LT.mindelZ))mindelZ=Zbound
     *        (maxZ+1)-Zbound(maxZ)
          ELSE
              WRITE(6,1850)
              WRITE(1,1850)
1850          FORMAT(' Initial boundary: ',$)
              read(5,'(F15.0)') Zbound(1)
              WRITE(6,1860)Zbound(1)
              WRITE(1,1860)Zbound(1)
1860          FORMAT(' ',f12.3)
              ngroup = - maxZ
              maxZ = 0
              DO 1871 igroup=1,ngroup
                  WRITE(6,1880)
                  WRITE(1,1880)
1880              FORMAT(' Width in this group, number of regions in gro
     *up: ',$)
                  read(5,'(F15.0,I10)') width,nn
                  IF ((nn.LE.0)) THEN
                      nn=1
                  END IF
                  IF ((width.LE.0.0)) THEN
                      width=1.0
                  END IF
                  IF((width.LT.mindelZ))mindelZ=width
                  WRITE(6,1890)width,nn
                  WRITE(1,1890)width,nn
1890              FORMAT(' ',f12.3,i5)
                  nnn = min(nn,maxbd-maxZ)
                  IF ((nnn .NE. 0)) THEN
                      DO 1901 in=maxZ+1,maxZ+nnn
                          Zbound(in+1) = Zbound(in)+width
1901                  CONTINUE
1902                  CONTINUE
                  END IF
                  IF ((nn .NE. nnn)) THEN
                      WRITE(6,1910)maxbd
                      WRITE(1,1910)maxbd
1910                  FORMAT(t15,'***ERROR:'/ t15,'number of regions > m
     *ax allowed (',i5,')')
                      STOP
                  END IF
                  maxZ = maxZ+nnn
1871          CONTINUE
1872          CONTINUE
              WRITE(6,1920)(Zbound(i),i=1,maxZ+1)
              WRITE(1,1920)(Zbound(i),i=1,maxZ+1)
1920          FORMAT(' Boundaries'/(6f12.3))
          END IF
          KMAX=maxz
          xbound_min = xbound(1)
          xbound_max = xbound(IMAX+1)
          ybound_min = ybound(1)
          ybound_max = ybound(JMAX+1)
          zbound_min = zbound(1)
          zbound_max = zbound(KMAX+1)
          ijmax = IMAX*JMAX
          irmax =1 + IMAX*JMAX*KMAX
          WRITE(6,1930)irmax
          WRITE(1,1930)irmax
1930      FORMAT(/' Total # regions including exterior =',i10)
          IF ((irmax .GT.  2097154)) THEN
              WRITE(6,1940)
              WRITE(1,1940)
1940          FORMAT(/' *** That is too many regions ***'//)
              stop ' *** Stopping because too many regions asked for ***
     *'
          END IF
          WRITE(6,1950)
          WRITE(1,1950)
1950      FORMAT(/' Input groups of regions for which density and medium
     * are not defaults')
1961      CONTINUE
              WRITE(6,1970)
              WRITE(1,1970)
1970          FORMAT(' Lower,upper i, j, k,  MEDIUM, DENSITY',$)
              read(5,'(7I10,F15.0)') IL,IU,JL,JU,KL,KU,MEDTMP,RHOTMP
              IF (( (IL .EQ. 0) .AND. (IU .EQ. 0) )) THEN
                  WRITE(6,1980)
                  WRITE(1,1980)
1980              FORMAT(/'    Found blank line => end of this input')
                  GO TO1962
              END IF
              IF(((IL .LE. 0).OR.(IL .GT. IMAX)))IL = 1
              IF(((IU .LT. IL).OR.(IU .GT. IMAX)))IU = IMAX
              IF(((JL .LE. 0).OR.(JL .GT. JMAX)))JL = 1
              IF(((JU .LT. JL).OR.(JU .GT. JMAX)))JU = JMAX
              IF(((KL .LE. 0).OR.(KL .GT. KMAX)))KL = 1
              IF(((KU .LT. KL).OR.(KU .GT. KMAX)))KU = KMAX
              IF(((medtmp .LT. 0).OR.(medtmp .GT. NMED)))medtmp = 1
              WRITE(6,1990)IL,IU,JL,JU,KL,KU,MEDTMP,RHOTMP
              WRITE(1,1990)IL,IU,JL,JU,KL,KU,MEDTMP,RHOTMP
1990          FORMAT(' ',3('(',i3,i4,')'), i4, f10.3)
              DO 2001 i=Il,IU
                  DO 2011 j=JL,JU
                      DO 2021 k=KL,KU
                          irl = (1 + i + (j-1)*IMAX + (k-1)*ijmax)
                          rhor(irl)=rhotmp
                          med(irl)=medtmp
2021                  CONTINUE
2022                  CONTINUE
2011              CONTINUE
2012              CONTINUE
2001          CONTINUE
2002          CONTINUE
          GO TO 1961
1962      CONTINUE
          WRITE(6,2030)
          WRITE(1,2030)
2030      FORMAT(//' Input groups of regions for which ECUT and PCUT are
     * not defaults')
          WRITE(6,2040)
          WRITE(1,2040)
2040      FORMAT(' NB This option is disabled, just input 8 zeros.')
2051      CONTINUE
              WRITE(6,2060)
              WRITE(1,2060)
2060          FORMAT(' Dummy values of lower,upper i, j, k,  ECUT, PCUT'
     *,$)
              read(5,'(6I10,2F15.0)') IL,IU,JL,JU,KL,KU,ECUTL,PCUTL
              IF (( IL .EQ. 0 .AND. IU .EQ. 0)) THEN
                  WRITE(6,2070)
                  WRITE(1,2070)
2070              FORMAT(/'    Found blank line => end of this input')
                  GO TO2052
              END IF
              WRITE(6,2080)IL,IU,JL,JU,KL,KU,ECUTL,PCUTL
              WRITE(1,2080)IL,IU,JL,JU,KL,KU,ECUTL,PCUTL
2080          FORMAT(' ',3('(',i3,i4,')'),2(f10.3,1x))
          GO TO 2051
2052      CONTINUE
          WRITE(6,2090)
          WRITE(1,2090)
2090      FORMAT(//' Enter 8 numbers on one line'/ '   3 pairs definingl
     *ower,upper x,y,z indicies of dose regions'/ '                 for 
     *which results are to be output'/ '   IZSCAN:       non-zero for z-
     *scan/page'/ '   MAX20:        if any one = 1, output summary of ma
     *x 20 doses.'/ '   end signaled by first pair both zero'/ '   forno
     * dose printed, MAX20 is still read from first line'/)
          idgrp=0
          tempmax20=0
2101      CONTINUE
              idgrp=idgrp+1
              read(5,'(8I10)') idosl(idgrp),idosu(idgrp),jdosl(idgrp),jd
     *        osu(idgrp), kdosl(idgrp),kdosu(idgrp),IZSCAN(idgrp),tempma
     *        x20
              IF (((idosl(idgrp) .EQ. 0).AND.(idosu(idgrp) .EQ. 0))) THE
     *        N
                  WRITE(6,2110)
                  WRITE(1,2110)
2110              FORMAT('    Found blank line => end of this input')
                  IF ((idgrp .EQ. 1)) THEN
                      IF ((tempmax20 .EQ. 1 )) THEN
                          MAX20 = 1
                          WRITE(6,2120)
                          WRITE(1,2120)
2120                      FORMAT('   MAX20 =1 so will print largest 20 d
     *oses only')
                      ELSE
                          WRITE(6,2130)
                          WRITE(1,2130)
2130                      FORMAT(' No doses will be output to egslst fil
     *e')
                      END IF
                  END IF
                  GO TO2102
              END IF
              IF((idosl(idgrp).LE.0))idosl(idgrp)=1
              IF((idosu(idgrp).LE.0 .OR.idosu(idgrp).GE.IMAX))idosu(idgr
     *        p)=IMAX
              IF((jdosl(idgrp).LE.0))jdosl(idgrp)=1
              IF((jdosu(idgrp).LE.0 .OR.jdosu(idgrp).GE.JMAX))jdosu(idgr
     *        p)=JMAX
              IF((kdosl(idgrp).LE.0))kdosl(idgrp)=1
              IF((kdosu(idgrp).LE.0 .OR.kdosu(idgrp).GE.KMAX))kdosu(idgr
     *        p)=KMAX
              IF((tempmax20.EQ.1))MAX20=1
              WRITE(6,2140)idosl(idgrp),idosu(idgrp),jdosl(idgrp),jdosu(
     *        idgrp), kdosl(idgrp),kdosu(idgrp),IZSCAN(idgrp),tempmax20
              WRITE(1,2140)idosl(idgrp),idosu(idgrp),jdosl(idgrp),jdosu(
     *        idgrp), kdosl(idgrp),kdosu(idgrp),IZSCAN(idgrp),tempmax20
2140          FORMAT(t5,3(i6,i4),i6,i6)
          GO TO 2101
2102      CONTINUE
          idgrp=idgrp-1
      END IF
      dose_stat=0
      call srcinput(ieof)
      WRITE(6,2150)
      WRITE(1,2150)
2150  FORMAT(//' NCASE,IWATCH,TIMMAX,INSEED1,INSEED2,BEAM_SIZE,ISMOOTH,I
     *RESTART,IDAT,'/ ' IREJECT,ESAVE_GLOBAL,NRCYCL,IPARALLEL,PARNUM,n_s
     *plit,ihowfarless,i_phsp_out'/ ' : ',$)
      read(5,'(2I16,F15.0,2I10,F15.0,4I10,F15.0,6I10)') NCASE,IWATCH,TIM
     *MAX,IXXIN,JXXIN,BEAM_SIZE,ISMOOTH,IRESTART,IDAT,IREJECT, ESAVE_GLO
     *BAL,NRCYCL,IPARALLEL,PARNUM,n_split,ihowfarless,i_phsp_out
      IF ((n_split.LE.1 .AND. e_split.GT.1)) THEN
          WRITE(6,2160)
2160      FORMAT(//' ***Warning: Electron splitting on with no photon sp
     *litting.'/ '             Electron splitting will not be done.'//)
      END IF
      IF ((TIMMAX.LE.0.0)) THEN
          TIMMAX = 0.99
      END IF
      IF ((IWATCH .EQ. 0 .AND. NCASE .LT. 100)) THEN
          NCASE=100
      END IF
      IF ((NCASE/10 .EQ. 0)) THEN
          NCASE=10
      END IF
      jcase = NCASE/10
      NCASE = jcase*10
      IF (((IXXIN .LE. 0) .OR. (IXXIN .GT. 31328))) THEN
          WRITE(6,2170)
2170      FORMAT(' First RN seed outside allowed range and default value
     * set')
          IXXIN=1802
      END IF
      IF (((JXXIN .LE. 0) .OR. (JXXIN .GT. 30081))) THEN
          WRITE(6,2180)
2180      FORMAT(' Second RN seed outside allowed range and default valu
     *e set')
          JXXIN=9373
      END IF
      IF((i_parallel .GT. 0))JXXIN = JXXIN - 1 + i_parallel
      IF((BEAM_SIZE .LE. 0.0))BEAM_SIZE=100.
      IF((IRESTART .LT. 0 .OR. IRESTART .GT. 4))IRESTART=0
      IF((IPARALLEL.LT.0))IPARALLEL=0
      IF((PARNUM.LT.0))PARNUM=0
#ifdef HAVE_C_COMPILER
      IF ((IPARALLEL.GT.1 .AND. n_parallel.GT.0)) THEN
          WRITE(6,2190)IPARALLEL, n_parallel
2190      FORMAT(/' You have set IPARALLEL in the input file to ',I4,/ '
     * But you are also running a C compiled code with n_parallel=',I4,/
     *' IPARALLEL will be reset to 1, and control of the parallel run '/
     * ' will be from the code.'/)
          IPARALLEL=1
      END IF
#endif
      IF ((IPARALLEL.GT.1 .AND. PARNUM.GT.IPARALLEL .AND. (isource .EQ.
     *2 .OR. isource .EQ. 8 .OR. isource .EQ. 20))) THEN
          WRITE(6,2200)
2200      FORMAT(//' ****WARNING:'/ ' PARNUM is > IPARALLEL '/ ' It must
     * be in the range 1<=PARNUM<=IPARALLEL if you'/ ' want to partition
     * a phase space source.'/ ' PARNUM will be set to 0 for now, and th
     *e phase space'/ ' source will not be partitioned.'//)
          PARNUM=0
      END IF
      IF((IPARALLEL.GT.1 .AND. PARNUM.GT.0))i_parallel=PARNUM
      IF ((NRCYCL .LE. 0 .AND. (isource.EQ.2 .OR. isource.EQ.8))) THEN
          IF ((iqin.EQ.1 .OR. enflag.EQ.3)) THEN
              NRCYCL=0
          ELSE
              IF ((iqin.EQ.0)) THEN
                  tempdiv=nphist
              ELSE IF((iqin.EQ.-1)) THEN
                  tempdiv=nshist-nphist
              ELSE
                  tempdiv=nshist
              END IF
              IF ((IPARALLEL.GT.1 .AND. PARNUM.GT.0)) THEN
                  temppar=IPARALLEL
              ELSE
                  temppar=1
              END IF
              IF ((NINT(dble(temppar*NCASE)/dble(tempdiv)).LE.1)) THEN
                  NRCYCL=0
              ELSE IF((MOD(temppar*NCASE,tempdiv).EQ.0)) THEN
                  NRCYCL=(temppar*NCASE)/tempdiv-1
              ELSE
                  NRCYCL=(temppar*NCASE)/tempdiv
              END IF
          END IF
      END IF
      IF ((ihowfarless.LE.0 .OR. ihowfarless.GT.1)) THEN
          ihowfarless=0
          howfarless=.false.
      ELSE
          howfarless=.true.
          iausfl(6)=1
          iausfl(16)=1
          iausfl(18)=1
          iausfl(20)=1
          iausfl(24)=1
      END IF
      IF ((iqin .EQ. 0)) THEN
          etotin = ein
      ELSE
          etotin = ein + prm
      END IF
      WRITE(6,2210)NCASE,IWATCH,TIMMAX,IXXIN,JXXIN,BEAM_SIZE,ISMOOTH,IRE
     *START,IDAT, IREJECT,ESAVE_GLOBAL,NRCYCL,IPARALLEL,PARNUM,n_split,i
     *howfarless,i_phsp_out
      WRITE(1,2210)NCASE,IWATCH,TIMMAX,IXXIN,JXXIN,BEAM_SIZE,ISMOOTH,IRE
     *START,IDAT, IREJECT,ESAVE_GLOBAL,NRCYCL,IPARALLEL,PARNUM,n_split,i
     *howfarless,i_phsp_out
2210  FORMAT(/i12,i4,f7.2,2i10,f7.2,i7,i5,i4,i4,F7.2,i4,i4,i4,i4,i4,i4/)
      IF ((IRESTART.EQ.1)) THEN
          WRITE(6,2220)
          WRITE(1,2220)
2220      FORMAT(/' Above RNG seeds will be replaced by those from previ
     *ous run.')
      END IF
      IF((i_phsp_out.LT.0 .OR. i_phsp_out.GT.2))i_phsp_out=0
      IF ((i_phsp_out.NE.0 .AND. (isource .NE. 2 .AND. isource .NE. 8 .A
     *ND. isource .NE. 9 .AND. isource .NE. 10 .AND. isource .NE. 20 .AN
     *D. isource .NE. 21))) THEN
          WRITE(6,2230)
2230      FORMAT(/' Warning: Phase space data can only be output for pha
     *se space '/ ' or BEAM simulation sources.  Resetting i_phsp_out to
     * 0 for '/ ' now.'/)
          i_phsp_out=0
      ELSE IF((i_phsp_out.NE.0)) THEN
          IF ((i_phsp_out.EQ.1)) THEN
              WRITE(6,2240)
2240          FORMAT(/' Will output IAEA format phase space data in DOSX
     *YZnrc '/ ' coordinates.'/)
          ELSE IF((i_phsp_out.EQ.2)) THEN
              WRITE(6,2250)
2250          FORMAT(/' Will output IAEA format phase space data in BEAM
     *nrc '/ ' coordinates.'/)
          END IF
          IF ((i_muidx_out.EQ.1)) THEN
              WRITE(6,2260)
2260          FORMAT(/' Fractional MU index will be included in phase sp
     *ace data.'/)
          END IF
      END IF
      IF((i_phsp_out.EQ.1 .OR. i_phsp_out.EQ.2))iausfl(6)=1
      ixx = IXXIN
      jxx = JXXIN
      call init_ranmar
      skindepth_for_bca=0
      call get_transport_parameter(-1)
      IF (((.NOT.exact_bca .OR. transport_algorithm.EQ.1) .AND. SMAXIR.E
     *Q.1e10)) THEN
          SMAXIR=5.
      END IF
      smax = smaxir
      WRITE(6,2270)
2270  FORMAT(/ / ' Call hatch'/ ' ----------'/)
      call hatch
      call show_transport_parameter(6)
      call show_transport_parameter(iout)
      IF ((ECUTIN.GT.ECUT)) THEN
          WRITE(6,2280)ECUT
2280      FORMAT(/' ****WARNING****'/ ' ECUTIN > ECUT input in EGSnrc pa
     *rameters ( ',F10.4,' MeV).'/ ' ECUT defaults to ECUTIN.'/)
          ECUT=ECUTIN
      ELSE
          ECUTIN=ECUT
      END IF
      IF ((PCUTIN.GT.PCUT)) THEN
          WRITE(6,2290)PCUT
2290      FORMAT(/' ****WARNING****'/ ' PCUTIN > PCUT input in EGSnrc pa
     *rameters ( ',F10.4,' MeV).'/ ' PCUT defaults to PCUTIN.'/)
          PCUT=PCUTIN
      ELSE
          ECUTIN=ECUT
      END IF
      call srcinit(weight)
      IF ((isource.EQ.20)) THEN
          compensated_NCASE = (dble(NCASE)/dble(survival_ratio)+0.5)
          jcase = (NCASE+10/2)/10
          NCASE = jcase*10
          IF ((NRCYCL .LE. 0)) THEN
              IF ((iqin.EQ.1 .OR. enflag.EQ.3)) THEN
                  NRCYCL=0
              ELSE
                  IF ((iqin.EQ.0)) THEN
                      tempdiv=nphist
                  ELSE IF((iqin.EQ.-1)) THEN
                      tempdiv=nshist-nphist
                  ELSE
                      tempdiv=nshist
                  END IF
                  IF ((IPARALLEL.GT.1 .AND. PARNUM.GT.0)) THEN
                      temppar=IPARALLEL
                  ELSE
                      temppar=1
                  END IF
                  IF ((NINT(dble(temppar*compensated_NCASE)/dble(tempdiv
     *            )).LE.1)) THEN
                      NRCYCL=0
                  ELSE IF((MOD(temppar*compensated_NCASE,tempdiv).EQ.0))
     *             THEN
                      NRCYCL=dble(temppar*compensated_NCASE)/dble(tempdi
     *                v)-1
                  ELSE
                      NRCYCL=(temppar*compensated_NCASE)/dble(tempdiv)
                  END IF
              END IF
          END IF
      END IF
      IF (( isource .EQ. 2 .OR. isource .EQ. 8 .OR. isource .EQ. 20)) TH
     *EN
          IF ((NRCYCL.GT.0)) THEN
              WRITE(6,2300)NRCYCL
2300          FORMAT(' Will recyle each phase space particle ',I4,' time
     *s before going on '/ ' to next particle.')
          END IF
          IF (( ISMOOTH .EQ. 1)) THEN
              WRITE(6,2310)
2310          FORMAT(/' Will redistribute phase space particles if phase
     * space file'/ ' restarted and/or individual particles recycled')
          ELSE
              WRITE(6,2320)
2320          FORMAT(' Restarted phase space files and recycled particle
     *s are not'/ ' redistributed')
          END IF
      END IF
      IF ((IRESTART .EQ. 0)) THEN
          WRITE(6,2330)
2330      FORMAT(/' Starting a new calculation')
      ELSE IF((IRESTART .EQ. 1)) THEN
          WRITE(6,2340)
2340      FORMAT(/' Restarting from a previous run')
      ELSE IF((IRESTART .EQ. 2)) THEN
          WRITE(6,2350)
2350      FORMAT(/' Just create input file and exit')
      ELSE IF((IRESTART .EQ. 3)) THEN
          WRITE(6,2360)
2360      FORMAT(/' Read in stored data and analyse')
      ELSE IF((IRESTART .EQ. 4)) THEN
          WRITE(6,2370)
2370      FORMAT(/' Recombining parallel runs')
      ELSE
          IRESTART = 0
          WRITE(6,2380)
2380      FORMAT(/' IRESTART set to 0, start new caln')
      END IF
      IF ((IDAT .EQ. 0)) THEN
          WRITE(6,2390)
2390      FORMAT(/' Store intermediate files for each batch')
      ELSE IF((IDAT .EQ. 1)) THEN
          WRITE(6,2400)
2400      FORMAT(/' Do not store intermediate files at all')
      ELSE IF((IDAT .EQ. 2)) THEN
          WRITE(6,2410)
2410      FORMAT(/' Store data files at end of run only')
      ELSE
          IDAT = 0
          WRITE(6,2420)
2420      FORMAT(/' Store intermediate files for each batch')
      END IF
      IF ((IPARALLEL.GT.1)) THEN
          WRITE(6,2430)
2430      FORMAT(/' Will output binary .pardose files.'/ '   With this s
     *et, the egslst files do not contain dose listings either.')
      END IF
      IF ((IWATCH.EQ.4)) THEN
          ioutgeom=egs_open_file(ioutgeom,0,1,'.egsgeom')
          write(ioutgeom,2440)1,'QUAD', xbound_min,ybound_min,zbound_min
     *    , xbound_min,ybound_max,zbound_min, xbound_max,ybound_max,zbou
     *    nd_min, xbound_max,ybound_min,zbound_min
2440      format(' ',I1,A4,12(F7.2,','))
          write(ioutgeom,2450)1,'QUAD', xbound_min,ybound_min,zbound_max
     *    , xbound_min,ybound_max,zbound_max, xbound_max,ybound_max,zbou
     *    nd_max, xbound_max,ybound_min,zbound_max
2450      format(' ',I1,A4,12(F7.2,','))
          write(ioutgeom,2460)1,'QUAD', xbound_min,ybound_min,zbound_min
     *    , xbound_min,ybound_min,zbound_max, xbound_min,ybound_max,zbou
     *    nd_max, xbound_min,ybound_max,zbound_min
2460      format(' ',I1,A4,12(F7.2,','))
          write(ioutgeom,2470)1,'QUAD', xbound_max,ybound_min,zbound_min
     *    , xbound_max,ybound_min,zbound_max, xbound_max,ybound_max,zbou
     *    nd_max, xbound_max,ybound_max,zbound_min
2470      format(' ',I1,A4,12(F7.2,','))
          write(ioutgeom,2480)1,'QUAD', xbound_min,ybound_min,zbound_min
     *    , xbound_min,ybound_min,zbound_max, xbound_max,ybound_min,zbou
     *    nd_max, xbound_max,ybound_min,zbound_min
2480      format(' ',I1,A4,12(F7.2,','))
          write(ioutgeom,2490)1,'QUAD', xbound_min,ybound_max,zbound_min
     *    , xbound_min,ybound_max,zbound_max, xbound_max,ybound_max,zbou
     *    nd_max, xbound_max,ybound_max,zbound_min
2490      format(' ',I1,A4,12(F7.2,','))
          IF ((isource .EQ. 2 .OR. isource .EQ. 8)) THEN
              XMIN_YMIN_ZMIN = r_11(1)*(-BEAM_SIZE/2) + r_12(1)*(-BEAM_S
     *        IZE/2) + r_13(1)*(dsource+0.1) + xiso
              YMIN_XMIN_ZMIN = r_21(1)*(-BEAM_SIZE/2) + r_22(1)*(-BEAM_S
     *        IZE/2) + r_23(1)*(dsource+0.1) + yiso
              ZMIN_XMIN_YMIN = r_31(1)*(-BEAM_SIZE/2) + r_32(1)*(-BEAM_S
     *        IZE/2) + r_33(1)*(dsource+0.1) + ziso
              XMIN_YMAX_ZMIN = r_11(1)*(-BEAM_SIZE/2) + r_12(1)*(BEAM_SI
     *        ZE/2) + r_13(1)*(dsource+0.1) + xiso
              YMAX_XMIN_ZMIN = r_21(1)*(-BEAM_SIZE/2) + r_22(1)*(BEAM_SI
     *        ZE/2) + r_23(1)*(dsource+0.1) + yiso
              ZMIN_XMIN_YMAX = r_31(1)*(-BEAM_SIZE/2) + r_32(1)*(BEAM_SI
     *        ZE/2) + r_33(1)*(dsource+0.1) + ziso
              XMAX_YMIN_ZMIN = r_11(1)*(BEAM_SIZE/2) + r_12(1)*(-BEAM_SI
     *        ZE/2) + r_13(1)*(dsource+0.1) + xiso
              YMIN_XMAX_ZMIN = r_21(1)*(BEAM_SIZE/2) + r_22(1)*(-BEAM_SI
     *        ZE/2) + r_23(1)*(dsource+0.1) + yiso
              ZMIN_XMAX_YMIN = r_31(1)*(BEAM_SIZE/2) + r_32(1)*(-BEAM_SI
     *        ZE/2) + r_33(1)*(dsource+0.1) + ziso
              XMAX_YMAX_ZMIN = r_11(1)*(BEAM_SIZE/2) + r_12(1)*(BEAM_SIZ
     *        E/2) + r_13(1)*(dsource+0.1) + xiso
              YMAX_XMAX_ZMIN = r_21(1)*(BEAM_SIZE/2) + r_22(1)*(BEAM_SIZ
     *        E/2) + r_23(1)*(dsource+0.1) + yiso
              ZMIN_XMAX_YMAX = r_31(1)*(BEAM_SIZE/2) + r_32(1)*(BEAM_SIZ
     *        E/2) + r_33(1)*(dsource+0.1) + ziso
              XMIN_YMIN_ZMAX = r_11(1)*(-BEAM_SIZE/2) + r_12(1)*(-BEAM_S
     *        IZE/2) + r_13(1)*(dsource-0.1) + xiso
              YMIN_XMIN_ZMAX = r_21(1)*(-BEAM_SIZE/2) + r_22(1)*(-BEAM_S
     *        IZE/2) + r_23(1)*(dsource-0.1) + yiso
              ZMAX_XMIN_YMIN = r_31(1)*(-BEAM_SIZE/2) + r_32(1)*(-BEAM_S
     *        IZE/2) + r_33(1)*(dsource-0.1) + ziso
              XMIN_YMAX_ZMAX = r_11(1)*(-BEAM_SIZE/2) + r_12(1)*(BEAM_SI
     *        ZE/2) + r_13(1)*(dsource-0.1) + xiso
              YMAX_XMIN_ZMAX = r_21(1)*(-BEAM_SIZE/2) + r_22(1)*(BEAM_SI
     *        ZE/2) + r_23(1)*(dsource-0.1) + yiso
              ZMAX_XMIN_YMAX = r_31(1)*(-BEAM_SIZE/2) + r_32(1)*(BEAM_SI
     *        ZE/2) + r_33(1)*(dsource-0.1) + ziso
              XMAX_YMIN_ZMAX = r_11(1)*(BEAM_SIZE/2) + r_12(1)*(-BEAM_SI
     *        ZE/2) + r_13(1)*(dsource-0.1) + xiso
              YMIN_XMAX_ZMAX = r_21(1)*(BEAM_SIZE/2) + r_22(1)*(-BEAM_SI
     *        ZE/2) + r_23(1)*(dsource-0.1) + yiso
              ZMAX_XMAX_YMIN = r_31(1)*(BEAM_SIZE/2) + r_32(1)*(-BEAM_SI
     *        ZE/2) + r_33(1)*(dsource-0.1) + ziso
              XMAX_YMAX_ZMAX = r_11(1)*(BEAM_SIZE/2) + r_12(1)*(BEAM_SIZ
     *        E/2) + r_13(1)*(dsource-0.1) + xiso
              YMAX_XMAX_ZMAX = r_21(1)*(BEAM_SIZE/2) + r_22(1)*(BEAM_SIZ
     *        E/2) + r_23(1)*(dsource-0.1) + yiso
              ZMAX_XMAX_YMAX = r_31(1)*(BEAM_SIZE/2) + r_32(1)*(BEAM_SIZ
     *        E/2) + r_33(1)*(dsource-0.1) + ziso
              write(ioutgeom,2500)3,'QUAD', XMIN_YMIN_ZMIN,YMIN_XMIN_ZMI
     *        N,ZMIN_XMIN_YMIN, XMIN_YMAX_ZMIN,YMAX_XMIN_ZMIN,ZMIN_XMIN_
     *        YMAX, XMAX_YMAX_ZMIN,YMAX_XMAX_ZMIN,ZMIN_XMAX_YMAX, XMAX_Y
     *        MIN_ZMIN,YMIN_XMAX_ZMIN,ZMIN_XMAX_YMIN
2500          format(' ',I1,A4,12(F7.2,','))
              write(ioutgeom,2510)3,'QUAD', XMIN_YMIN_ZMAX,YMIN_XMIN_ZMA
     *        X,ZMAX_XMIN_YMIN, XMIN_YMAX_ZMAX,YMAX_XMIN_ZMAX,ZMAX_XMIN_
     *        YMAX, XMAX_YMAX_ZMAX,YMAX_XMAX_ZMAX,ZMAX_XMAX_YMAX, XMAX_Y
     *        MIN_ZMAX,YMIN_XMAX_ZMAX,ZMAX_XMAX_YMIN
2510          format(' ',I1,A4,12(F7.2,','))
              write(ioutgeom,2520)3,'QUAD', XMIN_YMIN_ZMIN,YMIN_XMIN_ZMI
     *        N,ZMIN_XMIN_YMIN, XMIN_YMIN_ZMAX,YMIN_XMIN_ZMAX,ZMAX_XMIN_
     *        YMIN, XMIN_YMAX_ZMAX,YMAX_XMIN_ZMAX,ZMAX_XMIN_YMAX, XMIN_Y
     *        MAX_ZMIN,YMAX_XMIN_ZMIN,ZMIN_XMIN_YMAX
2520          format(' ',I1,A4,12(F7.2,','))
              write(ioutgeom,2530)3,'QUAD', XMAX_YMIN_ZMIN,YMIN_XMAX_ZMI
     *        N,ZMIN_XMAX_YMIN, XMAX_YMIN_ZMAX,YMIN_XMAX_ZMAX,ZMAX_XMAX_
     *        YMIN, XMAX_YMAX_ZMAX,YMAX_XMAX_ZMAX,ZMAX_XMAX_YMAX, XMAX_Y
     *        MAX_ZMIN,YMAX_XMAX_ZMIN,ZMIN_XMAX_YMAX
2530          format(' ',I1,A4,12(F7.2,','))
              write(ioutgeom,2540)3,'QUAD', XMIN_YMIN_ZMIN,YMIN_XMIN_ZMI
     *        N,ZMIN_XMIN_YMIN, XMIN_YMIN_ZMAX,YMIN_XMIN_ZMAX,ZMAX_XMIN_
     *        YMIN, XMAX_YMIN_ZMAX,YMIN_XMAX_ZMAX,ZMAX_XMAX_YMIN, XMAX_Y
     *        MIN_ZMIN,YMIN_XMAX_ZMIN,ZMIN_XMAX_YMIN
2540          format(' ',I1,A4,12(F7.2,','))
              write(ioutgeom,2550)3,'QUAD', XMIN_YMAX_ZMIN,YMAX_XMIN_ZMI
     *        N,ZMIN_XMIN_YMAX, XMIN_YMAX_ZMAX,YMAX_XMIN_ZMAX,ZMAX_XMIN_
     *        YMAX, XMAX_YMAX_ZMAX,YMAX_XMAX_ZMAX,ZMAX_XMAX_YMAX, XMAX_Y
     *        MAX_ZMIN,YMAX_XMAX_ZMIN,ZMIN_XMAX_YMAX
2550          format(' ',I1,A4,12(F7.2,','))
              IF ((isource.EQ.8)) THEN
                  DO 2561 I=2,numang
                      XMIN_YMIN_ZMIN = r_11(I)*(-BEAM_SIZE/2) + r_12(I)*
     *                (-BEAM_SIZE/2) + r_13(I)*(dsource+0.1) + xiso
                      YMIN_XMIN_ZMIN = r_21(I)*(-BEAM_SIZE/2) + r_22(I)*
     *                (-BEAM_SIZE/2) + r_23(I)*(dsource+0.1) + yiso
                      ZMIN_XMIN_YMIN = r_31(I)*(-BEAM_SIZE/2) + r_32(I)*
     *                (-BEAM_SIZE/2) + r_33(I)*(dsource+0.1) + ziso
                      XMIN_YMAX_ZMIN = r_11(I)*(-BEAM_SIZE/2) + r_12(I)*
     *                (BEAM_SIZE/2) + r_13(I)*(dsource+0.1) + xiso
                      YMAX_XMIN_ZMIN = r_21(I)*(-BEAM_SIZE/2) + r_22(I)*
     *                (BEAM_SIZE/2) + r_23(I)*(dsource+0.1) + yiso
                      ZMIN_XMIN_YMAX = r_31(I)*(-BEAM_SIZE/2) + r_32(I)*
     *                (BEAM_SIZE/2) + r_33(I)*(dsource+0.1) + ziso
                      XMAX_YMIN_ZMIN = r_11(I)*(BEAM_SIZE/2) + r_12(I)*(
     *                -BEAM_SIZE/2) + r_13(I)*(dsource+0.1) + xiso
                      YMIN_XMAX_ZMIN = r_21(I)*(BEAM_SIZE/2) + r_22(I)*(
     *                -BEAM_SIZE/2) + r_23(I)*(dsource+0.1) + yiso
                      ZMIN_XMAX_YMIN = r_31(I)*(BEAM_SIZE/2) + r_32(I)*(
     *                -BEAM_SIZE/2) + r_33(I)*(dsource+0.1) + ziso
                      XMAX_YMAX_ZMIN = r_11(I)*(BEAM_SIZE/2) + r_12(I)*(
     *                BEAM_SIZE/2) + r_13(I)*(dsource+0.1) + xiso
                      YMAX_XMAX_ZMIN = r_21(I)*(BEAM_SIZE/2) + r_22(I)*(
     *                BEAM_SIZE/2) + r_23(I)*(dsource+0.1) + yiso
                      ZMIN_XMAX_YMAX = r_31(I)*(BEAM_SIZE/2) + r_32(I)*(
     *                BEAM_SIZE/2) + r_33(I)*(dsource+0.1) + ziso
                      XMIN_YMIN_ZMAX = r_11(I)*(-BEAM_SIZE/2) + r_12(I)*
     *                (-BEAM_SIZE/2) + r_13(I)*(dsource-0.1) + xiso
                      YMIN_XMIN_ZMAX = r_21(I)*(-BEAM_SIZE/2) + r_22(I)*
     *                (-BEAM_SIZE/2) + r_23(I)*(dsource-0.1) + yiso
                      ZMAX_XMIN_YMIN = r_31(I)*(-BEAM_SIZE/2) + r_32(I)*
     *                (-BEAM_SIZE/2) + r_33(I)*(dsource-0.1) + ziso
                      XMIN_YMAX_ZMAX = r_11(I)*(-BEAM_SIZE/2) + r_12(I)*
     *                (BEAM_SIZE/2) + r_13(I)*(dsource-0.1) + xiso
                      YMAX_XMIN_ZMAX = r_21(I)*(-BEAM_SIZE/2) + r_22(I)*
     *                (BEAM_SIZE/2) + r_23(I)*(dsource-0.1) + yiso
                      ZMAX_XMIN_YMAX = r_31(I)*(-BEAM_SIZE/2) + r_32(I)*
     *                (BEAM_SIZE/2) + r_33(I)*(dsource-0.1) + ziso
                      XMAX_YMIN_ZMAX = r_11(I)*(BEAM_SIZE/2) + r_12(I)*(
     *                -BEAM_SIZE/2) + r_13(I)*(dsource-0.1) + xiso
                      YMIN_XMAX_ZMAX = r_21(I)*(BEAM_SIZE/2) + r_22(I)*(
     *                -BEAM_SIZE/2) + r_23(I)*(dsource-0.1) + yiso
                      ZMAX_XMAX_YMIN = r_31(I)*(BEAM_SIZE/2) + r_32(I)*(
     *                -BEAM_SIZE/2) + r_33(I)*(dsource-0.1) + ziso
                      XMAX_YMAX_ZMAX = r_11(I)*(BEAM_SIZE/2) + r_12(I)*(
     *                BEAM_SIZE/2) + r_13(I)*(dsource-0.1) + xiso
                      YMAX_XMAX_ZMAX = r_21(I)*(BEAM_SIZE/2) + r_22(I)*(
     *                BEAM_SIZE/2) + r_23(I)*(dsource-0.1) + yiso
                      ZMAX_XMAX_YMAX = r_31(I)*(BEAM_SIZE/2) + r_32(I)*(
     *                BEAM_SIZE/2) + r_33(I)*(dsource-0.1) + ziso
                      write(ioutgeom,2570)3,'QUAD', XMIN_YMIN_ZMIN,YMIN_
     *                XMIN_ZMIN,ZMIN_XMIN_YMIN, XMIN_YMAX_ZMIN,YMAX_XMIN
     *                _ZMIN,ZMIN_XMIN_YMAX, XMAX_YMAX_ZMIN,YMAX_XMAX_ZMI
     *                N,ZMIN_XMAX_YMAX, XMAX_YMIN_ZMIN,YMIN_XMAX_ZMIN,ZM
     *                IN_XMAX_YMIN
2570                  format(' ',I1,A4,12(F7.2,','))
                      write(ioutgeom,2580)3,'QUAD', XMIN_YMIN_ZMAX,YMIN_
     *                XMIN_ZMAX,ZMAX_XMIN_YMIN, XMIN_YMAX_ZMAX,YMAX_XMIN
     *                _ZMAX,ZMAX_XMIN_YMAX, XMAX_YMAX_ZMAX,YMAX_XMAX_ZMA
     *                X,ZMAX_XMAX_YMAX, XMAX_YMIN_ZMAX,YMIN_XMAX_ZMAX,ZM
     *                AX_XMAX_YMIN
2580                  format(' ',I1,A4,12(F7.2,','))
                      write(ioutgeom,2590)3,'QUAD', XMIN_YMIN_ZMIN,YMIN_
     *                XMIN_ZMIN,ZMIN_XMIN_YMIN, XMIN_YMIN_ZMAX,YMIN_XMIN
     *                _ZMAX,ZMAX_XMIN_YMIN, XMIN_YMAX_ZMAX,YMAX_XMIN_ZMA
     *                X,ZMAX_XMIN_YMAX, XMIN_YMAX_ZMIN,YMAX_XMIN_ZMIN,ZM
     *                IN_XMIN_YMAX
2590                  format(' ',I1,A4,12(F7.2,','))
                      write(ioutgeom,2600)3,'QUAD', XMAX_YMIN_ZMIN,YMIN_
     *                XMAX_ZMIN,ZMIN_XMAX_YMIN, XMAX_YMIN_ZMAX,YMIN_XMAX
     *                _ZMAX,ZMAX_XMAX_YMIN, XMAX_YMAX_ZMAX,YMAX_XMAX_ZMA
     *                X,ZMAX_XMAX_YMAX, XMAX_YMAX_ZMIN,YMAX_XMAX_ZMIN,ZM
     *                IN_XMAX_YMAX
2600                  format(' ',I1,A4,12(F7.2,','))
                      write(ioutgeom,2610)3,'QUAD', XMIN_YMIN_ZMIN,YMIN_
     *                XMIN_ZMIN,ZMIN_XMIN_YMIN, XMIN_YMIN_ZMAX,YMIN_XMIN
     *                _ZMAX,ZMAX_XMIN_YMIN, XMAX_YMIN_ZMAX,YMIN_XMAX_ZMA
     *                X,ZMAX_XMAX_YMIN, XMAX_YMIN_ZMIN,YMIN_XMAX_ZMIN,ZM
     *                IN_XMAX_YMIN
2610                  format(' ',I1,A4,12(F7.2,','))
                      write(ioutgeom,2620)3,'QUAD', XMIN_YMAX_ZMIN,YMAX_
     *                XMIN_ZMIN,ZMIN_XMIN_YMAX, XMIN_YMAX_ZMAX,YMAX_XMIN
     *                _ZMAX,ZMAX_XMIN_YMAX, XMAX_YMAX_ZMAX,YMAX_XMAX_ZMA
     *                X,ZMAX_XMAX_YMAX, XMAX_YMAX_ZMIN,YMAX_XMAX_ZMIN,ZM
     *                IN_XMAX_YMAX
2620                  format(' ',I1,A4,12(F7.2,','))
2561              CONTINUE
2562              CONTINUE
              END IF
              IF ((isource.EQ.20 .OR. isource.EQ.21)) THEN
                  WRITE(6,2630)17
2630              FORMAT(/' Not displaying all 10000 source planes'/)
              END IF
          END IF
      END IF
      call srcout
      IF((howfarless))call modify_tmxs(MIN(mindelX,mindelY,mindelZ))
      WRITE(6,2640)
      WRITE(1,2640)
2640  FORMAT(/' Medium',t24,'AE',t34,'AP')
      DO 2651 n=1,NMED
          WRITE(6,2660)(media(j,n),j=1,15),ae(n),ap(n)
          WRITE(1,2660)(media(j,n),j=1,15),ae(n),ap(n)
2660      FORMAT(1x,15a1,2f10.3)
2651  CONTINUE
2652  CONTINUE
      DO 2671 irl=1,irmax
          endep_last(irl)=0
2671  CONTINUE
2672  CONTINUE
      IHSTRY=0
      IF ((IRESTART .EQ. 0)) THEN
          nnread = 0
          nsmiss=0
          nmissm=0
          ncaseold=0
          nsrjct=0
          nsoutside=0
          ndbsrjct=0
          planarefe=0.
          planarefp=0.
          planarfe=0.
          planarfp=0.
          NofREPEAT = 0
          esrc=0.
          nestep=0
          nhist=0
          more_in_cont=0
          frMU_indx=-1.0
          nsblocked=0
          IF ((IPARALLEL.GT.1 .AND. PARNUM.GT.0)) THEN
              nnphsp=INT((PARNUM-1)*nshist/IPARALLEL)+1
          ELSE
              nnphsp=1
          END IF
          IF ((i_iaea_in.EQ.1)) THEN
              iaea_dummy_long=nnphsp
              call iaea_set_record(i_unit_in,iaea_dummy_long,iaea_result
     *        )
              IF ((iaea_result.LT.0)) THEN
                  WRITE(i_log,*)' Error going to record ',nnphsp,' in IA
     *EA phsp file.'
                  call exit(1)
              END IF
          END IF
          DO 2681 irl=1,irmax
              endep(irl)=0.0
              endep2(irl)=0.0
              endep_tmp(irl)=0.0
2681      CONTINUE
2682      CONTINUE
          tcpuold=0.
      ELSE IF((IRESTART .EQ. 1)) THEN
          WRITE(6,2690)
2690      FORMAT(/' *** About to read dose data from previous run ***')
          i_par_temp=i_parallel
          IF((IPARALLEL.GT.0 .AND. n_parallel.EQ.0))i_parallel=0
          iorstrt=egs_open_datfile(iorstrt,0,1,'.egsdat')
          i_parallel=i_par_temp
          DO 2701 irl=1,irmax
              READ(iorstrt,*)endep(irl),endep2(irl)
2701      CONTINUE
2702      CONTINUE
          READ(iorstrt,*) ncaseold,nnread,nsmiss,nmissm,nnphsp,NofREPEAT
     *    ,tcpuold,esrc, planarefe,planarefp,planarfe,planarfp,nestep,ns
     *    rjct,nsoutside,ndbsrjct, nhist,nsblocked
          read(iorstrt,*) urndm,crndm,cdrndm, cmrndm, ixx, jxx, rng_seed
     *    , rng_array
          twom24 = 1./16777216.
          CLOSE(iorstrt)
          WRITE(6,2710)ncaseold
          WRITE(1,2710)ncaseold
2710      FORMAT(/' Histories finshed in previous run',i12)
          IF ((isource.EQ.2 .OR. isource.EQ.8 .OR. isource.EQ.9)) THEN
              WRITE(6,2720)nhist
              WRITE(1,2720)nhist
2720          FORMAT(/' Equivalent no. of primary histories',i12)
          END IF
          WRITE(6,2730)tcpuold/3600.
          WRITE(1,2730)tcpuold/3600.
2730      FORMAT(/' Total previou CPU time (hour)    ',f10.3)
          WRITE(6,2740)
          WRITE(1,2740)
2740      FORMAT(/' Random number seeds for restart  ',$)
          write(6,'(a,2i4,$)') ' ixx jxx = ',ixx,jxx
          write(1,'(a,2i4,$)') ' ixx jxx = ',ixx,jxx
          WRITE(6,2750)
2750      FORMAT(/' ***Successfully read previous dose data file ***')
      ELSE IF((IRESTART .EQ. 2)) THEN
          GO TO 2760
      ELSE IF((IRESTART .EQ. 3)) THEN
          NCASE=0
          WRITE(6,2770)
2770      FORMAT(/' *** About to read dose data from previous run ***')
          i_par_temp=i_parallel
          IF((IPARALLEL.GT.0 .AND. n_parallel.EQ.0))i_parallel=0
          iorstrt=egs_open_datfile(iorstrt,0,1,'.egsdat')
          i_parallel=i_par_temp
          DO 2781 irl=1,irmax
              READ(iorstrt,*)endep(irl),endep2(irl)
2781      CONTINUE
2782      CONTINUE
          READ(iorstrt,*) ncaseold,nnread,nsmiss,nmissm,nnphsp,NofREPEAT
     *    ,tcpuold,esrc, planarefe,planarefp,planarfe,planarfp,nestep,ns
     *    rjct,nsoutside,ndbsrjct, nhist,nsblocked
          read(iorstrt,*) urndm,crndm,cdrndm, cmrndm, ixx, jxx, rng_seed
     *    , rng_array
          twom24 = 1./16777216.
          CLOSE(iorstrt)
          WRITE(6,2790)ncaseold
          WRITE(1,2790)ncaseold
2790      FORMAT(/' Histories finished in previous run',i12)
          WRITE(6,2800)tcpuold/3600.
          WRITE(1,2800)tcpuold/3600.
2800      FORMAT(/' Total CPU time (hour) by then    ',f10.3)
          timcpu=0
          NCASE=0
          WRITE(6,2810)
2810      FORMAT(/' ***Successfully read previous dose data file ***')
          GO TO 2820
      ELSE IF((IRESTART.EQ.4)) THEN
          call egs_combine_runs(combine_results,'.pardose')
          ainflu=temp2
          IF(((isource .EQ. 0 .OR. isource .EQ. 1 .OR. isource .EQ. 3 .O
     *    R. isource .EQ. 7) .AND. beamarea.GT.0.))ainflu=ainflu/beamare
     *    a
          goto 2830
      END IF
      IF ((i_phsp_out.NE.0)) THEN
          phsp_out_fn=egs_home(:lnblnk1(egs_home))//user_code(:lnblnk1(u
     *    ser_code)) // '/' // output_file(:lnblnk1(output_file))
          IF (( i_parallel .GT. 0 )) THEN
              phsp_out_fn=phsp_out_fn(:lnblnk1(phsp_out_fn))// '_w'
              call egs_itostring(phsp_out_fn,i_parallel,.false.)
          END IF
          phsp_out_fn=phsp_out_fn(:lnblnk1(phsp_out_fn))//char(0)
          IF ((IRESTART.EQ.0)) THEN
              call iaea_new_source(i_unit_out,phsp_out_fn(:lnblnk1(phsp_
     *        out_fn)),0+2,iaea_result)
              IF ((iaea_result.LT.0)) THEN
                  WRITE(i_log,*)' Error opening IAEA phase space file fo
     *r write.'
                  call exit(1)
              END IF
              i_iaea_open_for_write=1
              IF ((0.EQ.0)) THEN
                  IF((1.NE.1))call iaea_set_constant_variable(i_unit_out
     *            ,2,z_score_tmp)
                  IF ((0.NE.0)) THEN
                      IF ((i_muidx_out.NE.0)) THEN
                          call iaea_set_extra_numbers(i_unit_out,2,1)
                          call iaea_set_type_extrafloat_variable(i_unit_
     *                    out,1,0)
                          iaea_i_muidx_out=2
                      ELSE
                          call iaea_set_extra_numbers(i_unit_out,1,1)
                      END IF
                      call iaea_set_type_extrafloat_variable(i_unit_out,
     *                0,3)
                      iaea_i_zlast_out=1
                  ELSE IF((i_muidx_out.NE.0)) THEN
                      call iaea_set_extra_numbers(i_unit_out,1,1)
                      call iaea_set_type_extrafloat_variable(i_unit_out,
     *                0,0)
                      iaea_i_muidx_out=1
                  ELSE
                      call iaea_set_extra_numbers(i_unit_out,0,1)
                  END IF
                  call iaea_set_type_extralong_variable(i_unit_out,0,2)
                  iaea_i_latch_out=1
              END IF
          ELSE IF((IRESTART.EQ.1)) THEN
              call iaea_new_source(i_unit_out,phsp_out_fn(:lnblnk1(phsp_
     *        out_fn)),1+2,iaea_result)
              IF ((iaea_result.LT.0)) THEN
                  WRITE(i_log,*)' Error opening IAEA phase space file fo
     *r write.'
                  call exit(1)
              END IF
              i_iaea_open_for_write=1
              IF ((1.EQ.0)) THEN
                  IF((1.NE.1))call iaea_set_constant_variable(i_unit_out
     *            ,2,z_score_tmp)
                  IF ((0.NE.0)) THEN
                      IF ((i_muidx_out.NE.0)) THEN
                          call iaea_set_extra_numbers(i_unit_out,2,1)
                          call iaea_set_type_extrafloat_variable(i_unit_
     *                    out,1,0)
                          iaea_i_muidx_out=2
                      ELSE
                          call iaea_set_extra_numbers(i_unit_out,1,1)
                      END IF
                      call iaea_set_type_extrafloat_variable(i_unit_out,
     *                0,3)
                      iaea_i_zlast_out=1
                  ELSE IF((i_muidx_out.NE.0)) THEN
                      call iaea_set_extra_numbers(i_unit_out,1,1)
                      call iaea_set_type_extrafloat_variable(i_unit_out,
     *                0,0)
                      iaea_i_muidx_out=1
                  ELSE
                      call iaea_set_extra_numbers(i_unit_out,0,1)
                  END IF
                  call iaea_set_type_extralong_variable(i_unit_out,0,2)
                  iaea_i_latch_out=1
              END IF
          END IF
      END IF
      IF ((IREJECT .EQ. 1)) THEN
          WRITE(6,2840)ESAVE_GLOBAL
          WRITE(1,2840)ESAVE_GLOBAL
2840      FORMAT(/' Will perform charged-particle range rejection agains
     *t voxel boundaries'/ ' if particle energy is below ',F12.5,' MeV.'
     *)
          IF ((ESAVE_GLOBAL .LE. ECUTIN)) THEN
              WRITE(6,2850)
              WRITE(1,2850)
2850          FORMAT(///' ******  NB ESAVE_GLOBAL <= ECUT  so NO Range R
     *ejection', ' ***' //)
              IREJECT=0
          ELSE
              lelec=-1
              DO 2861 MEDIUM=1,NMED
                  IF ((ECUTIN .EQ. AE(MEDIUM))) THEN
                      RANGE_ECUTRR(MEDIUM)=0.0
                  ELSE
                      EKE = ECUTIN- RM
                      ELKE = LOG(EKE)
                      LELKE=EKE1(MEDIUM)*ELKE+EKE0(MEDIUM)
                      EKEI = E_array(LELKE,MEDIUM)
                      ELKEI = (LELKE - eke0(MEDIUM))/eke1(MEDIUM)
                      fedep = 1 - EKEI/EKE
                      elktmp = 0.5*(ELKE+ELKEI+0.25*fedep*fedep*(1+fedep
     *                *(1+0.875*fedep)))
                      lelktmp = LELKE
                      IF ((lelec .LT. 0)) THEN
                          dedxmid=ededx1(Lelktmp,MEDIUM)*elktmp+ededx0(L
     *                    elktmp,MEDIUM)
                          dedxmid = 1/dedxmid
                          aux = ededx1(lelktmp,medium)*dedxmid
                      ELSE
                          dedxmid=pdedx1(Lelktmp,MEDIUM)*elktmp+pdedx0(L
     *                    elktmp,MEDIUM)
                          dedxmid = 1/dedxmid
                          aux = pdedx1(lelktmp,medium)*dedxmid
                      END IF
                      aux = aux*(1+2*aux)*(fedep/(2-fedep))**2/6
                      RANGE_ECUTRR(MEDIUM) = fedep*EKE*dedxmid*(1+aux)
                      RANGE_ECUTRR(MEDIUM)=RANGE_ECUTRR(MEDIUM)+range_ep
     *                (0,LELKE,MEDIUM)
                  END IF
2861          CONTINUE
2862          CONTINUE
          END IF
      ELSE
          IREJECT=0
          WRITE(6,2870)
          WRITE(1,2870)
2870      FORMAT(/' No range rejection.')
          IF ((ESAVE_GLOBAL .GT. ECUTIN)) THEN
              WRITE(6,2880)
              WRITE(1,2880)
2880          FORMAT(T10,' Why is ESAVE_GLOBAL set when there is no rang
     *e rejection?', /T15,'It is set to zero'/)
              ESAVE_GLOBAL = 0.0
          END IF
      END IF
      IF ((n_split .GT. 1)) THEN
          iausfl(8) = 1
          iausfl(14) = 1
          iausfl(15) = 1
          WRITE(6,2890)n_split
          WRITE(1,2890)n_split
2890      FORMAT(/' Photons will be split ',I4,' times'/)
      END IF
      WRITE(6,2900)
      WRITE(1,2900)
2900  FORMAT(//' *******************************************************
     *********')
      IF ((isource.EQ.20)) THEN
          WRITE(6,2910)NCASE
          WRITE(1,2910)NCASE
2910      FORMAT(/ '  Histories to be simulated into the phantom for thi
     *s run ',i12)
          WRITE(6,2920)compensated_NCASE
          WRITE(1,2920)compensated_NCASE
2920      FORMAT( / '  Predicted histories required ',i12)
      ELSE
          WRITE(6,2930)NCASE
          WRITE(1,2930)NCASE
2930      FORMAT(/ '  Histories to be simulated for this run ',i12)
          WRITE(6,2940)ncaseold+NCASE
          WRITE(1,2940)ncaseold+NCASE
2940      FORMAT(/ '  Histories to be analyzed after this run',i12)
      END IF
      WRITE(6,2950)
      WRITE(1,2950)
2950  FORMAT(/ ' *******************************************************
     *********')
      IF ((IDAT.EQ.0 .OR. IDAT.EQ.2)) THEN
          i_par_temp=i_parallel
          IF((IPARALLEL.GT.0 .AND. n_parallel.EQ.0))i_parallel=0
          iorstrt=egs_open_file(iorstrt,0,1,'.egsdat')
          i_parallel=i_par_temp
      END IF
      IF ((IWATCH .NE. 0)) THEN
          call watch(-99,IWATCH)
      END IF
      TIMEB = egs_tot_time(0)
      WRITE(6,2960)TIMEB
      WRITE(1,2960)TIMEB
2960  FORMAT('   Elapsed wall clock time to this point=',f12.3,' s'/)
      tdum = egs_tot_time(1)
      ETIMETOT=0
      cput1=egs_etime()
      WRITE(6,2970)cput1 - cput0
      WRITE(1,2970)cput1 - cput0
2970  FORMAT(/'   CPU time so far for this run =',f12.3,' s'/)
      NETADJ=0
      CYCLNUM=0
      nhist_last=0
#ifdef HAVE_C_COMPILER
      n_tot = ncaseold
      first_time = .true.
      is_finished = .false.
      part_dose=0
      part2_dose=0
2980  CONTINUE
      IF ((isource .EQ. 20 .OR. isource .EQ. 21)) THEN
          more_in_cont=0
          frMU_indx=-1.0
      END IF
      IF (( n_parallel .GT. 0 )) THEN
          call egs_pjob_control(ncase,n_run,n_left,n_tot,part_dose,part2
     *    _dose, current_result, current_uncertainty)
          IF (( n_run .EQ. 0 )) THEN
              write(6,'(//a,a//)') '****** No histories left in job cont
     *rol file', '       => end simulation'
              goto 2820
          END IF
          jcase = n_run/10
          IF (( jcase .LT. 1 )) THEN
              jcase = 1
              n_run = jcase*10
          END IF
          IF (( first_time )) THEN
              IF((isource.EQ.2.OR.isource.EQ.8.OR.isource.EQ.20))p_per_p
     *        hsp_chunk=nshist/(n_parallel*10)
              first_time = .false.
              n_last = n_run
              write(6,'(//a,i12,a//)') '****** Running ',n_run,' histori
     *es'
          ELSE
              write(6,'(//a,i12,a)') '***** Finished ',n_last,' historie
     *s'
              write(6,'(/a/,20x,1pe11.4,a,0pf5.2,a/,a,i12,a//)') '
     *current result including previous runs and other parallel jobs: ',
     *         current_result, ' +/- ',current_uncertainty,' %', '
     *will run another ',n_run,' histories'
          END IF
          IF ((isource.EQ.2.OR.isource.EQ.8.OR.isource.EQ.20)) THEN
              n_run_chunk=(ncase-n_left)*n_parallel*10/ncase
              other_num_1=n_run_chunk*ncase
              other_num_2=(ncase-n_left)*n_parallel*10
              IF ((other_num_1.LT.other_num_2)) THEN
                  n_run_chunk=n_run_chunk+1
              END IF
              nnphsp_min=(n_run_chunk-1)*p_per_phsp_chunk+1
              IF ((n_left.EQ.0)) THEN
                  nnphsp_max=nshist
              ELSE
                  nnphsp_max=nnphsp_min+p_per_phsp_chunk-1
              END IF
              nnphsp=nnphsp_min
              IF ((i_iaea_in.EQ.1)) THEN
                  iaea_dummy_long=nnphsp
                  call iaea_set_record(i_unit_in,iaea_dummy_long,iaea_re
     *            sult)
                  IF ((iaea_result.LT.0)) THEN
                      WRITE(i_log,*)' Error going to record ',nnphsp,' i
     *n IAEA phsp file.'
                      call exit(1)
                  END IF
              END IF
              CYCLNUM=0
              write(6,'(/a/,a,i12,a,i12/,a//)') '      This simulation u
     *ses a phase space source.', '      This run will use from particle
     *',nnphsp_min,' to particle ', nnphsp_max, '      in the source fil
     *e.'
          END IF
      END IF
#endif
      DO 2991 ibatch=1,10
          IF ((ibatch .EQ. 1)) THEN
              CALL DATETIME(1)
              WRITE(6,3000)TIMEN
              WRITE(1,3000)TIMEN
3000          FORMAT(/' BATCH #',2X,'TIME-ELAPSED',2X,'TOTAL CPUTIME',2X
     *,'RATIO',2X, 'TIME OF DAY',2X,'RNG pointers'// ' ',4X,'1',10X,'0.0
     *',12X,'0.0',6X,'0.00',4X,A,'  ',$)
              write(6,'(a,2i4,$)') ' ixx jxx = ',ixx,jxx
              write(1,'(a,2i4,$)') ' ixx jxx = ',ixx,jxx
              WRITE(6,3010)
              WRITE(1,3010)
3010          FORMAT(' ')
          ELSE
              TIMEB = egs_tot_time(0)
              ETIMETOT=ETIMETOT+TIMEB
              CPUT2=egs_etime()
              CALL DATETIME(1)
              TIMCPU=CPUT2-CPUT1
              WRITE(6,3020)IBATCH,ETIMETOT,TIMCPU,ETIMETOT/TIMCPU,TIMEN
              WRITE(1,3020)IBATCH,ETIMETOT,TIMCPU,ETIMETOT/TIMCPU,TIMEN
3020          FORMAT(4X,I2,5X,F8.1,7X,F8.1,2X,F8.2,4X,A,'  ',$)
              write(6,'(a,2i4,$)') ' ixx jxx = ',ixx,jxx
              write(1,'(a,2i4,$)') ' ixx jxx = ',ixx,jxx
              WRITE(6,3030)
              WRITE(1,3030)
3030          FORMAT(' ')
              BATCHT=TIMCPU/FLOAT(IBATCH-1)
              IF ((TIMCPU+1.1*BATCHT .GT. TIMMAX*3600.)) THEN
                  WRITE(6,3040)
                  WRITE(1,3040)
3040              FORMAT(' Not enough time for another batch within time
     * limit')
              END IF
          END IF
          DO 3051 ihist=1,jcase
              nhist_old=nhist
              IHSTRY=IHSTRY+1
              IF ((isource.EQ.21 .AND. more_in_cont.EQ.0)) THEN
                  frMU_indx = -1.0
              END IF
              call srchst(xin,yin,zin,uin,vin,win,irin,weight,latchi)
              IF ((enflag .EQ. 1)) THEN
                  esrc = esrc + weight*esrc_sp
                  IF ((iqin .EQ.1)) THEN
                      esrc = esrc + weight*1.0220068
                  END IF
                  IF ((iqin .NE. 0)) THEN
                      etotin = esrc_sp + prm
                  ELSE
                      etotin = esrc_sp
                  END IF
              ELSE IF((enflag .EQ. 2 .OR. enflag .EQ. 3)) THEN
                  etotin = einsrc
                  IF ((iqin .EQ. -1)) THEN
                      esrc = esrc + weight*(etotin - prm)
                  ELSE IF((iqin .EQ. 0)) THEN
                      esrc = esrc + weight*etotin
                  ELSE IF((iqin .EQ. 1)) THEN
                      esrc = esrc + weight*(etotin + prm)
                  END IF
              ELSE IF((enflag .EQ. 4)) THEN
              ELSE IF((enflag .GT. 5 )) THEN
                  WRITE(6,3060)enflag
3060              FORMAT(' Wrong enflag:',I10)
                  STOP
              END IF
              IF ((IWATCH .GT. 0)) THEN
                  WRITE(6,3070) 1,etotin,iqin,irin,xin,yin,zin,uin,vin,w
     *            in,latchi,weight
3070              FORMAT(/' Initial shower values', t36,':',i3,f9.3,2i4,
     *3f8.3,3f7.3,i10,1pe10.3)
              END IF
              IF ((xin*xin+yin*yin.LT.0.31831)) THEN
                  IF ((iqin .NE. 0)) THEN
                      planarfe=planarfe+weight
                      planarefe=planarefe+(etotin-prm)*weight
                  ELSE
                      planarfp=planarfp+weight
                      planarefp=planarefp+etotin*weight
                  END IF
              END IF
              IF(((isource.NE.2 .AND. isource.NE.8 .AND. isource.NE.9 .A
     *        ND. isource.NE.20 .AND. isource.NE.21 .AND. isource.NE.10)
     *         .OR. (dose_stat.EQ.1 .AND. NRCYCL.EQ.0) .OR. (dose_stat.E
     *        Q.1 .AND. CYCLNUM.EQ.1) .OR. ((isource.EQ.2 .OR. isource.E
     *        Q.8 .OR. isource.EQ.20) .AND. (dose_stat.EQ.0 .AND. ihist.
     *        EQ.1 .AND. IBATCH.EQ.1 .AND. nhist.EQ.nhist_old) .AND. ((I
     *        PARALLEL.GT.1 .AND. PARNUM.GT.0) .OR. ( n_parallel.GT.0)))
     *        ))nhist=nhist+1
              IF ((nhist.NE.nhist_old)) THEN
                  nhist_last=nhist_last+1
                  IF ((nhist_last.EQ.32700)) THEN
                      DO 3081 irl=1,irmax-1
                          endep_last(irl)=0
3081                  CONTINUE
3082                  CONTINUE
                      nhist_last=1
                  END IF
              END IF
              IF (( (iqin .NE. 0 .AND. e_split .GT. 1 .AND. n_split.GT.1
     *        ) .AND. (isource .EQ. 2 .OR. isource .EQ. 8 .OR. isource .
     *        EQ. 9 .OR. isource .EQ. 10 .OR. isource .EQ. 20 .OR. isour
     *        ce .EQ.21) )) THEN
                  n_repeat = e_split
              ELSE
                  n_repeat = 1
              END IF
              DO 3091 i_repeat=1,n_repeat
                  call shower(iqin,etotin,xin,yin,zin,uin,vin,win,irin,w
     *            eight/n_repeat)
3091          CONTINUE
3092          CONTINUE
              IF((IWATCH .NE. 0))call watch(-1,IWATCH)
3051      CONTINUE
3052      CONTINUE
          cput2=egs_etime()
          timcpu=cput2-cput1
          IF ((i_phsp_out.GT.0)) THEN
              IF ((isource .EQ. 0 .OR. isource .EQ. 1 .OR. isource .EQ.
     *        3 .OR. isource .EQ. 7)) THEN
                  ainflu=dble(IHSTRY+ncaseold-nsmiss-nmissm)
              ELSE IF((isource .EQ. 2 .OR. isource .EQ. 8 )) THEN
                  ainflu=dble(IHSTRY+ncaseold+nsmiss+ (NRCYCL+1)*(nsrjct
     *            +nsoutside+ndbsrjct))/float(nshist)*NINCSRC
              ELSE IF((isource.EQ.4)) THEN
                  ainflu=dble(IHSTRY+ncaseold-nsmiss)
              ELSE IF((isource.EQ.6)) THEN
                  ainflu=dble(IHSTRY+ncaseold)
              ELSE IF((isource.EQ.9.OR.isource.EQ.10.OR.isource.EQ.21))
     *        THEN
                  ainflu=dble(nhist)
              ELSE IF((isource.EQ.20)) THEN
                  ainflu = dble((NRCYCL+1)*(nnread))/dble(nshist)*NINCSR
     *            C
              END IF
              iaea_dummy_long=ainflu
              call iaea_set_total_original_particles(i_unit_out,iaea_dum
     *        my_long)
              call iaea_update_header(i_unit_out,iaea_result)
              IF ((iaea_result.LT.0)) THEN
                  WRITE(i_log,*)' Error writing IAEA phase space header
     *for ID ',i_unit_out
                  call exit(1)
              END IF
          END IF
          IF ((IDAT .EQ. 0 .OR. (IDAT .EQ. 2 .AND. ibatch .EQ. 10) )) TH
     *    EN
              rewind(iorstrt)
              DO 3101 irl=1,irmax
                  endep(irl)=endep(irl)+endep_tmp(irl)
                  endep2(irl)=endep2(irl)+endep_tmp(irl)*endep_tmp(irl)
                  endep_tmp(irl)=0.
                  WRITE(iorstrt,*)endep(irl),endep2(irl)
3101          CONTINUE
3102          CONTINUE
              WRITE(iorstrt,*) IHSTRY+ncaseold, nnread, nsmiss, nmissm,
     *        nnphsp, NofREPEAT, tcpuold+timcpu, esrc, planarefe, planar
     *        efp, planarfe, planarfp, nestep, nsrjct,nsoutside,ndbsrjct
     *        ,nhist,nsblocked
              write(iorstrt,*) urndm,crndm,cdrndm, cmrndm, ixx, jxx, rng
     *        _seed, rng_array
          END IF
2991  CONTINUE
2992  CONTINUE
#ifdef HAVE_C_COMPILER
      IF (( n_parallel .GT. 0 )) THEN
          goto 2980
      END IF
#endif
      IF((IDAT.EQ.0 .OR. IDAT.EQ.2))close(iorstrt)
      IF ((IWATCH.EQ.4)) THEN
          close(ioutgph)
          close(ioutgeom)
      END IF
      IF ((i_phsp_out.GT.0)) THEN
          call iaea_destroy_source(i_unit_out,iaea_result)
          IF ((iaea_result.LT.0)) THEN
              WRITE(i_log,*)' Error closing IAEA phase space ID ',i_unit
     *        _out
          END IF
      END IF
2820  CONTINUE
      IF ((IRESTART .NE. 3)) THEN
          WRITE(6,3110)timcpu,timcpu/3600.,dble(IHSTRY)/(timcpu/3600.)
          WRITE(1,3110)timcpu,timcpu/3600.,dble(IHSTRY)/(timcpu/3600.)
3110      FORMAT(/' Total CPU time for run =',f8.1,' s =',f8.3,' hr =>',
     *F12.0,' hist/hr'/T3,' On  ','linux',' ')
      END IF
      IF ((IRESTART .EQ. 1)) THEN
          WRITE(6,3120)timcpu+tcpuold,(timcpu+tcpuold)/3600.,dble(IHSTRY
     *    +ncaseold) /((timcpu+tcpuold)/3600.)
          WRITE(1,3120)timcpu+tcpuold,(timcpu+tcpuold)/3600.,dble(IHSTRY
     *    +ncaseold) /((timcpu+tcpuold)/3600.)
3120      FORMAT(/' CPU time for this+previous run =',f8.1,' s =',f8.3,'
     * hr =>', F12.0,' hist/hr'/T3,' On  ','linux',' ')
      ELSE IF((IRESTART .EQ. 3)) THEN
          WRITE(6,3130)timcpu+tcpuold,(timcpu+tcpuold)/3600.,float(ncase
     *    old) /((timcpu+tcpuold)/3600.)
          WRITE(1,3130)timcpu+tcpuold,(timcpu+tcpuold)/3600.,float(ncase
     *    old) /((timcpu+tcpuold)/3600.)
3130      FORMAT(/' Total CPU time for old run =',f8.1,' s =',f8.3,' hr=
     *>', F12.0,' hist/hr'/T3,' On  ','linux',' ')
      END IF
      IF ((isource .EQ. 2 .OR. isource .EQ. 8 )) THEN
          WRITE(6,3140)nnread,nhist,nsrjct,nsoutside,ndbsrjct,nsmiss, fl
     *    oat((NRCYCL+1)*(nnread-nsrjct-nsoutside-ndbsrjct)-nsmiss)/floa
     *    t(nnread), NRCYCL,IHSTRY+ncaseold,OUTCNT
          WRITE(1,3140)nnread,nhist,nsrjct,nsoutside,ndbsrjct,nsmiss, fl
     *    oat((NRCYCL+1)*(nnread-nsrjct-nsoutside-ndbsrjct)-nsmiss)/floa
     *    t(nnread), NRCYCL,IHSTRY+ncaseold,OUTCNT
3140      FORMAT(/'  ***************************************************
     ******************'/ /' # of particles read from ph-sp file (N_read
     *)                   =',i12/ ' # of primary (non ph-sp) histories r
     *ead from ph-sp file        =',i12/ ' # of particles discarded duet
     *o charge/LATCH/W/multiple passer =',i12/ ' # of particles discarde
     *d because beyond BEAM_SIZE              =',i12/ ' # of photons rej
     *ected because beyond DBS splitting radius      =',i12/ ' # of part
     *icles that missed geometry                            =',i12/ '   
     *                         N_used/N_read                     =',f12.
     *3/ ' # of times each particle in ph-sp file recycled          '/ '
     *         (last particle may be recycled less than this)         ='
     *,i12/ ' # of ph-sp particles simulated (N_used)                   
     *=',i12/ ' # of times ph-sp file restarted in this run             
     *       =',i12/ /'  ***********************************************
     **********************')
      ELSE IF((isource.EQ.9 .OR. isource .EQ.10)) THEN
          WRITE(6,3150)nnread,nhist,nsrjct,nsoutside,ndbsrjct,nsmiss,IHS
     *    TRY+ncaseold, dble(IHSTRY+ncaseold)/float(nnread)
          WRITE(1,3150)nnread,nhist,nsrjct,nsoutside,ndbsrjct,nsmiss,IHS
     *    TRY+ncaseold, dble(IHSTRY+ncaseold)/float(nnread)
3150      FORMAT(/'  ***************************************************
     ******************'// ' # of particles read from BEAM simulation (N
     *_read)              =',i12/ ' # of primary particles incident in B
     *EAM simulation             =',i12/ ' # of particles discarded duet
     *o charge/LATCH/W/multiple passer =',i12/ ' # of particles discarde
     *d because beyond BEAM_SIZE              =',i12/ ' # of photons rej
     *ected because beyond DBS splitting radius      =',i12/ ' # of part
     *icles that missed geometry                            =',i12/ ' # 
     *of particles simulated in DOSXYZnrc (N_used)                 =',i1
     *2/ '                        N_used/N_read       =',f12.3/ /'  ****
     *****************************************************************')
      ELSE IF((isource.EQ.20)) THEN
          WRITE(6,3160)NCASE,survival_ratio,compensated_NCASE,nnread,nsr
     *    jct,nsoutside, ndbsrjct, nsmiss, nsblocked,IHSTRY+ncaseold, db
     *    le(IHSTRY+ncaseold)/(float(nnread)*(NRCYCL+1)),OUTCNT
          WRITE(1,3160)NCASE,survival_ratio,compensated_NCASE,nnread,nsr
     *    jct,nsoutside, ndbsrjct, nsmiss, nsblocked,IHSTRY+ncaseold, db
     *    le(IHSTRY+ncaseold)/(float(nnread)*(NRCYCL+1)),OUTCNT
3160      FORMAT(/'  ***************************************************
     ******************'// ' # of particles originally requested (NCASE)
     *                    =',i12/ '   predicted survival ratio (based on
     * shared library blockage)  =',f12.3/ ' # calculated number to read
     * from phsp (NCASE/survival_ratio)   =',i12/ ' # of primary particl
     *es incident in the simulation (nnread)     =',i12/ ' # of particle
     *s discarded due to charge/LATCH/W/multiple passer =',i12/ ' # of p
     *articles discarded because beyond BEAM_SIZE              =',i12/ '
     * # of photons rejected because beyond DBS splitting radius      ='
     *,i12/ ' # of particles that missed geometry         =',i12/ ' # of
     * particles that got blocked by shared library modules      =',i12/
     * ' # of particles used in DOSXYZnrc (N_used)                      
     *=',i12/ '                N_used/(nnread x N_recycle)              
     *       =',f12.3/ ' # of times ph-sp file restarted in this run    
     *                =',i12/ /'  **************************************
     *******************************')
      ELSE IF((isource.EQ.21)) THEN
          WRITE(6,3170)nnread,nhist,nsrjct,nsoutside,ndbsrjct,nsmiss,nsb
     *    locked, IHSTRY+ncaseold,dble(IHSTRY+ncaseold)/float(nnread)
          WRITE(1,3170)nnread,nhist,nsrjct,nsoutside,ndbsrjct,nsmiss,nsb
     *    locked, IHSTRY+ncaseold,dble(IHSTRY+ncaseold)/float(nnread)
3170      FORMAT(/'  ***************************************************
     ******************'// ' # of particles read from BEAM simulation (N
     *_read)              =',i12/ ' # of primary particles incident in B
     *EAM simulation             =',i12/ ' # of particles discarded duet
     *o charge/LATCH/W/multiple passer =',i12/ ' # of particles discarde
     *d because beyond BEAM_SIZE              =',i12/ ' # of photons rej
     *ected because beyond DBS splitting radius      =',i12/ ' # of part
     *icles that missed geometry                            =',i12/ ' # 
     *of particles that got blocked by shared library modules      =',i1
     *2/ ' # of particles simulated in DOSXYZnrc (N_used)       =',i12/ 
     *'                        N_used/N_read              =',f12.3/ /'  
     *******************************************************************
     ***')
      ELSE IF((isource .EQ. 1)) THEN
          WRITE(6,3180)nmissm
          WRITE(1,3180)nmissm
3180      FORMAT(/'  ***************************************************
     ******************'/ /'  # of particles which missed the phantom wi
     *th source 1       =',i12/ /'  ************************************
     *********************************')
      ELSE IF((isource .EQ.4 )) THEN
      END IF
      etot=0.
      DO 3191 irl=1,irmax-1
          etot=etot+endep(irl)
3191  CONTINUE
3192  CONTINUE
      IF ((enflag .EQ. 0)) THEN
          WRITE(6,3200)etot/(dble(IHSTRY+ncaseold)*ein)
          WRITE(1,3200)etot/(dble(IHSTRY+ncaseold)*ein)
3200      FORMAT(/' Fraction of incident energy deposited in the phantom
     * =',f12.4/)
      ELSE IF(((enflag.EQ.1).OR.(enflag.EQ.2).OR.(enflag.EQ.3).OR.(enfla
     *g.EQ.4))) THEN
          WRITE(6,3210)etot/esrc
          WRITE(1,3210)etot/esrc
3210      FORMAT(/' Fraction of incident energy deposited in the phantom
     * =',f12.4/)
          IF (((enflag .GT. 1))) THEN
              WRITE(6,3220)endep(irl)/esrc
              WRITE(1,3220)endep(irl)/esrc
3220          FORMAT(/' Fraction of incident energy deposited in the reg
     *ion surrounding'/ ' the phantom when incident particles go through
     * it   =',f12.4/)
          END IF
      END IF
      IF ((isource .EQ. 0 .OR. isource .EQ. 1 .OR. isource .EQ. 3 .OR. i
     *source .EQ. 7)) THEN
          temp2=dble(IHSTRY+ncaseold+nsmiss+nmissm)
          IF ((beamarea .EQ. 0)) THEN
              ainflu=dble(IHSTRY+ncaseold+nsmiss+nmissm)
          ELSE
              ainflu=dble(IHSTRY+ncaseold+nsmiss+nmissm)/beamarea
          END IF
      ELSE IF((isource .EQ. 2 .OR. isource .EQ. 8 )) THEN
          ainflu=dble(IHSTRY+ncaseold+nsmiss+ (NRCYCL+1)*(nsrjct+nsoutsi
     *    de+ndbsrjct))/float(nshist)*NINCSRC
          temp2=ainflu
      ELSE IF((isource.EQ.4)) THEN
          ainflu=dble(IHSTRY+ncaseold-nsmiss)
          temp2=ainflu
      ELSE IF((isource.EQ.6)) THEN
          ainflu=dble(IHSTRY+ncaseold)
          temp2=ainflu
      ELSE IF((isource.EQ.9.OR.isource.EQ.10.OR.isource.EQ.21)) THEN
          ainflu=dble(nhist)
          temp2=ainflu
      ELSE IF((isource.EQ.20)) THEN
          ainflu = dble((NRCYCL+1)*(nnread))/dble(nshist)*NINCSRC
          temp2=ainflu
      END IF
      WRITE(6,3230)nestep,dble(nestep)/ainflu,count_pII_steps/dble(neste
     *p)
      WRITE(1,3230)nestep,dble(nestep)/ainflu,count_pII_steps/dble(neste
     *p)
3230  FORMAT(/' Number of charged particle steps simulated,   N_step   =
     *',I15/ ' Number of charged particle steps/incident fluence      ='
     *,1PE15.5/ ' No. of PRESTA-II steps/total no. of charged particle s
     *teps =',0PF15.5/)
      IF ((dose_stat.EQ.1)) THEN
          WRITE(6,3240)
          WRITE(1,3240)
3240      FORMAT(//' ***WARNING***'/ ' Could not read no. of primary (no
     *n-phsp) histories from ph-sp file.'/ ' Dose analyzed assuming each
     * particle read from the ph-sp'/ ' file is an independent history. 
     *May result in an underestimate'/ ' of the uncertainty.'//)
      ELSE IF((OUTCNT.GT.0)) THEN
          WRITE(6,3250)
          WRITE(1,3250)
3250      FORMAT(//' ***WARNING***'/ ' The ph-sp source was restarted at
     * least once.  This may lead'/ ' to an underestimate of uncertainty
     *, especially if restarted'/ ' many times.  If restarted many times
     *, try re-running with'/ ' NRCYCL recalculated as described at topo
     *f dosxyznrc.mortran'//)
      END IF
      DO 3261 irl=1,irmax-1
          IF ((IDAT.EQ.1)) THEN
              endep(irl)=endep(irl)+endep_tmp(irl)
              endep2(irl)=endep2(irl)+endep_tmp(irl)*endep_tmp(irl)
          END IF
          endep(irl)=endep(irl)/rhor(irl+1)
          endep2(irl)=endep2(irl)/(rhor(irl+1)*rhor(irl+1))
3261  CONTINUE
3262  CONTINUE
#ifdef HAVE_C_COMPILER
      IF ((IPARALLEL.GT.1 .OR. n_parallel.GT.0)) THEN
          parname=egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(use
     *    r_code)) // '/' // work_dir(:lnblnk1(work_dir)) // output_file
     *    (:lnblnk1(output_file))
          IF ((n_parallel.GT.0)) THEN
              parname=parname(:lnblnk1(parname))//'_w'
              call egs_itostring(parname,i_parallel,.false.)
          END IF
          parname=parname(:lnblnk1(parname))//'.pardose'
          parname(lnblnk1(parname)+1:lnblnk1(parname)+1)=char(0)
          call write_pardose(temp2,IMAX,JMAX,KMAX,endep,endep2,parname)
      END IF
#endif
2830  CONTINUE
      DO 3271 i=1,IMAX
          DO 3281 j=1,JMAX
              DO 3291 k=1,KMAX
                  irl= (i + (j-1)*IMAX + (k-1)*ijmax)
                  temp=endep(irl)/temp2
                  endep2(irl)=endep2(irl)/temp2
                  endep2(irl)=(endep2(irl)-temp*temp)/(temp2-1)
                  IF((endep2(irl).GT.0))endep2(irl)=sqrt(endep2(irl))
                  IF((endep(irl).NE.0))endep2(irl)=endep2(irl)/(endep(ir
     *            l)/temp2)
                  amass= (xbound(i+1)-xbound(i))* (ybound(j+1)-ybound(j)
     *            )* (zbound(k+1)-zbound(k))
                  IF ((amass.NE.0.0)) THEN
                      endep(irl) = endep(irl)*1.602e-10/(amass*ainflu)
                  ELSE
                      endep(irl) = 0.0
                      WRITE(6,3300)i,j,k
                      WRITE(1,3300)i,j,k
3300                  FORMAT('AMASS is zero in  I= ',I4,'J= ',I4,' K= ',
     *I4)
                      WRITE(6,3310)
                      WRITE(1,3310)
3310                  FORMAT('So the dose has been set to zero.')
                  END IF
                  IF((endep(irl).EQ.0.))endep2(irl)=0.9999999
3291          CONTINUE
3292          CONTINUE
3281      CONTINUE
3282      CONTINUE
3271  CONTINUE
3272  CONTINUE
      IF ((doseprint .NE. 1)) THEN
          IF (((n_parallel.GT.0 .AND. is_finished).OR.IRESTART.EQ.4 )) T
     *    HEN
              write(1,3320)title
3320          format(//,'1',80a1 // t10, 'DOSXYZnrc Dose outputs (dose/F
     *, Gy.cm**2)')
          ELSE
              IF ((((isource.EQ.0).OR.( isource.EQ.1).OR.( isource.EQ.3)
     *        .OR. (isource.EQ.7)).AND. (beamarea .NE. 0.))) THEN
                  write(1,3330)title,planarefe,planarefp,planarfe,planar
     *            fp,ainflu
3330              format( '1',80a1 // t5,'Elec/positron planar energy fl
     *uence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the p
     *hantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar energy f
     *luence scored in a 1cm**2 circle '/ t5,'centered at z-axis on thep
     *hantom surface =',1pe11.3,'(1/cm**2)'// t5,'Elec/positron planarfl
     *uence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the p
     *hantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar fluence 
     *scored in a 1cm**2 circle '/ t5,'centered at z-axis on the phantom
     * surface =',1pe11.3,'(1/cm**2)'// t5,'Average planar fluence (numb
     *er/beam area), F =', 1pe11.3,'(1/cm**2)'// t10, 'DOSXYZnrc Doseout
     *puts (dose/F, Gy.cm**2)')
              ELSE IF((isource.EQ.2.OR.isource.EQ.8)) THEN
                  write(1,3340)title,planarefe,planarefp,planarfe,planar
     *            fp, IHSTRY+ncaseold
3340              format( '1',80a1 / t5,'Elec/positron planar energy flu
     *ence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the ph
     *antom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar energy fl
     *uence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the p
     *hantom surface =',1pe11.3,'(1/cm**2)'// t5,'Elec/positron planar f
     *luence scored in a 1cm**2 circle '/ t5,'centered at z-axis on thep
     *hantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar fluence 
     *scored in a 1cm**2 circle '/ t5,'centered at z-axis on the phantom
     * surface =',1pe11.3,'(1/cm**2)'// t5,'No. of particles incident fr
     *om phase space file =',1i13/)
                  IF ((OLDSRC.EQ.1)) THEN
                      write(1,3350)
3350                  format(t10,'           DOSXYZnrc Dose outputs '/ t
     *10,'(Dose/incident particle from phase space file, Gy)')
                  ELSE
                      write(1,3360)ainflu
3360                  format(t5,'No. of particles incident from original
     * source  =',1f13.1// t10,'           DOSXYZnrc Dose outputs '/ t10
     *,'(Dose/incident particle from original source, Gy)')
                  END IF
              ELSE IF((((isource.EQ.4).OR.(isource.EQ.5)).OR. (((isource
     *        .EQ.0).OR.( isource.EQ.1).OR.( isource.EQ.3).OR. (isource.
     *        EQ.7)).AND.(beamarea.EQ.0.)))) THEN
                  write(1,3370)title,planarefe,planarefp,planarfe,planar
     *            fp,ainflu
3370              format( '1',80a1 / t5,'Elec/positron planar energy flu
     *ence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the ph
     *antom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar energy fl
     *uence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the p
     *hantom surface =',1pe11.3,'(1/cm**2)'// t5,'Elec/positron planar f
     *luence scored in a 1cm**2 circle '/ t5,'centered at z-axis on thep
     *hantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar fluence 
     *scored in a 1cm**2 circle '/ t5,'centered at z-axis on the phantom
     * surface =',1pe11.3,'(1/cm**2)'// t5,'Total number of incident par
     *ticles =',1pe11.3// t10,'DOSXYZnrc', ' Dose outputs (Dose/incident
     * particle, Gy)')
              ELSE IF((isource.EQ.6)) THEN
                  write(1,3380)title,ainflu
3380              format( '1',80a1 / t5,'Total number of incident partic
     *les =',1pe11.3// t10,'DOSXYZnrc', ' Dose outputs (Dose/incident pa
     *rticle, Gy)')
              ELSE IF(((isource.EQ.9).OR.(isource.EQ.21))) THEN
                  write(1,3390)title,planarefe,planarefp,planarfe,planar
     *            fp, IHSTRY+ncaseold,nhist
3390              format( '1',80a1 / t5,'Elec/positron planar energy flu
     *ence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the ph
     *antom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar energy fl
     *uence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the p
     *hantom surface =',1pe11.3,'(1/cm**2)'// t5,'Elec/positron planar f
     *luence scored in a 1cm**2 circle '/ t5,'centered at z-axis on thep
     *hantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar fluence 
     *scored in a 1cm**2 circle '/ t5,'centered at z-axis on the phantom
     * surface =',1pe11.3,'(1/cm**2)'// t5,'         No. of particles in
     *cident on DOSXYZ phantom =',1i13// t5,'No. of primary particles in
     *cident in BEAM simulation =',1i13// t10,'           DOSXYZnrc Dose
     * outputs '/ t10,'(Dose/incident particle from original source, Gy)
     *')
              ELSE IF((isource.EQ.20)) THEN
                  write(1,3400)title,planarefe,planarefp,planarfe,planar
     *            fp, IHSTRY+ncaseold,nhist
3400              format( '1',80a1 / t5,'Elec/positron planar energy flu
     *ence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the ph
     *antom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar energy fl
     *uence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the p
     *hantom surface =',1pe11.3,'(1/cm**2)'// t5,'Elec/positron planar f
     *luence scored in a 1cm**2 circle '/ t5,'centered at z-axis on thep
     *hantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar fluence 
     *scored in a 1cm**2 circle '/ t5,'centered at z-axis on the phantom
     * surface =',1pe11.3,'(1/cm**2)'// t5,'         No. of particles in
     *cident on DOSXYZ phantom =',1i13// t5,'No. of primary particles in
     *cident in VCU/BEAM simulation =',1i13// t10,'           DOSXYZnrc 
     *Dose outputs '/ t10,'(Dose/incident particle from original source,
     * Gy)')
              ELSE
                  write(1,3410)title,planarefe,planarefp,planarfe,planar
     *            fp,ainflu
3410              format( '1',80a1 / t5,'Elec/positron planar energy flu
     *ence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the ph
     *antom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar energy fl
     *uence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the p
     *hantom surface =',1pe11.3,'(1/cm**2)'// t5,'Elec/positron planar f
     *luence scored in a 1cm**2 circle '/ t5,'centered at z-axis on thep
     *hantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar fluence 
     *scored in a 1cm**2 circle '/ t5,'centered at z-axis on the phantom
     * surface =',1pe11.3,'(1/cm**2)'// t5,'on the phantom surface =',1p
     *e11.3,'(1/cm**2)'// t10,'DOSXYZnrc Dose outputs', ' Gy.cm**2 (or G
     *y/incident particle)')
              END IF
          END IF
          write(1,3420)
3420      format(/t5,'full dose output suppressed in this run')
      ELSE
          DO 3431 idose=1,idgrp
              IF ((IZSCAN(idose) .EQ. 1)) THEN
                  k = (kdosu(idose) - kdosl(idose))
                  k = k + k/5 + 7
                  nperpg = 60/k
                  IF ((nperpg .EQ. 0)) THEN
                      WRITE(6,3440)nperpg
3440                  FORMAT(' Sets of depths per page = ',I2)
                      nperpg = 1
                      WRITE(6,3450)nperpg
3450                  FORMAT(' Set to  = ',I2)
                  END IF
                  IF (((n_parallel.GT.0 .AND. is_finished).OR.IRESTART.E
     *            Q.4 )) THEN
                      write(1,3460)title
3460                  format(//,'1',80a1 // t10, 'DOSXYZnrc Dose outputs
     * (dose/F, Gy.cm**2)')
                  ELSE
                      IF ((((isource.EQ.0).OR.( isource.EQ.1).OR.( isour
     *                ce.EQ.3).OR. (isource.EQ.7)).AND. (beamarea .NE. 0
     *                .))) THEN
                          write(1,3470)title,planarefe,planarefp,planarf
     *                    e,planarfp,ainflu
3470                      format( '1',80a1 // t5,'Elec/positron planar e
     *nergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axiso
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planaren
     *ergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Elec/positron p
     *lanar fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis 
     *on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar 
     *fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the
     * phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Average planar fluen
     *ce (number/beam area), F =', 1pe11.3,'(1/cm**2)'// t10, 'DOSXYZnrc
     * Dose outputs (dose/F, Gy.cm**2)')
                      ELSE IF((isource.EQ.2.OR.isource.EQ.8)) THEN
                          write(1,3480)title,planarefe,planarefp,planarf
     *                    e,planarfp, IHSTRY+ncaseold
3480                      format( '1',80a1 / t5,'Elec/positron planar en
     *ergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar e
     *nergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axiso
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Elec/positronpl
     *anar fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar f
     *luence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the 
     *phantom surface =',1pe11.3,'(1/cm**2)'// t5,'No. of particles inci
     *dent from phase space file =',1i13/)
                          IF ((OLDSRC.EQ.1)) THEN
                              write(1,3490)
3490                          format(t10,'           DOSXYZnrc Dose outp
     *uts '/ t10,'(Dose/incident particle from phase space file, Gy)')
                          ELSE
                              write(1,3500)ainflu
3500                          format(t5,'No. of particles incident fromo
     *riginal source  =',1f13.1// t10,'           DOSXYZnrc Dose outputs
     * '/ t10,'(Dose/incident particle from original source, Gy)')
                          END IF
                      ELSE IF((((isource.EQ.4).OR.(isource.EQ.5)).OR. ((
     *                (isource.EQ.0).OR.( isource.EQ.1).OR.( isource.EQ.
     *                3).OR. (isource.EQ.7)).AND.(beamarea.EQ.0.)))) THE
     *                N
                          write(1,3510)title,planarefe,planarefp,planarf
     *                    e,planarfp,ainflu
3510                      format( '1',80a1 / t5,'Elec/positron planar en
     *ergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar e
     *nergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axiso
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Elec/positronpl
     *anar fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar f
     *luence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the 
     *phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Total number of incid
     *ent particles =',1pe11.3// t10,'DOSXYZnrc', ' Dose outputs (Dose/i
     *ncident particle, Gy)')
                      ELSE IF((isource.EQ.6)) THEN
                          write(1,3520)title,ainflu
3520                      format( '1',80a1 / t5,'Total number of inciden
     *t particles =',1pe11.3// t10,'DOSXYZnrc', ' Dose outputs (Dose/inc
     *ident particle, Gy)')
                      ELSE IF(((isource.EQ.9).OR.(isource.EQ.21))) THEN
                          write(1,3530)title,planarefe,planarefp,planarf
     *                    e,planarfp, IHSTRY+ncaseold,nhist
3530                      format( '1',80a1 / t5,'Elec/positron planar en
     *ergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar e
     *nergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axiso
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Elec/positronpl
     *anar fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar f
     *luence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the 
     *phantom surface =',1pe11.3,'(1/cm**2)'// t5,'         No. of parti
     *cles incident on DOSXYZ phantom =',1i13// t5,'No. of primary parti
     *cles incident in BEAM simulation =',1i13// t10,'           DOSXYZn
     *rc Dose outputs '/ t10,'(Dose/incident particle from original sour
     *ce, Gy)')
                      ELSE IF((isource.EQ.20)) THEN
                          write(1,3540)title,planarefe,planarefp,planarf
     *                    e,planarfp, IHSTRY+ncaseold,nhist
3540                      format( '1',80a1 / t5,'Elec/positron planar en
     *ergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar e
     *nergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axiso
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Elec/positronpl
     *anar fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar f
     *luence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the 
     *phantom surface =',1pe11.3,'(1/cm**2)'// t5,'         No. of parti
     *cles incident on DOSXYZ phantom =',1i13// t5,'No. of primary parti
     *cles incident in VCU/BEAM simulation =',1i13// t10,'           DOS
     *XYZnrc Dose outputs '/ t10,'(Dose/incident particle from original 
     *source, Gy)')
                      ELSE
                          write(1,3550)title,planarefe,planarefp,planarf
     *                    e,planarfp,ainflu
3550                      format( '1',80a1 / t5,'Elec/positron planar en
     *ergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar e
     *nergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axiso
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Elec/positronpl
     *anar fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar f
     *luence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the 
     *phantom surface =',1pe11.3,'(1/cm**2)'// t5,'on the phantom surfac
     *e =',1pe11.3,'(1/cm**2)'// t10,'DOSXYZnrc Dose outputs', '   Gy.cm
     ***2 (or Gy/incident particle)')
                      END IF
                  END IF
                  ipage=1
                  DO 3561 i=idosl(idose),idosu(idose)
                      DO 3571 j=jdosl(idose),jdosu(idose),4
                          JL=j
                          JU=min(j+3,jdosu(idose))
                          write(1,3580)xbound(i),xbound(i+1),i
3580                      format(//t15,'for x=',f10.3,' to',f10.3,5x,'i=
     *',i3)
                          write(1,3590)(ybound(jj),jj=JL,JU+1)
3590                      format(/' ybounds:',f7.3,f12.3,3f17.3)
                          write(1,3600)(jj,jj=JL ,JU)
3600                      format(t10,'j=',t17,5(i4,13x))
                          write(1,3610)zbound(kdosl(idose))
3610                      format(' zbounds (',f10.3,')')
                          DO 3621 k=kdosl(idose),kdosu(idose)
                              write(1,3630)zbound(k+1),k, (endep((i + (j
     *                        j-1)*IMAX + (k-1)*ijmax)),min(99.9d0, 100d
     *                        0*endep2((i + (jj-1)*IMAX + (k-1)*ijmax)))
     *                        ,jj=JL,JU)
3630                          format(f8.3,i4,4(1pe11.3,'-',0pf4.1,'%') )
                              IF ((mod(k,5) .EQ. 0)) THEN
                                  write(1,3640)
3640                              format(' ')
                              END IF
3621                      CONTINUE
3622                      CONTINUE
                          IF (( ( mod(ipage,nperpg) .EQ. 0) .AND. ( ( JU
     *                     .NE. jdosu(idose) ) .OR. ( i .NE. idosu(idose
     *                    ) )))) THEN
                              IF (((n_parallel.GT.0 .AND. is_finished).O
     *                        R.IRESTART.EQ.4 )) THEN
                                  write(1,3650)title
3650                              format(//,'1',80a1 // t10, 'DOSXYZnrcD
     *ose outputs (dose/F, Gy.cm**2)')
                              ELSE
                                  IF ((((isource.EQ.0).OR.( isource.EQ.1
     *                            ).OR.( isource.EQ.3).OR. (isource.EQ.7
     *                            )).AND. (beamarea .NE. 0.))) THEN
                                      write(1,3660)title,planarefe,plana
     *                                refp,planarfe,planarfp,ainflu
3660                                  format( '1',80a1 // t5,'Elec/posit
     *ron planar energy fluence scored in a 1cm**2 circle '/ t5,'centere
     *d at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Ph
     *oton planar energy fluence scored in a 1cm**2 circle '/ t5,'center
     *ed at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'E
     *lec/positron planar fluence scored in a 1cm**2 circle '/ t5,'cente
     *red at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'
     *Photon planar fluence scored in a 1cm**2 circle '/ t5,'centered at
     * z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Averag
     *e planar fluence (number/beam area), F =', 1pe11.3,'(1/cm**2)'// t
     *10, 'DOSXYZnrc Dose outputs (dose/F, Gy.cm**2)')
                                  ELSE IF((isource.EQ.2.OR.isource.EQ.8)
     *                            ) THEN
                                      write(1,3670)title,planarefe,plana
     *                                refp,planarfe,planarfp, IHSTRY+nca
     *                                seold
3670                                  format( '1',80a1 / t5,'Elec/positr
     *on planar energy fluence scored in a 1cm**2 circle '/ t5,'centered
     * at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Pho
     *ton planar energy fluence scored in a 1cm**2 circle '/ t5,'centere
     *d at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'El
     *ec/positron planar fluence scored in a 1cm**2 circle '/ t5,'center
     *ed at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'P
     *hoton planar fluence scored in a 1cm**2 circle '/ t5,'centered atz
     *-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'No. ofpa
     *rticles incident from phase space file =',1i13/)
                                      IF ((OLDSRC.EQ.1)) THEN
                                          write(1,3680)
3680                                      format(t10,'           DOSXYZn
     *rc Dose outputs '/ t10,'(Dose/incident particle from phase space f
     *ile, Gy)')
                                      ELSE
                                          write(1,3690)ainflu
3690                                      format(t5,'No. of particles in
     *cident from original source  =',1f13.1// t10,'           DOSXYZnrc
     * Dose outputs '/ t10,'(Dose/incident particle from original source
     *, Gy)')
                                      END IF
                                  ELSE IF((((isource.EQ.4).OR.(isource.E
     *                            Q.5)).OR. (((isource.EQ.0).OR.( isourc
     *                            e.EQ.1).OR.( isource.EQ.3).OR. (isourc
     *                            e.EQ.7)).AND.(beamarea.EQ.0.)))) THEN
                                      write(1,3700)title,planarefe,plana
     *                                refp,planarfe,planarfp,ainflu
3700                                  format( '1',80a1 / t5,'Elec/positr
     *on planar energy fluence scored in a 1cm**2 circle '/ t5,'centered
     * at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Pho
     *ton planar energy fluence scored in a 1cm**2 circle '/ t5,'centere
     *d at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'El
     *ec/positron planar fluence scored in a 1cm**2 circle '/ t5,'center
     *ed at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'P
     *hoton planar fluence scored in a 1cm**2 circle '/ t5,'centered atz
     *-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Total nu
     *mber of incident particles =',1pe11.3// t10,'DOSXYZnrc', ' Dose ou
     *tputs (Dose/incident particle, Gy)')
                                  ELSE IF((isource.EQ.6)) THEN
                                      write(1,3710)title,ainflu
3710                                  format( '1',80a1 / t5,'Total numbe
     *r of incident particles =',1pe11.3// t10,'DOSXYZnrc', ' Dose outpu
     *ts (Dose/incident particle, Gy)')
                                  ELSE IF(((isource.EQ.9).OR.(isource.EQ
     *                            .21))) THEN
                                      write(1,3720)title,planarefe,plana
     *                                refp,planarfe,planarfp, IHSTRY+nca
     *                                seold,nhist
3720                                  format( '1',80a1 / t5,'Elec/positr
     *on planar energy fluence scored in a 1cm**2 circle '/ t5,'centered
     * at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Pho
     *ton planar energy fluence scored in a 1cm**2 circle '/ t5,'centere
     *d at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'El
     *ec/positron planar fluence scored in a 1cm**2 circle '/ t5,'center
     *ed at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'P
     *hoton planar fluence scored in a 1cm**2 circle '/ t5,'centered atz
     *-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'  No. of
     * particles incident on DOSXYZ phantom =',1i13// t5,'No. of primary
     * particles incident in BEAM simulation =',1i13// t10,'       DOSXY
     *Znrc Dose outputs '/ t10,'(Dose/incident particle from original so
     *urce, Gy)')
                                  ELSE IF((isource.EQ.20)) THEN
                                      write(1,3730)title,planarefe,plana
     *                                refp,planarfe,planarfp, IHSTRY+nca
     *                                seold,nhist
3730                                  format( '1',80a1 / t5,'Elec/positr
     *on planar energy fluence scored in a 1cm**2 circle '/ t5,'centered
     * at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Pho
     *ton planar energy fluence scored in a 1cm**2 circle '/ t5,'centere
     *d at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'El
     *ec/positron planar fluence scored in a 1cm**2 circle '/ t5,'center
     *ed at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'P
     *hoton planar fluence scored in a 1cm**2 circle '/ t5,'centered atz
     *-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'  No. of
     * particles incident on DOSXYZ phantom =',1i13// t5,'No. of primary
     * particles incident in VCU/BEAM simulation =',1i13// t10,'        
     *   DOSXYZnrc Dose outputs '/ t10,'(Dose/incident particlefrom orig
     *inal source, Gy)')
                                  ELSE
                                      write(1,3740)title,planarefe,plana
     *                                refp,planarfe,planarfp,ainflu
3740                                  format( '1',80a1 / t5,'Elec/positr
     *on planar energy fluence scored in a 1cm**2 circle '/ t5,'centered
     * at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Pho
     *ton planar energy fluence scored in a 1cm**2 circle '/ t5,'centere
     *d at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'El
     *ec/positron planar fluence scored in a 1cm**2 circle '/ t5,'center
     *ed at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'P
     *hoton planar fluence scored in a 1cm**2 circle '/ t5,'centered atz
     *-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'on theph
     *antom surface =',1pe11.3,'(1/cm**2)'// t10,'DOSXYZnrc Dose outputs
     *', '   Gy.cm**2 (or Gy/incident particle)')
                                  END IF
                              END IF
                              ipage=1
                          ELSE
                              ipage = ipage+1
                          END IF
3571                  CONTINUE
3572                  CONTINUE
3561              CONTINUE
3562              CONTINUE
              ELSE IF((IZSCAN(idose) .EQ. 0)) THEN
                  i = (idosu(idose) - idosl(idose))
                  i = i + i/5 + 7
                  nperpg = 60/i
                  IF ((nperpg .EQ. 0)) THEN
                      WRITE(6,3750)nperpg
3750                  FORMAT(' Sets of X scans per page = ',I2)
                      nperpg = 1
                      WRITE(6,3760)nperpg
3760                  FORMAT(' Set to  = ',I2)
                  END IF
                  IF (((n_parallel.GT.0 .AND. is_finished).OR.IRESTART.E
     *            Q.4 )) THEN
                      write(1,3770)title
3770                  format(//,'1',80a1 // t10, 'DOSXYZnrc Dose outputs
     * (dose/F, Gy.cm**2)')
                  ELSE
                      IF ((((isource.EQ.0).OR.( isource.EQ.1).OR.( isour
     *                ce.EQ.3).OR. (isource.EQ.7)).AND. (beamarea .NE. 0
     *                .))) THEN
                          write(1,3780)title,planarefe,planarefp,planarf
     *                    e,planarfp,ainflu
3780                      format( '1',80a1 // t5,'Elec/positron planar e
     *nergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axiso
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planaren
     *ergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Elec/positron p
     *lanar fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis 
     *on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar 
     *fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the
     * phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Average planar fluen
     *ce (number/beam area), F =', 1pe11.3,'(1/cm**2)'// t10, 'DOSXYZnrc
     * Dose outputs (dose/F, Gy.cm**2)')
                      ELSE IF((isource.EQ.2.OR.isource.EQ.8)) THEN
                          write(1,3790)title,planarefe,planarefp,planarf
     *                    e,planarfp, IHSTRY+ncaseold
3790                      format( '1',80a1 / t5,'Elec/positron planar en
     *ergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar e
     *nergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axiso
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Elec/positronpl
     *anar fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar f
     *luence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the 
     *phantom surface =',1pe11.3,'(1/cm**2)'// t5,'No. of particles inci
     *dent from phase space file =',1i13/)
                          IF ((OLDSRC.EQ.1)) THEN
                              write(1,3800)
3800                          format(t10,'           DOSXYZnrc Dose outp
     *uts '/ t10,'(Dose/incident particle from phase space file, Gy)')
                          ELSE
                              write(1,3810)ainflu
3810                          format(t5,'No. of particles incident fromo
     *riginal source  =',1f13.1// t10,'           DOSXYZnrc Dose outputs
     * '/ t10,'(Dose/incident particle from original source, Gy)')
                          END IF
                      ELSE IF((((isource.EQ.4).OR.(isource.EQ.5)).OR. ((
     *                (isource.EQ.0).OR.( isource.EQ.1).OR.( isource.EQ.
     *                3).OR. (isource.EQ.7)).AND.(beamarea.EQ.0.)))) THE
     *                N
                          write(1,3820)title,planarefe,planarefp,planarf
     *                    e,planarfp,ainflu
3820                      format( '1',80a1 / t5,'Elec/positron planar en
     *ergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar e
     *nergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axiso
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Elec/positronpl
     *anar fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar f
     *luence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the 
     *phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Total number of incid
     *ent particles =',1pe11.3// t10,'DOSXYZnrc', ' Dose outputs (Dose/i
     *ncident particle, Gy)')
                      ELSE IF((isource.EQ.6)) THEN
                          write(1,3830)title,ainflu
3830                      format( '1',80a1 / t5,'Total number of inciden
     *t particles =',1pe11.3// t10,'DOSXYZnrc', ' Dose outputs (Dose/inc
     *ident particle, Gy)')
                      ELSE IF(((isource.EQ.9).OR.(isource.EQ.21))) THEN
                          write(1,3840)title,planarefe,planarefp,planarf
     *                    e,planarfp, IHSTRY+ncaseold,nhist
3840                      format( '1',80a1 / t5,'Elec/positron planar en
     *ergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar e
     *nergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axiso
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Elec/positronpl
     *anar fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar f
     *luence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the 
     *phantom surface =',1pe11.3,'(1/cm**2)'// t5,'         No. of parti
     *cles incident on DOSXYZ phantom =',1i13// t5,'No. of primary parti
     *cles incident in BEAM simulation =',1i13// t10,'           DOSXYZn
     *rc Dose outputs '/ t10,'(Dose/incident particle from original sour
     *ce, Gy)')
                      ELSE IF((isource.EQ.20)) THEN
                          write(1,3850)title,planarefe,planarefp,planarf
     *                    e,planarfp, IHSTRY+ncaseold,nhist
3850                      format( '1',80a1 / t5,'Elec/positron planar en
     *ergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar e
     *nergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axiso
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Elec/positronpl
     *anar fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar f
     *luence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the 
     *phantom surface =',1pe11.3,'(1/cm**2)'// t5,'         No. of parti
     *cles incident on DOSXYZ phantom =',1i13// t5,'No. of primary parti
     *cles incident in VCU/BEAM simulation =',1i13// t10,'           DOS
     *XYZnrc Dose outputs '/ t10,'(Dose/incident particle from original 
     *source, Gy)')
                      ELSE
                          write(1,3860)title,planarefe,planarefp,planarf
     *                    e,planarfp,ainflu
3860                      format( '1',80a1 / t5,'Elec/positron planar en
     *ergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar e
     *nergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axiso
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Elec/positronpl
     *anar fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar f
     *luence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the 
     *phantom surface =',1pe11.3,'(1/cm**2)'// t5,'on the phantom surfac
     *e =',1pe11.3,'(1/cm**2)'// t10,'DOSXYZnrc Dose outputs', '   Gy.cm
     ***2 (or Gy/incident particle)')
                      END IF
                  END IF
                  ipage=1
                  DO 3871 k=kdosl(idose),kdosu(idose)
                      DO 3881 j=jdosl(idose),jdosu(idose),4
                          JL=J
                          JU=min(j+3,jdosu(idose))
                          write(1,3890)zbound(k),zbound(k+1),k
3890                      format(//t15,'for z=',f10.3,' to',f10.3,5x,'k=
     *',i3)
                          write(1,3900)(ybound(jj),jj=JL,JU+1)
3900                      format(/' ybounds:',f7.3,f12.3,3f17.3)
                          write(1,3910)(jj,jj=JL ,JU)
3910                      format(t10,'j=',t17,5(i4,13x))
                          write(1,3920)xbound(idosl(idose))
3920                      format(' xbounds (',f10.3,')')
                          DO 3931 i=idosl(idose),idosu(idose)
                              write(1,3940)xbound(i+1),i, (endep((i + (j
     *                        j-1)*IMAX + (k-1)*ijmax)),min(99.9d0, 100d
     *                        0*endep2((i + (jj-1)*IMAX + (k-1)*ijmax)))
     *                        ,jj=JL,JU)
3940                          format(f8.3,i4,4(1pe11.3,'-',0pf4.1,'%') )
                              IF ((mod(i,5) .EQ. 0)) THEN
                                  write(1,3950)
3950                              format(' ')
                              END IF
3931                      CONTINUE
3932                      CONTINUE
                          IF (( ( mod(ipage,nperpg) .EQ. 0) .AND. ( ( JU
     *                     .NE. jdosu(idose) ) .OR. ( k .NE. kdosu(idose
     *                    ) )))) THEN
                              IF (((n_parallel.GT.0 .AND. is_finished).O
     *                        R.IRESTART.EQ.4 )) THEN
                                  write(1,3960)title
3960                              format(//,'1',80a1 // t10, 'DOSXYZnrcD
     *ose outputs (dose/F, Gy.cm**2)')
                              ELSE
                                  IF ((((isource.EQ.0).OR.( isource.EQ.1
     *                            ).OR.( isource.EQ.3).OR. (isource.EQ.7
     *                            )).AND. (beamarea .NE. 0.))) THEN
                                      write(1,3970)title,planarefe,plana
     *                                refp,planarfe,planarfp,ainflu
3970                                  format( '1',80a1 // t5,'Elec/posit
     *ron planar energy fluence scored in a 1cm**2 circle '/ t5,'centere
     *d at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Ph
     *oton planar energy fluence scored in a 1cm**2 circle '/ t5,'center
     *ed at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'E
     *lec/positron planar fluence scored in a 1cm**2 circle '/ t5,'cente
     *red at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'
     *Photon planar fluence scored in a 1cm**2 circle '/ t5,'centered at
     * z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Averag
     *e planar fluence (number/beam area), F =', 1pe11.3,'(1/cm**2)'// t
     *10, 'DOSXYZnrc Dose outputs (dose/F, Gy.cm**2)')
                                  ELSE IF((isource.EQ.2.OR.isource.EQ.8)
     *                            ) THEN
                                      write(1,3980)title,planarefe,plana
     *                                refp,planarfe,planarfp, IHSTRY+nca
     *                                seold
3980                                  format( '1',80a1 / t5,'Elec/positr
     *on planar energy fluence scored in a 1cm**2 circle '/ t5,'centered
     * at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Pho
     *ton planar energy fluence scored in a 1cm**2 circle '/ t5,'centere
     *d at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'El
     *ec/positron planar fluence scored in a 1cm**2 circle '/ t5,'center
     *ed at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'P
     *hoton planar fluence scored in a 1cm**2 circle '/ t5,'centered atz
     *-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'No. ofpa
     *rticles incident from phase space file =',1i13/)
                                      IF ((OLDSRC.EQ.1)) THEN
                                          write(1,3990)
3990                                      format(t10,'           DOSXYZn
     *rc Dose outputs '/ t10,'(Dose/incident particle from phase space f
     *ile, Gy)')
                                      ELSE
                                          write(1,4000)ainflu
4000                                      format(t5,'No. of particles in
     *cident from original source  =',1f13.1// t10,'           DOSXYZnrc
     * Dose outputs '/ t10,'(Dose/incident particle from original source
     *, Gy)')
                                      END IF
                                  ELSE IF((((isource.EQ.4).OR.(isource.E
     *                            Q.5)).OR. (((isource.EQ.0).OR.( isourc
     *                            e.EQ.1).OR.( isource.EQ.3).OR. (isourc
     *                            e.EQ.7)).AND.(beamarea.EQ.0.)))) THEN
                                      write(1,4010)title,planarefe,plana
     *                                refp,planarfe,planarfp,ainflu
4010                                  format( '1',80a1 / t5,'Elec/positr
     *on planar energy fluence scored in a 1cm**2 circle '/ t5,'centered
     * at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Pho
     *ton planar energy fluence scored in a 1cm**2 circle '/ t5,'centere
     *d at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'El
     *ec/positron planar fluence scored in a 1cm**2 circle '/ t5,'center
     *ed at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'P
     *hoton planar fluence scored in a 1cm**2 circle '/ t5,'centered atz
     *-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Total nu
     *mber of incident particles =',1pe11.3// t10,'DOSXYZnrc', ' Dose ou
     *tputs (Dose/incident particle, Gy)')
                                  ELSE IF((isource.EQ.6)) THEN
                                      write(1,4020)title,ainflu
4020                                  format( '1',80a1 / t5,'Total numbe
     *r of incident particles =',1pe11.3// t10,'DOSXYZnrc', ' Dose outpu
     *ts (Dose/incident particle, Gy)')
                                  ELSE IF(((isource.EQ.9).OR.(isource.EQ
     *                            .21))) THEN
                                      write(1,4030)title,planarefe,plana
     *                                refp,planarfe,planarfp, IHSTRY+nca
     *                                seold,nhist
4030                                  format( '1',80a1 / t5,'Elec/positr
     *on planar energy fluence scored in a 1cm**2 circle '/ t5,'centered
     * at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Pho
     *ton planar energy fluence scored in a 1cm**2 circle '/ t5,'centere
     *d at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'El
     *ec/positron planar fluence scored in a 1cm**2 circle '/ t5,'center
     *ed at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'P
     *hoton planar fluence scored in a 1cm**2 circle '/ t5,'centered atz
     *-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'  No. of
     * particles incident on DOSXYZ phantom =',1i13// t5,'No. of primary
     * particles incident in BEAM simulation =',1i13// t10,'       DOSXY
     *Znrc Dose outputs '/ t10,'(Dose/incident particle from original so
     *urce, Gy)')
                                  ELSE IF((isource.EQ.20)) THEN
                                      write(1,4040)title,planarefe,plana
     *                                refp,planarfe,planarfp, IHSTRY+nca
     *                                seold,nhist
4040                                  format( '1',80a1 / t5,'Elec/positr
     *on planar energy fluence scored in a 1cm**2 circle '/ t5,'centered
     * at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Pho
     *ton planar energy fluence scored in a 1cm**2 circle '/ t5,'centere
     *d at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'El
     *ec/positron planar fluence scored in a 1cm**2 circle '/ t5,'center
     *ed at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'P
     *hoton planar fluence scored in a 1cm**2 circle '/ t5,'centered atz
     *-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'  No. of
     * particles incident on DOSXYZ phantom =',1i13// t5,'No. of primary
     * particles incident in VCU/BEAM simulation =',1i13// t10,'        
     *   DOSXYZnrc Dose outputs '/ t10,'(Dose/incident particlefrom orig
     *inal source, Gy)')
                                  ELSE
                                      write(1,4050)title,planarefe,plana
     *                                refp,planarfe,planarfp,ainflu
4050                                  format( '1',80a1 / t5,'Elec/positr
     *on planar energy fluence scored in a 1cm**2 circle '/ t5,'centered
     * at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Pho
     *ton planar energy fluence scored in a 1cm**2 circle '/ t5,'centere
     *d at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'El
     *ec/positron planar fluence scored in a 1cm**2 circle '/ t5,'center
     *ed at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'P
     *hoton planar fluence scored in a 1cm**2 circle '/ t5,'centered atz
     *-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'on theph
     *antom surface =',1pe11.3,'(1/cm**2)'// t10,'DOSXYZnrc Dose outputs
     *', '   Gy.cm**2 (or Gy/incident particle)')
                                  END IF
                              END IF
                              ipage=1
                          ELSE
                              ipage = ipage+1
                          END IF
3881                  CONTINUE
3882                  CONTINUE
3871              CONTINUE
3872              CONTINUE
              ELSE
                  j = (idosu(idose) - idosl(idose))
                  j = j + j/5 + 7
                  nperpg = 60/j
                  IF ((nperpg .EQ. 0)) THEN
                      WRITE(6,4060)nperpg
4060                  FORMAT(' Sets of Y scans per page = ',I2)
                      nperpg = 1
                      WRITE(6,4070)nperpg
4070                  FORMAT(' Set to  = ',I2)
                  END IF
                  IF (((n_parallel.GT.0 .AND. is_finished).OR.IRESTART.E
     *            Q.4 )) THEN
                      write(1,4080)title
4080                  format(//,'1',80a1 // t10, 'DOSXYZnrc Dose outputs
     * (dose/F, Gy.cm**2)')
                  ELSE
                      IF ((((isource.EQ.0).OR.( isource.EQ.1).OR.( isour
     *                ce.EQ.3).OR. (isource.EQ.7)).AND. (beamarea .NE. 0
     *                .))) THEN
                          write(1,4090)title,planarefe,planarefp,planarf
     *                    e,planarfp,ainflu
4090                      format( '1',80a1 // t5,'Elec/positron planar e
     *nergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axiso
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planaren
     *ergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Elec/positron p
     *lanar fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis 
     *on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar 
     *fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the
     * phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Average planar fluen
     *ce (number/beam area), F =', 1pe11.3,'(1/cm**2)'// t10, 'DOSXYZnrc
     * Dose outputs (dose/F, Gy.cm**2)')
                      ELSE IF((isource.EQ.2.OR.isource.EQ.8)) THEN
                          write(1,4100)title,planarefe,planarefp,planarf
     *                    e,planarfp, IHSTRY+ncaseold
4100                      format( '1',80a1 / t5,'Elec/positron planar en
     *ergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar e
     *nergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axiso
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Elec/positronpl
     *anar fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar f
     *luence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the 
     *phantom surface =',1pe11.3,'(1/cm**2)'// t5,'No. of particles inci
     *dent from phase space file =',1i13/)
                          IF ((OLDSRC.EQ.1)) THEN
                              write(1,4110)
4110                          format(t10,'           DOSXYZnrc Dose outp
     *uts '/ t10,'(Dose/incident particle from phase space file, Gy)')
                          ELSE
                              write(1,4120)ainflu
4120                          format(t5,'No. of particles incident fromo
     *riginal source  =',1f13.1// t10,'           DOSXYZnrc Dose outputs
     * '/ t10,'(Dose/incident particle from original source, Gy)')
                          END IF
                      ELSE IF((((isource.EQ.4).OR.(isource.EQ.5)).OR. ((
     *                (isource.EQ.0).OR.( isource.EQ.1).OR.( isource.EQ.
     *                3).OR. (isource.EQ.7)).AND.(beamarea.EQ.0.)))) THE
     *                N
                          write(1,4130)title,planarefe,planarefp,planarf
     *                    e,planarfp,ainflu
4130                      format( '1',80a1 / t5,'Elec/positron planar en
     *ergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar e
     *nergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axiso
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Elec/positronpl
     *anar fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar f
     *luence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the 
     *phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Total number of incid
     *ent particles =',1pe11.3// t10,'DOSXYZnrc', ' Dose outputs (Dose/i
     *ncident particle, Gy)')
                      ELSE IF((isource.EQ.6)) THEN
                          write(1,4140)title,ainflu
4140                      format( '1',80a1 / t5,'Total number of inciden
     *t particles =',1pe11.3// t10,'DOSXYZnrc', ' Dose outputs (Dose/inc
     *ident particle, Gy)')
                      ELSE IF(((isource.EQ.9).OR.(isource.EQ.21))) THEN
                          write(1,4150)title,planarefe,planarefp,planarf
     *                    e,planarfp, IHSTRY+ncaseold,nhist
4150                      format( '1',80a1 / t5,'Elec/positron planar en
     *ergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar e
     *nergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axiso
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Elec/positronpl
     *anar fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar f
     *luence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the 
     *phantom surface =',1pe11.3,'(1/cm**2)'// t5,'         No. of parti
     *cles incident on DOSXYZ phantom =',1i13// t5,'No. of primary parti
     *cles incident in BEAM simulation =',1i13// t10,'           DOSXYZn
     *rc Dose outputs '/ t10,'(Dose/incident particle from original sour
     *ce, Gy)')
                      ELSE IF((isource.EQ.20)) THEN
                          write(1,4160)title,planarefe,planarefp,planarf
     *                    e,planarfp, IHSTRY+ncaseold,nhist
4160                      format( '1',80a1 / t5,'Elec/positron planar en
     *ergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar e
     *nergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axiso
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Elec/positronpl
     *anar fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar f
     *luence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the 
     *phantom surface =',1pe11.3,'(1/cm**2)'// t5,'         No. of parti
     *cles incident on DOSXYZ phantom =',1i13// t5,'No. of primary parti
     *cles incident in VCU/BEAM simulation =',1i13// t10,'           DOS
     *XYZnrc Dose outputs '/ t10,'(Dose/incident particle from original 
     *source, Gy)')
                      ELSE
                          write(1,4170)title,planarefe,planarefp,planarf
     *                    e,planarfp,ainflu
4170                      format( '1',80a1 / t5,'Elec/positron planar en
     *ergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar e
     *nergy fluence scored in a 1cm**2 circle '/ t5,'centered at z-axiso
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Elec/positronpl
     *anar fluence scored in a 1cm**2 circle '/ t5,'centered at z-axis o
     *n the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Photon planar f
     *luence scored in a 1cm**2 circle '/ t5,'centered at z-axis on the 
     *phantom surface =',1pe11.3,'(1/cm**2)'// t5,'on the phantom surfac
     *e =',1pe11.3,'(1/cm**2)'// t10,'DOSXYZnrc Dose outputs', '   Gy.cm
     ***2 (or Gy/incident particle)')
                      END IF
                  END IF
                  ipage=1
                  DO 4181 k=kdosl(idose),kdosu(idose)
                      DO 4191 i=idosl(idose),idosu(idose),4
                          JL=i
                          JU=min(i+3,idosu(idose))
                          write(1,4200)zbound(k),zbound(k+1),k
4200                      format(//t15,'for z=',f10.3,' to',f10.3,5x,'k=
     *',i3)
                          write(1,4210)(xbound(jj),jj=JL,JU+1)
4210                      format(/' xbounds:',f7.3,f12.3,3f17.3)
                          write(1,4220)(jj,jj=JL ,JU)
4220                      format(t10,'i=',t17,5(i4,13x))
                          write(1,4230)ybound(jdosl(idose))
4230                      format(' ybounds (',f10.3,')')
                          DO 4241 j=jdosl(idose),jdosu(idose)
                              write(1,4250)ybound(j+1),j, (endep((jj + (
     *                        j-1)*IMAX + (k-1)*ijmax)),min(99.9d0, 100d
     *                        0*endep2((jj + (j-1)*IMAX + (k-1)*ijmax)))
     *                        ,jj=JL,JU)
4250                          format(f8.3,i4,4(1pe11.3,'-',0pf4.1,'%') )
                              IF ((mod(j,5) .EQ. 0)) THEN
                                  write(1,4260)
4260                              format(' ')
                              END IF
4241                      CONTINUE
4242                      CONTINUE
                          IF (( ( mod(ipage,nperpg) .EQ. 0) .AND. ( ( JU
     *                     .NE. idosu(idose) ) .OR. ( k .NE. kdosu(idose
     *                    ) )))) THEN
                              IF (((n_parallel.GT.0 .AND. is_finished).O
     *                        R.IRESTART.EQ.4 )) THEN
                                  write(1,4270)title
4270                              format(//,'1',80a1 // t10, 'DOSXYZnrcD
     *ose outputs (dose/F, Gy.cm**2)')
                              ELSE
                                  IF ((((isource.EQ.0).OR.( isource.EQ.1
     *                            ).OR.( isource.EQ.3).OR. (isource.EQ.7
     *                            )).AND. (beamarea .NE. 0.))) THEN
                                      write(1,4280)title,planarefe,plana
     *                                refp,planarfe,planarfp,ainflu
4280                                  format( '1',80a1 // t5,'Elec/posit
     *ron planar energy fluence scored in a 1cm**2 circle '/ t5,'centere
     *d at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Ph
     *oton planar energy fluence scored in a 1cm**2 circle '/ t5,'center
     *ed at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'E
     *lec/positron planar fluence scored in a 1cm**2 circle '/ t5,'cente
     *red at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'
     *Photon planar fluence scored in a 1cm**2 circle '/ t5,'centered at
     * z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Averag
     *e planar fluence (number/beam area), F =', 1pe11.3,'(1/cm**2)'// t
     *10, 'DOSXYZnrc Dose outputs (dose/F, Gy.cm**2)')
                                  ELSE IF((isource.EQ.2.OR.isource.EQ.8)
     *                            ) THEN
                                      write(1,4290)title,planarefe,plana
     *                                refp,planarfe,planarfp, IHSTRY+nca
     *                                seold
4290                                  format( '1',80a1 / t5,'Elec/positr
     *on planar energy fluence scored in a 1cm**2 circle '/ t5,'centered
     * at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Pho
     *ton planar energy fluence scored in a 1cm**2 circle '/ t5,'centere
     *d at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'El
     *ec/positron planar fluence scored in a 1cm**2 circle '/ t5,'center
     *ed at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'P
     *hoton planar fluence scored in a 1cm**2 circle '/ t5,'centered atz
     *-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'No. ofpa
     *rticles incident from phase space file =',1i13/)
                                      IF ((OLDSRC.EQ.1)) THEN
                                          write(1,4300)
4300                                      format(t10,'           DOSXYZn
     *rc Dose outputs '/ t10,'(Dose/incident particle from phase space f
     *ile, Gy)')
                                      ELSE
                                          write(1,4310)ainflu
4310                                      format(t5,'No. of particles in
     *cident from original source  =',1f13.1// t10,'           DOSXYZnrc
     * Dose outputs '/ t10,'(Dose/incident particle from original source
     *, Gy)')
                                      END IF
                                  ELSE IF((((isource.EQ.4).OR.(isource.E
     *                            Q.5)).OR. (((isource.EQ.0).OR.( isourc
     *                            e.EQ.1).OR.( isource.EQ.3).OR. (isourc
     *                            e.EQ.7)).AND.(beamarea.EQ.0.)))) THEN
                                      write(1,4320)title,planarefe,plana
     *                                refp,planarfe,planarfp,ainflu
4320                                  format( '1',80a1 / t5,'Elec/positr
     *on planar energy fluence scored in a 1cm**2 circle '/ t5,'centered
     * at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Pho
     *ton planar energy fluence scored in a 1cm**2 circle '/ t5,'centere
     *d at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'El
     *ec/positron planar fluence scored in a 1cm**2 circle '/ t5,'center
     *ed at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'P
     *hoton planar fluence scored in a 1cm**2 circle '/ t5,'centered atz
     *-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Total nu
     *mber of incident particles =',1pe11.3// t10,'DOSXYZnrc', ' Dose ou
     *tputs (Dose/incident particle, Gy)')
                                  ELSE IF((isource.EQ.6)) THEN
                                      write(1,4330)title,ainflu
4330                                  format( '1',80a1 / t5,'Total numbe
     *r of incident particles =',1pe11.3// t10,'DOSXYZnrc', ' Dose outpu
     *ts (Dose/incident particle, Gy)')
                                  ELSE IF(((isource.EQ.9).OR.(isource.EQ
     *                            .21))) THEN
                                      write(1,4340)title,planarefe,plana
     *                                refp,planarfe,planarfp, IHSTRY+nca
     *                                seold,nhist
4340                                  format( '1',80a1 / t5,'Elec/positr
     *on planar energy fluence scored in a 1cm**2 circle '/ t5,'centered
     * at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Pho
     *ton planar energy fluence scored in a 1cm**2 circle '/ t5,'centere
     *d at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'El
     *ec/positron planar fluence scored in a 1cm**2 circle '/ t5,'center
     *ed at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'P
     *hoton planar fluence scored in a 1cm**2 circle '/ t5,'centered atz
     *-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'  No. of
     * particles incident on DOSXYZ phantom =',1i13// t5,'No. of primary
     * particles incident in BEAM simulation =',1i13// t10,'       DOSXY
     *Znrc Dose outputs '/ t10,'(Dose/incident particle from original so
     *urce, Gy)')
                                  ELSE IF((isource.EQ.20)) THEN
                                      write(1,4350)title,planarefe,plana
     *                                refp,planarfe,planarfp, IHSTRY+nca
     *                                seold,nhist
4350                                  format( '1',80a1 / t5,'Elec/positr
     *on planar energy fluence scored in a 1cm**2 circle '/ t5,'centered
     * at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Pho
     *ton planar energy fluence scored in a 1cm**2 circle '/ t5,'centere
     *d at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'El
     *ec/positron planar fluence scored in a 1cm**2 circle '/ t5,'center
     *ed at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'P
     *hoton planar fluence scored in a 1cm**2 circle '/ t5,'centered atz
     *-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'  No. of
     * particles incident on DOSXYZ phantom =',1i13// t5,'No. of primary
     * particles incident in VCU/BEAM simulation =',1i13// t10,'        
     *   DOSXYZnrc Dose outputs '/ t10,'(Dose/incident particlefrom orig
     *inal source, Gy)')
                                  ELSE
                                      write(1,4360)title,planarefe,plana
     *                                refp,planarfe,planarfp,ainflu
4360                                  format( '1',80a1 / t5,'Elec/positr
     *on planar energy fluence scored in a 1cm**2 circle '/ t5,'centered
     * at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'Pho
     *ton planar energy fluence scored in a 1cm**2 circle '/ t5,'centere
     *d at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'El
     *ec/positron planar fluence scored in a 1cm**2 circle '/ t5,'center
     *ed at z-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'P
     *hoton planar fluence scored in a 1cm**2 circle '/ t5,'centered atz
     *-axis on the phantom surface =',1pe11.3,'(1/cm**2)'// t5,'on theph
     *antom surface =',1pe11.3,'(1/cm**2)'// t10,'DOSXYZnrc Dose outputs
     *', '   Gy.cm**2 (or Gy/incident particle)')
                                  END IF
                              END IF
                              ipage=1
                          ELSE
                              ipage = ipage+1
                          END IF
4191                  CONTINUE
4192                  CONTINUE
4181              CONTINUE
4182              CONTINUE
              END IF
3431      CONTINUE
3432      CONTINUE
          WRITE(1,'(''1'')')
      END IF
      IF ((IPHANT.EQ.1 .AND. (n_parallel.EQ.0.OR.(n_parallel.GT.0 .AND.
     *is_finished)))) THEN
          call write_phantom(ioutphant,nmed,media,estepm,IMAX,JMAX,KMAX,
     *    xbound,ybound, zbound,rhor,med)
      END IF
      IF ((zeroairdose .EQ. 1)) THEN
          DO 4371 i=1,IMAX
              DO 4381 j=1,JMAX
                  DO 4391 k=1,KMAX
                      IF ((rhor((1 + i + (j-1)*IMAX + (k-1)*ijmax)) .LE.
     *                 0.044)) THEN
                          endep((i + (j-1)*IMAX + (k-1)*ijmax))=0.0
                          endep2((i + (j-1)*IMAX + (k-1)*ijmax))=0.99999
     *                    99
                      END IF
4391              CONTINUE
4392              CONTINUE
4381          CONTINUE
4382          CONTINUE
4371      CONTINUE
4372      CONTINUE
      END IF
      zerodose=1
      zerocount=0
      IF ((zerodose .EQ. 1)) THEN
          DO 4401 i=1,IMAX
              DO 4411 j=1,JMAX
                  DO 4421 k=1,KMAX
                      IF ((endep2((i + (j-1)*IMAX + (k-1)*ijmax)).GT.0.5
     *                 .AND. endep((i + (j-1)*IMAX + (k-1)*ijmax)) .GT.
     *                0.0)) THEN
                          endep((i + (j-1)*IMAX + (k-1)*ijmax))=0.0
                          endep2((i + (j-1)*IMAX + (k-1)*ijmax))=0.99999
     *                    99
                          zerocount=zerocount+1
                      END IF
4421              CONTINUE
4422              CONTINUE
4411          CONTINUE
4412          CONTINUE
4401      CONTINUE
4402      CONTINUE
      END IF
      IF ((zerodose.EQ.1 .AND. zerocount .GT.0)) THEN
          WRITE(6,4430)zerocount
          WRITE(1,4430)zerocount
4430      FORMAT(/' The dose values in ',I10,' voxels had error > 50% an
     *d have been'/ ' zeroed in the .3ddose file.'/)
      END IF
      IF (((IPARALLEL .LE. 1 .AND. n_parallel .EQ. 0) .OR. (n_parallel .
     *GT. 0 .AND. is_finished))) THEN
          call write_dose(IMAX,JMAX,KMAX,xbound,ybound,zbound,endep,ende
     *    p2,idd,MAX20)
      ELSE
          WRITE(6,4440)
          WRITE(1,4440)
4440      FORMAT(//' No dose outputs since this is a parallel run '//)
      END IF
      cput2=egs_etime()
      timcpu=1.0*(cput2-cput0)
      WRITE(6,4450)timcpu,timcpu/3600.
      WRITE(1,4450)timcpu,timcpu/3600.
4450  FORMAT(/' Total CPU time for this run =',f8.1,' s =',f8.3,' hr')
      IF ((IRESTART.EQ.4)) THEN
          WRITE(6,4460)
          WRITE(1,4460)
4460      FORMAT(/' CPU time is for combining .pardose files only.')
      ELSE IF((n_parallel.GT.0 .AND. is_finished)) THEN
          WRITE(6,4470)
          WRITE(1,4470)
4470      FORMAT(/' CPU time is for last run to finish only.')
      END IF
      CALL DATETIME(1)
      WRITE(6,4480)DATEN, TIMEN
      WRITE(1,4480)DATEN, TIMEN
4480  FORMAT(/' END OF RUN          ',A11,1X,A8/)
2760  CONTINUE
      call egs_finish
#ifdef HAVE_C_COMPILER
      IF (( n_parallel .GT. 0 .AND. .NOT.is_finished )) THEN
          call egs_pjob_finish(n_job)
          IF (( n_job .EQ. 0 )) THEN
              is_finished = .true.
              call egs_combine_runs(combine_results,'.pardose')
              ainflu=temp2
              IF(((isource .EQ. 0 .OR. isource .EQ. 1 .OR. isource .EQ.
     *        3 .OR. isource .EQ. 7) .AND. beamarea.GT.0.))ainflu=ainflu
     *        /beamarea
              goto 2830
          END IF
      END IF
#endif
      IF((isource.EQ.9 .OR. isource.EQ.21 .OR. (isource.EQ.20 .AND. SHLf
     *lag.EQ.1 .AND. MLCflag.EQ.0)))call finish_beamsource
      IF (((isource.EQ.20 .OR. isource .EQ. 21) .AND. MLCflag.EQ.1)) THE
     *N
          call finish_vcusource
      END IF
      call exit(0)
      stop 'Normal completion in main routine'
      end
      subroutine ausgab(iarg)
      implicit none
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      common/score/endep( 2097153), endep2( 2097153), temp2, planarefe,
     *planarefp,planarfe,planarfp, nestep, endep_tmp( 2097153), i_phsp_o
     *ut,i_muidx_out,i_unit_out,IWATCH,mxnp, endep_last( 2097153)
      REAL*8 endep, endep2, temp2,planarefe, planarefp, planarfe, planar
     *fp
      integer*8 nestep
      real endep_tmp
      integer i_phsp_out,   i_muidx_out,    i_unit_out,  IWATCH,mxnp
      integer*2 endep_last
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/USERPS/n_split
      integer*4 n_split
      COMMON/USERRR/ESAVE_GLOBAL,RANGE_ECUTRR(7),IREJECT
      real*8 ESAVE_GLOBAL,RANGE_ECUTRR
      integer*4 IREJECT
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common/source/ esrc,  nhist,  nnread,  nshist,  nphist,  nnphsp,
     *einsrc,  xsrcold,  ysrcold,  zsrcold,  usrcold,  vsrcold,  wsrcold
     *,  weightold, mu_phspold,  frMU_indx,  zinc,  xinl,  xinu,  yinl,
     * yinu,  zinl,  zinu,  thetax,  thetay,  thetaz,  uinc,  vinc,  win
     *c,  beamarea, xcol,  ycol,  xiso,  yiso,  ziso,  phicol,  theta(60
     *000),  phi(60000),  pang(60000),  angfixed(60000),  angmin(60000),
     *  angmax(60000),  pgang(60000),  xtemp(60000),  ytemp(60000),  zte
     *mp(60000),  phicoltemp(60000), thetatemp(60000),  phitemp(60000),
     * muIndex(60000),  r_11(60000), r_12(60000), r_13(60000), r_21(6000
     *0), r_22(60000), r_23(60000), r_31(60000), r_32(60000), r_33(60000
     *), dsource, dsourcetemp(60000), ein,  eksrcm,  esrc_sp,  SSD,  ein
     *srcold, NINCSRC,  r_dbs,  ssd_dbs,  z_dbs,  iqinold,  latchold,  e
     *nflag,  dflag,  ismode,  isource,     iqin,        iqphsp,
     *           iqinc,                          SHLflag,     calflag,
     *   MLCflag,     ixinl,       ixinu,       jyinl,       jyinu,
     *  kzinl,       kzinu,       klowx,       khix,        klowy,
     * khiy,        klowz,       khiz,        survival_ratio,        nsm
     *iss,      nsblocked,     nsrjct,      nsoutside,     nmissm,
     *IPRIMARY,                                            OLDSRC,
     * npassi,                     nang,         ivary(60000),     ngang
     *(60000),       nset,            more_in_cont,                 numa
     *ng,       dose_stat,      ndbsrjct,                        i_dbs,
     *         iphatsrc,         e_split,                           i_ia
     *ea_in,      i_mu_phsp,           izscore,             i_unit_in,
     *                k_field,                       nhist_last,
     *         the_beam_code,         the_input_file,      the_vcu_input
     *_file,                        the_pegs_file,           the_shared_
     *lib,                    the_vcu_code,               the_phsp_file
      real*8    esrc,muIndex
      integer*8 nhist, nnread,nshist,nphist,nnphsp
      real*8 einsrc, xsrcold, ysrcold,usrcold,vsrcold,wsrcold,weightold,
     *               frMU_indx,zsrcold,mu_phspold
      real*4    zinc, xinl, xinu, yinl, yinu, zinl, zinu, thetax, thetay
     *, thetaz,     uinc, vinc, winc, beamarea, xcol,ycol,xiso, yiso, zi
     *so, phicol,                 theta, phi, xtemp, ytemp, ztemp, phico
     *ltemp,thetatemp, phitemp,                 pang,angfixed,angmin,ang
     *max,pgang,r_11, r_12, r_13, r_21,                       r_22, r_23
     *, r_31, r_32, r_33,dsource,dsourcetemp,
     *    ein, eksrcm, esrc_sp, SSD, NINCSRC,
     *                  r_dbs, ssd_dbs,z_dbs,survival_ratio,einsrcold
      integer*4 isource, iqin, iqphsp, iqinc,latchold,iqinold,MLCflag,SH
     *Lflag,         calflag, ixinl, ixinu, jyinl, jyinu, kzinl, kzinu,
     *                             klowx, khix, klowy, khiy, klowz, khiz
     *,                                          nsmiss, nsblocked, nsrj
     *ct,nsoutside, nmissm,enflag,                             dflag, is
     *mode, IPRIMARY, OLDSRC,npassi,nang,ivary,ngang,numang,dose_stat,
     *     ndbsrjct,i_dbs,iphatsrc,e_split,i_iaea_in,i_mu_phsp,izscore,i
     *_unit_in,          num_field,more_in_cont,nset,k_field
      integer*2 nhist_last
      character*80 the_beam_code, the_vcu_code, the_input_file,the_pegs_
     *file,        the_shared_lib,the_vcu_input_file
      character*256 the_phsp_file
      COMMON/SOURCE_FORPARALLEL/nnphsp_max, nnphsp_min
      integer*8 nnphsp_max, nnphsp_min
      common/geom/ xbound(128+1),  ybound(128+1),  zbound(128+1),  xboun
     *d_min,  xbound_max,  ybound_min,  ybound_max,  zbound_min,  zbound
     *_max,  medsur,  dsurround(4),  IMAX,  JMAX,  KMAX,  ijmax,  irmax,
     *  howfarless
      real*4 xbound, ybound, zbound, xbound_min, xbound_max, ybound_min,
     * ybound_max, zbound_min, zbound_max,dsurround
      integer medsur,IMAX, JMAX, KMAX, ijmax,irmax
      logical howfarless
      common/CH_steps/ count_pII_steps,count_all_steps,is_ch_step
      real*8 count_pII_steps,count_all_steps
      logical is_ch_step
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR( 2097154),MED( 2097154),IRAYLR,
     *IPHOTONUCR( 2097154)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      COMMON/RWPHSP/ STRING_TEMP_ZLAST_OUT,  STRING_TEMP_OUT,  IHSTRY_PH
     *SP,   iaea_dummy_long,  NHSTRY_DOS,   ESHORT,  WEIGHTTMP,  WT_PHSP
     *_SHORT,  X_PHSP_SHORT,  Y_PHSP_SHORT,  Z_PHSP_SHORT,  U_PHSP_SHORT
     *,  V_PHSP_SHORT,  W_PHSP_SHORT,  ZLAST_PHSP_SHORT,  MUIDX_PHSP_SHO
     *RT,  EKMAX_PHSP_SHORT,  EKMINE_PHSP_SHORT,  NINC_PHSP_SHORT,  dosx
     *yz2beam_index,  iaea_extra_floats,  NUM_PHSP_TOT,  PHOT_PHSP_TOT,
     *iaea_result,   iaea_n_stat,  iaea_q_typ,  iaea_typ_q,  iaea_q_inde
     *x,  I_PHSP,  IERR_PHSP,  LATCHTMP,  WRITE_PHSP_COUNTER,  WRITE_PHS
     *P_SOFAR,  PHSP_RESTART,  PHSP_RECL,  PHSP_RECL_OLD,  iaea_extra_in
     *ts,  iaea_extra_int_types,iaea_extra_float_types,   iaea_i_zlast,
     * iaea_i_latch,  iaea_i_muidx,  iaea_n_extra_ints,  iaea_n_extra_fl
     *oats,  i_iaea_open_for_write,   iaea_i_zlast_out,  iaea_i_latch_ou
     *t,  iaea_i_muidx_out,  dosxyz2beam_izscore,  MODE_RW
      CHARACTER*32000 STRING_TEMP_ZLAST_OUT(1)
      CHARACTER*28000 STRING_TEMP_OUT(1)
      integer*8 IHSTRY_PHSP(1),iaea_dummy_long,NHSTRY_DOS
      REAL*4 ESHORT,WEIGHTTMP,WT_PHSP_SHORT,X_PHSP_SHORT,Y_PHSP_SHORT, Z
     *_PHSP_SHORT,U_PHSP_SHORT, V_PHSP_SHORT,W_PHSP_SHORT,ZLAST_PHSP_SHO
     *RT, MUIDX_PHSP_SHORT, EKMAX_PHSP_SHORT,EKMINE_PHSP_SHORT,NINC_PHSP
     *_SHORT,dosxyz2beam_index, iaea_extra_floats(10)
      INTEGER NUM_PHSP_TOT,PHOT_PHSP_TOT, iaea_result,iaea_n_stat,iaea_q
     *_typ(3),iaea_typ_q(3),iaea_q_index,I_PHSP, IERR_PHSP,LATCHTMP, WRI
     *TE_PHSP_COUNTER(1),WRITE_PHSP_SOFAR(1), PHSP_RESTART,PHSP_RECL,PHS
     *P_RECL_OLD,iaea_extra_ints(10), iaea_extra_int_types(10),iaea_extr
     *a_float_types(10),iaea_i_zlast, iaea_i_latch,iaea_i_muidx,iaea_n_e
     *xtra_ints,iaea_n_extra_floats, i_iaea_open_for_write,iaea_i_zlast_
     *out,iaea_i_latch_out, iaea_i_muidx_out,dosxyz2beam_izscore
      CHARACTER*5 MODE_RW
      INTEGER LATCH_TEMP_OUT,NUM_PHSP_TOFLUSH,TEMP_PHSP_COUNTER,REM_PHSP
      REAL*4 REAL_TEMP_OUT(7)
      CHARACTER*32 REC_TEMP_OUT
      integer*4 iarg,  ip
      real*8 XSI
      integer*4 irx,iry,irz,irold_loc,irnew_loc,outside,min_plane,iri,i,
     *ii,jj,kk, ibsearch4,hwfl_rr,dirx,diry,dirz
      real*8 dist_loc, dist_tot, edep_loc, tv,t(2),xi,yi,zi,ui(2),vi(2),
     *wi(2), dist_tmp,x_tmp,y_tmp,z_tmp,edep_save,x_loc,y_loc,z_loc, xpl
     *n,ypln,zpln,dnear_loc,t_tot,t_rnd,dist_max,uii,vii,wii, distx,dist
     *y,distz,edep_frac,x_temp,y_temp,z_temp,u_temp,v_temp,w_temp, zlast
     *_tmp
      LOGICAL ir_defined
      SAVE xi,yi,zi,ui,vi,wi,tv,iri,edep_save
      DATA edep_save/0.0/
      IF((IWATCH .NE.0))call watch(iarg,IWATCH)
      mxnp=max(mxnp,np)
      IF ((np .GE. 10000)) THEN
          WRITE(6,4490)np, 10000
          WRITE(1,4490)np, 10000
4490      FORMAT(//' In ausgab, np=',i3,' >= maximum stack allowed which
     * is',i3/ 1X,79('*')//)
          IF ((mxnp .GT. 10000)) THEN
              WRITE(6,4500)np, 10000
              WRITE(1,4500)np, 10000
4500          FORMAT(//' In ausgab, np=',i3,' > maximum stack allowed wh
     *ich is',i3/ 1X,79('*')//'  Must stop - you must increase $MXSTACKi
     *n'/ '   dosxyz_user_macros.mortran')
              stop '*** Stack overflow ***'
          END IF
      END IF
      IF (( n_split .GT. 1 )) THEN
          IF (( iarg .EQ. 7 .OR. iarg .EQ. 13 .OR. iarg .EQ. 14 )) THEN
              DO 4511 ip=NPold,NP
                  IF (( iq(ip) .EQ. 0 )) THEN
                      IF((rng_seed .GT. 128))call ranmar_get
                      XSI = rng_array(rng_seed)*twom24
                      rng_seed = rng_seed + 1
                      IF (( xsi*n_split .GT. 1)) THEN
                          wt(ip) = 0
                          e(ip) = 0
                      ELSE
                          wt(ip) = wt(ip)*n_split
                      END IF
                  END IF
4511          CONTINUE
4512          CONTINUE
          END IF
      END IF
      IF ((howfarless .AND. (iarg.EQ.15 .OR. iarg.EQ.17 .OR. iarg.EQ.19
     *.OR. iarg.EQ.23) .AND. ir(np).LT.irmax+1)) THEN
          IF ((x(np).GT.xbound_max .OR. x(np).LT.xbound_min .OR. y(np).G
     *    T.ybound_max .OR. y(np).LT.ybound_min .OR. z(np).GT.zbound_max
     *     .OR. z(np).LT.zbound_min )) THEN
              IF ((enflag.GT.1)) THEN
                  ir(np)=irmax+1
              ELSE
                  ir(np)=1
              END IF
          ELSE
              irx=ibsearch4(x(np),imax+1,xbound)
              iry=ibsearch4(y(np),jmax+1,ybound)
              irz=ibsearch4(z(np),kmax+1,zbound)
              ir(np)=(1 + irx + (iry-1)*IMAX + (irz-1)*ijmax)
          END IF
          irold=ir(np)
      END IF
      IF((iarg .GT.5))RETURN
      IF ((howfarless .AND. iarg.GT.0 .AND. edep_save.GT.0.0)) THEN
          irx=mod(irold-1,IMAX)
          IF((irx.EQ.0))irx=IMAX
          irz = 1 + (irold-1-irx)/ijmax
          iry = 1 + ( (irold-1-irx) - (irz-1)*ijmax)/IMAX
          IF (( x(np) .GT. xbound(irx) .AND. x(np) .LT. xbound(irx+1) .A
     *    ND. y(np) .GT. ybound(iry) .AND. y(np) .LT. ybound(iry+1) .AND
     *    . z(np) .GT. zbound(irz) .AND. z(np) .LT. zbound(irz+1) )) THE
     *    N
              IF ((nhist_last .EQ. endep_last(irold-1))) THEN
                  endep_tmp(irold-1) = endep_tmp(irold-1) + edep_save*wt
     *            (np)
              ELSE
                  endep(irold-1)=endep(irold-1)+endep_tmp(irold-1)
                  endep2(irold-1)=endep2(irold-1) + endep_tmp(irold-1)*e
     *            ndep_tmp(irold-1)
                  endep_tmp(irold-1) = edep_save*wt(np)
                  endep_last(irold-1)=nhist_last
              END IF
              irnew = irold
          ELSE
              IF ((.NOT.is_ch_step)) THEN
                  t(1)=tv
                  t(2)=0.
              ELSE
                  IF((rng_seed .GT. 128))call ranmar_get
                  t_rnd = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  IF ((t_rnd.LT.0.5)) THEN
                      t(1)=1-((x(np)-xi)*ui(1)+(y(np)-yi)*vi(1)+(z(np)-z
     *                i)*wi(1))/tv
                      IF ((t(1).LT.1e-3)) THEN
                          t(1)=SQRT((x(np)-xi)**2+(y(np)-yi)**2+(z(np)-z
     *                    i)**2)
                          ui(1)=(x(np)-xi)/t(1)
                          vi(1)=(y(np)-yi)/t(1)
                          wi(1)=(z(np)-zi)/t(1)
                          t(2)=0.
                      ELSE
                          t(1)=(tv**2-(x(np)-xi)**2-(y(np)-yi)**2-(z(np)
     *                    -zi)**2)/(2*tv*t(1))
                          t(2)=tv-t(1)
                          ui(2)=((x(np)-xi)-t(1)*ui(1))/(tv-t(1))
                          vi(2)=((y(np)-yi)-t(1)*vi(1))/(tv-t(1))
                          wi(2)=((z(np)-zi)-t(1)*wi(1))/(tv-t(1))
                      END IF
                  ELSE
                      ui(2)=u(np)
                      vi(2)=v(np)
                      wi(2)=w(np)
                      t(2)=1-((x(np)-xi)*ui(2)+(y(np)-yi)*vi(2)+(z(np)-z
     *                i)*wi(2))/tv
                      IF ((t(2).LT.1e-3)) THEN
                          t(1)=SQRT((x(np)-xi)**2+(y(np)-yi)**2+(z(np)-z
     *                    i)**2)
                          ui(1)=(x(np)-xi)/t(1)
                          vi(1)=(y(np)-yi)/t(1)
                          wi(1)=(z(np)-zi)/t(1)
                          t(2)=0.
                      ELSE
                          t(2)=(tv**2-(x(np)-xi)**2-(y(np)-yi)**2-(z(np)
     *                    -zi)**2)/(2*tv*t(2))
                          t(1)=tv-t(2)
                          ui(1)=((x(np)-xi)-t(2)*ui(2))/(tv-t(2))
                          vi(1)=((y(np)-yi)-t(2)*vi(2))/(tv-t(2))
                          wi(1)=((z(np)-zi)-t(2)*wi(2))/(tv-t(2))
                      END IF
                  END IF
              END IF
              t_tot=t(1)+t(2)
              irold_loc=irold
              irnew_loc=irold_loc
              edep_frac=edep_save/t_tot
              outside=0
              DO 4521 i=1,2
                  IF ((t(i).GT.0. .AND. irold_loc.GT.1)) THEN
                      IF ((i.EQ.2)) THEN
                          xi=xi+ui(1)*t(1)
                          yi=yi+vi(1)*t(1)
                          zi=zi+wi(1)*t(1)
                      END IF
                      IF ((ui(i).GT.0)) THEN
                          uii=1./abs(ui(i))
                          dirx=1
                          distx=(xbound(irx+1)-xi)*uii
                      ELSE IF((ui(i).LT.0)) THEN
                          uii=1./abs(ui(i))
                          dirx=-1
                          distx=(xi-xbound(irx))*uii
                      ELSE
                          dirx=0
                          uii=0
                          distx=1e20
                      END IF
                      IF ((vi(i).GT.0)) THEN
                          vii=1./abs(vi(i))
                          diry=1
                          disty=(ybound(iry+1)-yi)*vii
                      ELSE IF((vi(i).LT.0)) THEN
                          vii=1./abs(vi(i))
                          diry=-1
                          disty=(yi-ybound(iry))*vii
                      ELSE
                          diry=0
                          vii=0
                          disty=1e20
                      END IF
                      IF ((wi(i).GT.0)) THEN
                          wii=1./abs(wi(i))
                          dirz=1
                          distz=(zbound(irz+1)-zi)*wii
                      ELSE IF((wi(i).LT.0)) THEN
                          wii=1./abs(wi(i))
                          dirz=-1
                          distz=(zi-zbound(irz))*wii
                      ELSE
                          dirz=0
                          wii=0
                          distz=1e20
                      END IF
                      dist_tot=0.
4531                  CONTINUE
                          dist_max=t(i)-dist_tot
                          IF ((distx.LT.disty .AND. distx.LT.distz .AND.
     *                     distx.LT.dist_max)) THEN
                              dist_loc=distx
                              irx=irx+dirx
                              IF ((irx.GT.0 .AND. irx.LE.IMAX)) THEN
                                  disty=disty-distx
                                  distz=distz-distx
                                  irnew_loc=irold_loc+dirx
                                  distx=(xbound(irx+1)-xbound(irx))*uii
                              ELSE
                                  outside=1
                              END IF
                          ELSE IF((disty.LT.distz .AND. disty.LT.dist_ma
     *                    x)) THEN
                              dist_loc=disty
                              iry=iry+diry
                              IF ((iry.GT.0 .AND. iry.LE.JMAX)) THEN
                                  distx=distx-disty
                                  distz=distz-disty
                                  irnew_loc=irold_loc+diry*IMAX
                                  disty=(ybound(iry+1)-ybound(iry))*vii
                              ELSE
                                  outside=1
                              END IF
                          ELSE IF((distz.LT.dist_max)) THEN
                              dist_loc=distz
                              irz=irz+dirz
                              IF ((irz.GT.0 .AND. irz.LE.KMAX)) THEN
                                  distx=distx-distz
                                  disty=disty-distz
                                  irnew_loc=irold_loc+dirz*ijmax
                                  distz=(zbound(irz+1)-zbound(irz))*wii
                              ELSE
                                  outside=1
                              END IF
                          ELSE
                              dist_loc=dist_max
                          END IF
                          edep_loc=dist_loc*edep_frac
                          IF ((nhist_last .EQ. endep_last(irold_loc-1)))
     *                     THEN
                              endep_tmp(irold_loc-1) = endep_tmp(irold_l
     *                        oc-1) + edep_loc*wt(np)
                          ELSE
                              endep(irold_loc-1)=endep(irold_loc-1)+ende
     *                        p_tmp(irold_loc-1)
                              endep2(irold_loc-1)=endep2(irold_loc-1) +
     *                        endep_tmp(irold_loc-1)*endep_tmp(irold_loc
     *                        -1)
                              endep_tmp(irold_loc-1) = edep_loc*wt(np)
                              endep_last(irold_loc-1)=nhist_last
                          END IF
                          IF ((outside.EQ.1)) THEN
                              IF ((enflag.GT.1)) THEN
                                  irnew_loc=irmax+1
                              ELSE
                                  irnew_loc=1
                              END IF
                          END IF
                          irold_loc=irnew_loc
                          dist_tot=dist_tot+dist_loc
                          IF(((dist_tot.GE.t(i).OR.outside.EQ.1)))GO TO4
     *                    532
                      GO TO 4531
4532                  CONTINUE
                  END IF
4521          CONTINUE
4522          CONTINUE
              irnew=irnew_loc
              IF((irnew.NE.irold))ir(np)=irnew
          END IF
      END IF
      IF((iarg .EQ. 0 .AND. iq(np).NE.0))nestep = nestep + 1
      IF ((howfarless)) THEN
          edep_save=0.0
          hwfl_rr=0
      END IF
      IF ((iarg.EQ.5 .AND. i_phsp_out.NE.0 .AND. ir(np).EQ.irmax+1 .AND.
     * irold.LT.ir(np))) THEN
          IF ((i_phsp_out.EQ.1)) THEN
              IF ((0.EQ.0)) THEN
                  ESHORT=e(np)
                  iaea_n_stat=nhist-IHSTRY_PHSP(1)
                  IHSTRY_PHSP(1)=nhist
                  IF (( (iq(np).EQ.1) .OR. (iq(np).EQ.-1) )) THEN
                      ESHORT = ESHORT - 0.5109989461
                  END IF
                  WT_PHSP_SHORT=wt(np)
                  X_PHSP_SHORT=x(np)
                  Y_PHSP_SHORT=y(np)
                  Z_PHSP_SHORT=z(np)
                  U_PHSP_SHORT=u(np)
                  V_PHSP_SHORT=v(np)
                  W_PHSP_SHORT=w(np)
                  ZLAST_PHSP_SHORT=zlast_tmp
                  MUIDX_PHSP_SHORT=frMU_indx
                  IF ((i_iaea_open_for_write.EQ.1)) THEN
                      iaea_extra_ints(iaea_i_latch_out)=latch(np)
                      IF((iaea_i_zlast_out.GT.0))iaea_extra_floats(iaea_
     *                i_zlast_out)=ZLAST_PHSP_SHORT
                      IF((iaea_i_muidx_out.GT.0))iaea_extra_floats(iaea_
     *                i_muidx_out)=MUIDX_PHSP_SHORT
                  ELSE
                      iaea_extra_ints(iaea_i_latch)=latch(np)
                      IF((iaea_i_zlast.GT.0))iaea_extra_floats(iaea_i_zl
     *                ast)=ZLAST_PHSP_SHORT
                      IF((iaea_i_muidx.GT.0))iaea_extra_floats(iaea_i_mu
     *                idx)=MUIDX_PHSP_SHORT
                  END IF
                  call iaea_write_particle(i_unit_out,iaea_n_stat,iaea_q
     *            _typ(iq(np)+2),ESHORT, WT_PHSP_SHORT,X_PHSP_SHORT,Y_PH
     *            SP_SHORT,Z_PHSP_SHORT,U_PHSP_SHORT, V_PHSP_SHORT,W_PHS
     *            P_SHORT,iaea_extra_floats,iaea_extra_ints)
              END IF
          ELSE
              x_temp = (x(np)-xiso)
              y_temp = (y(np)-yiso)
              z_temp = (z(np)-ziso)
              u_temp = u(np)
              v_temp = v(np)
              w_temp = w(np)
              IF((isource .EQ. 2 .OR. isource.EQ.9 .OR. isource.EQ.20 .O
     *        R.isource.EQ.21))k_field=1
              x(np)=r_11(k_field)*x_temp + r_21(k_field)*y_temp + r_31(k
     *        _field)*z_temp
              y(np)=r_12(k_field)*x_temp + r_22(k_field)*y_temp + r_32(k
     *        _field)*z_temp
              z(np)=r_13(k_field)*x_temp + r_23(k_field)*y_temp + r_33(k
     *        _field)*z_temp
              u(np)=r_11(k_field)*u_temp + r_21(k_field)*v_temp + r_31(k
     *        _field)*w_temp
              v(np)=r_12(k_field)*u_temp + r_22(k_field)*v_temp + r_32(k
     *        _field)*w_temp
              w(np)=r_13(k_field)*u_temp + r_23(k_field)*v_temp + r_33(k
     *        _field)*w_temp
              IF ((0.EQ.0)) THEN
                  ESHORT=e(np)
                  iaea_n_stat=nhist-IHSTRY_PHSP(1)
                  IHSTRY_PHSP(1)=nhist
                  IF (( (iq(np).EQ.1) .OR. (iq(np).EQ.-1) )) THEN
                      ESHORT = ESHORT - 0.5109989461
                  END IF
                  WT_PHSP_SHORT=wt(np)
                  X_PHSP_SHORT=x(np)
                  Y_PHSP_SHORT=y(np)
                  Z_PHSP_SHORT=z(np)
                  U_PHSP_SHORT=u(np)
                  V_PHSP_SHORT=v(np)
                  W_PHSP_SHORT=w(np)
                  ZLAST_PHSP_SHORT=zlast_tmp
                  MUIDX_PHSP_SHORT=frMU_indx
                  IF ((i_iaea_open_for_write.EQ.1)) THEN
                      iaea_extra_ints(iaea_i_latch_out)=latch(np)
                      IF((iaea_i_zlast_out.GT.0))iaea_extra_floats(iaea_
     *                i_zlast_out)=ZLAST_PHSP_SHORT
                      IF((iaea_i_muidx_out.GT.0))iaea_extra_floats(iaea_
     *                i_muidx_out)=MUIDX_PHSP_SHORT
                  ELSE
                      iaea_extra_ints(iaea_i_latch)=latch(np)
                      IF((iaea_i_zlast.GT.0))iaea_extra_floats(iaea_i_zl
     *                ast)=ZLAST_PHSP_SHORT
                      IF((iaea_i_muidx.GT.0))iaea_extra_floats(iaea_i_mu
     *                idx)=MUIDX_PHSP_SHORT
                  END IF
                  call iaea_write_particle(i_unit_out,iaea_n_stat,iaea_q
     *            _typ(iq(np)+2),ESHORT, WT_PHSP_SHORT,X_PHSP_SHORT,Y_PH
     *            SP_SHORT,Z_PHSP_SHORT,U_PHSP_SHORT, V_PHSP_SHORT,W_PHS
     *            P_SHORT,iaea_extra_floats,iaea_extra_ints)
              END IF
              x(np)=x_temp + xiso
              y(np)=y_temp + yiso
              z(np)=z_temp + ziso
              u(np)=u_temp
              v(np)=v_temp
              w(np)=w_temp
          END IF
      END IF
      IF((iarg.EQ.5))RETURN
      IF ((ir(np).GT.1 .AND. edep.NE.0.0)) THEN
          IF ((iarg.EQ.0 .AND. howfarless .AND. ir(np).LT.irmax+1)) THEN
     *
              irx=mod(ir(np)-1,IMAX)
              IF((irx.EQ.0))irx=IMAX
              irz = 1 + (ir(np)-1-irx)/ijmax
              iry = 1 + ( (ir(np)-1-irx) - (irz-1)*ijmax)/IMAX
              dnear_loc=min(xbound(irx+1)-x(np),x(np)-xbound(irx), yboun
     *        d(iry+1)-y(np),y(np)-ybound(iry), zbound(irz+1)-z(np),z(np
     *        )-zbound(irz))
              IF ((IREJECT.EQ.1 .AND. dnear_loc .GT. e_range-RANGE_ECUTR
     *        R(MED(IR(NP)))* RHO(MED(IR(NP)))/RHOR(IR(NP)))) THEN
                  edep=e(np)-prm
                  hwfl_rr=1
              ELSE IF((dnear_loc .LT. vstep)) THEN
                  xi=x(np)
                  yi=y(np)
                  zi=z(np)
                  ui(1)=u(np)
                  vi(1)=v(np)
                  wi(1)=w(np)
                  edep_save=edep
                  IF ((.NOT.is_ch_step)) THEN
                      tv=vstep
                  ELSE
                      tv=tvstep
                  END IF
                  RETURN
              END IF
          END IF
          IF ((nhist_last .EQ. endep_last(ir(np)-1))) THEN
              endep_tmp(ir(np)-1) = endep_tmp(ir(np)-1) + edep*wt(np)
          ELSE
              endep(ir(np)-1)=endep(ir(np)-1)+endep_tmp(ir(np)-1)
              endep2(ir(np)-1)=endep2(ir(np)-1) + endep_tmp(ir(np)-1)*en
     *        dep_tmp(ir(np)-1)
              endep_tmp(ir(np)-1) = edep*wt(np)
              endep_last(ir(np)-1)=nhist_last
          END IF
          IF ((howfarless .AND. hwfl_rr.EQ.1)) THEN
              IF ((iq(np).EQ.-1)) THEN
                  np=np-1
              ELSE IF((iq(np).EQ.1)) THEN
                  call annih_at_rest
              END IF
              iarg=-1
          END IF
      END IF
      return
      end
      subroutine howfar
      implicit none
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      common/geom/ xbound(128+1),  ybound(128+1),  zbound(128+1),  xboun
     *d_min,  xbound_max,  ybound_min,  ybound_max,  zbound_min,  zbound
     *_max,  medsur,  dsurround(4),  IMAX,  JMAX,  KMAX,  ijmax,  irmax,
     *  howfarless
      real*4 xbound, ybound, zbound, xbound_min, xbound_max, ybound_min,
     * ybound_max, zbound_min, zbound_max,dsurround
      integer medsur,IMAX, JMAX, KMAX, ijmax,irmax
      logical howfarless
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      common/source/ esrc,  nhist,  nnread,  nshist,  nphist,  nnphsp,
     *einsrc,  xsrcold,  ysrcold,  zsrcold,  usrcold,  vsrcold,  wsrcold
     *,  weightold, mu_phspold,  frMU_indx,  zinc,  xinl,  xinu,  yinl,
     * yinu,  zinl,  zinu,  thetax,  thetay,  thetaz,  uinc,  vinc,  win
     *c,  beamarea, xcol,  ycol,  xiso,  yiso,  ziso,  phicol,  theta(60
     *000),  phi(60000),  pang(60000),  angfixed(60000),  angmin(60000),
     *  angmax(60000),  pgang(60000),  xtemp(60000),  ytemp(60000),  zte
     *mp(60000),  phicoltemp(60000), thetatemp(60000),  phitemp(60000),
     * muIndex(60000),  r_11(60000), r_12(60000), r_13(60000), r_21(6000
     *0), r_22(60000), r_23(60000), r_31(60000), r_32(60000), r_33(60000
     *), dsource, dsourcetemp(60000), ein,  eksrcm,  esrc_sp,  SSD,  ein
     *srcold, NINCSRC,  r_dbs,  ssd_dbs,  z_dbs,  iqinold,  latchold,  e
     *nflag,  dflag,  ismode,  isource,     iqin,        iqphsp,
     *           iqinc,                          SHLflag,     calflag,
     *   MLCflag,     ixinl,       ixinu,       jyinl,       jyinu,
     *  kzinl,       kzinu,       klowx,       khix,        klowy,
     * khiy,        klowz,       khiz,        survival_ratio,        nsm
     *iss,      nsblocked,     nsrjct,      nsoutside,     nmissm,
     *IPRIMARY,                                            OLDSRC,
     * npassi,                     nang,         ivary(60000),     ngang
     *(60000),       nset,            more_in_cont,                 numa
     *ng,       dose_stat,      ndbsrjct,                        i_dbs,
     *         iphatsrc,         e_split,                           i_ia
     *ea_in,      i_mu_phsp,           izscore,             i_unit_in,
     *                k_field,                       nhist_last,
     *         the_beam_code,         the_input_file,      the_vcu_input
     *_file,                        the_pegs_file,           the_shared_
     *lib,                    the_vcu_code,               the_phsp_file
      real*8    esrc,muIndex
      integer*8 nhist, nnread,nshist,nphist,nnphsp
      real*8 einsrc, xsrcold, ysrcold,usrcold,vsrcold,wsrcold,weightold,
     *               frMU_indx,zsrcold,mu_phspold
      real*4    zinc, xinl, xinu, yinl, yinu, zinl, zinu, thetax, thetay
     *, thetaz,     uinc, vinc, winc, beamarea, xcol,ycol,xiso, yiso, zi
     *so, phicol,                 theta, phi, xtemp, ytemp, ztemp, phico
     *ltemp,thetatemp, phitemp,                 pang,angfixed,angmin,ang
     *max,pgang,r_11, r_12, r_13, r_21,                       r_22, r_23
     *, r_31, r_32, r_33,dsource,dsourcetemp,
     *    ein, eksrcm, esrc_sp, SSD, NINCSRC,
     *                  r_dbs, ssd_dbs,z_dbs,survival_ratio,einsrcold
      integer*4 isource, iqin, iqphsp, iqinc,latchold,iqinold,MLCflag,SH
     *Lflag,         calflag, ixinl, ixinu, jyinl, jyinu, kzinl, kzinu,
     *                             klowx, khix, klowy, khiy, klowz, khiz
     *,                                          nsmiss, nsblocked, nsrj
     *ct,nsoutside, nmissm,enflag,                             dflag, is
     *mode, IPRIMARY, OLDSRC,npassi,nang,ivary,ngang,numang,dose_stat,
     *     ndbsrjct,i_dbs,iphatsrc,e_split,i_iaea_in,i_mu_phsp,izscore,i
     *_unit_in,          num_field,more_in_cont,nset,k_field
      integer*2 nhist_last
      character*80 the_beam_code, the_vcu_code, the_input_file,the_pegs_
     *file,        the_shared_lib,the_vcu_input_file
      character*256 the_phsp_file
      COMMON/SOURCE_FORPARALLEL/nnphsp_max, nnphsp_min
      integer*8 nnphsp_max, nnphsp_min
      INTEGER ione,  irl,  i,j,k,  irx,iry,irz
      real*8 dnearl,  dist,  xsrcp,ysrcp,zsrcp
      data ione/1/
      irl = ir(np)
      CALL HOWNEAR(dnearl,X(NP),Y(NP),Z(NP),IR(NP))
      dnear(np)=dnearl
      IF ((irl.EQ.1)) THEN
          idisc = 1
          return
      ELSE IF((irl .EQ. irmax + 1)) THEN
          IF ((u(np) .GT. 0.0)) THEN
              dist = (xbound_min - x(np))/u(np)
              IF ((dist.GT.0.)) THEN
                  ysrcp = y(np) + dist*v(np)
                  zsrcp = z(np) + dist*w(np)
                  IF (( (ysrcp .GE. ybound_min) .AND. (ysrcp .LE. ybound
     *            _max) .AND. (zsrcp .GE. zbound_min) .AND. (zsrcp .LE.
     *            zbound_max))) THEN
                      DO 4541 j=1,JMAX
                          IF (( (ybound(j) .LE. ysrcp) .AND. (ysrcp .LE.
     *                     ybound(j+1)) )) THEN
                              DO 4551 k=1,KMAX
                                  IF (( (zbound(k) .LE. zsrcp) .AND. (zs
     *                            rcp .LE. zbound(k+1)) )) THEN
                                      IF ((dist .LT. ustep)) THEN
                                          ustep = dist
                                          irnew = IMAX*j + klowx + ijmax
     *                                    *k
                                      ELSE
                                          irnew=ir(np)
                                      END IF
                                      return
                                  END IF
4551                          CONTINUE
4552                          CONTINUE
                          END IF
4541                  CONTINUE
4542                  CONTINUE
                      stop ' * Stopped in howfar on lower x-plane. Canno
     *t find irnew! *'
                  END IF
              END IF
          ELSE IF((u(np) .LT. 0.0)) THEN
              dist = (xbound_max - x(np))/u(np)
              IF ((dist.GT.0.)) THEN
                  ysrcp = y(np) + dist*v(np)
                  zsrcp = z(np) + dist*w(np)
                  IF (( (ysrcp .GE. ybound_min) .AND. (ysrcp .LE. ybound
     *            _max) .AND. (zsrcp .GE. zbound_min) .AND. (zsrcp .LE.
     *            zbound_max))) THEN
                      DO 4561 j=1,JMAX
                          IF (( (ybound(j) .LE. ysrcp) .AND. (ysrcp .LE.
     *                     ybound(j+1)) )) THEN
                              DO 4571 k=1,KMAX
                                  IF (((zbound(k).LE. zsrcp).AND.(zsrcp.
     *                            LE. zbound(k+1)))) THEN
                                      IF ((dist .LT. ustep)) THEN
                                          ustep = dist
                                          irnew = IMAX*j + khix + ijmax*
     *                                    k
                                      ELSE
                                          irnew=ir(np)
                                      END IF
                                      return
                                  END IF
4571                          CONTINUE
4572                          CONTINUE
                          END IF
4561                  CONTINUE
4562                  CONTINUE
                      stop ' * Stopped in howfar on upper x-plane. Canno
     *t find irnew! *'
                  END IF
              END IF
          END IF
          IF ((v(np) .GT. 0.0)) THEN
              dist = (ybound_min - y(np))/v(np)
              IF ((dist.GT.0.)) THEN
                  xsrcp = x(np) + dist*u(np)
                  zsrcp = z(np) + dist*w(np)
                  IF (( (xsrcp .GE. xbound_min) .AND. (xsrcp .LE. xbound
     *            _max) .AND. (zsrcp .GE. zbound_min) .AND. (zsrcp .LE.
     *            zbound_max))) THEN
                      DO 4581 i=1,IMAX
                          IF (( (xbound(i) .LE. xsrcp) .AND. (xsrcp .LE.
     *                     xbound(i+1)) )) THEN
                              DO 4591 k=1,KMAX
                                  IF (( (zbound(k) .LE. zsrcp) .AND. (zs
     *                            rcp .LE. zbound(k+1)))) THEN
                                      IF ((dist .LT. ustep)) THEN
                                          ustep = dist
                                          irnew = i + klowy + ijmax*k
                                      ELSE
                                          irnew=ir(np)
                                      END IF
                                      return
                                  END IF
4591                          CONTINUE
4592                          CONTINUE
                          END IF
4581                  CONTINUE
4582                  CONTINUE
                      stop ' * Stopped in howfar on lower y-plane. Canno
     *t find irnew! *'
                  END IF
              END IF
          ELSE IF((v(np) .LT. 0.0)) THEN
              dist = (ybound_max - y(np))/v(np)
              IF ((dist.GT.0.)) THEN
                  xsrcp = x(np) + dist*u(np)
                  zsrcp = z(np) + dist*w(np)
                  IF (( (xsrcp .GE. xbound_min) .AND. (xsrcp .LE. xbound
     *            _max) .AND. (zsrcp .GE. zbound_min) .AND. (zsrcp .LE.
     *            zbound_max))) THEN
                      DO 4601 i=1,IMAX
                          IF (( (xbound(i) .LE. xsrcp) .AND. (xsrcp .LE.
     *                     xbound(i+1)) )) THEN
                              DO 4611 k=1,KMAX
                                  IF (( (zbound(k) .LE. zsrcp) .AND. (zs
     *                            rcp .LE. zbound(k+1)) )) THEN
                                      IF ((dist .LT. ustep)) THEN
                                          ustep = dist
                                          irnew = i + khiy + ijmax*k
                                      ELSE
                                          irnew=ir(np)
                                      END IF
                                      return
                                  END IF
4611                          CONTINUE
4612                          CONTINUE
                          END IF
4601                  CONTINUE
4602                  CONTINUE
                      stop ' * Stopped in howfar on upper y-plane. Canno
     *t find irnew! *'
                  END IF
              END IF
          END IF
          IF ((w(np) .GT. 0.0)) THEN
              dist = (zbound_min - z(np))/w(np)
              IF ((dist.GT.0.)) THEN
                  xsrcp = x(np) + dist*u(np)
                  ysrcp = y(np) + dist*v(np)
                  IF (( (xsrcp .GE. xbound_min) .AND. (xsrcp .LE. xbound
     *            _max) .AND. (ysrcp .GE. ybound_min) .AND. (ysrcp .LE.
     *            ybound_max))) THEN
                      DO 4621 i=1,IMAX
                          IF (( (xbound(i) .LE. xsrcp) .AND. (xsrcp .LE.
     *                     xbound(i+1)) )) THEN
                              DO 4631 j=1,JMAX
                                  IF (( (ybound(j) .LE. ysrcp) .AND. (ys
     *                            rcp .LE. ybound(j+1)) )) THEN
                                      IF ((dist .LT. ustep)) THEN
                                          ustep = dist
                                          irnew = i + klowz + IMAX*j
                                      ELSE
                                          irnew=ir(np)
                                      END IF
                                      return
                                  END IF
4631                          CONTINUE
4632                          CONTINUE
                          END IF
4621                  CONTINUE
4622                  CONTINUE
                      stop ' * Stopped in howfar on lower z-plane. Canno
     *t find irnew! *'
                  END IF
              END IF
          ELSE IF((w(np) .LT. 0.0)) THEN
              dist = (zbound_max-z(np))/w(np)
              IF ((dist.GT.0.)) THEN
                  xsrcp = x(np) + dist*u(np)
                  ysrcp = y(np) + dist*v(np)
                  IF (( (xsrcp .GE. xbound_min) .AND. (xsrcp .LE. xbound
     *            _max) .AND. (ysrcp .GE. ybound_min) .AND. (ysrcp .LE.
     *            ybound_max))) THEN
                      DO 4641 i=1,IMAX
                          IF (( (xbound(i) .LE. xsrcp) .AND. (xsrcp .LE.
     *                     xbound(i+1)) )) THEN
                              DO 4651 j=1,JMAX
                                  IF (( (ybound(j) .LE. ysrcp) .AND. (ys
     *                            rcp .LE. ybound(j+1)) )) THEN
                                      IF ((dist .LT. ustep)) THEN
                                          ustep = dist
                                          irnew = i + khiz + IMAX*j
                                      ELSE
                                          irnew=ir(np)
                                      END IF
                                      return
                                  END IF
4651                          CONTINUE
4652                          CONTINUE
                          END IF
4641                  CONTINUE
4642                  CONTINUE
                      stop ' * Stopped in howfar on upper z-plane. Canno
     *t find irnew! *'
                  END IF
              END IF
          END IF
          IF ((u(np).GT.0.)) THEN
              xsrcp=(xbound_max+dsurround(1)-x(np))/u(np)
          ELSE IF((u(np).LT.0.)) THEN
              xsrcp=(xbound_min-dsurround(1)-x(np))/u(np)
          ELSE
              xsrcp=1.0E10
          END IF
          IF ((v(np).GT.0.)) THEN
              ysrcp=(ybound_max+dsurround(2)-y(np))/v(np)
          ELSE IF((v(np).LT.0.)) THEN
              ysrcp=(ybound_min-dsurround(2)-y(np))/v(np)
          ELSE
              ysrcp=1.0E10
          END IF
          IF ((w(np).GT.0.)) THEN
              zsrcp=(zbound_max+dsurround(3)-z(np))/w(np)
          ELSE IF((w(np).LT.0.)) THEN
              zsrcp=(zbound_min-dsurround(4)-z(np))/w(np)
          ELSE
              zsrcp=1.0E10
          END IF
          dist=min(xsrcp,ysrcp,zsrcp)
          IF ((dist.LT. ustep)) THEN
              ustep=dist
              irnew=1
          ELSE
              irnew=ir(np)
          END IF
      ELSE IF((howfarless)) THEN
          dist=1e20
          IF ((w(np) .GT. 0.0)) THEN
              dist = min(dist,(zbound_max-z(np))/w(np))
          ELSE IF((w(np) .LT. 0.0)) THEN
              dist = min(dist,-( z(np) - zbound_min)/w(np))
          END IF
          IF ((u(np) .GT. 0.0)) THEN
              dist = min(dist,(xbound_max-x(np))/u(np))
          ELSE IF((u(np) .LT. 0.0)) THEN
              dist = min(dist,-( x(np) - xbound_min)/u(np))
          END IF
          IF ((v(np) .GT. 0.0)) THEN
              dist = min(dist,(ybound_max-y(np))/v(np))
          ELSE IF((v(np) .LT. 0.0)) THEN
              dist = min(dist,-( y(np) - ybound_min)/v(np))
          END IF
          IF ((dist .LT. ustep)) THEN
              ustep=dist
              IF ((enflag .GT. 1)) THEN
                  irnew=irmax+1
              ELSE
                  irnew=1
              END IF
          ELSE
              irnew=irl
          END IF
          return
      ELSE
          irx=mod(irl-1,IMAX)
          IF((irx.EQ.0))irx=IMAX
          irz = 1 + (irl-1-irx)/ijmax
          iry = 1 + ( (irl-1-irx) - (irz-1)*ijmax)/IMAX
          IF ((w(np) .GT. 0.0)) THEN
              dist = (zbound(irz+1)-z(np))/w(np)
              IF ((dist .LT. ustep)) THEN
                  ustep=dist
                  IF ((irz .NE. KMAX)) THEN
                      irnew=irl+ijmax
                  ELSE IF((enflag .GT. 1)) THEN
                      irnew=irmax+1
                  ELSE
                      irnew=1
                  END IF
              END IF
          ELSE IF((w(np) .LT. 0.0)) THEN
              dist = -( z(np) - zbound(irz))/w(np)
              IF ((dist .LT. ustep)) THEN
                  ustep = dist
                  IF ((irz .NE. 1)) THEN
                      irnew=irl-ijmax
                  ELSE IF((enflag .GT. 1)) THEN
                      irnew=irmax+1
                  ELSE
                      irnew = 1
                  END IF
              END IF
          END IF
          IF ((u(np) .GT. 0.0)) THEN
              dist = (xbound(irx+1)-x(np))/u(np)
              IF ((dist .LT. ustep)) THEN
                  ustep=dist
                  IF ((irx .NE. IMAX)) THEN
                      irnew=irl+ione
                  ELSE IF((enflag .GT. 1)) THEN
                      irnew=irmax+1
                  ELSE
                      irnew=1
                  END IF
              END IF
          ELSE IF((u(np) .LT. 0.0)) THEN
              dist = -( x(np) - xbound(irx))/u(np)
              IF ((dist .LT. ustep)) THEN
                  ustep = dist
                  IF ((irx .NE. 1)) THEN
                      irnew=irl-ione
                  ELSE IF((enflag .GT. 1)) THEN
                      irnew=irmax+1
                  ELSE
                      irnew = 1
                  END IF
              END IF
          END IF
          IF ((v(np) .GT. 0.0)) THEN
              dist = (ybound(iry+1)-y(np))/v(np)
              IF ((dist .LT. ustep)) THEN
                  ustep=dist
                  IF ((iry .NE. JMAX)) THEN
                      irnew=irl+IMAX
                  ELSE IF((enflag .GT. 1)) THEN
                      irnew=irmax+1
                  ELSE
                      irnew=1
                  END IF
              END IF
          ELSE IF((v(np) .LT. 0.0)) THEN
              dist = -( y(np) - ybound(iry))/v(np)
              IF ((dist .LT. ustep)) THEN
                  ustep = dist
                  IF ((iry .NE. 1)) THEN
                      irnew=irl-IMAX
                  ELSE IF((enflag .GT. 1)) THEN
                      irnew=irmax+1
                  ELSE
                      irnew = 1
                  END IF
              END IF
          END IF
          return
      END IF
      end
      SUBROUTINE HOWNEAR (TPERP,X,Y,Z,IRL)
      implicit none
      common/geom/ xbound(128+1),  ybound(128+1),  zbound(128+1),  xboun
     *d_min,  xbound_max,  ybound_min,  ybound_max,  zbound_min,  zbound
     *_max,  medsur,  dsurround(4),  IMAX,  JMAX,  KMAX,  ijmax,  irmax,
     *  howfarless
      real*4 xbound, ybound, zbound, xbound_min, xbound_max, ybound_min,
     * ybound_max, zbound_min, zbound_max,dsurround
      integer medsur,IMAX, JMAX, KMAX, ijmax,irmax
      logical howfarless
      real*8 TPERP,  X,  Y,  Z
      integer*4 IRL
      integer*4 IRX,IRY,IRZ
      TPERP=1.e10
      IF ((IRL.EQ.1)) THEN
          TPERP=0
      ELSE IF((IRL.EQ.irmax+1)) THEN
          IF (((X.GE.xbound_min .AND. X.LE.xbound_max .AND. Y.GE.ybound_
     *    min .AND. Y.LE.ybound_max) .AND. (Z.GE.zbound_max .OR. Z.LE.zb
     *    ound_min))) THEN
              TPERP=MIN(TPERP,ABS(Z-zbound_min),ABS(Z-zbound_max))
          ELSE
              IF ((Y.GE.ybound_min .AND. Y.LE.ybound_max .AND. (X.LE.xbo
     *        und_min .OR. X.GE.xbound_max))) THEN
                  TPERP=MIN(TPERP,ABS(X-xbound_min),ABS(X-xbound_max))
              ELSE IF((X.GE.xbound_min .AND. X.LE.xbound_max .AND. (Y.LE
     *        .ybound_min .OR. Y.GE.ybound_max))) THEN
                  TPERP=MIN(TPERP,ABS(Y-ybound_min),ABS(Y-ybound_max))
              ELSE IF(((X.GE.xbound_max .OR. X.LE.xbound_min) .AND. (Y.G
     *        E.ybound_max .OR. Y.LE.ybound_min))) THEN
                  TPERP=MIN(TPERP**2,(X-xbound_max)**2+(Y-ybound_max)**2
     *            , (X-xbound_max)**2+(Y-ybound_min)**2, (X-xbound_min)*
     *            *2+(Y-ybound_max)**2, (X-xbound_min)**2+(Y-ybound_min)
     *            **2)
                  TPERP=SQRT(TPERP)
              ELSE
                  TPERP=0.
              END IF
              IF ((Z.LT.zbound_min)) THEN
                  TPERP=SQRT(TPERP**2+(Z-zbound_min)**2)
              ELSE IF((Z.GT.zbound_max)) THEN
                  TPERP=SQRT(TPERP**2+(Z-zbound_max)**2)
              END IF
          END IF
          TPERP=MIN(TPERP,ABS(X-(xbound_min-dsurround(1))), ABS(X-(xboun
     *    d_max+dsurround(1))), ABS(Y-(ybound_min-dsurround(2))), ABS(Y-
     *    (ybound_max+dsurround(2))), ABS(Z-(zbound_min-dsurround(4))),
     *    ABS(Z-(zbound_max+dsurround(3))))
      ELSE IF((howfarless)) THEN
          TPERP=MIN(TPERP,X-xbound_min,xbound_max-X, Y-ybound_min,ybound
     *    _max-Y, Z-zbound_min,zbound_max-Z)
      ELSE
          IRX=mod(IRL-1,IMAX)
          IF((IRX.EQ.0))IRX=IMAX
          IRZ = 1 + (IRL-1-IRX)/ijmax
          IRY = 1 + ( (IRL-1-IRX) - (IRZ-1)*ijmax)/IMAX
          TPERP=min(TPERP,(xbound(irx+1)-X),(X-xbound(irx)))
          TPERP=min(TPERP,(ybound(iry+1)-Y),(Y-ybound(iry)))
          TPERP=min(TPERP,(zbound(irz+1)-Z),(Z-zbound(irz)))
      END IF
      return
      end
      SUBROUTINE DATETIME(DUMMY)
      implicit none
      COMMON/TIMEINFO/ TIMEN,  DATEN,  DNTIME
      character timen*8, daten*11, dntime*24
      INTEGER DUMMY
      call egs_get_fdate(DNTIME)
      daten(1:7)=dntime(5:11)
      daten(8:11)=dntime(21:24)
      timen(1:8)=dntime(12:19)
      RETURN
      end
      subroutine write_dose(iimax,jjmax,kkmax,xbnd,ybnd,zbnd,dd,ddun,uni
     *tnum, writemax20)
      IMPLICIT NONE
      INTEGER iimax,  jjmax,  kkmax,  ijkmax,  irtmp,  writemax20,  unit
     *num,  ii,jj,kk,mm,nn,  NUMFRAC,  MAXI(20),MAXJ(20),MAXK(20), egs_o
     *pen_file
      REAL xbnd(128+1),  ybnd(128+1),  zbnd(128+1),  MAXDOS(20),  MAXDOS
     *AVG,  ERRMAXDOSAVG,  ERR50AVG,  ERR50FRAC,   DOSEFRAC,  DOSEmin,
     *ARUFRAC
      REAL*8 dd( 2097153),  ddun( 2097153)
      unitnum=egs_open_file(unitnum,0,1,'.3ddose')
      write(unitnum,*)iimax,jjmax,kkmax
      write(unitnum,*)(xbnd(ii),ii=1,iimax+1)
      write(unitnum,*)(ybnd(jj),jj=1,jjmax+1)
      write(unitnum,*)(zbnd(kk),kk=1,kkmax+1)
      write(unitnum,*)(((dd((ii+(jj-1)*iimax+(kk-1)*iimax*jjmax)),ii=1,i
     *imax),jj=1,jjmax),kk=1,kkmax)
      write(unitnum,*)(((ddun((ii+(jj-1)*iimax+(kk-1)*iimax*jjmax)),ii=1
     *,iimax),jj=1,jjmax),kk=1,kkmax)
      close(unitnum)
      ijkmax=iimax*jjmax*kkmax
      IF ((writemax20.EQ.1)) THEN
          DO 4661 mm=1,20
              MAXDOS(mm)=0.0
4661      CONTINUE
4662      CONTINUE
          DO 4671 ii=1,iimax
              DO 4681 jj=1,jjmax
                  DO 4691 kk=1,kkmax
                      irtmp = (ii+(jj-1)*iimax+(kk-1)*iimax*jjmax)
                      DO 4701 mm=1,min(20,ijkmax)
                          IF ((dd(irtmp).GE.MAXDOS(mm))) THEN
                              DO 4711 nn=min(20,ijkmax),mm+1,-1
                                  MAXDOS(nn)=MAXDOS(nn-1)
                                  MAXI(nn)=MAXI(nn-1)
                                  MAXJ(nn)=MAXJ(nn-1)
                                  MAXK(nn)=MAXK(nn-1)
4711                          CONTINUE
4712                          CONTINUE
                              MAXDOS(mm)=dd(irtmp)
                              MAXI(mm)=ii
                              MAXJ(mm)=jj
                              MAXK(mm)=kk
                              GO TO4702
                          END IF
4701                  CONTINUE
4702                  CONTINUE
4691              CONTINUE
4692              CONTINUE
4681          CONTINUE
4682          CONTINUE
4671      CONTINUE
4672      CONTINUE
          MAXDOSAVG=0.
          ERRMAXDOSAVG=0.
          DO 4721 mm=1,min(20,ijkmax)
              MAXDOSAVG=MAXDOSAVG+MAXDOS(mm)
              ERRMAXDOSAVG=ERRMAXDOSAVG+ddun((MAXI(mm)+(MAXJ(mm)-1)*iima
     *        x+(MAXK(mm)-1)*iimax*jjmax))
4721      CONTINUE
4722      CONTINUE
          MAXDOSAVG=MAXDOSAVG/float(min(20,ijkmax))
          ERRMAXDOSAVG=ERRMAXDOSAVG/float(min(20,ijkmax))
          ERR50AVG=0.
          ERR50FRAC=0.
          DOSEFRAC=0.5
          DOSEmin = DOSEFRAC*MAXDOS(1)
          ARUFRAC=0.
          NUMFRAC=0
          DO 4731 ii=1,iimax
              DO 4741 jj=1,jjmax
                  DO 4751 kk=1,kkmax
                      irtmp = (ii+(jj-1)*iimax+(kk-1)*iimax*jjmax)
                      IF ((dd(irtmp) .GT. DOSEmin )) THEN
                          ERR50AVG =ERR50AVG +ddun(irtmp)
                          ERR50FRAC=ERR50FRAC+ddun(irtmp)*dd(irtmp)
                          ARUFRAC =ARUFRAC +ddun(irtmp)**2
                          NUMFRAC =NUMFRAC+1
                      END IF
4751              CONTINUE
4752              CONTINUE
4741          CONTINUE
4742          CONTINUE
4731      CONTINUE
4732      CONTINUE
          IF (( (NUMFRAC .NE. 0) .AND. (MAXDOS(1) .NE. 0.0))) THEN
              ERR50AVG=ERR50AVG/NUMFRAC
              ERR50FRAC=ERR50FRAC/(NUMFRAC*MAXDOS(1))
              ARUFRAC=SQRT(ARUFRAC/NUMFRAC)
          ELSE
              WRITE(6,4760)DOSEFRAC
4760          FORMAT(' Statistics really bad - analysis of average relat
     *ative uncertainty'/ ' on voxels with dose > ',F12.5,'*Dmax is mean
     *ingless')
          END IF
          WRITE(6,4770)min(20,ijkmax), MAXDOSAVG, min(20,ijkmax), ERRMAX
     *    DOSAVG*100., DOSEFRAC, ERR50AVG*100., DOSEFRAC, ERR50FRAC*100,
     *     DOSEFRAC, ARUFRAC*100., NUMFRAC, DOSEFRAC, min(20,ijkmax)
          WRITE(1,4770)min(20,ijkmax), MAXDOSAVG, min(20,ijkmax), ERRMAX
     *    DOSAVG*100., DOSEFRAC, ERR50AVG*100., DOSEFRAC, ERR50FRAC*100,
     *     DOSEFRAC, ARUFRAC*100., NUMFRAC, DOSEFRAC, min(20,ijkmax)
4770      FORMAT(/' average of ',I2,' highest doses = ',T62,E12.5,' Gy/p
     *article'/ ' average % error of ',I2,' highest doses = ',T60,F9.3,'
     * %'/ ' average % error of doses >',F7.3,' of max dose = ',T60,F9.3
     *,' %'/ ' (average error of doses >',F7.3,' of max dose)/(max dose)
     * =',T60,F9.3,' %'/ ' quadrature average % error of doses >',F7.3,'
     * of max dose =',T60,F9.3,' %'/ ' There are ',I11,' voxelswith dose
     * > ',F7.3,' of max dose ' // ' ',I2,' highest doses: '/ ' '/ '    
     *    dose (Gy/particle)                     (x,y,z) (cm)'/'        
     *-----------------                      ------------'/)
          DO 4781 mm=1,min(20,ijkmax)
              WRITE(6,4790)MAXDOS(mm),ddun((MAXI(mm)+(MAXJ(mm)-1)*iimax+
     *        (MAXK(mm)-1)*iimax*jjmax))*100, (xbnd(MAXI(mm)+1)+xbnd(MAX
     *        I(mm)))/2., (ybnd(MAXJ(mm)+1)+ybnd(MAXJ(mm)))/2., (zbnd(MA
     *        XK(mm)+1)+zbnd(MAXK(mm)))/2.
              WRITE(1,4790)MAXDOS(mm),ddun((MAXI(mm)+(MAXJ(mm)-1)*iimax+
     *        (MAXK(mm)-1)*iimax*jjmax))*100, (xbnd(MAXI(mm)+1)+xbnd(MAX
     *        I(mm)))/2., (ybnd(MAXJ(mm)+1)+ybnd(MAXJ(mm)))/2., (zbnd(MA
     *        XK(mm)+1)+zbnd(MAXK(mm)))/2.
4790          FORMAT(' ',E12.5,' +/- ',F12.5,' %  ( ',F12.5,',',F12.5,',
     *',F12.5,' )')
4781      CONTINUE
4782      CONTINUE
      END IF
      RETURN
      end
      subroutine write_phantom(iunit,nmed,media,estepe, iimax,jjmax,kkma
     *x,xbnd,ybnd,zbnd, rho,med)
      IMPLICIT NONE
      Character*4 media(24,7)
      INTEGER iunit,  nmed,  iimax,  jjmax,  kkmax,  ii,jj,kk,  egs_open
     *_file
      integer*2 med( 2097154)
      REAL xbnd(128+1),  ybnd(128+1),  zbnd(128+1),  estepe(7)
      real*8 rho( 2097154)
      iunit=egs_open_file(iunit,0,1,'.egsphant')
      WRITE(iunit,'(i2)') nmed
      DO 4801 ii=1,nmed
          Write(iunit,'(24a1)') (media(jj,ii),jj=1,24)
4801  CONTINUE
4802  CONTINUE
      WRITE(iunit,*) (estepe(ii),ii=1,nmed)
      WRITE(iunit,'(3i5)') iimax,jjmax,kkmax
      WRITE(iunit,*) (xbnd(ii),ii=1,iimax+1)
      WRITE(iunit,*) (ybnd(jj),jj=1,jjmax+1)
      WRITE(iunit,*) (zbnd(kk),kk=1,kkmax+1)
      DO 4811 kk=1,kkmax
          DO 4821 jj=1,jjmax
              WRITE(iunit,1399) (med((1 + ii + (jj-1)*iimax + (kk-1)*iim
     *        ax*jjmax)),ii=1,iimax)
4821      CONTINUE
4822      CONTINUE
          WRITE(iunit,*)
4811  CONTINUE
4812  CONTINUE
1399  FORMAT(128i1)
      DO 4831 kk=1,kkmax
          DO 4841 jj=1,jjmax
              WRITE(iunit,*) (rho((1 + ii + (jj-1)*iimax + (kk-1)*iimax*
     *        jjmax)),ii=1,iimax)
4841      CONTINUE
4842      CONTINUE
          WRITE(iunit,*)
4831  CONTINUE
4832  CONTINUE
      close(iunit)
      RETURN
      end
      subroutine combine_results(file_name)
      implicit none
      common/score/endep( 2097153), endep2( 2097153), temp2, planarefe,
     *planarefp,planarfe,planarfp, nestep, endep_tmp( 2097153), i_phsp_o
     *ut,i_muidx_out,i_unit_out,IWATCH,mxnp, endep_last( 2097153)
      REAL*8 endep, endep2, temp2,planarefe, planarefp, planarfe, planar
     *fp
      integer*8 nestep
      real endep_tmp
      integer i_phsp_out,   i_muidx_out,    i_unit_out,  IWATCH,mxnp
      integer*2 endep_last
      character*(*) file_name
      integer*4 I,IMAX,JMAX,KMAX,lnblnk1
      REAL*4 TENDEP( 2097153), TENDEP2( 2097153)
      REAL*8 TTEMP2
      logical first_time
      data first_time/.true./
      save first_time
      IF ((first_time)) THEN
          WRITE(6,4850)
          WRITE(1,4850)
4850      FORMAT(/1X,'Summing the following .pardose files')
          WRITE(6,4860)
          WRITE(1,4860)
4860      FORMAT(1X,'------------------------------------'/)
      END IF
      WRITE(6,4870)file_name(:lnblnk1(file_name))
      WRITE(1,4870)file_name(:lnblnk1(file_name))
4870  FORMAT(A)
      file_name=file_name(:lnblnk1(file_name))//char(0)
      call read_pardose(TTEMP2,IMAX,JMAX,KMAX,TENDEP,TENDEP2,file_name)
      IF ((first_time)) THEN
          first_time = .false.
          TEMP2=0.
          DO 4881 I=1,IMAX*JMAX*KMAX
              endep(I)=0.0
              endep2(I)=0.0
4881      CONTINUE
4882      CONTINUE
      END IF
      DO 4891 I=1,IMAX*JMAX*KMAX
          endep(i)=endep(i)+tendep(i)
          endep2(i)=endep2(i)+ tendep2(i)
4891  CONTINUE
4892  CONTINUE
      TEMP2=TEMP2+TTEMP2
      return
      end
      integer function ibsearch4(a, nsh, b)
      real*4 b(*)
      real*8 a
      integer min,max,help,nsh
      real*4 x
      min = 1
      max = nsh
      x = a
4901  IF(min.GE.max-1)GO TO 4902
          help = (max+min) / 2
          IF (( b(help).LE.x)) THEN
              min = help
          ELSE
              max = help
          END IF
      GO TO 4901
4902  CONTINUE
      ibsearch4 = min
      return
      end
      subroutine modify_tmxs(mindel)
      implicit none
      COMMON/BOUNDS/ECUT,PCUT,VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/ELECIN/ esig_e(7),psig_e(7), esige_max, psige_max, range_ep
     *(0:1,500,7), E_array(500,7), etae_ms0(500,7),etae_ms1(500,7),etap_
     *ms0(500,7),etap_ms1(500,7),q1ce_ms0(500,7),q1ce_ms1(500,7),q1cp_ms
     *0(500,7),q1cp_ms1(500,7),q2ce_ms0(500,7),q2ce_ms1(500,7),q2cp_ms0(
     *500,7),q2cp_ms1(500,7),blcce0(500,7),blcce1(500,7), EKE0(7),EKE1(7
     *), XR0(7),TEFF0(7),BLCC(7),XCC(7), ESIG0(500,7),ESIG1(500,7),PSIG0
     *(500,7),PSIG1(500,7),EDEDX0(500,7),EDEDX1(500,7),PDEDX0(500,7),PDE
     *DX1(500,7),EBR10(500,7),EBR11(500,7),PBR10(500,7),PBR11(500,7),PBR
     *20(500,7),PBR21(500,7),TMXS0(500,7),TMXS1(500,7), expeke1(7), IUNR
     *ST(7),EPSTFL(7),IAPRIM(7), sig_ismonotone(0:1,7)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR( 2097154),MED( 2097154),IRAYLR,
     *IPHOTONUCR( 2097154)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common/ET_control/ SMAXIR,estepe,ximax,  skindepth_for_bca,transpo
     *rt_algorithm, bca_algorithm,exact_bca,spin_effects
      real*8 smaxir,  estepe,  ximax,      skindepth_for_bca
      integer*4 transport_algorithm, bca_algorithm
      logical exact_bca,  spin_effects
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      real*8 eil,ei,p2,beta2,chi_a2,elke,eke,dedx0,estepx,si,sip1,tmxs_o
     *rig, mindel
      integer*4 i,neke,leil,lelke
      DO 4911 medium=1,nmed
          neke = meke(medium)
          eil = (1 - eke0(medium))/eke1(medium)
          leil = 1
          ei = Exp(eil)
          leil = 1
          p2 = ei*(ei+2*rm)
          beta2 = p2/(p2+rm*rm)
          chi_a2 = Xcc(medium)/(4*p2*blcc(medium))
          dedx0=ededx1(Leil,MEDIUM)*eil+ededx0(Leil,MEDIUM)
          estepx = 2*p2*beta2*dedx0/ei/Xcc(medium)/(Log(1+1./chi_a2)*(1+
     *    chi_a2)-1)
          estepx = estepx*ximax
          IF (( estepx .GT. estepe )) THEN
              estepx = estepe
          END IF
          si = estepx*ei/dedx0
          IF((si .LT. mindel/2.))si = mindel/2.
          DO 4921 i=1,neke - 1
              elke = (i + 1 - eke0(medium))/eke1(medium)
              lelke = i
              tmxs_orig=tmxs1(i,MEDIUM)*elke+tmxs0(i,MEDIUM)
              eke = Exp(elke)
              lelke = i+1
              p2 = eke*(eke+2*rm)
              beta2 = p2/(p2+rm*rm)
              chi_a2 = Xcc(medium)/(4*p2*blcc(medium))
              dedx0=ededx1(Lelke,MEDIUM)*elke+ededx0(Lelke,MEDIUM)
              estepx = 2*p2*beta2*dedx0/eke/ Xcc(medium)/(Log(1+1./chi_a
     *        2)*(1+chi_a2)-1)
              estepx = estepx*ximax
              IF (( estepx .GT. estepe )) THEN
                  estepx = estepe
              END IF
              sip1 = estepx*eke/dedx0
              IF((sip1 .LT. mindel/2.))sip1 = mindel/2.
              tmxs1(i,medium) = (sip1 - si)*eke1(medium)
              tmxs0(i,medium) = sip1 - tmxs1(i,medium)*elke
              si = sip1
4921      CONTINUE
4922      CONTINUE
          tmxs0(neke,medium) = tmxs0(neke - 1,medium)
          tmxs1(neke,medium) = tmxs1(neke - 1,medium)
4911  CONTINUE
4912  CONTINUE
      return
      end
      SUBROUTINE GET_INPUT
      IMPLICIT NONE
      COMMON/GetInput/ ALLOWED_INPUTS(100,0:5),   VALUES_SOUGHT(100),  C
     *HAR_VALUE(100,100),  VALUE(100,100),  DEFAULT(100),  VALUE_MIN(100
     *),  VALUE_MAX(100),  NVALUE(100),  TYPE(100),      ERROR_FLAGS(100
     *),   i_errors,  NMIN, NMAX,   ERROR_FLAG,  DELIMETER
      character ALLOWED_INPUTS*64,VALUES_SOUGHT*64, CHAR_VALUE*256,DELIM
     *ETER*64
      real*8 VALUE,DEFAULT,VALUE_MIN,VALUE_MAX
      integer*4 NVALUE,TYPE,NMIN,NMAX,ERROR_FLAG,ERROR_FLAGS,i_errors
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      CHARACTER*256 TEXT
      CHARACTER*256 KEEPTEXT
      CHARACTER*256 ORIGTEXT
      CHARACTER*256 TEXTPIECE
      CHARACTER*40 DELIM_START
      CHARACTER*40 DELIM_END
      CHARACTER*64 VNAME
      CHARACTER*64 VNAME1
      integer*4 CURSOR
      integer*4 IINDEX
      integer*4 iVNAME
      integer*4 IVAL
      integer*4 UNITNUM
      integer*4 ERR
      integer*4 I,J,K,CHECK
      integer*4 LINE
      integer*4 INT_VALUE
      integer*4 INT_VALUE_MIN
      integer*4 INT_VALUE_MAX
      logical ALLOWED
      logical START_FOUND
      integer*4 ifound,length,lll,Kconvert
      integer*4 lnblnk1
      logical IDEBUG
      character*1 blank
      integer*4 error_level
      integer*4 the_level
      data blank/' '/
      data error_level/1/
      save error_level
      IDEBUG = .false.
      ERROR_FLAG = 0
      IF ((IDEBUG)) THEN
          WRITE(6,4930)NMIN,NMAX, 100
4930      FORMAT(' Entering get_inputs seeking values', I5,' to', I5, ' 
     *with a max allowed of',I5)
      END IF
      IF ((NMAX .LT. NMIN .OR. NMAX .GT. 100)) THEN
          WRITE(6,4940)NMAX, NMIN, 100
4940      FORMAT(//' Error entering get_inputs: Asked for values from',I
     *5,' to',I5, '    with a max of',I5//' This implies a bug in the ca
     *lling routine'/ ' Fix it up and try again.  Stopping now.')
          STOP
      END IF
      ERR=i_errors
      UNITNUM=i_input
      DELIM_START=':START '//DELIMETER(:lnblnk1(DELIMETER))//':'
      DELIM_END=':STOP '//DELIMETER(:lnblnk1(DELIMETER))//':'
      DO 4951 Kconvert=1,lnblnk1(DELIM_START)
          CURSOR=ICHAR(DELIM_START(Kconvert:Kconvert))
          IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
              CURSOR=CURSOR-32
              DELIM_START(Kconvert:Kconvert)=CHAR(CURSOR)
          END IF
4951  CONTINUE
4952  CONTINUE
      DO 4961 Kconvert=1,lnblnk1(DELIM_END)
          CURSOR=ICHAR(DELIM_END(Kconvert:Kconvert))
          IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
              CURSOR=CURSOR-32
              DELIM_END(Kconvert:Kconvert)=CHAR(CURSOR)
          END IF
4961  CONTINUE
4962  CONTINUE
      IF ((IDEBUG)) THEN
          WRITE(6,4970)DELIM_START,DELIM_END
4970      FORMAT(' start and stop delimeters are:'/ A/A/)
      END IF
      DO 4981 I=NMIN,NMAX
          REWIND (UNITNUM)
          LINE=0
          CHECK=0
          ERROR_FLAGS(I)=0
          IF ((TYPE(I) .EQ. 0 .OR. TYPE(I) .EQ. 1)) THEN
              VALUE(I,1) = DEFAULT(I)
          END IF
          IF ((TYPE(I) .EQ. 3)) THEN
              VALUE(I,1) = 0
          END IF
          VNAME=VALUES_SOUGHT(I)
          iVNAME=lnblnk1(VNAME)
          IF (( ivname .LT. 1 )) THEN
              IF (( error_level .GT. 0 )) THEN
                  write(ERR,*) ' ======================= Warning =======
     *============== '
                  write(ERR,*) '    Empty VALUES_SOUGHT passt to Get_Inp
     *uts()!         '
                  write(ERR,*) ' =======================================
     *============== '
              END IF
              ERROR_FLAG=1
              ERROR_FLAGS(I)=1
              goto 4990
          END IF
          DO 5001 Kconvert=1,lnblnk1(vname)
              CURSOR=ICHAR(vname(Kconvert:Kconvert))
              IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
                  CURSOR=CURSOR-32
                  vname(Kconvert:Kconvert)=CHAR(CURSOR)
              END IF
5001      CONTINUE
5002      CONTINUE
          iindex = 0
          IF ((DELIMETER .EQ. 'NONE')) THEN
              start_found = .true.
          ELSE
              start_found = .false.
          END IF
5011      IF(iindex.NE.0)GO TO 5012
5020          CONTINUE
              LINE=LINE+1
              IF (( start_found )) THEN
                  READ(UNITNUM,END=5030,ERR=5040,FMT='(A256)') TEXT
              ELSE
                  READ(UNITNUM,END=5050,ERR=5040,FMT='(A256)') TEXT
              END IF
              length = len(text)
5061          IF(index(text,blank).NE.1)GO TO 5062
                  IF (( length .GE. 2 )) THEN
                      text=text(2:)
                  ELSE
                      GO TO5062
                  END IF
                  length = length - 1
              GO TO 5061
5062          CONTINUE
              ifound = INDEX(text,'#')
              IF (( ifound .GT. 1 )) THEN
                  text = text(1:ifound-1)
              ELSE
                  IF (( ifound .EQ. 1 )) THEN
                      text = blank
                  END IF
              END IF
              ifound = INDEX(text,';')
              IF (( ifound .GT. 1 )) THEN
                  text = text(1:ifound-1)
              ELSE
                  IF (( ifound .EQ. 1 )) THEN
                      text = blank
                  END IF
              END IF
              length = lnblnk1(TEXT)
              TEXT=TEXT(:length)
              origtext = text(:length)
              DO 5071 Kconvert=1,lnblnk1(text)
                  CURSOR=ICHAR(text(Kconvert:Kconvert))
                  IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
                      CURSOR=CURSOR-32
                      text(Kconvert:Kconvert)=CHAR(CURSOR)
                  END IF
5071          CONTINUE
5072          CONTINUE
              IF (( .NOT.start_found )) THEN
                  IF ((INDEX(TEXT,DELIM_START) .NE. 0 )) THEN
                      start_found = .true.
                  END IF
                  goto 5020
              END IF
              iindex=INDEX(TEXT,VNAME(:iVNAME))
              IF (( DELIMETER.NE.'NONE' )) THEN
                  IF ((INDEX(TEXT,DELIM_END).NE.0)) THEN
                      IF (( error_level .GT. 0 )) THEN
                          WRITE (ERR,*) '***************ERROR***********
     *****'
                          WRITE (ERR,*) '>>',VALUES_SOUGHT(I)(:lnblnk1(V
     *                    ALUES_SOUGHT(I))), '<<',' NOT FOUND'
                          WRITE (ERR,*) 'END OF DELIMETER: ',DELIMETER(:
     *                    lnblnk1(DELIMETER))
                      END IF
                      ERROR_FLAG=1
                      ERROR_FLAGS(I)=1
                      GOTO 4990
                  END IF
              END IF
          GO TO 5011
5012      CONTINUE
          CHECK=0
          IF (( idebug )) THEN
              write(i_log,*) ' ******* Found: '
              write(i_log,'(a,$)') ' text:     '
              length = lnblnk1(text)
              IF (( length .GT. 0 )) THEN
                  DO 5081 lll=1,length
                      write(i_log,'(a1,$)') text(lll:lll)
5081              CONTINUE
5082              CONTINUE
                  write(i_log,*)
              END IF
              write(i_log,'(a,$)') ' origtext: '
              length = lnblnk1(origtext)
              IF (( length .GT. 0 )) THEN
                  DO 5091 lll=1,length
                      write(i_log,'(a1,$)') origtext(lll:lll)
5091              CONTINUE
5092              CONTINUE
                  write(i_log,*)
              END IF
          END IF
          IINDEX=IINDEX+iVNAME
          TEXT=TEXT(IINDEX:)
          origtext=origtext(iindex:)
          IF (( idebug )) THEN
              write(i_log,*) ' After removing vname: '
              write(i_log,'(a,$)') ' text:     '
              length = lnblnk1(text)
              IF (( length .GT. 0 )) THEN
                  DO 5101 lll=1,length
                      write(i_log,'(a1,$)') text(lll:lll)
5101              CONTINUE
5102              CONTINUE
                  write(i_log,*)
              END IF
              write(i_log,'(a,$)') ' origtext: '
              length = lnblnk1(origtext)
              IF (( length .GT. 0 )) THEN
                  DO 5111 lll=1,length
                      write(i_log,'(a1,$)') origtext(lll:lll)
5111              CONTINUE
5112              CONTINUE
                  write(i_log,*)
              END IF
          END IF
          IINDEX=INDEX(TEXT,'=')
          IF ((IINDEX.NE.0)) THEN
              TEXT=TEXT(IINDEX+1:)
              origtext=origtext(iindex+1:)
          ELSE
              IINDEX=INDEX(TEXT,':')
              IF ((IINDEX.NE.0)) THEN
                  TEXT=TEXT(IINDEX+1:)
                  origtext=origtext(iindex+1:)
              END IF
          END IF
          IF (( idebug )) THEN
              write(i_log,*) ' After removing leading equals: '
              write(i_log,'(a,$)') ' text:     '
              length = lnblnk1(text)
              IF (( length .GT. 0 )) THEN
                  DO 5121 lll=1,length
                      write(i_log,'(a1,$)') text(lll:lll)
5121              CONTINUE
5122              CONTINUE
                  write(i_log,*)
              END IF
              write(i_log,'(a,$)') ' origtext: '
              length = lnblnk1(origtext)
              IF (( length .GT. 0 )) THEN
                  DO 5131 lll=1,length
                      write(i_log,'(a1,$)') origtext(lll:lll)
5131              CONTINUE
5132              CONTINUE
                  write(i_log,*)
              END IF
          END IF
          IF (( (lnblnk1(TEXT).EQ.0) .OR. (lnblnk1(TEXT).EQ.1) )) THEN
              IF ((vname(:ivname).EQ.'TITLE')) THEN
                  READ (UNITNUM,FMT='(A256)') TEXTPIECE
                  IF ((lnblnk1(TEXTPIECE).NE.0)) THEN
                      TEXT=TEXTPIECE(:lnblnk1(TEXTPIECE))
                      length = len(text)
5141                  IF(index(text,blank).NE.1)GO TO 5142
                          IF (( length .GE. 2 )) THEN
                              text=text(2:)
                          ELSE
                              GO TO5142
                          END IF
                          length = length - 1
                      GO TO 5141
5142                  CONTINUE
                      length = len(origtext)
5151                  IF(index(origtext,blank).NE.1)GO TO 5152
                          IF (( length .GE. 2 )) THEN
                              origtext=origtext(2:)
                          ELSE
                              GO TO5152
                          END IF
                          length = length - 1
                      GO TO 5151
5152                  CONTINUE
                      GOTO 5160
                  END IF
              END IF
              IF (( error_level .GT. 0 )) THEN
                  WRITE (ERR,*) '*************ERROR*************'
                  WRITE (ERR,*) 'VALUE SOUGHT: ',VALUES_SOUGHT(I)
                  WRITE (ERR,*) 'VALUE NOT THERE!!'
              END IF
              ERROR_FLAG=1
              ERROR_FLAGS(I)=1
              RETURN
          END IF
5160      CONTINUE
          iindex = index(text,'DEFAULT')
          IF (( iindex .NE. 0 )) THEN
              IF (( type(i) .NE. 2 )) THEN
                  IF (( type(i) .NE. 3 )) THEN
                      VALUE(I,1)=DEFAULT(I)
                  ELSE
                      VALUE(I,1)=0
                  END IF
                  goto 4990
              END IF
          END IF
          IF (((TYPE(I) .EQ. 0).OR.(TYPE(I) .EQ. 1))) THEN
              IVAL=1
              IF (( idebug )) THEN
                  write(i_log,*) ' *** Reading an integer or a real valu
     *e! '
              END IF
5171          CONTINUE
                  IF (( idebug )) THEN
                      write(i_log,*) ' In LOOP, ival = ',ival
                  END IF
                  IF ((lnblnk1(TEXT).EQ.0)) THEN
                      IF (( error_level .GT. 0 )) THEN
                          WRITE(ERR,*) '*************ERROR*************'
                          WRITE (ERR,*) 'VALUE SOUGHT: ',VALUES_SOUGHT(I
     *                    )
                          WRITE (ERR,*) 'VALUE NOT THERE!!'
                      END IF
                      ERROR_FLAG=1
                      ERROR_FLAGS(I)=1
                      RETURN
                  END IF
                  READ(TEXT,END=5180,ERR=5190,FMT=*) VALUE(I,IVAL)
                  IF (( idebug )) THEN
                      write(i_log,*) ' Read value: ',ival,VALUE(I,IVAL)
                  END IF
                  IF (((VALUE(I,IVAL).GT.VALUE_MAX(I)).OR.(VALUE(I,IVAL)
     *            .LT.VALUE_MIN(I)))) THEN
                      IF ((TYPE(I).EQ.0)) THEN
                          INT_VALUE=DEFAULT(I)
                          IF (( error_level .GT. 0 )) THEN
                              WRITE(ERR,*) '************WARNING*********
     ****'
                              WRITE(ERR,5200) INT_VALUE, VALUES_SOUGHT(I
     *                        )(:lnblnk1(VALUES_SOUGHT(I)))
                          END IF
5200                      FORMAT ( 'Default= ',I9,' used for: ', A )
                          INT_VALUE=VALUE(I,IVAL)
                          INT_VALUE_MIN=VALUE_MIN(I)
                          INT_VALUE_MAX=VALUE_MAX(I)
                          IF (( error_level .GT. 0 )) THEN
                              WRITE(ERR,5210) VALUES_SOUGHT(I)(:lnblnk1(
     *                        VALUES_SOUGHT(I))), INT_VALUE, INT_VALUE_M
     *                        IN,INT_VALUE_MAX
                          END IF
5210                      FORMAT (A,'=', I9,' should be between ', I9,'a
     *nd ', I9)
                      END IF
                      IF ((TYPE(I).EQ.1)) THEN
                          IF (( error_level .GT. 0 )) THEN
                              WRITE(ERR,*) '************WARNING*********
     ****'
                              WRITE(ERR,5220) DEFAULT(I), VALUES_SOUGHT(
     *                        I)(:lnblnk1(VALUES_SOUGHT(I)))
5220                          FORMAT ( 'Default= ',F12.6,' used for: ',A
     * )
                              WRITE(ERR,5230) VALUES_SOUGHT(I)(:lnblnk1(
     *                        VALUES_SOUGHT(I))), VALUE(I,IVAL), VALUE_M
     *                        IN(I),VALUE_MAX(I)
5230                          FORMAT (A,'=', F12.6,' should be between '
     *, G14.6,' and ', G14.6)
                          END IF
                      END IF
                      VALUE(I,IVAL)=DEFAULT(I)
                  END IF
                  IF((IVAL .EQ. NVALUE(I)))GO TO5172
                  IF (((INDEX(TEXT,',').NE.0).OR.(lnblnk1(TEXT).EQ.0)))
     *            THEN
                      IF (( idebug )) THEN
                          write(i_log,*) ' A comma or a blank text found
     * -> '
                          write(i_log,*) ' searching for further input'
                      END IF
                      TEXT=TEXT(INDEX(TEXT,',')+1:)
5241                  IF(lnblnk1(TEXT).NE.0)GO TO 5242
                          IF (( idebug )) THEN
                              write(i_log,*) ' Empty text -> reading nex
     *t line! '
                          END IF
                          LINE=LINE+1
                          READ (UNITNUM,END=5180,ERR=5190,FMT='(A256)')
     *                    TEXT
                          length = len(text)
5251                      IF(index(text,blank).NE.1)GO TO 5252
                              IF (( length .GE. 2 )) THEN
                                  text=text(2:)
                              ELSE
                                  GO TO5252
                              END IF
                              length = length - 1
                          GO TO 5251
5252                      CONTINUE
                          ifound = INDEX(text,'#')
                          IF (( ifound .GT. 1 )) THEN
                              text = text(1:ifound-1)
                          ELSE
                              IF (( ifound .EQ. 1 )) THEN
                                  text = blank
                              END IF
                          END IF
                          ifound = INDEX(text,';')
                          IF (( ifound .GT. 1 )) THEN
                              text = text(1:ifound-1)
                          ELSE
                              IF (( ifound .EQ. 1 )) THEN
                                  text = blank
                              END IF
                          END IF
                          length = lnblnk1(TEXT)
                          TEXT=TEXT(:length)
                          origtext = text(:length)
                          DO 5261 Kconvert=1,lnblnk1(text)
                              CURSOR=ICHAR(text(Kconvert:Kconvert))
                              IF (((CURSOR.GE.97).AND.(CURSOR.LE.122)))
     *                        THEN
                                  CURSOR=CURSOR-32
                                  text(Kconvert:Kconvert)=CHAR(CURSOR)
                              END IF
5261                      CONTINUE
5262                      CONTINUE
                          DO 5271 K=1,NMAX
                              vname1 = VALUES_SOUGHT(K)
                              length = lnblnk1(vname1)
                              IF (( length .GT. 0 )) THEN
                                  length = len(vname1)
5281                              IF(index(vname1,blank).NE.1)GO TO 5282
                                      IF (( length .GE. 2 )) THEN
                                          vname1=vname1(2:)
                                      ELSE
                                          GO TO5282
                                      END IF
                                      length = length - 1
                                  GO TO 5281
5282                              CONTINUE
                                  DO 5291 Kconvert=1,lnblnk1(vname1)
                                      CURSOR=ICHAR(vname1(Kconvert:Kconv
     *                                ert))
                                      IF (((CURSOR.GE.97).AND.(CURSOR.LE
     *                                .122))) THEN
                                          CURSOR=CURSOR-32
                                          vname1(Kconvert:Kconvert)=CHAR
     *                                    (CURSOR)
                                      END IF
5291                              CONTINUE
5292                              CONTINUE
                                  IF ((INDEX(TEXT,vname1(:length)).NE.0)
     *                            ) THEN
                                      IF (( error_level .GT. 0 )) THEN
                                          WRITE(ERR,*) '************ERRO
     *R************'
                                          WRITE(ERR,*) 'VALUE SOUGHT: ',
     *                                    VALUES_SOUGHT(I)
                                          WRITE(ERR,*) KEEPTEXT(:lnblnk1
     *                                    (KEEPTEXT)), '<--COMMA INDICAT
     *ES ANOTHER INPUT'
                                          WRITE(ERR,*) 'SEARCHED NEXT LI
     *NE: ', TEXT(:lnblnk1(TEXT))
                                          WRITE(ERR,*) 'BUT NO OTHER INP
     *UT WAS DETECTED'
                                      END IF
                                      ERROR_FLAG=1
                                      ERROR_FLAGS(I)=1
                                  END IF
                              END IF
5271                      CONTINUE
5272                      CONTINUE
                          IF (( idebug )) THEN
                              write(i_log,*) ' Next line: '
                              write(i_log,'(a,$)') ' text:     '
                              length = lnblnk1(text)
                              IF (( length .GT. 0 )) THEN
                                  DO 5301 lll=1,length
                                      write(i_log,'(a1,$)') text(lll:lll
     *                                )
5301                              CONTINUE
5302                              CONTINUE
                                  write(i_log,*)
                              END IF
                              write(i_log,'(a,$)') ' origtext: '
                              length = lnblnk1(origtext)
                              IF (( length .GT. 0 )) THEN
                                  DO 5311 lll=1,length
                                      write(i_log,'(a1,$)') origtext(lll
     *                                :lll)
5311                              CONTINUE
5312                              CONTINUE
                                  write(i_log,*)
                              END IF
                          END IF
                      GO TO 5241
5242                  CONTINUE
                  ELSE
                      GO TO5172
                  END IF
                  IVAL=IVAL+1
              GO TO 5171
5172          CONTINUE
              IF (((NVALUE(I).NE.0).AND.(NVALUE(I).NE.IVAL))) THEN
                  IF (( error_level .GT. 0 )) THEN
                      WRITE (ERR,*) '**************ERROR**************'
                      WRITE (ERR,*) 'VALUE SOUGHT: ', VALUES_SOUGHT(I)
                      WRITE (ERR,*) 'ASKED FOR', NVALUE(I),' NUMERICAL I
     *NPUT(S)'
                      WRITE (ERR,*) 'HOWEVER,', IVAL, ' WERE DETECTED'
                  END IF
                  ERROR_FLAG=1
                  ERROR_FLAGS(I)=1
              ELSE
                  NVALUE(I)=IVAL
              END IF
5180          CONTINUE
          END IF
          IF (((TYPE(I) .EQ. 2) .OR. (TYPE(I) .EQ. 3))) THEN
              IVAL=1
              IF (( idebug )) THEN
                  write(i_log,*) ' Trying to read a string! '
              END IF
5321          CONTINUE
                  IF (( idebug )) THEN
                      write(i_log,*) ' In LOOP, ival = ',ival
                  END IF
                  IF ((lnblnk1(TEXT).EQ.0)) THEN
                      IF (( error_level .GT. 0 )) THEN
                          WRITE(ERR,*) '*************ERROR*************'
                          WRITE (ERR,*) 'VALUE SOUGHT: ',VALUES_SOUGHT(I
     *                    )
                          WRITE (ERR,*) 'VALUE NOT THERE!!'
                      END IF
                      ERROR_FLAG=1
                      ERROR_FLAGS(I)=1
                      RETURN
                  END IF
                  IF ((vname(:ivname).EQ.'TITLE')) THEN
                      TEXTPIECE=origtext
                      GOTO 5330
                  END IF
                  iindex = INDEX(origtext,',')
                  IF (( iindex .NE. 0 )) THEN
                      TEXTPIECE=origtext(:iindex-1)
                  ELSE
                      TEXTPIECE=origtext
                  END IF
5330              CONTINUE
                  READ(TEXTPIECE,ERR=5340,FMT='(A256)') CHAR_VALUE(I,IVA
     *            L)
                  length = len(CHAR_VALUE(I,IVAL))
5351              IF(index(CHAR_VALUE(I,IVAL),blank).NE.1)GO TO 5352
                      IF (( length .GE. 2 )) THEN
                          CHAR_VALUE(I,IVAL)=CHAR_VALUE(I,IVAL)(2:)
                      ELSE
                          GO TO5352
                      END IF
                      length = length - 1
                  GO TO 5351
5352              CONTINUE
                  IF (( idebug )) THEN
                      write(i_log,*) ' Read the following char string: '
                      length = lnblnk1(CHAR_VALUE(I,IVAL))
                      IF (( length .GT. 0 )) THEN
                          DO 5361 lll=1,length
                              write(i_log,'(a1,$)') CHAR_VALUE(I,IVAL)(l
     *                        ll:lll)
5361                      CONTINUE
5362                      CONTINUE
                          write(i_log,*)
                      END IF
                  END IF
                  IF ((TYPE(I) .EQ. 3)) THEN
                      DO 5371 Kconvert=1,lnblnk1(CHAR_VALUE(I,IVAL))
                          CURSOR=ICHAR(CHAR_VALUE(I,IVAL)(Kconvert:Kconv
     *                    ert))
                          IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
                              CURSOR=CURSOR-32
                              CHAR_VALUE(I,IVAL)(Kconvert:Kconvert)=CHAR
     *                        (CURSOR)
                          END IF
5371                  CONTINUE
5372                  CONTINUE
                      ALLOWED=.FALSE.
                      DO 5381 K=0,5
                          vname1 = ALLOWED_INPUTS(I,K)
                          length = len(ALLOWED_INPUTS(I,K))
5391                      IF(index(ALLOWED_INPUTS(I,K),blank).NE.1)GO TO
     *                     5392
                              IF (( length .GE. 2 )) THEN
                                  ALLOWED_INPUTS(I,K)=ALLOWED_INPUTS(I,K
     *                            )(2:)
                              ELSE
                                  GO TO5392
                              END IF
                              length = length - 1
                          GO TO 5391
5392                      CONTINUE
                          DO 5401 Kconvert=1,lnblnk1(ALLOWED_INPUTS(I,K)
     *                    )
                              CURSOR=ICHAR(ALLOWED_INPUTS(I,K)(Kconvert:
     *                        Kconvert))
                              IF (((CURSOR.GE.97).AND.(CURSOR.LE.122)))
     *                        THEN
                                  CURSOR=CURSOR-32
                                  ALLOWED_INPUTS(I,K)(Kconvert:Kconvert)
     *                            =CHAR(CURSOR)
                              END IF
5401                      CONTINUE
5402                      CONTINUE
                          IF ((ALLOWED_INPUTS(I,K).EQ.CHAR_VALUE(I,IVAL)
     *                    )) THEN
                              ALLOWED=.TRUE.
                              VALUE(I,IVAL)=K
                              IF (( idebug )) THEN
                                  write(i_log,*) ' Found a allowed_value
     * match ',k
                              END IF
                          END IF
5381                  CONTINUE
5382                  CONTINUE
                      IF ((.NOT.ALLOWED)) THEN
                          WRITE(ERR,*) '*************ERROR*************'
                          IF ((IVAL.NE.1)) THEN
                              WRITE (ERR,*) 'VALUE SOUGHT: ',VALUES_SOUG
     *                        HT(I)
                              WRITE (ERR,*) 'SHOULD HAVE ONE INPUT ONLY'
                              WRITE (ERR,*) 'APPARENT STATE: COMMA INDIC
     *ATING SECOND VALUE'
                          ELSE
                              WRITE (ERR,*) 'VALUE SOUGHT: ',VALUES_SOUG
     *                        HT(I)
                              WRITE(ERR,*) 'INPUT-->', CHAR_VALUE(I,IVAL
     *                        )(:lnblnk1(CHAR_VALUE(I,IVAL))), '<--NOT A
     *LLOWED'
                              WRITE(ERR,*) 'OPTIONS ARE:'
                              WRITE(ERR,5410) (ALLOWED_INPUTS(I,K)(:lnbl
     *                        nk1(ALLOWED_INPUTS(I,K))),K=0,5)
                          END IF
5410                      FORMAT(A40)
                          ERROR_FLAG=1
                          ERROR_FLAGS(I)=1
                      END IF
                  END IF
                  IF ((vname(:ivname).EQ.'TITLE')) THEN
                      GO TO5322
                  END IF
                  DO 5421 K=1,LEN(KEEPTEXT)
                      KEEPTEXT(K:K)=' '
5421              CONTINUE
5422              CONTINUE
                  KEEPTEXT(:lnblnk1(TEXT))=TEXT
                  iindex = INDEX(TEXT,',')
                  IF (( iindex .NE. 0 .OR. lnblnk1(TEXT).EQ.0 )) THEN
                      TEXT=TEXT(INDEX(TEXT,',')+1:)
                      origtext=origtext(iindex+1:)
5431                  IF(lnblnk1(TEXT).NE.0)GO TO 5432
                          LINE=LINE+1
                          READ (UNITNUM,ERR=5340,FMT='(A256)') TEXT
                          length = len(text)
5441                      IF(index(text,blank).NE.1)GO TO 5442
                              IF (( length .GE. 2 )) THEN
                                  text=text(2:)
                              ELSE
                                  GO TO5442
                              END IF
                              length = length - 1
                          GO TO 5441
5442                      CONTINUE
                          ifound = INDEX(text,'#')
                          IF (( ifound .GT. 1 )) THEN
                              text = text(1:ifound-1)
                          ELSE
                              IF (( ifound .EQ. 1 )) THEN
                                  text = blank
                              END IF
                          END IF
                          ifound = INDEX(text,';')
                          IF (( ifound .GT. 1 )) THEN
                              text = text(1:ifound-1)
                          ELSE
                              IF (( ifound .EQ. 1 )) THEN
                                  text = blank
                              END IF
                          END IF
                          length = lnblnk1(TEXT)
                          TEXT=TEXT(:length)
                          origtext = text(:length)
                          DO 5451 Kconvert=1,lnblnk1(text)
                              CURSOR=ICHAR(text(Kconvert:Kconvert))
                              IF (((CURSOR.GE.97).AND.(CURSOR.LE.122)))
     *                        THEN
                                  CURSOR=CURSOR-32
                                  text(Kconvert:Kconvert)=CHAR(CURSOR)
                              END IF
5451                      CONTINUE
5452                      CONTINUE
                          DO 5461 K=1,NMAX
                              vname1 = VALUES_SOUGHT(K)
                              length = lnblnk1(vname1)
                              IF (( length .GT. 0 )) THEN
                                  length = len(vname1)
5471                              IF(index(vname1,blank).NE.1)GO TO 5472
                                      IF (( length .GE. 2 )) THEN
                                          vname1=vname1(2:)
                                      ELSE
                                          GO TO5472
                                      END IF
                                      length = length - 1
                                  GO TO 5471
5472                              CONTINUE
                                  DO 5481 Kconvert=1,lnblnk1(vname1)
                                      CURSOR=ICHAR(vname1(Kconvert:Kconv
     *                                ert))
                                      IF (((CURSOR.GE.97).AND.(CURSOR.LE
     *                                .122))) THEN
                                          CURSOR=CURSOR-32
                                          vname1(Kconvert:Kconvert)=CHAR
     *                                    (CURSOR)
                                      END IF
5481                              CONTINUE
5482                              CONTINUE
                                  IF ((INDEX(TEXT,vname1(:length)).NE.0)
     *                            ) THEN
                                      WRITE(ERR,*) '************ERROR***
     **********'
                                      WRITE(ERR,*) 'VALUE SOUGHT: ',VALU
     *                                ES_SOUGHT(I)
                                      WRITE(ERR,*) KEEPTEXT(:lnblnk1(KEE
     *                                PTEXT)), '<--COMMA INDICATES ANOTH
     *ER INPUT'
                                      WRITE(ERR,*) 'SEARCHED NEXT LINE:
     *', TEXT(:lnblnk1(TEXT))
                                      WRITE(ERR,*) 'BUT NO OTHER INPUT W
     *AS DETECTED'
                                      ERROR_FLAG=1
                                      ERROR_FLAGS(I)=1
                                  END IF
                              END IF
5461                      CONTINUE
5462                      CONTINUE
                      GO TO 5431
5432                  CONTINUE
                  ELSE
                      GO TO5322
                  END IF
                  IVAL=IVAL+1
              GO TO 5321
5322          CONTINUE
              IF (((NVALUE(I).NE.0).AND.(NVALUE(I).NE.IVAL))) THEN
                  IF (( error_level .GT. 0 )) THEN
                      WRITE (ERR,*) '*******************ERROR***********
     *********'
                      WRITE (ERR,*) 'VALUE SOUGHT: ', VALUES_SOUGHT(I)
                      WRITE (ERR,*) 'ASKED FOR', NVALUE(I),' INPUT(S)'
                      WRITE (ERR,*) 'HOWEVER,', IVAL, ' WERE DETECTED'
                  END IF
                  ERROR_FLAG=1
                  ERROR_FLAGS(I)=1
              ELSE
                  NVALUE(I)=IVAL
              END IF
          END IF
          goto 4990
5030      IF (( error_level .GT. 0 )) THEN
              WRITE (ERR,*) '******************ERROR********************
     ****'
              WRITE (ERR,*) 'END OF FILE REACHED BUT VALUE SOUGHT NOT FO
     *UND'
              WRITE (ERR,*) 'PROBABLY A MISSING/MISSPELLED END DELIMETER
     *'
              WRITE (ERR,*) 'VALUE SOUGHT: >>', VALUES_SOUGHT(I)(:lnblnk
     *        1(VALUES_SOUGHT(I))),'<<'
              WRITE (ERR,*) 'END DELIMETER: >>', DELIM_END(:lnblnk1(DELI
     *        M_END)),'<<'
          END IF
          ERROR_FLAG=1
          ERROR_FLAGS(I)=1
          goto 4990
5050      IF (( error_level .GT. 0 )) THEN
              WRITE (ERR,*) '******************ERROR********************
     ****'
              WRITE (ERR,*) 'END OF FILE REACHED BUT VALUE SOUGHT NOT FO
     *UND'
              WRITE (ERR,*) 'PROBABLY A MISSING/MISSPELLED START DELIMET
     *ER'
              WRITE (ERR,*) 'VALUE SOUGHT: >>', VALUES_SOUGHT(I)(:lnblnk
     *        1(VALUES_SOUGHT(I))),'<<'
              WRITE (ERR,*) 'START DELIMETER: >>', DELIM_START(:lnblnk1(
     *        DELIM_START)),'<<'
          END IF
          ERROR_FLAG=1
          ERROR_FLAGS(I)=1
          goto 4990
5190      IF (( error_level .GT. 0 )) THEN
              WRITE (ERR,*) '***************ERROR***************'
              IF ((IVAL.GT.1)) THEN
                  J=IVAL
              ELSE
                  J=1
              END IF
              WRITE (ERR,*) 'ERROR READING VALUE SOUGHT: ', VALUES_SOUGH
     *        T(I)
              WRITE (ERR,*) 'LINE #',LINE
              WRITE (ERR,*) 'COULD NOT READ THE VALUE!!'
              WRITE (ERR,*) 'SHOULD BE AN INTEGER OR A REAL...'
              WRITE (ERR,*) 'IS THERE AN EXTRA COMMA AT THE END OF YOUR
     *INPUT?'
          END IF
          ERROR_FLAG=1
          ERROR_FLAGS(I)=1
          GOTO 4990
5340      IF (( error_level .GT. 0 )) THEN
              WRITE (ERR,*) '***************ERROR***************'
              WRITE (ERR,*) 'ERROR READING VALUE SOUGHT: ', VALUES_SOUGH
     *        T(I)
              WRITE (ERR,*) 'LINE #',LINE
              WRITE (ERR,*) 'COULD NOT READ THE STRING !!'
          END IF
          ERROR_FLAG=1
          ERROR_FLAGS(I)=1
4990      CONTINUE
4981  CONTINUE
4982  CONTINUE
      RETURN
5040  WRITE (ERR,*) '***************ERROR***************'
      WRITE (ERR,*) 'ERROR READING TEXT ', TEXT,' ON LINE ',LINE
      goto 5490
5490  CONTINUE
      ERROR_FLAG=1
      ERROR_FLAGS(I)=1
      RETURN
      entry get_input_set_error_level(the_level)
      error_level = the_level
      return
      END
      subroutine get_transport_parameter(ounit)
      implicit none
      character*80 line
      character*512 toUpper
      integer*4 ounit
      COMMON/GetInput/ ALLOWED_INPUTS(100,0:5),   VALUES_SOUGHT(100),  C
     *HAR_VALUE(100,100),  VALUE(100,100),  DEFAULT(100),  VALUE_MIN(100
     *),  VALUE_MAX(100),  NVALUE(100),  TYPE(100),      ERROR_FLAGS(100
     *),   i_errors,  NMIN, NMAX,   ERROR_FLAG,  DELIMETER
      character ALLOWED_INPUTS*64,VALUES_SOUGHT*64, CHAR_VALUE*256,DELIM
     *ETER*64
      real*8 VALUE,DEFAULT,VALUE_MIN,VALUE_MAX
      integer*4 NVALUE,TYPE,NMIN,NMAX,ERROR_FLAG,ERROR_FLAGS,i_errors
      COMMON/BOUNDS/ECUT,PCUT,VACDST
      real*8 ECUT,  PCUT,  VACDST
      common/ET_control/ SMAXIR,estepe,ximax,  skindepth_for_bca,transpo
     *rt_algorithm, bca_algorithm,exact_bca,spin_effects
      real*8 smaxir,  estepe,  ximax,      skindepth_for_bca
      integer*4 transport_algorithm, bca_algorithm
      logical exact_bca,  spin_effects
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L,IPHTER
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      common/compton_data/ iz_array(1538),  be_array(1538),  Jo_array(15
     *38),  erfJo_array(1538),   ne_array(1538),  shn_array(1538),
     *shell_array(200,7), eno_array(200,7), eno_atbin_array(200,7), n_sh
     *ell(7), radc_flag,  ibcmp
      integer*4 iz_array,ne_array,shn_array,eno_atbin_array, shell_array
     *,n_shell,radc_flag
      real*8 be_array,Jo_array,erfJo_array,eno_array
      integer*2 ibcmp
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR( 2097154),MED( 2097154),IRAYLR,
     *IPHOTONUCR( 2097154)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/BREMPR/ DL1(8,7),DL2(8,7),DL3(8,7),DL4(8,7),DL5(8,7),DL6(8,
     *7), ALPHI(2,7),BPAR(2,7),DELPOS(2,7), WA(7,50),PZ(7,50),ZELEM(7,50
     *),RHOZ(7,50), PWR2I(50), DELCM(7),ZBRANG(7),LZBRANG(7),NNE(7), IBR
     *DST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(7,50,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      common/eii_data/ eii_xsection_a( 10000),  eii_xsection_b( 10000),
     * eii_cons(7), eii_a(40),  eii_b(40),  eii_L_factor,  eii_z(40),  e
     *ii_sh(40),  eii_nshells(100),  eii_nsh(7),  eii_first(7,50),  eii_
     *no(7,50),  eii_flag
      real*8 eii_xsection_a,eii_xsection_b,eii_a,eii_b,eii_cons,eii_L_fa
     *ctor
      integer*4 eii_z,eii_sh,eii_nshells
      integer*4 eii_first,eii_no
      integer*4 eii_elements,eii_flag,eii_nsh
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/rayleigh_inputs/iray_ff_media(7),iray_ff_file(7)
      character*24 iray_ff_media
      character*128 iray_ff_file
      common/emf_inputs/ExIN,EyIN,EzIN,  EMLMTIN,  BxIN, ByIN, BzIN,  Bx
     *, By, Bz,  Bx_new, By_new, Bz_new,  emfield_on
      real*8 ExIN,EyIN,EzIN, EMLMTIN, BxIN,ByIN,BzIN, Bx,By,Bz, Bx_new,B
     *y_new,Bz_new
      logical emfield_on
      common/x_options/eadl_relax,  mcdf_pe_xsections
      logical eadl_relax, mcdf_pe_xsections
      integer*4 ival,num_ecut,num_pcut,num_smax,num_incoh,num_radc,num_c
     *oh,num_relax, num_pe_ang,num_brems_ang,num_brems_cs,num_pair_cs, n
     *um_ffmed,num_ffiles, num_pair_ang,num_eii,num_eii_L,num_estepe,num
     *_ximax,num_triplet, num_pxsec,num_pxsec_out, num_cxsec, num_photon
     *uc, num_photonuc_xsec, num_efield, num_bfield, num_emlmt, num_spin
     *,num_bca,num_alg,num_skin,itmp,iitmp,i,j,k,istart,iend, egs_open_f
     *ile,lnblnk1
      logical ecut_inregions,pcut_inregions,smax_inregions, incoh_inregi
     *ons,coh_inregions,relax_inregions, pe_inregions,aux_inregions,phot
     *onuc_inregions
      character*15 output_strings(14)
      save output_strings,line
      save ecut_inregions,pcut_inregions,smax_inregions, incoh_inregions
     *,coh_inregions,relax_inregions, pe_inregions,aux_inregions,photonu
     *c_inregions, num_photonuc
      DO 5501 k=1,80
          line(k:k) = '='
5501  CONTINUE
5502  CONTINUE
      delimeter = 'MC TRANSPORT PARAMETER'
      ival = 0
      ecut_inregions=.false.
      pcut_inregions=.false.
      smax_inregions=.false.
      incoh_inregions=.false.
      coh_inregions=.false.
      relax_inregions=.false.
      pe_inregions=.false.
      aux_inregions=.false.
      photonuc_inregions=.false.
      i_errors=15
      i_errors=egs_open_file(i_errors,0,1,'.errors')
      write(i_errors,*) ' If you are not trying to reset transport param
     *eters, '
      write(i_errors,*) ' ignore all the output until the message '
      write(i_errors,*) ' ******************** end input transport param
     *eter *********************** '
      write(i_errors,*)
      ival = ival + 1
      num_ecut = ival
      values_sought(ival) = 'Global ECUT'
      nvalue(ival) = 1
      type(ival) = 1
      value_min(ival) = 0
      value_max(ival) = 1e15
      default(ival) = 0.
      ival = ival + 1
      num_pcut = ival
      values_sought(ival) = 'Global PCUT'
      nvalue(ival) = 1
      type(ival) = 1
      value_min(ival) = 0
      value_max(ival) = 1e15
      default(ival) = 0.
      ival = ival + 1
      num_smax = ival
      values_sought(ival) = 'Global SMAX'
      nvalue(ival) = 1
      type(ival) = 1
      value_min(ival) = 0
      value_max(ival) = 1e15
      default(ival) = 1e10
      ival = ival + 1
      num_incoh = ival
      values_sought(ival) = 'Bound Compton scattering'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'Off'
      allowed_inputs(ival,1) = 'On'
      allowed_inputs(ival,2) = 'On in Regions'
      allowed_inputs(ival,3) = 'Off in Regions'
      allowed_inputs(ival,4) = 'Simple'
      allowed_inputs(ival,5) = 'norej'
      ival = ival + 1
      num_radc = ival
      values_sought(ival) = 'Radiative Compton corrections'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'Off'
      allowed_inputs(ival,1) = 'On'
      ival = ival + 1
      num_coh = ival
      values_sought(ival) = 'Rayleigh scattering'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'Off'
      allowed_inputs(ival,1) = 'On'
      allowed_inputs(ival,2) = 'On in Regions'
      allowed_inputs(ival,3) = 'Off in Regions'
      allowed_inputs(ival,4) = 'custom'
      ival = ival + 1
      num_relax = ival
      values_sought(ival) = 'Atomic relaxations'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'Off'
      allowed_inputs(ival,1) = 'On'
      allowed_inputs(ival,2) = 'On in Regions'
      allowed_inputs(ival,3) = 'Off in Regions'
      allowed_inputs(ival,4) = 'eadl'
      allowed_inputs(ival,5) = 'simple'
      ival = ival + 1
      num_pe_ang = ival
      values_sought(ival) = 'Photoelectron angular sampling'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'Off'
      allowed_inputs(ival,1) = 'On'
      allowed_inputs(ival,2) = 'On in Regions'
      allowed_inputs(ival,3) = 'Off in Regions'
      ival = ival + 1
      num_brems_ang = ival
      values_sought(ival) = 'Brems angular sampling'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'Simple'
      allowed_inputs(ival,1) = 'KM'
      ival = ival + 1
      num_brems_cs = ival
      values_sought(ival) = 'Brems cross sections'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'BH'
      allowed_inputs(ival,1) = 'NIST'
      allowed_inputs(ival,2) = 'NRC'
      ival = ival + 1
      num_pair_ang = ival
      values_sought(ival) = 'Pair angular sampling'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'Off'
      allowed_inputs(ival,1) = 'Simple'
      allowed_inputs(ival,2) = 'KM'
      allowed_inputs(ival,3) = 'Uniform'
      allowed_inputs(ival,4) = 'Blend'
      ival = ival + 1
      num_pair_cs = ival
      values_sought(ival) = 'Pair cross sections'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'BH'
      allowed_inputs(ival,1) = 'NRC'
      ival = ival + 1
      num_triplet = ival
      values_sought(ival) = 'Triplet production'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'Off'
      allowed_inputs(ival,1) = 'On'
      ival = ival + 1
      num_spin = ival
      values_sought(ival) = 'Spin effects'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'Off'
      allowed_inputs(ival,1) = 'On'
      ival = ival + 1
      num_eii = ival
      values_sought(ival) = 'Electron Impact Ionization'
      nvalue(ival) = 1
      type(ival) = 2
      ival = ival + 1
      num_eii_L= ival
      values_sought(ival) = 'scale L EII cross-sections'
      nvalue(ival) = 1
      type(ival) = 1
      value_min(ival) = 0.0
      value_max(ival) = 1.0e+9
      default(ival) = 1.0
      ival = ival + 1
      num_estepe = ival
      values_sought(ival) = 'ESTEPE'
      nvalue(ival) = 1
      type(ival) = 1
      value_min(ival) = 1e-5
      value_max(ival) = 1
      default(ival) = 0.25
      ival = ival + 1
      num_ximax = ival
      values_sought(ival) = 'XImax'
      nvalue(ival) = 1
      type(ival) = 1
      value_min(ival) = 0
      value_max(ival) = 1
      default(ival) = 0.5
      ival = ival + 1
      num_bca = ival
      values_sought(ival) = 'Boundary crossing algorithm'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'Exact'
      allowed_inputs(ival,1) = 'PRESTA-I'
      ival = ival + 1
      num_skin = ival
      values_sought(ival) = 'Skin depth for BCA'
      nvalue(ival) = 1
      type(ival) = 1
      value_min(ival) = -1
      value_max(ival) = 1e15
      default(ival) = 3
      ival = ival + 1
      num_alg = ival
      values_sought(ival) = 'Electron-step algorithm'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'PRESTA-II'
      allowed_inputs(ival,1) = 'PRESTA-I'
      ival = ival + 1
      num_pxsec = ival
      values_sought(ival) = 'Photon cross sections'
      nvalue(ival) = 1
      type(ival) = 2
      ival = ival + 1
      num_pxsec_out = ival
      values_sought(ival) = 'Photon cross-sections output'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'Off'
      allowed_inputs(ival,1) = 'On'
      ival = ival + 1
      num_cxsec = ival
      values_sought(ival) = 'Compton cross sections'
      nvalue(ival) = 1
      type(ival) = 2
      ival = ival + 1
      num_efield = ival
      values_sought(ival) = 'Electric Field'
      nvalue(ival) = 3
      type(ival) = 1
      value_min(ival) = -1e15
      value_max(ival) = 1e15
      default(ival) = 0
      ival = ival + 1
      num_bfield = ival
      values_sought(ival) = 'Magnetic Field'
      nvalue(ival) = 3
      type(ival) = 1
      value_min(ival) = -1e10
      value_max(ival) = 1e10
      default(ival) = 0
      ival = ival + 1
      num_emlmt = ival
      values_sought(ival) = 'EM ESTEPE'
      nvalue(ival) = 1
      type(ival) = 1
      value_min(ival) = 0.0
      value_max(ival) = 1.0
      default(ival) = 0.02
      ival = ival + 1
      num_photonuc = ival
      values_sought(ival) = 'Photonuclear attenuation'
      nvalue(ival) = 1
      type(ival) = 3
      allowed_inputs(ival,0) = 'Off'
      allowed_inputs(ival,1) = 'On'
      allowed_inputs(ival,2) = 'On in Regions'
      allowed_inputs(ival,3) = 'Off in Regions'
      ival = ival + 1
      num_photonuc_xsec = ival
      values_sought(ival) = 'Photonuclear cross sections'
      nvalue(ival) = 1
      type(ival) = 2
      Nmin = num_ecut
      Nmax = num_photonuc_xsec
      CALL GET_INPUT
      IF (( error_flags(num_ecut) .EQ. 0 )) THEN
          DO 5511 j=1, 2097154
              ECUT = value(num_ecut,1)
5511      CONTINUE
5512      CONTINUE
      END IF
      IF (( error_flags(num_pcut) .EQ. 0 )) THEN
          DO 5521 j=1, 2097154
              PCUT = value(num_pcut,1)
5521      CONTINUE
5522      CONTINUE
      END IF
      IF (( error_flags(num_smax) .EQ. 0 )) THEN
          DO 5531 j=1, 2097154
              SMAXIR = value(num_smax,1)
5531      CONTINUE
5532      CONTINUE
      END IF
      IF (( error_flags(num_brems_ang) .EQ. 0 )) THEN
          ibrdst = value(num_brems_ang,1)
      END IF
      IF (( error_flags(num_brems_cs) .EQ. 0 )) THEN
          ibr_nist = value(num_brems_cs,1)
      END IF
      IF (( error_flags(num_radc) .EQ. 0 )) THEN
          radc_flag = value(num_radc,1)
      END IF
      IF (( error_flags(num_pair_ang) .EQ. 0 )) THEN
          iprdst = value(num_pair_ang,1)
      END IF
      IF (( error_flags(num_pair_cs) .EQ. 0 )) THEN
          pair_nrc = value(num_pair_cs,1)
      END IF
      IF (( error_flags(num_triplet) .EQ. 0 )) THEN
          itriplet = value(num_triplet,1)
      END IF
      IF (( error_flags(num_eii_L) .EQ. 0 )) THEN
          eii_L_factor = value(num_eii_L,1)
      END IF
      IF (( error_flags(num_estepe) .EQ. 0 )) THEN
          estepe = value(num_estepe,1)
      END IF
      IF (( error_flags(num_ximax) .EQ. 0 )) THEN
          ximax = value(num_ximax,1)
      END IF
      IF (( error_flags(num_bca) .EQ. 0 )) THEN
          bca_algorithm = value(num_bca,1)
          IF (( bca_algorithm .EQ. 0 )) THEN
              exact_bca = .true.
          END IF
      END IF
      IF (( error_flags(num_alg) .EQ. 0 )) THEN
          transport_algorithm = value(num_alg,1)
      END IF
      IF (( error_flags(num_skin) .EQ. 0 )) THEN
          skindepth_for_bca = value(num_skin,1)
      END IF
      IF (( error_flags(num_spin) .EQ. 0 )) THEN
          itmp = value(num_spin,1)
          IF (( itmp .EQ. 1 )) THEN
              spin_effects = .true.
          ELSE
              spin_effects = .false.
          END IF
      END IF
      IF (( error_flags(num_eii) .EQ. 0 )) THEN
          eii_xfile = char_value(num_eii,1)
          eii_flag=1
          IF ((toUpper(eii_xfile(:lnblnk1(eii_xfile))).eq.'ON' .OR. toUp
     *    per(eii_xfile(:lnblnk1(eii_xfile))).eq.'IK' )) THEN
              eii_xfile = 'ik'
              write(i_log,*) '==> Using default EII data compilation ',
     *        eii_xfile(:lnblnk1(eii_xfile))
          ELSE IF((toUpper(eii_xfile(:lnblnk1(eii_xfile))).eq.'OFF')) TH
     *    EN
              eii_xfile='Off'
              eii_flag=0
          ELSE
              write(i_log,'(/a)') '***************** Warning: '
              write(i_log,*) '==> Using non-default EII data compilation
     * ', eii_xfile(:lnblnk1(eii_xfile))
          END IF
      END IF
      IF (( error_flags(num_pxsec) .EQ. 0 )) THEN
          photon_xsections = char_value(num_pxsec,1)
          IF (( toUpper( photon_xsections(:lnblnk1(photon_xsections)) )
     *    .EQ. 'MCDF-XCOM' )) THEN
              mcdf_pe_xsections = .true.
              photon_xsections = 'xcom'
          ELSE IF(( toUpper( photon_xsections(:lnblnk1(photon_xsections)
     *    ) ) .EQ. 'MCDF-EPDL' )) THEN
              mcdf_pe_xsections = .true.
              photon_xsections = 'epdl'
          ELSE
              mcdf_pe_xsections = .false.
          END IF
      END IF
      IF (( error_flags(num_pxsec_out) .EQ. 0 )) THEN
          xsec_out = value(num_pxsec_out,1)
      END IF
      IF (( error_flags(num_cxsec) .EQ. 0 )) THEN
          comp_xsections = char_value(num_cxsec,1)
      END IF
      IF (( error_flags(num_photonuc_xsec) .EQ. 0 )) THEN
          photonuc_xsections = char_value(num_photonuc_xsec,1)
      END IF
      IF (( error_flags(num_efield) .EQ. 0 )) THEN
          ExIN = value(num_efield,1)
          EyIN = value(num_efield,2)
          EzIN = value(num_efield,3)
          IF (( error_flags(num_emlmt) .EQ. 0 )) THEN
              EMLMTIN=value(num_emlmt,1)
          END IF
          IF (( ExIN**2+EyIN**2+EzIN**2 .GT. 0 )) THEN
              emfield_on=.true.
          END IF
      END IF
      IF (( error_flags(num_bfield) .EQ. 0 )) THEN
          BxIN = value(num_bfield,1)
          ByIN = value(num_bfield,2)
          BzIN = value(num_bfield,3)
          Bx=BxIN
          By=ByIN
          Bz=BzIN
          Bx_new=BxIN
          By_new=ByIN
          Bz_new=BzIN
          IF (( error_flags(num_emlmt) .EQ. 0 )) THEN
              EMLMTIN=value(num_emlmt,1)
          END IF
          IF (( BxIN**2+ByIN**2+BzIN**2 .GT. 0 )) THEN
              emfield_on=.true.
          END IF
      END IF
      IF (( error_flags(num_coh) .EQ. 0 )) THEN
          IF ((value(num_coh,1) .EQ. 4)) THEN
              write(*,'(/a/)') ' ===> custom ff requested!'
              ival = ival + 1
              num_ffmed = ival
              values_sought(ival) = 'ff media names'
              type(ival) = 2
              nvalue(ival) = 0
              ival = ival + 1
              num_ffiles = ival
              values_sought(ival) = 'ff file names'
              type(ival) = 2
              nvalue(ival) = 0
              Nmin = num_ffmed
              Nmax = num_ffiles
              CALL GET_INPUT
              IF (( error_flags(num_ffmed) .GT. 0 )) THEN
                  write(i_log,'(/a)') '***************** Error: '
                  write(i_log,'(a/,a,I3)') 'Error reading custom ff! Ter
     *minating ...', ' error_flag = ', error_flags(num_ffmed)
                  write(i_log,'(/a)') '***************** Quiting now.'
                  call exit(1)
              END IF
              IF (( error_flags(num_ffiles) .GT. 0 )) THEN
                  write(i_log,'(/a)') '***************** Error: '
                  write(i_log,'(a/,a,I3)') 'Error reading ff file names!
     * Terminating ...', ' error_flag = ', error_flags(num_ffiles)
                  write(i_log,'(/a)') '***************** Quiting now.'
                  call exit(1)
              END IF
              IF ((nvalue(num_ffmed).GT.7)) THEN
                  write(i_log,'(/a)') '***************** Error: '
                  write(i_log,'(a,a,i3,a)') '***** Number of media with
     *custom ff larger ', 'than maximum number of media $MXMED = ',7, '
     *increase $MXMED and try again!!!'
                  write(i_log,'(/a)') '***************** Quiting now.'
                  call exit(1)
              END IF
              DO 5541 i=1,nvalue(num_ffmed)
                  iray_ff_media(i) = char_value(num_ffmed,i)
                  iray_ff_file(i) = char_value(num_ffiles,i)
5541          CONTINUE
5542          CONTINUE
              value(num_coh,1) = 1
          END IF
          write(*,'(/)')
      END IF
      aux_inregions = .false.
      IF (( error_flags(num_incoh) .EQ. 0 )) THEN
          write(i_log,*) 'Bound Compton start region'
          itmp = value(num_incoh,1)
          IF (( itmp .EQ. 2 .OR. itmp .EQ. 3 )) THEN
              ival = ival + 1
              values_sought(ival) = 'Bound Compton start region'
              nvalue(ival) = 0
              type(ival) = 0
              value_min(ival) = 1
              value_max(ival) =  2097154
              default(ival) = 1
              ival = ival + 1
              values_sought(ival) = 'Bound Compton stop region'
              nvalue(ival) = 0
              type(ival) = 0
              value_min(ival) = 1
              value_max(ival) =  2097154
              default(ival) = 1
              Nmin = ival-1
              Nmax = ival
              CALL GET_INPUT
              IF (( error_flags(ival-1) .EQ. 0 .AND. error_flags(ival) .
     *        EQ. 0 )) THEN
                  IF (( nvalue(ival) .EQ. nvalue(ival-1) )) THEN
                      iitmp = itmp-2
                      DO 5551 j=1, 2097154
                          ibcmp = iitmp
5551                  CONTINUE
5552                  CONTINUE
                      iitmp = 1 - iitmp
                      DO 5561 k=1,nvalue(ival)
                          istart = value(ival-1,k)
                          iend = value(ival,k)
                          write(i_log,*) 'Bound Compton start region',is
     *                    tart
                          write(i_log,*) 'Bound Compton stop region',ien
     *                    d
                          IF (( istart .LE. iend )) THEN
                              DO 5571 j=istart,iend
                                  ibcmp = iitmp
5571                          CONTINUE
5572                          CONTINUE
                              aux_inregions = .true.
                          END IF
5561                  CONTINUE
5562                  CONTINUE
                  ELSE
                      value(num_incoh,1) = ibcmp
                  END IF
              ELSE
                  value(num_incoh,1) = ibcmp
              END IF
          ELSE
              IF((itmp .GT. 3))itmp = itmp-2
              write(i_log,*) ' Setting all to ',itmp
              DO 5581 j=1, 2097154
                  ibcmp = itmp
5581          CONTINUE
5582          CONTINUE
          END IF
      ELSE
          IF ((ibcmp .EQ. 2 .OR. ibcmp .EQ. 3)) THEN
              value(num_incoh,1) = ibcmp+2
          ELSE
              value(num_incoh,1) = ibcmp
          END IF
      END IF
      incoh_inregions = aux_inregions
      aux_inregions = .false.
      IF (( error_flags(num_coh) .EQ. 0 )) THEN
          write(i_log,*) 'Rayleigh start region'
          itmp = value(num_coh,1)
          IF (( itmp .EQ. 2 .OR. itmp .EQ. 3 )) THEN
              ival = ival + 1
              values_sought(ival) = 'Rayleigh start region'
              nvalue(ival) = 0
              type(ival) = 0
              value_min(ival) = 1
              value_max(ival) =  2097154
              default(ival) = 1
              ival = ival + 1
              values_sought(ival) = 'Rayleigh stop region'
              nvalue(ival) = 0
              type(ival) = 0
              value_min(ival) = 1
              value_max(ival) =  2097154
              default(ival) = 1
              Nmin = ival-1
              Nmax = ival
              CALL GET_INPUT
              IF (( error_flags(ival-1) .EQ. 0 .AND. error_flags(ival) .
     *        EQ. 0 )) THEN
                  IF (( nvalue(ival) .EQ. nvalue(ival-1) )) THEN
                      iitmp = itmp-2
                      DO 5591 j=1, 2097154
                          IRAYLR = iitmp
5591                  CONTINUE
5592                  CONTINUE
                      iitmp = 1 - iitmp
                      DO 5601 k=1,nvalue(ival)
                          istart = value(ival-1,k)
                          iend = value(ival,k)
                          write(i_log,*) 'Rayleigh start region',istart
                          write(i_log,*) 'Rayleigh stop region',iend
                          IF (( istart .LE. iend )) THEN
                              DO 5611 j=istart,iend
                                  IRAYLR = iitmp
5611                          CONTINUE
5612                          CONTINUE
                              aux_inregions = .true.
                          END IF
5601                  CONTINUE
5602                  CONTINUE
                  ELSE
                      value(num_coh,1) = IRAYLR
                  END IF
              ELSE
                  value(num_coh,1) = IRAYLR
              END IF
          ELSE
              IF((itmp .GT. 3))itmp = itmp-2
              write(i_log,*) ' Setting all to ',itmp
              DO 5621 j=1, 2097154
                  IRAYLR = itmp
5621          CONTINUE
5622          CONTINUE
          END IF
      ELSE
          IF ((IRAYLR .EQ. 2 .OR. IRAYLR .EQ. 3)) THEN
              value(num_coh,1) = IRAYLR+2
          ELSE
              value(num_coh,1) = IRAYLR
          END IF
      END IF
      coh_inregions = aux_inregions
      aux_inregions = .false.
      IF (( error_flags(num_relax) .EQ. 0 )) THEN
          write(i_log,*) 'Relaxations start region'
          itmp = value(num_relax,1)
          IF (( itmp .EQ. 2 .OR. itmp .EQ. 3 )) THEN
              ival = ival + 1
              values_sought(ival) = 'Relaxations start region'
              nvalue(ival) = 0
              type(ival) = 0
              value_min(ival) = 1
              value_max(ival) =  2097154
              default(ival) = 1
              ival = ival + 1
              values_sought(ival) = 'Relaxations stop region'
              nvalue(ival) = 0
              type(ival) = 0
              value_min(ival) = 1
              value_max(ival) =  2097154
              default(ival) = 1
              Nmin = ival-1
              Nmax = ival
              CALL GET_INPUT
              IF (( error_flags(ival-1) .EQ. 0 .AND. error_flags(ival) .
     *        EQ. 0 )) THEN
                  IF (( nvalue(ival) .EQ. nvalue(ival-1) )) THEN
                      iitmp = itmp-2
                      DO 5631 j=1, 2097154
                          IEDGFL = iitmp
5631                  CONTINUE
5632                  CONTINUE
                      iitmp = 1 - iitmp
                      DO 5641 k=1,nvalue(ival)
                          istart = value(ival-1,k)
                          iend = value(ival,k)
                          write(i_log,*) 'Relaxations start region',ista
     *                    rt
                          write(i_log,*) 'Relaxations stop region',iend
                          IF (( istart .LE. iend )) THEN
                              DO 5651 j=istart,iend
                                  IEDGFL = iitmp
5651                          CONTINUE
5652                          CONTINUE
                              aux_inregions = .true.
                          END IF
5641                  CONTINUE
5642                  CONTINUE
                  ELSE
                      value(num_relax,1) = IEDGFL
                  END IF
              ELSE
                  value(num_relax,1) = IEDGFL
              END IF
          ELSE
              IF((itmp .GT. 3))itmp = itmp-2
              write(i_log,*) ' Setting all to ',itmp
              DO 5661 j=1, 2097154
                  IEDGFL = itmp
5661          CONTINUE
5662          CONTINUE
          END IF
      ELSE
          IF ((IEDGFL .EQ. 2 .OR. IEDGFL .EQ. 3)) THEN
              value(num_relax,1) = IEDGFL+2
          ELSE
              value(num_relax,1) = IEDGFL
          END IF
      END IF
      relax_inregions = aux_inregions
      aux_inregions = .false.
      IF (( error_flags(num_pe_ang) .EQ. 0 )) THEN
          write(i_log,*) 'PE sampling start region'
          itmp = value(num_pe_ang,1)
          IF (( itmp .EQ. 2 .OR. itmp .EQ. 3 )) THEN
              ival = ival + 1
              values_sought(ival) = 'PE sampling start region'
              nvalue(ival) = 0
              type(ival) = 0
              value_min(ival) = 1
              value_max(ival) =  2097154
              default(ival) = 1
              ival = ival + 1
              values_sought(ival) = 'PE sampling stop region'
              nvalue(ival) = 0
              type(ival) = 0
              value_min(ival) = 1
              value_max(ival) =  2097154
              default(ival) = 1
              Nmin = ival-1
              Nmax = ival
              CALL GET_INPUT
              IF (( error_flags(ival-1) .EQ. 0 .AND. error_flags(ival) .
     *        EQ. 0 )) THEN
                  IF (( nvalue(ival) .EQ. nvalue(ival-1) )) THEN
                      iitmp = itmp-2
                      DO 5671 j=1, 2097154
                          IPHTER = iitmp
5671                  CONTINUE
5672                  CONTINUE
                      iitmp = 1 - iitmp
                      DO 5681 k=1,nvalue(ival)
                          istart = value(ival-1,k)
                          iend = value(ival,k)
                          write(i_log,*) 'PE sampling start region',ista
     *                    rt
                          write(i_log,*) 'PE sampling stop region',iend
                          IF (( istart .LE. iend )) THEN
                              DO 5691 j=istart,iend
                                  IPHTER = iitmp
5691                          CONTINUE
5692                          CONTINUE
                              aux_inregions = .true.
                          END IF
5681                  CONTINUE
5682                  CONTINUE
                  ELSE
                      value(num_pe_ang,1) = IPHTER
                  END IF
              ELSE
                  value(num_pe_ang,1) = IPHTER
              END IF
          ELSE
              IF((itmp .GT. 3))itmp = itmp-2
              write(i_log,*) ' Setting all to ',itmp
              DO 5701 j=1, 2097154
                  IPHTER = itmp
5701          CONTINUE
5702          CONTINUE
          END IF
      ELSE
          IF ((IPHTER .EQ. 2 .OR. IPHTER .EQ. 3)) THEN
              value(num_pe_ang,1) = IPHTER+2
          ELSE
              value(num_pe_ang,1) = IPHTER
          END IF
      END IF
      pe_inregions = aux_inregions
      aux_inregions = .false.
      IF (( error_flags(num_photonuc) .EQ. 0 )) THEN
          write(i_log,*) 'Photonuclear start region'
          itmp = value(num_photonuc,1)
          IF (( itmp .EQ. 2 .OR. itmp .EQ. 3 )) THEN
              ival = ival + 1
              values_sought(ival) = 'Photonuclear start region'
              nvalue(ival) = 0
              type(ival) = 0
              value_min(ival) = 1
              value_max(ival) =  2097154
              default(ival) = 1
              ival = ival + 1
              values_sought(ival) = 'Photonuclear stop region'
              nvalue(ival) = 0
              type(ival) = 0
              value_min(ival) = 1
              value_max(ival) =  2097154
              default(ival) = 1
              Nmin = ival-1
              Nmax = ival
              CALL GET_INPUT
              IF (( error_flags(ival-1) .EQ. 0 .AND. error_flags(ival) .
     *        EQ. 0 )) THEN
                  IF (( nvalue(ival) .EQ. nvalue(ival-1) )) THEN
                      iitmp = itmp-2
                      DO 5711 j=1, 2097154
                          iphotonucr(j) = iitmp
5711                  CONTINUE
5712                  CONTINUE
                      iitmp = 1 - iitmp
                      DO 5721 k=1,nvalue(ival)
                          istart = value(ival-1,k)
                          iend = value(ival,k)
                          write(i_log,*) 'Photonuclear start region',ist
     *                    art
                          write(i_log,*) 'Photonuclear stop region',iend
                          IF (( istart .LE. iend )) THEN
                              DO 5731 j=istart,iend
                                  iphotonucr(j) = iitmp
5731                          CONTINUE
5732                          CONTINUE
                              aux_inregions = .true.
                          END IF
5721                  CONTINUE
5722                  CONTINUE
                  ELSE
                      value(num_photonuc,1) = iphotonucr(1)
                  END IF
              ELSE
                  value(num_photonuc,1) = iphotonucr(1)
              END IF
          ELSE
              IF((itmp .GT. 3))itmp = itmp-2
              write(i_log,*) ' Setting all to ',itmp
              DO 5741 j=1, 2097154
                  iphotonucr(j) = itmp
5741          CONTINUE
5742          CONTINUE
          END IF
      ELSE
          IF ((iphotonucr(1) .EQ. 2 .OR. iphotonucr(1) .EQ. 3)) THEN
              value(num_photonuc,1) = iphotonucr(1)+2
          ELSE
              value(num_photonuc,1) = iphotonucr(1)
          END IF
      END IF
      photonuc_inregions = aux_inregions
      aux_inregions = .false.
      ival = ival + 1
      num_ecut = ival
      values_sought(ival) = 'Set ECUT'
      nvalue(ival) = 0
      type(ival) = 1
      value_min(ival) = 0.
      value_max(ival) = 1e15
      default(ival) = 0.
      ival = ival + 1
      values_sought(ival) = 'Set ECUT start region'
      nvalue(ival) = 0
      type(ival) = 0
      value_min(ival) = 1
      value_max(ival) =  2097154
      default(ival) = 1
      ival = ival + 1
      values_sought(ival) = 'Set ECUT stop region'
      nvalue(ival) = 0
      type(ival) = 0
      value_min(ival) = 1
      value_max(ival) =  2097154
      default(ival) = 1
      Nmin = num_ecut
      Nmax = num_ecut+2
      error_flag = 0
      CALL GET_INPUT
      IF (( error_flag .EQ. 0 )) THEN
          IF (( nvalue(num_ecut) .EQ. nvalue(ival) .AND. nvalue(ival-1)
     *    .EQ. nvalue(ival) )) THEN
              DO 5751 k=1,nvalue(ival)
                  istart = value(ival-1,k)
                  iend = value(ival,k)
                  IF (( istart .LE. iend )) THEN
                      DO 5761 j=istart,iend
                          ECUT = value(num_ecut,k)
5761                  CONTINUE
5762                  CONTINUE
                      aux_inregions = .true.
                  END IF
5751          CONTINUE
5752          CONTINUE
          END IF
      END IF
      ecut_inregions = aux_inregions
      aux_inregions = .false.
      ival = ival + 1
      num_pcut = ival
      values_sought(ival) = 'Set PCUT'
      nvalue(ival) = 0
      type(ival) = 1
      value_min(ival) = 0.
      value_max(ival) = 1e15
      default(ival) = 0.
      ival = ival + 1
      values_sought(ival) = 'Set PCUT start region'
      nvalue(ival) = 0
      type(ival) = 0
      value_min(ival) = 1
      value_max(ival) =  2097154
      default(ival) = 1
      ival = ival + 1
      values_sought(ival) = 'Set PCUT stop region'
      nvalue(ival) = 0
      type(ival) = 0
      value_min(ival) = 1
      value_max(ival) =  2097154
      default(ival) = 1
      Nmin = num_pcut
      Nmax = num_pcut+2
      error_flag = 0
      CALL GET_INPUT
      IF (( error_flag .EQ. 0 )) THEN
          IF (( nvalue(num_pcut) .EQ. nvalue(ival) .AND. nvalue(ival-1)
     *    .EQ. nvalue(ival) )) THEN
              DO 5771 k=1,nvalue(ival)
                  istart = value(ival-1,k)
                  iend = value(ival,k)
                  IF (( istart .LE. iend )) THEN
                      DO 5781 j=istart,iend
                          PCUT = value(num_pcut,k)
5781                  CONTINUE
5782                  CONTINUE
                      aux_inregions = .true.
                  END IF
5771          CONTINUE
5772          CONTINUE
          END IF
      END IF
      pcut_inregions = aux_inregions
      aux_inregions = .false.
      ival = ival + 1
      num_smax = ival
      values_sought(ival) = 'Set SMAX'
      nvalue(ival) = 0
      type(ival) = 1
      value_min(ival) = 0.
      value_max(ival) = 1e15
      default(ival) = 0.
      ival = ival + 1
      values_sought(ival) = 'Set SMAX start region'
      nvalue(ival) = 0
      type(ival) = 0
      value_min(ival) = 1
      value_max(ival) =  2097154
      default(ival) = 1
      ival = ival + 1
      values_sought(ival) = 'Set SMAX stop region'
      nvalue(ival) = 0
      type(ival) = 0
      value_min(ival) = 1
      value_max(ival) =  2097154
      default(ival) = 1
      Nmin = num_smax
      Nmax = num_smax+2
      error_flag = 0
      CALL GET_INPUT
      IF (( error_flag .EQ. 0 )) THEN
          IF (( nvalue(num_smax) .EQ. nvalue(ival) .AND. nvalue(ival-1)
     *    .EQ. nvalue(ival) )) THEN
              DO 5791 k=1,nvalue(ival)
                  istart = value(ival-1,k)
                  iend = value(ival,k)
                  IF (( istart .LE. iend )) THEN
                      DO 5801 j=istart,iend
                          SMAXIR = value(num_smax,k)
5801                  CONTINUE
5802                  CONTINUE
                      aux_inregions = .true.
                  END IF
5791          CONTINUE
5792          CONTINUE
          END IF
      END IF
      smax_inregions = aux_inregions
      write(i_errors,*)
      write(i_errors,*) ' ******************** end input transport param
     *eter *********************** '
      write(i_errors,*)
      IF ((value(num_relax,1) .GT. 0 .AND. value(num_relax,1) .LT. 5)) T
     *HEN
          eadl_relax = .true.
          IF ((value(num_relax,1) .EQ. 1)) THEN
              value(num_relax,1)=4
          END IF
      ELSE
          IF ((mcdf_pe_xsections .AND. value(num_relax,1) .EQ. 5)) THEN
              eadl_relax = .true.
              value(num_relax,1)=4
              write(i_log,'(/a)') '***************** Warning: '
              write(i_log,'(a/,a/,a/)') '    Simplified atomic relaxatio
     *n not allowed', '    with shellwise PE cross sections. Resetting',
     *         '    to detailed EADL atomic relaxation!!!'
          ELSE
              eadl_relax = .false.
          END IF
      END IF
      output_strings(1) = allowed_inputs(num_pair_ang,iprdst)
      itmp = value(num_incoh,1)
      output_strings(2) = allowed_inputs(num_incoh,itmp)
      IF (( radc_flag .EQ. 1 )) THEN
          write(i_log,'(/a)') '***************** Warning: '
          write(i_log,*) 'You are trying to use radiative Compton correc
     *tions'
          write(i_log,*) 'without having included rad_compton1.mortran'
          write(i_log,'(a//)') 'Turning radiative Compton corrections OF
     *F ...'
          radc_flag = 0
      END IF
      output_strings(12) = allowed_inputs(num_radc,radc_flag)
      itmp = value(num_coh,1)
      output_strings(3) = allowed_inputs(num_coh,itmp)
      itmp = value(num_relax,1)
      output_strings(4) = allowed_inputs(num_relax,itmp)
      itmp = value(num_pe_ang,1)
      output_strings(5) = allowed_inputs(num_pe_ang,itmp)
      output_strings(6) = allowed_inputs(num_brems_ang,ibrdst)
      output_strings(7) = allowed_inputs(num_bca,bca_algorithm)
      output_strings(8) = allowed_inputs(num_alg,transport_algorithm)
      output_strings(9) = allowed_inputs(num_brems_cs,ibr_nist)
      output_strings(10) = allowed_inputs(num_pair_cs,pair_nrc)
      output_strings(11) = allowed_inputs(num_triplet,itriplet)
      itmp = value(num_photonuc,1)
      output_strings(14) = allowed_inputs(num_photonuc,itmp)
      entry show_transport_parameter(ounit)
      IF((ounit .LE. 0))return
      write(ounit,*)
      write(ounit,'(a)') line
      write(ounit,*)
      write(ounit,'(a,/)') '                   Electron/Photon transport
     * parameter'
      write(ounit,'(a,/)') line
      write(ounit,'(a,38x,a)') ' Photon cross sections', photon_xsection
     *s(:lnblnk1(photon_xsections))
      write(ounit,'(a,37x,a)') ' Compton cross sections', comp_xsections
     *(:lnblnk1(comp_xsections))
      write(ounit,'(a,$)') ' Photon transport cutoff(MeV)'
      IF (( pcut_inregions )) THEN
          write(ounit,'(32x,a)') 'Set in regions'
      ELSE
          IF (( PCUT .GT. 1e-4 )) THEN
              write(ounit,'(32x,g14.4)') PCUT
          ELSE
              write(ounit,'(32x,a)') 'AP(medium)'
          END IF
      END IF
      write(ounit,'(a,39x,a3)') ' Pair angular sampling',output_strings(
     *1)
      write(ounit,'(a,41x,a3)') ' Pair cross sections',output_strings(10
     *)
      write(ounit,'(a,42x,a3)') ' Triplet production',output_strings(11)
      write(ounit,'(a,36x,a14)') ' Bound Compton scattering',output_stri
     *ngs(2)
      write(ounit,'(a,31x,a14)') ' Radiative Compton corrections',output
     *_strings(12)
      write(ounit,'(a,41x,a14)') ' Rayleigh scattering',output_strings(3
     *)
      write(ounit,'(a,42x,a14)') ' Atomic relaxations',output_strings(4)
      write(ounit,'(a,30x,a14)') ' Photoelectron angular sampling',outpu
     *t_strings(5)
      IF (( value(num_photonuc,1) .GT. 0 )) THEN
          write(ounit,'(a,36x,a14)') ' Photonuclear attenuation',output_
     *    strings(14)
          write(ounit,'(a,33x,a)') ' Photonuclear cross sections', photo
     *    nuc_xsections(:lnblnk1(photonuc_xsections))
      END IF
      write(ounit,*)
      write(ounit,'(a,$)') ' Electron transport cutoff(MeV)'
      IF (( ecut_inregions )) THEN
          write(ounit,'(30x,a)') 'Set in regions'
      ELSE
          IF (( ECUT .GT. 1e-4 )) THEN
              write(ounit,'(30x,f7.4)') ECUT
          ELSE
              write(ounit,'(30x,a)') 'AE(medium)'
          END IF
      END IF
      write(ounit,'(a,30x,a4)') ' Bremsstrahlung cross sections',output_
     *strings(9)
      write(ounit,'(a,29x,a3)') ' Bremsstrahlung angular sampling',outpu
     *t_strings(6)
      IF (( spin_effects )) THEN
          write(ounit,'(a,48x,a)') ' Spin effects','On'
      ELSE
          write(ounit,'(a,48x,a)') ' Spin effects','Off'
      END IF
      write(ounit,'(a,34x,a)') ' Electron Impact Ionization',eii_xfile(:
     *lnblnk1(eii_xfile))
      IF ((eii_L_factor .NE. 1.0)) THEN
          write(ounit,'(a,25x,f6.4)') ' L-shell EII xsections scaling fa
     *ctor',eii_L_factor
      END IF
      write(ounit,'(a,$)') ' Maxium electron step in cm (SMAX)'
      IF (( smax_inregions )) THEN
          write(ounit,'(27x,a)') 'Set in regions'
      ELSE
          IF (( SMAXIR .GT. 1e-4 )) THEN
              write(ounit,'(27x,g14.4)') SMAXIR
          ELSE
              write(ounit,'(27x,a)') 'Restriction is off'
          END IF
      END IF
      write(ounit,'(a,16x,f6.4)') ' Maximum fractional energy loss/step
     *(ESTEPE)',estepe
      write(ounit,'(a,21x,f6.4)') ' Maximum 1st elastic moment/step (XIM
     *AX)',ximax
      write(ounit,'(a,33x,a10)') ' Boundary crossing algorithm',output_s
     *trings(7)
      write(ounit,'(a,22x,g9.4)') ' Skin-depth for boundary crossing (MF
     *P)',skindepth_for_bca
      write(ounit,'(a,37x,a10)') ' Electron-step algorithm',output_strin
     *gs(8)
      IF (( ExIN.NE.0 .OR. EyIN.NE.0 .OR. EzIN.NE.0 )) THEN
          write(ounit,'(a,38x,3f10.2)') ' Electric Field [V/cm]', ExIN,E
     *    yIN,EzIN
      END IF
      IF (( Bx.NE.0 .OR. By.NE.0 .OR. Bz.NE.0 )) THEN
          write(ounit,'(a,41x,3f10.2)') ' Magnetic Field [T]', Bx,By,Bz
      END IF
      IF (( ExIN.NE.0 .OR. EyIN.NE.0 .OR. EzIN.NE.0 .OR. Bx.NE.0 .OR. By
     *.NE.0 .OR. Bz.NE.0 )) THEN
          write(ounit,'(a,50x,f10.2)') ' EM ESTEPE',EMLMTIN
      END IF
      write(ounit,*)
      write(ounit,'(a)') line
      write(ounit,*)
      return
      end
      subroutine set_elastic_parameter
      implicit none
      integer*4 ounit
      COMMON/GetInput/ ALLOWED_INPUTS(100,0:5),   VALUES_SOUGHT(100),  C
     *HAR_VALUE(100,100),  VALUE(100,100),  DEFAULT(100),  VALUE_MIN(100
     *),  VALUE_MAX(100),  NVALUE(100),  TYPE(100),      ERROR_FLAGS(100
     *),   i_errors,  NMIN, NMAX,   ERROR_FLAG,  DELIMETER
      character ALLOWED_INPUTS*64,VALUES_SOUGHT*64, CHAR_VALUE*256,DELIM
     *ETER*64
      real*8 VALUE,DEFAULT,VALUE_MIN,VALUE_MAX
      integer*4 NVALUE,TYPE,NMIN,NMAX,ERROR_FLAG,ERROR_FLAGS,i_errors
      COMMON/ELECIN/ esig_e(7),psig_e(7), esige_max, psige_max, range_ep
     *(0:1,500,7), E_array(500,7), etae_ms0(500,7),etae_ms1(500,7),etap_
     *ms0(500,7),etap_ms1(500,7),q1ce_ms0(500,7),q1ce_ms1(500,7),q1cp_ms
     *0(500,7),q1cp_ms1(500,7),q2ce_ms0(500,7),q2ce_ms1(500,7),q2cp_ms0(
     *500,7),q2cp_ms1(500,7),blcce0(500,7),blcce1(500,7), EKE0(7),EKE1(7
     *), XR0(7),TEFF0(7),BLCC(7),XCC(7), ESIG0(500,7),ESIG1(500,7),PSIG0
     *(500,7),PSIG1(500,7),EDEDX0(500,7),EDEDX1(500,7),PDEDX0(500,7),PDE
     *DX1(500,7),EBR10(500,7),EBR11(500,7),PBR10(500,7),PBR11(500,7),PBR
     *20(500,7),PBR21(500,7),TMXS0(500,7),TMXS1(500,7), expeke1(7), IUNR
     *ST(7),EPSTFL(7),IAPRIM(7), sig_ismonotone(0:1,7)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer*4 imed,ival,lnblnk1,nchanged
      character*24 medname
      ounit = i_log
      ounit = i_log
      delimeter = 'MC TRANSPORT PARAMETER'
      call get_input_set_error_level(0)
      ival = 0
      DO 5811 imed=1,nmed
          call egs_get_medium_name(imed,medname)
          ival = ival + 1
          values_sought(ival) = 'scale elastic scattering in '// medname
     *    (:lnblnk1(medname))
          nvalue(ival) = 1
          type(ival) = 1
          value_min(ival) = 1e-3
          value_max(ival) = 1e3
          default(ival) = 1
5811  CONTINUE
5812  CONTINUE
      Nmin = 1
      Nmax = nmed
      CALL GET_INPUT
      nchanged = 0
      DO 5821 imed=1,nmed
          IF((error_flags(imed) .EQ. 0))nchanged = nchanged + 1
5821  CONTINUE
5822  CONTINUE
      IF (( nchanged .GT. 0 )) THEN
          write(ounit,'(//a)') '================ Elastic scattering scal
     *ed as follows =================='
          DO 5831 imed=1,nmed
              IF (( error_flags(imed) .EQ. 0 )) THEN
                  call egs_get_medium_name(imed,medname)
                  xcc(imed) = xcc(imed)*value(imed,1)
                  blcc(imed) = blcc(imed)*value(imed,1)
                  write(ounit,'(a,t30,f10.6)') medname(:lnblnk1(medname)
     *            ), value(imed,1)
              END IF
5831      CONTINUE
5832      CONTINUE
          write(ounit,'(a//)') '========================================
     *================================'
      END IF
      return
      end
      SUBROUTINE GET_INPUT_PLUS(UNITNUM,DELIM_START,DELIM_END)
      IMPLICIT NONE
      COMMON/GetInput/ ALLOWED_INPUTS(100,0:5),   VALUES_SOUGHT(100),  C
     *HAR_VALUE(100,100),  VALUE(100,100),  DEFAULT(100),  VALUE_MIN(100
     *),  VALUE_MAX(100),  NVALUE(100),  TYPE(100),      ERROR_FLAGS(100
     *),   i_errors,  NMIN, NMAX,   ERROR_FLAG,  DELIMETER
      character ALLOWED_INPUTS*64,VALUES_SOUGHT*64, CHAR_VALUE*256,DELIM
     *ETER*64
      real*8 VALUE,DEFAULT,VALUE_MIN,VALUE_MAX
      integer*4 NVALUE,TYPE,NMIN,NMAX,ERROR_FLAG,ERROR_FLAGS,i_errors
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      CHARACTER*256 TEXT
      CHARACTER*256 KEEPTEXT
      CHARACTER*256 ORIGTEXT
      CHARACTER*256 TEXTPIECE
      CHARACTER*40 DELIM_START
      CHARACTER*40 DELIM_END
      CHARACTER*40 ENDSTRING
      CHARACTER*64 VNAME
      CHARACTER*64 VNAME1
      integer*4 CURSOR
      integer*4 IINDEX
      integer*4 iVNAME
      integer*4 IVAL
      integer*4 UNITNUM
      integer*4 ERR
      integer*4 I,J,K,CHECK
      integer*4 LINE
      integer*4 INT_VALUE
      integer*4 INT_VALUE_MIN
      integer*4 INT_VALUE_MAX
      logical ALLOWED
      logical START_FOUND
      integer*4 ifound,length,lll,Kconvert
      integer*4 lnblnk1
      logical IDEBUG,end_string
      character*1 blank
      integer*4 error_level
      integer*4 the_level
      data blank/' '/
      data error_level/1/
      save error_level
      IDEBUG = .false.
      ERROR_FLAG = 0
      IF ((IDEBUG)) THEN
          WRITE(6,5840)NMIN,NMAX, 100
5840      FORMAT(' Entering get_inputs seeking values', I5,' to', I5, ' 
     *with a max allowed of',I5)
      END IF
      IF ((NMAX .LT. NMIN .OR. NMAX .GT. 100)) THEN
          WRITE(6,5850)NMAX, NMIN, 100
5850      FORMAT(//' Error entering get_inputs: Asked for values from',I
     *5,' to',I5, '    with a max of',I5//' This implies a bug in the ca
     *lling routine'/ ' Fix it up and try again.  Stopping now.')
          STOP
      END IF
      ERR=i_errors
      DELIM_START=DELIM_START(:lnblnk1(DELIM_START))
      DELIM_END=DELIM_END(:lnblnk1(DELIM_END))
      length = len(DELIM_START)
5861  IF(index(DELIM_START,blank).NE.1)GO TO 5862
          IF (( length .GE. 2 )) THEN
              DELIM_START=DELIM_START(2:)
          ELSE
              GO TO5862
          END IF
          length = length - 1
      GO TO 5861
5862  CONTINUE
      length = len(DELIM_END)
5871  IF(index(DELIM_END,blank).NE.1)GO TO 5872
          IF (( length .GE. 2 )) THEN
              DELIM_END=DELIM_END(2:)
          ELSE
              GO TO5872
          END IF
          length = length - 1
      GO TO 5871
5872  CONTINUE
      DO 5881 Kconvert=1,lnblnk1(DELIM_START)
          CURSOR=ICHAR(DELIM_START(Kconvert:Kconvert))
          IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
              CURSOR=CURSOR-32
              DELIM_START(Kconvert:Kconvert)=CHAR(CURSOR)
          END IF
5881  CONTINUE
5882  CONTINUE
      DO 5891 Kconvert=1,lnblnk1(DELIM_END)
          CURSOR=ICHAR(DELIM_END(Kconvert:Kconvert))
          IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
              CURSOR=CURSOR-32
              DELIM_END(Kconvert:Kconvert)=CHAR(CURSOR)
          END IF
5891  CONTINUE
5892  CONTINUE
      length = len(ENDSTRING)
5901  IF(index(ENDSTRING,blank).NE.1)GO TO 5902
          IF (( length .GE. 2 )) THEN
              ENDSTRING=ENDSTRING(2:)
          ELSE
              GO TO5902
          END IF
          length = length - 1
      GO TO 5901
5902  CONTINUE
      IF ((ENDSTRING.EQ.blank)) THEN
          end_string=.false.
      ELSE
          DO 5911 Kconvert=1,lnblnk1(ENDSTRING)
              CURSOR=ICHAR(ENDSTRING(Kconvert:Kconvert))
              IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
                  CURSOR=CURSOR-32
                  ENDSTRING(Kconvert:Kconvert)=CHAR(CURSOR)
              END IF
5911      CONTINUE
5912      CONTINUE
          end_string=.false.
      END IF
      IF ((IDEBUG)) THEN
          WRITE(6,5920)DELIM_START,DELIM_END
5920      FORMAT(' start and stop delimeters are:'/ A/A/)
      END IF
      DO 5931 I=NMIN,NMAX
          REWIND (UNITNUM)
          LINE=0
          CHECK=0
          ERROR_FLAGS(I)=0
          IF ((TYPE(I) .EQ. 0 .OR. TYPE(I) .EQ. 1)) THEN
              VALUE(I,1) = DEFAULT(I)
          END IF
          IF ((TYPE(I) .EQ. 3)) THEN
              VALUE(I,1) = 0
          END IF
          VNAME=VALUES_SOUGHT(I)
          iVNAME=lnblnk1(VNAME)
          IF (( ivname .LT. 1 )) THEN
              IF (( error_level .GT. 0 )) THEN
                  write(ERR,*) ' ======================= Warning =======
     *============== '
                  write(ERR,*) '    Empty VALUES_SOUGHT passt to Get_Inp
     *uts()!         '
                  write(ERR,*) ' =======================================
     *============== '
              END IF
              ERROR_FLAG=1
              ERROR_FLAGS(I)=1
              goto 4990
          END IF
          DO 5941 Kconvert=1,lnblnk1(vname)
              CURSOR=ICHAR(vname(Kconvert:Kconvert))
              IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
                  CURSOR=CURSOR-32
                  vname(Kconvert:Kconvert)=CHAR(CURSOR)
              END IF
5941      CONTINUE
5942      CONTINUE
          iindex = 0
          IF ((DELIM_START .EQ. 'NONE')) THEN
              start_found = .true.
          ELSE
              start_found = .false.
          END IF
5951      IF(iindex.NE.0)GO TO 5952
5020          CONTINUE
              LINE=LINE+1
              IF (( start_found )) THEN
                  READ(UNITNUM,END=5030,ERR=5040,FMT='(A256)') TEXT
              ELSE
                  READ(UNITNUM,END=5050,ERR=5040,FMT='(A256)') TEXT
              END IF
              length = len(text)
5961          IF(index(text,blank).NE.1)GO TO 5962
                  IF (( length .GE. 2 )) THEN
                      text=text(2:)
                  ELSE
                      GO TO5962
                  END IF
                  length = length - 1
              GO TO 5961
5962          CONTINUE
              ifound = INDEX(text,'#')
              IF (( ifound .GT. 1 )) THEN
                  text = text(1:ifound-1)
              ELSE
                  IF (( ifound .EQ. 1 )) THEN
                      text = blank
                  END IF
              END IF
              ifound = INDEX(text,';')
              IF (( ifound .GT. 1 )) THEN
                  text = text(1:ifound-1)
              ELSE
                  IF (( ifound .EQ. 1 )) THEN
                      text = blank
                  END IF
              END IF
              length = lnblnk1(TEXT)
              TEXT=TEXT(:length)
              origtext = text(:length)
              DO 5971 Kconvert=1,lnblnk1(text)
                  CURSOR=ICHAR(text(Kconvert:Kconvert))
                  IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
                      CURSOR=CURSOR-32
                      text(Kconvert:Kconvert)=CHAR(CURSOR)
                  END IF
5971          CONTINUE
5972          CONTINUE
              IF (( .NOT.start_found )) THEN
                  IF ((INDEX(TEXT,DELIM_START) .NE. 0 )) THEN
                      start_found = .true.
                  END IF
                  goto 5020
              END IF
              iindex=INDEX(TEXT,VNAME(:iVNAME))
              IF (( DELIM_END.NE.'NONE' )) THEN
                  IF ((INDEX(TEXT,DELIM_END).NE.0)) THEN
                      IF (( error_level .GT. 0 )) THEN
                          WRITE (ERR,*) '***************ERROR***********
     *****'
                          WRITE (ERR,*) '>>',VALUES_SOUGHT(I)(:lnblnk1(V
     *                    ALUES_SOUGHT(I))), '<<',' NOT FOUND'
                          WRITE (ERR,*) 'END OF DELIMETER: ',DELIM_END
                      END IF
                      ERROR_FLAG=1
                      ERROR_FLAGS(I)=1
                      GOTO 4990
                  END IF
              END IF
          GO TO 5951
5952      CONTINUE
          CHECK=0
          IF (( idebug )) THEN
              write(i_log,*) ' ******* Found: '
              write(i_log,'(a,$)') ' text:     '
              length = lnblnk1(text)
              IF (( length .GT. 0 )) THEN
                  DO 5981 lll=1,length
                      write(i_log,'(a1,$)') text(lll:lll)
5981              CONTINUE
5982              CONTINUE
                  write(i_log,*)
              END IF
              write(i_log,'(a,$)') ' origtext: '
              length = lnblnk1(origtext)
              IF (( length .GT. 0 )) THEN
                  DO 5991 lll=1,length
                      write(i_log,'(a1,$)') origtext(lll:lll)
5991              CONTINUE
5992              CONTINUE
                  write(i_log,*)
              END IF
          END IF
          IINDEX=IINDEX+iVNAME
          TEXT=TEXT(IINDEX:)
          origtext=origtext(iindex:)
          IF (( idebug )) THEN
              write(i_log,*) ' After removing vname: '
              write(i_log,'(a,$)') ' text:     '
              length = lnblnk1(text)
              IF (( length .GT. 0 )) THEN
                  DO 6001 lll=1,length
                      write(i_log,'(a1,$)') text(lll:lll)
6001              CONTINUE
6002              CONTINUE
                  write(i_log,*)
              END IF
              write(i_log,'(a,$)') ' origtext: '
              length = lnblnk1(origtext)
              IF (( length .GT. 0 )) THEN
                  DO 6011 lll=1,length
                      write(i_log,'(a1,$)') origtext(lll:lll)
6011              CONTINUE
6012              CONTINUE
                  write(i_log,*)
              END IF
          END IF
          IINDEX=INDEX(TEXT,'=')
          IF ((IINDEX.NE.0)) THEN
              TEXT=TEXT(IINDEX+1:)
              origtext=origtext(iindex+1:)
          ELSE
              IINDEX=INDEX(TEXT,':')
              IF ((IINDEX.NE.0)) THEN
                  TEXT=TEXT(IINDEX+1:)
                  origtext=origtext(iindex+1:)
              END IF
          END IF
          IF (( idebug )) THEN
              write(i_log,*) ' After removing leading equals: '
              write(i_log,'(a,$)') ' text:     '
              length = lnblnk1(text)
              IF (( length .GT. 0 )) THEN
                  DO 6021 lll=1,length
                      write(i_log,'(a1,$)') text(lll:lll)
6021              CONTINUE
6022              CONTINUE
                  write(i_log,*)
              END IF
              write(i_log,'(a,$)') ' origtext: '
              length = lnblnk1(origtext)
              IF (( length .GT. 0 )) THEN
                  DO 6031 lll=1,length
                      write(i_log,'(a1,$)') origtext(lll:lll)
6031              CONTINUE
6032              CONTINUE
                  write(i_log,*)
              END IF
          END IF
          IF (( (lnblnk1(TEXT).EQ.0) .OR. (lnblnk1(TEXT).EQ.1) )) THEN
              IF ((vname(:ivname).EQ.'TITLE')) THEN
                  READ (UNITNUM,FMT='(A256)') TEXTPIECE
                  IF ((lnblnk1(TEXTPIECE).NE.0)) THEN
                      TEXT=TEXTPIECE(:lnblnk1(TEXTPIECE))
                      length = len(text)
6041                  IF(index(text,blank).NE.1)GO TO 6042
                          IF (( length .GE. 2 )) THEN
                              text=text(2:)
                          ELSE
                              GO TO6042
                          END IF
                          length = length - 1
                      GO TO 6041
6042                  CONTINUE
                      length = len(origtext)
6051                  IF(index(origtext,blank).NE.1)GO TO 6052
                          IF (( length .GE. 2 )) THEN
                              origtext=origtext(2:)
                          ELSE
                              GO TO6052
                          END IF
                          length = length - 1
                      GO TO 6051
6052                  CONTINUE
                      GOTO 5160
                  END IF
              END IF
              IF (( error_level .GT. 0 )) THEN
                  WRITE (ERR,*) '*************ERROR*************'
                  WRITE (ERR,*) 'VALUE SOUGHT: ',VALUES_SOUGHT(I)
                  WRITE (ERR,*) 'VALUE NOT THERE!!'
              END IF
              ERROR_FLAG=1
              ERROR_FLAGS(I)=1
              RETURN
          END IF
5160      CONTINUE
          iindex = index(text,'DEFAULT')
          IF (( iindex .NE. 0 )) THEN
              IF (( type(i) .NE. 2 )) THEN
                  IF (( type(i) .NE. 3 )) THEN
                      VALUE(I,1)=DEFAULT(I)
                  ELSE
                      VALUE(I,1)=0
                  END IF
                  goto 4990
              END IF
          END IF
          IF (((TYPE(I) .EQ. 0).OR.(TYPE(I) .EQ. 1))) THEN
              IVAL=1
              IF (( idebug )) THEN
                  write(i_log,*) ' *** Reading an integer or a real valu
     *e! '
              END IF
6061          CONTINUE
                  IF (( idebug )) THEN
                      write(i_log,*) ' In LOOP, ival = ',ival
                  END IF
                  IF ((lnblnk1(TEXT).EQ.0)) THEN
                      IF (( error_level .GT. 0 )) THEN
                          WRITE(ERR,*) '*************ERROR*************'
                          WRITE (ERR,*) 'VALUE SOUGHT: ',VALUES_SOUGHT(I
     *                    )
                          WRITE (ERR,*) 'VALUE NOT THERE!!'
                      END IF
                      ERROR_FLAG=1
                      ERROR_FLAGS(I)=1
                      RETURN
                  END IF
                  READ(TEXT,END=5180,ERR=5190,FMT=*) VALUE(I,IVAL)
                  IF (( idebug )) THEN
                      write(i_log,*) ' Read value: ',ival,VALUE(I,IVAL)
                  END IF
                  IF (((VALUE(I,IVAL).GT.VALUE_MAX(I)).OR.(VALUE(I,IVAL)
     *            .LT.VALUE_MIN(I)))) THEN
                      IF ((TYPE(I).EQ.0)) THEN
                          INT_VALUE=DEFAULT(I)
                          IF (( error_level .GT. 0 )) THEN
                              WRITE(ERR,*) '************WARNING*********
     ****'
                              WRITE(ERR,5200) INT_VALUE, VALUES_SOUGHT(I
     *                        )(:lnblnk1(VALUES_SOUGHT(I)))
                          END IF
5200                      FORMAT ( 'Default= ',I9,' used for: ', A )
                          INT_VALUE=VALUE(I,IVAL)
                          INT_VALUE_MIN=VALUE_MIN(I)
                          INT_VALUE_MAX=VALUE_MAX(I)
                          IF (( error_level .GT. 0 )) THEN
                              WRITE(ERR,5210) VALUES_SOUGHT(I)(:lnblnk1(
     *                        VALUES_SOUGHT(I))), INT_VALUE, INT_VALUE_M
     *                        IN,INT_VALUE_MAX
                          END IF
5210                      FORMAT (A,'=', I9,' should be between ', I9,'a
     *nd ', I9)
                      END IF
                      IF ((TYPE(I).EQ.1)) THEN
                          IF (( error_level .GT. 0 )) THEN
                              WRITE(ERR,*) '************WARNING*********
     ****'
                              WRITE(ERR,5220) DEFAULT(I), VALUES_SOUGHT(
     *                        I)(:lnblnk1(VALUES_SOUGHT(I)))
5220                          FORMAT ( 'Default= ',F12.6,' used for: ',A
     * )
                              WRITE(ERR,5230) VALUES_SOUGHT(I)(:lnblnk1(
     *                        VALUES_SOUGHT(I))), VALUE(I,IVAL), VALUE_M
     *                        IN(I),VALUE_MAX(I)
5230                          FORMAT (A,'=', F12.6,' should be between '
     *, G14.6,' and ', G14.6)
                          END IF
                      END IF
                      VALUE(I,IVAL)=DEFAULT(I)
                  END IF
                  IF((IVAL .EQ. NVALUE(I)))GO TO6062
                  IF (((INDEX(TEXT,',').NE.0).OR.(lnblnk1(TEXT).EQ.0)))
     *            THEN
                      IF (( idebug )) THEN
                          write(i_log,*) ' A comma or a blank text found
     * -> '
                          write(i_log,*) ' searching for further input'
                      END IF
                      TEXT=TEXT(INDEX(TEXT,',')+1:)
6071                  IF(lnblnk1(TEXT).NE.0)GO TO 6072
                          IF (( idebug )) THEN
                              write(i_log,*) ' Empty text -> reading nex
     *t line! '
                          END IF
                          LINE=LINE+1
                          READ (UNITNUM,END=5180,ERR=5190,FMT='(A256)')
     *                    TEXT
                          length = len(text)
6081                      IF(index(text,blank).NE.1)GO TO 6082
                              IF (( length .GE. 2 )) THEN
                                  text=text(2:)
                              ELSE
                                  GO TO6082
                              END IF
                              length = length - 1
                          GO TO 6081
6082                      CONTINUE
                          ifound = INDEX(text,'#')
                          IF (( ifound .GT. 1 )) THEN
                              text = text(1:ifound-1)
                          ELSE
                              IF (( ifound .EQ. 1 )) THEN
                                  text = blank
                              END IF
                          END IF
                          ifound = INDEX(text,';')
                          IF (( ifound .GT. 1 )) THEN
                              text = text(1:ifound-1)
                          ELSE
                              IF (( ifound .EQ. 1 )) THEN
                                  text = blank
                              END IF
                          END IF
                          length = lnblnk1(TEXT)
                          TEXT=TEXT(:length)
                          origtext = text(:length)
                          DO 6091 Kconvert=1,lnblnk1(text)
                              CURSOR=ICHAR(text(Kconvert:Kconvert))
                              IF (((CURSOR.GE.97).AND.(CURSOR.LE.122)))
     *                        THEN
                                  CURSOR=CURSOR-32
                                  text(Kconvert:Kconvert)=CHAR(CURSOR)
                              END IF
6091                      CONTINUE
6092                      CONTINUE
                          DO 6101 K=1,NMAX
                              vname1 = VALUES_SOUGHT(K)
                              length = lnblnk1(vname1)
                              IF (( length .GT. 0 )) THEN
                                  length = len(vname1)
6111                              IF(index(vname1,blank).NE.1)GO TO 6112
                                      IF (( length .GE. 2 )) THEN
                                          vname1=vname1(2:)
                                      ELSE
                                          GO TO6112
                                      END IF
                                      length = length - 1
                                  GO TO 6111
6112                              CONTINUE
                                  DO 6121 Kconvert=1,lnblnk1(vname1)
                                      CURSOR=ICHAR(vname1(Kconvert:Kconv
     *                                ert))
                                      IF (((CURSOR.GE.97).AND.(CURSOR.LE
     *                                .122))) THEN
                                          CURSOR=CURSOR-32
                                          vname1(Kconvert:Kconvert)=CHAR
     *                                    (CURSOR)
                                      END IF
6121                              CONTINUE
6122                              CONTINUE
                                  IF ((INDEX(TEXT,vname1(:length)).NE.0)
     *                            ) THEN
                                      IF (( error_level .GT. 0 )) THEN
                                          WRITE(ERR,*) '************ERRO
     *R************'
                                          WRITE(ERR,*) 'VALUE SOUGHT: ',
     *                                    VALUES_SOUGHT(I)
                                          WRITE(ERR,*) KEEPTEXT(:lnblnk1
     *                                    (KEEPTEXT)), '<--COMMA INDICAT
     *ES ANOTHER INPUT'
                                          WRITE(ERR,*) 'SEARCHED NEXT LI
     *NE: ', TEXT(:lnblnk1(TEXT))
                                          WRITE(ERR,*) 'BUT NO OTHER INP
     *UT WAS DETECTED'
                                      END IF
                                      ERROR_FLAG=1
                                      ERROR_FLAGS(I)=1
                                  END IF
                              END IF
6101                      CONTINUE
6102                      CONTINUE
                          IF (( idebug )) THEN
                              write(i_log,*) ' Next line: '
                              write(i_log,'(a,$)') ' text:     '
                              length = lnblnk1(text)
                              IF (( length .GT. 0 )) THEN
                                  DO 6131 lll=1,length
                                      write(i_log,'(a1,$)') text(lll:lll
     *                                )
6131                              CONTINUE
6132                              CONTINUE
                                  write(i_log,*)
                              END IF
                              write(i_log,'(a,$)') ' origtext: '
                              length = lnblnk1(origtext)
                              IF (( length .GT. 0 )) THEN
                                  DO 6141 lll=1,length
                                      write(i_log,'(a1,$)') origtext(lll
     *                                :lll)
6141                              CONTINUE
6142                              CONTINUE
                                  write(i_log,*)
                              END IF
                          END IF
                      GO TO 6071
6072                  CONTINUE
                  ELSE
                      GO TO6062
                  END IF
                  IVAL=IVAL+1
              GO TO 6061
6062          CONTINUE
              IF (((NVALUE(I).NE.0).AND.(NVALUE(I).NE.IVAL))) THEN
                  IF (( error_level .GT. 0 )) THEN
                      WRITE (ERR,*) '**************ERROR**************'
                      WRITE (ERR,*) 'VALUE SOUGHT: ', VALUES_SOUGHT(I)
                      WRITE (ERR,*) 'ASKED FOR', NVALUE(I),' NUMERICAL I
     *NPUT(S)'
                      WRITE (ERR,*) 'HOWEVER,', IVAL, ' WERE DETECTED'
                  END IF
                  ERROR_FLAG=1
                  ERROR_FLAGS(I)=1
              ELSE
                  NVALUE(I)=IVAL
              END IF
5180          CONTINUE
          END IF
          IF (((TYPE(I) .EQ. 2) .OR. (TYPE(I) .EQ. 3))) THEN
              IVAL=1
              IF (( idebug )) THEN
                  write(i_log,*) ' Trying to read a string! '
              END IF
6151          CONTINUE
                  IF (( idebug )) THEN
                      write(i_log,*) ' In LOOP, ival = ',ival
                  END IF
                  IF ((lnblnk1(TEXT).EQ.0)) THEN
                      IF (( error_level .GT. 0 )) THEN
                          WRITE(ERR,*) '*************ERROR*************'
                          WRITE (ERR,*) 'VALUE SOUGHT: ',VALUES_SOUGHT(I
     *                    )
                          WRITE (ERR,*) 'VALUE NOT THERE!!'
                      END IF
                      ERROR_FLAG=1
                      ERROR_FLAGS(I)=1
                      RETURN
                  END IF
                  IF ((vname(:ivname).EQ.'TITLE')) THEN
                      TEXTPIECE=origtext
                      GOTO 5330
                  END IF
                  iindex = INDEX(origtext,',')
                  IF (( iindex .NE. 0 )) THEN
                      TEXTPIECE=origtext(:iindex-1)
                  ELSE
                      TEXTPIECE=origtext
                  END IF
5330              CONTINUE
                  READ(TEXTPIECE,ERR=5340,FMT='(A256)') CHAR_VALUE(I,IVA
     *            L)
                  length = len(CHAR_VALUE(I,IVAL))
6161              IF(index(CHAR_VALUE(I,IVAL),blank).NE.1)GO TO 6162
                      IF (( length .GE. 2 )) THEN
                          CHAR_VALUE(I,IVAL)=CHAR_VALUE(I,IVAL)(2:)
                      ELSE
                          GO TO6162
                      END IF
                      length = length - 1
                  GO TO 6161
6162              CONTINUE
                  IF (( idebug )) THEN
                      write(i_log,*) ' Read the following char string: '
                      length = lnblnk1(CHAR_VALUE(I,IVAL))
                      IF (( length .GT. 0 )) THEN
                          DO 6171 lll=1,length
                              write(i_log,'(a1,$)') CHAR_VALUE(I,IVAL)(l
     *                        ll:lll)
6171                      CONTINUE
6172                      CONTINUE
                          write(i_log,*)
                      END IF
                  END IF
                  IF ((TYPE(I) .EQ. 3)) THEN
                      DO 6181 Kconvert=1,lnblnk1(CHAR_VALUE(I,IVAL))
                          CURSOR=ICHAR(CHAR_VALUE(I,IVAL)(Kconvert:Kconv
     *                    ert))
                          IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
                              CURSOR=CURSOR-32
                              CHAR_VALUE(I,IVAL)(Kconvert:Kconvert)=CHAR
     *                        (CURSOR)
                          END IF
6181                  CONTINUE
6182                  CONTINUE
                      ALLOWED=.FALSE.
                      DO 6191 K=0,5
                          vname1 = ALLOWED_INPUTS(I,K)
                          length = len(ALLOWED_INPUTS(I,K))
6201                      IF(index(ALLOWED_INPUTS(I,K),blank).NE.1)GO TO
     *                     6202
                              IF (( length .GE. 2 )) THEN
                                  ALLOWED_INPUTS(I,K)=ALLOWED_INPUTS(I,K
     *                            )(2:)
                              ELSE
                                  GO TO6202
                              END IF
                              length = length - 1
                          GO TO 6201
6202                      CONTINUE
                          DO 6211 Kconvert=1,lnblnk1(ALLOWED_INPUTS(I,K)
     *                    )
                              CURSOR=ICHAR(ALLOWED_INPUTS(I,K)(Kconvert:
     *                        Kconvert))
                              IF (((CURSOR.GE.97).AND.(CURSOR.LE.122)))
     *                        THEN
                                  CURSOR=CURSOR-32
                                  ALLOWED_INPUTS(I,K)(Kconvert:Kconvert)
     *                            =CHAR(CURSOR)
                              END IF
6211                      CONTINUE
6212                      CONTINUE
                          IF ((ALLOWED_INPUTS(I,K).EQ.CHAR_VALUE(I,IVAL)
     *                    )) THEN
                              ALLOWED=.TRUE.
                              VALUE(I,IVAL)=K
                              IF (( idebug )) THEN
                                  write(i_log,*) ' Found a allowed_value
     * match ',k
                              END IF
                          END IF
6191                  CONTINUE
6192                  CONTINUE
                      IF ((.NOT.ALLOWED)) THEN
                          WRITE(ERR,*) '*************ERROR*************'
                          IF ((IVAL.NE.1)) THEN
                              WRITE (ERR,*) 'VALUE SOUGHT: ',VALUES_SOUG
     *                        HT(I)
                              WRITE (ERR,*) 'SHOULD HAVE ONE INPUT ONLY'
                              WRITE (ERR,*) 'APPARENT STATE: COMMA INDIC
     *ATING SECOND VALUE'
                          ELSE
                              WRITE (ERR,*) 'VALUE SOUGHT: ',VALUES_SOUG
     *                        HT(I)
                              WRITE(ERR,*) 'INPUT-->', CHAR_VALUE(I,IVAL
     *                        )(:lnblnk1(CHAR_VALUE(I,IVAL))), '<--NOT A
     *LLOWED'
                              WRITE(ERR,*) 'OPTIONS ARE:'
                              WRITE(ERR,5410) (ALLOWED_INPUTS(I,K)(:lnbl
     *                        nk1(ALLOWED_INPUTS(I,K))),K=0,5)
                          END IF
5410                      FORMAT(A40)
                          ERROR_FLAG=1
                          ERROR_FLAGS(I)=1
                      END IF
                  END IF
                  IF ((vname(:ivname).EQ.'TITLE')) THEN
                      GO TO6152
                  END IF
                  DO 6221 K=1,LEN(KEEPTEXT)
                      KEEPTEXT(K:K)=' '
6221              CONTINUE
6222              CONTINUE
                  KEEPTEXT(:lnblnk1(TEXT))=TEXT
                  iindex = INDEX(TEXT,',')
                  IF (( iindex .NE. 0 .OR. lnblnk1(TEXT).EQ.0 )) THEN
                      TEXT=TEXT(INDEX(TEXT,',')+1:)
                      origtext=origtext(iindex+1:)
6231                  IF(lnblnk1(TEXT).NE.0)GO TO 6232
                          LINE=LINE+1
                          READ (UNITNUM,ERR=5340,FMT='(A256)') TEXT
                          length = len(text)
6241                      IF(index(text,blank).NE.1)GO TO 6242
                              IF (( length .GE. 2 )) THEN
                                  text=text(2:)
                              ELSE
                                  GO TO6242
                              END IF
                              length = length - 1
                          GO TO 6241
6242                      CONTINUE
                          ifound = INDEX(text,'#')
                          IF (( ifound .GT. 1 )) THEN
                              text = text(1:ifound-1)
                          ELSE
                              IF (( ifound .EQ. 1 )) THEN
                                  text = blank
                              END IF
                          END IF
                          ifound = INDEX(text,';')
                          IF (( ifound .GT. 1 )) THEN
                              text = text(1:ifound-1)
                          ELSE
                              IF (( ifound .EQ. 1 )) THEN
                                  text = blank
                              END IF
                          END IF
                          length = lnblnk1(TEXT)
                          TEXT=TEXT(:length)
                          origtext = text(:length)
                          DO 6251 Kconvert=1,lnblnk1(text)
                              CURSOR=ICHAR(text(Kconvert:Kconvert))
                              IF (((CURSOR.GE.97).AND.(CURSOR.LE.122)))
     *                        THEN
                                  CURSOR=CURSOR-32
                                  text(Kconvert:Kconvert)=CHAR(CURSOR)
                              END IF
6251                      CONTINUE
6252                      CONTINUE
                          DO 6261 K=1,NMAX
                              vname1 = VALUES_SOUGHT(K)
                              length = lnblnk1(vname1)
                              IF (( length .GT. 0 )) THEN
                                  length = len(vname1)
6271                              IF(index(vname1,blank).NE.1)GO TO 6272
                                      IF (( length .GE. 2 )) THEN
                                          vname1=vname1(2:)
                                      ELSE
                                          GO TO6272
                                      END IF
                                      length = length - 1
                                  GO TO 6271
6272                              CONTINUE
                                  DO 6281 Kconvert=1,lnblnk1(vname1)
                                      CURSOR=ICHAR(vname1(Kconvert:Kconv
     *                                ert))
                                      IF (((CURSOR.GE.97).AND.(CURSOR.LE
     *                                .122))) THEN
                                          CURSOR=CURSOR-32
                                          vname1(Kconvert:Kconvert)=CHAR
     *                                    (CURSOR)
                                      END IF
6281                              CONTINUE
6282                              CONTINUE
                                  IF ((INDEX(TEXT,vname1(:length)).NE.0)
     *                            ) THEN
                                      WRITE(ERR,*) '************ERROR***
     **********'
                                      WRITE(ERR,*) 'VALUE SOUGHT: ',VALU
     *                                ES_SOUGHT(I)
                                      WRITE(ERR,*) KEEPTEXT(:lnblnk1(KEE
     *                                PTEXT)), '<--COMMA INDICATES ANOTH
     *ER INPUT'
                                      WRITE(ERR,*) 'SEARCHED NEXT LINE:
     *', TEXT(:lnblnk1(TEXT))
                                      WRITE(ERR,*) 'BUT NO OTHER INPUT W
     *AS DETECTED'
                                      ERROR_FLAG=1
                                      ERROR_FLAGS(I)=1
                                  END IF
                              END IF
6261                      CONTINUE
6262                      CONTINUE
                      GO TO 6231
6232                  CONTINUE
                  ELSE
                      GO TO6152
                  END IF
                  IVAL=IVAL+1
              GO TO 6151
6152          CONTINUE
              IF (((NVALUE(I).NE.0).AND.(NVALUE(I).NE.IVAL))) THEN
                  IF (( error_level .GT. 0 )) THEN
                      WRITE (ERR,*) '*******************ERROR***********
     *********'
                      WRITE (ERR,*) 'VALUE SOUGHT: ', VALUES_SOUGHT(I)
                      WRITE (ERR,*) 'ASKED FOR', NVALUE(I),' INPUT(S)'
                      WRITE (ERR,*) 'HOWEVER,', IVAL, ' WERE DETECTED'
                  END IF
                  ERROR_FLAG=1
                  ERROR_FLAGS(I)=1
              ELSE
                  NVALUE(I)=IVAL
              END IF
          END IF
          goto 4990
5030      IF (( error_level .GT. 0 )) THEN
              WRITE (ERR,*) '******************ERROR********************
     ****'
              WRITE (ERR,*) 'END OF FILE REACHED BUT VALUE SOUGHT NOT FO
     *UND'
              WRITE (ERR,*) 'PROBABLY A MISSING/MISSPELLED END DELIMETER
     *'
              WRITE (ERR,*) 'VALUE SOUGHT: >>', VALUES_SOUGHT(I)(:lnblnk
     *        1(VALUES_SOUGHT(I))),'<<'
              WRITE (ERR,*) 'END DELIMETER: >>', DELIM_END(:lnblnk1(DELI
     *        M_END)),'<<'
          END IF
          ERROR_FLAG=1
          ERROR_FLAGS(I)=1
          goto 4990
5050      IF (( error_level .GT. 0 )) THEN
              WRITE (ERR,*) '******************ERROR********************
     ****'
              WRITE (ERR,*) 'END OF FILE REACHED BUT VALUE SOUGHT NOT FO
     *UND'
              WRITE (ERR,*) 'PROBABLY A MISSING/MISSPELLED START DELIMET
     *ER'
              WRITE (ERR,*) 'VALUE SOUGHT: >>', VALUES_SOUGHT(I)(:lnblnk
     *        1(VALUES_SOUGHT(I))),'<<'
              WRITE (ERR,*) 'START DELIMETER: >>', DELIM_START(:lnblnk1(
     *        DELIM_START)),'<<'
          END IF
          ERROR_FLAG=1
          ERROR_FLAGS(I)=1
          goto 4990
5190      IF (( error_level .GT. 0 )) THEN
              WRITE (ERR,*) '***************ERROR***************'
              IF ((IVAL.GT.1)) THEN
                  J=IVAL
              ELSE
                  J=1
              END IF
              WRITE (ERR,*) 'ERROR READING VALUE SOUGHT: ', VALUES_SOUGH
     *        T(I)
              WRITE (ERR,*) 'LINE #',LINE
              WRITE (ERR,*) 'COULD NOT READ THE VALUE!!'
              WRITE (ERR,*) 'SHOULD BE AN INTEGER OR A REAL...'
              WRITE (ERR,*) 'IS THERE AN EXTRA COMMA AT THE END OF YOUR
     *INPUT?'
          END IF
          ERROR_FLAG=1
          ERROR_FLAGS(I)=1
          GOTO 4990
5340      IF (( error_level .GT. 0 )) THEN
              WRITE (ERR,*) '***************ERROR***************'
              WRITE (ERR,*) 'ERROR READING VALUE SOUGHT: ', VALUES_SOUGH
     *        T(I)
              WRITE (ERR,*) 'LINE #',LINE
              WRITE (ERR,*) 'COULD NOT READ THE STRING !!'
          END IF
          ERROR_FLAG=1
          ERROR_FLAGS(I)=1
4990      CONTINUE
5931  CONTINUE
5932  CONTINUE
      RETURN
5040  WRITE (ERR,*) '***************ERROR***************'
      WRITE (ERR,*) 'ERROR READING TEXT ', TEXT,' ON LINE ',LINE
      goto 5490
5490  CONTINUE
      ERROR_FLAG=1
      ERROR_FLAGS(I)=1
      RETURN
      entry get_input_plus_set_error_level(the_level)
      error_level = the_level
      return
      END
      subroutine get_media_inputs(ounit)
      implicit none
      integer*4 ounit
      COMMON/GetInput/ ALLOWED_INPUTS(100,0:5),   VALUES_SOUGHT(100),  C
     *HAR_VALUE(100,100),  VALUE(100,100),  DEFAULT(100),  VALUE_MIN(100
     *),  VALUE_MAX(100),  NVALUE(100),  TYPE(100),      ERROR_FLAGS(100
     *),   i_errors,  NMIN, NMAX,   ERROR_FLAG,  DELIMETER
      character ALLOWED_INPUTS*64,VALUES_SOUGHT*64, CHAR_VALUE*256,DELIM
     *ETER*64
      real*8 VALUE,DEFAULT,VALUE_MIN,VALUE_MAX
      integer*4 NVALUE,TYPE,NMIN,NMAX,ERROR_FLAG,ERROR_FLAGS,i_errors
      COMMON/BOUNDS/ECUT,PCUT,VACDST
      real*8 ECUT,  PCUT,  VACDST
      common/ET_control/ SMAXIR,estepe,ximax,  skindepth_for_bca,transpo
     *rt_algorithm, bca_algorithm,exact_bca,spin_effects
      real*8 smaxir,  estepe,  ximax,      skindepth_for_bca
      integer*4 transport_algorithm, bca_algorithm
      logical exact_bca,  spin_effects
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L,IPHTER
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      common/compton_data/ iz_array(1538),  be_array(1538),  Jo_array(15
     *38),  erfJo_array(1538),   ne_array(1538),  shn_array(1538),
     *shell_array(200,7), eno_array(200,7), eno_atbin_array(200,7), n_sh
     *ell(7), radc_flag,  ibcmp
      integer*4 iz_array,ne_array,shn_array,eno_atbin_array, shell_array
     *,n_shell,radc_flag
      real*8 be_array,Jo_array,erfJo_array,eno_array
      integer*2 ibcmp
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR( 2097154),MED( 2097154),IRAYLR,
     *IPHOTONUCR( 2097154)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/BREMPR/ DL1(8,7),DL2(8,7),DL3(8,7),DL4(8,7),DL5(8,7),DL6(8,
     *7), ALPHI(2,7),BPAR(2,7),DELPOS(2,7), WA(7,50),PZ(7,50),ZELEM(7,50
     *),RHOZ(7,50), PWR2I(50), DELCM(7),ZBRANG(7),LZBRANG(7),NNE(7), IBR
     *DST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(7,50,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      common/eii_data/ eii_xsection_a( 10000),  eii_xsection_b( 10000),
     * eii_cons(7), eii_a(40),  eii_b(40),  eii_L_factor,  eii_z(40),  e
     *ii_sh(40),  eii_nshells(100),  eii_nsh(7),  eii_first(7,50),  eii_
     *no(7,50),  eii_flag
      real*8 eii_xsection_a,eii_xsection_b,eii_a,eii_b,eii_cons,eii_L_fa
     *ctor
      integer*4 eii_z,eii_sh,eii_nshells
      integer*4 eii_first,eii_no
      integer*4 eii_elements,eii_flag,eii_nsh
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/rayleigh_inputs/iray_ff_media(7),iray_ff_file(7)
      character*24 iray_ff_media
      character*128 iray_ff_file
      common/emf_inputs/ExIN,EyIN,EzIN,  EMLMTIN,  BxIN, ByIN, BzIN,  Bx
     *, By, Bz,  Bx_new, By_new, Bz_new,  emfield_on
      real*8 ExIN,EyIN,EzIN, EMLMTIN, BxIN,ByIN,BzIN, Bx,By,Bz, Bx_new,B
     *y_new,Bz_new
      logical emfield_on
      common/x_options/eadl_relax,  mcdf_pe_xsections
      logical eadl_relax, mcdf_pe_xsections
      COMMON/MEDINP/inpdensity_file(7),inpasym(7,50), inpstrn(24,7),pz4(
     *7,50), rhoz4(7,50),wa4(7,50),inpgasp(7)
      character*256 inpdensity_file
      CHARACTER*4 inpasym,inpstrn
      real*4 pz4,rhoz4,wa4,inpgasp
      COMMON/ELECIN/ esig_e(7),psig_e(7), esige_max, psige_max, range_ep
     *(0:1,500,7), E_array(500,7), etae_ms0(500,7),etae_ms1(500,7),etap_
     *ms0(500,7),etap_ms1(500,7),q1ce_ms0(500,7),q1ce_ms1(500,7),q1cp_ms
     *0(500,7),q1cp_ms1(500,7),q2ce_ms0(500,7),q2ce_ms1(500,7),q2cp_ms0(
     *500,7),q2cp_ms1(500,7),blcce0(500,7),blcce1(500,7), EKE0(7),EKE1(7
     *), XR0(7),TEFF0(7),BLCC(7),XCC(7), ESIG0(500,7),ESIG1(500,7),PSIG0
     *(500,7),PSIG1(500,7),EDEDX0(500,7),EDEDX1(500,7),PDEDX0(500,7),PDE
     *DX1(500,7),EBR10(500,7),EBR11(500,7),PBR10(500,7),PBR11(500,7),PBR
     *20(500,7),PBR21(500,7),TMXS0(500,7),TMXS1(500,7), expeke1(7), IUNR
     *ST(7),EPSTFL(7),IAPRIM(7), sig_ismonotone(0:1,7)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/THRESH/RMT2,RMSQ, AP(7),AE(7),UP(7),UE(7),TE(7),THMOLL(7)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/ELEMTB/NET,ITBL(100),WATBL(100),RHOTBL(100),ASYMT(100)
      integer*4 NET
      real*4 ITBL,WATBL,RHOTBL
      CHARACTER*4 ASYMT
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      integer*4 ival,ival_media,ival_medfile,i,j,k,ival_ae,ival_ue,ival_
     *ap,ival_up, ival_rho,ival_elements,ival_rhoz,ival_iunrst,ival_iapr
     *im,ival_gasp, ival_pz,ival_sterncid, ival_densityfile,medfile_erro
     *r,ival_outfile, egs_open_file,lnblnk1,i_medfile,egs_get_unit,i_med
     *err,mindex,eindex, i_density,i01,length,i_outfile
      real*8 ecut_min, pcut_min
      logical medfile_specified,densityfile_specified,elements_specified
     *, outfile_specified(7)
      logical iunrst_specified,stern_specified,iaprim_specified, gasp_sp
     *ecified,rho_specified,start_delim_found,end_delim_found, spec_by_p
     *z,spec_by_rhoz,df_if_elem_mismatch(7), df_if_rho_mismatch(7)
      logical ex
      integer*4 CURSOR,Kconvert
      real*4 ZTBL
      real*8 EKE,ELKE,TMXSO,DEDXE,DEDXP,EFRACT,SIGE,SIGP,BREME,BREMP,ETA
     *B(16), EIE,PLOTE(300),PLOTEM(300),PLOTEEN(300), PLOTEMP(300), PLOT
     *EMS(300)
      integer*4 IPLOTE,IFLAG1,IFLAG2,LELKE
      CHARACTER*60 GRAPHTITLE,XAXIS,YAXISPcom,YAXISPmfp,YAXISE,YAXISEmfp
     *, SUBTITLE,SERIES
      DATA ETAB/1.,1.25,1.5,1.75,2.,2.5,3.,3.5,4.,4.5,5.,5.5,6.,7.,8.,9.
     */
      character*24 medium_name,med_tmp,sterncid_tmp
      character*256 density_file,material_file,tmp_string, spoutput_file
     *(7)
      character*80 text_string, text_save, title
      character*40 delim_start,delim_end
      character*1 blank
      character*512 toUpper
      integer*4 nne_tmp,iaprim_tmp,epstfl_tmp,iunrst_tmp
      real*8 rho_tmp,rhoz_tmp(50),z_tmp(50),pz_tmp(50),ae_tmp,ap_tmp, ue
     *_tmp,up_tmp,gasp_tmp
      CHARACTER*4 asym_tmp(50)
      integer*4 nepst_df,nne_df
      real*8 iev_df,rho_df,z_df(50),rhoz_df(50),rhoz_tot
      CHARACTER*4 asym_df(50)
      data blank/' '/
      save medfile_specified,material_file,df_if_elem_mismatch,df_if_rho
     *_mismatch, spoutput_file,outfile_specified
      call get_input_set_error_level(0)
      call get_input_plus_set_error_level(0)
      IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
          i_mederr=17
          i_mederr=egs_open_file(i_mederr,0,1,'.mederr')
      END IF
      ecut_min=999.
      pcut_min=999.
      DO 6291 i=1, 2097154
          IF((ECUT.LT.ecut_min))ecut_min=ECUT
          IF((PCUT.LT.pcut_min))pcut_min=PCUT
6291  CONTINUE
6292  CONTINUE
      delimeter = 'MEDIA DEFINITION'
      ival = 0
      ival = ival + 1
      ival_medfile = ival
      values_sought(ival) = 'material data file'
      nvalue(ival) = 1
      type(ival) = 2
      Nmin = ival_medfile
      Nmax = ival_medfile
      CALL GET_INPUT
      IF ((error_flags(ival_medfile).EQ.0)) THEN
          material_file=char_value(ival_medfile,1)
          medfile_specified=.true.
          i_medfile=17
          i_medfile=egs_get_unit(i_medfile)
          IF ((i_medfile .LT. 1)) THEN
              write(i_log,'(/a)') '***************** Error: '
              write(i_log,'(a)') 'Error: Failed to get available fortran
     * unit for', ' medium data file.'
              write(i_log,'(/a)') '***************** Quiting now.'
              call exit(1)
          END IF
          open(i_medfile,file=material_file,status='old',err=6300)
          medfile_specified=.true.
      ELSE
          IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
              write(i_mederr,*)' Warning: material data file not supplie
     *d.'
          END IF
          IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
              write(i_mederr,*)' Thus, you must define media explicitly
     *in input file'
          END IF
          IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
              write(i_mederr,*)' or via density correction file.'
          END IF
          medfile_specified=.false.
      END IF
      ival = ival + 1
      ival_ae = ival
      values_sought(ival) = 'ae'
      nvalue(ival) = 1
      type(ival) = 1
      value_min(ival) = 0
      value_max(ival) = 999.
      default(ival) = ecut_min
      ival = ival + 1
      ival_ap = ival
      values_sought(ival) = 'ap'
      nvalue(ival) = 1
      type(ival) = 1
      value_min(ival) = 0
      value_max(ival) = 999.
      default(ival) = pcut_min
      ival = ival + 1
      ival_ue = ival
      values_sought(ival) = 'ue'
      nvalue(ival) = 1
      type(ival) = 1
      value_min(ival) = 0
      value_max(ival) = 999.
      default(ival) = 50 + prm
      ival = ival + 1
      ival_up = ival
      values_sought(ival) = 'up'
      nvalue(ival) = 1
      type(ival) = 1
      value_min(ival) = 0
      value_max(ival) = 999.
      default(ival) = 50.0
      Nmin=ival_ae
      Nmax=ival_up
      CALL GET_INPUT
      IF ((error_flags(ival_ae).EQ.0)) THEN
          ae_tmp=value(ival_ae,1)
      ELSE
          IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
              write(i_mederr,*)' Warning: AE for media not supplied.  Wi
     *ll use min. ECUT.'
          END IF
          ae_tmp=ecut_min
      END IF
      IF ((error_flags(ival_ap).EQ.0)) THEN
          ap_tmp=value(ival_ap,1)
      ELSE
          IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
              write(i_mederr,*)' Warning: AP for media not supplied.  Wi
     *ll use min. PCUT.'
          END IF
          ap_tmp=pcut_min
      END IF
      IF ((error_flags(ival_ue).EQ.0)) THEN
          ue_tmp=value(ival_ue,1)
      ELSE
          IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
              write(i_mederr,*)' Warning: UE for media not supplied.  Wi
     *ll use                     50.5109989461 MeV'
          END IF
          ue_tmp=50 + prm
      END IF
      IF ((error_flags(ival_up).EQ.0)) THEN
          up_tmp=value(ival_up,1)
      ELSE
          IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
              write(i_mederr,*)' Warning: UP for media not supplied.  Wi
     *ll use 50.0 MeV'
          END IF
          up_tmp=50.
      END IF
      IF ((ue_tmp.LE.ae_tmp)) THEN
          IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
              write(i_mederr,*)' Error: UE <= AE.  Adjust value(s) and t
     *ry again.'
          END IF
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(a)') ' Error: UE <= AE.  Adjust value(s) and try
     * again.'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
      END IF
      IF ((up_tmp.LE.ap_tmp)) THEN
          IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
              write(i_mederr,*)' Error: UP <= AP.  Adjust value(s) and t
     *ry again.'
          END IF
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(a)') ' Error: UP <= AP.  Adjust value(s) and try
     * again.'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
      END IF
      DO 6311 i=1,NMED
          DO 6321 j=1,24
              medium_name(j:j)=media(j,i)
6321      CONTINUE
6322      CONTINUE
          elements_specified=.false.
          rho_specified=.false.
          densityfile_specified=.false.
          stern_specified=.false.
          iunrst_specified=.false.
          iaprim_specified=.false.
          gasp_specified=.false.
          spec_by_rhoz=.false.
          spec_by_pz=.false.
          df_if_elem_mismatch(i)=.false.
          df_if_rho_mismatch(i)=.false.
          sterncid_tmp=medium_name
          gasp_tmp=0.0
          iunrst_tmp=0
          iaprim_tmp=0
          epstfl_tmp=0
          density_file=' '
          IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
              write(i_mederr,*)' '
          END IF
          IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) THEN
              write(i_mederr,*)' For medium: ',medium_name
          END IF
          delimeter=medium_name(:lnblnk1(medium_name))
          ival=0
          ival=ival+1
          ival_elements=ival
          values_sought(ival) = 'elements'
          type(ival) = 2
          nvalue(ival) = 0
          nmin=ival_elements
          nmax=ival_elements
          CALL GET_INPUT
          IF ((error_flags(ival_elements).EQ.0)) THEN
              DO 6331 j=1,nvalue(ival_elements)
                  DO 6341 Kconvert=1,lnblnk1(char_value(ival_elements,j)
     *            )
                      CURSOR=ICHAR(char_value(ival_elements,j)(Kconvert:
     *                Kconvert))
                      IF (((CURSOR.GE.97).AND.(CURSOR.LE.122))) THEN
                          CURSOR=CURSOR-32
                          char_value(ival_elements,j)(Kconvert:Kconvert)
     *                    =CHAR(CURSOR)
                      END IF
6341              CONTINUE
6342              CONTINUE
6331          CONTINUE
6332          CONTINUE
              ival=ival+1
              ival_pz=ival
              nne_tmp=nvalue(ival_elements)
              values_sought(ival)='number of atoms'
              type(ival)=0
              nvalue(ival)=nne_tmp
              nmin=ival_pz
              nmax=ival_pz
              CALL GET_INPUT
              IF ((nne_tmp.GT.1 .AND. error_flags(ival_pz).EQ.0)) THEN
                  DO 6351 j=1,nne_tmp
                      asym_tmp(j)=char_value(ival_elements,j)
                      pz_tmp(j)=value(ival_pz,j)
6351              CONTINUE
6352              CONTINUE
                  elements_specified=.true.
                  spec_by_pz=.true.
              ELSE
                  ival=ival+1
                  ival_rhoz=ival
                  values_sought(ival)='mass fractions'
                  type(ival)=1
                  nvalue(ival)=nne_tmp
                  nmin=ival_rhoz
                  nmax=ival_rhoz
                  IF ((nne_tmp.EQ.1)) THEN
                      value_min(ival)=0.0
                      value_max(ival)=1.e15
                      default(ival)=1.
                  END IF
                  CALL GET_INPUT
                  IF ((error_flags(ival_rhoz).EQ.0)) THEN
                      DO 6361 j=1,nne_tmp
                          asym_tmp(j)=char_value(ival_elements,j)
                          rhoz_tmp(j)=value(ival_rhoz,j)
6361                  CONTINUE
6362                  CONTINUE
                      elements_specified=.true.
                      spec_by_rhoz=.true.
                  END IF
              END IF
              IF ((nne_tmp.EQ.1 .AND. .NOT.elements_specified)) THEN
                  asym_tmp(1)=char_value(ival_elements,1)
                  pz_tmp(1)=1
                  elements_specified=.true.
                  spec_by_pz=.true.
              END IF
              IF ((elements_specified)) THEN
                  IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel
     *            )) THEN
                      write(i_mederr,*)' Composition specified in .egsin
     *p file.'
                  END IF
              END IF
          END IF
          ival=ival+1
          ival_rho=ival
          values_sought(ival) = 'rho'
          type(ival)=1
          nvalue(ival)=1
          value_min(ival)=0.
          value_max(ival)=1e15
          default(ival)=1.0
          nmin=ival_rho
          nmax=ival_rho
          CALL GET_INPUT
          IF ((error_flags(ival_rho).EQ.0)) THEN
              rho_tmp=value(ival_rho,1)
              rho_specified=.true.
              IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) T
     *        HEN
                  write(i_mederr,*)' Rho specified in .egsinp file.'
              END IF
          END IF
          ival=ival+1
          ival_sterncid=ival
          values_sought(ival)='sterncid'
          type(ival)=2
          nvalue(ival)=1
          nmin=ival_sterncid
          nmax=ival_sterncid
          CALL GET_INPUT
          IF ((error_flags(ival_sterncid).EQ.0)) THEN
              sterncid_tmp=char_value(ival_sterncid,1)
              stern_specified=.true.
              IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) T
     *        HEN
                  write(i_mederr,*)' STERNCID specified in .egsinp file.
     *'
              END IF
          END IF
          ival=ival+1
          ival_iunrst=ival
          values_sought(ival)='stopping powers'
          type(ival)=3
          nvalue(ival)=1
          allowed_inputs(ival,0)='restricted total'
          allowed_inputs(ival,1)='unrestricted collision'
          allowed_inputs(ival,2)='unrestricted collision and radiative'
          allowed_inputs(ival,3)='unrestricted collision and restricted
     *radiative'
          allowed_inputs(ival,4)='restricted collision and unrestricted
     *radiative'
          allowed_inputs(ival,5)='unrestricted radiative'
          nmin=ival_iunrst
          nmax=ival_iunrst
          CALL GET_INPUT
          IF ((error_flags(ival_iunrst).EQ.0)) THEN
              iunrst_tmp=value(ival_iunrst,1)
              iunrst_specified=.true.
              IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) T
     *        HEN
                  write(i_mederr,*)' IUNRST specified in .egsinp file.'
              END IF
          END IF
          ival=ival+1
          ival_iaprim=ival
          values_sought(ival)='bremsstrahlung correction'
          type(ival)=3
          nvalue(ival)=1
          allowed_inputs(ival,0)='KM'
          allowed_inputs(ival,1)='NRC'
          allowed_inputs(ival,2)='none'
          nmin=ival_iaprim
          nmax=ival_iaprim
          CALL GET_INPUT
          IF ((error_flags(ival_iaprim).EQ.0)) THEN
              iaprim_tmp=value(ival_iaprim,1)
              iaprim_specified=.true.
              IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) T
     *        HEN
                  write(i_mederr,*)' IAPRIM specified in .egsinp file.'
              END IF
          END IF
          ival=ival+1
          ival_gasp=ival
          values_sought(ival)='gas pressure'
          type(ival)=1
          nvalue(ival)=1
          value_min(ival)=0.
          value_max(ival)=1e15
          default(ival)=0.0
          nmin=ival_gasp
          nmax=ival_gasp
          CALL GET_INPUT
          IF ((error_flags(ival_gasp).EQ.0)) THEN
              gasp_tmp=value(ival_gasp,1)
              gasp_specified=.true.
              IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) T
     *        HEN
                  write(i_mederr,*)' GASP specified in .egsinp file.'
              END IF
          END IF
          ival=ival+1
          ival_densityfile=ival
          values_sought(ival)='density correction file'
          type(ival) = 2
          nvalue(ival)=1
          nmin=ival_densityfile
          nmax=ival_densityfile
          CALL GET_INPUT
          IF ((error_flags(ival_densityfile).EQ.0)) THEN
              density_file=char_value(ival_densityfile,1)
              densityfile_specified=.true.
              IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) T
     *        HEN
                  write(i_mederr,*)' Density correction file specified i
     *n .egsinp file.'
              END IF
          END IF
          ival = ival+1
          ival_outfile = ival
          values_sought(ival) = 'e- stopping power output file'
          type(ival) = 2
          nvalue(ival) =1
          nmin=ival_outfile
          nmax=ival_outfile
          CALL GET_INPUT
          IF ((error_flags(ival_outfile).EQ.0)) THEN
              spoutput_file(i)=char_value(ival_outfile,1)
              outfile_specified(i)=.true.
              IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) T
     *        HEN
                  write(i_mederr,*)' e- stopping powers will be output t
     *o ', spoutput_file(i)
              END IF
          ELSE
              outfile_specified(i)=.false.
          END IF
          IF ((medfile_specified .AND. (.NOT.elements_specified .OR. .NO
     *    T.rho_specified .OR. .NOT.iunrst_specified .OR. .NOT.iaprim_sp
     *    ecified .OR. .NOT.gasp_specified .OR. .NOT.stern_specified .OR
     *    . .NOT.densityfile_specified))) THEN
              rewind(i_medfile)
              start_delim_found=.false.
              end_delim_found=.false.
6371          IF((.NOT.(.NOT.start_delim_found)).AND.(.NOT.(.NOT.end_del
     *        im_found)))GO TO 6372
                  read(i_medfile,'(a)',end=6380)text_string
                  text_save=text_string
                  text_string=toUpper(text_string(:lnblnk1(text_string))
     *            )
                  mindex=index(text_string,'MEDIUM')
                  eindex=index(text_string,'=')
                  IF ((mindex.GT.0 .AND. eindex.GT.mindex)) THEN
                      text_string=text_save(eindex+1:)
                      text_string=text_string(:lnblnk1(text_string))
                      length = len(text_string)
6391                  IF(index(text_string,blank).NE.1)GO TO 6392
                          IF (( length .GE. 2 )) THEN
                              text_string=text_string(2:)
                          ELSE
                              GO TO6392
                          END IF
                          length = length - 1
                      GO TO 6391
6392                  CONTINUE
                      IF ((text_string.EQ.medium_name)) THEN
                          delim_start=text_save
                          start_delim_found=.true.
                      ELSE IF((start_delim_found)) THEN
                          delim_end=text_save
                          end_delim_found=.true.
                      END IF
                  END IF
              GO TO 6371
6372          CONTINUE
6380          IF ((.NOT.start_delim_found)) THEN
                  IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel
     *            )) THEN
                      write(i_mederr,*)' Warning: Data for ',medium_name
     *                ,' not found'
                  END IF
                  IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel
     *            )) THEN
                      write(i_mederr,*)' in material data file.'
                  END IF
              ELSE
                  IF ((.NOT.end_delim_found)) THEN
                      delim_end='NONE'
                  END IF
                  ival=0
                  IF ((.NOT.elements_specified)) THEN
                      ival=ival+1
                      ival_elements=ival
                      values_sought(ival) = 'elements'
                      type(ival) = 2
                      nvalue(ival) = 0
                      nmin=ival_elements
                      nmax=ival_elements
                      CALL GET_INPUT_PLUS(i_medfile,delim_start,delim_en
     *                d)
                      IF ((error_flags(ival_elements).EQ.0)) THEN
                          ival=ival+1
                          ival_pz=ival
                          nne_tmp=nvalue(ival_elements)
                          values_sought(ival)='number of atoms'
                          type(ival)=0
                          nvalue(ival)=nne_tmp
                          nmin=ival_pz
                          nmax=ival_pz
                          CALL GET_INPUT_PLUS(i_medfile,delim_start,deli
     *                    m_end)
                          IF ((nne_tmp.GT.1 .AND. error_flags(ival_pz).E
     *                    Q.0)) THEN
                              DO 6401 j=1,nne_tmp
                                  asym_tmp(j)=char_value(ival_elements,j
     *                            )
                                  pz_tmp(j)=value(ival_pz,j)
6401                          CONTINUE
6402                          CONTINUE
                              elements_specified=.true.
                              spec_by_pz=.true.
                          ELSE
                              ival=ival+1
                              ival_rhoz=ival
                              values_sought(ival)='mass fractions'
                              type(ival)=1
                              nvalue(ival)=nne_tmp
                              nmin=ival_rhoz
                              nmax=ival_rhoz
                              IF ((nne_tmp.EQ.1)) THEN
                                  value_min(ival)=0.0
                                  value_max(ival)=1.e15
                                  default(ival)=1.
                              END IF
                              CALL GET_INPUT_PLUS(i_medfile,delim_start,
     *                        delim_end)
                              IF ((error_flags(ival_rhoz).EQ.0)) THEN
                                  DO 6411 j=1,nne_tmp
                                      asym_tmp(j)=char_value(ival_elemen
     *                                ts,j)
                                      rhoz_tmp(j)=value(ival_rhoz,j)
6411                              CONTINUE
6412                              CONTINUE
                                  elements_specified=.true.
                                  spec_by_rhoz=.true.
                              END IF
                          END IF
                          IF ((nne_tmp.EQ.1 .AND. .NOT.elements_specifie
     *                    d)) THEN
                              asym_tmp(1)=char_value(ival_elements,1)
                              pz_tmp(1)=1
                              elements_specified=.true.
                              spec_by_pz=.true.
                          END IF
                          IF ((elements_specified)) THEN
                              IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.fi
     *                        rst_parallel)) THEN
                                  write(i_mederr,*)' Composition specifi
     *ed in material data file'
                              END IF
                          END IF
                      END IF
                  END IF
                  IF ((.NOT.rho_specified)) THEN
                      ival=ival+1
                      ival_rho=ival
                      values_sought(ival) = 'rho'
                      type(ival)=1
                      nvalue(ival)=1
                      value_min(ival)=0.
                      value_max(ival)=1e15
                      default(ival)=1.0
                      nmin=ival_rho
                      nmax=ival_rho
                      CALL GET_INPUT_PLUS(i_medfile,delim_start,delim_en
     *                d)
                      IF ((error_flags(ival_rho).EQ.0)) THEN
                          rho_tmp=value(ival_rho,1)
                          rho_specified=.true.
                          IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_
     *                    parallel)) THEN
                              write(i_mederr,*)' Rho specified in materi
     *al data file'
                          END IF
                      END IF
                  END IF
                  IF ((.NOT.stern_specified)) THEN
                      ival=ival+1
                      ival_sterncid=ival
                      values_sought(ival)='sterncid'
                      type(ival)=2
                      nvalue(ival)=1
                      nmin=ival_sterncid
                      nmax=ival_sterncid
                      CALL GET_INPUT_PLUS(i_medfile,delim_start,delim_en
     *                d)
                      IF ((error_flags(ival_sterncid).EQ.0)) THEN
                          sterncid_tmp=char_value(ival_sterncid,1)
                          stern_specified=.true.
                          IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_
     *                    parallel)) THEN
                              write(i_mederr,*)' STERNCID specified in m
     *aterial data file'
                          END IF
                      END IF
                  END IF
                  IF ((.NOT.iunrst_specified)) THEN
                      ival=ival+1
                      ival_iunrst=ival
                      values_sought(ival)='stopping powers'
                      type(ival)=3
                      nvalue(ival)=1
                      allowed_inputs(ival,0)='restricted total'
                      allowed_inputs(ival,1)='unrestricted collision'
                      allowed_inputs(ival,2)='unrestricted collision and
     * radiative'
                      allowed_inputs(ival,3)= 'unrestricted collision an
     *d restricted radiative'
                      allowed_inputs(ival,4)= 'restricted collision and
     *unrestricted radiative'
                      allowed_inputs(ival,5)='unrestricted radiative'
                      nmin=ival_iunrst
                      nmax=ival_iunrst
                      CALL GET_INPUT_PLUS(i_medfile,delim_start,delim_en
     *                d)
                      IF ((error_flags(ival_iunrst).EQ.0)) THEN
                          iunrst_tmp=value(ival_iunrst,1)
                          iunrst_specified=.true.
                          IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_
     *                    parallel)) THEN
                              write(i_mederr,*)' IUNRST specified in mat
     *erial data file'
                          END IF
                      END IF
                  END IF
                  IF ((.NOT.iaprim_specified)) THEN
                      ival=ival+1
                      ival_iaprim=ival
                      values_sought(ival)='bremsstrahlung correction'
                      type(ival)=3
                      nvalue(ival)=1
                      allowed_inputs(ival,0)='KM'
                      allowed_inputs(ival,1)='NRC'
                      allowed_inputs(ival,2)='none'
                      nmin=ival_iaprim
                      nmax=ival_iaprim
                      CALL GET_INPUT_PLUS(i_medfile,delim_start,delim_en
     *                d)
                      IF ((error_flags(ival_iaprim).EQ.0)) THEN
                          iaprim_tmp=value(ival_iaprim,1)
                          iaprim_specified=.true.
                          IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_
     *                    parallel)) THEN
                              write(i_mederr,*)' IAPRIM specified in mat
     *erial data file'
                          END IF
                      END IF
                  END IF
                  IF ((.NOT.gasp_specified)) THEN
                      ival=ival+1
                      ival_gasp=ival
                      values_sought(ival)='gas pressure'
                      type(ival)=1
                      nvalue(ival)=1
                      value_min(ival)=0.
                      value_max(ival)=1.e15
                      default(ival)=0.
                      nmin=ival_gasp
                      nmax=ival_gasp
                      CALL GET_INPUT_PLUS(i_medfile,delim_start,delim_en
     *                d)
                      IF ((error_flags(ival_gasp).EQ.0)) THEN
                          gasp_tmp=value(ival_gasp,1)
                          gasp_specified=.true.
                          IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_
     *                    parallel)) THEN
                              write(i_mederr,*)' GASP specified in mater
     *ial data file'
                          END IF
                      END IF
                  END IF
                  IF ((.NOT.densityfile_specified)) THEN
                      ival=ival+1
                      ival_densityfile=ival
                      values_sought(ival)='density correction file'
                      type(ival) = 2
                      nvalue(ival)=1
                      nmin=ival_densityfile
                      nmax=ival_densityfile
                      CALL GET_INPUT_PLUS(i_medfile,delim_start,delim_en
     *                d)
                      IF ((error_flags(ival_densityfile).EQ.0)) THEN
                          density_file=char_value(ival_densityfile,1)
                          densityfile_specified=.true.
                          IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_
     *                    parallel)) THEN
                              write(i_mederr,*)' Density correction file
     * specified in material data file.'
                          END IF
                      END IF
                  END IF
              END IF
          END IF
          IF ((densityfile_specified)) THEN
              write(*,*)' density_file ',density_file
              IF ((index(density_file,'/').GT.0)) THEN
                  tmp_string=density_file(:lnblnk1(density_file))
                  inquire(file=tmp_string,exist=ex)
                  IF ((.NOT.ex)) THEN
                      IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_para
     *                llel)) THEN
                          write(i_mederr,*)' Error: Density correction f
     *ile ',tmp_string
                      END IF
                      IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_para
     *                llel)) THEN
                          write(i_mederr,*)' cannot be found.'
                      END IF
                  END IF
              ELSE
                  density_file=density_file(:lnblnk1(density_file))//'.d
     *ensity'
                  tmp_string=egs_home(:lnblnk1(egs_home)) // 'pegs4' //
     *            '/' // 'density_corrections' // '/' // density_file
                  inquire(file=tmp_string,exist=ex)
                  IF((ex))goto 6420
                  tmp_string=egs_home(:lnblnk1(egs_home)) // 'pegs4' //
     *            '/' // 'density_corrections' // '/' // 'elements' // '
     */' // density_file
                  inquire(file=tmp_string,exist=ex)
                  IF((ex))goto 6420
                  tmp_string=egs_home(:lnblnk1(egs_home)) // 'pegs4' //
     *            '/' // 'density_corrections' // '/' // 'compounds' //
     *            '/' // density_file
                  inquire(file=tmp_string,exist=ex)
                  IF((ex))goto 6420
                  tmp_string=egs_home(:lnblnk1(egs_home)) // 'pegs4' //
     *            '/' // 'density' // '/' // density_file
                  inquire(file=tmp_string,exist=ex)
                  IF((ex))goto 6420
                  tmp_string=hen_house(:lnblnk1(hen_house)) // 'pegs4' /
     *            / '/' // 'density_corrections' // '/' // 'elements' //
     *             '/' // density_file
                  inquire(file=tmp_string,exist=ex)
                  IF((ex))goto 6420
                  tmp_string=hen_house(:lnblnk1(hen_house)) // 'pegs4' /
     *            / '/' // 'density_corrections' // '/' // 'compounds' /
     *            / '/' // density_file
                  inquire(file=tmp_string,exist=ex)
                  IF((ex))goto 6420
                  IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel
     *            )) THEN
                      write(i_mederr,*)' Error: Density correction file'
     *                , density_file
                  END IF
                  IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel
     *            )) THEN
                      write(i_mederr,*)' does not exist in'
                  END IF
                  IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel
     *            )) THEN
                      write(i_mederr,*)' $EGS_HOME/pegs4/density_correct
     *ions, '
                  END IF
                  IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel
     *            )) THEN
                      write(i_mederr,*)' $EGS_HOME/pegs4/density_correct
     *ions/elements, '
                  END IF
                  IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel
     *            )) THEN
                      write(i_mederr,*)' $EGS_HOME/pegs4/density_correct
     *ions/compounds, '
                  END IF
                  IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel
     *            )) THEN
                      write(i_mederr,*)' $EGS_HOME/pegs4/density, '
                  END IF
                  IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel
     *            )) THEN
                      write(i_mederr,*)' $HEN_HOUSE/pegs4/density_correc
     *tions/elements or '
                  END IF
                  IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel
     *            )) THEN
                      write(i_mederr,*)' $HEN_HOUSE/pegs4/density_correc
     *tions/compounds.'
                  END IF
6420              CONTINUE
              END IF
          END IF
          IF ((densityfile_specified)) THEN
              i_density=19
              i_density=egs_get_unit(i_density)
              IF ((i_density .LT. 1)) THEN
                  write(i_log,'(/a)') '***************** Error: '
                  write(i_log,'(a)') 'Error: Failed to get available for
     *tran unit for', ' density correction file.'
                  write(i_log,'(/a)') '***************** Quiting now.'
                  call exit(1)
              END IF
              open(i_density,file=tmp_string,status='old',err=6430)
              density_file=tmp_string
              densityfile_specified=.true.
              epstfl_tmp=1
              read(i_density,'(a)')title
              read(i_density,*)nepst_df,iev_df,rho_df,nne_df
              read(i_density,*)(z_df(j),rhoz_df(j),j=1,nne_df)
              DO 6441 j=1,nne_df
                  i01=z_df(j)
                  asym_df(j)=ASYMT(i01)
6441          CONTINUE
6442          CONTINUE
              IF ((elements_specified)) THEN
                  IF ((nne_tmp.NE.nne_df)) THEN
                      df_if_elem_mismatch(i)=.true.
                  ELSE
                      rhoz_tot=0.
                      DO 6451 j=1,nne_tmp
                          IF ((spec_by_pz)) THEN
                              i01=ZTBL(asym_tmp(j))
                              rhoz_tmp(j)=pz_tmp(j)*WATBL(i01)
                          END IF
                          rhoz_tot=rhoz_tot+rhoz_tmp(j)
6451                  CONTINUE
6452                  CONTINUE
                      DO 6461 j=1,nne_df
                          DO 6471 k=1,nne_tmp
                              IF ((asym_df(j).EQ.asym_tmp(k))) THEN
                                  IF ((rhoz_df(j).GT.(1+0.01)*rhoz_tmp(k
     *                            )/rhoz_tot .OR. rhoz_df(j).LT.(1-0.01)
     *                            *rhoz_tmp(k)/rhoz_tot)) THEN
                                      df_if_elem_mismatch(i)=.true.
                                  END IF
                                  exit
                              END IF
6471                      CONTINUE
6472                      CONTINUE
                          IF((k.GT.nne_tmp))df_if_elem_mismatch(i)=.true
     *                    .
                          IF ((df_if_elem_mismatch(i))) THEN
                              exit
                          END IF
6461                  CONTINUE
6462                  CONTINUE
                  END IF
                  IF ((df_if_elem_mismatch(i))) THEN
                      IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_para
     *                llel)) THEN
                          write(i_mederr,*)' Warning: composition specif
     *ied in density correction', ' file is not the same as that'
                      END IF
                      IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_para
     *                llel)) THEN
                          write(i_mederr,*)' specified in input or mater
     *ial data file.'
                      END IF
                      IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_para
     *                llel)) THEN
                          write(i_mederr,*)' Will use the composition sp
     *ecified in the density correction file.'
                      END IF
                      nne_tmp=nne_df
                      DO 6481 j=1,nne_tmp
                          z_tmp(j)=z_df(j)
                          rhoz_tmp(j)=rhoz_df(j)
                          asym_tmp(j)=asym_df(j)
6481                  CONTINUE
6482                  CONTINUE
                      spec_by_rhoz=.true.
                  END IF
              ELSE
                  IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel
     *            )) THEN
                      write(i_mederr,*)' Composition specified in densit
     *y correction file'
                  END IF
                  nne_tmp=nne_df
                  DO 6491 j=1,nne_tmp
                      z_tmp(j)=z_df(j)
                      rhoz_tmp(j)=rhoz_df(j)
                      asym_tmp(j)=asym_df(j)
6491              CONTINUE
6492              CONTINUE
                  spec_by_rhoz=.true.
                  elements_specified=.true.
              END IF
              IF ((rho_specified)) THEN
                  IF ((rho_df.GT.(1+0.01)*rho_tmp .OR. rho_df.LT.(1-0.01
     *            )*rho_tmp)) THEN
                      IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_para
     *                llel)) THEN
                          write(i_mederr,*)' Warning: rho specified in d
     *ensity correction', ' file is not the same as that'
                      END IF
                      IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_para
     *                llel)) THEN
                          write(i_mederr,*)' specified in input or mater
     *ial data file.'
                      END IF
                      IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_para
     *                llel)) THEN
                          write(i_mederr,*)' Will use rho as specified i
     *n the density correction file.'
                      END IF
                      rho_tmp=rho_df
                      df_if_rho_mismatch(i)=.true.
                  END IF
              ELSE
                  rho_tmp=rho_df
                  rho_specified=.true.
                  IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel
     *            )) THEN
                      write(i_mederr,*)' Rho specified in density correc
     *tion file'
                  END IF
              END IF
              IF ((gasp_specified)) THEN
                  IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel
     *            )) THEN
                      write(i_mederr,*)' Warning: gas pressure input not
     * required', ' when using density correction file.  Will set GASP=0
     *.'
                  END IF
                  gasp_specified=.false.
                  gasp_tmp=0.
              END IF
              close(i_density)
          END IF
          IF ((elements_specified .AND. rho_specified)) THEN
              ae(i)=ae_tmp
              ue(i)=ue_tmp
              ap(i)=ap_tmp
              up(i)=up_tmp
              DO 6501 j=1,24
                  inpstrn(j,i) = sterncid_tmp(j:j)
6501          CONTINUE
6502          CONTINUE
              nne(i)=nne_tmp
              rho(i)=rho_tmp
              DO 6511 j=1,nne_tmp
                  inpasym(i,j)=asym_tmp(j)
                  zelem(i,j)=ZTBL(asym_tmp(j))
                  i01=zelem(i,j)
                  wa(i,j)=WATBL(i01)
                  wa4(i,j)=WATBL(i01)
                  IF ((spec_by_rhoz)) THEN
                      rhoz(i,j)=rhoz_tmp(j)
                      rhoz4(i,j)=rhoz_tmp(j)
                      pz(i,j)=rhoz(i,j)/wa(i,j)
                      pz4(i,j)=rhoz4(i,j)/wa4(i,j)
                  ELSE IF((spec_by_pz)) THEN
                      pz(i,j)=pz_tmp(j)
                      pz4(i,j)=pz_tmp(j)
                      rhoz(i,j)=pz(i,j)*wa(i,j)
                      rhoz4(i,j)=pz4(i,j)*wa4(i,j)
                  END IF
6511          CONTINUE
6512          CONTINUE
              iunrst(i)=iunrst_tmp
              iaprim(i)=iaprim_tmp
              epstfl(i)=epstfl_tmp
              inpgasp(i)=gasp_tmp
              inpdensity_file(i)=density_file
          ELSE
              IF ((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel)) T
     *        HEN
                  write(i_mederr,*)' Error: Medium ',medium_name,' not c
     *orrectly defined.'
              END IF
          END IF
6311  CONTINUE
6312  CONTINUE
      IF((medfile_specified))close(i_medfile)
      IF((n_parallel.EQ.0 .OR. i_parallel.EQ.first_parallel))close(i_med
     *err)
      entry show_media_parameters(ounit)
      IF((ounit .LE. 0))return
      IF ((is_pegsless)) THEN
          write(ounit,*)
          write(ounit,*)' Medium data: '
          write(ounit,*)
          write(ounit,'(a,1p,e14.5,a,e14.5,a)')' AE = ',ae(1),' MeV,  UE
     * = ',ue(1),' MeV'
          write(ounit,'(a,1p,e14.5,a,e14.5,a)')' AP = ',ap(1),' MeV,  UP
     * = ',up(1),' MeV'
          write(ounit,*)
          IF ((medfile_specified)) THEN
              write(ounit,*)' Material data file: ',material_file
          ELSE
              write(ounit,*)' No material data file supplied.  Material
     *data obtained from'
              write(ounit,*)' .egsinp file or density correction file.'
          END IF
          write(ounit,*)
          DO 6521 i=1,nmed
              write(ounit,'(a,24a1)')'   Medium: ',(media(j,i),j=1,24)
              write(ounit,'(a,24a1)')' Sterncid: ',(inpstrn(j,i),j=1,24)
              write(ounit,'(a,1p,e14.5,a)')'     rho: ',rho(i),' g/cm^3'
              write(ounit,'(a,24a4)')' Elements: ',(inpasym(i,j),j=1,nne
     *        (i))
              write(ounit,'(a,1p,12e14.5)')'    rhoz: ',(rhoz(i,j),j=1,n
     *        ne(i))
              write(ounit,'(a,1p,12e14.5)')'      pz: ',(pz(i,j),j=1,nne
     *        (i))
              write(ounit,'(a,i5)')'  iunrst: ',iunrst(i)
              write(ounit,'(a,i5)')'  iaprim: ',iaprim(i)
              write(ounit,'(a,1p,e14.5,a)')'    gasp: ',inpgasp(i),' atm
     *.'
              IF ((epstfl(i).EQ.1)) THEN
                  write(ounit,*)' density correction file: ', inpdensity
     *            _file(i)(:lnblnk1(inpdensity_file(i)))
                  IF ((df_if_elem_mismatch(i))) THEN
                      write(ounit,*)' ****Warning: composition specified
     * in density correction', ' file is not the same as that'
                      write(ounit,*)' specified in input or material dat
     *a file.'
                      write(ounit,*) ' Will use the composition specifie
     *d in the density correction file.'
                  END IF
                  IF ((df_if_rho_mismatch(i))) THEN
                      write(ounit,*)' ****Warning: rho specified in dens
     *ity correction', ' file is not the same as that'
                      write(ounit,*)' specified in input or material dat
     *a file.'
                      write(ounit,*) ' Will use rho as specified in the
     *density correction file.'
                  END IF
              END IF
              write(ounit,*)
              IF ((outfile_specified(i) .AND. (n_parallel.EQ.0 .OR. i_pa
     *        rallel.EQ.first_parallel))) THEN
                  inquire(file=spoutput_file(i),exist=ex)
                  IF ((ex)) THEN
                      write(i_log,'(/a)') '***************** Warning: '
                      write(i_log,'(a)') 'Warning: stopping power output
     * file ', spoutput_file(i),'already exists.  Will overwrite.'
                  END IF
                  i_outfile=20
                  i_outfile=egs_get_unit(i_outfile)
                  IF ((i_outfile .LT. 1)) THEN
                      write(i_log,'(/a)') '***************** Warning: '
                      write(i_log,'(a)') 'Warning: Failed to get availab
     *le fortran unit for', ' stopping power output file.'
                  END IF
                  open(i_outfile,file=spoutput_file(i),status='unknown',
     *            err=6530)
                  goto 6540
6530              write(i_log,'(/a)') '***************** Warning: '
                  write(i_log,'(a)') 'Warning: Failed to open stopping p
     *ower output file ', spoutput_file(i)
                  goto 6550
6540              IFLAG1=0
                  IFLAG2=0
                  IPLOTE=0
                  MEDIUM=i
                  XAXIS = 'kinetic energy / MeV'
                  YAXISE = 'dE/drhoX MeV/g/cm\\S2\\N'
                  YAXISEmfp = 'mean free path / cm'
                  YAXISPmfp = 'mean free path / cm'
                  write(GRAPHTITLE,'(24a1)')(media(j,i),j=1,24)
                  SUBTITLE = 'Electron data'
                  DO 6561 j=1,8
                      DO 6571 k=1,16
                          EKE=ETAB(k)*10.**(j-4)
                          IF ((EKE .LE. AE(1)-PRM)) THEN
                              IF ((IFLAG1 .EQ. 0)) THEN
                                  IFLAG1=1
                                  EKE=AE(1)-PRM
                              ELSE
                                  EKE=0.0
                              END IF
                          END IF
                          IF ((EKE .GT. UE(1)-PRM)) THEN
                              IF ((IFLAG2 .EQ. 0)) THEN
                                  IFLAG2=1
                                  EKE=UE(1)-PRM
                              ELSE
                                  EKE=1.E30
                              END IF
                          END IF
                          EIE=EKE+PRM
                          TMXSO=0.0
                          DEDXE=0.0
                          DEDXP=0.0
                          EFRACT=0.0
                          IF ((EIE .GE. AE(1)-0.0001 .AND. EIE .LE. UE(1
     *                    )+0.001)) THEN
                              ELKE=LOG(EKE)
                              LELKE=EKE1(MEDIUM)*ELKE+EKE0(MEDIUM)
                              DEDXE=EDEDX1(LELKE,MEDIUM)*ELKE+EDEDX0(LEL
     *                        KE,MEDIUM)
                              IPLOTE=IPLOTE+1
                              PLOTEEN(IPLOTE)=EKE
                              PLOTE(IPLOTE)=DEDXE/RHO(MEDIUM)
                          END IF
6571                  CONTINUE
6572                  CONTINUE
6561              CONTINUE
6562              CONTINUE
                  IF ((IPLOTE.GT.0)) THEN
                      IF ((iunrst(i).EQ.0)) THEN
                          SERIES='restricted total stopping power'
                      ELSE IF((iunrst(i).EQ.1)) THEN
                          SERIES='unrestricted collision stopping power'
                      ELSE IF((iunrst(i).EQ.2)) THEN
                          SERIES='unrestricted collision + radiative sto
     *pping power'
                      ELSE IF((iunrst(i).EQ.3)) THEN
                          SERIES='unrestricted collision + restricted ra
     *diative stopping power'
                      ELSE IF((iunrst(i).EQ.4)) THEN
                          SERIES='restricted collision + unrestricted ra
     *diative stopping power'
                      ELSE IF((iunrst(i).EQ.5)) THEN
                          SERIES='unrestricted radiative stopping power'
                      END IF
                      CALL MEDXVGRPLOT(PLOTEEN,PLOTE,IPLOTE,0,SERIES, XA
     *                XIS,YAXISE,GRAPHTITLE,SUBTITLE,i_outfile,2)
                  END IF
                  close(i_outfile)
6550              CONTINUE
              END IF
6521      CONTINUE
6522      CONTINUE
      END IF
      return
6300  write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(a)') 'Error: Cannot open material data file',materia
     *l_file
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      return
6430  write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(a)') 'Error: Cannot open density correction file: ',
     * density_file(:lnblnk1(density_file))
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      return
      end
      SUBROUTINE MEDXVGRPLOT (X, Y, NPTS, CURVENUM, SERIESTITLE, XTITLE,
     * YTITLE, GRAPHTITLE, SUBTITLE, UNITNUM, AXISTYPE)
      IMPLICIT NONE
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer*4 MAX
      PARAMETER (MAX = 400)
      integer*4 NPTS,NPTS1,CURVENUM, COUNT,UNITNUM,TYPE,AXISTYPE
      real*8 X(NPTS),Y(NPTS),ERRY(NPTS),YMIN,SMALLESTX, SMALLESTY,FUDGE
      integer*4 TITLELENGTH,SUBLENGTH,XAXISLENGTH,YAXISLENGTH,SERIESLENG
     *TH
      integer*4 LOGX, LOGY
      CHARACTER*(*) SUBTITLE
      CHARACTER*(*) GRAPHTITLE,XTITLE,YTITLE,SERIESTITLE
      logical TESTFILE, ALLPOS
      FUDGE = 1.e-10
      IF (( NPTS .gt. MAX)) THEN
          WRITE(6,6580)NPTS, MAX
6580      FORMAT(//' **************************'/ ' Number of points ask
     *ed for =', I5, ' is greater than max allowed of', I4/ ' Setting NP
     *TS to MAX, you could adjust MAX in xvgrplot.mortran'/ ' **********
     *****************'//)
          NPTS1 = MAX
      ELSE
          NPTS1 = NPTS
      END IF
      INQUIRE(UNIT = UNITNUM,OPENED=TESTFILE)
      IF ((.NOT.TESTFILE)) THEN
          WRITE(6,6590) UNITNUM
6590      FORMAT (//'  ---------Error in Subroutine XVGRPLOT---------' ,
     */'   Unit specified (',I2,') is not open.' ,/'   Unit must beopene
     *d before using subroutine.' ,/'   Data not written to file.',/'  -
     *---------------------------------------------'//)
          RETURN
      END IF
      TITLELENGTH = 61
      SUBLENGTH = 61
      XAXISLENGTH = 61
      YAXISLENGTH = 61
      SERIESLENGTH = 61
6601  CONTINUE
          TITLELENGTH = TITLELENGTH - 1
          IF(((GRAPHTITLE(TITLELENGTH:TITLELENGTH) .NE. ' ')))GO TO6602
      GO TO 6601
6602  CONTINUE
6611  CONTINUE
          SUBLENGTH = SUBLENGTH - 1
          IF(((SUBTITLE(SUBLENGTH:SUBLENGTH) .NE. ' ')))GO TO6612
      GO TO 6611
6612  CONTINUE
6621  CONTINUE
          XAXISLENGTH = XAXISLENGTH - 1
          IF(((XTITLE(XAXISLENGTH:XAXISLENGTH) .NE. ' ')))GO TO6622
      GO TO 6621
6622  CONTINUE
6631  CONTINUE
          YAXISLENGTH = YAXISLENGTH - 1
          IF(((YTITLE(YAXISLENGTH:YAXISLENGTH) .NE. ' ')))GO TO6632
      GO TO 6631
6632  CONTINUE
6641  CONTINUE
          SERIESLENGTH = SERIESLENGTH - 1
          IF(((SERIESTITLE(SERIESLENGTH:SERIESLENGTH) .NE. ' ')))GO TO66
     *    42
      GO TO 6641
6642  CONTINUE
      LOGX = 0
      LOGY = 0
      ALLPOS=.TRUE.
      IF (( X(1).EQ.0.0 )) THEN
          SMALLESTX = 0.1
      ELSE
          SMALLESTX=X(1)
      END IF
      IF (( Y(1).EQ.0.0 )) THEN
          SMALLESTY = 0.1
      ELSE
          SMALLESTY=Y(1)
      END IF
      DO 6651 COUNT=1,NPTS1
          IF (((X(COUNT) .LT. SMALLESTX) .AND. (X(COUNT).NE.0.))) THEN
              SMALLESTX=X(COUNT)
          END IF
          IF (((Y(COUNT) .LT. SMALLESTY) .AND. (Y(COUNT).NE.0.))) THEN
              SMALLESTY=Y(COUNT)
          END IF
          IF (((X(COUNT) .LT. 0.).OR.(Y(COUNT) .LT. 0.))) THEN
              ALLPOS=.FALSE.
          END IF
6651  CONTINUE
6652  CONTINUE
      IF ((ALLPOS)) THEN
          DO 6661 COUNT=1,NPTS1
              IF ((X(COUNT).EQ.0.)) THEN
                  X(COUNT)=SMALLESTX*FUDGE
              END IF
              IF ((Y(COUNT).EQ.0.)) THEN
                  Y(COUNT)=SMALLESTY*FUDGE
              END IF
6661      CONTINUE
6662      CONTINUE
      END IF
      IF ((AXISTYPE .GT. 0)) THEN
          DO 6671 COUNT=1,NPTS1
              IF ((X(COUNT) .LE. 0.)) THEN
                  LOGX = 1
              END IF
              IF ((Y(COUNT) .LE. 0.)) THEN
                  LOGY = 1
              END IF
6671      CONTINUE
6672      CONTINUE
      END IF
      IF ((CURVENUM .EQ. 0)) THEN
          IF ((AXISTYPE .EQ. 0)) THEN
              WRITE(UNITNUM,6680) 'xy'
          ELSE IF((AXISTYPE .EQ. 1)) THEN
              WRITE(UNITNUM,6680) 'logy'
              WRITE(UNITNUM,6690)
          ELSE IF((AXISTYPE .EQ. 2)) THEN
              WRITE(UNITNUM,6680) 'logx'
              WRITE(UNITNUM,6690)
          ELSE IF((AXISTYPE .EQ. 3)) THEN
              WRITE(UNITNUM,6680) 'logxy'
              WRITE(UNITNUM,6690)
              WRITE(UNITNUM,6700)
          ELSE
              WRITE(6,6710) AXISTYPE
6710          FORMAT (//'  ------------Error in Subroutine XVGRPLOT-----
     *------' ,/'   AXISTYPE specified (',I2,') is not a valid option.',
     */'  ----------------------------------------------'//)
              RETURN
          END IF
6680      FORMAT ('@g0 type ',A,' ')
6690      FORMAT ('@    xaxis  ticklabel format exponential')
6700      FORMAT ('@    yaxis  ticklabel format exponential')
          WRITE(UNITNUM,6720) GRAPHTITLE(1:TITLELENGTH) ,SUBTITLE(1:SUBL
     *    ENGTH) ,XTITLE(1:XAXISLENGTH) ,YTITLE(1:YAXISLENGTH)
6720      FORMAT ('@    title "',A,'"'/ ,'@    subtitle "',A,'"'/ ,'@ le
     *gend on'/ ,'@    legend box linestyle 0'/ ,'@    legend x1 0.6'/ ,
     *'@    legend y1 0.75'/ ,'@    view xmin 0.250000'/ ,'@    xaxis  l
     *abel "',A,'"'/ ,'@    timestamp on'/ ,'@    yaxis  label "',A,'"')
      END IF
      IF ((AXISTYPE .EQ. 1 .AND. LOGY .EQ. 1)) THEN
          WRITE(UNITNUM,6680) 'xy'
          WRITE(6,6730)
6730      FORMAT (/' ----------WARNING from Subroutine XVGRPLOT---------
     *' ,/'  Log scale requested for Y axis when one or more   ' ,/'  Yd
     *ata points are 0 or negative.                  ' ,//'  Y axis scal
     *e changed to linear.                   ' ,/' ---------------------
     *------------------------------'/)
      END IF
      IF ((AXISTYPE .EQ. 2 .AND. LOGX .EQ. 1)) THEN
          WRITE(UNITNUM,6680) 'xy'
          WRITE(6,6740)
6740      FORMAT (/' ----------WARNING from Subroutine XVGRPLOT---------
     *' ,/'  Log scale requested for X axis when one or more   ' ,/'  Xd
     *ata points are 0 or negative.                  ' ,//'  X axis scal
     *e changed to linear.                   ' ,/' ---------------------
     *------------------------------'/)
      END IF
      IF ((AXISTYPE .EQ. 3 .AND. (LOGX .EQ. 1 .OR. LOGY .EQ. 1))) THEN
          IF ((LOGX .EQ. 1 .AND. LOGY .EQ. 1)) THEN
              WRITE(UNITNUM,6680) 'xy'
              WRITE(6,6750)
6750          FORMAT (/' ----------WARNING from Subroutine XVGRPLOT-----
     *----' ,/'  Log scale requested for X axis and Y axis when    ' ,/'
     *  one or more X and Y data points are 0 or negative.' ,//'  X andY
     * axes scales changed to linear.            ' ,/' -----------------
     *----------------------------------'/)
          ELSE IF((LOGX .EQ. 1)) THEN
              WRITE(UNITNUM,6680) 'logy'
              WRITE(6,6740)
          ELSE
              WRITE(UNITNUM,6680) 'logx'
              WRITE(6,6730)
          END IF
      END IF
      IF ((CURVENUM .LT. 10 )) THEN
          WRITE(UNITNUM,'(''@    s'',I1,'' on'')') CURVENUM
      ELSE
          WRITE(UNITNUM,'(''@    s'',I2,'' on'')') CURVENUM
      END IF
      WRITE(UNITNUM,6760) CURVENUM,SERIESTITLE(1:SERIESLENGTH)
6760  FORMAT ('@    legend string ',I2,' "',A,'"')
      WRITE(UNITNUM,6770)
6770  FORMAT ('@TYPE xy')
      IF ((CURVENUM .LT. 10)) THEN
          WRITE(UNITNUM,6780) CURVENUM
          IF ((CURVENUM .EQ. 9)) THEN
              WRITE(UNITNUM,6790) CURVENUM, CURVENUM+1
          ELSE
              WRITE(UNITNUM,6800) CURVENUM, CURVENUM+1
          END IF
      ELSE
          WRITE(UNITNUM,6810) CURVENUM
          WRITE(UNITNUM,6820) CURVENUM, CURVENUM+1
      END IF
6780  FORMAT ('@    s',I1,' errorbar length 0.000000')
6810  FORMAT ('@    s',I2,' errorbar length 0.000000')
6790  FORMAT ('@    s',I1,' symbol color ',I2)
6800  FORMAT ('@    s',I1,' symbol color ',I1)
6820  FORMAT ('@    s',I2,' symbol color ',I2)
      DO 6831 COUNT=1,NPTS1
          WRITE(UNITNUM,6840) X(COUNT),Y(COUNT)
6831  CONTINUE
6832  CONTINUE
6840  FORMAT (1PE15.4,1PE15.4)
      WRITE(UNITNUM,'(''&'')')
      RETURN
      END
C***************************************************************************
C
C   This file was automatically generated by:
C   EGSnrc-configure-linux version 1.0
C   It contains various subroutines and functions for date, time,
C   CPU time, host name, etc.
C
C   Attention: all changes will be lost the next time you run
C   EGSnrc-configure-linux.
C
C***************************************************************************

C##############################################################################
C
C  EGSnrc egs_system subroutine v1
C  Copyright (C) 2015 National Research Council Canada
C
C  This file is part of EGSnrc.
C
C  EGSnrc is free software: you can redistribute it and/or modify it under
C  the terms of the GNU Affero General Public License as published by the
C  Free Software Foundation, either version 3 of the License, or (at your
C  option) any later version.
C
C  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY
C  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
C  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
C  more details.
C
C  You should have received a copy of the GNU Affero General Public License
C  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.
C
C##############################################################################
C
C  Author:          Iwan Kawrakow, 2003
C
C  Contributors:
C
C##############################################################################


C*****************************************************************************
C egs_system(command)  runs a system command and returns the status
C                      command must be null-terminated
C*****************************************************************************
      integer function egs_system(command)
      character*(*) command
      integer system, istat
      istat = system(command)
      egs_system = istat
      return
      end

C##############################################################################
C
C  EGSnrc egs_isdir subroutine v1
C  Copyright (C) 2015 National Research Council Canada
C
C  This file is part of EGSnrc.
C
C  EGSnrc is free software: you can redistribute it and/or modify it under
C  the terms of the GNU Affero General Public License as published by the
C  Free Software Foundation, either version 3 of the License, or (at your
C  option) any later version.
C
C  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY
C  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
C  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
C  more details.
C
C  You should have received a copy of the GNU Affero General Public License
C  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.
C
C##############################################################################
C
C  Author:          Iwan Kawrakow, 2003
C
C  Contributors:
C
C##############################################################################


C*****************************************************************************
C
C  egs_isdir(file_name)  Returns .true., if the string file_name points to
C                        an existing directory. This version uses the lstat
C                        intrinsic and then tests for bit 14 being set in
C                        the mode element. This works on all Unix systems
C                        that I have access to (Linux, Aix, HP-UX, OSF1,
C                        Solaris, IRIX)
C
C*****************************************************************************

      logical function egs_isdir(file_name)
      implicit none
      character*(*) file_name
      integer*4 lnblnk1, res, array(13), l, lstat
      logical btest
      egs_isdir = .false.
      l = lnblnk1(file_name)
      if( l.lt.len(file_name) ) file_name(l+1:l+1) = char(0)
         ! On some systems lstat only works if the string is 0-terminated
      res = lstat(file_name,array)
      if( l.lt.len(file_name) ) file_name(l+1:l+1) = ' '
      if( res.eq.0 ) then
            ! Amost all compilers that have the lstat intrinsic return the
            ! file mode in the 3rd array element. But the PGI compiler has
            ! its own opinion on the subject and returns it in the 5th element
            ! That's why the relevant element is written as 3
            ! here, 3 gets replaced by the appropriate element
            ! by the configure script.
          if( btest(array(3),14) ) egs_isdir = .true.
      end if
      return
      end

C##############################################################################
C
C  EGSnrc date subroutines v1
C  Copyright (C) 2015 National Research Council Canada
C
C  This file is part of EGSnrc.
C
C  EGSnrc is free software: you can redistribute it and/or modify it under
C  the terms of the GNU Affero General Public License as published by the
C  Free Software Foundation, either version 3 of the License, or (at your
C  option) any later version.
C
C  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY
C  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
C  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
C  more details.
C
C  You should have received a copy of the GNU Affero General Public License
C  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.
C
C##############################################################################
C
C  Author:          Iwan Kawrakow, 2003
C
C  Contributors:
C
C##############################################################################


C***************************************************************************
C
C   egs_fdate(out):  print a 24 char date and time string in the form
C                         'Tue Mar 18 08:16:42 2003'
C                    to the unit specified by out without end of line
C                    i.e. the sequence
C                    write(6,'(a,$)') 'Today is '
C                    call egs_fdate(6)
C                    write(6,'(a)') '. Have a nice date'
C                    should result in something like
C                    Today is Tue Mar 18 08:16:42 2003. Have a nice date
C                    printed to unit 6.
C
C***************************************************************************

      subroutine egs_fdate(ounit)
      integer ounit
      character*24 string
      call fdate(string)
      write(ounit,'(a,$)') string
      end

C***************************************************************************
C
C   egs_get_fdate(string) assignes a 24 char date and time string to string
C                         string must be at least 24 chars long, otherwise
C                         this subroutine has no effect.
C
C***************************************************************************

      subroutine egs_get_fdate(string)
      character*(*) string
      if( len(string).ge.24 ) call fdate(string)
      return
      end

C##############################################################################
C
C  EGSnrc egs_date_and_time subroutine v1
C  Copyright (C) 2015 National Research Council Canada
C
C  This file is part of EGSnrc.
C
C  EGSnrc is free software: you can redistribute it and/or modify it under
C  the terms of the GNU Affero General Public License as published by the
C  Free Software Foundation, either version 3 of the License, or (at your
C  option) any later version.
C
C  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY
C  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
C  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
C  more details.
C
C  You should have received a copy of the GNU Affero General Public License
C  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.
C
C##############################################################################
C
C  Author:          Iwan Kawrakow, 2003
C
C  Contributors:
C
C##############################################################################


      subroutine egs_date_and_time(vnow)
      integer vnow(8)
      character dat*8,tim*10,zon*5
      call date_and_time(dat,tim,zon,vnow)
      return
      end

C##############################################################################
C
C  EGSnrc egs_date subroutine v1
C  Copyright (C) 2015 National Research Council Canada
C
C  This file is part of EGSnrc.
C
C  EGSnrc is free software: you can redistribute it and/or modify it under
C  the terms of the GNU Affero General Public License as published by the
C  Free Software Foundation, either version 3 of the License, or (at your
C  option) any later version.
C
C  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY
C  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
C  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
C  more details.
C
C  You should have received a copy of the GNU Affero General Public License
C  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.
C
C##############################################################################
C
C  Author:          Iwan Kawrakow, 2003
C
C  Contributors:
C
C##############################################################################


C*************************************************************************
C
C egs_date(ounit): print a 11 char string in the form
C                     '18-Mar-2003'
C                  to the unit specified by ounit
C                  No end of line character is inserted
C
C*************************************************************************

      subroutine egs_date(ounit)
      integer ounit
      character string*24, dat*11
      call fdate(string)
      dat(1:2) = string(9:10)
      dat(3:3) = '-'
      dat(4:6) = string(5:7)
      dat(7:7) = '-'
      dat(8:11) = string(21:24)
      write(ounit,'(a,$)') dat
      return
      end

C##############################################################################
C
C  EGSnrc egs_time subroutine v1
C  Copyright (C) 2015 National Research Council Canada
C
C  This file is part of EGSnrc.
C
C  EGSnrc is free software: you can redistribute it and/or modify it under
C  the terms of the GNU Affero General Public License as published by the
C  Free Software Foundation, either version 3 of the License, or (at your
C  option) any later version.
C
C  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY
C  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
C  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
C  more details.
C
C  You should have received a copy of the GNU Affero General Public License
C  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.
C
C##############################################################################
C
C  Author:          Iwan Kawrakow, 2003
C
C  Contributors:
C
C##############################################################################


C $Id: egs_time_v1.f,v 1.1 2003/07/11 19:17:08 iwan Exp $
C*************************************************************************
C
C egs_time(ounit): print a 8 char string in the form hh:mm:ss
C                  to the unit specified by ounit
C                  No end of line character is inserted
C
C*************************************************************************

      subroutine egs_time(ounit)
      integer ounit
      character string*24
      call fdate(string)
      write(ounit,'(a,$)') string(12:19)
      return
      end

C##############################################################################
C
C  EGSnrc seconds timing subroutines v1
C  Copyright (C) 2015 National Research Council Canada
C
C  This file is part of EGSnrc.
C
C  EGSnrc is free software: you can redistribute it and/or modify it under
C  the terms of the GNU Affero General Public License as published by the
C  Free Software Foundation, either version 3 of the License, or (at your
C  option) any later version.
C
C  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY
C  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
C  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
C  more details.
C
C  You should have received a copy of the GNU Affero General Public License
C  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.
C
C##############################################################################
C
C  Author:          Iwan Kawrakow, 2003
C
C  Contributors:
C
C##############################################################################


C*****************************************************************************
C
C real function egs_secnds(t0): returns seconds passed since midnight minus t0
C
C*****************************************************************************

      real function egs_secnds(t0)
      real t0,t1
      character dat*8,tim*10,zon*5
      integer values(8)
      call date_and_time(dat,tim,zon,values)
      t1 = 3600.*values(5) + 60.*values(6) + values(7) + 0.001*values(8)
      egs_secnds = t1 - t0
      return
      end

C*****************************************************************************
C
C real function egs_tot_time()
C
C   On first call returns seconds passed since 1/1/1970
C   On subsequent calls returns
C     - seconds since last call, if flag = 0
C     - seconds since first call, else
C
C*****************************************************************************

      real function egs_tot_time(flag)
      integer flag
      character dat*8,tim*10,zon*5
      integer vnow(8), vlast(8),i
      real t,egs_time_diff,t0
      data vlast/1970,1,1,5*0/,t0/-1/
      save vlast,t0
      call date_and_time(dat,tim,zon,vnow)
      t = egs_time_diff(vlast,vnow)
      do i=1,8
        vlast(i)=vnow(i)
      end do
      if( t0.lt.0 ) then
        t0 = 0
        egs_tot_time = t
      else
        t0 = t0 + t
        if(flag.eq.0) then
          egs_tot_time = t
        else
          egs_tot_time = t0
        end if
      end if
      return
      end

C##############################################################################
C
C  EGSnrc date and time subroutines
C  Copyright (C) 2015 National Research Council Canada
C
C  This file is part of EGSnrc.
C
C  EGSnrc is free software: you can redistribute it and/or modify it under
C  the terms of the GNU Affero General Public License as published by the
C  Free Software Foundation, either version 3 of the License, or (at your
C  option) any later version.
C
C  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY
C  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
C  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
C  more details.
C
C  You should have received a copy of the GNU Affero General Public License
C  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.
C
C##############################################################################
C
C  Author:          Iwan Kawrakow, 2003
C
C  Contributors:
C
C##############################################################################


C****************************************************************************
C
C Returns the time difference between vstart and vend
C vstart and vend are integer arrays of dimension 8 with elements
C corresponding to the specification of the data_and_time routine, i.e.
C   array(1) = year
C   array(2) = month of the year   (1...12)
C   array(3) = day of the month    (1...31)
C   array(4) = difference in minutes from UTC
C   array(5) = hour of the day     (1...23)
C   array(6) = minute of the hour  (1...59)
C   array(7) = seconds of the minute (1...59)
C   array(8) = miliseconds of the second (1...999)
C
C Note: this implementation ignores the time difference from UTC field
C
C*****************************************************************************
      real function egs_time_diff(vstart,vend)
      integer    vstart(8),vend(8)
      real       egs_time_diff_o
      if( vend(1).lt.vstart(1).or.
     &  (vend(1).eq.vstart(1).and.vend(2).lt.vstart(2)) ) then
        egs_time_diff = -egs_time_diff_o(vend,vstart)
      else
        egs_time_diff = egs_time_diff_o(vstart,vend)
      end if
      return
      end

C******************************************************************************
C
C day difference between the dates specified by the integer arrays vstart and
C vend. The arrays are v(1)=year, v(2)=month, v(3)=day
C
C******************************************************************************
      integer function egs_day_diff(vstart,vend)
      integer vstart(3),vend(3),egs_day_diff_o
      if( vend(1).lt.vstart(1).or.
     &  (vend(1).eq.vstart(1).and.vend(2).lt.vstart(2)) ) then
        egs_day_diff = -egs_day_diff_o(vend,vstart)
      else
        egs_day_diff = egs_day_diff_o(vstart,vend)
      end if
      return
      end

C******************************************************************************
C
C Returns a 3-letter abreviation of the day of the week in the string day,
C given a day specified by the integer array values
C   values(1)=year, values(2)=month, values(3)=day
C
C******************************************************************************
      subroutine egs_weekday(values,day)
      character*(*) day
      integer       values(3)
      integer       days,vtmp(3),egs_day_diff,aux
      character*3   wdays(7)
      data wdays/'Mon','Tue','Wed','Thu','Fri','Sat','Sun'/
      vtmp(1) = 1970
      vtmp(2) = 1
      vtmp(3) = 1
      days = egs_day_diff(vtmp,values)
      aux = mod(days,7)
      days = 4 + aux
      if( days.gt.7 ) days = days - 7
      day(:len(day)) = ' '
      aux = min(len(day),3)
      day(:aux) = wdays(days)(:aux)
      return
      end

C*****************************************************************************
C
C Same as egs_day_diff above, but assumes that vend specifies a later date
C than vstart.
C
C*****************************************************************************
      integer function egs_day_diff_o(vstart,vend)
      integer vstart(3),vend(3)
      integer    days
      logical    next_month
      integer    tm,m,ty,y
      integer    mdays(12)
      data       mdays/31,28,31,30,31,30,31,31,30,31,30,31/
      days = 0
      ty = vstart(1)
      y  = vend(1)
      tm = vstart(2)
      m  = vend(2)
      next_month = .true.
      do while(next_month)
        if( tm.eq.m.and.ty.eq.y ) then
          next_month = .false.
        else
          days = days + mdays(tm)
          if( tm.eq.2.and.mod(ty,4).eq.0 ) days = days + 1
          tm = tm + 1
          if( tm.gt.12 ) then
            ty = ty + 1
            tm = 1
          end if
        end if
      end do
      days = days + vend(3) - vstart(3)
      egs_day_diff_o = days
      return
      end

C******************************************************************************
C
C Same as egs_time_diff above, but assumes that vend specifies a later date
C than vstart.
C
C******************************************************************************
      real function egs_time_diff_o(vstart,vend)
      integer    vstart(8),vend(8)
      integer    days,hours,minutes,secs,msecs
      integer    egs_day_diff_o
      days = egs_day_diff_o(vstart,vend)
      hours = vend(5) - vstart(5)
      minutes = vend(6) - vstart(6)
      secs = vend(7) - vstart(7)
      msecs = vend(8) - vstart(8)
      egs_time_diff_o = 3600.*(24.*days+hours)+60.*minutes+secs+
     &                  0.001*msecs
      return
      end

C******************************************************************************
C
C Returns in month a 3-letter abreviation of the month specified by mo, if
C mo is between 1 and 12, or an empty string otherwise.
C
C******************************************************************************
      subroutine egs_month(mo,month)
      integer mo
      character*(*) month
      integer iaux
      character*3   months(12)
      data months/'Jan','Feb','Mar','Apr','May','Jun', 'Jul','Aug','Sep'
     *,'Oct','Nov','Dec'/
      iaux = min(len(month),3)
      month(:len(month)) = ' '
      if( mo.ge.1.and.mo.le.12 ) month(:iaux) = months(mo)(:iaux)
      return
      end

C******************************************************************************
C
C Converts a 3-letter abreviation of a month to its corresponding integer
C value, if the string month is a valid month, or -1 otherwise.
C
C******************************************************************************
      integer function egs_conver_month(month)
      character*3 month
      character*3 months(12)
      integer i
      data months/'Jan','Feb','Mar','Apr','May','Jun', 'Jul','Aug','Sep'
     *,'Oct','Nov','Dec'/
      do i=1,12
        if( month.eq.months(i) ) then
          egs_conver_month = i
          return
        end if
      end do
      egs_conver_month = -1
      return
      end


C##############################################################################
C
C  EGSnrc egs_etime subroutine
C  Copyright (C) 2015 National Research Council Canada
C
C  This file is part of EGSnrc.
C
C  EGSnrc is free software: you can redistribute it and/or modify it under
C  the terms of the GNU Affero General Public License as published by the
C  Free Software Foundation, either version 3 of the License, or (at your
C  option) any later version.
C
C  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY
C  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
C  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
C  more details.
C
C  You should have received a copy of the GNU Affero General Public License
C  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.
C
C##############################################################################
C
C  Author:          Iwan Kawrakow, 2003
C
C  Contributors:
C
C##############################################################################


C*****************************************************************************
C
C real function egs_etime(): returns CPU time consumed since the start of
C                            the program
C
C*****************************************************************************

      real function egs_etime()
      real tarray(2),etime
      egs_etime = etime(tarray)
      return
      end

C##############################################################################
C
C  EGSnrc canonical system name subroutines
C  Copyright (C) 2015 National Research Council Canada
C
C  This file is part of EGSnrc.
C
C  EGSnrc is free software: you can redistribute it and/or modify it under
C  the terms of the GNU Affero General Public License as published by the
C  Free Software Foundation, either version 3 of the License, or (at your
C  option) any later version.
C
C  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY
C  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
C  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
C  more details.
C
C  You should have received a copy of the GNU Affero General Public License
C  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.
C
C##############################################################################
C
C  Author:          Iwan Kawrakow, 2003
C
C  Contributors:
C
C##############################################################################


C******************************************************************************
C
C Print the canonical system name as determined by the config.guess script
C or the Windows installation program to the unit specified by ounit.
C
C*****************************************************************************

      subroutine egs_print_canonical_system(ounit)
      integer ounit
      write(6,'(a,$)') 'linux64'
      return
      end

C******************************************************************************
C
C Assign the canonical system name as determined by the config.guess script
C or the Windows installation program to the string pointed to by res
C
C******************************************************************************

      subroutine egs_get_canonical_system(res)
      character*(*) res
      integer l1,l2
      l1 = lnblnk1('linux64')
      l2 = len(res)
      res(:l2) = ' '
      if( l2.ge.l1 ) then
        res(:l1) = 'linux64'
      else
        res(:l2) = 'linux64'
      end if
      return
      end


C##############################################################################
C
C  EGSnrc configuration name subroutines
C  Copyright (C) 2015 National Research Council Canada
C
C  This file is part of EGSnrc.
C
C  EGSnrc is free software: you can redistribute it and/or modify it under
C  the terms of the GNU Affero General Public License as published by the
C  Free Software Foundation, either version 3 of the License, or (at your
C  option) any later version.
C
C  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY
C  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
C  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
C  more details.
C
C  You should have received a copy of the GNU Affero General Public License
C  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.
C
C##############################################################################
C
C  Author:          Iwan Kawrakow, 2003
C
C  Contributors:
C
C##############################################################################


C******************************************************************************
C
C Print the configuration name as specified suring the configuration
C process to the unit specified by ounit.
C
C*****************************************************************************

      subroutine egs_print_configuration_name(ounit)
      integer ounit
      write(6,'(a,$)') 'linux'
      return
      end

C******************************************************************************
C
C Assign the configuration name as specified suring the configuration
C process to the string pointed to by res
C
C******************************************************************************

      subroutine egs_get_configuration_name(res)
      character*(*) res
      integer l1,l2
      l1 = lnblnk1('linux')
      l2 = len(res)
      res(:l2) = ' '
      if( l2.ge.l1 ) then
        res(:l1) = 'linux'
      else
        res(:l2) = 'linux'
      end if
      return
      end


C##############################################################################
C
C  EGSnrc hostname subroutines v1
C  Copyright (C) 2015 National Research Council Canada
C
C  This file is part of EGSnrc.
C
C  EGSnrc is free software: you can redistribute it and/or modify it under
C  the terms of the GNU Affero General Public License as published by the
C  Free Software Foundation, either version 3 of the License, or (at your
C  option) any later version.
C
C  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY
C  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
C  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
C  more details.
C
C  You should have received a copy of the GNU Affero General Public License
C  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.
C
C##############################################################################
C
C  Author:          Iwan Kawrakow, 2003
C
C  Contributors:
C
C##############################################################################


C*****************************************************************************
C
C Print the host name to the unit specified by ounit without inserting
C a new line character.
C
C*****************************************************************************

      subroutine egs_print_hostnm(ounit)
      integer ounit
      character*256 string
      integer res,hostnm,lnblnk1
      res = hostnm(string)
      if( res.ne.0 ) then
        write(6,'(a,a)') 'hostnm returned with a non-zero status '
        stop
      end if
      write(ounit,'(a,$)') string(:lnblnk1(string))
      return
      end

C*****************************************************************************
C
C Assign the host name to the string pointed to be hname.
C
C*****************************************************************************

      subroutine egs_get_hostnm(hname)
      character*(*) hname
      character*256 string
      integer res,hostnm,lnblnk1,l1,l2,l
      res = hostnm(string)
      if( res.ne.0 ) then
        write(6,'(a,a)') 'hostnm returned with a non-zero status '
        stop
      end if
      l1 = lnblnk1(string)
      l2 = len(hname)
      hname(:l2) = ' '
      l = min(l1,l2)
      hname(:l) = string(:l)
      return
      end

      subroutine srcinput(ieof)
      implicit none
      real*8 temp,fnorm,binsok,gridsz,ak
      integer*4 i,k,j,ib,ieof
      dimension temp(12)
      CHARACTER*256 FILNAM
      CHARACTER*80 SPEC_TITLE
      CHARACTER*5 MODE
      integer*4 lnblnk1,ilen
      integer*4 latchm,nhistm
      real*8 einm,xinm,yinm,uinm,vinm,wtm,zlastm,Z_SOURCE
      COMMON/ENERGYSRC/NENSRC,IMODE,ENSRCD,SRCPDF,SRCCDF,ENMIN,CDFINV,DE
     *LTAK
      REAL ENSRCD(200),SRCPDF(200),SRCCDF(200),ENMIN, CDFINV(1000,2),DEL
     *TAK
      INTEGER IMODE,NENSRC
      common/geom/ xbound(128+1),  ybound(128+1),  zbound(128+1),  xboun
     *d_min,  xbound_max,  ybound_min,  ybound_max,  zbound_min,  zbound
     *_max,  medsur,  dsurround(4),  IMAX,  JMAX,  KMAX,  ijmax,  irmax,
     *  howfarless
      real*4 xbound, ybound, zbound, xbound_min, xbound_max, ybound_min,
     * ybound_max, zbound_min, zbound_max,dsurround
      integer medsur,IMAX, JMAX, KMAX, ijmax,irmax
      logical howfarless
      COMMON/PHSPFILE/BEAM_SIZE,MODE_PHSP1,LATCH_OPT, NCASE_PHSP,LATBIT,
     *NBIT1,NBIT2,I_BIT_FILTER,NofREPEAT,ISMOOTH, OUTCNT,NRCYCL,IPARALLE
     *L,PARNUM,CYCLNUM
      real BEAM_SIZE
      INTEGER MODE_PHSP1,LATCH_OPT,NCASE_PHSP,LATBIT(20),NBIT1,NBIT2, I_
     *BIT_FILTER,NofREPEAT,ISMOOTH,OUTCNT,NRCYCL,IPARALLEL,PARNUM,CYCLNU
     *M
      common/score/endep( 2097153), endep2( 2097153), temp2, planarefe,
     *planarefp,planarfe,planarfp, nestep, endep_tmp( 2097153), i_phsp_o
     *ut,i_muidx_out,i_unit_out,IWATCH,mxnp, endep_last( 2097153)
      REAL*8 endep, endep2, temp2,planarefe, planarefp, planarfe, planar
     *fp
      integer*8 nestep
      real endep_tmp
      integer i_phsp_out,   i_muidx_out,    i_unit_out,  IWATCH,mxnp
      integer*2 endep_last
      common/source/ esrc,  nhist,  nnread,  nshist,  nphist,  nnphsp,
     *einsrc,  xsrcold,  ysrcold,  zsrcold,  usrcold,  vsrcold,  wsrcold
     *,  weightold, mu_phspold,  frMU_indx,  zinc,  xinl,  xinu,  yinl,
     * yinu,  zinl,  zinu,  thetax,  thetay,  thetaz,  uinc,  vinc,  win
     *c,  beamarea, xcol,  ycol,  xiso,  yiso,  ziso,  phicol,  theta(60
     *000),  phi(60000),  pang(60000),  angfixed(60000),  angmin(60000),
     *  angmax(60000),  pgang(60000),  xtemp(60000),  ytemp(60000),  zte
     *mp(60000),  phicoltemp(60000), thetatemp(60000),  phitemp(60000),
     * muIndex(60000),  r_11(60000), r_12(60000), r_13(60000), r_21(6000
     *0), r_22(60000), r_23(60000), r_31(60000), r_32(60000), r_33(60000
     *), dsource, dsourcetemp(60000), ein,  eksrcm,  esrc_sp,  SSD,  ein
     *srcold, NINCSRC,  r_dbs,  ssd_dbs,  z_dbs,  iqinold,  latchold,  e
     *nflag,  dflag,  ismode,  isource,     iqin,        iqphsp,
     *           iqinc,                          SHLflag,     calflag,
     *   MLCflag,     ixinl,       ixinu,       jyinl,       jyinu,
     *  kzinl,       kzinu,       klowx,       khix,        klowy,
     * khiy,        klowz,       khiz,        survival_ratio,        nsm
     *iss,      nsblocked,     nsrjct,      nsoutside,     nmissm,
     *IPRIMARY,                                            OLDSRC,
     * npassi,                     nang,         ivary(60000),     ngang
     *(60000),       nset,            more_in_cont,                 numa
     *ng,       dose_stat,      ndbsrjct,                        i_dbs,
     *         iphatsrc,         e_split,                           i_ia
     *ea_in,      i_mu_phsp,           izscore,             i_unit_in,
     *                k_field,                       nhist_last,
     *         the_beam_code,         the_input_file,      the_vcu_input
     *_file,                        the_pegs_file,           the_shared_
     *lib,                    the_vcu_code,               the_phsp_file
      real*8    esrc,muIndex
      integer*8 nhist, nnread,nshist,nphist,nnphsp
      real*8 einsrc, xsrcold, ysrcold,usrcold,vsrcold,wsrcold,weightold,
     *               frMU_indx,zsrcold,mu_phspold
      real*4    zinc, xinl, xinu, yinl, yinu, zinl, zinu, thetax, thetay
     *, thetaz,     uinc, vinc, winc, beamarea, xcol,ycol,xiso, yiso, zi
     *so, phicol,                 theta, phi, xtemp, ytemp, ztemp, phico
     *ltemp,thetatemp, phitemp,                 pang,angfixed,angmin,ang
     *max,pgang,r_11, r_12, r_13, r_21,                       r_22, r_23
     *, r_31, r_32, r_33,dsource,dsourcetemp,
     *    ein, eksrcm, esrc_sp, SSD, NINCSRC,
     *                  r_dbs, ssd_dbs,z_dbs,survival_ratio,einsrcold
      integer*4 isource, iqin, iqphsp, iqinc,latchold,iqinold,MLCflag,SH
     *Lflag,         calflag, ixinl, ixinu, jyinl, jyinu, kzinl, kzinu,
     *                             klowx, khix, klowy, khiy, klowz, khiz
     *,                                          nsmiss, nsblocked, nsrj
     *ct,nsoutside, nmissm,enflag,                             dflag, is
     *mode, IPRIMARY, OLDSRC,npassi,nang,ivary,ngang,numang,dose_stat,
     *     ndbsrjct,i_dbs,iphatsrc,e_split,i_iaea_in,i_mu_phsp,izscore,i
     *_unit_in,          num_field,more_in_cont,nset,k_field
      integer*2 nhist_last
      character*80 the_beam_code, the_vcu_code, the_input_file,the_pegs_
     *file,        the_shared_lib,the_vcu_input_file
      character*256 the_phsp_file
      COMMON/SOURCE_FORPARALLEL/nnphsp_max, nnphsp_min
      integer*8 nnphsp_max, nnphsp_min
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR( 2097154),MED( 2097154),IRAYLR,
     *IPHOTONUCR( 2097154)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/BOUNDS/ECUT,PCUT,VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/RWPHSP/ STRING_TEMP_ZLAST_OUT,  STRING_TEMP_OUT,  IHSTRY_PH
     *SP,   iaea_dummy_long,  NHSTRY_DOS,   ESHORT,  WEIGHTTMP,  WT_PHSP
     *_SHORT,  X_PHSP_SHORT,  Y_PHSP_SHORT,  Z_PHSP_SHORT,  U_PHSP_SHORT
     *,  V_PHSP_SHORT,  W_PHSP_SHORT,  ZLAST_PHSP_SHORT,  MUIDX_PHSP_SHO
     *RT,  EKMAX_PHSP_SHORT,  EKMINE_PHSP_SHORT,  NINC_PHSP_SHORT,  dosx
     *yz2beam_index,  iaea_extra_floats,  NUM_PHSP_TOT,  PHOT_PHSP_TOT,
     *iaea_result,   iaea_n_stat,  iaea_q_typ,  iaea_typ_q,  iaea_q_inde
     *x,  I_PHSP,  IERR_PHSP,  LATCHTMP,  WRITE_PHSP_COUNTER,  WRITE_PHS
     *P_SOFAR,  PHSP_RESTART,  PHSP_RECL,  PHSP_RECL_OLD,  iaea_extra_in
     *ts,  iaea_extra_int_types,iaea_extra_float_types,   iaea_i_zlast,
     * iaea_i_latch,  iaea_i_muidx,  iaea_n_extra_ints,  iaea_n_extra_fl
     *oats,  i_iaea_open_for_write,   iaea_i_zlast_out,  iaea_i_latch_ou
     *t,  iaea_i_muidx_out,  dosxyz2beam_izscore,  MODE_RW
      CHARACTER*32000 STRING_TEMP_ZLAST_OUT(1)
      CHARACTER*28000 STRING_TEMP_OUT(1)
      integer*8 IHSTRY_PHSP(1),iaea_dummy_long,NHSTRY_DOS
      REAL*4 ESHORT,WEIGHTTMP,WT_PHSP_SHORT,X_PHSP_SHORT,Y_PHSP_SHORT, Z
     *_PHSP_SHORT,U_PHSP_SHORT, V_PHSP_SHORT,W_PHSP_SHORT,ZLAST_PHSP_SHO
     *RT, MUIDX_PHSP_SHORT, EKMAX_PHSP_SHORT,EKMINE_PHSP_SHORT,NINC_PHSP
     *_SHORT,dosxyz2beam_index, iaea_extra_floats(10)
      INTEGER NUM_PHSP_TOT,PHOT_PHSP_TOT, iaea_result,iaea_n_stat,iaea_q
     *_typ(3),iaea_typ_q(3),iaea_q_index,I_PHSP, IERR_PHSP,LATCHTMP, WRI
     *TE_PHSP_COUNTER(1),WRITE_PHSP_SOFAR(1), PHSP_RESTART,PHSP_RECL,PHS
     *P_RECL_OLD,iaea_extra_ints(10), iaea_extra_int_types(10),iaea_extr
     *a_float_types(10),iaea_i_zlast, iaea_i_latch,iaea_i_muidx,iaea_n_e
     *xtra_ints,iaea_n_extra_floats, i_iaea_open_for_write,iaea_i_zlast_
     *out,iaea_i_latch_out, iaea_i_muidx_out,dosxyz2beam_izscore
      CHARACTER*5 MODE_RW
      INTEGER LATCH_TEMP_OUT,NUM_PHSP_TOFLUSH,TEMP_PHSP_COUNTER,REM_PHSP
      REAL*4 REAL_TEMP_OUT(7)
      CHARACTER*32 REC_TEMP_OUT
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      enflag = 0
      i_muidx_out = 0
      calflag = 0
      WRITE(6,6850)
6850  FORMAT(/ / ' Source configuration'/)
      WRITE(6,6860)
6860  FORMAT('      (0) Parallel, rectangular beam incident from the fro
     *nt' / '          Requires 9 inputs:' / '          charge (-1,0,1),
     *' / '          0 (mandatory, to identify source type),' / '   lowe
     *r x-coordinate of the beam (cm),' / '          upper x-coordinate 
     *of the beam (cm),' / '          lower y-coordinate of the beam (cm
     *),' / '          upper y-coordinate of the beam (cm),' / '        
     * angle of beam with respect to the positive x-axis (degrees),'/ ' 
     *         angle of beam with respect to the positive y-axis (degree
     *s),'/ '          angle of beam with respect to the negative z-axis
     * (degrees) '/ '            (angles default to 90,90,0--incident on
     * front of phantom)'/)
      WRITE(6,6870)
6870  FORMAT('   or (1) Parallel, rectangular beam incident from any dir
     *ection'/ '          Requires 10 inputs:' / '          charge (-1,0
     *,1),' / '          1 (mandatory, to identify source type),' / '   
     *    x-coordinate of the isocenter (cm),' / '          y-coordinate
     * of the isocenter (cm),' / '          z-coordinate of the isocente
     *r (cm),' / '          angle between +z direction and the line join
     *ing the   '/ '             center of the beam (collimator) to the 
     *isocenter' / '             --called the polar angle(degrees),'/ ' 
     *         angle between +x direction and the projection of the'/ ' 
     *            line joining the center of the beam (collimator)'/ '  
     *           to the isocenter on the xy plane--called the azimuthal'
     */ '             angle (degrees),'/ '          total x-widthof the 
     *beam in the plane perpendicular' / '             to the beam direc
     *tion (cm),' / '          total y-width of the beam in the plane pe
     *rpendicular' / '             to the beam direction (cm),' /'      
     *    angle by which the collimator is rotated in the' / '          
     * collimator plane perpendicular to the beam' / '     direction (de
     *grees),                     ' / '             (+ve rotation is cou
     *nterclockwise looking along' / '              the beam direction' 
     */)
      WRITE(6,6880)
6880  FORMAT('  or  (2) Full phase-space of each particle' / 'Requires 9
     * inputs plus data stored in units 43 and 44:'/ '  charge (-1 elect
     *ron,0 photon,1 positron, 2 all),' / '          2 (mandatory, to id
     *entify source type),' / '          x-coordinateof the isocenter (c
     *m),' / '          y-coordinate of the isocenter (cm),' / '        
     *  z-coordinate of the isocenter (cm),' / '     angle between +z di
     *rection and the line joining the   '/ '          origin in the pha
     *se space plane to the isocenter' / '          --called the polar a
     *ngle(degrees),' / '          angle between +x direction and the pr
     *ojection of the' / '             line joining the origin in the ph
     *ase space plane' / '             tothe isocenter on the xy plane--
     *called the azimuthal'/ '  angle (degrees),' / '          absolute 
     *distance from the isocenter to the origin' / '             in the 
     *phase space plane               ' / '          angle by which the 
     *source is rotated in the' / '             phase space plane perpen
     *dicular to the beam' / '             direction (degrees),         
     *            ' / '             (+ve rotation is counterclockwise lo
     *oking down' / '            from the origin in the phase space plan
     *e),' / '   i_dbs--set to 1 if DBS was used in BEAM simulation used
     *' / '          to generate the phsp source and you want to reject 
     *fat'/ '             photons, 0 otherwise,'/ '          DBS splitti
     *ng radius (cm),'/ '          SSD at which splitting radius defined
     * (cm),'/ '          Z at which phsp source collected (cm),'/ '  No
     *. of times to split charged particles.'/)
      WRITE(6,6890)
6890  FORMAT('   or (3) Point, rectangular beam incident from the front'
     */ '          Requires 7 inputs:' / '          charge (-1,0,1),' /'
     *          3 (mandatory, to identify source type),' / 'lower x-coor
     *dinate of the beam (cm),' / '          upper x-coordinate of the b
     *eam (cm),' / '          lower y-coordinate of the beam (cm),' / ' 
     *         upper y-coordinate of the beam (cm),' / '      distance t
     *o the plane (cm),'/)
      WRITE(6,6900)
6900  FORMAT('  or  (6) Uniform isotropically radiating parallelepiped w
     *ithin'/ '          the phantom'/ '          Requires 8 inputs:'/ '
     *          charge (-1,0,1),' / '          6 (mandatory, to identify
     * source type),' / '          lower x-coordinate of active volume (
     *cm)'/ '          upper x-coordinate of active volume (cm),' / '   
     *    lower y-coordinate of active volume (cm) '/ '          upper y
     *-coordinate of active volume (cm),' / '          lower z-coordinat
     *e of active volume (cm)  ' / '          upper z-coordinate of acti
     *ve volume (cm) '/)
      WRITE(6,6910)
6910  FORMAT('  or  (7) Parallel beam incident from multiple, user-selec
     *ted angles'/ '          Requires 9 inputs on this line:'/ '   char
     *ge (-1,0,1),' / '          7 (mandatory, to identify source type),
     *' / '          x-coordinate of the isocenter (cm),' / '      y-coo
     *rdinate of the isocenter (cm),' / '          z-coordinate of the i
     *socenter (cm),' / '          number of incident theta-phi pairs or
     * -ve number of', / '             groups of incident theta-phi pair
     *s where, within a group', / '             only theta or phi can va
     *ry, the varying angles are' / '             evenly distributed and
     * have equal probability,' / '          total x-width of the beam i
     *n the plane perpendicular' / '             to the beamdirection (c
     *m),' / '          total y-width of the beam in the plane perpendic
     *ular' / '             to the beam direction (cm),' / '          an
     *gle by which the collimator is rotated in the' / '         collima
     *tor plane perpendicular to the beam' / '   direction (degrees),   
     *                  ' / '             (+ve rotation is counterclockw
     *ise looking along' / '              thebeam direction' /)
      WRITE(6,6920)
6920  FORMAT('  or  (8) Full phase-space incident from multiple angles'/
     * '          Requires 8 inputs on this line and data stored in unit
     *s 43,44:'/ '          charge (-1 electron,0 photon,1 positron, 2al
     *l),' / '          2 (mandatory, to identify source type),' / '    
     *    x-coordinate of the isocenter (cm),' / '          y-coordinate
     * of the isocenter (cm),' / '          z-coordinate of the isocente
     *r (cm),' / '          number of incident theta-phi pairs or -ve nu
     *mber of', / '             groups of incident theta-phi pairs where
     *, within a group', / '             only theta or phi can vary, the
     * varying angles are' / '             evenly distributed and have e
     *qual probability,' / '          absolute distance from the isocent
     *er to the origin' / '             in the phase space plane        
     *          ' / '          angle by which the source is rotated in t
     *he' / '             phase space plane perpendicular to the beam' /
     * '             direction (degrees),                     '/ '      
     *       (+ve rotation is counterclockwise looking down' /'         
     *     from the origin in the phase space plane),' / '      i_dbs--s
     *et to 1 if DBS was used in BEAM simulation used' / '             t
     *o generate the phsp source and you want to reject fat' / '        
     *     photons, 0 otherwise,'/ '          DBS splitting radius (cm),
     *'/ '          SSD at which splitting radius defined(cm),'/ '      
     *    Z at which phsp source collected (cm)',/ '     No. of times to
     * split charged particles.'/)
      WRITE(6,6930)
6930  FORMAT('  or  (9) BEAM simulation of treatment head' / 'Requires 1
     *1 inputs plus name of accelerator simulation,'/ '   input file use
     *d in accelerator simulation, and pegs4'/ '   data used in accelera
     *tor simulation:'/ '          charge (-1 electron,0 photon,1 positr
     *on, 2 all),' / '          9 (mandatory, to identify source type),'
     * / '          x-coordinate of the isocenter (cm),' / '          y-
     *coordinate of the isocenter (cm),' / '      z-coordinate of the is
     *ocenter (cm),' / '          angle between beam central axis and +z
     * axis in DOSXYZ'/ '             geometry--called the polar angle(d
     *egrees),' / '          angle between +x direction in DOSXYZ geomet
     *ry and' / '             beam central axis projected on the DOSXYZ 
     *xy plane' / '             --called the azimuthal angle (degrees),'
     * / '          absolute distance from the isocenter to centre of' /
     * '             scoring plane in BEAM simulation,' / '          ang
     *le to rotate BEAM simulation about its central' / '             ax
     *is (degrees) (+ve rotation is counterclockwise'/ '             loo
     *king down the axis),' / '          i_dbs--set to 1 if DBS is being
     * used in BEAM simulation' / '    and you want to reject fat photon
     *s, 0 otherwise,'/ 'No. of times to split charged particles.'/)
      WRITE(6,6940)
6940  FORMAT('  or  (10) BEAM simulation source incident from multiple a
     *ngles' / '          Requires 10 inputs plus name of accelerator si
     *mulation,'/ '          input file used in accelerator simulation,a
     *nd pegs4'/ '          data used in accelerator simulation:'/ '    
     *   charge (-1 electron,0 photon,1 positron, 2 all),' / '    9 (man
     *datory, to identify source type),' / '          x-coordinate of th
     *e isocenter (cm),' / '          y-coordinate of the isocenter (cm)
     *,' / '          z-coordinate of the isocenter (cm),' / '          
     *number of incident theta-phi pairs or -ve number of', /'          
     *   groups of incident theta-phi pairs where, within a group', / ' 
     *            only theta or phi can vary, the varying angles are' / 
     *'             evenly distributed and have equal probability,' / ' 
     *         absolute distance from the isocenter to centre of' / '   
     *          scoring plane in BEAM simulation,' / '   angle to rotate
     * BEAM simulation about its central' / '    axis (degrees) (+ve rot
     *ation is counterclockwise'/ '   looking down the axis),' / '      
     *    i_dbs--set to 1 if DBS is being used in BEAM simulation' / '  
     *           and you want to reject fat photons, 0 otherwise,'/ '   
     *       No. of times to splitcharged particles.'/)
      WRITE(6,6950)
6950  FORMAT('  or  (20) Phase Space Incident from multiple settings '/'
     *  optionally through an MLC or through a BEAM accel.'/ ' Requires 
     *6 inputs plus name of the input file used'/ '       forBEAM/vcu SI
     *M. and the BEAM/VCU code if used'/ '          data used in simulat
     *ion:'/ '          charge (-1 electron,0 photon,1 positron, 2 all),
     *' / '          20 (mandatory, to identify source type),' / '      
     *    number of control points, ', / '          i_dbs: set to 1 if D
     *BS is being used in simulation' / '             and you want to re
     *ject fat photons, 0 otherwise,'/ '          r_dbs: radius of DBS s
     *plitting field in original'/ '             BEAM simulation,'/ '   
     *       ssd_dbs: SSD of DBS splitting field, '/ '   z_dbs: Z positi
     *on where phase space was scored '/ ' in original BEAM simulation, 
     *'/ '          No. of times to splitcharged particles,'/ '         
     * i_muidx_out: Set to 1 to include fractional MU index'/ '         
     *    in output phase space (i_phsp_out=1 or 2)'/ '          calflag
     *: Set to 1 to skip the calibrationrun performed'/ '             to
     * refine the estimate of NRCYCL.'/)
      WRITE(6,6960)
6960  FORMAT('  or  (21) BEAM simulation of treatment head will multiple
     * settings' / '  optionally through a MLC'/ '          Requires  na
     *me of accelerator simulation,'/ '          input file used in acce
     *lerator simulation, and pegs4'/ '          data used in accelerato
     *r simulation, name of input file'/ '       for vcu SIM. and the VC
     *U code (particleDmlc) if using MLC'/ '          charge (-1 electro
     *n,0 photon,1 positron, 2 all),' / '          21 (mandatory, to ide
     *ntify source type),' / '          number of control points ', / ' 
     *        i_dbs: set to 1 if DBS is being used in BEAM simulation'/ 
     *'             and you want to reject fat photons, 0 otherwise,'/' 
     *         No. of times to split charged particles.'/ 'i_muidx_out: 
     *Set to 1 to include fractional MU index'/ '   in output phase spac
     *e (i_phsp_out=1 or 2)'/)
      WRITE(6,6970)
6970  FORMAT(' All inputs on one line:',$)
      READ(5,6980)iqin,isource,(temp(i),i=1,12)
6980  FORMAT(2i12,12f15.0)
      IF (( (iqin .LT. -1) .OR. (iqin .GT. 1 .AND. isource .NE. 2 .AND.
     *isource .LT. 8) .OR. (iqin .GT. 2) )) THEN
          iqin=0
      END IF
      IF ((isource .EQ. 0)) THEN
          xinl = temp(1)
          xinu = temp(2)
          yinl = temp(3)
          yinu = temp(4)
          thetax = temp(5)
          thetay = temp(6)
          thetaz = temp(7)
          WRITE(6,6990)iqin,xinl,xinu,yinl,yinu,thetax,thetay,thetaz
6990      FORMAT(/ ' Parallel beam incident from the front(+ve z-axis)'/
     *' Electric charge of the source:',t40,i12 / ' x-boundaries:',t26,f
     *10.4,' cm --',f10.4,' cm' / ' y-boundaries:',t26,f10.4,'cm --',f10
     *.4,' cm' / ' Angle relative to +x:',t40,f10.4 / ' Anglerelative to
     * +y:',t40,f10.4 / ' Angle relative to -z:',t40,f10.4 //)
      ELSE IF((isource .EQ. 1)) THEN
          xiso = temp(1)
          yiso = temp(2)
          ziso = temp(3)
          theta(1) = temp(4)
          phi(1) = temp(5)
          xcol = temp(6)
          ycol = temp(7)
          phicol = temp(8)
          WRITE(6,7000)iqin,xiso,yiso,ziso,theta(1),phi(1),xcol,ycol,phi
     *    col
7000      FORMAT(/ ' Parallel beam incident from an arbitrary direction'
     */ ' Electric charge of the source:' ,t40,i12 / ' x-coordinateof th
     *e isocenter:' ,t40,f10.4 / ' y-coordinate of the isocenter:',t40,f
     *10.4 / ' z-coordinate of the isocenter:' ,t40,f10.4 / 'Polar angle
     * of collimator center:' ,t40,f10.4 / ' Azimuthal angleof collimato
     *r center:',t40,f10.4 / ' Total x-collimator width:' ,t40,f10.4 / '
     * Total y-collimator width:' ,t40,f10.4 / ' Collimator rotation ang
     *le:' ,t40,f10.4 //)
      ELSE IF((isource .EQ. 2)) THEN
          xiso = temp(1)
          yiso = temp(2)
          ziso = temp(3)
          theta(1) = temp(4)
          phi(1) = temp(5)
          dsource = temp(6)
          phicol = temp(7)
          iqphsp=iqin
          i_dbs=temp(8)
          r_dbs=temp(9)
          ssd_dbs=temp(10)
          z_dbs=temp(11)
          e_split=temp(12)
          WRITE(6,7010)xiso,yiso,ziso,theta(1),phi(1),dsource,phicol,e_s
     *    plit
7010      FORMAT(/ ' Full phase space from an arbitrary direction'/ ' x-
     *coordinate of the isocenter:' ,t55,f10.4/ ' y-coordinate of the is
     *ocenter:' ,t55,f10.4/ ' z-coordinate of the isocenter:' ,t55,f10.4
     */ ' Polar angle of origin in source plane:',t55,f10.4/ ' Azimuthal
     * angle of origin in source plane:' ,t55,f10.4/ ' Distance from iso
     *center to origin in source plane:',t55,f10.4/ ' Source rotation an
     *gle:' ,t55,f10.4/ ' No. of times to split e+/e-:' ,t55,i10/)
          IF ((i_dbs.EQ.1)) THEN
              WRITE(6,7020)r_dbs,ssd_dbs,z_dbs
7020          FORMAT(/ ' Directional Bremsstrahlung Splitting (DBS) used
     *'/ ' in BEAM simulation to generate phase space source with:'/ '  
     *DBS splitting radius:',t55,f10.4/ '    SSD where radius defined:',
     *t55,f10.4/ '    Z where source scored:',t55,f10.4/ ' Photons whose
     * trajectory takes them outside the DBS splitting'/ ' radius at the
     * SSD will be rejected.'/)
              IF ((ssd_dbs.LT.z_dbs)) THEN
                  WRITE(6,7030)
7030              FORMAT(//' ***WARNING:'/ ' SSD where DBS splitting rad
     *ius is defined < the Z'/ ' value of scoring plane for this source.
     *'/ ' Particle rejection will be turned off.'//)
                  i_dbs=0
              END IF
          ELSE
              i_dbs=0
          END IF
          IF ((iqphsp.EQ.2)) THEN
              WRITE(6,7040)
7040          FORMAT(/' Charge of incident particles to use: -1, 0, 1'/)
          ELSE
              WRITE(6,7050)iqphsp
7050          FORMAT(/' Charge of incident particles to use: ',i2/)
          END IF
      ELSE IF((isource .EQ. 3)) THEN
          xinl = temp(1)
          xinu = temp(2)
          yinl = temp(3)
          yinu = temp(4)
          ssd = temp(5)
          WRITE(6,7060)iqin,xinl,xinu,yinl,yinu,ssd
7060      FORMAT(/ ' Point source incident from the front(+ve z-axis)'/'
     * Electric charge of the source:',t40,i12 / ' x-boundaries:',t26,f1
     *0.4,' cm --',f10.4,' cm' / ' y-boundaries:',t26,f10.4,' cm --',f10
     *.4,' cm' / ' SSD                     :',t40,f10.4 /)
      ELSE IF((isource .EQ. 4)) THEN
          WRITE(6,7070)
7070      FORMAT(/ ' Beam characterization model not implemented, use so
     *urce 1 - 3!'//)
      ELSE IF((isource .EQ. 6)) THEN
          xinl = temp(1)
          xinu = temp(2)
          yinl = temp(3)
          yinu = temp(4)
          zinl = temp(5)
          zinu = temp(6)
          WRITE(6,7080)iqin,xinl,xinu,yinl,yinu,zinl,zinu
7080      FORMAT(/ ' Uniform isotropically radiating parallelepiped:'/ '
     * Electric charge of the source:',t40,i12 / ' x-boundaries:',t26,f1
     *0.4,' cm --',f10.4,' cm' / ' y-boundaries:',t26,f10.4,' cm --',f10
     *.4,' cm' / ' z-boundaries:',t26,f10.4,' cm --',f10.4,' cm'/)
          IF ((xinl.GT.xinu)) THEN
              WRITE(6,7090)
7090          FORMAT(//' ***ERROR in source 6:'/ ' xinl > xinu '//)
              STOP
          END IF
          IF ((yinl.GT.yinu)) THEN
              WRITE(6,7100)
7100          FORMAT(//' ***ERROR in source 6:'/ ' yinl > yinu '//)
              STOP
          END IF
          IF ((zinl.GT.zinu)) THEN
              WRITE(6,7110)
7110          FORMAT(//' ***ERROR in source 6:'/ ' zinl > zinu '//)
              STOP
          END IF
      ELSE IF((isource .EQ. 7)) THEN
          xiso = temp(1)
          yiso = temp(2)
          ziso = temp(3)
          nang = temp(4)
          xcol = temp(5)
          ycol = temp(6)
          phicol = temp(7)
          IF ((nang.GT.0)) THEN
              WRITE(6,7120)iqin,xiso,yiso,ziso,nang,xcol,ycol,phicol
7120          FORMAT(/ ' Parallel beam incident from multiple, user-sele
     *cted angles'/ ' Electric charge of the source:' ,t40,i12 / ' x-coo
     *rdinate of the isocenter:' ,t40,f10.4 / ' y-coordinate of the isoc
     *enter:' ,t40,f10.4 / ' z-coordinate of the isocenter:' ,t40,f10.4/
     * ' Number of incident theta-phi:' ,t40,i12 / ' Total x-collimator 
     *width:' ,t40,f10.4 / ' Total y-collimator width:' ,t40,f10.4 / ' C
     *ollimator rotation angle:' ,t40,f10.4 /)
              IF ((nang.GT.60000)) THEN
                  WRITE(6,7130)60000
                  WRITE(1,7130)60000
7130              FORMAT(//' ***ERROR in source 7***'/ ' Number of incid
     *ent theta-phi > max. allowed (',I4,')'/ ' Increase $MXANG in dosxy
     *z_user_macros.mortran, recompile'/ ' and try again.'//)
                  STOP
              END IF
              temp(1)=0.
              DO 7141 I=1,nang
                  WRITE(6,7150)I
7150              FORMAT(' Incident theta-phi pair ',I4,':'/ '    theta(
     *deg.), phi (deg.), probability:',$)
                  READ(5,7160)theta(I),phi(I),pang(I)
7160              FORMAT(3F15.0)
                  WRITE(6,7170)theta(I),phi(I),pang(I)
7170              FORMAT(3F10.4)
                  temp(1)=temp(1)+pang(I)
7141          CONTINUE
7142          CONTINUE
              DO 7181 I=1,nang
                  pang(I)=pang(I)/temp(1)
                  IF ((I.GT.1)) THEN
                      pang(I)=pang(I)+pang(I-1)
                  END IF
7181          CONTINUE
7182          CONTINUE
              numang=nang
          ELSE IF((nang.LT.0)) THEN
              WRITE(6,7190)iqin,xiso,yiso,ziso,-nang,xcol,ycol,phicol
7190          FORMAT(/ ' Parallel beam incident from multiple, user-sele
     *cted angles'/ ' Electric charge of the source:' ,t40,i12 / ' x-coo
     *rdinate of the isocenter:' ,t40,f10.4 / ' y-coordinate of the isoc
     *enter:' ,t40,f10.4 / ' z-coordinate of the isocenter:' ,t40,f10.4/
     * ' No. of theta-phi groups:' ,t40,i12 / ' Total x-collimator width
     *:' ,t40,f10.4 / ' Total y-collimator width:' ,t40,f10.4 /' Collima
     *tor rotation angle:' ,t40,f10.4 /)
              temp(1)=0.
              WRITE(6,7200)
7200          FORMAT(' For each theta-phi group, input:'/ '   ivary (=0t
     *o vary phi, 1 to vary theta), fixed theta/phi (deg.), '/ '   min. 
     *varying theta/phi (deg.), max. varying theta/phi (deg.), '/ '   no
     *. of varying angles in group (including min. and max.), '/ '   pro
     *bability for group (all on one line).')
              DO 7211 I=1,-nang
                  WRITE(6,7220)I
7220              FORMAT(' Incident theta-phi group ',I4,/ ' :',$)
                  READ(5,7230)ivary(I),angfixed(I),angmin(I),angmax(I),n
     *            gang(I),pgang(I)
7230              FORMAT(I12,3F15.0,I12,F15.0)
                  IF ((ngang(I).LT.2)) THEN
                      WRITE(6,7240)
7240                  FORMAT(//' ***WARNING***'/ ' ngang(i) must be >=2.
     *  It will be reset to 2 '/ ' in this case. '//)
                      ngang(I)=2
                  END IF
                  WRITE(6,7250)ivary(I),angfixed(I),angmin(I),angmax(I),
     *            ngang(I),pgang(I)
7250              FORMAT(I10,3F10.4,I10,F10.4)
                  temp(1)=temp(1)+pgang(I)
7211          CONTINUE
7212          CONTINUE
              K=0
              DO 7261 I=1,-nang
                  pgang(I)=pgang(I)/temp(1)
                  DO 7271 J=1,ngang(I)
                      K=K+1
                      IF ((K.GT.60000)) THEN
                          WRITE(6,7280)60000
                          WRITE(1,7280)60000
7280                      FORMAT(//' ***ERROR in source 7***'/ ' Numbero
     *f incident theta-phi > max. allowed (',I4,')'/ ' Increase $MXANGin
     * dosxyz_user_macros.mortran, recompile'/ ' and try again.'//)
                          STOP
                      END IF
                      IF ((ivary(I).EQ.1)) THEN
                          phi(K)=angfixed(I)
                          theta(K)=angmin(I)+(J-1)*(angmax(I)-angmin(I))
     *                    /(ngang(I)-1)
                      ELSE
                          theta(K)=angfixed(I)
                          phi(K)=angmin(I)+(J-1)*(angmax(I)-angmin(I))/(
     *                    ngang(I)-1)
                      END IF
                      pang(K)=pgang(I)/ngang(I)
                      IF ((K.GT.1)) THEN
                          pang(K)=pang(K)+pang(K-1)
                      END IF
7271              CONTINUE
7272              CONTINUE
7261          CONTINUE
7262          CONTINUE
              numang=K
          END IF
          WRITE(6,7290)
7290      FORMAT(' ')
      ELSE IF((isource .EQ. 8)) THEN
          xiso = temp(1)
          yiso = temp(2)
          ziso = temp(3)
          nang = temp(4)
          dsource = temp(5)
          phicol = temp(6)
          iqphsp=iqin
          i_dbs=temp(7)
          r_dbs=temp(8)
          ssd_dbs=temp(9)
          z_dbs=temp(10)
          e_split=temp(11)
          IF ((nang.GT.0)) THEN
              WRITE(6,7300)xiso,yiso,ziso,nang,dsource,phicol,e_split
7300          FORMAT(/ ' Full hase space from multiple, user-selected an
     *gles'/ ' x-coordinate of the isocenter:' ,t55,f10.4/ ' y-coordinat
     *e of the isocenter:' ,t55,f10.4/ ' z-coordinate of the isocenter:'
     *,t55,f10.4/ ' Number of incident theta-phi:',t55,i10/ ' Distance f
     *rom isocenter to origin in source plane:',t55,f10.4/ ' Source rota
     *tion angle:' ,t55,f10.4/ ' No. of times to split e+/e-:',t55,i10/)
              IF ((i_dbs.EQ.1)) THEN
                  WRITE(6,7310)r_dbs,ssd_dbs,z_dbs
7310              FORMAT(/ ' Directional Bremsstrahlung Splitting (DBS)u
     *sed'/ ' in BEAM simulation to generate phase space source with:'/'
     *    DBS splitting radius:',t55,f10.4/ '    SSD where radius define
     *d:',t55,f10.4/ '    Z where source scored:',t55,f10.4/ ' Photons w
     *hose trajectory takes them outside the DBS splitting'/ ' radius at
     * the SSD will be rejected.'/)
                  IF ((ssd_dbs.LT.z_dbs)) THEN
                      WRITE(6,7320)
7320                  FORMAT(//' ***WARNING:'/ ' SSD where DBS splitting
     * radius is defined < the Z'/ ' value of scoring plane for this sou
     *rce.'/ ' Particle rejection will be turned off.'//)
                      i_dbs=0
                  END IF
              ELSE
                  i_dbs=0
              END IF
              IF ((iqphsp.EQ.2)) THEN
                  WRITE(6,7330)
7330              FORMAT(/' Charge of incident particles to use: -1, 0,1
     *'/)
              ELSE
                  WRITE(6,7340)iqphsp
7340              FORMAT(/' Charge of incident particles to use: ',i2/)
              END IF
              IF ((nang.GT.60000)) THEN
                  WRITE(6,7350)60000
                  WRITE(1,7350)60000
7350              FORMAT(//' ***ERROR in source 7***'/ ' Number of incid
     *ent theta-phi > max. allowed (',I4,')'/ ' Increase $MXANG in dosxy
     *z_user_macros.mortran, recompile'/ ' and try again.'//)
                  STOP
              END IF
              temp(1)=0.
              DO 7361 I=1,nang
                  WRITE(6,7370)I
7370              FORMAT(' Incident theta-phi pair ',I4,':'/ '    theta(
     *deg.), phi (deg.), probability:',$)
                  READ(5,7380)theta(I),phi(I),pang(I)
7380              FORMAT(3F15.0)
                  WRITE(6,7390)theta(I),phi(I),pang(I)
7390              FORMAT(3F10.4)
                  temp(1)=temp(1)+pang(I)
7361          CONTINUE
7362          CONTINUE
              DO 7401 I=1,nang
                  pang(I)=pang(I)/temp(1)
                  IF ((I.GT.1)) THEN
                      pang(I)=pang(I)+pang(I-1)
                  END IF
7401          CONTINUE
7402          CONTINUE
              numang=nang
          ELSE IF((nang.LT.0)) THEN
              WRITE(6,7410)xiso,yiso,ziso,-nang,dsource,phicol
7410          FORMAT(/ ' Full phase space from multiple, user-selected a
     *ngles'/ ' x-coordinate of the isocenter:' ,t55,f10.4/ ' y-coordina
     *te of the isocenter:' ,t55,f10.4/ ' z-coordinate of the isocenter:
     *' ,t55,f10.4/ ' Number of theta-phi groups:',t55,i10/ ' Distance f
     *rom isocenter to origin in source plane:',t55,f10.4/ ' Source rota
     *tion angle:' ,t55,f10.4/)
              IF ((i_dbs.EQ.1)) THEN
                  WRITE(6,7420)r_dbs,ssd_dbs,z_dbs
7420              FORMAT(/ ' Directional Bremsstrahlung Splitting (DBS)u
     *sed'/ ' in BEAM simulation to generate phase space source with:'/'
     *    DBS splitting radius:',t55,f10.4/ '    SSD where radius define
     *d:',t55,f10.4/ '    Z where source scored:',t55,f10.4/ ' Photons w
     *hose trajectory takes them outside the DBS splitting'/ ' radius at
     * the SSD will be rejected.'/)
                  IF ((ssd_dbs.LT.z_dbs)) THEN
                      WRITE(6,7430)
7430                  FORMAT(//' ***WARNING:'/ ' SSD where DBS splitting
     * radius is defined < the Z'/ ' value of scoring plane for this sou
     *rce.'/ ' Particle rejection will be turned off.'//)
                      i_dbs=0
                  END IF
              ELSE
                  i_dbs=0
              END IF
              IF ((iqphsp.EQ.2)) THEN
                  WRITE(6,7440)
7440              FORMAT(/' Charge of incident particles to use: -1, 0,1
     *'/)
              ELSE
                  WRITE(6,7450)iqphsp
7450              FORMAT(/' Charge of incident particles to use: ',i2/)
              END IF
              temp(1)=0.
              WRITE(6,7460)
7460          FORMAT(' For each theta-phi group, input:'/ '   ivary (=0t
     *o vary phi, 1 to vary theta), fixed theta/phi (deg.), '/ '   min. 
     *varying theta/phi (deg.), max. varying theta/phi (deg.), '/ '   no
     *. of varying angles in group (including min. and max.), '/ '   pro
     *bability for group (all on one line).')
              DO 7471 I=1,-nang
                  WRITE(6,7480)I
7480              FORMAT(' Incident theta-phi group ',I4,/ ' :',$)
                  READ(5,7490)ivary(I),angfixed(I),angmin(I),angmax(I),n
     *            gang(I),pgang(I)
7490              FORMAT(I12,3F15.0,I12,F15.0)
                  IF ((ngang(I).LT.2)) THEN
                      WRITE(6,7500)
7500                  FORMAT(//' ***WARNING***'/ ' ngang(i) must be >=2.
     *  It will be reset to 2 '/ ' in this case. '//)
                      ngang(I)=2
                  END IF
                  WRITE(6,7510)ivary(I),angfixed(I),angmin(I),angmax(I),
     *            ngang(I),pgang(I)
7510              FORMAT(I10,3F10.4,I10,F10.4)
                  temp(1)=temp(1)+pgang(I)
7471          CONTINUE
7472          CONTINUE
              K=0
              DO 7521 I=1,-nang
                  pgang(I)=pgang(I)/temp(1)
                  DO 7531 J=1,ngang(I)
                      K=K+1
                      IF ((K.GT.60000)) THEN
                          WRITE(6,7540)60000
                          WRITE(1,7540)60000
7540                      FORMAT(//' ***ERROR in source 7***'/ ' Numbero
     *f incident theta-phi > max. allowed (',I4,')'/ ' Increase $MXANGin
     * dosxyz_user_macros.mortran, recompile'/ ' and try again.'//)
                          STOP
                      END IF
                      IF ((ivary(I).EQ.1)) THEN
                          phi(K)=angfixed(I)
                          theta(K)=angmin(I)+(J-1)*(angmax(I)-angmin(I))
     *                    /(ngang(I)-1)
                      ELSE
                          theta(K)=angfixed(I)
                          phi(K)=angmin(I)+(J-1)*(angmax(I)-angmin(I))/(
     *                    ngang(I)-1)
                      END IF
                      pang(K)=pgang(I)/ngang(I)
                      IF ((K.GT.1)) THEN
                          pang(K)=pang(K)+pang(K-1)
                      END IF
7531              CONTINUE
7532              CONTINUE
7521          CONTINUE
7522          CONTINUE
              numang=K
          END IF
          WRITE(6,7550)
7550      FORMAT(' ')
      ELSE IF((isource .EQ. 9)) THEN
          xiso = temp(1)
          yiso = temp(2)
          ziso = temp(3)
          theta(1) = temp(4)
          phi(1) = temp(5)
          dsource = temp(6)
          phicol = temp(7)
          iqinc=iqin
          i_dbs=temp(8)
          e_split=temp(9)
          WRITE(6,7560)xiso,yiso,ziso,theta(1),phi(1),dsource,phicol,e_s
     *    plit
7560      FORMAT(/ ' BEAM simulation of treatment head incident from any
     * direction'/ ' x-coordinate of the isocenter:' ,t55,f10.4/ ' y-coo
     *rdinate of the isocenter:' ,t55,f10.4/ ' z-coordinate of the isoce
     *nter:' ,t55,f10.4/ ' Polar angle of beam central axis:',t55,f10.4/
     *' Azimuthal angle of beam central axis:' ,t55,f10.4/ ' Distance fr
     *om isocenter to centre of'/ '            scoring plane in BEAM sim
     *ulation:',t55,f10.4/ ' Rotation angle about beam axis:',t55,f10.4/
     * ' No. of times to split e+/e-:',t55,i10/)
          IF ((i_dbs.EQ.1)) THEN
              WRITE(6,7570)
7570          FORMAT(' Fat photons resulting from DBS will be rejected'/
     *)
          ELSE
              WRITE(6,7580)
7580          FORMAT(' Fat photons resulting from DBS will not be reject
     *ed'/)
              i_dbs=0
          END IF
          IF ((iqinc.EQ.2)) THEN
              WRITE(6,7590)
7590          FORMAT(/' Charge of incident particles to use: -1, 0, 1'/)
          ELSE
              WRITE(6,7600)iqinc
7600          FORMAT(/' Charge of incident particles to use: ',i2/)
          END IF
      ELSE IF((isource .EQ. 10)) THEN
          xiso = temp(1)
          yiso = temp(2)
          ziso = temp(3)
          nang = temp(4)
          dsource = temp(5)
          phicol = temp(6)
          iqinc=iqin
          i_dbs=temp(7)
          e_split=temp(8)
          IF ((nang.GT.0)) THEN
              WRITE(6,7610)xiso,yiso,ziso,nang,dsource,phicol,e_split
7610          FORMAT(/ ' BEAM simulation source incident from multiple a
     *ngles'/ ' x-coordinate of the isocenter:' ,t55,f10.4/ ' y-coordina
     *te of the isocenter:' ,t55,f10.4/ ' z-coordinate of the isocenter:
     *' ,t55,f10.4/ ' No. of incident theta-phi:',t55,i10/ ' Distance fr
     *om isocenter to centre of'/ '            scoring plane in BEAM sim
     *ulation:',t55,f10.4/ ' Rotation angle about beam axis:',t55,f10.4/
     *' No. of time to split e+/e-:',t55,i10/)
          ELSE IF((nang.LT.0)) THEN
              WRITE(6,7620)xiso,yiso,ziso,-nang,dsource,phicol,e_split
7620          FORMAT(/ ' BEAM simulation source incident from multiple a
     *ngles'/ ' x-coordinate of the isocenter:' ,t55,f10.4/ ' y-coordina
     *te of the isocenter:' ,t55,f10.4/ ' z-coordinate of the isocenter:
     *' ,t55,f10.4/ ' No. of theta-phi groups:',t55,i10/ ' Distance from
     * isocenter to centre of'/ '            scoring plane in BEAM simul
     *ation:',t55,f10.4/ ' Rotation angle about beam axis:',t55,f10.4/ '
     * No. of time to split e+/e-:',t55,i10/)
          END IF
          IF ((i_dbs.EQ.1)) THEN
              WRITE(6,7630)
7630          FORMAT(' Fat photons resulting from DBS will be rejected'/
     *)
          ELSE
              WRITE(6,7640)
7640          FORMAT(' Fat photons resulting from DBS will not be reject
     *ed'/)
              i_dbs=0
          END IF
          IF ((iqinc.EQ.2)) THEN
              WRITE(6,7650)
7650          FORMAT(/' Charge of incident particles to use: -1, 0, 1'/)
          ELSE
              WRITE(6,7660)iqinc
7660          FORMAT(/' Charge of incident particles to use: ',i2/)
          END IF
          IF ((nang.GT.0)) THEN
              IF ((nang.GT.60000)) THEN
                  WRITE(6,7670)60000
                  WRITE(1,7670)60000
7670              FORMAT(//' ***ERROR in source 7***'/ ' Number of incid
     *ent theta-phi > max. allowed (',I4,')'/ ' Increase $MXANG in dosxy
     *z_user_macros.mortran, recompile'/ ' and try again.'//)
                  STOP
              END IF
              temp(1)=0.
              DO 7681 I=1,nang
                  WRITE(6,7690)I
7690              FORMAT(' Incident theta-phi pair ',I4,':'/ '    theta(
     *deg.), phi (deg.), probability:',$)
                  READ(5,7700)theta(I),phi(I),pang(I)
7700              FORMAT(3F15.0)
                  WRITE(6,7710)theta(I),phi(I),pang(I)
7710              FORMAT(3F10.4)
                  temp(1)=temp(1)+pang(I)
7681          CONTINUE
7682          CONTINUE
              DO 7721 I=1,nang
                  pang(I)=pang(I)/temp(1)
                  IF ((I.GT.1)) THEN
                      pang(I)=pang(I)+pang(I-1)
                  END IF
7721          CONTINUE
7722          CONTINUE
              numang=nang
          ELSE IF((nang.LT.0)) THEN
              temp(1)=0.
              WRITE(6,7730)
7730          FORMAT(' For each theta-phi group, input:'/ '   ivary (=0t
     *o vary phi, 1 to vary theta), fixed theta/phi (deg.), '/ '   min. 
     *varying theta/phi (deg.), max. varying theta/phi (deg.), '/ '   no
     *. of varying angles in group (including min. and max.), '/ '   pro
     *bability for group (all on one line).')
              DO 7741 I=1,-nang
                  WRITE(6,7750)I
7750              FORMAT(' Incident theta-phi group ',I4,/ ' :',$)
                  READ(5,7760)ivary(I),angfixed(I),angmin(I),angmax(I),n
     *            gang(I),pgang(I)
7760              FORMAT(I12,3F15.0,I12,F15.0)
                  IF ((ngang(I).LT.2)) THEN
                      WRITE(6,7770)
7770                  FORMAT(//' ***WARNING***'/ ' ngang(i) must be >=2.
     *  It will be reset to 2 '/ ' in this case. '//)
                      ngang(I)=2
                  END IF
                  WRITE(6,7780)ivary(I),angfixed(I),angmin(I),angmax(I),
     *            ngang(I),pgang(I)
7780              FORMAT(I10,3F10.4,I10,F10.4)
                  temp(1)=temp(1)+pgang(I)
7741          CONTINUE
7742          CONTINUE
              K=0
              DO 7791 I=1,-nang
                  pgang(I)=pgang(I)/temp(1)
                  DO 7801 J=1,ngang(I)
                      K=K+1
                      IF ((K.GT.60000)) THEN
                          WRITE(6,7810)60000
                          WRITE(1,7810)60000
7810                      FORMAT(//' ***ERROR in source 7***'/ ' Numbero
     *f incident theta-phi > max. allowed (',I4,')'/ ' Increase $MXANGin
     * dosxyz_user_macros.mortran, recompile'/ ' and try again.'//)
                          STOP
                      END IF
                      IF ((ivary(I).EQ.1)) THEN
                          phi(K)=angfixed(I)
                          theta(K)=angmin(I)+(J-1)*(angmax(I)-angmin(I))
     *                    /(ngang(I)-1)
                      ELSE
                          theta(K)=angfixed(I)
                          phi(K)=angmin(I)+(J-1)*(angmax(I)-angmin(I))/(
     *                    ngang(I)-1)
                      END IF
                      pang(K)=pgang(I)/ngang(I)
                      IF ((K.GT.1)) THEN
                          pang(K)=pang(K)+pang(K-1)
                      END IF
7801              CONTINUE
7802              CONTINUE
7791          CONTINUE
7792          CONTINUE
              numang=K
          END IF
          WRITE(6,7820)
7820      FORMAT(' ')
      ELSE IF((isource .EQ. 20)) THEN
          nset = temp(1)
          iqinc=iqin
          i_dbs=temp(2)
          r_dbs=temp(3)
          ssd_dbs=temp(4)
          z_dbs=temp(5)
          e_split=temp(6)
          i_muidx_out=temp(7)
          calflag=temp(8)
          IF ((ssd_dbs.EQ.0 .AND. z_dbs.EQ.0 .AND. r_dbs.GT.0)) THEN
              r_dbs = 0
              e_split = temp(3)
          END IF
          IF ((nset.GT.1)) THEN
              WRITE(6,7830)nset,e_split
7830          FORMAT(/ ' Phase Space source though dynamic library withm
     *ultiple variable'/ ' geometry settings'/ ' Number of settings:',t5
     *5,i10/ ' No. of time to split e+/e-:',t55,i10/)
              IF ((i_dbs.EQ.1)) THEN
                  WRITE(6,7840)r_dbs,ssd_dbs,z_dbs
7840              FORMAT(/ ' Directional Bremsstrahlung Splitting (DBS)u
     *sed'/ ' in BEAM simulation to generate phase space source with:'/'
     *    DBS splitting radius:',t55,f10.4/ '    SSD where radius define
     *d:',t55,f10.4/ '    Z where source scored:',t55,f10.4/ ' Photons w
     *hose trajectory takes them outside the DBS splitting'/ ' radius at
     * the SSD will be rejected.'/)
                  IF ((ssd_dbs.LT.z_dbs)) THEN
                      WRITE(6,7850)
7850                  FORMAT(//' ***WARNING:'/ ' SSD where DBS splitting
     * radius is defined < the Z'/ ' value of scoring plane for this sou
     *rce.'/ ' Particle rejection will be turned off.'//)
                      i_dbs=0
                  END IF
                  IF ((r_dbs.EQ.0)) THEN
                      WRITE(6,7860)
7860                  FORMAT(//' ***WARNING:'/ ' DBS splitting radius is
     * 0.'/ ' Make sure it is defined correctly in the input file.'/ ' P
     *article rejection will be turned off.'//)
                      i_dbs=0
                  END IF
              ELSE
                  i_dbs=0
              END IF
              IF ((iqinc.EQ.2)) THEN
                  WRITE(6,7870)
7870              FORMAT(/' Charge of incident particles to use: -1, 0,1
     *'/)
              ELSE
                  WRITE(6,7880)iqinc
7880              FORMAT(/' Charge of incident particles to use: ',i2/)
              END IF
              IF ((nset.GT.60000)) THEN
                  WRITE(6,7890)60000
                  WRITE(1,7890)60000
7890              FORMAT(//' ***ERROR in source 20***'/ ' Number of inci
     *dent settings > max. allowed (',I4,')'/ ' Increase $MXANG in dosxy
     *z_user_macros.mortran, recompile'/ ' and try again.'//)
                  STOP
              END IF
              IF((i_muidx_out.LT.0 .OR. i_muidx_out.GT.1))i_muidx_out=0
              IF ((i_muidx_out.EQ.1)) THEN
                  WRITE(6,7900)
7900              FORMAT(' If writing phase space data on exit from phan
     *tom (i_phsp_out=1 or 2)'/ ' frMU_indx (fractional monitor unit ind
     *ex) will be included.')
              END IF
              IF((calflag .LT. 0 .OR. calflag .GT. 1))calflag = 0
              IF ((calflag .EQ. 1)) THEN
                  WRITE(6,7910)
7910              FORMAT(' Skipping calibration run. Make sure that your
     * phase space file has'/ ' enough particles to avoid rewinding, oth
     *erwise uncertainty values'/ ' will be inaccurate.')
              END IF
              DO 7921 I=1,nset
                  WRITE(6,7930)I
7930              FORMAT(' Incident setting ',I4,':'/ '    xiso (cm), yi
     *so (cm), ziso (cm), theta (deg.)', ', phi (deg.), phicol (deg.),SA
     *D (cm), MU Index:',$)
                  READ(5,7940)xtemp(I),ytemp(I),ztemp(I),thetatemp(I),ph
     *            itemp(I), phicoltemp(I),dsourcetemp(I),muIndex(I)
7940              FORMAT(8F15.0)
                  WRITE(6,7950)xtemp(I),ytemp(I),ztemp(I),thetatemp(I),p
     *            hitemp(I), phicoltemp(I),dsourcetemp(I), muIndex(I)
7950              FORMAT(8F10.4)
7921          CONTINUE
7922          CONTINUE
              dsource=dsourcetemp(1)
          ELSE IF((nset.LT.2)) THEN
              WRITE(6,7960)nset
              WRITE(1,7960)nset
7960          FORMAT(//' ***ERROR in source 20***'/ 'nset (',I8,') mustb
     *e >= 2'//)
              STOP
          END IF
          WRITE(6,7970)
7970      FORMAT(' ')
      ELSE IF((isource .EQ. 21)) THEN
          nset=temp(1)
          i_dbs=temp(2)
          e_split=temp(3)
          i_muidx_out=temp(4)
          iqinc=iqin
          IF ((nset.GT.1)) THEN
              WRITE(6,7980)nset,e_split
7980          FORMAT(/ ' Full BEAM Sim. incident from multiple settings'
     */ ' Number of settings:',t55,i10/ ' No. of time to split e+/e-:',t
     *55,i10/)
              IF ((i_dbs.EQ.1)) THEN
                  WRITE(6,7990)
7990              FORMAT(' Fat photons resulting from DBS will be reject
     *ed'/)
              ELSE
                  WRITE(6,8000)
8000              FORMAT(' Fat photons resulting from DBS will not be re
     *jected'/)
                  i_dbs=0
              END IF
              IF ((iqinc.EQ.2)) THEN
                  WRITE(6,8010)
8010              FORMAT(/' Charge of incident particles to use: -1, 0,1
     *'/)
              ELSE
                  WRITE(6,8020)iqphsp
8020              FORMAT(/' Charge of incident particles to use: ',i2/)
              END IF
              IF ((nset.GT.60000)) THEN
                  WRITE(6,8030)60000
                  WRITE(1,8030)60000
8030              FORMAT(//' ***ERROR in source 12***'/ ' Number of inci
     *dent settings > max. allowed (',I4,')'/ ' Increase $MXANG in dosxy
     *z_user_macros.mortran, recompile'/ ' and try again.'//)
                  STOP
              END IF
              IF((i_muidx_out.LT.0 .OR. i_muidx_out.GT.1))i_muidx_out=0
              IF ((i_muidx_out.EQ.1)) THEN
                  WRITE(6,8040)
8040              FORMAT(' If writing phase space data on exit from phan
     *tom (i_phsp_out=1 or 2)'/ ' frMU_indx (fractional monitor unit ind
     *ex) will be included.')
              END IF
              DO 8051 I=1,nset
                  WRITE(6,8060)I
8060              FORMAT(' Incident setting ',I4,':'/ '  xiso (cm), yiso
     * (cm), ziso (cm), theta (deg.)', '  phi (deg.), phicol (deg.), SAD
     * (cm), MU Index:',$)
                  READ(5,8070)xtemp(I),ytemp(I),ztemp(I),thetatemp(I),ph
     *            itemp(I), phicoltemp(I),dsourcetemp(I), muIndex(I)
8070              FORMAT(8F15.0)
                  WRITE(6,8080)xtemp(I),ytemp(I),ztemp(I),thetatemp(I),p
     *            hitemp(I), phicoltemp(I),dsourcetemp(I),muIndex(I)
8080              FORMAT(8F10.4)
8051          CONTINUE
8052          CONTINUE
              dsource=dsourcetemp(1)
          ELSE IF((nset.LT.2)) THEN
              WRITE(6,8090)nset
              WRITE(1,8090)nset
8090          FORMAT(//' ***ERROR in source 21***'/ 'nset (',I8,') mustb
     *e >= 2'//)
              STOP
          END IF
          WRITE(6,8100)
8100      FORMAT(' ')
      ELSE
          WRITE(6,8110)isource
          WRITE(1,8110)isource
8110      FORMAT(' ***ISOURCE =', I10,' not valid: stopping')
          stop
      END IF
      WRITE(6,8120)
8120  FORMAT(' Enflag(0=mono-E,1=spectr,2=phsp or full BEAM sim.,3=dosec
     *omp,4=beam model),'/' Mode(0,2), medsur(0 = vacuum), dsurround(1),
     * dflag(0=1 dsurround,'/ ' 1=4 dsurrounds), dsurround(2), dsurround
     *(3), dsurround(4)',/,' :',$)
      READ(5,8130)enflag,ismode,medsur,dsurround(1),dflag,dsurround(2),d
     *surround(3), dsurround(4)
8130  FORMAT(3I12,F15.0,I12,3F15.0)
      IF ((enflag.GT.1)) THEN
          IF((ismode .NE. 2))ismode=0
          IF ((dflag.NE.1)) THEN
              dflag=0
              IF ((dsurround(1).LE.0.)) THEN
                  dsurround(1)=50.
                  WRITE(6,8140)dsurround(1)
8140              FORMAT(/10x,' dsurround(1) defaults to',F8.3,' cm.'/)
              END IF
              dsurround(2)=dsurround(1)
              dsurround(3)=dsurround(1)
              dsurround(4)=dsurround(1)
          ELSE
              IF ((dsurround(1).LT.0.)) THEN
                  dsurround(1)=0.
                  WRITE(6,8150)dsurround(1)
8150              FORMAT(/10x,' dsurround(1) defaults to',F8.3,' cm.'/)
              END IF
              IF ((dsurround(2).LT.0.)) THEN
                  dsurround(2)=0.
                  WRITE(6,8160)dsurround(2)
8160              FORMAT(/10x,' dsurround(2) defaults to',F8.3,' cm.'/)
              END IF
              IF ((dsurround(3).LT.0.)) THEN
                  dsurround(3)=0.
                  WRITE(6,8170)dsurround(3)
8170              FORMAT(/10x,' dsurround(3) defaults to',F8.3,' cm.'/)
              END IF
              IF ((dsurround(4).LT.0.)) THEN
                  dsurround(4)=0.
                  WRITE(6,8180)dsurround(4)
8180              FORMAT(/10x,' dsurround(4) defaults to',F8.3,' cm.'/)
              END IF
          END IF
      END IF
      IF ((enflag .GT. 1 .AND. dflag .EQ. 1)) THEN
          WRITE(6,8190)enflag,ismode,medsur,dsurround(1),dflag,dsurround
     *    (2),dsurround(3), dsurround(4)
8190      FORMAT(3I12,F8.3,I12,3F8.3)
      ELSE
          WRITE(6,8200)enflag,ismode,medsur,dsurround(1),dflag
8200      FORMAT(3I12,F8.3,I12)
      END IF
      IF ((enflag.GT.1)) THEN
          IF ((medsur.LE.0) .OR. ( medsur.GT.nmed)) THEN
              med((1 + imax + (jmax-1)*IMAX + (kmax-1)*ijmax)+1)=0
              IF ((dflag.EQ.0)) THEN
                  WRITE(6,8210)dsurround(1)
                  WRITE(1,8210)dsurround(1)
8210              FORMAT(/' The material in the region outside the phant
     *om is vacuum.'/ ' The thickness of this region (in x, y & z direct
     *ion) is:',F8.3,' cm'/)
              ELSE
                  WRITE(6,8220)dsurround(1),dsurround(2),dsurround(3),ds
     *            urround(4)
                  WRITE(1,8220)dsurround(1),dsurround(2),dsurround(3),ds
     *            urround(4)
8220              FORMAT(/' The material in the region outside the phant
     *om is vacuum.'/ ' The thickness of this region in the x directioni
     *s:',F8.3,' cm'/ ' The thickness in the y direction is:',F8.3,' cm'
     */ ' The thickness in the +z direction is:',F8.3,' cm'/ ' The thick
     *ness in the -z direction is:',F8.3,' cm'/)
              END IF
          ELSE
              med((1 + imax + (jmax-1)*IMAX + (kmax-1)*ijmax)+1)=medsur
              IF ((dflag.EQ.0)) THEN
                  WRITE(6,8230)(media(j,medsur),j=1,24),dsurround(1)
                  WRITE(1,8230)(media(j,medsur),j=1,24),dsurround(1)
8230              FORMAT(/' The material in the region outside the phant
     *om is:',24a1/ ' The thickness of this region (in x, y & z directio
     *n) is:',F8.3,' cm'/)
              ELSE
                  WRITE(6,8240)(media(j,medsur),j=1,24),dsurround(1),dsu
     *            rround(2), dsurround(3),dsurround(4)
                  WRITE(1,8240)(media(j,medsur),j=1,24),dsurround(1),dsu
     *            rround(2), dsurround(3),dsurround(4)
8240              FORMAT(/' The material in the region outside the phant
     *om is:',24a1/ ' The thickness of this region in the x direction is
     *:',F8.3,' cm'/ ' The thickness in the y direction is:',F8.3,' cm'/
     *' The thickness in the +z direction is:',F8.3,' cm'/' The thicknes
     *s in the -z direction is:',F8.3,' cm'/)
              END IF
          END IF
          dsurround(1)=dsurround(1)+0.0001
          dsurround(2)=dsurround(2)+0.0001
          dsurround(3)=dsurround(3)+0.0001
          dsurround(4)=dsurround(4)+0.0001
      END IF
      IF ((enflag .EQ. 0)) THEN
          WRITE(6,8250)
8250      FORMAT(' Beam Energy (K.E. in MeV):',$)
          read(5,*) ein
          WRITE(6,8260)ein
8260      FORMAT(F10.3)
      ELSE IF((enflag .EQ. 1)) THEN
          WRITE(6,8270)
8270      FORMAT(' Energy spectrum:')
          WRITE(6,8280)
8280      FORMAT(' Input name of file with spectrum data (A256): ',$)
          READ(5,101,ERR=8290) FILNAM
101       FORMAT(A256)
          WRITE(6,8300)FILNAM
          WRITE(1,8300)FILNAM
8300      FORMAT(/'   Read input energy spectrum from: ',/A)
          call replace_env(FILNAM)
          OPEN(UNIT=99,STATUS='OLD',file=FILNAM)
          READ(99,101) SPEC_TITLE
          READ(99,'(I10,F15.0,I5)')NENSRC,ENMIN,IMODE
          IF ((NENSRC .GT. 200)) THEN
              WRITE(6,8310)NENSRC,200
              WRITE(1,8310)NENSRC,200
8310          FORMAT(//' Number of energy bins=',I4, ' is greater than m
     *ax allowed =',I4/' Reduced to max allowed.'//)
              NENSRC = 200
          END IF
          READ(99,'(2F20.0)')(ENSRCD(IB),SRCPDF(IB),IB=1,NENSRC)
          CLOSE(UNIT=99)
          WRITE(6,8320)NENSRC
          WRITE(1,8320)NENSRC
8320      FORMAT('  Have read',I5,' input energy bins from file')
          IF ((IMODE.EQ.0)) THEN
              WRITE(6,8330)
              WRITE(1,8330)
8330          FORMAT('      Counts/bin assumed')
          ELSE IF((IMODE .EQ. 1)) THEN
              WRITE(6,8340)
              WRITE(1,8340)
8340          FORMAT('      Counts/MeV assumed')
              SRCPDF(1) = SRCPDF(1)*(ENSRCD(1)-ENMIN)
              DO 8351 IB=2,NENSRC
                  SRCPDF(IB) = SRCPDF(IB)*(ENSRCD(IB)-ENSRCD(IB-1))
8351          CONTINUE
8352          CONTINUE
          ELSE
              WRITE(6,8360)IMODE
              WRITE(1,8360)IMODE
8360          FORMAT(///'*****MODE not 0 or 1 in spectrum file? **' /80(
     *'*') //)
          END IF
          EIN = ENSRCD(NENSRC)
          WRITE(6,8370)ENMIN,EIN
          WRITE(1,8370)ENMIN,EIN
8370      FORMAT('    Energy ranges from',F10.3,' MeV to',F12.3,' MeV')
          IF ((SRCPDF(1).GT.0.0)) THEN
              IF ((iqin.EQ.-1.AND.ENMIN.LT.ECUT)) THEN
                  WRITE(6,8380)
                  WRITE(1,8380)
8380              FORMAT(//' *******WARNING:'/ ' min. energy of spectrum
     * < ECUT'/ ' May lead to artifically high dose in voxel(s) on which
     * source is incident'//)
              ELSE IF((iqin.EQ.0.AND.ENMIN.LT.PCUT)) THEN
                  WRITE(6,8390)
                  WRITE(1,8390)
8390              FORMAT(//' *******WARNING:'/ ' min. energy of spectrum
     * < PCUT'/ ' May lead to artifically high dose in voxel(s) on which
     * source is incident'//)
              END IF
          ELSE
              DO 8401 IB=2,NENSRC
                  IF ((SRCPDF(IB).GT.0.)) THEN
                      IF ((iqin.EQ.-1.AND.ENSRCD(IB-1).LT.ECUT)) THEN
                          WRITE(6,8410)
                          WRITE(1,8410)
8410                      FORMAT(//' *******WARNING:'/ ' min. energy ofs
     *pectrum < ECUT'/ ' May lead to artifically high dose in voxel(s)on
     * which source is incident'//)
                      ELSE IF((iqin.EQ.0.AND.ENSRCD(IB-1).LT.PCUT)) THEN
     *
                          WRITE(6,8420)
                          WRITE(1,8420)
8420                      FORMAT(//' *******WARNING:'/ ' min. energy ofs
     *pectrum < PCUT'/ ' May lead to artifically high dose in voxel(s)on
     * which source is incident'//)
                      END IF
                      GO TO8402
                  END IF
8401          CONTINUE
8402          CONTINUE
          END IF
          SRCCDF(1)=SRCPDF(1)
          DO 8431 IB=2,NENSRC
              SRCCDF(IB)=SRCCDF(IB-1)+SRCPDF(IB)
8431      CONTINUE
8432      CONTINUE
          FNORM=1./SRCCDF(NENSRC)
          BINSOK=0.0
          DELTAK=1000
          GRIDSZ=1/DELTAK
          DO 8441 IB=1,NENSRC
              SRCCDF(IB)=FNORM*SRCCDF(IB)
              IF ((IB .EQ. 1)) THEN
                  IF ((SRCCDF(1) .LE. 3.*GRIDSZ )) THEN
                      BINSOK = 1.0
                  END IF
              ELSE
                  IF (((SRCCDF(IB)-SRCCDF(IB-1)) .LT. 3.*GRIDSZ)) THEN
                      BINSOK=1.0
                  END IF
              END IF
8441      CONTINUE
8442      CONTINUE
          IF ((BINSOK.NE.0.0)) THEN
              WRITE(6,8450)
              WRITE(1,8450)
8450          FORMAT(///' *******WARNING******'/ T20,'SOME OF NORMALIZED
     * BIN PROBABILITIES SO SMALL BINS MAY BE MISSED'/)
          END IF
          DO 8461 K=1,1000
              AK= FLOAT(K)*GRIDSZ
              DO 8471 I=1,NENSRC
                  IF ((AK .LE. SRCCDF(I))) THEN
                      GO TO 8480
                  END IF
8471          CONTINUE
8472          CONTINUE
8480          IF ((I .NE. 1)) THEN
                  CDFINV(K,1) = ENSRCD(I-1)
              ELSE
                  CDFINV(K,1) = ENMIN
              END IF
              CDFINV(K,2) = ENSRCD(I)-CDFINV(K,1)
8461      CONTINUE
8462      CONTINUE
          IF ((IWATCH .NE. 0)) THEN
              WRITE(6,8490)SPEC_TITLE
8490          FORMAT(1x,80A1)
              WRITE(6,8500)
8500          FORMAT(/' ENSRCD,   SRCPDF,   SRCCDF:'//)
              WRITE(6,8510)(ENSRCD(IB),SRCPDF(IB),SRCCDF(IB),IB=1,NENSRC
     *        )
8510          FORMAT(3E17.7)
              WRITE(6,8520)
8520          FORMAT(//)
          END IF
      ELSE IF(( (enflag .EQ. 2) .OR. (enflag .EQ. 3) )) THEN
          IF ((isource.EQ.2 .OR. isource.EQ.8)) THEN
              OLDSRC=0
              WRITE(6,8530)
8530          FORMAT(' Input name of phase space file (A256)'/'  : ',$)
              READ(5,101,ERR=8540) FILNAM
              WRITE(6,8550)FILNAM
              WRITE(1,8550)FILNAM
8550          FORMAT(/' Particles will be read from file: ',/A)
              call replace_env(FILNAM)
              i_iaea_in=0
              ilen=lnblnk1(FILNAM)
              IF ((FILNAM(ilen-8:ilen).EQ.'.IAEAphsp')) THEN
                  i_iaea_in=1
                  FILNAM=FILNAM(:ilen-9)
              END IF
              IF ((i_iaea_in.EQ.1)) THEN
                  i_unit_in=44
                  call iaea_new_source(i_unit_in,FILNAM,1,iaea_result)
                  IF ((iaea_result.LT.0)) THEN
                      WRITE(i_log,*)' Error opening IAEA phase space sou
     *rce.'
                  END IF
                  call iaea_get_max_particles(i_unit_in,-1,iaea_dummy_lo
     *            ng)
                  nshist=iaea_dummy_long
                  call iaea_get_max_particles(i_unit_in,1,iaea_dummy_lon
     *            g)
                  nphist=iaea_dummy_long
                  call iaea_get_total_original_particles(i_unit_in,iaea_
     *            dummy_long)
                  nincsrc=iaea_dummy_long
                  call iaea_get_maximum_energy(i_unit_in,EKMAX_PHSP_SHOR
     *            T)
                  ein=EKMAX_PHSP_SHORT
                  call iaea_get_constant_variable(i_unit_in,2,Z_PHSP_SHO
     *            RT,iaea_result)
                  IF ((iaea_result.EQ.-3)) THEN
                      write(i_log,*) ' Z positions of each particle will
     * be read from phase space data.'
                      Z_SOURCE=999.
                      izscore=1
                  ELSE IF((iaea_result.LT.0)) THEN
                      write(i_log,*)' Error reading Z position where IAE
     *A phsp was scored.'
                      izscore=0
                  ELSE
                      Z_SOURCE=Z_PHSP_SHORT
                      izscore=0
                  END IF
                  call iaea_get_extra_numbers(i_unit_in,iaea_n_extra_flo
     *            ats,iaea_n_extra_ints)
                  IF ((iaea_n_extra_floats .EQ. -1 .OR. iaea_n_extra_int
     *            s .EQ. -1)) THEN
                      write(i_log,*)' Error reading number of extra vari
     *ables stored in IAEA phsp'
                  END IF
                  call iaea_get_type_extra_variables(i_unit_in,iaea_resu
     *            lt,iaea_extra_int_types, iaea_extra_float_types)
                  IF ((iaea_result.EQ.-1)) THEN
                      write(i_log,*)' Error getting types of extra varia
     *bles stored in IAEA phsp'
                  END IF
                  DO 8561 I_PHSP=1,iaea_n_extra_ints
                      IF ((iaea_extra_int_types(I_PHSP).EQ.2)) THEN
                          iaea_i_latch=I_PHSP
                          GO TO8562
                      END IF
8561              CONTINUE
8562              CONTINUE
                  IF ((iaea_i_latch.EQ.-99)) THEN
                      write(i_log,*)' Warning: IAEA format phsp file doe
     *s not store LATCH'
                  END IF
                  DO 8571 I_PHSP=1,iaea_n_extra_floats
                      IF ((iaea_extra_float_types(I_PHSP).EQ.3)) THEN
                          iaea_i_zlast=I_PHSP
                          GO TO8572
                      END IF
8571              CONTINUE
8572              CONTINUE
                  IF ((iaea_i_zlast.EQ.-99)) THEN
                      ismode=0
                  ELSE
                      ismode=1
                  END IF
                  iaea_i_muidx=MAX(1,iaea_i_zlast+1)
                  IF ((iaea_i_muidx.GT.iaea_n_extra_floats .OR. iaea_ext
     *            ra_float_types(iaea_i_muidx).NE.0)) THEN
                      iaea_i_muidx=-99
                      i_mu_phsp=0
                  ELSE
                      i_mu_phsp=1
                  END IF
                  WRITE(6,8580)nshist,nphist,ein,NINCSRC
8580              FORMAT(T10,' IAEA format Phase space source with:'/ T5
     *,'                    Total number of particles =',I13/ T5,'      
     *                      Number of photons =',I13/ T5,'              
     *Maximum particle kinetic energy =',F13.3,' MeV'/ T5,' # of particl
     *es incident from original source =',F13.3/)
                  IF ((izscore.EQ.0)) THEN
                      WRITE(6,8590)Z_SOURCE
8590                  FORMAT(T5,'                        Z where sources
     *cored =',F13.3,' cm'/)
                  END IF
                  call iaea_check_file_size_byte_order(i_unit_in,iaea_re
     *            sult)
                  IF ((iaea_result.EQ.-3)) THEN
                      WRITE(i_log,*)' ERROR: Size of phase space file do
     *es not match'
                      WRITE(i_log,*)' the value of checksum in the heade
     *r.  Something may be'
                      WRITE(i_log,*)' wrong.  Check your file.'
                      call exit(1)
                  ELSE IF((iaea_result.EQ.-4)) THEN
                      WRITE(i_log,*)' ERROR: Byte order in the phase spa
     *ce file does not'
                      WRITE(i_log,*)' match the machine you are running
     *on.'
                      call exit(1)
                  ELSE IF((iaea_result.EQ.-5)) THEN
                      WRITE(i_log,*)' ERROR: Size of file does not match
     * the value of checksum'
                      WRITE(i_log,*)' in the header AND there is a byte
     *order mismatch between'
                      WRITE(i_log,*)' the file and the machine you are r
     *unning on.'
                      call exit(1)
                  ELSE IF((iaea_result.EQ.-1)) THEN
                      WRITE(i_log,*)' ERROR: Cannot open phase space hea
     *der.'
                      call exit(1)
                  ELSE IF((iaea_result.EQ.-2)) THEN
                      WRITE(i_log,*)' ERROR: Something is wrong with the
     * phase space file.'
                      call exit(1)
                  END IF
              ELSE
                  IF ((ismode.GT.0)) THEN
                      PHSP_RECL=4*8
                      OPEN(UNIT=44,FILE=FILNAM,FORM='UNFORMATTED',ACCESS
     *                ='DIRECT', RECL=PHSP_RECL,STATUS='OLD',IOSTAT=IERR
     *                _PHSP)
                      IF ((IERR_PHSP.NE.0)) THEN
                          WRITE(6,8600)
8600                      FORMAT(/' ***error opening file as MODE2 ****'
     */' *** THE FILE FORMAT MAY BE WRONG (I.E., NOT A MODE2 FILE) ***'/
     * /' *** WE NOW TRY TO OPEN IT AS A MODE3 FILE ***'//)
                          OPEN(UNIT=44,STATUS='OLD',FILE=FILNAM, FORM='U
     *NFORMATTED', IOSTAT=IERR_PHSP)
                          IF ((IERR_PHSP.NE.0)) THEN
                              WRITE(6,8610)
8610                          FORMAT(//' *** PHASE SPACE FILE CANNOT BEF
     *OUND. ***')
                              STOP
                          END IF
                          READ(44,REC=1,IOSTAT=IERR_PHSP)MODE,NUM_PHSP_T
     *                    OT,PHOT_PHSP_TOT, EKMAX_PHSP_SHORT,EKMINE_PHSP
     *                    _SHORT,NINC_PHSP_SHORT
                          nshist=NUM_PHSP_TOT
                          nphist=PHOT_PHSP_TOT
                          ein=EKMAX_PHSP_SHORT
                          temp(2)=EKMINE_PHSP_SHORT
                          NINCSRC=NINC_PHSP_SHORT
                          IF ((IERR_PHSP.NE.0)) THEN
                              WRITE(6,8620)
8620                          FORMAT(//' ***ERROR READING HEADER OF PHAS
     *E SPACE FILE*** '//)
                              STOP
                          END IF
                          IF ((MODE .NE. 'MODE3')) THEN
                              WRITE(6,8630)
8630                          FORMAT(//' That file does not start with M
     *ODE3,', ' as all old compressed files (with ZLAST) must'/ '  Check
     * it out and try again!'///)
                              IERR_PHSP=1
                              STOP
                          ELSE
                              WRITE(6,8640)
8640                          FORMAT(//' This is a MODE3 file! '/ ' Plea
     *se convert it into a MODE2 file using [readphsp] ', ' and try agai
     *n!'///)
                              IERR_PHSP=1
                              STOP
                          END IF
                      END IF
                      READ(44,REC=1,IOSTAT=IERR_PHSP)MODE,NUM_PHSP_TOT,P
     *                HOT_PHSP_TOT, EKMAX_PHSP_SHORT,EKMINE_PHSP_SHORT,N
     *                INC_PHSP_SHORT
                      nshist=NUM_PHSP_TOT
                      nphist=PHOT_PHSP_TOT
                      ein=EKMAX_PHSP_SHORT
                      temp(2)=EKMINE_PHSP_SHORT
                      NINCSRC=NINC_PHSP_SHORT
                      IF ((IERR_PHSP.NE.0)) THEN
                          WRITE(6,8650)
8650                      FORMAT(//' ***ERROR READING HEADER OF PHASE SP
     *ACE FILE*** '//)
                          STOP
                      END IF
                      IF ((MODE .NE. 'MODE2')) THEN
                          WRITE(6,8660)
8660                      FORMAT(//' That file does not start with MODE2
     *,', ' as standard compressed files with ZLAST must'/ '  Check it o
     *ut and try again!'///)
                          IERR_PHSP=1
                          STOP
                      END IF
                  ELSE IF((ismode.EQ.0)) THEN
                      PHSP_RECL=4*7
                      OPEN(UNIT=44,FILE=FILNAM,FORM='UNFORMATTED',ACCESS
     *                ='DIRECT', RECL=PHSP_RECL,STATUS='OLD',IOSTAT=IERR
     *                _PHSP)
                      IF ((IERR_PHSP.NE.0)) THEN
                          WRITE(6,8670)
8670                      FORMAT(/' ***ERROR opening file as MODE0****'/
     *' *** THE FILE FORMAT MAY BE WRONG (I.E., NOT A MODE0 FILE) ***'/ 
     */' *** WE NOW TRY TO OPEN IT AS A MODE1 FILE***'//)
                          OPEN(UNIT=44,STATUS='OLD',FILE=FILNAM, FORM='U
     *NFORMATTED', IOSTAT=IERR_PHSP)
                          IF ((IERR_PHSP.NE.0)) THEN
                              WRITE(6,8680)
8680                          FORMAT(//' *** PHASE SPACE FILE CANNOT BEF
     *OUND. ***')
                              STOP
                          END IF
                          READ(44,REC=1,IOSTAT=IERR_PHSP)MODE,NUM_PHSP_T
     *                    OT,PHOT_PHSP_TOT, EKMAX_PHSP_SHORT,EKMINE_PHSP
     *                    _SHORT,NINC_PHSP_SHORT
                          nshist=NUM_PHSP_TOT
                          nphist=PHOT_PHSP_TOT
                          ein=EKMAX_PHSP_SHORT
                          temp(2)=EKMINE_PHSP_SHORT
                          NINCSRC=NINC_PHSP_SHORT
                          IF ((IERR_PHSP.NE.0)) THEN
                              WRITE(6,8690)
8690                          FORMAT(//' ***ERROR READING HEADER OF PHAS
     *E SPACE FILE*** '//)
                              STOP
                          END IF
                          IF ((MODE .NE. 'MODE1')) THEN
                              WRITE(6,8700)
8700                          FORMAT(//' That file does not start with M
     *ODE1,', ' as all old compressed files must'/ '  Check it out and t
     *ry again!'///)
                              IERR_PHSP=1
                              STOP
                          ELSE
                              WRITE(6,8710)
8710                          FORMAT(//' This is a MODE1 file! '/ ' Plea
     *se convert it into a MODE0 file using [readphsp] ', 'and try again
     *!'///)
                              IERR_PHSP=1
                              STOP
                          END IF
                      END IF
                      READ(44,REC=1,IOSTAT=IERR_PHSP)MODE,NUM_PHSP_TOT,P
     *                HOT_PHSP_TOT, EKMAX_PHSP_SHORT,EKMINE_PHSP_SHORT,N
     *                INC_PHSP_SHORT
                      nshist=NUM_PHSP_TOT
                      nphist=PHOT_PHSP_TOT
                      ein=EKMAX_PHSP_SHORT
                      temp(2)=EKMINE_PHSP_SHORT
                      NINCSRC=NINC_PHSP_SHORT
                      IF ((IERR_PHSP.NE.0)) THEN
                          WRITE(6,8720)
8720                      FORMAT(//' ***ERROR READING HEADER OF PHASE SP
     *ACE FILE*** '//)
                          STOP
                      END IF
                      IF ((MODE .NE. 'MODE0')) THEN
                          WRITE(6,8730)
8730                      FORMAT(/' Does not start with MODE0 as files w
     *ithout ZLAST must'/ '  Try again!'//)
                          IERR_PHSP=1
                          STOP
                      END IF
                  ELSE IF((ismode.LT.0)) THEN
                      WRITE(6,8740)
8740                  FORMAT(/' First, try to open it as a MODE0 file')
                      PHSP_RECL=4*7
                      OPEN(UNIT=44,FILE=FILNAM,FORM='UNFORMATTED',ACCESS
     *                ='DIRECT', RECL=PHSP_RECL,STATUS='OLD',IOSTAT=IERR
     *                _PHSP)
                      IF ((IERR_PHSP.NE.0)) THEN
                          WRITE(6,8750)
8750                      FORMAT(/' Now try to open it as a MODE2 file')
                          ismode=1
                          PHSP_RECL=4*8
                          OPEN(UNIT=44,FILE=FILNAM,FORM='UNFORMATTED',AC
     *                    CESS='DIRECT', RECL=PHSP_RECL,STATUS='OLD',IOS
     *                    TAT=IERR_PHSP)
                          IF ((IERR_PHSP.NE.0)) THEN
                              WRITE(6,8760)
8760                          FORMAT(//' *** PHASE SPACE FILE CANNOT BEF
     *OUND. ***')
                          ELSE
                              READ(44,REC=1,IOSTAT=IERR_PHSP)MODE,NUM_PH
     *                        SP_TOT,PHOT_PHSP_TOT, EKMAX_PHSP_SHORT,EKM
     *                        INE_PHSP_SHORT,NINC_PHSP_SHORT
                              nshist=NUM_PHSP_TOT
                              nphist=PHOT_PHSP_TOT
                              ein=EKMAX_PHSP_SHORT
                              temp(2)=EKMINE_PHSP_SHORT
                              NINCSRC=NINC_PHSP_SHORT
                              IF ((IERR_PHSP.NE.0)) THEN
                                  WRITE(6,8770)
8770                              FORMAT(//' ***ERROR READING HEADER OFP
     *HASE SPACE FILE*** '//)
                                  STOP
                              END IF
                              IF ((MODE.NE.'MODE2')) THEN
                                  WRITE(6,8780)
8780                              FORMAT(//' That file does not start wi
     *th MODE2,', ' as standard compressed files with ZLAST must'/ '  Ch
     *eck it out and try again!'///)
                                  CLOSE(44)
                                  STOP
                              END IF
                          END IF
                      ELSE
                          READ(44,REC=1,IOSTAT=IERR_PHSP)MODE,NUM_PHSP_T
     *                    OT,PHOT_PHSP_TOT, EKMAX_PHSP_SHORT,EKMINE_PHSP
     *                    _SHORT,NINC_PHSP_SHORT
                          nshist=NUM_PHSP_TOT
                          nphist=PHOT_PHSP_TOT
                          ein=EKMAX_PHSP_SHORT
                          temp(2)=EKMINE_PHSP_SHORT
                          NINCSRC=NINC_PHSP_SHORT
                          IF ((IERR_PHSP.NE.0)) THEN
                              WRITE(6,8790)
8790                          FORMAT(//' ***ERROR READING HEADER OF PHAS
     *E SPACE FILE*** '//)
                              STOP
                          END IF
                          ismode=0
                          IF ((MODE.NE.'MODE0')) THEN
                              WRITE(6,8800)
8800                          FORMAT(/' The file does not start with MOD
     *E0 as it supposed to')
                              CLOSE(44)
                              WRITE(6,8810)
8810                          FORMAT(/' Now try to open it as a MODE2 fi
     *le')
                              ismode=1
                              PHSP_RECL=4*8
                              OPEN(UNIT=44,FILE=FILNAM,FORM='UNFORMATTED
     *',ACCESS='DIRECT', RECL=PHSP_RECL,STATUS='OLD',IOSTAT=IERR_PHSP)
                              IF ((IERR_PHSP.NE.0)) THEN
                                  WRITE(6,8820)
8820                              FORMAT(//' *** PHASE SPACE FILE CANNOT
     * BE OPENED. ***')
                              ELSE
                                  READ(44,REC=1,IOSTAT=IERR_PHSP)MODE,NU
     *                            M_PHSP_TOT,PHOT_PHSP_TOT, EKMAX_PHSP_S
     *                            HORT,EKMINE_PHSP_SHORT,NINC_PHSP_SHORT
                                  nshist=NUM_PHSP_TOT
                                  nphist=PHOT_PHSP_TOT
                                  ein=EKMAX_PHSP_SHORT
                                  temp(2)=EKMINE_PHSP_SHORT
                                  NINCSRC=NINC_PHSP_SHORT
                                  IF ((IERR_PHSP.NE.0)) THEN
                                      WRITE(6,8830)
8830                                  FORMAT(//' ***ERROR READING HEADER
     * OF PHASE SPACE FILE*** '//)
                                      STOP
                                  END IF
                                  IF ((MODE.NE.'MODE2')) THEN
                                      WRITE(6,8840)
8840                                  FORMAT(//' That file does not star
     *t with MODE2,', ' as standard compressed files with ZLAST must'/ '
     *  Check it out and try again!'///)
                                      CLOSE(44)
                                      STOP
                                  END IF
                              END IF
                          END IF
                      END IF
                  END IF
                  IF ((NINCSRC.LT.2.)) THEN
                      WRITE(6,8850)
                      WRITE(1,8850)
8850                  FORMAT(//' ******WARNING*****'/ ' PHASE SPACE SOUR
     *CE WAS GENERATED USING AN OLDER'/ ' VERSION OF BEAM IN WHICH # OFP
     *ARTICLES INCIDENT FROM'/ ' ORIGINAL SOURCE WAS NOT STORED.  THISNU
     *MBER WILL'/ ' BE SET EQUAL TO THE NUMBER OF PARTICLES IN THE PHASE
     *'/ ' SPACE SOURCE, AND DOSE WILL BE NORMALIZED'/ ' WITH RESPECTTO 
     *THE # OF HISTORIES RUN...NOT'/ ' THE # OF INCIDENT PARTICLES FROM 
     *THE ORIGINAL SOURCE'//)
                      NINCSRC=nshist
                      OLDSRC=1
                  END IF
                  WRITE(6,8860)nshist,nphist,ein,temp(2),NINCSRC
                  WRITE(1,8860)nshist,nphist,ein,temp(2),NINCSRC
8860              FORMAT(/' Total number of particles in file      :',I1
     *3/ ' Total number of photons                :',I13/ 'The rest are 
     *electrons/positrons.'/ ' '/ ' Maximum kinetic energyof the particl
     *es:     ',F13.3,' MeV'/ ' Minimum kinetic energy ofthe electrons: 
     *    ',F13.3,' MeV'/ ' # of particles incident fromoriginal source:
     *',F13.1)
                  nhistm=0
                  IF ((ismode.NE.0)) THEN
                      READ(44,REC=2,IOSTAT=IERR_PHSP) latchm,ESHORT,X_PH
     *                SP_SHORT,Y_PHSP_SHORT, U_PHSP_SHORT,V_PHSP_SHORT,W
     *                T_PHSP_SHORT,ZLAST_PHSP_SHORT
                  ELSE
                      READ(44,REC=2,IOSTAT=IERR_PHSP) latchm,ESHORT,X_PH
     *                SP_SHORT,Y_PHSP_SHORT, U_PHSP_SHORT,V_PHSP_SHORT,W
     *                T_PHSP_SHORT
                  END IF
                  IF ((2.EQ.76695869)) THEN
                      write(*,*)' x,y,u,v,wt,eshort,latch', X_PHSP_SHORT
     *                ,Y_PHSP_SHORT,U_PHSP_SHORT,V_PHSP_SHORT, WT_PHSP_S
     *                HORT,ESHORT,latchm
                  END IF
                  IF ((ESHORT.LT.0.0)) THEN
                      nhistm=nhistm+1
                      ESHORT=ABS(ESHORT)
                  END IF
                  einm=ESHORT
                  wtm=WT_PHSP_SHORT
                  xinm=X_PHSP_SHORT
                  yinm=Y_PHSP_SHORT
                  uinm=U_PHSP_SHORT
                  vinm=V_PHSP_SHORT
                  IF((ismode.NE.0))zlastm=ZLAST_PHSP_SHORT
                  IF ((nhistm.NE.1)) THEN
                      dose_stat=1
                      WRITE(6,8870)
8870                  FORMAT(//' ***WARNING***'/ ' Cannot read no. of pr
     *imary (non-phsp) histories from ph-sp source.'/ ' Dose and fluence
     * will be analyzed assuming each particle read from'/ ' the ph-sp f
     *ile is an independent history.  May result in an'/ ' underestimate
     * of uncertainties.'//)
                  END IF
              END IF
          ELSE IF((isource .EQ.9 .OR. isource.EQ.10 )) THEN
              WRITE(6,8880)
8880          FORMAT(' Input name of beam code (BEAM_accelname), input f
     *ile (no ext.), '/ ' pegs data (no ext.) (A256)'/'  : ',$)
              READ(5,'(A)',ERR=8890) FILNAM
              WRITE(6,8900)FILNAM(:lnblnk1(FILNAM))
8900          FORMAT(A)
              the_beam_code=FILNAM(:INDEX(FILNAM,',')-1)
              FILNAM=FILNAM(INDEX(FILNAM,',')+1:)
8911          IF(INDEX(the_beam_code,' ').NE.1)GO TO 8912
                  ilen = lnblnk1(the_beam_code) - 1
                  IF ((ilen.GE.2)) THEN
                      the_beam_code=the_beam_code(2:)
                  ELSE
                      GO TO8912
                  END IF
              GO TO 8911
8912          CONTINUE
              the_beam_code=the_beam_code(:lnblnk1(the_beam_code))
              the_input_file=FILNAM(:INDEX(FILNAM,',')-1)
              FILNAM=FILNAM(INDEX(FILNAM,',')+1:)
8921          IF(INDEX(the_input_file,' ').NE.1)GO TO 8922
                  ilen = lnblnk1(the_input_file) - 1
                  IF ((ilen.GE.2)) THEN
                      the_input_file=the_input_file(2:)
                  ELSE
                      GO TO8922
                  END IF
              GO TO 8921
8922          CONTINUE
              the_input_file=the_input_file(:lnblnk1(the_input_file))
              the_pegs_file=FILNAM(:lnblnk1(FILNAM))
8931          IF(INDEX(the_pegs_file,' ').NE.1)GO TO 8932
                  ilen = lnblnk1(the_pegs_file) - 1
                  IF ((ilen.GE.2)) THEN
                      the_pegs_file=the_pegs_file(2:)
                  ELSE
                      the_pegs_file='pegsless'
                      GO TO8932
                  END IF
              GO TO 8931
8932          CONTINUE
              WRITE(6,8940)the_beam_code(:lnblnk1(the_beam_code)),the_in
     *        put_file(:lnblnk1(the_input_file)), the_pegs_file(:lnblnk1
     *        (the_pegs_file))
8940          FORMAT(/' BEAM simulation name: ',A/ '           input fil
     *e: ',A/ '   pegs data for BEAM: ',A/)
          ELSE IF((isource .EQ. 20)) THEN
              WRITE(6,8950)
8950          FORMAT(' Name of BEAM/MLC code (e.g. particelDmlc)--leaveb
     *lank if no geometry, '/ ' phase space file above shared library,'/
     * ' input file for BEAM/MLC code (A256), '/'  : ',$)
              READ(5,'(A)',ERR=8960) FILNAM
              WRITE(6,8970)FILNAM(:lnblnk1(FILNAM))
8970          FORMAT(A)
              the_shared_lib=FILNAM(:INDEX(FILNAM,',')-1)
              FILNAM=FILNAM(INDEX(FILNAM,',')+1:)
8981          IF(INDEX(the_shared_lib,' ').NE.1)GO TO 8982
                  ilen = lnblnk1(the_shared_lib) - 1
                  IF ((ilen.GE.2)) THEN
                      the_shared_lib=the_shared_lib(2:)
                  ELSE
                      the_shared_lib='0'
                      GO TO8982
                  END IF
              GO TO 8981
8982          CONTINUE
              the_shared_lib=the_shared_lib(:lnblnk1(the_shared_lib))
              the_phsp_file=FILNAM(:INDEX(FILNAM,',')-1)
              FILNAM=FILNAM(INDEX(FILNAM,',')+1:)
8991          IF(INDEX(the_phsp_file,' ').NE.1)GO TO 8992
                  ilen = lnblnk1(the_phsp_file) - 1
                  IF ((ilen .GE.2)) THEN
                      the_phsp_file=the_phsp_file(2:)
                  ELSE
                      GO TO8992
                  END IF
              GO TO 8991
8992          CONTINUE
              the_phsp_file=the_phsp_file(:lnblnk1(the_phsp_file))
              WRITE(6,9000)the_phsp_file(:lnblnk1(the_phsp_file))
9000          FORMAT(/'phase space file: ',A/)
              WRITE(6,9010)the_phsp_file
              WRITE(1,9010)the_phsp_file
9010          FORMAT(/' Particles will be read from file: ',/A)
              call replace_env(the_phsp_file)
              i_iaea_in=0
              dosxyz2beam_izscore=0
              ilen=lnblnk1(the_phsp_file)
              IF ((the_phsp_file(ilen-8:ilen).EQ.'.IAEAphsp')) THEN
                  i_iaea_in=1
                  the_phsp_file=the_phsp_file(:ilen-9)
              END IF
              IF ((i_iaea_in.EQ.1)) THEN
                  i_unit_in=44
                  call iaea_new_source(i_unit_in,the_phsp_file,1,iaea_re
     *            sult)
                  IF ((iaea_result.LT.0)) THEN
                      WRITE(i_log,*)' Error opening IAEA phase space sou
     *rce.'
                  END IF
                  call iaea_get_max_particles(i_unit_in,-1,iaea_dummy_lo
     *            ng)
                  nshist=iaea_dummy_long
                  call iaea_get_max_particles(i_unit_in,1,iaea_dummy_lon
     *            g)
                  nphist=iaea_dummy_long
                  call iaea_get_total_original_particles(i_unit_in,iaea_
     *            dummy_long)
                  NINCSRC=iaea_dummy_long
                  call iaea_get_maximum_energy(i_unit_in,EKMAX_PHSP_SHOR
     *            T)
                  ein=EKMAX_PHSP_SHORT
                  call iaea_get_constant_variable(i_unit_in,2,Z_PHSP_SHO
     *            RT,iaea_result)
                  IF ((iaea_result.EQ.-3)) THEN
                      write(i_log,*) ' Z positions of each particle will
     * be read from phase space data.'
                      Z_SOURCE=999.
                      izscore=1
                  ELSE IF((iaea_result.LT.0)) THEN
                      write(i_log,*)' Error reading Z position where IAE
     *A phsp was scored.'
                      izscore=0
                  ELSE
                      Z_SOURCE=Z_PHSP_SHORT
                      izscore=0
                  END IF
                  call iaea_get_extra_numbers(i_unit_in,iaea_n_extra_flo
     *            ats,iaea_n_extra_ints)
                  IF ((iaea_n_extra_floats .EQ. -1 .OR. iaea_n_extra_int
     *            s .EQ. -1)) THEN
                      write(i_log,*)' Error reading number of extra vari
     *ables stored in IAEA phsp'
                  END IF
                  call iaea_get_type_extra_variables(i_unit_in,iaea_resu
     *            lt,iaea_extra_int_types, iaea_extra_float_types)
                  IF ((iaea_result.EQ.-1)) THEN
                      write(i_log,*)' Error getting types of extra varia
     *bles stored in IAEA phsp'
                  END IF
                  DO 9021 I_PHSP=1,iaea_n_extra_ints
                      IF ((iaea_extra_int_types(I_PHSP).EQ.2)) THEN
                          iaea_i_latch=I_PHSP
                          GO TO9022
                      END IF
9021              CONTINUE
9022              CONTINUE
                  IF ((iaea_i_latch.EQ.-99)) THEN
                      write(i_log,*)' Warning: IAEA format phsp file doe
     *s not store LATCH'
                  END IF
                  DO 9031 I_PHSP=1,iaea_n_extra_floats
                      IF ((iaea_extra_float_types(I_PHSP).EQ.3)) THEN
                          iaea_i_zlast=I_PHSP
                          GO TO9032
                      END IF
9031              CONTINUE
9032              CONTINUE
                  IF ((iaea_i_zlast.EQ.-99)) THEN
                      ismode=0
                  ELSE
                      ismode=1
                  END IF
                  iaea_i_muidx=MAX(1,iaea_i_zlast+1)
                  IF ((iaea_i_muidx.GT.iaea_n_extra_floats .OR. iaea_ext
     *            ra_float_types(iaea_i_muidx).NE.0)) THEN
                      iaea_i_muidx=-99
                      i_mu_phsp=0
                  ELSE
                      i_mu_phsp=1
                  END IF
                  WRITE(6,9040)nshist,nphist,ein,NINCSRC
9040              FORMAT(T10,' IAEA format Phase space source with:'/ T5
     *,'                    Total number of particles =',I13/ T5,'      
     *                      Number of photons =',I13/ T5,'              
     *Maximum particle kinetic energy =',F13.3,' MeV'/ T5,' # of particl
     *es incident from original source =',F13.3/)
                  IF ((izscore.EQ.0)) THEN
                      WRITE(6,9050)Z_SOURCE
9050                  FORMAT(T5,'                        Z where sources
     *cored =',F13.3,' cm'/)
                  END IF
                  IF ((i_mu_phsp.EQ.1)) THEN
                      WRITE(6,9060)
9060                  FORMAT(T5,' Fractional MU index stored in phase sp
     *ace data.'/ T5,' This will be used to set the MU index in the DOSX
     *YZ'/ T5,' simulation.'/)
                  END IF
                  call iaea_check_file_size_byte_order(i_unit_in,iaea_re
     *            sult)
                  IF ((iaea_result.EQ.-3)) THEN
                      WRITE(i_log,*)' ERROR: Size of phase space file do
     *es not match'
                      WRITE(i_log,*)' the value of checksum in the heade
     *r.  Something may be'
                      WRITE(i_log,*)' wrong.  Check your file.'
                      call exit(1)
                  ELSE IF((iaea_result.EQ.-4)) THEN
                      WRITE(i_log,*)' ERROR: Byte order in the phase spa
     *ce file does not'
                      WRITE(i_log,*)' match the machine you are running
     *on.'
                      call exit(1)
                  ELSE IF((iaea_result.EQ.-5)) THEN
                      WRITE(i_log,*)' ERROR: Size of file does not match
     * the value of checksum'
                      WRITE(i_log,*)' in the header AND there is a byte
     *order mismatch between'
                      WRITE(i_log,*)' the file and the machine you are r
     *unning on.'
                      call exit(1)
                  ELSE IF((iaea_result.EQ.-1)) THEN
                      WRITE(i_log,*)' ERROR: Cannot open phase space hea
     *der.'
                      call exit(1)
                  ELSE IF((iaea_result.EQ.-2)) THEN
                      WRITE(i_log,*)' ERROR: Something is wrong with the
     * phase space file.'
                      call exit(1)
                  END IF
                  dosxyz2beam_izscore=izscore
              ELSE
                  IF ((ismode.GT.0)) THEN
                      PHSP_RECL=4*8
                      OPEN(UNIT=44,FILE=the_phsp_file,FORM='UNFORMATTED'
     *                ,ACCESS='DIRECT', RECL=PHSP_RECL,STATUS='OLD',IOST
     *                AT=IERR_PHSP)
                      IF ((IERR_PHSP.NE.0)) THEN
                          WRITE(6,9070)
9070                      FORMAT(/' ***error opening file as MODE2 ****'
     */' *** THE FILE FORMAT MAY BE WRONG (I.E., NOT A MODE2 FILE) ***'/
     * /' *** WE NOW TRY TO OPEN IT AS A MODE3 FILE ***'//)
                          OPEN(UNIT=44,STATUS='OLD',FILE=the_phsp_file,
     *                    FORM='UNFORMATTED', IOSTAT=IERR_PHSP)
                          IF ((IERR_PHSP.NE.0)) THEN
                              WRITE(6,9080)
9080                          FORMAT(//' *** PHASE SPACE FILE CANNOT BEF
     *OUND. ***')
                              STOP
                          END IF
                          READ(44,REC=1,IOSTAT=IERR_PHSP)MODE,NUM_PHSP_T
     *                    OT,PHOT_PHSP_TOT, EKMAX_PHSP_SHORT,EKMINE_PHSP
     *                    _SHORT,NINC_PHSP_SHORT
                          nshist=NUM_PHSP_TOT
                          nphist=PHOT_PHSP_TOT
                          ein=EKMAX_PHSP_SHORT
                          temp(2)=EKMINE_PHSP_SHORT
                          NINCSRC=NINC_PHSP_SHORT
                          IF ((IERR_PHSP.NE.0)) THEN
                              WRITE(6,9090)
9090                          FORMAT(//' ***ERROR READING HEADER OF PHAS
     *E SPACE FILE*** '//)
                              STOP
                          END IF
                          IF ((MODE .NE. 'MODE3')) THEN
                              WRITE(6,9100)
9100                          FORMAT(//' That file does not start with M
     *ODE3,', ' as all old compressed files (with ZLAST) must'/ '  Check
     * it out and try again!'///)
                              IERR_PHSP=1
                              STOP
                          ELSE
                              WRITE(6,9110)
9110                          FORMAT(//' This is a MODE3 file! '/ ' Plea
     *se convert it into a MODE2 file using [readphsp] ', ' and try agai
     *n!'///)
                              IERR_PHSP=1
                              STOP
                          END IF
                      END IF
                      READ(44,REC=1,IOSTAT=IERR_PHSP)MODE,NUM_PHSP_TOT,P
     *                HOT_PHSP_TOT, EKMAX_PHSP_SHORT,EKMINE_PHSP_SHORT,N
     *                INC_PHSP_SHORT
                      nshist=NUM_PHSP_TOT
                      nphist=PHOT_PHSP_TOT
                      ein=EKMAX_PHSP_SHORT
                      temp(2)=EKMINE_PHSP_SHORT
                      NINCSRC=NINC_PHSP_SHORT
                      IF ((IERR_PHSP.NE.0)) THEN
                          WRITE(6,9120)
9120                      FORMAT(//' ***ERROR READING HEADER OF PHASE SP
     *ACE FILE*** '//)
                          STOP
                      END IF
                      IF ((MODE .NE. 'MODE2')) THEN
                          WRITE(6,9130)
9130                      FORMAT(//' That file does not start with MODE2
     *,', ' as standard compressed files with ZLAST must'/ '  Check it o
     *ut and try again!'///)
                          IERR_PHSP=1
                          STOP
                      END IF
                  ELSE IF((ismode.EQ.0)) THEN
                      PHSP_RECL=4*7
                      OPEN(UNIT=44,FILE=the_phsp_file,FORM='UNFORMATTED'
     *                ,ACCESS='DIRECT', RECL=PHSP_RECL,STATUS='OLD',IOST
     *                AT=IERR_PHSP)
                      IF ((IERR_PHSP.NE.0)) THEN
                          WRITE(6,9140)
9140                      FORMAT(/' ***ERROR opening file as MODE0****'/
     *' *** THE FILE FORMAT MAY BE WRONG (I.E., NOT A MODE0 FILE) ***'/ 
     */' *** WE NOW TRY TO OPEN IT AS A MODE1 FILE***'//)
                          OPEN(UNIT=44,STATUS='OLD',FILE=the_phsp_file,
     *                    FORM='UNFORMATTED', IOSTAT=IERR_PHSP)
                          IF ((IERR_PHSP.NE.0)) THEN
                              WRITE(6,9150)
9150                          FORMAT(//' *** PHASE SPACE FILE CANNOT BEF
     *OUND. ***')
                              STOP
                          END IF
                          READ(44,REC=1,IOSTAT=IERR_PHSP)MODE,NUM_PHSP_T
     *                    OT,PHOT_PHSP_TOT, EKMAX_PHSP_SHORT,EKMINE_PHSP
     *                    _SHORT,NINC_PHSP_SHORT
                          nshist=NUM_PHSP_TOT
                          nphist=PHOT_PHSP_TOT
                          ein=EKMAX_PHSP_SHORT
                          temp(2)=EKMINE_PHSP_SHORT
                          NINCSRC=NINC_PHSP_SHORT
                          IF ((IERR_PHSP.NE.0)) THEN
                              WRITE(6,9160)
9160                          FORMAT(//' ***ERROR READING HEADER OF PHAS
     *E SPACE FILE*** '//)
                              STOP
                          END IF
                          IF ((MODE .NE. 'MODE1')) THEN
                              WRITE(6,9170)
9170                          FORMAT(//' That file does not start with M
     *ODE1,', ' as all old compressed files must'/ '  Check it out and t
     *ry again!'///)
                              IERR_PHSP=1
                              STOP
                          ELSE
                              WRITE(6,9180)
9180                          FORMAT(//' This is a MODE1 file! '/ ' Plea
     *se convert it into a MODE0 file using [readphsp] ', 'and try again
     *!'///)
                              IERR_PHSP=1
                              STOP
                          END IF
                      END IF
                      READ(44,REC=1,IOSTAT=IERR_PHSP)MODE,NUM_PHSP_TOT,P
     *                HOT_PHSP_TOT, EKMAX_PHSP_SHORT,EKMINE_PHSP_SHORT,N
     *                INC_PHSP_SHORT
                      nshist=NUM_PHSP_TOT
                      nphist=PHOT_PHSP_TOT
                      ein=EKMAX_PHSP_SHORT
                      temp(2)=EKMINE_PHSP_SHORT
                      NINCSRC=NINC_PHSP_SHORT
                      IF ((IERR_PHSP.NE.0)) THEN
                          WRITE(6,9190)
9190                      FORMAT(//' ***ERROR READING HEADER OF PHASE SP
     *ACE FILE*** '//)
                          STOP
                      END IF
                      IF ((MODE .NE. 'MODE0')) THEN
                          WRITE(6,9200)
9200                      FORMAT(/' Does not start with MODE0 as files w
     *ithout ZLAST must'/ '  Try again!'//)
                          IERR_PHSP=1
                          STOP
                      END IF
                  ELSE IF((ismode.LT.0)) THEN
                      WRITE(6,9210)
9210                  FORMAT(/' First, try to open it as a MODE0 file')
                      PHSP_RECL=4*7
                      OPEN(UNIT=44,FILE=the_phsp_file,FORM='UNFORMATTED'
     *                ,ACCESS='DIRECT', RECL=PHSP_RECL,STATUS='OLD',IOST
     *                AT=IERR_PHSP)
                      IF ((IERR_PHSP.NE.0)) THEN
                          WRITE(6,9220)
9220                      FORMAT(/' Now try to open it as a MODE2 file')
                          ismode=1
                          PHSP_RECL=4*8
                          OPEN(UNIT=44,FILE=the_phsp_file,FORM='UNFORMAT
     *TED',ACCESS='DIRECT', RECL=PHSP_RECL,STATUS='OLD',IOSTAT=IERR_PHSP
     *                    )
                          IF ((IERR_PHSP.NE.0)) THEN
                              WRITE(6,9230)
9230                          FORMAT(//' *** PHASE SPACE FILE CANNOT BEF
     *OUND. ***')
                          ELSE
                              READ(44,REC=1,IOSTAT=IERR_PHSP)MODE,NUM_PH
     *                        SP_TOT,PHOT_PHSP_TOT, EKMAX_PHSP_SHORT,EKM
     *                        INE_PHSP_SHORT,NINC_PHSP_SHORT
                              nshist=NUM_PHSP_TOT
                              nphist=PHOT_PHSP_TOT
                              ein=EKMAX_PHSP_SHORT
                              temp(2)=EKMINE_PHSP_SHORT
                              NINCSRC=NINC_PHSP_SHORT
                              IF ((IERR_PHSP.NE.0)) THEN
                                  WRITE(6,9240)
9240                              FORMAT(//' ***ERROR READING HEADER OFP
     *HASE SPACE FILE*** '//)
                                  STOP
                              END IF
                              IF ((MODE.NE.'MODE2')) THEN
                                  WRITE(6,9250)
9250                              FORMAT(//' That file does not start wi
     *th MODE2,', ' as standard compressed files with ZLAST must'/ '  Ch
     *eck it out and try again!'///)
                                  CLOSE(44)
                                  STOP
                              END IF
                          END IF
                      ELSE
                          READ(44,REC=1,IOSTAT=IERR_PHSP)MODE,NUM_PHSP_T
     *                    OT,PHOT_PHSP_TOT, EKMAX_PHSP_SHORT,EKMINE_PHSP
     *                    _SHORT,NINC_PHSP_SHORT
                          nshist=NUM_PHSP_TOT
                          nphist=PHOT_PHSP_TOT
                          ein=EKMAX_PHSP_SHORT
                          temp(2)=EKMINE_PHSP_SHORT
                          NINCSRC=NINC_PHSP_SHORT
                          IF ((IERR_PHSP.NE.0)) THEN
                              WRITE(6,9260)
9260                          FORMAT(//' ***ERROR READING HEADER OF PHAS
     *E SPACE FILE*** '//)
                              STOP
                          END IF
                          ismode=0
                          IF ((MODE.NE.'MODE0')) THEN
                              WRITE(6,9270)
9270                          FORMAT(/' The file does not start with MOD
     *E0 as it supposed to')
                              CLOSE(44)
                              WRITE(6,9280)
9280                          FORMAT(/' Now try to open it as a MODE2 fi
     *le')
                              ismode=1
                              PHSP_RECL=4*8
                              OPEN(UNIT=44,FILE=the_phsp_file,FORM='UNFO
     *RMATTED',ACCESS='DIRECT', RECL=PHSP_RECL,STATUS='OLD',IOSTAT=IERR_
     *                        PHSP)
                              IF ((IERR_PHSP.NE.0)) THEN
                                  WRITE(6,9290)
9290                              FORMAT(//' *** PHASE SPACE FILE CANNOT
     * BE OPENED. ***')
                              ELSE
                                  READ(44,REC=1,IOSTAT=IERR_PHSP)MODE,NU
     *                            M_PHSP_TOT,PHOT_PHSP_TOT, EKMAX_PHSP_S
     *                            HORT,EKMINE_PHSP_SHORT,NINC_PHSP_SHORT
                                  nshist=NUM_PHSP_TOT
                                  nphist=PHOT_PHSP_TOT
                                  ein=EKMAX_PHSP_SHORT
                                  temp(2)=EKMINE_PHSP_SHORT
                                  NINCSRC=NINC_PHSP_SHORT
                                  IF ((IERR_PHSP.NE.0)) THEN
                                      WRITE(6,9300)
9300                                  FORMAT(//' ***ERROR READING HEADER
     * OF PHASE SPACE FILE*** '//)
                                      STOP
                                  END IF
                                  IF ((MODE.NE.'MODE2')) THEN
                                      WRITE(6,9310)
9310                                  FORMAT(//' That file does not star
     *t with MODE2,', ' as standard compressed files with ZLAST must'/ '
     *  Check it out and try again!'///)
                                      CLOSE(44)
                                      STOP
                                  END IF
                              END IF
                          END IF
                      END IF
                  END IF
                  IF ((NINCSRC.LT.2.)) THEN
                      WRITE(6,9320)
                      WRITE(1,9320)
9320                  FORMAT(//' ******WARNING*****'/ ' PHASE SPACE SOUR
     *CE WAS GENERATED USING AN OLDER'/ ' VERSION OF BEAM IN WHICH # OFP
     *ARTICLES INCIDENT FROM'/ ' ORIGINAL SOURCE WAS NOT STORED.  THISNU
     *MBER WILL'/ ' BE SET EQUAL TO THE NUMBER OF PARTICLES IN THE PHASE
     *'/ ' SPACE SOURCE, AND DOSE WILL BE NORMALIZED'/ ' WITH RESPECTTO 
     *THE # OF HISTORIES RUN...NOT'/ ' THE # OF INCIDENT PARTICLES FROM 
     *THE ORIGINAL SOURCE'//)
                      NINCSRC=nshist
                      OLDSRC=1
                  END IF
                  WRITE(6,9330)nshist,nphist,ein,temp(2),NINCSRC
                  WRITE(1,9330)nshist,nphist,ein,temp(2),NINCSRC
9330              FORMAT(/' Total number of particles in file      :',I1
     *3/ ' Total number of photons                :',I13/ 'The rest are 
     *electrons/positrons.'/ ' '/ ' Maximum kinetic energyof the particl
     *es:     ',F13.3,' MeV'/ ' Minimum kinetic energy ofthe electrons: 
     *    ',F13.3,' MeV'/ ' # of particles incident fromoriginal source:
     *',F13.1)
                  nhistm=0
                  IF ((ismode.NE.0)) THEN
                      READ(44,REC=2,IOSTAT=IERR_PHSP) latchm,ESHORT,X_PH
     *                SP_SHORT,Y_PHSP_SHORT, U_PHSP_SHORT,V_PHSP_SHORT,W
     *                T_PHSP_SHORT,ZLAST_PHSP_SHORT
                  ELSE
                      READ(44,REC=2,IOSTAT=IERR_PHSP) latchm,ESHORT,X_PH
     *                SP_SHORT,Y_PHSP_SHORT, U_PHSP_SHORT,V_PHSP_SHORT,W
     *                T_PHSP_SHORT
                  END IF
                  IF ((2.EQ.76695869)) THEN
                      write(*,*)' x,y,u,v,wt,eshort,latch', X_PHSP_SHORT
     *                ,Y_PHSP_SHORT,U_PHSP_SHORT,V_PHSP_SHORT, WT_PHSP_S
     *                HORT,ESHORT,latchm
                  END IF
                  IF ((ESHORT.LT.0.0)) THEN
                      nhistm=nhistm+1
                      ESHORT=ABS(ESHORT)
                  END IF
                  einm=ESHORT
                  wtm=WT_PHSP_SHORT
                  xinm=X_PHSP_SHORT
                  yinm=Y_PHSP_SHORT
                  uinm=U_PHSP_SHORT
                  vinm=V_PHSP_SHORT
                  IF((ismode.NE.0))zlastm=ZLAST_PHSP_SHORT
                  IF ((nhistm.NE.1)) THEN
                      dose_stat=1
                      WRITE(6,9340)
9340                  FORMAT(//' ***WARNING***'/ ' Cannot read no. of pr
     *imary (non-phsp) histories from ph-sp source.'/ ' Dose and fluence
     * will be analyzed assuming each particle read from'/ ' the ph-sp f
     *ile is an independent history.  May result in an'/ ' underestimate
     * of uncertainties.'//)
                  END IF
              END IF
              the_input_file=FILNAM(:lnblnk1(FILNAM))
9351          IF(INDEX(the_input_file,' ').NE.1)GO TO 9352
                  ilen = lnblnk1(the_input_file) - 1
                  IF ((ilen.GE.2)) THEN
                      the_input_file=the_input_file(2:)
                  ELSE
                      GO TO9352
                  END IF
              GO TO 9351
9352          CONTINUE
              the_input_file=the_input_file(:lnblnk1(the_input_file))
              IF ((the_shared_lib.EQ.'0')) THEN
                  SHLflag = 0
              ELSE IF((the_shared_lib.EQ.'particleDmlc')) THEN
                  MLCflag =1
                  SHLflag = 1
                  WRITE(6,9360)
                  WRITE(1,9360)
9360              FORMAT(/' Will use VCU simulation compiled as shared l
     *ibrary:'/)
                  WRITE(6,9370)the_input_file
                  WRITE(1,9370)the_input_file
9370              FORMAT(/' VCU input file: ',/A80)
              ELSE
                  SHLflag =1
                  MLCflag=0
                  IF ((is_pegsless)) THEN
                      the_pegs_file='pegsless'
                  ELSE
                      the_pegs_file= pegs_file
                  END IF
                  WRITE(6,9380)the_shared_lib
                  WRITE(1,9380)the_shared_lib
9380              FORMAT(/' BEAM library: ',/A80)
                  WRITE(6,9390)the_input_file
                  WRITE(1,9390)the_input_file
9390              FORMAT(' BEAM input file: ',/A80)
                  WRITE(6,9400)the_pegs_file
                  WRITE(1,9400)the_pegs_file
9400              FORMAT(' BEAM pegs data: ',/A80)
              END IF
          ELSE IF((isource.EQ.21)) THEN
              WRITE(6,9410)
9410          FORMAT(' Input name of beam code (BEAM_accelname), BEAM in
     *put file (no ext.), '/ ' BEAM pegs data (no ext.), name of MLC cod
     *e (e.g. particelDmlc), '/ ' MLC code input file (A256)'/'  : ',$)
              READ(5,'(A)',ERR=9420) FILNAM
              WRITE(6,9430)FILNAM(:lnblnk1(FILNAM))
9430          FORMAT(A)
              the_beam_code=FILNAM(:INDEX(FILNAM,',')-1)
              FILNAM=FILNAM(INDEX(FILNAM,',')+1:)
9441          IF(INDEX(the_beam_code,' ').NE.1)GO TO 9442
                  ilen = lnblnk1(the_beam_code) - 1
                  IF ((ilen.GE.2)) THEN
                      the_beam_code=the_beam_code(2:)
                  ELSE
                      GO TO9442
                  END IF
              GO TO 9441
9442          CONTINUE
              the_beam_code=the_beam_code(:lnblnk1(the_beam_code))
              the_input_file=FILNAM(:INDEX(FILNAM,',')-1)
              FILNAM=FILNAM(INDEX(FILNAM,',')+1:)
9451          IF(INDEX(the_input_file,' ').NE.1)GO TO 9452
                  ilen = lnblnk1(the_input_file) - 1
                  IF ((ilen.GE.2)) THEN
                      the_input_file=the_input_file(2:)
                  ELSE
                      GO TO9452
                  END IF
              GO TO 9451
9452          CONTINUE
              the_input_file=the_input_file(:lnblnk1(the_input_file))
              the_pegs_file=FILNAM(:INDEX(FILNAM,',')-1)
              FILNAM=FILNAM(INDEX(FILNAM,',')+1:)
9461          IF(INDEX(the_pegs_file,' ').NE.1)GO TO 9462
                  ilen = lnblnk1(the_pegs_file) - 1
                  IF ((ilen.GE.2)) THEN
                      the_pegs_file=the_pegs_file(2:)
                  ELSE
                      the_pegs_file='pegsless'
                      GO TO9462
                  END IF
              GO TO 9461
9462          CONTINUE
              the_pegs_file = the_pegs_file(:lnblnk1(the_pegs_file))
              the_vcu_code=FILNAM(:INDEX(FILNAM,',')-1)
              FILNAM=FILNAM(INDEX(FILNAM,',')+1:)
9471          IF(INDEX(the_vcu_code,' ').NE.1)GO TO 9472
                  ilen = lnblnk1(the_vcu_code) - 1
                  IF ((ilen.GE.2)) THEN
                      the_vcu_code=the_vcu_code(2:)
                  ELSE
                      the_vcu_code='0'
                      GO TO9472
                  END IF
              GO TO 9471
9472          CONTINUE
              the_vcu_code=the_vcu_code(:lnblnk1(the_vcu_code))
              IF ((the_vcu_code.EQ.'0')) THEN
                  MLCflag = 0
              ELSE
                  MLCflag = 1
              END IF
              the_vcu_input_file=FILNAM(:lnblnk1(FILNAM))
9481          IF(INDEX(the_vcu_input_file,' ').NE.1)GO TO 9482
                  ilen = lnblnk1(the_vcu_input_file) - 1
                  IF ((ilen.GE.2)) THEN
                      the_vcu_input_file=the_vcu_input_file(2:)
                  ELSE
                      GO TO9482
                  END IF
              GO TO 9481
9482          CONTINUE
              the_vcu_input_file=the_vcu_input_file(:lnblnk1(the_vcu_inp
     *        ut_file))
              WRITE(6,9490)the_beam_code(:lnblnk1(the_beam_code)),the_in
     *        put_file(:lnblnk1(the_input_file)), the_pegs_file(:lnblnk1
     *        (the_pegs_file)),the_vcu_code(:lnblnk1(the_vcu_code)), the
     *        _vcu_input_file(:lnblnk1(the_vcu_input_file))
9490          FORMAT(/' BEAM simulation name: ',A/ '           input fil
     *e: ',A/ '   pegs data for BEAM: ',A/ '  VCU simulation name: ',A/'
     *       vcu input file: ',A/)
          END IF
          IF (( enflag .EQ. 3)) THEN
              WRITE(6,9500)
              WRITE(1,9500)
9500          FORMAT(/' I_BIT_FILTER(0-incl/excl bits,1-excl bits,2-incl
     * regions,3-excl regions),'/ ' NBIT1(# bits/regions to incl [I_BIT_
     *FILTER=0 or 2] '/ '                      or excl [I_BIT_FILTER=1 o
     *r 3],'/ ' NBIT2(# bits to excl [I_BIT_FILTER=0 only])--all on onel
     *ine'/ ' :',$)
              READ(5,9510)I_BIT_FILTER,NBIT1,NBIT2
9510          FORMAT(3i5)
              WRITE(6,9520)I_BIT_FILTER,NBIT1,NBIT2
              WRITE(1,9520)I_BIT_FILTER,NBIT1,NBIT2
9520          FORMAT(3i5)
              IF ((I_BIT_FILTER.LT.0 .OR. I_BIT_FILTER .GT. 3)) THEN
                  WRITE(6,9530)
9530              FORMAT(//' ***ERROR: I_BIT_FILTER out of range.'//)
                  STOP
              END IF
              IF ((I_BIT_FILTER.NE.0 .AND. NBIT2 .NE. 0)) THEN
                  WRITE(6,9540)
                  WRITE(1,9540)
9540              FORMAT(//' ***WARNING: NBIT2 is not 0 and you are usin
     *g'/ ' I_BIT_FILTER=1, 2 or 3.  NBIT2 set to 0 here.'//)
                  NBIT2=0
              END IF
              IF ((NBIT1.LT.0)) THEN
                  WRITE(6,9550)
                  WRITE(1,9550)
9550              FORMAT(//' ***ERROR: NBIT1 < 0'//)
                  STOP
              END IF
              IF ((NBIT2.LT.0)) THEN
                  WRITE(6,9560)
                  WRITE(1,9560)
9560              FORMAT(//' ***ERROR: NBIT2 < 0'//)
                  STOP
              END IF
              IF ((I_BIT_FILTER .LT. 2 .AND. (NBIT1+NBIT2.LT.0.OR.NBIT1+
     *        NBIT2.GT.29))) THEN
                  WRITE(6,9570)
                  WRITE(1,9570)
9570              FORMAT(//' ***ERROR: '/ ' Total # of bits must be >= 0
     * and <= 29'//)
                  STOP
              ELSE IF((NBIT1.LT.0.OR.NBIT1.GT.24)) THEN
                  WRITE(6,9580)
                  WRITE(1,9580)
9580              FORMAT(//' ***ERROR: '/ ' Total # of regions must be >
     *= 0 and <= 23'//)
                  STOP
              END IF
              IF ((NBIT1 .NE. 0)) THEN
                  IF ((I_BIT_FILTER.EQ.0.OR.I_BIT_FILTER.EQ.2)) THEN
                      WRITE(6,9590)
                      WRITE(1,9590)
9590                  FORMAT(/' BIT(I)/IREGION_TO_BIT(I) (I=1,NBIT1) toi
     *nclude:'/' ',$)
                  END IF
                  IF ((I_BIT_FILTER.EQ.1.OR.I_BIT_FILTER.EQ.3)) THEN
                      WRITE(6,9600)
                      WRITE(1,9600)
9600                  FORMAT(/' BIT(I)/IREGION_TO_BIT(I) (I=1,Nbit1) toe
     *xclude:'/' ',$)
                  END IF
                  READ(5,9610)(LATBIT(i),i=1,NBIT1)
9610              FORMAT(30i5)
                  WRITE(6,9620)(LATBIT(i),i=1,NBIT1)
                  WRITE(1,9620)(LATBIT(i),i=1,NBIT1)
9620              FORMAT(30i5)
                  DO 9631 i=1,NBIT1
                      IF ((I_BIT_FILTER .LT. 2 .AND. (LATBIT(i).LT.0.OR.
     *                LATBIT(i).GT.28))) THEN
                          WRITE(6,9640)
9640                      FORMAT(//' ***ERROR:'/ ' BIT(I) must be >= 0 a
     *nd <= 28'//)
                          STOP
                      ELSE IF((LATBIT(I).LT.0.OR.LATBIT(I).GT.23)) THEN
                          WRITE(6,9650)
9650                      FORMAT(//' ***ERROR:'/ ' IREGION_TO_BIT(I) mus
     *t be >=0 and <= 23'//)
                          STOP
                      END IF
9631              CONTINUE
9632              CONTINUE
              END IF
              IF ((NBIT2 .NE. 0)) THEN
                  WRITE(6,9660)
                  WRITE(1,9660)
9660              FORMAT(/' BIT(I)/IREGION_TO_BIT(I) (I=NBIT1+1,NBIT1+NB
     *IT2) to exclude:'/' ',$)
                  READ(5,9670)(LATBIT(NBIT1+i),i=1,NBIT2)
9670              FORMAT(30i5)
                  WRITE(6,9680)(LATBIT(NBIT1+i),i=1,NBIT2)
                  WRITE(1,9680)(LATBIT(NBIT1+i),i=1,NBIT2)
9680              FORMAT(30i5)
                  DO 9691 i=1,NBIT2
                      IF ((LATBIT(NBIT1+i).LT.0 .OR. LATBIT(NBIT1+i).GT.
     *                28)) THEN
                          WRITE(6,9700)
9700                      FORMAT(//' ***ERROR:'/ ' BIT(I) must be  >= 0a
     *nd <= 28'//)
                          STOP
                      END IF
9691              CONTINUE
9692              CONTINUE
              END IF
          END IF
      ELSE IF((isource .EQ. 4)) THEN
          WRITE(6,9710)
9710      FORMAT(/ ' Beam characterization model not implemented, use so
     *urce 1 - 3!'//)
      ELSE
          WRITE(6,9720)
9720      FORMAT('In srcxyznrc:  error on input, ENFLAG inconsistent ')
          STOP
      END IF
      return
8290  CONTINUE
      WRITE(6,9730)
      WRITE(1,9730)
9730  FORMAT(//' *** error on reading spectrum file name ***')
      STOP
8540  CONTINUE
      WRITE(6,9740)
      WRITE(1,9740)
9740  FORMAT(//' *** error on reading file name ***')
      STOP
9750  CONTINUE
      WRITE(6,9760)
      WRITE(1,9760)
9760  FORMAT(//' *** Error on opening file ***'// ' *** Please check whe
     *ther this is a MODE0 file or '/ ' *** it is in the right directory
     *, and try again!'//)
      STOP
8890  CONTINUE
      WRITE(6,9770)
      WRITE(1,9770)
9770  FORMAT(//' *** error on reading accelerator, input file, pegs data
     ****')
      STOP
8960  CONTINUE
      WRITE(6,9780)
      WRITE(1,9780)
9780  FORMAT(//' *** error on reading VCU sim., input file names ***')
      STOP
9420  CONTINUE
      WRITE(6,9790)
      WRITE(1,9790)
9790  FORMAT(//' *** error on reading accelerator, input file, pegs data
     ****'// ' (MLC code, MLC input file if selected) '//)
      STOP
      end
      subroutine srcinit(weight)
      implicit none
      common/geom/ xbound(128+1),  ybound(128+1),  zbound(128+1),  xboun
     *d_min,  xbound_max,  ybound_min,  ybound_max,  zbound_min,  zbound
     *_max,  medsur,  dsurround(4),  IMAX,  JMAX,  KMAX,  ijmax,  irmax,
     *  howfarless
      real*4 xbound, ybound, zbound, xbound_min, xbound_max, ybound_min,
     * ybound_max, zbound_min, zbound_max,dsurround
      integer medsur,IMAX, JMAX, KMAX, ijmax,irmax
      logical howfarless
      COMMON/PHSPFILE/BEAM_SIZE,MODE_PHSP1,LATCH_OPT, NCASE_PHSP,LATBIT,
     *NBIT1,NBIT2,I_BIT_FILTER,NofREPEAT,ISMOOTH, OUTCNT,NRCYCL,IPARALLE
     *L,PARNUM,CYCLNUM
      real BEAM_SIZE
      INTEGER MODE_PHSP1,LATCH_OPT,NCASE_PHSP,LATBIT(20),NBIT1,NBIT2, I_
     *BIT_FILTER,NofREPEAT,ISMOOTH,OUTCNT,NRCYCL,IPARALLEL,PARNUM,CYCLNU
     *M
      common/source/ esrc,  nhist,  nnread,  nshist,  nphist,  nnphsp,
     *einsrc,  xsrcold,  ysrcold,  zsrcold,  usrcold,  vsrcold,  wsrcold
     *,  weightold, mu_phspold,  frMU_indx,  zinc,  xinl,  xinu,  yinl,
     * yinu,  zinl,  zinu,  thetax,  thetay,  thetaz,  uinc,  vinc,  win
     *c,  beamarea, xcol,  ycol,  xiso,  yiso,  ziso,  phicol,  theta(60
     *000),  phi(60000),  pang(60000),  angfixed(60000),  angmin(60000),
     *  angmax(60000),  pgang(60000),  xtemp(60000),  ytemp(60000),  zte
     *mp(60000),  phicoltemp(60000), thetatemp(60000),  phitemp(60000),
     * muIndex(60000),  r_11(60000), r_12(60000), r_13(60000), r_21(6000
     *0), r_22(60000), r_23(60000), r_31(60000), r_32(60000), r_33(60000
     *), dsource, dsourcetemp(60000), ein,  eksrcm,  esrc_sp,  SSD,  ein
     *srcold, NINCSRC,  r_dbs,  ssd_dbs,  z_dbs,  iqinold,  latchold,  e
     *nflag,  dflag,  ismode,  isource,     iqin,        iqphsp,
     *           iqinc,                          SHLflag,     calflag,
     *   MLCflag,     ixinl,       ixinu,       jyinl,       jyinu,
     *  kzinl,       kzinu,       klowx,       khix,        klowy,
     * khiy,        klowz,       khiz,        survival_ratio,        nsm
     *iss,      nsblocked,     nsrjct,      nsoutside,     nmissm,
     *IPRIMARY,                                            OLDSRC,
     * npassi,                     nang,         ivary(60000),     ngang
     *(60000),       nset,            more_in_cont,                 numa
     *ng,       dose_stat,      ndbsrjct,                        i_dbs,
     *         iphatsrc,         e_split,                           i_ia
     *ea_in,      i_mu_phsp,           izscore,             i_unit_in,
     *                k_field,                       nhist_last,
     *         the_beam_code,         the_input_file,      the_vcu_input
     *_file,                        the_pegs_file,           the_shared_
     *lib,                    the_vcu_code,               the_phsp_file
      real*8    esrc,muIndex
      integer*8 nhist, nnread,nshist,nphist,nnphsp
      real*8 einsrc, xsrcold, ysrcold,usrcold,vsrcold,wsrcold,weightold,
     *               frMU_indx,zsrcold,mu_phspold
      real*4    zinc, xinl, xinu, yinl, yinu, zinl, zinu, thetax, thetay
     *, thetaz,     uinc, vinc, winc, beamarea, xcol,ycol,xiso, yiso, zi
     *so, phicol,                 theta, phi, xtemp, ytemp, ztemp, phico
     *ltemp,thetatemp, phitemp,                 pang,angfixed,angmin,ang
     *max,pgang,r_11, r_12, r_13, r_21,                       r_22, r_23
     *, r_31, r_32, r_33,dsource,dsourcetemp,
     *    ein, eksrcm, esrc_sp, SSD, NINCSRC,
     *                  r_dbs, ssd_dbs,z_dbs,survival_ratio,einsrcold
      integer*4 isource, iqin, iqphsp, iqinc,latchold,iqinold,MLCflag,SH
     *Lflag,         calflag, ixinl, ixinu, jyinl, jyinu, kzinl, kzinu,
     *                             klowx, khix, klowy, khiy, klowz, khiz
     *,                                          nsmiss, nsblocked, nsrj
     *ct,nsoutside, nmissm,enflag,                             dflag, is
     *mode, IPRIMARY, OLDSRC,npassi,nang,ivary,ngang,numang,dose_stat,
     *     ndbsrjct,i_dbs,iphatsrc,e_split,i_iaea_in,i_mu_phsp,izscore,i
     *_unit_in,          num_field,more_in_cont,nset,k_field
      integer*2 nhist_last
      character*80 the_beam_code, the_vcu_code, the_input_file,the_pegs_
     *file,        the_shared_lib,the_vcu_input_file
      character*256 the_phsp_file
      COMMON/SOURCE_FORPARALLEL/nnphsp_max, nnphsp_min
      integer*8 nnphsp_max, nnphsp_min
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/RWPHSP/ STRING_TEMP_ZLAST_OUT,  STRING_TEMP_OUT,  IHSTRY_PH
     *SP,   iaea_dummy_long,  NHSTRY_DOS,   ESHORT,  WEIGHTTMP,  WT_PHSP
     *_SHORT,  X_PHSP_SHORT,  Y_PHSP_SHORT,  Z_PHSP_SHORT,  U_PHSP_SHORT
     *,  V_PHSP_SHORT,  W_PHSP_SHORT,  ZLAST_PHSP_SHORT,  MUIDX_PHSP_SHO
     *RT,  EKMAX_PHSP_SHORT,  EKMINE_PHSP_SHORT,  NINC_PHSP_SHORT,  dosx
     *yz2beam_index,  iaea_extra_floats,  NUM_PHSP_TOT,  PHOT_PHSP_TOT,
     *iaea_result,   iaea_n_stat,  iaea_q_typ,  iaea_typ_q,  iaea_q_inde
     *x,  I_PHSP,  IERR_PHSP,  LATCHTMP,  WRITE_PHSP_COUNTER,  WRITE_PHS
     *P_SOFAR,  PHSP_RESTART,  PHSP_RECL,  PHSP_RECL_OLD,  iaea_extra_in
     *ts,  iaea_extra_int_types,iaea_extra_float_types,   iaea_i_zlast,
     * iaea_i_latch,  iaea_i_muidx,  iaea_n_extra_ints,  iaea_n_extra_fl
     *oats,  i_iaea_open_for_write,   iaea_i_zlast_out,  iaea_i_latch_ou
     *t,  iaea_i_muidx_out,  dosxyz2beam_izscore,  MODE_RW
      CHARACTER*32000 STRING_TEMP_ZLAST_OUT(1)
      CHARACTER*28000 STRING_TEMP_OUT(1)
      integer*8 IHSTRY_PHSP(1),iaea_dummy_long,NHSTRY_DOS
      REAL*4 ESHORT,WEIGHTTMP,WT_PHSP_SHORT,X_PHSP_SHORT,Y_PHSP_SHORT, Z
     *_PHSP_SHORT,U_PHSP_SHORT, V_PHSP_SHORT,W_PHSP_SHORT,ZLAST_PHSP_SHO
     *RT, MUIDX_PHSP_SHORT, EKMAX_PHSP_SHORT,EKMINE_PHSP_SHORT,NINC_PHSP
     *_SHORT,dosxyz2beam_index, iaea_extra_floats(10)
      INTEGER NUM_PHSP_TOT,PHOT_PHSP_TOT, iaea_result,iaea_n_stat,iaea_q
     *_typ(3),iaea_typ_q(3),iaea_q_index,I_PHSP, IERR_PHSP,LATCHTMP, WRI
     *TE_PHSP_COUNTER(1),WRITE_PHSP_SOFAR(1), PHSP_RESTART,PHSP_RECL,PHS
     *P_RECL_OLD,iaea_extra_ints(10), iaea_extra_int_types(10),iaea_extr
     *a_float_types(10),iaea_i_zlast, iaea_i_latch,iaea_i_muidx,iaea_n_e
     *xtra_ints,iaea_n_extra_floats, i_iaea_open_for_write,iaea_i_zlast_
     *out,iaea_i_latch_out, iaea_i_muidx_out,dosxyz2beam_izscore
      CHARACTER*5 MODE_RW
      INTEGER LATCH_TEMP_OUT,NUM_PHSP_TOFLUSH,TEMP_PHSP_COUNTER,REM_PHSP
      REAL*4 REAL_TEMP_OUT(7)
      CHARACTER*32 REC_TEMP_OUT
      real*8 weight, costheta,sintheta, coscol,sincol, cosphi,sinphi
      integer*4 i
      WRITE(6,9800)
      WRITE(1,9800)
9800  FORMAT(' ')
      IF ((isource .EQ. 0)) THEN
          IF ((xinl .LT. xbound(1))) THEN
              xinl = xbound(1)
          END IF
          IF ((xinu .LE. xinl)) THEN
              xinu = xinl
          END IF
          IF (( xinu .GT. xbound(imax+1) )) THEN
              xinu=xbound(imax+1)
          END IF
          IF (( xinl .GT. xbound(imax+1) )) THEN
              xinl=xbound(imax+1)
          END IF
          WRITE(6,9810)
          WRITE(1,9810)
9810      FORMAT(/' Index ranges of beam field'/ ' ---------------------
     *-----'/)
          ixinl=0
9821      CONTINUE
              ixinl=ixinl+1
              IF(((xbound(ixinl) .LE. xinl .AND. xbound(ixinl+1) .GT. xi
     *        nl)))GO TO9822
          GO TO 9821
9822      CONTINUE
          ixinu=ixinl-1
9831      CONTINUE
              ixinu=ixinu+1
              IF(((xbound(ixinu) .LE. xinu .AND. xbound(ixinu+1) .GE. xi
     *        nu)))GO TO9832
          GO TO 9831
9832      CONTINUE
          WRITE(6,9840)xinl,xinu
          WRITE(1,9840)xinl,xinu
9840      FORMAT(' ',2f10.3,$)
          WRITE(6,9850)ixinl,ixinu
          WRITE(1,9850)ixinl,ixinu
9850      FORMAT('   i index ranges over i=',i3,' to',i4)
          IF ((yinl .LT. ybound(1))) THEN
              yinl = ybound(1)
          END IF
          IF ((yinu .LE. yinl)) THEN
              yinu = yinl
          END IF
          IF (( yinu .GT. ybound(jmax+1))) THEN
              yinu=ybound(jmax+1)
          END IF
          IF (( yinl .GT. ybound(jmax+1))) THEN
              yinl=ybound(jmax+1)
          END IF
          jyinl=0
9861      CONTINUE
              jyinl=jyinl+1
              IF(((ybound(jyinl) .LE. yinl .AND. ybound(jyinl+1) .GT. yi
     *        nl)))GO TO9862
          GO TO 9861
9862      CONTINUE
          jyinu=jyinl-1
9871      CONTINUE
              jyinu=jyinu+1
              IF(((ybound(jyinu) .LE. yinu .AND. ybound(jyinu+1) .GE. yi
     *        nu)))GO TO9872
          GO TO 9871
9872      CONTINUE
          WRITE(6,9880)yinl,yinu
          WRITE(1,9880)yinl,yinu
9880      FORMAT(' ',2f10.3,$)
          WRITE(6,9890)jyinl,jyinu
          WRITE(1,9890)jyinl,jyinu
9890      FORMAT('   j index ranges over j=',i3,' to',i4)
          winc = cos(thetaz*3.141593/180.)
          uinc = cos(thetax*3.141593/180.)
          vinc = cos(thetay*3.141593/180.)
          IF ((thetaz .GT. 90. .OR. thetaz .LT. -90.)) THEN
              WRITE(6,9900)
9900          FORMAT(//' ***ERROR in source 0'/ ' thetaz set so that sou
     *rce is not incident on front of'/ ' phantom.  Check incident angle
     *s and try again.'//)
              STOP
          ELSE IF((thetax .GT. 180. .OR. thetax .LT. 0.)) THEN
              WRITE(6,9910)
9910          FORMAT(//' ***ERROR in source 0'/ ' thetax set so that sou
     *rce is not incident on front of'/ ' phantom.  Check incident angle
     *s and try again.'//)
              STOP
          ELSE IF((thetay .GT. 180. .OR. thetay .LT. 0.)) THEN
              WRITE(6,9920)
9920          FORMAT(//' ***ERROR in source 0'/ ' thetay set so that sou
     *rce is not incident on front of'/ ' phantom.  Check incident angle
     *s and try again.'//)
              STOP
          END IF
          IF ((uinc*uinc+vinc*vinc+winc*winc.GT.1.001 .OR. uinc*uinc+vin
     *    c*vinc+winc*winc.LT.0.009)) THEN
              WRITE(6,9930)
9930          FORMAT(//' ***ERROR in source 0'/ ' Sum of squares of inci
     *dent direction cosines must be 1.'/ ' Check angles and try again.'
     *//)
              STOP
          ELSE
              winc=SQRT(1-uinc*uinc-vinc*vinc)
              thetaz = acos(winc)*180./3.141593
          END IF
          WRITE(6,9940)
          WRITE(1,9940)
9940      FORMAT(/' Angle of beam to'/ '  axes(in deg, 90,90,0 is normal
     *): ',$)
          WRITE(6,9950)thetax,thetay,thetaz
          WRITE(1,9950)thetax,thetay,thetaz
9950      FORMAT(' ',3f10.2,' deg')
          beamarea = (xinu - xinl)*(yinu - yinl)
          zinc = zbound(1)
          weight = 1.0
          return
      END IF
      IF ((isource .EQ. 1 .OR. isource.EQ.7)) THEN
          dsource= max( (xiso-xbound(1 ))**2+(yiso-ybound(1 ))**2+(ziso-
     *    zbound(1 ))**2, (xiso-xbound(imax+1))**2+(yiso-ybound(1 ))**2+
     *    (ziso-zbound(1 ))**2, (xiso-xbound(1 ))**2+(yiso-ybound(jmax+1
     *    ))**2+(ziso-zbound(1 ))**2, (xiso-xbound(1 ))**2+(yiso-ybound(
     *    1 ))**2+(ziso-zbound(kmax+1))**2, (xiso-xbound(imax+1))**2+(yi
     *    so-ybound(jmax+1))**2+(ziso-zbound(1 ))**2, (xiso-xbound(imax+
     *    1))**2+(yiso-ybound(1 ))**2+(ziso-zbound(kmax+1))**2, (xiso-xb
     *    ound(1 ))**2+(yiso-ybound(jmax+1))**2+(ziso-zbound(kmax+1))**2
     *    , (xiso-xbound(imax+1))**2+(yiso-ybound(jmax+1))**2+(ziso-zbou
     *    nd(kmax+1))**2)
          dsource = -sqrt(dsource + xcol**2+ ycol**2)
          beamarea = xcol*ycol
      ELSE IF((isource .EQ. 2 .OR. isource.EQ.8)) THEN
          dsource = -dsource
          esrc = 0
          OUTCNT = 0
      ELSE IF((isource .EQ. 3 )) THEN
          IF ((xinl .LT. xbound(1))) THEN
              xinl = xbound(1)
          END IF
          IF ((xinu .LE. xinl)) THEN
              xinu = xinl
          END IF
          IF (( xinu .GT. xbound(imax+1) )) THEN
              xinu=xbound(imax+1)
          END IF
          IF (( xinl .GT. xbound(imax+1) )) THEN
              xinl=xbound(imax+1)
          END IF
          WRITE(6,9960)
          WRITE(1,9960)
9960      FORMAT(/' Index ranges of beam field'/ ' ---------------------
     *-----'/)
          ixinl=0
9971      CONTINUE
              ixinl=ixinl+1
              IF(((xbound(ixinl) .LE. xinl .AND. xbound(ixinl+1) .GT. xi
     *        nl)))GO TO9972
          GO TO 9971
9972      CONTINUE
          ixinu=ixinl-1
9981      CONTINUE
              ixinu=ixinu+1
              IF(((xbound(ixinu) .LE. xinu .AND. xbound(ixinu+1) .GE. xi
     *        nu)))GO TO9982
          GO TO 9981
9982      CONTINUE
          WRITE(6,9990)xinl,xinu
          WRITE(1,9990)xinl,xinu
9990      FORMAT(' ',2f10.3,$)
          WRITE(6,10000)ixinl,ixinu
          WRITE(1,10000)ixinl,ixinu
10000     FORMAT('   i index ranges over i=',i3,' to',i4)
          IF ((yinl .LT. ybound(1))) THEN
              yinl = ybound(1)
          END IF
          IF ((yinu .LE. yinl)) THEN
              yinu = yinl
          END IF
          IF (( yinu .GT. ybound(jmax+1))) THEN
              yinu=ybound(jmax+1)
          END IF
          IF (( yinl .GT. ybound(jmax+1))) THEN
              yinl=ybound(jmax+1)
          END IF
          jyinl=0
10011     CONTINUE
              jyinl=jyinl+1
              IF(((ybound(jyinl) .LE. yinl .AND. ybound(jyinl+1) .GT. yi
     *        nl)))GO TO10012
          GO TO 10011
10012     CONTINUE
          jyinu=jyinl-1
10021     CONTINUE
              jyinu=jyinu+1
              IF(((ybound(jyinu) .LE. yinu .AND. ybound(jyinu+1) .GE. yi
     *        nu)))GO TO10022
          GO TO 10021
10022     CONTINUE
          WRITE(6,10030)yinl,yinu
          WRITE(1,10030)yinl,yinu
10030     FORMAT(' ',2f10.3,$)
          WRITE(6,10040)jyinl,jyinu
          WRITE(1,10040)jyinl,jyinu
10040     FORMAT('   j index ranges over j=',i3,' to',i4)
          beamarea = (xinu - xinl)*(yinu - yinl)
          zinc = zbound(1)
          weight = 1.0
          return
      ELSE IF((isource .EQ. 6 )) THEN
          IF ((xinl.LT.xbound(1))) THEN
              IF ((xinu .LT. xbound(1))) THEN
                  WRITE(6,10050)
10050             FORMAT(//' ***ERROR in source 6:'/ ' xinl & xinu < xbo
     *und(1) of volume'//)
                  STOP
              ELSE
                  xinl= xbound(1)
                  WRITE(6,10060)xinl
                  WRITE(1,10060)xinl
10060             FORMAT(//' ***WARNING in source 6:'/ ' xinl < xbound(1
     *)'/ ' xinl reset to',F10.4,' cm'//)
              END IF
          END IF
          IF ((xinu .GT. xbound(imax+1))) THEN
              IF ((xinl .GT. xbound(imax+1))) THEN
                  WRITE(6,10070)
10070             FORMAT(//' ***ERROR in source 6:'/ ' xinl & xinu > max
     * xbound of volume'//)
                  STOP
              ELSE
                  xinu=xbound(imax+1)
                  WRITE(6,10080)xinu
                  WRITE(1,10080)xinu
10080             FORMAT(//' ***WARNING in source 6:'/ ' xinu > max xbou
     *nd of geometry'/ ' xinu reset to',F10.4,' cm'//)
              END IF
          END IF
          IF ((yinl.LT.ybound(1))) THEN
              IF ((yinu .LT. ybound(1))) THEN
                  WRITE(6,10090)
10090             FORMAT(//' ***ERROR in source 6:'/ ' yinl & yinu < ybo
     *und(1) of volume'//)
                  STOP
              ELSE
                  yinl= ybound(1)
                  WRITE(6,10100)yinl
                  WRITE(1,10100)yinl
10100             FORMAT(//' ***WARNING in source 6:'/ ' yinl < ybound(1
     *)'/ ' yinl reset to',F10.4,' cm'//)
              END IF
          END IF
          IF ((yinu .GT. ybound(jmax+1))) THEN
              IF ((yinl .GT. ybound(jmax+1))) THEN
                  WRITE(6,10110)
10110             FORMAT(//' ***ERROR in source 6:'/ ' yinl & yinu > max
     * ybound of volume'//)
                  STOP
              ELSE
                  yinu=ybound(jmax+1)
                  WRITE(6,10120)yinu
                  WRITE(1,10120)yinu
10120             FORMAT(//' ***WARNING in source 6:'/ ' yinu > max ybou
     *nd of geometry'/ ' yinu reset to',F10.4,' cm'//)
              END IF
          END IF
          IF ((zinl.LT.zbound(1))) THEN
              IF ((zinu .LT. zbound(1))) THEN
                  WRITE(6,10130)
10130             FORMAT(//' ***ERROR in source 6:'/ ' zinl & zinu < zbo
     *und(1) of volume'//)
                  STOP
              ELSE
                  zinl= zbound(1)
                  WRITE(6,10140)zinl
                  WRITE(1,10140)zinl
10140             FORMAT(//' ***WARNING in source 6:'/ ' zinl < zbound(1
     *)'/ ' zinl reset to',F10.4,' cm'//)
              END IF
          END IF
          IF ((zinu .GT. zbound(kmax+1))) THEN
              IF ((zinl .GT. zbound(kmax+1))) THEN
                  WRITE(6,10150)
10150             FORMAT(//' ***ERROR in source 6:'/ ' zinl & zinu > max
     * zbound of volume'//)
                  STOP
              ELSE
                  zinu=zbound(kmax+1)
                  WRITE(6,10160)zinu
                  WRITE(1,10160)zinu
10160             FORMAT(//' ***WARNING in source 6:'/ ' zinu > max zbou
     *nd of geometry'/ ' zinu reset to',F10.4,' cm'//)
              END IF
          END IF
          WRITE(6,10170)
          WRITE(1,10170)
10170     FORMAT(/' Index ranges of source volume'/ ' ------------------
     *-----------'/)
          ixinl=0
10181     CONTINUE
              ixinl=ixinl+1
              IF(((xbound(ixinl) .LE. xinl .AND. xbound(ixinl+1) .GT. xi
     *        nl)))GO TO10182
          GO TO 10181
10182     CONTINUE
          ixinu=ixinl-1
10191     CONTINUE
              ixinu=ixinu+1
              IF(((xbound(ixinu) .LE. xinu .AND. xbound(ixinu+1) .GE. xi
     *        nu)))GO TO10192
          GO TO 10191
10192     CONTINUE
          WRITE(6,10200)xinl,xinu
          WRITE(1,10200)xinl,xinu
10200     FORMAT(' ',2f10.3,$)
          WRITE(6,10210)ixinl,ixinu
          WRITE(1,10210)ixinl,ixinu
10210     FORMAT('   i index ranges over i=',i3,' to',i4)
          jyinl=0
10221     CONTINUE
              jyinl=jyinl+1
              IF(((ybound(jyinl) .LE. yinl .AND. ybound(jyinl+1) .GT. yi
     *        nl)))GO TO10222
          GO TO 10221
10222     CONTINUE
          jyinu=jyinl-1
10231     CONTINUE
              jyinu=jyinu+1
              IF(((ybound(jyinu) .LE. yinu .AND. ybound(jyinu+1) .GE. yi
     *        nu)))GO TO10232
          GO TO 10231
10232     CONTINUE
          WRITE(6,10240)yinl,yinu
          WRITE(1,10240)yinl,yinu
10240     FORMAT(' ',2f10.3,$)
          WRITE(6,10250)jyinl,jyinu
          WRITE(1,10250)jyinl,jyinu
10250     FORMAT('   j index ranges over j=',i3,' to',i4)
          kzinl=0
10261     CONTINUE
              kzinl=kzinl+1
              IF(((zbound(kzinl) .LE. zinl .AND. zbound(kzinl+1) .GT. zi
     *        nl)))GO TO10262
          GO TO 10261
10262     CONTINUE
          kzinu=kzinl-1
10271     CONTINUE
              kzinu=kzinu+1
              IF(((zbound(kzinu) .LE. zinu .AND. zbound(kzinu+1) .GE. zi
     *        nu)))GO TO10272
          GO TO 10271
10272     CONTINUE
          WRITE(6,10280)zinl,zinu
          WRITE(1,10280)zinl,zinu
10280     FORMAT(' ',2f10.3,$)
          WRITE(6,10290)kzinl,kzinu
          WRITE(1,10290)kzinl,kzinu
10290     FORMAT('   k index ranges over k=',i3,' to',i4)
          weight=1.0
      ELSE IF((isource .EQ. 9 .OR. isource.EQ.10)) THEN
          dsource = -dsource
          WRITE(6,10300)'About to call init_beamsource'
10300     FORMAT(//a)
          call init_beamsource(i_parallel,n_parallel,i_log,'linux', hen_
     *    house,egs_home,the_beam_code, the_pegs_file,the_input_file)
      ELSE IF((isource .EQ. 20)) THEN
          dsource = -dsource
          IF ((SHLflag .EQ. 1)) THEN
              survival_ratio = 1
              IF ((MLCflag .EQ. 1)) THEN
                  WRITE(6,10310)'About to initialise MLC code and run ca
     *libration...'
10310             FORMAT(//a)
                  call init_vcusource(survival_ratio,'linux',hen_house,
     *            egs_home,the_shared_lib,the_input_file)
              ELSE
                  WRITE(6,10320)'About to initialise BEAM code..'
10320             FORMAT(//a)
                  call init_beamsource(i_parallel,n_parallel,i_log,'linu
     *x', hen_house,egs_home,the_shared_lib, the_pegs_file,the_input_fil
     *            e)
              END IF
              IF ((calflag .EQ. 0)) THEN
                  call calibration_run(survival_ratio)
                  WRITE(6,10330)survival_ratio
                  WRITE(1,10330)survival_ratio
10330             FORMAT('Survival Ratio is: ', F12.10)
              ELSE
                  survival_ratio = 1
                  WRITE(6,10340)
                  WRITE(1,10340)
10340             FORMAT(/'Calibration run skipped!'/)
              END IF
          ELSE
              WRITE(6,10350)
              WRITE(1,10350)
10350         FORMAT(/'No shared library'/)
              survival_ratio = 1
          END IF
          esrc = 0
          OUTCNT = 0
      ELSE IF((isource .EQ. 21)) THEN
          dsource = -dsource
          WRITE(6,10360)'About to call init_beamsource'
10360     FORMAT(//a)
          call init_beamsource(i_parallel,n_parallel,i_log,'linux', hen_
     *    house,egs_home,the_beam_code, the_pegs_file,the_input_file)
          WRITE(6,10370)'Done initialization'
10370     FORMAT(//a)
          survival_ratio = 1
          IF ((MLCflag .EQ. 1)) THEN
              WRITE(6,10380)'About to initialise MLC code...'
10380         FORMAT(//a)
              call init_vcusource(survival_ratio,'linux',hen_house, egs_
     *        home,the_vcu_code,the_vcu_input_file)
          ELSE
              WRITE(6,10390)
              WRITE(1,10390)
10390         FORMAT(/'No external library MLC'/)
          END IF
      END IF
      IF ((isource .GT.3 .AND. isource .LT.7)) THEN
          dsource=-dsource
      END IF
      IF ((isource .NE. 20 .AND. isource .NE. 21)) THEN
          costheta = cos(theta(1)*3.141593/180.)
          sintheta = sin(theta(1)*3.141593/180.)
          coscol = cos(phicol*3.141593/180.)
          sincol = sin(phicol*3.141593/180.)
          cosphi = cos(phi(1)*3.141593/180.)
          sinphi = sin(phi(1)*3.141593/180.)
          r_11(1) = costheta*cosphi*coscol + sinphi*sincol
          r_12(1) = -costheta*cosphi*sincol + sinphi*coscol
          r_13(1) = -sintheta*cosphi
          r_21(1) = costheta*sinphi*coscol - cosphi*sincol
          r_22(1) = -costheta*sinphi*sincol - cosphi*coscol
          r_23(1) = -sintheta*sinphi
          r_31(1) = -sintheta*coscol
          r_32(1) = sintheta*sincol
          r_33(1) = -costheta
      END IF
      IF ((isource.EQ.7 .OR. isource.EQ.8 .OR. isource.EQ.10)) THEN
          DO 10401 I=2,numang
              costheta = cos(theta(I)*3.141593/180.)
              sintheta = sin(theta(I)*3.141593/180.)
              cosphi = cos(phi(I)*3.141593/180.)
              sinphi= sin(phi(I)*3.141593/180.)
              r_11(I) = costheta*cosphi*coscol + sinphi*sincol
              r_12(I) = -costheta*cosphi*sincol + sinphi*coscol
              r_13(I) = -sintheta*cosphi
              r_21(I) = costheta*sinphi*coscol - cosphi*sincol
              r_22(I) = -costheta*sinphi*sincol - cosphi*coscol
              r_23(I) = -sintheta*sinphi
              r_31(I) = -sintheta*coscol
              r_32(I) = sintheta*sincol
              r_33(I) = -costheta
10401     CONTINUE
10402     CONTINUE
      END IF
      klowx = 2 - imax - ijmax
      khix=1 - ijmax
      klowy=1 - ijmax
      khiy=1 - imax
      klowz=1 - imax
      khiz = 1 - imax - ijmax + ijmax*kmax
      weight = 1.0
      return
      end
      subroutine calibration_run(s_ratio)
      implicit none
      real*8 xsrc,ysrc,zlast, usrc,vsrc,wsrc, zsrc,weight,rncal, dist_db
     *s, mu_phsp
      real*4 s_ratio, total_survived
      integer*8 nhistdum
      integer*4 npassdum,latchinp,num_hist,num2run,num_dbsrj,num_blocked
      common/source/ esrc,  nhist,  nnread,  nshist,  nphist,  nnphsp,
     *einsrc,  xsrcold,  ysrcold,  zsrcold,  usrcold,  vsrcold,  wsrcold
     *,  weightold, mu_phspold,  frMU_indx,  zinc,  xinl,  xinu,  yinl,
     * yinu,  zinl,  zinu,  thetax,  thetay,  thetaz,  uinc,  vinc,  win
     *c,  beamarea, xcol,  ycol,  xiso,  yiso,  ziso,  phicol,  theta(60
     *000),  phi(60000),  pang(60000),  angfixed(60000),  angmin(60000),
     *  angmax(60000),  pgang(60000),  xtemp(60000),  ytemp(60000),  zte
     *mp(60000),  phicoltemp(60000), thetatemp(60000),  phitemp(60000),
     * muIndex(60000),  r_11(60000), r_12(60000), r_13(60000), r_21(6000
     *0), r_22(60000), r_23(60000), r_31(60000), r_32(60000), r_33(60000
     *), dsource, dsourcetemp(60000), ein,  eksrcm,  esrc_sp,  SSD,  ein
     *srcold, NINCSRC,  r_dbs,  ssd_dbs,  z_dbs,  iqinold,  latchold,  e
     *nflag,  dflag,  ismode,  isource,     iqin,        iqphsp,
     *           iqinc,                          SHLflag,     calflag,
     *   MLCflag,     ixinl,       ixinu,       jyinl,       jyinu,
     *  kzinl,       kzinu,       klowx,       khix,        klowy,
     * khiy,        klowz,       khiz,        survival_ratio,        nsm
     *iss,      nsblocked,     nsrjct,      nsoutside,     nmissm,
     *IPRIMARY,                                            OLDSRC,
     * npassi,                     nang,         ivary(60000),     ngang
     *(60000),       nset,            more_in_cont,                 numa
     *ng,       dose_stat,      ndbsrjct,                        i_dbs,
     *         iphatsrc,         e_split,                           i_ia
     *ea_in,      i_mu_phsp,           izscore,             i_unit_in,
     *                k_field,                       nhist_last,
     *         the_beam_code,         the_input_file,      the_vcu_input
     *_file,                        the_pegs_file,           the_shared_
     *lib,                    the_vcu_code,               the_phsp_file
      real*8    esrc,muIndex
      integer*8 nhist, nnread,nshist,nphist,nnphsp
      real*8 einsrc, xsrcold, ysrcold,usrcold,vsrcold,wsrcold,weightold,
     *               frMU_indx,zsrcold,mu_phspold
      real*4    zinc, xinl, xinu, yinl, yinu, zinl, zinu, thetax, thetay
     *, thetaz,     uinc, vinc, winc, beamarea, xcol,ycol,xiso, yiso, zi
     *so, phicol,                 theta, phi, xtemp, ytemp, ztemp, phico
     *ltemp,thetatemp, phitemp,                 pang,angfixed,angmin,ang
     *max,pgang,r_11, r_12, r_13, r_21,                       r_22, r_23
     *, r_31, r_32, r_33,dsource,dsourcetemp,
     *    ein, eksrcm, esrc_sp, SSD, NINCSRC,
     *                  r_dbs, ssd_dbs,z_dbs,survival_ratio,einsrcold
      integer*4 isource, iqin, iqphsp, iqinc,latchold,iqinold,MLCflag,SH
     *Lflag,         calflag, ixinl, ixinu, jyinl, jyinu, kzinl, kzinu,
     *                             klowx, khix, klowy, khiy, klowz, khiz
     *,                                          nsmiss, nsblocked, nsrj
     *ct,nsoutside, nmissm,enflag,                             dflag, is
     *mode, IPRIMARY, OLDSRC,npassi,nang,ivary,ngang,numang,dose_stat,
     *     ndbsrjct,i_dbs,iphatsrc,e_split,i_iaea_in,i_mu_phsp,izscore,i
     *_unit_in,          num_field,more_in_cont,nset,k_field
      integer*2 nhist_last
      character*80 the_beam_code, the_vcu_code, the_input_file,the_pegs_
     *file,        the_shared_lib,the_vcu_input_file
      character*256 the_phsp_file
      COMMON/SOURCE_FORPARALLEL/nnphsp_max, nnphsp_min
      integer*8 nnphsp_max, nnphsp_min
      COMMON/RWPHSP/ STRING_TEMP_ZLAST_OUT,  STRING_TEMP_OUT,  IHSTRY_PH
     *SP,   iaea_dummy_long,  NHSTRY_DOS,   ESHORT,  WEIGHTTMP,  WT_PHSP
     *_SHORT,  X_PHSP_SHORT,  Y_PHSP_SHORT,  Z_PHSP_SHORT,  U_PHSP_SHORT
     *,  V_PHSP_SHORT,  W_PHSP_SHORT,  ZLAST_PHSP_SHORT,  MUIDX_PHSP_SHO
     *RT,  EKMAX_PHSP_SHORT,  EKMINE_PHSP_SHORT,  NINC_PHSP_SHORT,  dosx
     *yz2beam_index,  iaea_extra_floats,  NUM_PHSP_TOT,  PHOT_PHSP_TOT,
     *iaea_result,   iaea_n_stat,  iaea_q_typ,  iaea_typ_q,  iaea_q_inde
     *x,  I_PHSP,  IERR_PHSP,  LATCHTMP,  WRITE_PHSP_COUNTER,  WRITE_PHS
     *P_SOFAR,  PHSP_RESTART,  PHSP_RECL,  PHSP_RECL_OLD,  iaea_extra_in
     *ts,  iaea_extra_int_types,iaea_extra_float_types,   iaea_i_zlast,
     * iaea_i_latch,  iaea_i_muidx,  iaea_n_extra_ints,  iaea_n_extra_fl
     *oats,  i_iaea_open_for_write,   iaea_i_zlast_out,  iaea_i_latch_ou
     *t,  iaea_i_muidx_out,  dosxyz2beam_izscore,  MODE_RW
      CHARACTER*32000 STRING_TEMP_ZLAST_OUT(1)
      CHARACTER*28000 STRING_TEMP_OUT(1)
      integer*8 IHSTRY_PHSP(1),iaea_dummy_long,NHSTRY_DOS
      REAL*4 ESHORT,WEIGHTTMP,WT_PHSP_SHORT,X_PHSP_SHORT,Y_PHSP_SHORT, Z
     *_PHSP_SHORT,U_PHSP_SHORT, V_PHSP_SHORT,W_PHSP_SHORT,ZLAST_PHSP_SHO
     *RT, MUIDX_PHSP_SHORT, EKMAX_PHSP_SHORT,EKMINE_PHSP_SHORT,NINC_PHSP
     *_SHORT,dosxyz2beam_index, iaea_extra_floats(10)
      INTEGER NUM_PHSP_TOT,PHOT_PHSP_TOT, iaea_result,iaea_n_stat,iaea_q
     *_typ(3),iaea_typ_q(3),iaea_q_index,I_PHSP, IERR_PHSP,LATCHTMP, WRI
     *TE_PHSP_COUNTER(1),WRITE_PHSP_SOFAR(1), PHSP_RESTART,PHSP_RECL,PHS
     *P_RECL_OLD,iaea_extra_ints(10), iaea_extra_int_types(10),iaea_extr
     *a_float_types(10),iaea_i_zlast, iaea_i_latch,iaea_i_muidx,iaea_n_e
     *xtra_ints,iaea_n_extra_floats, i_iaea_open_for_write,iaea_i_zlast_
     *out,iaea_i_latch_out, iaea_i_muidx_out,dosxyz2beam_izscore
      CHARACTER*5 MODE_RW
      INTEGER LATCH_TEMP_OUT,NUM_PHSP_TOFLUSH,TEMP_PHSP_COUNTER,REM_PHSP
      REAL*4 REAL_TEMP_OUT(7)
      CHARACTER*32 REC_TEMP_OUT
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      WRITE(6,10410)'Performing BEAM calibration run...'
10410 FORMAT(//a)
      IF ((nshist.GT.1000000)) THEN
          num2run=1000000
      ELSE
          num2run = nshist
      END IF
      WRITE(6,10420)num2run
      WRITE(1,10420)num2run
10420 FORMAT('Running ',i8, ' particles to calibrate BEAM accelerator...
     *'/)
      num_hist=1
      num_dbsrj=0
      total_survived=0.0
      more_in_cont=0
10431 CONTINUE
          IF ((more_in_cont .EQ. 0)) THEN
10440         CONTINUE
              num_hist=num_hist+1
              IF ((i_iaea_in.EQ.1)) THEN
                  npassdum=0
                  call iaea_get_particle(i_unit_in,iaea_n_stat,iaea_q_in
     *            dex,ESHORT,WT_PHSP_SHORT, X_PHSP_SHORT,Y_PHSP_SHORT,Z_
     *            PHSP_SHORT,U_PHSP_SHORT, V_PHSP_SHORT,W_PHSP_SHORT,iae
     *            a_extra_floats,iaea_extra_ints)
                  IF ((iaea_n_stat.EQ.-1)) THEN
                      WRITE(i_log,*)' Error getting particle data from I
     *AEA phsp file.'
                      call exit(1)
                  ELSE IF((iaea_n_stat.EQ.-2)) THEN
                      WRITE(i_log,*)' WARNING: Reached end of IAEA phsp
     *file.  File restarted.'
                  ELSE IF((iaea_n_stat.GE.0)) THEN
                      nhistdum=nhistdum+iaea_n_stat
                      IF ((iaea_i_latch.EQ.-99)) THEN
                          latchinp=0
                      ELSE
                          latchinp=iaea_extra_ints(iaea_i_latch)
                      END IF
                      iqin=iaea_typ_q(iaea_q_index)
                      IF (( (iqin.EQ.1) .OR. (iqin.EQ.-1) )) THEN
                          ESHORT = ESHORT + 0.5109989461
                      END IF
                      einsrc=ESHORT
                      IF ((iaea_i_zlast.EQ.-99)) THEN
                          ZLAST_PHSP_SHORT=0
                      ELSE
                          ZLAST_PHSP_SHORT= iaea_extra_floats(iaea_i_zla
     *                    st)
                      END IF
                      IF ((iaea_i_muidx.EQ.-99)) THEN
                          MUIDX_PHSP_SHORT=0
                      ELSE
                          MUIDX_PHSP_SHORT= iaea_extra_floats(iaea_i_mui
     *                    dx)
                      END IF
                      weight=WT_PHSP_SHORT
                      xsrc=X_PHSP_SHORT
                      ysrc=Y_PHSP_SHORT
                      zsrc=Z_PHSP_SHORT
                      usrc=U_PHSP_SHORT
                      vsrc=V_PHSP_SHORT
                      wsrc=W_PHSP_SHORT
                      zlast=ZLAST_PHSP_SHORT
                      mu_phsp=MUIDX_PHSP_SHORT
                  END IF
              ELSE
                  IF ((ismode.NE.0)) THEN
                      READ(44,REC=num_hist,IOSTAT=IERR_PHSP) latchinp,ES
     *                HORT,X_PHSP_SHORT,Y_PHSP_SHORT, U_PHSP_SHORT,V_PHS
     *                P_SHORT,WT_PHSP_SHORT,ZLAST_PHSP_SHORT
                  ELSE
                      READ(44,REC=num_hist,IOSTAT=IERR_PHSP) latchinp,ES
     *                HORT,X_PHSP_SHORT,Y_PHSP_SHORT, U_PHSP_SHORT,V_PHS
     *                P_SHORT,WT_PHSP_SHORT
                  END IF
                  IF ((num_hist.EQ.76695869)) THEN
                      write(*,*)' x,y,u,v,wt,eshort,latch', X_PHSP_SHORT
     *                ,Y_PHSP_SHORT,U_PHSP_SHORT,V_PHSP_SHORT, WT_PHSP_S
     *                HORT,ESHORT,latchinp
                  END IF
                  IF ((ESHORT.LT.0.0)) THEN
                      nhistdum=nhistdum+1
                      ESHORT=ABS(ESHORT)
                  END IF
                  einsrc=ESHORT
                  weight=WT_PHSP_SHORT
                  xsrc=X_PHSP_SHORT
                  ysrc=Y_PHSP_SHORT
                  usrc=U_PHSP_SHORT
                  vsrc=V_PHSP_SHORT
                  IF((ismode.NE.0))zlast=ZLAST_PHSP_SHORT
                  IF ((IERR_PHSP.EQ.0)) THEN
                      einsrc=ESHORT
                      IF ((BTEST(latchinp,31))) THEN
                          npassdum = 1
                          latchinp = IBCLR(latchinp,31)
                      ELSE
                          npassdum = 0
                      END IF
                      IF ((BTEST(latchinp,30))) THEN
                          iqin = -1
                          latchinp = IBCLR(latchinp,30)
                          latchinp = IBCLR(latchinp,29)
                      ELSE
                          IF ((BTEST(latchinp,29))) THEN
                              iqin = 1
                              latchinp = IBCLR(latchinp,29)
                          ELSE
                              iqin = 0
                          END IF
                      END IF
                      wsrc = min( 1., usrc**2 + vsrc**2)
                      wsrc = sqrt(1. - wsrc)
                      wsrc = SIGN(wsrc,weight)
                      weight=ABS(weight)
                  END IF
              END IF
              IF ((i_dbs.EQ.1 .AND. iqin.EQ.0)) THEN
                  IF ((i_iaea_in.EQ.1)) THEN
                      dist_dbs=(ssd_dbs-zsrc)/wsrc
                  ELSE
                      dist_dbs=(ssd_dbs-z_dbs)/wsrc
                  END IF
                  IF (((xsrc+usrc*dist_dbs)**2+(ysrc+vsrc*dist_dbs)**2.G
     *            T.r_dbs**2)) THEN
                      num_dbsrj=num_dbsrj+1
                      goto 10440
                  END IF
              END IF
              IF ((i_iaea_in.EQ.1 .AND. i_mu_phsp.EQ.1)) THEN
                  frMU_indx = mu_phsp
              ELSE
                  IF((rng_seed .GT. 128))call ranmar_get
                  rncal = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  frMU_indx = rncal
              END IF
          END IF
          IF ((MLCflag.EQ.1)) THEN
              call sample_vcusource(einsrc,xsrc,ysrc,zsrc,usrc, vsrc,wsr
     *        c,weight,iqin,latchinp,nhistdum, more_in_cont,frMU_indx)
          ELSE
              call phspmotionsample_beamsource(einsrc,xsrc,ysrc,zsrc,usr
     *        c,vsrc, wsrc,weight,iqin,latchinp,nhistdum,iphatsrc, more_
     *        in_cont,frMU_indx)
          END IF
          IF ((weight.GT.0)) THEN
              total_survived=total_survived+1.0
          ELSE
              num_blocked=num_blocked+1
          END IF
          IF(((num_hist.GE.(num2run+1))))GO TO10432
      GO TO 10431
10432 CONTINUE
      IF ((i_iaea_in.EQ.1)) THEN
          iaea_dummy_long=1
          call iaea_set_record(i_unit_in,iaea_dummy_long,iaea_result)
          IF ((iaea_result.LT.0)) THEN
              WRITE(i_log,*)' Error going to record ',1,' in IAEA phsp f
     *ile.'
              call exit(1)
          END IF
      END IF
      more_in_cont=0
      s_ratio=total_survived/(num2run)
      WRITE(6,10450)num2run,total_survived,num_dbsrj,num_blocked
      WRITE(1,10450)num2run,total_survived,num_dbsrj,num_blocked
10450 FORMAT('Number run: ', I12/ 'Number survived: ', F12.0/ 'Number db
     *s rejected: ', I12/ 'Number blocked', I12)
      WRITE(6,10460)'Calibration complete.'
10460 FORMAT(//a)
      return
      end
      subroutine srcout
      implicit none
      common/source/ esrc,  nhist,  nnread,  nshist,  nphist,  nnphsp,
     *einsrc,  xsrcold,  ysrcold,  zsrcold,  usrcold,  vsrcold,  wsrcold
     *,  weightold, mu_phspold,  frMU_indx,  zinc,  xinl,  xinu,  yinl,
     * yinu,  zinl,  zinu,  thetax,  thetay,  thetaz,  uinc,  vinc,  win
     *c,  beamarea, xcol,  ycol,  xiso,  yiso,  ziso,  phicol,  theta(60
     *000),  phi(60000),  pang(60000),  angfixed(60000),  angmin(60000),
     *  angmax(60000),  pgang(60000),  xtemp(60000),  ytemp(60000),  zte
     *mp(60000),  phicoltemp(60000), thetatemp(60000),  phitemp(60000),
     * muIndex(60000),  r_11(60000), r_12(60000), r_13(60000), r_21(6000
     *0), r_22(60000), r_23(60000), r_31(60000), r_32(60000), r_33(60000
     *), dsource, dsourcetemp(60000), ein,  eksrcm,  esrc_sp,  SSD,  ein
     *srcold, NINCSRC,  r_dbs,  ssd_dbs,  z_dbs,  iqinold,  latchold,  e
     *nflag,  dflag,  ismode,  isource,     iqin,        iqphsp,
     *           iqinc,                          SHLflag,     calflag,
     *   MLCflag,     ixinl,       ixinu,       jyinl,       jyinu,
     *  kzinl,       kzinu,       klowx,       khix,        klowy,
     * khiy,        klowz,       khiz,        survival_ratio,        nsm
     *iss,      nsblocked,     nsrjct,      nsoutside,     nmissm,
     *IPRIMARY,                                            OLDSRC,
     * npassi,                     nang,         ivary(60000),     ngang
     *(60000),       nset,            more_in_cont,                 numa
     *ng,       dose_stat,      ndbsrjct,                        i_dbs,
     *         iphatsrc,         e_split,                           i_ia
     *ea_in,      i_mu_phsp,           izscore,             i_unit_in,
     *                k_field,                       nhist_last,
     *         the_beam_code,         the_input_file,      the_vcu_input
     *_file,                        the_pegs_file,           the_shared_
     *lib,                    the_vcu_code,               the_phsp_file
      real*8    esrc,muIndex
      integer*8 nhist, nnread,nshist,nphist,nnphsp
      real*8 einsrc, xsrcold, ysrcold,usrcold,vsrcold,wsrcold,weightold,
     *               frMU_indx,zsrcold,mu_phspold
      real*4    zinc, xinl, xinu, yinl, yinu, zinl, zinu, thetax, thetay
     *, thetaz,     uinc, vinc, winc, beamarea, xcol,ycol,xiso, yiso, zi
     *so, phicol,                 theta, phi, xtemp, ytemp, ztemp, phico
     *ltemp,thetatemp, phitemp,                 pang,angfixed,angmin,ang
     *max,pgang,r_11, r_12, r_13, r_21,                       r_22, r_23
     *, r_31, r_32, r_33,dsource,dsourcetemp,
     *    ein, eksrcm, esrc_sp, SSD, NINCSRC,
     *                  r_dbs, ssd_dbs,z_dbs,survival_ratio,einsrcold
      integer*4 isource, iqin, iqphsp, iqinc,latchold,iqinold,MLCflag,SH
     *Lflag,         calflag, ixinl, ixinu, jyinl, jyinu, kzinl, kzinu,
     *                             klowx, khix, klowy, khiy, klowz, khiz
     *,                                          nsmiss, nsblocked, nsrj
     *ct,nsoutside, nmissm,enflag,                             dflag, is
     *mode, IPRIMARY, OLDSRC,npassi,nang,ivary,ngang,numang,dose_stat,
     *     ndbsrjct,i_dbs,iphatsrc,e_split,i_iaea_in,i_mu_phsp,izscore,i
     *_unit_in,          num_field,more_in_cont,nset,k_field
      integer*2 nhist_last
      character*80 the_beam_code, the_vcu_code, the_input_file,the_pegs_
     *file,        the_shared_lib,the_vcu_input_file
      character*256 the_phsp_file
      COMMON/SOURCE_FORPARALLEL/nnphsp_max, nnphsp_min
      integer*8 nnphsp_max, nnphsp_min
      COMMON/PHSPFILE/BEAM_SIZE,MODE_PHSP1,LATCH_OPT, NCASE_PHSP,LATBIT,
     *NBIT1,NBIT2,I_BIT_FILTER,NofREPEAT,ISMOOTH, OUTCNT,NRCYCL,IPARALLE
     *L,PARNUM,CYCLNUM
      real BEAM_SIZE
      INTEGER MODE_PHSP1,LATCH_OPT,NCASE_PHSP,LATBIT(20),NBIT1,NBIT2, I_
     *BIT_FILTER,NofREPEAT,ISMOOTH,OUTCNT,NRCYCL,IPARALLEL,PARNUM,CYCLNU
     *M
      integer*4 i,lnblnk1,IOUTLIST
      IOUTLIST = 6
      WRITE(6,10470)
      WRITE(1,10470)
10470 FORMAT( /' ',79('*')//t10, 'Summary of source parameters (srcxyznr
     *c)' / ' ',79('*')/)
      IF ((isource .EQ. 0)) THEN
          WRITE(6,10480)iqin,xinl,xinu,yinl,yinu,thetax,thetay,thetaz
          WRITE(1,10480)iqin,xinl,xinu,yinl,yinu,thetax,thetay,thetaz
10480     FORMAT( t20,' Parallel beam incident from the front(+ve z-axis
     *)'/ / t25,' Electric charge of the source:',t57,i12 / t25,' x-boun
     *daries:',t43,f10.4,' cm-',f10.4,' cm' / t25,' y-boundaries:',t43,f
     *10.4,' cm-',f10.4,' cm' / T25,' Angle relative to +x:',t57,f10.4,'
     * degrees' / T25,' Angle relative to +y:',t57,f10.4,' degrees' / T2
     *5,' Angle relative to -z:',t57,f10.4,' degrees' /)
      ELSE IF((isource .EQ. 1)) THEN
          WRITE(6,10490)iqin,xiso,yiso,ziso,theta(1),phi(1),xcol,ycol,ph
     *    icol
          WRITE(1,10490)iqin,xiso,yiso,ziso,theta(1),phi(1),xcol,ycol,ph
     *    icol
10490     FORMAT( t15,' Parallel beam incident from an arbitrary directi
     *on' / / t20,' Electric charge of the source:' ,t62,i12 / t20,' x-c
     *oordinate of the isocenter,' ,t62,f10.4,' cm' / t20,' y-coordinate
     * of the isocenter,' ,t62,f10.4,' cm' / t20,' z-coordinate of the i
     *socenter,' ,t62,f10.4,' cm' / t20,' Polar angle of collimator cent
     *er:',t62,f10.4,' degrees'/ t20,' Azimuthal angle of collimator cen
     *ter:',t62,f10.4,' degrees'/ t20,' Total x-width of collimator,' ,t
     *62,f10.4,' cm' / t20,' Total y-width of collimator,' ,t62,f10.4,' 
     *cm'/ t20,' Collimator rotation angle,' ,t62,f10.4,' degrees'/)
      ELSE IF((isource .EQ. 2)) THEN
          WRITE(6,10500)xiso,yiso,ziso,theta(1),phi(1),dsource,phicol,ns
     *    hist
          WRITE(1,10500)xiso,yiso,ziso,theta(1),phi(1),dsource,phicol,ns
     *    hist
10500     FORMAT( t15,' Full phase space input for each incident particl
     *e' // t10,' x-coordinate of the isocenter,' ,t62,f10.4,' cm' / t10
     *,' y-coordinate of the isocenter,' ,t62,f10.4,' cm' / t10,' z-coor
     *dinate of the isocenter,' ,t62,f10.4,' cm' / t10,' Polar angle of 
     *source plane:' ,t62,f10.4,' degrees'/ t10,' Azimuthal angle of ori
     *gin in source plane:' ,t62,f10.4,' degrees'/ t10,' Distance from i
     *socenter to origin in source', ' plane:',t62,f10.4,' cm'/ t10,' So
     *urce plane rotation angle,' ,t62,f10.4,' degrees'/ t10,' Total num
     *ber of particles in phase space file:',t62,i12/)
          IF ((i_dbs.EQ.1)) THEN
              WRITE(6,10510)r_dbs,ssd_dbs,z_dbs
              WRITE(1,10510)r_dbs,ssd_dbs,z_dbs
10510         FORMAT( ' Directional Bremsstrahlung Splitting (DBS) used'
     */ ' in BEAM simulation to generate phase space source with:'/ '   
     * DBS splitting radius:',t55,f10.4/ '    SSD where radius defined:'
     *,t55,f10.4/ '    Z where source scored:',t55,f10.4/ ' Photons whos
     *e trajectory takes them outside the DBS splitting'/ ' radius at th
     *e SSD will be rejected.'/)
          END IF
          IF ((IPARALLEL.GT.1)) THEN
              IF ((PARNUM.GT.0)) THEN
                  WRITE(6,10520)IPARALLEL,INT((PARNUM-1)*nshist/IPARALLE
     *            L)+1, INT(PARNUM*nshist/IPARALLEL)
                  WRITE(1,10520)IPARALLEL,INT((PARNUM-1)*nshist/IPARALLE
     *            L)+1, INT(PARNUM*nshist/IPARALLEL)
10520             FORMAT('    This is one of ',i4,' parallel simulations
     *.'/ '    It will use from particle ',i12,' to particle ',i12,' in'
     */ '    the phase space source for the simulation.'/)
              ELSE IF((PARNUM.EQ.0)) THEN
                  WRITE(6,10530)IPARALLEL
                  WRITE(1,10530)IPARALLEL
10530             FORMAT('    This is one of ',i4,' parallel simulations
     *.'/ '    It will use the entire specified phase space source'/ '  
     *for the simulation.'/)
              END IF
          END IF
          IF ((iqphsp.EQ.2)) THEN
              WRITE(6,10540)
              WRITE(1,10540)
10540         FORMAT(' Particles to be simulated: all'/)
          ELSE IF((iqphsp.EQ.0)) THEN
              WRITE(6,10550)
              WRITE(1,10550)
10550         FORMAT(' Particles to be simulated: photon only'/)
          ELSE IF((iqphsp.EQ.1)) THEN
              WRITE(6,10560)
              WRITE(1,10560)
10560         FORMAT(' Particles to be simulated: positron only'/)
          ELSE IF((iqphsp.EQ.-1)) THEN
              WRITE(6,10570)
              WRITE(1,10570)
10570         FORMAT(' Particles to be simulated: electron only'/)
          END IF
          IF ((e_split.GT.1 .AND. iqphsp.NE.0)) THEN
              WRITE(6,10580)e_split
              WRITE(1,10580)e_split
10580         FORMAT(/' Charged particles will be split ',i10,' times.'/
     *)
          END IF
      ELSE IF((isource .EQ. 3)) THEN
          WRITE(6,10590)iqin,xinl,xinu,yinl,yinu,ssd
          WRITE(1,10590)iqin,xinl,xinu,yinl,yinu,ssd
10590     FORMAT( t20,' Point source incident from the front(+ve z-axis)
     *'/ t25,' Electric charge of the source:',t57,i12 / t25,' x-boundar
     *ies:',t43,f10.4,' cm-',f10.4,' cm' / t25,' y-boundaries:',t43,f10.
     *4,' cm-',f10.4,' cm' / t25,' SSD                           ',f10.4
     *,' cm' /)
      ELSE IF((isource .EQ. 6)) THEN
          WRITE(6,10600)iqin,xinl,xinu,yinl,yinu,zinl,zinu
          WRITE(1,10600)iqin,xinl,xinu,yinl,yinu,zinl,zinu
10600     FORMAT( t20,' Uniform isotropically radiating parallelepiped'/
     *t20,' within DOSXYZ volume'/ t25,' Electric charge of the source:'
     *,t57,i12 / t25,' x-boundaries:',t43,f10.4,' cm-',f10.4,' cm'/ t25,
     *' y-boundaries:',t43,f10.4,' cm-',f10.4,' cm' / t25,' z-boundaries
     *:',t43,f10.4,' cm-',f10.4,' cm'/)
      ELSE IF((isource .EQ. 7)) THEN
          IF ((nang.GT.0)) THEN
              WRITE(6,10610)iqin,xiso,yiso,ziso,nang,xcol,ycol,phicol
              WRITE(1,10610)iqin,xiso,yiso,ziso,nang,xcol,ycol,phicol
10610         FORMAT( t15,' Parallel beam incident from multiple, user-s
     *elected angles' / / t20,' Electric charge of the source:' ,t62,i12
     */ t20,' x-coordinate of the isocenter,' ,t62,f10.4,' cm'/ t20,' y-
     *coordinate of the isocenter,' ,t62,f10.4,' cm' /t20,' z-coordinate
     * of the isocenter,' ,t62,f10.4,' cm' /t20,' number of incident the
     *ta-phi:' ,t62,i12/ t20,' Total x-width of collimator,' ,t62,f10.4,
     *' cm' / t20,' Total y-width of collimator,' ,t62,f10.4,' cm'/ t20,
     *' Collimator rotation angle,',t62,f10.4,' degrees')
              WRITE(6,10620)
              WRITE(1,10620)
10620         FORMAT(t20,'  theta-phi     theta         phi        norma
     *lized'/ t20,'    pair        (deg.)       (deg.)      probability'
     *)
              DO 10631 I=1,nang
                  IF ((I.EQ.1)) THEN
                      WRITE(6,10640)I,theta(I),phi(I),pang(I)
                      WRITE(1,10640)I,theta(I),phi(I),pang(I)
10640                 FORMAT(t20,i7,f16.4,f13.4,f15.4)
                  ELSE
                      WRITE(6,10650)I,theta(I),phi(I),pang(I)-pang(I-1)
                      WRITE(1,10650)I,theta(I),phi(I),pang(I)-pang(I-1)
10650                 FORMAT(t20,i7,f16.4,f13.4,f15.4)
                  END IF
10631         CONTINUE
10632         CONTINUE
          ELSE IF((nang.LT.0)) THEN
              WRITE(6,10660)iqin,xiso,yiso,ziso,-nang,xcol,ycol,phicol
              WRITE(1,10660)iqin,xiso,yiso,ziso,-nang,xcol,ycol,phicol
10660         FORMAT( t15,' Parallel beam incident from side at user-sel
     *ected angles' / / t20,' Electric charge of the source:' ,t62,i12 /
     *t20,' x-coordinate of the isocenter,' ,t62,f10.4,' cm' /t20,' y-co
     *ordinate of the isocenter,' ,t62,f10.4,' cm' / t20,' z-coordinate 
     *of the isocenter,' ,t62,f10.4,' cm' / t20,' no. of theta-phi group
     *s:' ,t62,i12/ t20,' Total x-width of collimator,' ,t62,f10.4,' cm'
     * / t20,' Total y-width of collimator,' ,t62,f10.4,' cm'/ t20,' Col
     *limator rotation angle,' ,t62,f10.4,' degrees')
              WRITE(6,10670)
              WRITE(1,10670)
10670         FORMAT('  theta-phi     theta (deg.)       phi (deg.)no. t
     *heta-   normalized'/ '    group      min.     max.      min.   max
     *.    phi pairs    probability')
              DO 10681 I=1,-nang
                  IF ((ivary(I).EQ.1)) THEN
                      WRITE(6,10690)I,angmin(I),angmax(I),angfixed(I),an
     *                gfixed(I),ngang(I), pgang(I)
                      WRITE(1,10690)I,angmin(I),angmax(I),angfixed(I),an
     *                gfixed(I),ngang(I), pgang(I)
10690                 FORMAT(I8,F11.4,F10.4,F9.4,F10.4,I7,F14.4)
                  ELSE
                      WRITE(6,10700)I,angfixed(I),angfixed(I),angmin(I),
     *                angmax(I),ngang(I), pgang(I)
                      WRITE(1,10700)I,angfixed(I),angfixed(I),angmin(I),
     *                angmax(I),ngang(I), pgang(I)
10700                 FORMAT(I8,F11.4,F10.4,F9.4,F10.4,I7,F14.4)
                  END IF
10681         CONTINUE
10682         CONTINUE
          END IF
          WRITE(6,10710)
          WRITE(1,10710)
10710     FORMAT(' ')
      ELSE IF((isource .EQ. 8)) THEN
          IF ((nang.GT.0)) THEN
              WRITE(6,10720)xiso,yiso,ziso,nang,dsource,phicol,nshist
              WRITE(1,10720)xiso,yiso,ziso,nang,dsource,phicol,nshist
10720         FORMAT( t15,' Full phase space input incident from multipl
     *e angles' // t10,' x-coordinate of the isocenter,' ,t62,f10.4,' cm
     *' / t10,' y-coordinate of the isocenter,' ,t62,f10.4,' cm' / t10,'
     * z-coordinate of the isocenter,' ,t62,f10.4,' cm' / t10,' number o
     *f incident theta-phi:' ,t62,i10/ t10,' Distance from isocenter too
     *rigin in source', ' plane:',t62,f10.4,' cm'/ t10,' Source plane ro
     *tation angle,' ,t62,f10.4,' degrees'/ t10,' Total number of partic
     *les in phase space file:',t62,i12/)
              WRITE(6,10730)
              WRITE(1,10730)
10730         FORMAT(t10,'  theta-phi     theta         phi        norma
     *lized'/ t10,'    pair        (deg.)       (deg.)      probability'
     *)
              DO 10741 I=1,nang
                  IF ((I.EQ.1)) THEN
                      WRITE(6,10750)I,theta(I),phi(I),pang(I)
                      WRITE(1,10750)I,theta(I),phi(I),pang(I)
10750                 FORMAT(t10,i7,f16.4,f13.4,f15.4)
                  ELSE
                      WRITE(6,10760)I,theta(I),phi(I),pang(I)-pang(I-1)
                      WRITE(1,10760)I,theta(I),phi(I),pang(I)-pang(I-1)
10760                 FORMAT(t10,i7,f16.4,f13.4,f15.4)
                  END IF
10741         CONTINUE
10742         CONTINUE
          ELSE IF((nang.LT.0)) THEN
              WRITE(6,10770)xiso,yiso,ziso,-nang,dsource,phicol,nshist
              WRITE(1,10770)xiso,yiso,ziso,-nang,dsource,phicol,nshist
10770         FORMAT( t15,' Full phase space input incident from multipl
     *e angles' // t10,' x-coordinate of the isocenter,' ,t62,f10.4,' cm
     *' / t10,' y-coordinate of the isocenter,' ,t62,f10.4,' cm' / t10,'
     * z-coordinate of the isocenter,' ,t62,f10.4,' cm' / t10,' number t
     *heta-phi groups:' ,t62,i10/ t10,' Distance from isocenter to origi
     *n in source', ' plane:',t62,f10.4,' cm'/ t10,' Source plane rotati
     *on angle,' ,t62,f10.4,' degrees'/ t10,' Total number of particlesi
     *n phase space file:',t62,i12/)
              WRITE(6,10780)
              WRITE(1,10780)
10780         FORMAT('  theta-phi     theta (deg.)       phi (deg.)no. t
     *heta-   normalized'/ '    group      min.     max.      min.   max
     *.    phi pairs    probability')
              DO 10791 I=1,-nang
                  IF ((ivary(I).EQ.1)) THEN
                      WRITE(6,10800)I,angmin(I),angmax(I),angfixed(I),an
     *                gfixed(I),ngang(I), pgang(I)
                      WRITE(1,10800)I,angmin(I),angmax(I),angfixed(I),an
     *                gfixed(I),ngang(I), pgang(I)
10800                 FORMAT(I8,F11.4,F10.4,F9.4,F10.4,I7,F14.4)
                  ELSE
                      WRITE(6,10810)I,angfixed(I),angfixed(I),angmin(I),
     *                angmax(I),ngang(I), pgang(I)
                      WRITE(1,10810)I,angfixed(I),angfixed(I),angmin(I),
     *                angmax(I),ngang(I), pgang(I)
10810                 FORMAT(I8,F11.4,F10.4,F9.4,F10.4,I7,F14.4)
                  END IF
10791         CONTINUE
10792         CONTINUE
          END IF
          WRITE(6,10820)
          WRITE(1,10820)
10820     FORMAT(' ')
          IF ((i_dbs.EQ.1)) THEN
              WRITE(6,10830)r_dbs,ssd_dbs,z_dbs
              WRITE(1,10830)r_dbs,ssd_dbs,z_dbs
10830         FORMAT( ' Directional Bremsstrahlung Splitting (DBS) used'
     */ ' in BEAM simulation to generate phase space source with:'/ '   
     * DBS splitting radius:',t55,f10.4/ '    SSD where radius defined:'
     *,t55,f10.4/ '    Z where source scored:',t55,f10.4/ ' Photons whos
     *e trajectory takes them outside the DBS splitting'/ ' radius at th
     *e SSD will be rejected.'/)
          END IF
          IF ((IPARALLEL.GT.1)) THEN
              IF ((PARNUM.GT.0)) THEN
                  WRITE(6,10840)IPARALLEL,INT((PARNUM-1)*nshist/IPARALLE
     *            L)+1, INT(PARNUM*nshist/IPARALLEL)
                  WRITE(1,10840)IPARALLEL,INT((PARNUM-1)*nshist/IPARALLE
     *            L)+1, INT(PARNUM*nshist/IPARALLEL)
10840             FORMAT('    This is one of ',i4,' parallel simulations
     *.'/ '    It will use from particle ',i12,' to particle ',i12,' in'
     */ '    the phase space source for the simulation.'/)
              ELSE IF((PARNUM.EQ.0)) THEN
                  WRITE(6,10850)IPARALLEL
                  WRITE(1,10850)IPARALLEL
10850             FORMAT('    This is one of ',i4,' parallel simulations
     *.'/ '    It will use the entire specified phase space source'/ '  
     *for the simulation.'/)
              END IF
          END IF
          IF ((iqphsp.EQ.2)) THEN
              WRITE(6,10860)
              WRITE(1,10860)
10860         FORMAT(' Particles to be simulated: all'/)
          ELSE IF((iqphsp.EQ.0)) THEN
              WRITE(6,10870)
              WRITE(1,10870)
10870         FORMAT(' Particles to be simulated: photon only'/)
          ELSE IF((iqphsp.EQ.1)) THEN
              WRITE(6,10880)
              WRITE(1,10880)
10880         FORMAT(' Particles to be simulated: positron only'/)
          ELSE IF((iqphsp.EQ.-1)) THEN
              WRITE(6,10890)
              WRITE(1,10890)
10890         FORMAT(' Particles to be simulated: electron only'/)
          END IF
          IF ((e_split.GT.1 .AND. iqphsp.NE.0)) THEN
              WRITE(6,10900)e_split
              WRITE(1,10900)e_split
10900         FORMAT(/' Charged particles will be split ',i10,' times.'/
     *)
          END IF
      ELSE IF((isource.EQ.9)) THEN
          WRITE(6,10910)xiso,yiso,ziso,theta(1),phi(1),dsource,phicol, t
     *    he_beam_code(:lnblnk1(the_beam_code)),the_input_file(:lnblnk1(
     *    the_input_file)), the_pegs_file(:lnblnk1(the_pegs_file))
          WRITE(1,10910)xiso,yiso,ziso,theta(1),phi(1),dsource,phicol, t
     *    he_beam_code(:lnblnk1(the_beam_code)),the_input_file(:lnblnk1(
     *    the_input_file)), the_pegs_file(:lnblnk1(the_pegs_file))
10910     FORMAT( t15,' BEAM treatment head simulation used as source:'/
     */ t10,' x-coordinate of the isocenter,' ,t62,f10.4,' cm' / t10,' y
     *-coordinate of the isocenter,' ,t62,f10.4,' cm' / t10,' z-coordina
     *te of the isocenter,' ,t62,f10.4,' cm' / t10,' Polar angle of beam
     * axis:' ,t62,f10.4,' degrees'/ t10,' Azimuthal angle of beam axis:
     *' ,t62,f10.4,' degrees'/ t10,' Distance from isocenter to centre o
     *f scoring', ' plane:',t62,f10.4,' cm'/ t10,' Rotation angle about 
     *beam axis,' ,t62,f10.4,' degrees'/ t10,' BEAM simulation: ',a/ t10
     *,'      input file: ',a/ t10,'  pegs data file: ',a/)
          IF ((i_dbs.EQ.1)) THEN
              WRITE(6,10920)
              WRITE(1,10920)
10920         FORMAT(t10,' Fat photons from DBS will be rejected.'/)
          ELSE
              WRITE(6,10930)
              WRITE(1,10930)
10930         FORMAT(t10,' Fat photons from DBS will not be rejected.'/)
          END IF
          IF ((iqinc.EQ.2)) THEN
              WRITE(6,10940)
              WRITE(1,10940)
10940         FORMAT(' Particles to be simulated: all'/)
          ELSE IF((iqinc.EQ.0)) THEN
              WRITE(6,10950)
              WRITE(1,10950)
10950         FORMAT(' Particles to be simulated: photon only'/)
          ELSE IF((iqinc.EQ.1)) THEN
              WRITE(6,10960)
              WRITE(1,10960)
10960         FORMAT(' Particles to be simulated: positron only'/)
          ELSE IF((iqinc.EQ.-1)) THEN
              WRITE(6,10970)
              WRITE(1,10970)
10970         FORMAT(' Particles to be simulated: electron only'/)
          END IF
          IF ((e_split.GT.1 .AND. iqphsp.NE.0)) THEN
              WRITE(6,10980)e_split
              WRITE(1,10980)e_split
10980         FORMAT(/' Charged particles will be split ',i10,' times.'/
     *)
          END IF
      ELSE IF((isource.EQ.10)) THEN
          IF ((nang.GT.0)) THEN
              WRITE(6,10990)xiso,yiso,ziso,nang,dsource,phicol, the_beam
     *        _code(:lnblnk1(the_beam_code)),the_input_file(:lnblnk1(the
     *        _input_file)), the_pegs_file(:lnblnk1(the_pegs_file))
              WRITE(1,10990)xiso,yiso,ziso,nang,dsource,phicol, the_beam
     *        _code(:lnblnk1(the_beam_code)),the_input_file(:lnblnk1(the
     *        _input_file)), the_pegs_file(:lnblnk1(the_pegs_file))
10990         FORMAT( t15,' BEAM simulation source from multiple angles:
     *' // t10,' x-coordinate of the isocenter,' ,t62,f10.4,' cm' / t10,
     *' y-coordinate of the isocenter,' ,t62,f10.4,' cm' / t10,' z-coord
     *inate of the isocenter,' ,t62,f10.4,' cm' / t10,' number of incide
     *nt theta-phi:' ,t62,i10/ t10,' Distance from isocenter tocentre of
     * scoring', ' plane:',t62,f10.4,' cm'/ t10,' Rotation angle about b
     *eam axis,' ,t62,f10.4,' degrees'/ t10,' BEAM simulation:',a/ t10,'
     *      input file: ',a/ t10,'  pegs data file: ',a/)
              WRITE(6,11000)
              WRITE(1,11000)
11000         FORMAT(t10,'  theta-phi     theta         phi        norma
     *lized'/ t10,'    pair        (deg.)       (deg.)      probability'
     *)
              DO 11011 I=1,nang
                  IF ((I.EQ.1)) THEN
                      WRITE(6,11020)I,theta(I),phi(I),pang(I)
                      WRITE(1,11020)I,theta(I),phi(I),pang(I)
11020                 FORMAT(t10,i7,f16.4,f13.4,f15.4)
                  ELSE
                      WRITE(6,11030)I,theta(I),phi(I),pang(I)-pang(I-1)
                      WRITE(1,11030)I,theta(I),phi(I),pang(I)-pang(I-1)
11030                 FORMAT(t10,i7,f16.4,f13.4,f15.4)
                  END IF
11011         CONTINUE
11012         CONTINUE
          ELSE IF((nang.LT.0)) THEN
              WRITE(6,11040)xiso,yiso,ziso,-nang,dsource,phicol, the_bea
     *        m_code(:lnblnk1(the_beam_code)),the_input_file(:lnblnk1(th
     *        e_input_file)), the_pegs_file(:lnblnk1(the_pegs_file))
              WRITE(1,11040)xiso,yiso,ziso,-nang,dsource,phicol, the_bea
     *        m_code(:lnblnk1(the_beam_code)),the_input_file(:lnblnk1(th
     *        e_input_file)), the_pegs_file(:lnblnk1(the_pegs_file))
11040         FORMAT( t15,' BEAM simulation source from multiple angles:
     *' // t10,' x-coordinate of the isocenter,' ,t62,f10.4,' cm' / t10,
     *' y-coordinate of the isocenter,' ,t62,f10.4,' cm' / t10,' z-coord
     *inate of the isocenter,' ,t62,f10.4,' cm' / t10,' number of theta-
     *phi groups:' ,t62,i10/ t10,' Distance from isocenter to centre of 
     *scoring', ' plane:',t62,f10.4,' cm'/ t10,' Rotation angleabout bea
     *m axis,' ,t62,f10.4,' degrees'/ t10,' BEAM simulation: ',a/ t10,' 
     *     input file: ',a/ t10,'  pegs data file: ',a/)
              WRITE(6,11050)
              WRITE(1,11050)
11050         FORMAT('  theta-phi     theta (deg.)       phi (deg.)no. t
     *heta-   normalized'/ '    group      min.     max.      min.   max
     *.    phi pairs    probability')
              DO 11061 I=1,-nang
                  IF ((ivary(I).EQ.1)) THEN
                      WRITE(6,11070)I,angmin(I),angmax(I),angfixed(I),an
     *                gfixed(I),ngang(I), pgang(I)
                      WRITE(1,11070)I,angmin(I),angmax(I),angfixed(I),an
     *                gfixed(I),ngang(I), pgang(I)
11070                 FORMAT(I8,F11.4,F10.4,F9.4,F10.4,I7,F14.4)
                  ELSE
                      WRITE(6,11080)I,angfixed(I),angfixed(I),angmin(I),
     *                angmax(I),ngang(I), pgang(I)
                      WRITE(1,11080)I,angfixed(I),angfixed(I),angmin(I),
     *                angmax(I),ngang(I), pgang(I)
11080                 FORMAT(I8,F11.4,F10.4,F9.4,F10.4,I7,F14.4)
                  END IF
11061         CONTINUE
11062         CONTINUE
          END IF
          IF ((i_dbs.EQ.1)) THEN
              WRITE(6,11090)
              WRITE(1,11090)
11090         FORMAT(t10,' Fat photons from DBS will be rejected.'/)
          ELSE
              WRITE(6,11100)
              WRITE(1,11100)
11100         FORMAT(t10,' Fat photons from DBS will not be rejected.'/)
          END IF
          IF ((iqinc.EQ.2)) THEN
              WRITE(6,11110)
              WRITE(1,11110)
11110         FORMAT(' Particles to be simulated: all'/)
          ELSE IF((iqinc.EQ.0)) THEN
              WRITE(6,11120)
              WRITE(1,11120)
11120         FORMAT(' Particles to be simulated: photon only'/)
          ELSE IF((iqinc.EQ.1)) THEN
              WRITE(6,11130)
              WRITE(1,11130)
11130         FORMAT(' Particles to be simulated: positron only'/)
          ELSE IF((iqinc.EQ.-1)) THEN
              WRITE(6,11140)
              WRITE(1,11140)
11140         FORMAT(' Particles to be simulated: electron only'/)
          END IF
          IF ((e_split.GT.1 .AND. iqphsp.NE.0)) THEN
              WRITE(6,11150)e_split
              WRITE(1,11150)e_split
11150         FORMAT(/' Charged particles will be split ',i10,' times.'/
     *)
          END IF
      ELSE IF((isource.EQ.20)) THEN
          IF ((nset.GT.1)) THEN
              WRITE(6,11160)nset,dsource,nshist,the_shared_lib(:lnblnk1(
     *        the_shared_lib)), the_input_file(:lnblnk1(the_input_file))
              WRITE(1,11160)nset,dsource,nshist,the_shared_lib(:lnblnk1(
     *        the_shared_lib)), the_input_file(:lnblnk1(the_input_file))
11160         FORMAT( t15,'Phase Space Incident from multiple settings t
     *hrough a BEAM/MLC '// t10,' number of incident settings:' ,t62,i10
     */ t10,' first distance from isocenter to origin in source', ' plan
     *e:',t62,f10.4,' cm'/ t10,' Total number of particles in phase spac
     *e file:',t62,i12/ t10,' Shared library simulation: ',a/ t10,' Shar
     *ed library input file: ',a/)
              WRITE(6,11170)
              WRITE(1,11170)
11170         FORMAT(t10,'   setting      xiso      yiso           ziso 
     *      theta', '       phi          phicol         ', 'SAD MU Index
     *'/ t10,'   num           (cm)          (cm)           (cm)        
     * (deg.)', '     (deg.)             (deg.)          (cm)')
              DO 11181 I=1,nset
                  WRITE(6,11190)I,xtemp(I),ytemp(I),ztemp(I),thetatemp(I
     *            ),phitemp(I), phicoltemp(I),dsourcetemp(I),muIndex(I)
                  WRITE(1,11190)I,xtemp(I),ytemp(I),ztemp(I),thetatemp(I
     *            ),phitemp(I), phicoltemp(I),dsourcetemp(I),muIndex(I)
11190             FORMAT(t10,i7,f15.4,f11.4,f15.4,f12.4,f13.4,f11.4,f11.
     *4,f10.4)
11181         CONTINUE
11182         CONTINUE
          END IF
          WRITE(6,11200)
          WRITE(1,11200)
11200     FORMAT(' ')
          IF ((i_dbs.EQ.1)) THEN
              WRITE(6,11210)r_dbs,ssd_dbs,z_dbs
              WRITE(1,11210)r_dbs,ssd_dbs,z_dbs
11210         FORMAT( ' Directional Bremsstrahlung Splitting (DBS) used'
     */ ' in BEAM simulation to generate phase space source with:'/ '   
     * DBS splitting radius:',t55,f10.4/ '    SSD where radius defined:'
     *,t55,f10.4/ '    Z where source scored:',t55,f10.4/ ' Photons whos
     *e trajectory takes them outside the DBS splitting'/ ' radius at th
     *e SSD will be rejected.'/)
          END IF
          IF ((iqinc.EQ.2)) THEN
              WRITE(6,11220)
              WRITE(1,11220)
11220         FORMAT(' Particles to be simulated: all'/)
          ELSE IF((iqinc.EQ.0)) THEN
              WRITE(6,11230)
              WRITE(1,11230)
11230         FORMAT(' Particles to be simulated: photon only'/)
          ELSE IF((iqinc.EQ.1)) THEN
              WRITE(6,11240)
              WRITE(1,11240)
11240         FORMAT(' Particles to be simulated: positron only'/)
          ELSE IF((iqinc.EQ.-1)) THEN
              WRITE(6,11250)
              WRITE(1,11250)
11250         FORMAT(' Particles to be simulated: electron only'/)
          END IF
          IF ((e_split.GT.1 .AND. iqphsp.NE.0)) THEN
              WRITE(6,11260)e_split
              WRITE(1,11260)e_split
11260         FORMAT(/' Charged particles will be split ',i10,' times.'/
     *)
          END IF
      ELSE IF((isource.EQ.21)) THEN
          IF ((nset.GT.1)) THEN
              WRITE(6,11270)nset,dsource, the_beam_code(:lnblnk1(the_bea
     *        m_code)),the_input_file(:lnblnk1(the_input_file)), the_peg
     *        s_file(:lnblnk1(the_pegs_file)),the_vcu_code(:lnblnk1(the_
     *        vcu_code)), the_vcu_input_file(:lnblnk1(the_vcu_input_file
     *        ))
              WRITE(1,11270)nset,dsource, the_beam_code(:lnblnk1(the_bea
     *        m_code)),the_input_file(:lnblnk1(the_input_file)), the_peg
     *        s_file(:lnblnk1(the_pegs_file)),the_vcu_code(:lnblnk1(the_
     *        vcu_code)), the_vcu_input_file(:lnblnk1(the_vcu_input_file
     *        ))
11270         FORMAT( t15,'BEAM treatment simulation used as source ' //
     *t10,' number of incident settings:' ,t62,i10/ t10,' first distance
     * from isocenter to origin in source', ' plane:',t62,f10.4,' cm'/ t
     *10,' BEAM simulation: ',a/ t10,' input file: ',a/t10,' pegs data f
     *ile: ',a/ t10,' VCU simulation: ',a/ t10,' VCU input file: ',a/)
              WRITE(6,11280)
              WRITE(1,11280)
11280         FORMAT(t10,'   setting      xiso      yiso           ziso 
     *      theta', '       phi          phicol         ', 'SAD MU Index
     *'/ t10,'   num           (cm)          (cm)           (cm)        
     * (deg.)', '     (deg.)             (deg.)          (cm)')
              DO 11291 I=1,nset
                  WRITE(6,11300)I,xtemp(I),ytemp(I),ztemp(I),thetatemp(I
     *            ),phitemp(I), phicoltemp(I),dsourcetemp(I),muIndex(I)
                  WRITE(1,11300)I,xtemp(I),ytemp(I),ztemp(I),thetatemp(I
     *            ),phitemp(I), phicoltemp(I),dsourcetemp(I),muIndex(I)
11300             FORMAT(t10,i7,f15.4,f11.4,f15.4,f12.4,f13.4,f11.4,f11.
     *4,f10.4)
11291         CONTINUE
11292         CONTINUE
          END IF
          WRITE(6,11310)
          WRITE(1,11310)
11310     FORMAT(' ')
          IF ((i_dbs.EQ.1)) THEN
              WRITE(6,11320)
              WRITE(1,11320)
11320         FORMAT(t10,' Fat photons from DBS will be rejected.'/)
          ELSE
              WRITE(6,11330)
              WRITE(1,11330)
11330         FORMAT(t10,' Fat photons from DBS will not be rejected.'/)
          END IF
          IF ((iqinc.EQ.2)) THEN
              WRITE(6,11340)
              WRITE(1,11340)
11340         FORMAT(' Particles to be simulated: all'/)
          ELSE IF((iqinc.EQ.0)) THEN
              WRITE(6,11350)
              WRITE(1,11350)
11350         FORMAT(' Particles to be simulated: photon only'/)
          ELSE IF((iqinc.EQ.1)) THEN
              WRITE(6,11360)
              WRITE(1,11360)
11360         FORMAT(' Particles to be simulated: positron only'/)
          ELSE IF((iqinc.EQ.-1)) THEN
              WRITE(6,11370)
              WRITE(1,11370)
11370         FORMAT(' Particles to be simulated: electron only'/)
          END IF
          IF ((e_split.GT.1 .AND. iqphsp.NE.0)) THEN
              WRITE(6,11380)e_split
              WRITE(1,11380)e_split
11380         FORMAT(/' Charged particles will be split ',i10,' times.'/
     *)
          END IF
      END IF
      IF ((isource .EQ. 4)) THEN
      END IF
      return
      end
      subroutine srchst(xin,yin,zin,uin,vin,win,irin,weight,latchi)
      implicit none
      COMMON/ENERGYSRC/NENSRC,IMODE,ENSRCD,SRCPDF,SRCCDF,ENMIN,CDFINV,DE
     *LTAK
      REAL ENSRCD(200),SRCPDF(200),SRCCDF(200),ENMIN, CDFINV(1000,2),DEL
     *TAK
      INTEGER IMODE,NENSRC
      common/source/ esrc,  nhist,  nnread,  nshist,  nphist,  nnphsp,
     *einsrc,  xsrcold,  ysrcold,  zsrcold,  usrcold,  vsrcold,  wsrcold
     *,  weightold, mu_phspold,  frMU_indx,  zinc,  xinl,  xinu,  yinl,
     * yinu,  zinl,  zinu,  thetax,  thetay,  thetaz,  uinc,  vinc,  win
     *c,  beamarea, xcol,  ycol,  xiso,  yiso,  ziso,  phicol,  theta(60
     *000),  phi(60000),  pang(60000),  angfixed(60000),  angmin(60000),
     *  angmax(60000),  pgang(60000),  xtemp(60000),  ytemp(60000),  zte
     *mp(60000),  phicoltemp(60000), thetatemp(60000),  phitemp(60000),
     * muIndex(60000),  r_11(60000), r_12(60000), r_13(60000), r_21(6000
     *0), r_22(60000), r_23(60000), r_31(60000), r_32(60000), r_33(60000
     *), dsource, dsourcetemp(60000), ein,  eksrcm,  esrc_sp,  SSD,  ein
     *srcold, NINCSRC,  r_dbs,  ssd_dbs,  z_dbs,  iqinold,  latchold,  e
     *nflag,  dflag,  ismode,  isource,     iqin,        iqphsp,
     *           iqinc,                          SHLflag,     calflag,
     *   MLCflag,     ixinl,       ixinu,       jyinl,       jyinu,
     *  kzinl,       kzinu,       klowx,       khix,        klowy,
     * khiy,        klowz,       khiz,        survival_ratio,        nsm
     *iss,      nsblocked,     nsrjct,      nsoutside,     nmissm,
     *IPRIMARY,                                            OLDSRC,
     * npassi,                     nang,         ivary(60000),     ngang
     *(60000),       nset,            more_in_cont,                 numa
     *ng,       dose_stat,      ndbsrjct,                        i_dbs,
     *         iphatsrc,         e_split,                           i_ia
     *ea_in,      i_mu_phsp,           izscore,             i_unit_in,
     *                k_field,                       nhist_last,
     *         the_beam_code,         the_input_file,      the_vcu_input
     *_file,                        the_pegs_file,           the_shared_
     *lib,                    the_vcu_code,               the_phsp_file
      real*8    esrc,muIndex
      integer*8 nhist, nnread,nshist,nphist,nnphsp
      real*8 einsrc, xsrcold, ysrcold,usrcold,vsrcold,wsrcold,weightold,
     *               frMU_indx,zsrcold,mu_phspold
      real*4    zinc, xinl, xinu, yinl, yinu, zinl, zinu, thetax, thetay
     *, thetaz,     uinc, vinc, winc, beamarea, xcol,ycol,xiso, yiso, zi
     *so, phicol,                 theta, phi, xtemp, ytemp, ztemp, phico
     *ltemp,thetatemp, phitemp,                 pang,angfixed,angmin,ang
     *max,pgang,r_11, r_12, r_13, r_21,                       r_22, r_23
     *, r_31, r_32, r_33,dsource,dsourcetemp,
     *    ein, eksrcm, esrc_sp, SSD, NINCSRC,
     *                  r_dbs, ssd_dbs,z_dbs,survival_ratio,einsrcold
      integer*4 isource, iqin, iqphsp, iqinc,latchold,iqinold,MLCflag,SH
     *Lflag,         calflag, ixinl, ixinu, jyinl, jyinu, kzinl, kzinu,
     *                             klowx, khix, klowy, khiy, klowz, khiz
     *,                                          nsmiss, nsblocked, nsrj
     *ct,nsoutside, nmissm,enflag,                             dflag, is
     *mode, IPRIMARY, OLDSRC,npassi,nang,ivary,ngang,numang,dose_stat,
     *     ndbsrjct,i_dbs,iphatsrc,e_split,i_iaea_in,i_mu_phsp,izscore,i
     *_unit_in,          num_field,more_in_cont,nset,k_field
      integer*2 nhist_last
      character*80 the_beam_code, the_vcu_code, the_input_file,the_pegs_
     *file,        the_shared_lib,the_vcu_input_file
      character*256 the_phsp_file
      COMMON/SOURCE_FORPARALLEL/nnphsp_max, nnphsp_min
      integer*8 nnphsp_max, nnphsp_min
      common/geom/ xbound(128+1),  ybound(128+1),  zbound(128+1),  xboun
     *d_min,  xbound_max,  ybound_min,  ybound_max,  zbound_min,  zbound
     *_max,  medsur,  dsurround(4),  IMAX,  JMAX,  KMAX,  ijmax,  irmax,
     *  howfarless
      real*4 xbound, ybound, zbound, xbound_min, xbound_max, ybound_min,
     * ybound_max, zbound_min, zbound_max,dsurround
      integer medsur,IMAX, JMAX, KMAX, ijmax,irmax
      logical howfarless
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/PHSPFILE/BEAM_SIZE,MODE_PHSP1,LATCH_OPT, NCASE_PHSP,LATBIT,
     *NBIT1,NBIT2,I_BIT_FILTER,NofREPEAT,ISMOOTH, OUTCNT,NRCYCL,IPARALLE
     *L,PARNUM,CYCLNUM
      real BEAM_SIZE
      INTEGER MODE_PHSP1,LATCH_OPT,NCASE_PHSP,LATBIT(20),NBIT1,NBIT2, I_
     *BIT_FILTER,NofREPEAT,ISMOOTH,OUTCNT,NRCYCL,IPARALLEL,PARNUM,CYCLNU
     *M
      COMMON/RWPHSP/ STRING_TEMP_ZLAST_OUT,  STRING_TEMP_OUT,  IHSTRY_PH
     *SP,   iaea_dummy_long,  NHSTRY_DOS,   ESHORT,  WEIGHTTMP,  WT_PHSP
     *_SHORT,  X_PHSP_SHORT,  Y_PHSP_SHORT,  Z_PHSP_SHORT,  U_PHSP_SHORT
     *,  V_PHSP_SHORT,  W_PHSP_SHORT,  ZLAST_PHSP_SHORT,  MUIDX_PHSP_SHO
     *RT,  EKMAX_PHSP_SHORT,  EKMINE_PHSP_SHORT,  NINC_PHSP_SHORT,  dosx
     *yz2beam_index,  iaea_extra_floats,  NUM_PHSP_TOT,  PHOT_PHSP_TOT,
     *iaea_result,   iaea_n_stat,  iaea_q_typ,  iaea_typ_q,  iaea_q_inde
     *x,  I_PHSP,  IERR_PHSP,  LATCHTMP,  WRITE_PHSP_COUNTER,  WRITE_PHS
     *P_SOFAR,  PHSP_RESTART,  PHSP_RECL,  PHSP_RECL_OLD,  iaea_extra_in
     *ts,  iaea_extra_int_types,iaea_extra_float_types,   iaea_i_zlast,
     * iaea_i_latch,  iaea_i_muidx,  iaea_n_extra_ints,  iaea_n_extra_fl
     *oats,  i_iaea_open_for_write,   iaea_i_zlast_out,  iaea_i_latch_ou
     *t,  iaea_i_muidx_out,  dosxyz2beam_izscore,  MODE_RW
      CHARACTER*32000 STRING_TEMP_ZLAST_OUT(1)
      CHARACTER*28000 STRING_TEMP_OUT(1)
      integer*8 IHSTRY_PHSP(1),iaea_dummy_long,NHSTRY_DOS
      REAL*4 ESHORT,WEIGHTTMP,WT_PHSP_SHORT,X_PHSP_SHORT,Y_PHSP_SHORT, Z
     *_PHSP_SHORT,U_PHSP_SHORT, V_PHSP_SHORT,W_PHSP_SHORT,ZLAST_PHSP_SHO
     *RT, MUIDX_PHSP_SHORT, EKMAX_PHSP_SHORT,EKMINE_PHSP_SHORT,NINC_PHSP
     *_SHORT,dosxyz2beam_index, iaea_extra_floats(10)
      INTEGER NUM_PHSP_TOT,PHOT_PHSP_TOT, iaea_result,iaea_n_stat,iaea_q
     *_typ(3),iaea_typ_q(3),iaea_q_index,I_PHSP, IERR_PHSP,LATCHTMP, WRI
     *TE_PHSP_COUNTER(1),WRITE_PHSP_SOFAR(1), PHSP_RESTART,PHSP_RECL,PHS
     *P_RECL_OLD,iaea_extra_ints(10), iaea_extra_int_types(10),iaea_extr
     *a_float_types(10),iaea_i_zlast, iaea_i_latch,iaea_i_muidx,iaea_n_e
     *xtra_ints,iaea_n_extra_floats, i_iaea_open_for_write,iaea_i_zlast_
     *out,iaea_i_latch_out, iaea_i_muidx_out,dosxyz2beam_izscore
      CHARACTER*5 MODE_RW
      INTEGER LATCH_TEMP_OUT,NUM_PHSP_TOFLUSH,TEMP_PHSP_COUNTER,REM_PHSP
      REAL*4 REAL_TEMP_OUT(7)
      CHARACTER*32 REC_TEMP_OUT
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/score/endep( 2097153), endep2( 2097153), temp2, planarefe,
     *planarefp,planarfe,planarfp, nestep, endep_tmp( 2097153), i_phsp_o
     *ut,i_muidx_out,i_unit_out,IWATCH,mxnp, endep_last( 2097153)
      REAL*8 endep, endep2, temp2,planarefe, planarefp, planarfe, planar
     *fp
      integer*8 nestep
      real endep_tmp
      integer i_phsp_out,   i_muidx_out,    i_unit_out,  IWATCH,mxnp
      integer*2 endep_last
      real*8 xsrc,ysrc,zsrc,  xsrcp,ysrcp,zsrcp,  usrc,vsrc,wsrc,  xinde
     *l,yindel,zindel,  xin,yin,zin,  uin,vin,win,  enin,  zsrcdum,  SAD
     *_s20,  r1,rnno1,rnno2,  fw, rxyz,  costheta,sintheta, weight,  zla
     *st, dist, dist_dbs,  coscol,sincol, cosphi,sinphi, mu_phsp
      real*8 RBEAM,DIST_RAY
      integer*4 ix,jy,kz,i,j,k, irin,  latchi,  ibit
      integer*8 n_hist_dum
      save wsrc
      zsrc = dsource
      IF ((isource .EQ. 0)) THEN
          xindel = xinu-xinl
          IF ((xindel .EQ. 0.0)) THEN
              xin=xinl
          ELSE
              IF((rng_seed .GT. 128))call ranmar_get
              r1 = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              xin = xinl + r1*xindel
          END IF
          yindel = yinu-yinl
          IF ((YINDEL .EQ. 0.0)) THEN
              yin=yinl
          ELSE
              IF((rng_seed .GT. 128))call ranmar_get
              r1 = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              yin = yinl + r1*yindel
          END IF
          zin = zinc
          uin=uinc
          vin=vinc
          win=winc
          IF ((xindel .EQ. 0.0)) THEN
              ix=ixinl
          ELSE
              ix=ixinl-1
11391         CONTINUE
                  ix=ix+1
                  IF((( xbound(ix) .LE. xin .AND. xbound(ix+1) .GT. xin
     *            )))GO TO11392
              GO TO 11391
11392         CONTINUE
          END IF
          IF ((yindel .EQ. 0.0)) THEN
              jy=jyinl
          ELSE
              jy=jyinl-1
11401         CONTINUE
                  jy=jy+1
                  IF((( ybound(jy) .LE. yin .AND. ybound(jy+1) .GT. yin)
     *            ))GO TO11402
              GO TO 11401
11402         CONTINUE
          END IF
          irin = 1 + ix +(jy-1)*imax
          IF ((enflag .EQ. 1)) THEN
              IF((rng_seed .GT. 128))call ranmar_get
              RNNO1 = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF((rng_seed .GT. 128))call ranmar_get
              RNNO2 = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              K = MIN(DELTAK*RNNO1+1.,DELTAK)
              esrc_sp = CDFINV(K,1) + RNNO2*CDFINV(K,2)
          END IF
          return
      END IF
      IF ((isource .EQ. 3)) THEN
          xindel = xinu-xinl
          yindel = yinu-yinl
          IF ((xindel .EQ. 0.0 .OR. yindel .EQ. 0.0 )) THEN
              XIN = xinl
              YIN = yinl
              RXYZ=SQRT(SSD*SSD+XIN*XIN+YIN*YIN)
          ELSE
11411         CONTINUE
                  IF((rng_seed .GT. 128))call ranmar_get
                  r1 = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  xin=r1*xindel+xinl
                  IF((rng_seed .GT. 128))call ranmar_get
                  r1 = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  yin=r1*yindel+yinl
                  IF((rng_seed .GT. 128))call ranmar_get
                  r1 = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  RXYZ=SQRT(SSD*SSD+xin*xin+yin*yin)
                  win=SSD/RXYZ
                  FW=win**3.
                  IF((r1.LT.FW))GOTO 11420
              GO TO 11411
11412         CONTINUE
11420         CONTINUE
          END IF
          zin = zinc
          uin=XIN/RXYZ
          vin=YIN/RXYZ
          IF ((xindel .EQ. 0.0)) THEN
              ix=ixinl
          ELSE
              ix=ixinl-1
11431         CONTINUE
                  ix=ix+1
                  IF((( xbound(ix) .LE. xin .AND. xbound(ix+1) .GT. xin
     *            )))GO TO11432
              GO TO 11431
11432         CONTINUE
          END IF
          IF ((yindel .EQ. 0.0)) THEN
              jy=jyinl
          ELSE
              jy=jyinl-1
11441         CONTINUE
                  jy=jy+1
                  IF((( ybound(jy) .LE. yin .AND. ybound(jy+1) .GT. yin)
     *            ))GO TO11442
              GO TO 11441
11442         CONTINUE
          END IF
          irin = 1 + ix +(jy-1)*imax
          IF ((enflag .EQ. 1)) THEN
              IF((rng_seed .GT. 128))call ranmar_get
              RNNO1 = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF((rng_seed .GT. 128))call ranmar_get
              RNNO2 = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              K = MIN(DELTAK*RNNO1+1.,DELTAK)
              esrc_sp = CDFINV(K,1) + RNNO2*CDFINV(K,2)
          END IF
          return
      END IF
      IF ((isource .EQ. 6)) THEN
          xindel = xinu-xinl
          yindel = yinu-yinl
          zindel = zinu-zinl
          IF ((xindel .EQ. 0.0)) THEN
              xin=xinl
          ELSE
              IF((rng_seed .GT. 128))call ranmar_get
              r1 = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              xin = xinl + r1*xindel
          END IF
          IF ((yindel .EQ. 0.0)) THEN
              yin=yinl
          ELSE
              IF((rng_seed .GT. 128))call ranmar_get
              r1 = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              yin = yinl + r1*yindel
          END IF
          IF ((zindel .EQ. 0.0)) THEN
              zin=zinl
          ELSE
              IF((rng_seed .GT. 128))call ranmar_get
              r1 = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              zin = zinl + r1*zindel
          END IF
          IF((rng_seed .GT. 128))call ranmar_get
          costheta = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          costheta=2.*costheta-1
          sintheta=SQRT(1.0-costheta**2)
          IF((rng_seed .GT. 128))call ranmar_get
          phi(1) = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          phi(1)=6.283185*phi(1)
          uin=sintheta*COS(phi(1))
          vin=sintheta*SIN(phi(1))
          win=costheta
          IF ((xindel .EQ. 0.0)) THEN
              ix=ixinl
          ELSE
              ix=ixinl-1
11451         CONTINUE
                  ix=ix+1
                  IF((( xbound(ix) .LE. xin .AND. xbound(ix+1) .GT. xin
     *            )))GO TO11452
              GO TO 11451
11452         CONTINUE
          END IF
          IF ((yindel .EQ. 0.0)) THEN
              jy=jyinl
          ELSE
              jy=jyinl-1
11461         CONTINUE
                  jy=jy+1
                  IF((( ybound(jy) .LE. yin .AND. ybound(jy+1) .GT. yin)
     *            ))GO TO11462
              GO TO 11461
11462         CONTINUE
          END IF
          IF ((zindel .EQ. 0.0)) THEN
              kz=kzinl
          ELSE
              kz=kzinl-1
11471         CONTINUE
                  kz=kz+1
                  IF((( zbound(kz) .LE. zin .AND. zbound(kz+1) .GT. zin)
     *            ))GO TO11472
              GO TO 11471
11472         CONTINUE
          END IF
          irin = (1 + ix + (jy-1)*IMAX + (kz-1)*ijmax)
          IF ((enflag .EQ. 1)) THEN
              IF((rng_seed .GT. 128))call ranmar_get
              RNNO1 = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF((rng_seed .GT. 128))call ranmar_get
              RNNO2 = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              K = MIN(DELTAK*RNNO1+1.,DELTAK)
              esrc_sp = CDFINV(K,1) + RNNO2*CDFINV(K,2)
          END IF
          return
      END IF
11480 CONTINUE
      IF ((isource .EQ. 1 .OR. isource.EQ.7)) THEN
          wsrc = 1.0
          usrc = 0.
          vsrc = 0.
          IF((rng_seed .GT. 128))call ranmar_get
          xsrc = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF((rng_seed .GT. 128))call ranmar_get
          ysrc = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          xsrc = (xsrc-0.5)*xcol
          ysrc = (ysrc-0.5)*ycol
          IF ((enflag .EQ. 1)) THEN
              IF((rng_seed .GT. 128))call ranmar_get
              RNNO1 = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF((rng_seed .GT. 128))call ranmar_get
              RNNO2 = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              K = MIN(DELTAK*RNNO1+1.,DELTAK)
              enin = CDFINV(K,1) + RNNO2*CDFINV(K,2)
              esrc_sp = enin
          END IF
      ELSE IF((isource .EQ. 2 .OR. isource.EQ.8)) THEN
          IF ((NRCYCL.GT.0 .AND. CYCLNUM.GT.0 .AND. CYCLNUM.LE.NRCYCL))
     *    THEN
              NofREPEAT=NofREPEAT+1
              CYCLNUM=CYCLNUM+1
              xsrc=xsrcold
              ysrc=ysrcold
              IF((i_iaea_in.EQ.1))zsrc=zsrcold
              usrc=usrcold
              vsrc=vsrcold
              wsrc=wsrcold
              einsrc=einsrcold
              iqin=iqinold
              weight=weightold
              latchi=latchold
          ELSE
11491         CONTINUE
11500             CONTINUE
                  IF ((n_parallel.GT.0 .AND. nnphsp.GT.nnphsp_max)) THEN
                      nnphsp=nnphsp_min
                      OUTCNT=OUTCNT+1
                      WRITE(6,11510)
11510                 FORMAT(///' ***WARNING*** USED ALL PARTICLES FROMC
     *HUNK IN SOURCE FILE!'/ '               RESTARTING FROM FIRST PARTI
     *CLE IN THIS CHUNK.'// /1x,79('*')//)
                      IF ((i_iaea_in.EQ.1)) THEN
                          nhist=OUTCNT*NINCSRC/(n_parallel*10)
                          iaea_dummy_long=nnphsp
                          call iaea_set_record(i_unit_in,iaea_dummy_long
     *                    ,iaea_result)
                          IF ((iaea_result.LT.0)) THEN
                              WRITE(i_log,*)' Error going to record ',nn
     *                        phsp,' in IAEA phsp file.'
                              call exit(1)
                          END IF
                      END IF
                  ELSE IF((IPARALLEL.GT.1 .AND. PARNUM.GT.0 .AND. nnphsp
     *             .GT. INT(PARNUM*nshist/IPARALLEL))) THEN
                      NofREPEAT = NofREPEAT + 1
                      OUTCNT=OUTCNT+1
                      WRITE(6,11520)
                      WRITE(1,11520)
11520                 FORMAT(/' *** Warning *** Used all particles fromp
     *artition of source file'/ '                 Restarting from first 
     *particle in this partition'/)
                      nnphsp = INT((PARNUM-1)*nshist/IPARALLEL)+1
                      IF ((i_iaea_in.EQ.1)) THEN
                          nhist=OUTCNT*NINCSRC/IPARALLEL
                          iaea_dummy_long=nnphsp
                          call iaea_set_record(i_unit_in,iaea_dummy_long
     *                    ,iaea_result)
                          IF ((iaea_result.LT.0)) THEN
                              WRITE(i_log,*)' Error going to record ',nn
     *                        phsp,' in IAEA phsp file.'
                              call exit(1)
                          END IF
                      END IF
                  ELSE IF(( nnphsp .GT. nshist)) THEN
                      NofREPEAT = NofREPEAT + 1
                      OUTCNT=OUTCNT+1
                      WRITE(6,11530)
                      WRITE(1,11530)
11530                 FORMAT(/' *** Warning *** Used all particles froms
     *ource file'/ '                 Restarting from first particle infi
     *le'/)
                      nnphsp = 1
                      IF ((i_iaea_in.EQ.1)) THEN
                          nhist=OUTCNT*NINCSRC
                          iaea_dummy_long=nnphsp
                          call iaea_set_record(i_unit_in,iaea_dummy_long
     *                    ,iaea_result)
                          IF ((iaea_result.LT.0)) THEN
                              WRITE(i_log,*)' Error going to record ',nn
     *                        phsp,' in IAEA phsp file.'
                              call exit(1)
                          END IF
                      END IF
                  END IF
                  nnphsp = nnphsp+1
                  IF ((i_iaea_in.EQ.1)) THEN
                      npassi=0
                      call iaea_get_particle(i_unit_in,iaea_n_stat,iaea_
     *                q_index,ESHORT,WT_PHSP_SHORT, X_PHSP_SHORT,Y_PHSP_
     *                SHORT,Z_PHSP_SHORT,U_PHSP_SHORT, V_PHSP_SHORT,W_PH
     *                SP_SHORT,iaea_extra_floats,iaea_extra_ints)
                      IF ((iaea_n_stat.EQ.-1)) THEN
                          WRITE(i_log,*)' Error getting particle data fr
     *om IAEA phsp file.'
                          call exit(1)
                      ELSE IF((iaea_n_stat.EQ.-2)) THEN
                          WRITE(i_log,*)' WARNING: Reached end of IAEA p
     *hsp file.  File restarted.'
                      ELSE IF((iaea_n_stat.GE.0)) THEN
                          nhist=nhist+iaea_n_stat
                          IF ((iaea_i_latch.EQ.-99)) THEN
                              latchi=0
                          ELSE
                              latchi=iaea_extra_ints(iaea_i_latch)
                          END IF
                          iqin=iaea_typ_q(iaea_q_index)
                          IF (( (iqin.EQ.1) .OR. (iqin.EQ.-1) )) THEN
                              ESHORT = ESHORT + 0.5109989461
                          END IF
                          einsrc=ESHORT
                          IF ((iaea_i_zlast.EQ.-99)) THEN
                              ZLAST_PHSP_SHORT=0
                          ELSE
                              ZLAST_PHSP_SHORT= iaea_extra_floats(iaea_i
     *                        _zlast)
                          END IF
                          IF ((iaea_i_muidx.EQ.-99)) THEN
                              MUIDX_PHSP_SHORT=0
                          ELSE
                              MUIDX_PHSP_SHORT= iaea_extra_floats(iaea_i
     *                        _muidx)
                          END IF
                          weight=WT_PHSP_SHORT
                          xsrc=X_PHSP_SHORT
                          ysrc=Y_PHSP_SHORT
                          zsrc=Z_PHSP_SHORT
                          usrc=U_PHSP_SHORT
                          vsrc=V_PHSP_SHORT
                          wsrc=W_PHSP_SHORT
                          zlast=ZLAST_PHSP_SHORT
                          mu_phsp=MUIDX_PHSP_SHORT
                      END IF
                  ELSE
                      IF ((ismode.NE.0)) THEN
                          READ(44,REC=nnphsp,IOSTAT=IERR_PHSP) latchi,ES
     *                    HORT,X_PHSP_SHORT,Y_PHSP_SHORT, U_PHSP_SHORT,V
     *                    _PHSP_SHORT,WT_PHSP_SHORT,ZLAST_PHSP_SHORT
                      ELSE
                          READ(44,REC=nnphsp,IOSTAT=IERR_PHSP) latchi,ES
     *                    HORT,X_PHSP_SHORT,Y_PHSP_SHORT, U_PHSP_SHORT,V
     *                    _PHSP_SHORT,WT_PHSP_SHORT
                      END IF
                      IF ((nnphsp.EQ.76695869)) THEN
                          write(*,*)' x,y,u,v,wt,eshort,latch', X_PHSP_S
     *                    HORT,Y_PHSP_SHORT,U_PHSP_SHORT,V_PHSP_SHORT, W
     *                    T_PHSP_SHORT,ESHORT,latchi
                      END IF
                      IF ((ESHORT.LT.0.0)) THEN
                          nhist=nhist+1
                          ESHORT=ABS(ESHORT)
                      END IF
                      einsrc=ESHORT
                      weight=WT_PHSP_SHORT
                      xsrc=X_PHSP_SHORT
                      ysrc=Y_PHSP_SHORT
                      usrc=U_PHSP_SHORT
                      vsrc=V_PHSP_SHORT
                      IF((ismode.NE.0))zlast=ZLAST_PHSP_SHORT
                      IF ((IERR_PHSP.EQ.0)) THEN
                          einsrc=ESHORT
                          IF ((BTEST(latchi,31))) THEN
                              npassi = 1
                              latchi = IBCLR(latchi,31)
                          ELSE
                              npassi = 0
                          END IF
                          IF ((BTEST(latchi,30))) THEN
                              iqin = -1
                              latchi = IBCLR(latchi,30)
                              latchi = IBCLR(latchi,29)
                          ELSE
                              IF ((BTEST(latchi,29))) THEN
                                  iqin = 1
                                  latchi = IBCLR(latchi,29)
                              ELSE
                                  iqin = 0
                              END IF
                          END IF
                          wsrc = min( 1., usrc**2 + vsrc**2)
                          wsrc = sqrt(1. - wsrc)
                          wsrc = SIGN(wsrc,weight)
                          weight=ABS(weight)
                      END IF
                  END IF
                  nnread = nnread +1
                  IF ((wsrc .LT. 0.0)) THEN
                      nsrjct=nsrjct+1
                      goto 11500
                  END IF
                  IF (( npassi.EQ.1 )) THEN
                      nsrjct=nsrjct+1
                      goto 11500
                  ELSE IF(( iqin.EQ.1 .AND. iqphsp .NE. 1 .AND. iqphsp .
     *            NE.2)) THEN
                      nsrjct=nsrjct+1
                      goto 11500
                  ELSE IF(( iqin.EQ.0 .AND. iqphsp .NE. 0 .AND. iqphsp .
     *            NE.2)) THEN
                      nsrjct=nsrjct+1
                      goto 11500
                  ELSE IF(( iqin.EQ.-1 .AND. iqphsp .NE.-1 .AND. iqphsp
     *            .NE.2)) THEN
                      nsrjct=nsrjct+1
                      goto 11500
                  ELSE IF((i_dbs.EQ.1 .AND. iqin.EQ.0)) THEN
                      dist_dbs=(ssd_dbs-z_dbs)/wsrc
                      IF (((xsrc+usrc*dist_dbs)**2+(ysrc+vsrc*dist_dbs)*
     *                *2.GT.r_dbs**2)) THEN
                          ndbsrjct=ndbsrjct+1
                          goto 11500
                      END IF
                  END IF
                  IF ((enflag .EQ. 3)) THEN
                      IF ((I_BIT_FILTER .EQ. 0)) THEN
                          DO 11541 IBIT=1,NBIT1
                              IF ((BTEST(latchi,LATBIT(IBIT)))) THEN
                                  GO TO11542
                              END IF
                              IF ((IBIT.EQ.NBIT1)) THEN
                                  nsrjct=nsrjct+1
                                  goto 11500
                              END IF
11541                     CONTINUE
11542                     CONTINUE
                          DO 11551 IBIT=1,NBIT2
                              IF ((BTEST(latchi,LATBIT(IBIT+NBIT1)))) TH
     *                        EN
                                  nsrjct=nsrjct+1
                                  goto 11500
                              END IF
11551                     CONTINUE
11552                     CONTINUE
                          goto 11560
                      ELSE IF((I_BIT_FILTER.EQ.1)) THEN
                          DO 11571 IBIT=1,NBIT1
                              IF ((BTEST(latchi,LATBIT(IBIT)))) THEN
                                  nsrjct=nsrjct+1
                                  goto 11500
                              END IF
11571                     CONTINUE
11572                     CONTINUE
                          goto 11560
                      ELSE IF((I_BIT_FILTER.EQ.2)) THEN
                          DO 11581 IBIT=1,NBIT1
                              IF ((IBITS(latchi,24,5).EQ.LATBIT(IBIT)))
     *                        THEN
                                  goto 11560
                              END IF
11581                     CONTINUE
11582                     CONTINUE
                          nsrjct=nsrjct+1
                          goto 11500
                      ELSE IF((I_BIT_FILTER.EQ.3)) THEN
                          DO 11591 IBIT=1,NBIT1
                              IF ((IBITS(latchi,24,5).EQ.LATBIT(IBIT)))
     *                        THEN
                                  nsrjct=nsrjct+1
                                  goto 11500
                              END IF
11591                     CONTINUE
11592                     CONTINUE
                          goto 11560
                      END IF
                  END IF
11560             CONTINUE
                  IF ((ABS(xsrc) .GE. (BEAM_SIZE/2.0) .OR. ABS(ysrc).GE.
     *            (BEAM_SIZE/2.0))) THEN
                      nsoutside=nsoutside+1
                  END IF
                  IF(((ABS(xsrc) .LT. (BEAM_SIZE/2.0) .AND. ABS(ysrc).LT
     *            .(BEAM_SIZE/2.0))))GO TO11492
              GO TO 11491
11492         CONTINUE
              IF ((NRCYCL.GT.0)) THEN
                  CYCLNUM=1
                  NofREPEAT=0
                  xsrcold=xsrc
                  ysrcold=ysrc
                  IF((i_iaea_in.EQ.1))zsrcold=zsrc
                  usrcold=usrc
                  vsrcold=vsrc
                  wsrcold=wsrc
                  einsrcold=einsrc
                  iqinold=iqin
                  weightold=weight
                  latchold=latchi
              END IF
          END IF
      ELSE IF(( isource .EQ. 9 .OR. isource .EQ.10 )) THEN
11601     CONTINUE
11610         CONTINUE
              call sample_beamsource(einsrc,xsrc,ysrc,zsrcdum,usrc,vsrc,
     *        wsrc,weight, iqin,latchi,nhist,iphatsrc)
              nnread = nnread +1
              IF (( iqinc .LT. 2 .AND. iqin .NE. iqinc )) THEN
                  nsrjct=nsrjct+1
                  goto 11610
              ELSE IF(( iqinc .EQ. 3 .AND. iqin .EQ. 0 )) THEN
                  nsrjct=nsrjct+1
                  goto 11610
              ELSE IF((i_dbs.EQ.1 .AND. iqin.EQ.0 .AND. iphatsrc.GT.1))
     *        THEN
                  nsrjct=ndbsrjct+1
                  goto 11610
              END IF
              IF ((enflag .EQ. 3)) THEN
                  IF ((I_BIT_FILTER .EQ. 0)) THEN
                      DO 11621 IBIT=1,NBIT1
                          IF ((BTEST(latchi,LATBIT(IBIT)))) THEN
                              GO TO11622
                          END IF
                          IF ((IBIT.EQ.NBIT1)) THEN
                              nsrjct=nsrjct+1
                              goto 11610
                          END IF
11621                 CONTINUE
11622                 CONTINUE
                      DO 11631 IBIT=1,NBIT2
                          IF ((BTEST(latchi,LATBIT(IBIT+NBIT1)))) THEN
                              nsrjct=nsrjct+1
                              goto 11610
                          END IF
11631                 CONTINUE
11632                 CONTINUE
                      goto 11640
                  ELSE IF((I_BIT_FILTER.EQ.1)) THEN
                      DO 11651 IBIT=1,NBIT1
                          IF ((BTEST(latchi,LATBIT(IBIT)))) THEN
                              nsrjct=nsrjct+1
                              goto 11610
                          END IF
11651                 CONTINUE
11652                 CONTINUE
                      goto 11640
                  ELSE IF((I_BIT_FILTER.EQ.2)) THEN
                      DO 11661 IBIT=1,NBIT1
                          IF ((IBITS(latchi,24,5).EQ.LATBIT(IBIT))) THEN
                              goto 11640
                          END IF
11661                 CONTINUE
11662                 CONTINUE
                      nsrjct=nsrjct+1
                      goto 11610
                  ELSE IF((I_BIT_FILTER.EQ.3)) THEN
                      DO 11671 IBIT=1,NBIT1
                          IF ((IBITS(latchi,24,5).EQ.LATBIT(IBIT))) THEN
                              nsrjct=nsrjct+1
                              goto 11610
                          END IF
11671                 CONTINUE
11672                 CONTINUE
                      goto 11640
                  END IF
              END IF
11640         CONTINUE
              IF ((ABS(xsrc) .GE. (BEAM_SIZE/2.0) .OR. ABS(ysrc).GE.(BEA
     *        M_SIZE/2.0))) THEN
                  nsoutside=nsoutside+1
              END IF
              IF(((ABS(xsrc) .LT. (BEAM_SIZE/2.0) .AND. ABS(ysrc).LT.(BE
     *        AM_SIZE/2.0))))GO TO11602
          GO TO 11601
11602     CONTINUE
      ELSE IF(( isource .EQ. 20 )) THEN
          IF ((more_in_cont .EQ. 0)) THEN
              IF ((NRCYCL.GT.0 .AND. CYCLNUM.GT.0 .AND. CYCLNUM.LE.NRCYC
     *        L)) THEN
                  NofREPEAT=NofREPEAT+1
                  CYCLNUM=CYCLNUM+1
                  einsrc=einsrcold
                  xsrc=xsrcold
                  ysrc=ysrcold
                  usrc=usrcold
                  vsrc=vsrcold
                  wsrc=wsrcold
                  weight=weightold
                  latchi=latchold
                  iqin=iqinold
                  IF ((i_iaea_in.EQ.1)) THEN
                      zsrc = zsrcold
                      IF((i_mu_phsp.EQ.1))mu_phsp = mu_phspold
                  END IF
              ELSE
11681             CONTINUE
11690                 CONTINUE
                      IF ((n_parallel.GT.0 .AND. nnphsp.GT.nnphsp_max))
     *                THEN
                          nnphsp=nnphsp_min
                          OUTCNT=OUTCNT+1
                          WRITE(6,11700)
11700                     FORMAT(///' ***WARNING*** USED ALL PARTICLES F
     *ROM CHUNK IN SOURCE FILE!'/ '               RESTARTING FROM FIRSTP
     *ARTICLE IN THIS CHUNK.'// /1x,79('*')//)
                          IF ((i_iaea_in.EQ.1)) THEN
                              nhist=OUTCNT*NINCSRC/(n_parallel*10)
                              iaea_dummy_long=nnphsp
                              call iaea_set_record(i_unit_in,iaea_dummy_
     *                        long,iaea_result)
                              IF ((iaea_result.LT.0)) THEN
                                  WRITE(i_log,*)' Error going to record
     *',nnphsp,' in IAEA phsp file.'
                                  call exit(1)
                              END IF
                          END IF
                      ELSE IF((IPARALLEL.GT.1 .AND. PARNUM.GT.0 .AND. nn
     *                phsp .GT. INT(PARNUM*nshist/IPARALLEL))) THEN
                          NofREPEAT = NofREPEAT + 1
                          OUTCNT=OUTCNT+1
                          WRITE(6,11710)
                          WRITE(1,11710)
11710                     FORMAT(/' *** Warning *** Used all particles f
     *rom partition of source file'/ '                 Restarting from f
     *irst particle in this partition'/)
                          nnphsp = INT((PARNUM-1)*nshist/IPARALLEL)+1
                          IF ((i_iaea_in.EQ.1)) THEN
                              nhist=OUTCNT*NINCSRC/IPARALLEL
                              iaea_dummy_long=nnphsp
                              call iaea_set_record(i_unit_in,iaea_dummy_
     *                        long,iaea_result)
                              IF ((iaea_result.LT.0)) THEN
                                  WRITE(i_log,*)' Error going to record
     *',nnphsp,' in IAEA phsp file.'
                                  call exit(1)
                              END IF
                          END IF
                      ELSE IF(( nnphsp .GT. nshist)) THEN
                          NofREPEAT = NofREPEAT + 1
                          OUTCNT=OUTCNT+1
                          WRITE(6,11720)
                          WRITE(1,11720)
11720                     FORMAT(/' *** Warning *** Used all particles f
     *rom source file'/ '                 Restarting from first particle
     * in file'/)
                          nnphsp = 1
                          IF ((i_iaea_in.EQ.1)) THEN
                              nhist=OUTCNT*NINCSRC
                              iaea_dummy_long=nnphsp
                              call iaea_set_record(i_unit_in,iaea_dummy_
     *                        long,iaea_result)
                              IF ((iaea_result.LT.0)) THEN
                                  WRITE(i_log,*)' Error going to record
     *',nnphsp,' in IAEA phsp file.'
                                  call exit(1)
                              END IF
                          END IF
                      END IF
                      nnphsp = nnphsp+1
                      IF ((i_iaea_in.EQ.1)) THEN
                          npassi=0
                          call iaea_get_particle(i_unit_in,iaea_n_stat,i
     *                    aea_q_index,ESHORT,WT_PHSP_SHORT, X_PHSP_SHORT
     *                    ,Y_PHSP_SHORT,Z_PHSP_SHORT,U_PHSP_SHORT, V_PHS
     *                    P_SHORT,W_PHSP_SHORT,iaea_extra_floats,iaea_ex
     *                    tra_ints)
                          IF ((iaea_n_stat.EQ.-1)) THEN
                              WRITE(i_log,*)' Error getting particle dat
     *a from IAEA phsp file.'
                              call exit(1)
                          ELSE IF((iaea_n_stat.EQ.-2)) THEN
                              WRITE(i_log,*)' WARNING: Reached end of IA
     *EA phsp file.  File restarted.'
                          ELSE IF((iaea_n_stat.GE.0)) THEN
                              nhist=nhist+iaea_n_stat
                              IF ((iaea_i_latch.EQ.-99)) THEN
                                  latchi=0
                              ELSE
                                  latchi=iaea_extra_ints(iaea_i_latch)
                              END IF
                              iqin=iaea_typ_q(iaea_q_index)
                              IF (( (iqin.EQ.1) .OR. (iqin.EQ.-1) )) THE
     *                        N
                                  ESHORT = ESHORT + 0.5109989461
                              END IF
                              einsrc=ESHORT
                              IF ((iaea_i_zlast.EQ.-99)) THEN
                                  ZLAST_PHSP_SHORT=0
                              ELSE
                                  ZLAST_PHSP_SHORT= iaea_extra_floats(ia
     *                            ea_i_zlast)
                              END IF
                              IF ((iaea_i_muidx.EQ.-99)) THEN
                                  MUIDX_PHSP_SHORT=0
                              ELSE
                                  MUIDX_PHSP_SHORT= iaea_extra_floats(ia
     *                            ea_i_muidx)
                              END IF
                              weight=WT_PHSP_SHORT
                              xsrc=X_PHSP_SHORT
                              ysrc=Y_PHSP_SHORT
                              zsrc=Z_PHSP_SHORT
                              usrc=U_PHSP_SHORT
                              vsrc=V_PHSP_SHORT
                              wsrc=W_PHSP_SHORT
                              zlast=ZLAST_PHSP_SHORT
                              mu_phsp=MUIDX_PHSP_SHORT
                          END IF
                      ELSE
                          IF ((ismode.NE.0)) THEN
                              READ(44,REC=nnphsp,IOSTAT=IERR_PHSP) latch
     *                        i,ESHORT,X_PHSP_SHORT,Y_PHSP_SHORT, U_PHSP
     *                        _SHORT,V_PHSP_SHORT,WT_PHSP_SHORT,ZLAST_PH
     *                        SP_SHORT
                          ELSE
                              READ(44,REC=nnphsp,IOSTAT=IERR_PHSP) latch
     *                        i,ESHORT,X_PHSP_SHORT,Y_PHSP_SHORT, U_PHSP
     *                        _SHORT,V_PHSP_SHORT,WT_PHSP_SHORT
                          END IF
                          IF ((nnphsp.EQ.76695869)) THEN
                              write(*,*)' x,y,u,v,wt,eshort,latch', X_PH
     *                        SP_SHORT,Y_PHSP_SHORT,U_PHSP_SHORT,V_PHSP_
     *                        SHORT, WT_PHSP_SHORT,ESHORT,latchi
                          END IF
                          IF ((ESHORT.LT.0.0)) THEN
                              nhist=nhist+1
                              ESHORT=ABS(ESHORT)
                          END IF
                          einsrc=ESHORT
                          weight=WT_PHSP_SHORT
                          xsrc=X_PHSP_SHORT
                          ysrc=Y_PHSP_SHORT
                          usrc=U_PHSP_SHORT
                          vsrc=V_PHSP_SHORT
                          IF((ismode.NE.0))zlast=ZLAST_PHSP_SHORT
                          IF ((IERR_PHSP.EQ.0)) THEN
                              einsrc=ESHORT
                              IF ((BTEST(latchi,31))) THEN
                                  npassi = 1
                                  latchi = IBCLR(latchi,31)
                              ELSE
                                  npassi = 0
                              END IF
                              IF ((BTEST(latchi,30))) THEN
                                  iqin = -1
                                  latchi = IBCLR(latchi,30)
                                  latchi = IBCLR(latchi,29)
                              ELSE
                                  IF ((BTEST(latchi,29))) THEN
                                      iqin = 1
                                      latchi = IBCLR(latchi,29)
                                  ELSE
                                      iqin = 0
                                  END IF
                              END IF
                              wsrc = min( 1., usrc**2 + vsrc**2)
                              wsrc = sqrt(1. - wsrc)
                              wsrc = SIGN(wsrc,weight)
                              weight=ABS(weight)
                          END IF
                      END IF
                      nnread = nnread +1
                      IF (( iqinc .LT. 2 .AND. iqin .NE. iqinc )) THEN
                          nsrjct=nsrjct+1
                          goto 11690
                      ELSE IF(( iqinc .EQ. 3 .AND. iqin .EQ. 0 )) THEN
                          nsrjct=nsrjct+1
                          goto 11690
                      ELSE IF((i_dbs.EQ.1 .AND. iqin.EQ.0)) THEN
                          IF ((i_iaea_in.EQ.1)) THEN
                              dist_dbs=(ssd_dbs-zsrc)/wsrc
                          ELSE
                              dist_dbs=(ssd_dbs-z_dbs)/wsrc
                          END IF
                          IF (((xsrc+usrc*dist_dbs)**2+(ysrc+vsrc*dist_d
     *                    bs)**2.GT.r_dbs**2)) THEN
                              ndbsrjct=ndbsrjct+1
                              goto 11690
                          END IF
                      END IF
                      IF ((enflag .EQ. 3)) THEN
                          IF ((I_BIT_FILTER .EQ. 0)) THEN
                              DO 11731 IBIT=1,NBIT1
                                  IF ((BTEST(latchi,LATBIT(IBIT)))) THEN
                                      GO TO11732
                                  END IF
                                  IF ((IBIT.EQ.NBIT1)) THEN
                                      nsrjct=nsrjct+1
                                      goto 11690
                                  END IF
11731                         CONTINUE
11732                         CONTINUE
                              DO 11741 IBIT=1,NBIT2
                                  IF ((BTEST(latchi,LATBIT(IBIT+NBIT1)))
     *                            ) THEN
                                      nsrjct=nsrjct+1
                                      goto 11690
                                  END IF
11741                         CONTINUE
11742                         CONTINUE
                              goto 11750
                          ELSE IF((I_BIT_FILTER.EQ.1)) THEN
                              DO 11761 IBIT=1,NBIT1
                                  IF ((BTEST(latchi,LATBIT(IBIT)))) THEN
                                      nsrjct=nsrjct+1
                                      goto 11690
                                  END IF
11761                         CONTINUE
11762                         CONTINUE
                              goto 11750
                          ELSE IF((I_BIT_FILTER.EQ.2)) THEN
                              DO 11771 IBIT=1,NBIT1
                                  IF ((IBITS(latchi,24,5).EQ.LATBIT(IBIT
     *                            ))) THEN
                                      goto 11750
                                  END IF
11771                         CONTINUE
11772                         CONTINUE
                              nsrjct=nsrjct+1
                              goto 11690
                          ELSE IF((I_BIT_FILTER.EQ.3)) THEN
                              DO 11781 IBIT=1,NBIT1
                                  IF ((IBITS(latchi,24,5).EQ.LATBIT(IBIT
     *                            ))) THEN
                                      nsrjct=nsrjct+1
                                      goto 11690
                                  END IF
11781                         CONTINUE
11782                         CONTINUE
                              goto 11750
                          END IF
                      END IF
11750                 CONTINUE
                      IF ((ABS(xsrc) .GE. (BEAM_SIZE/2.0) .OR. ABS(ysrc)
     *                .GE.(BEAM_SIZE/2.0))) THEN
                          nsoutside=nsoutside+1
                      END IF
                      IF(((ABS(xsrc) .LT. (BEAM_SIZE/2.0) .AND. ABS(ysrc
     *                ).LT.(BEAM_SIZE/2.0))))GO TO11682
                  GO TO 11681
11682             CONTINUE
                  IF ((NRCYCL.GT.0)) THEN
                      CYCLNUM=1
                      NofREPEAT=0
                      einsrcold=einsrc
                      xsrcold=xsrc
                      ysrcold=ysrc
                      usrcold=usrc
                      vsrcold=vsrc
                      wsrcold=wsrc
                      weightold=weight
                      latchold=latchi
                      iqinold=iqin
                      IF ((i_iaea_in.EQ.1)) THEN
                          zsrcold = zsrc
                          IF((i_mu_phsp.EQ.1))mu_phspold = mu_phsp
                      END IF
                  END IF
              END IF
              IF ((i_iaea_in.EQ.1 .AND. i_mu_phsp.EQ.1)) THEN
                  frMU_indx = mu_phsp
              ELSE
                  IF((rng_seed .GT. 128))call ranmar_get
                  RNNO1 = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  frMU_indx = RNNO1
              END IF
          END IF
          IF ((SHLflag.EQ.1 .AND. MLCflag.EQ.1)) THEN
              IF ((more_in_cont.EQ.0)) THEN
                  zsrcold = zsrc
              ELSE
                  zsrc = zsrcold
              END IF
              call sample_vcusource(einsrc,xsrc,ysrc,zsrcdum,usrc, vsrc,
     *        wsrc,weight,iqin,latchi,n_hist_dum, more_in_cont,frMU_indx
     *        )
          ELSE IF((SHLflag.EQ.1 .AND. MLCflag.EQ.0)) THEN
              IF ((i_iaea_in.EQ.1)) THEN
                  call phspmotionsample_beamsource(einsrc,xsrc,ysrc,zsrc
     *            ,usrc,vsrc, wsrc,weight,iqin,latchi,nhist,iphatsrc, mo
     *            re_in_cont,frMU_indx)
              ELSE
                  call phspmotionsample_beamsource(einsrc,xsrc,ysrc,zsrc
     *            dum,usrc,vsrc, wsrc,weight,iqin,latchi,nhist,iphatsrc,
     *             more_in_cont,frMU_indx)
              END IF
          END IF
      ELSE IF(( isource .EQ. 21)) THEN
11791     CONTINUE
11800         CONTINUE
              IF ((more_in_cont .EQ. 0)) THEN
                  call motionsample_beamsource(einsrc,xsrc,ysrc,zsrcdum,
     *            usrc,vsrc,wsrc, weight,iqin,latchi,nhist,iphatsrc,frMU
     *            _indx)
                  IF ((frMU_indx.LT.0.0)) THEN
                      IF((rng_seed .GT. 128))call ranmar_get
                      RNNO1 = rng_array(rng_seed)*twom24
                      rng_seed = rng_seed + 1
                      frMU_indx = RNNO1
                  END IF
                  nnread = nnread +1
              END IF
              IF ((MLCflag.EQ.1)) THEN
                  call sample_vcusource(einsrc,xsrc,ysrc,zsrcdum,usrc, v
     *            src,wsrc,weight,iqin,latchi,n_hist_dum, more_in_cont,f
     *            rMU_indx)
              END IF
              IF (( iqinc .LT. 2 .AND. iqin .NE. iqinc )) THEN
                  nsrjct=nsrjct+1
                  goto 11800
              ELSE IF(( iqinc .EQ. 3 .AND. iqin .EQ. 0 )) THEN
                  nsrjct=nsrjct+1
                  goto 11800
              ELSE IF((i_dbs.EQ.1 .AND. iqin.EQ.0 .AND. iphatsrc.GT.1))
     *        THEN
                  nsrjct=ndbsrjct+1
                  goto 11800
              END IF
              IF ((enflag .EQ. 3)) THEN
                  IF ((I_BIT_FILTER .EQ. 0)) THEN
                      DO 11811 IBIT=1,NBIT1
                          IF ((BTEST(latchi,LATBIT(IBIT)))) THEN
                              GO TO11812
                          END IF
                          IF ((IBIT.EQ.NBIT1)) THEN
                              nsrjct=nsrjct+1
                              goto 11800
                          END IF
11811                 CONTINUE
11812                 CONTINUE
                      DO 11821 IBIT=1,NBIT2
                          IF ((BTEST(latchi,LATBIT(IBIT+NBIT1)))) THEN
                              nsrjct=nsrjct+1
                              goto 11800
                          END IF
11821                 CONTINUE
11822                 CONTINUE
                      goto 11830
                  ELSE IF((I_BIT_FILTER.EQ.1)) THEN
                      DO 11841 IBIT=1,NBIT1
                          IF ((BTEST(latchi,LATBIT(IBIT)))) THEN
                              nsrjct=nsrjct+1
                              goto 11800
                          END IF
11841                 CONTINUE
11842                 CONTINUE
                      goto 11830
                  ELSE IF((I_BIT_FILTER.EQ.2)) THEN
                      DO 11851 IBIT=1,NBIT1
                          IF ((IBITS(latchi,24,5).EQ.LATBIT(IBIT))) THEN
                              goto 11830
                          END IF
11851                 CONTINUE
11852                 CONTINUE
                      nsrjct=nsrjct+1
                      goto 11800
                  ELSE IF((I_BIT_FILTER.EQ.3)) THEN
                      DO 11861 IBIT=1,NBIT1
                          IF ((IBITS(latchi,24,5).EQ.LATBIT(IBIT))) THEN
                              nsrjct=nsrjct+1
                              goto 11800
                          END IF
11861                 CONTINUE
11862                 CONTINUE
                      goto 11830
                  END IF
              END IF
11830         CONTINUE
              IF ((ABS(xsrc) .GE. (BEAM_SIZE/2.0) .OR. ABS(ysrc).GE.(BEA
     *        M_SIZE/2.0))) THEN
                  nsoutside=nsoutside+1
              END IF
              IF(((ABS(xsrc) .LT. (BEAM_SIZE/2.0) .AND. ABS(ysrc).LT.(BE
     *        AM_SIZE/2.0))))GO TO11792
          GO TO 11791
11792     CONTINUE
      END IF
      IF (((isource .EQ. 20 .OR. isource .EQ. 21) .AND. weight .EQ. 0))
     *THEN
          more_in_cont=0
          nsblocked = nsblocked + 1
          goto 11480
      ELSE IF((isource .EQ. 4)) THEN
      END IF
      IF ((NofREPEAT .GT. 0 .AND. ISMOOTH .EQ. 1)) THEN
          CALL SHIFT_XYUV(NofREPEAT,xsrc,ysrc,usrc,vsrc)
      END IF
      IF ((isource.LT.7 .OR. isource.EQ.9)) THEN
          IF((i_iaea_in.EQ.1))zsrc = zsrc + dsource
          uin = r_11(1)*usrc + r_12(1)*vsrc + r_13(1)*wsrc
          vin = r_21(1)*usrc + r_22(1)*vsrc + r_23(1)*wsrc
          win = r_31(1)*usrc + r_32(1)*vsrc + r_33(1)*wsrc
          xsrcp = r_11(1)*xsrc + r_12(1)*ysrc + r_13(1)*zsrc + xiso
          ysrcp = r_21(1)*xsrc + r_22(1)*ysrc + r_23(1)*zsrc + yiso
          zsrcp = r_31(1)*xsrc + r_32(1)*ysrc + r_33(1)*zsrc + ziso
      ELSE IF((isource.EQ.20 .OR. isource.EQ.21)) THEN
          DO 11871 I=1,nset
              IF ((frMU_indx.LT.muIndex(I))) THEN
                  K=I
                  GO TO11872
              END IF
11871     CONTINUE
11872     CONTINUE
          IF ((i_iaea_in.EQ.1)) THEN
              SAD_s20 = (dsourcetemp(K-1)+(dsourcetemp(K)-dsourcetemp(K-
     *        1))* (frMU_indx-muIndex(K-1))/(muIndex(K)-muIndex(K-1)))
              zsrc = zsrc - SAD_s20
          ELSE
              zsrc = -1.0*(dsourcetemp(K-1)+(dsourcetemp(K)-dsourcetemp(
     *        K-1))* (frMU_indx-muIndex(K-1))/(muIndex(K)-muIndex(K-1)))
          END IF
          theta(1)=thetatemp(K-1)+(thetatemp(K)-thetatemp(K-1))* (frMU_i
     *    ndx-muIndex(K-1))/(muIndex(K)-muIndex(K-1))
          phi(1)=phitemp(K-1)+(phitemp(K)-phitemp(K-1))* (frMU_indx-muIn
     *    dex(K-1))/(muIndex(K)-muIndex(K-1))
          phicol=phicoltemp(K-1)+(phicoltemp(K)-phicoltemp(K-1))* (frMU_
     *    indx-muIndex(K-1))/(muIndex(K)-muIndex(K-1))
          xiso=xtemp(K-1)+(xtemp(K)-xtemp(K-1))* (frMU_indx-muIndex(K-1)
     *    )/(muIndex(K)-muIndex(K-1))
          yiso=ytemp(K-1)+(ytemp(K)-ytemp(K-1))* (frMU_indx-muIndex(K-1)
     *    )/(muIndex(K)-muIndex(K-1))
          ziso=ztemp(K-1)+(ztemp(K)-ztemp(K-1))* (frMU_indx-muIndex(K-1)
     *    )/(muIndex(K)-muIndex(K-1))
          costheta = cos(theta(1)*3.141593/180.)
          sintheta = sin(theta(1)*3.141593/180.)
          coscol = cos(phicol*3.141593/180.)
          sincol = sin(phicol*3.141593/180.)
          cosphi = cos(phi(1)*3.141593/180.)
          sinphi = sin(phi(1)*3.141593/180.)
          r_11(1) = costheta*cosphi*coscol + sinphi*sincol
          r_12(1) = -costheta*cosphi*sincol + sinphi*coscol
          r_13(1) = -sintheta*cosphi
          r_21(1) = costheta*sinphi*coscol - cosphi*sincol
          r_22(1) = -costheta*sinphi*sincol - cosphi*coscol
          r_23(1) = -sintheta*sinphi
          r_31(1) = -sintheta*coscol
          r_32(1) = sintheta*sincol
          r_33(1) = -costheta
          uin = r_11(1)*usrc + r_12(1)*vsrc + r_13(1)*wsrc
          vin = r_21(1)*usrc + r_22(1)*vsrc + r_23(1)*wsrc
          win = r_31(1)*usrc + r_32(1)*vsrc + r_33(1)*wsrc
          xsrcp = r_11(1)*xsrc + r_12(1)*ysrc + r_13(1)*zsrc + xiso
          ysrcp = r_21(1)*xsrc + r_22(1)*ysrc + r_23(1)*zsrc + yiso
          zsrcp = r_31(1)*xsrc + r_32(1)*ysrc + r_33(1)*zsrc + ziso
      ELSE
          IF((rng_seed .GT. 128))call ranmar_get
          RNNO1 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          k_field=numang
          DO 11881 I=1,numang-1
              IF ((RNNO1.LT.pang(I))) THEN
                  k_field=I
                  GO TO11882
              END IF
11881     CONTINUE
11882     CONTINUE
          uin = r_11(k_field)*usrc + r_12(k_field)*vsrc + r_13(k_field)*
     *    wsrc
          vin = r_21(k_field)*usrc + r_22(k_field)*vsrc + r_23(k_field)*
     *    wsrc
          win = r_31(k_field)*usrc + r_32(k_field)*vsrc + r_33(k_field)*
     *    wsrc
          xsrcp = r_11(k_field)*xsrc + r_12(k_field)*ysrc + r_13(k_field
     *    )*zsrc + xiso
          ysrcp = r_21(k_field)*xsrc + r_22(k_field)*ysrc + r_23(k_field
     *    )*zsrc + yiso
          zsrcp = r_31(k_field)*xsrc + r_32(k_field)*ysrc + r_33(k_field
     *    )*zsrc + ziso
      END IF
      IF ((isource .EQ. 1 .OR. isource.EQ.7)) THEN
          IF ((uin .GT. 0.0)) THEN
              dist = (xbound_min - xsrcp)/uin
              yin = ysrcp + dist*vin
              zin = zsrcp + dist*win
              IF (( (yin .GE. ybound_min) .AND. (yin .LE. ybound_max) .A
     *        ND. (zin .GE. zbound_min) .AND. (zin .LE. zbound_max))) TH
     *        EN
                  DO 11891 j=1,jmax
                      IF (( (ybound(j) .LE. yin) .AND. (yin .LE. ybound(
     *                j+1)) )) THEN
                          DO 11901 k=1,kmax
                              IF (( (zbound(k) .LE. zin) .AND. (zin .LE.
     *                         zbound(k+1)) )) THEN
                                  xin = xbound_min
                                  irin = imax*j + klowx + ijmax*k
                                  return
                              END IF
11901                     CONTINUE
11902                     CONTINUE
                      END IF
11891             CONTINUE
11892             CONTINUE
                  stop ' * Stopped in srchst on lower x-plane. Can not f
     *ind irin! *'
              END IF
          ELSE IF((uin .LT. 0.0)) THEN
              dist = (xbound_max - xsrcp)/uin
              yin = ysrcp + dist*vin
              zin = zsrcp + dist*win
              IF (( (yin .GE. ybound_min) .AND. (yin .LE. ybound_max) .A
     *        ND. (zin .GE. zbound_min) .AND. (zin .LE. zbound_max))) TH
     *        EN
                  DO 11911 j=1,jmax
                      IF (( (ybound(j) .LE. yin) .AND. (yin .LE. ybound(
     *                j+1)) )) THEN
                          DO 11921 k=1,kmax
                              IF (( (zbound(k) .LE. zin) .AND. (zin .LE.
     *                         zbound(k+1)) )) THEN
                                  xin = xbound_max
                                  irin = imax*j + khix + ijmax*k
                                  return
                              END IF
11921                     CONTINUE
11922                     CONTINUE
                      END IF
11911             CONTINUE
11912             CONTINUE
                  stop ' * Stopped in srchst on upper x-plane. Can not f
     *ind irin! *'
              END IF
          END IF
          IF ((vin .GT. 0.0)) THEN
              dist = (ybound_min - ysrcp)/vin
              xin = xsrcp + dist*uin
              zin = zsrcp + dist*win
              IF (( (xin .GE. xbound_min) .AND. (xin .LE. xbound_max) .A
     *        ND. (zin .GE. zbound_min) .AND. (zin .LE. zbound_max))) TH
     *        EN
                  DO 11931 i=1,imax
                      IF (( (xbound(i) .LE. xin) .AND. (xin .LE. xbound(
     *                i+1)) )) THEN
                          DO 11941 k=1,kmax
                              IF (( (zbound(k) .LE. zin) .AND. (zin .LE.
     *                         zbound(k+1)) )) THEN
                                  yin = ybound_min
                                  irin = i + klowy + ijmax*k
                                  return
                              END IF
11941                     CONTINUE
11942                     CONTINUE
                      END IF
11931             CONTINUE
11932             CONTINUE
                  stop ' * Stopped in srchst on lower y-plane. Can not f
     *ind irin! *'
              END IF
          ELSE IF((vin .LT. 0.0)) THEN
              dist = (ybound_max - ysrcp)/vin
              xin = xsrcp + dist*uin
              zin = zsrcp + dist*win
              IF (( (xin .GE. xbound_min) .AND. (xin .LE. xbound_max) .A
     *        ND. (zin .GE. zbound_min) .AND. (zin .LE. zbound_max))) TH
     *        EN
                  DO 11951 i=1,imax
                      IF (( (xbound(i) .LE. xin) .AND. (xin .LE. xbound(
     *                i+1)) )) THEN
                          DO 11961 k=1,kmax
                              IF (( (zbound(k) .LE. zin) .AND. (zin .LE.
     *                         zbound(k+1)) )) THEN
                                  yin = ybound_max
                                  irin = i + khiy + ijmax*k
                                  return
                              END IF
11961                     CONTINUE
11962                     CONTINUE
                      END IF
11951             CONTINUE
11952             CONTINUE
                  stop ' * Stopped in srchst on upper y-plane. Can not f
     *ind irin! *'
              END IF
          END IF
          IF ((win .GT. 0.0)) THEN
              dist = (zbound_min - zsrcp)/win
              xin = xsrcp + dist*uin
              yin = ysrcp + dist*vin
              IF (( (xin .GE. xbound_min) .AND. (xin .LE. xbound_max) .A
     *        ND. (yin .GE. ybound_min) .AND. (yin .LE. ybound_max))) TH
     *        EN
                  DO 11971 i=1,imax
                      IF (( (xbound(i) .LE. xin) .AND. (xin .LE. xbound(
     *                i+1)) )) THEN
                          DO 11981 j=1,jmax
                              IF (( (ybound(j) .LE. yin) .AND. (yin .LE.
     *                         ybound(j+1)) )) THEN
                                  zin = zbound_min
                                  irin = i + klowz + imax*j
                                  return
                              END IF
11981                     CONTINUE
11982                     CONTINUE
                      END IF
11971             CONTINUE
11972             CONTINUE
                  stop ' * Stopped in srchst on lower z-plane. Can not f
     *ind irin! *'
              END IF
          ELSE IF((win .LT. 0.0)) THEN
              dist = (zbound_max-zsrcp)/win
              xin = xsrcp + dist*uin
              yin = ysrcp + dist*vin
              IF (( (xin .GE. xbound_min) .AND. (xin .LE. xbound_max) .A
     *        ND. (yin .GE. ybound_min) .AND. (yin .LE. ybound_max))) TH
     *        EN
                  DO 11991 i=1,imax
                      IF (( (xbound(i) .LE. xin) .AND. (xin .LE. xbound(
     *                i+1)) )) THEN
                          DO 12001 j=1,jmax
                              IF (( (ybound(j) .LE. yin) .AND. (yin .LE.
     *                         ybound(j+1)) )) THEN
                                  zin = zbound_max
                                  irin = i + khiz + imax*j
                                  return
                              END IF
12001                     CONTINUE
12002                     CONTINUE
                      END IF
11991             CONTINUE
11992             CONTINUE
                  stop ' * Stopped in srchst on upper z-plane. Can not f
     *ind irin! *'
              END IF
          END IF
          nmissm = nmissm+1
          goto 11480
      ELSE
          xin = xsrcp
          yin = ysrcp
          zin = zsrcp
          IF ((IWATCH.EQ.-9999)) THEN
              WRITE(*,*)' xin,yin,zin ',xin,yin,zin
          END IF
          IF (( (xin .GE. xbound_min) .AND. (xin .LE. xbound_max) .AND.
     *    (yin .GE. ybound_min) .AND. (yin .LE. ybound_max) .AND. (zin .
     *    GE. zbound_min) .AND. (zin .LE. zbound_max))) THEN
              DO 12011 i=1,imax
                  IF (( (xbound(i) .LE. xin) .AND. (xin .LE. xbound(i+1)
     *            ) )) THEN
                      DO 12021 j=1,jmax
                          IF (( (ybound(j) .LE. yin) .AND. (yin .LE. ybo
     *                    und(j+1)) )) THEN
                              DO 12031 k=1,kmax
                                  IF (( (zbound(k) .LE. zin) .AND. (zin
     *                            .LE. zbound(k+1)) )) THEN
                                      irin = (1 + i + (j-1)*IMAX + (k-1)
     *                                *ijmax)
                                      return
                                  END IF
12031                         CONTINUE
12032                         CONTINUE
                          END IF
12021                 CONTINUE
12022                 CONTINUE
                  END IF
12011         CONTINUE
12012         CONTINUE
              stop ' * Stopped in srchst. Cannot find irin! *'
          ELSE IF(( (xin.GT. xbound_max+dsurround(1)) .OR. (xin .LT. xbo
     *    und_min-dsurround(1)).OR. (yin.GT. ybound_max+dsurround(2)) .O
     *    R. (yin .LT. ybound_min-dsurround(2)).OR. (zin.GT. zbound_max+
     *    dsurround(3)) .OR. (zin .LT. zbound_min-dsurround(4)))) THEN
              nsmiss = nsmiss+1
              goto 11480
          ELSE
              irin = imax*jmax*kmax+2
              return
          END IF
      END IF
      end
      SUBROUTINE SHIFT_XYUV(NofREPEAT,xsrc,ysrc,usrc,vsrc)
      implicit none
      real*8 xsrc,ysrc,usrc,vsrc, X,Y,U,V
      integer*4 NofREPEAT
      X = xsrc
      Y = ysrc
      U = usrc
      V = vsrc
      IF ((NofREPEAT .EQ. 1)) THEN
          xsrc = -X
          ysrc = Y
          usrc = -U
          vsrc = V
      ELSE IF((NofREPEAT .EQ. 2)) THEN
          xsrc = X
          ysrc = -Y
          usrc = U
          vsrc = -V
      ELSE IF((NofREPEAT .EQ. 3)) THEN
          xsrc = -X
          ysrc = -Y
          usrc = -U
          vsrc = -V
      ELSE IF((NofREPEAT .GT. 3)) THEN
          NofREPEAT = 0
      END IF
      RETURN
      END
#define HAVE_LOAD_DSO
#ifndef HAVE_LOAD_DSO
      subroutine init_beamsource(i_parallel,n_parallel,i_log,conf_name,
     *hen_house,egs_home,the_beam_code, the_pegs_file,the_input_file)
      integer*4 i_parallel,n_parallel,i_log
      character*(*) conf_name
      character*(*) hen_house,egs_home,the_beam_code,the_pegs_file,the_i
     *nput_file
      write(6,*) 'You need a working C compiler to use source 9!'
      call exit(1)
      end
      subroutine sample_beamsource(einsrc,xsrc,ysrc,zsrc,usrc,vsrc,wsrc,
     *weight, iqin,latchi,nhist,iphatsrc)
      return
      end
      subroutine motionsample_beamsource(einsrc,xsrc,ysrc,zsrc,usrc,vsrc
     *,wsrc,weight, iqin,latchi,nhist,iphatsrc,frMU_indx)
      return
      end
      subroutine phspmotionsample_beamsource(einsrc,xsrc,ysrc,zsrc,usrc,
     *vsrc,wsrc, weight,iqin,latchi,nhist,iphatsrc, more_in_cont,frMU_in
     *dx)
      subroutine finish_beamsource
      return
      end
      subroutine call init_vcusource(conf_name,hen_house,egs_home, the_v
     *cu_code,the_input_file)
      character*(*) conf_name
      character*(*) hen_house,egs_home,the_vcu_code,the_input_file
      write(6,*) 'You need a working C compiler to use source 9!'
      call exit(1)
      end
      subroutine sample_vcusource(einsrc,xsrc,ysrc,zsrc,usrc,vsrc,wsrc,w
     *eight, iqin,latchi,n_hist_dum,more_in_cont,iphatsrc,frMU_indx)
      return
      end
      subroutine finish_vcusource
      return
      end
#endif
      subroutine init_ranmar
      implicit none
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      integer*4 s,t
      integer*4 i,j,k,l,m,ii,jj
      IF((ixx .LE. 0 .OR. ixx .GT. 31328))ixx = 1802
      IF((jxx .LE. 0 .OR. jxx .GT. 30081))jxx = 9373
      i = mod(ixx/177,177) + 2
      j = mod(ixx, 177) + 2
      k = mod(jxx/169,178) + 1
      l = mod(jxx, 169)
      DO 12041 ii=1,97
          s = 0
          t = 8388608
          DO 12051 jj=1,24
              m = mod(mod(i*j,179)*k,179)
              IF (( fool_optimizer .EQ. 999 )) THEN
                  write(6,*) i,j,k,m,s,t
              END IF
              i = j
              IF (( fool_optimizer .EQ. 999 )) THEN
                  write(6,*) i,j,k,m,s,t
              END IF
              j = k
              IF (( fool_optimizer .EQ. 999 )) THEN
                  write(6,*) i,j,k,m,s,t
              END IF
              k = m
              IF (( fool_optimizer .EQ. 999 )) THEN
                  write(6,*) i,j,k,m,s,t
              END IF
              l = mod(53*l+1,169)
              IF (( fool_optimizer .EQ. 999 )) THEN
                  write(6,*) i,j,k,m,s,t
              END IF
              IF((mod(l*m,64) .GE. 32))s = s + t
              IF (( fool_optimizer .EQ. 999 )) THEN
                  write(6,*) i,j,k,m,s,t
              END IF
              t = t/2
              IF (( fool_optimizer .EQ. 999 )) THEN
                  write(6,*) i,j,k,m,s,t
              END IF
12051     CONTINUE
12052     CONTINUE
          urndm(ii) = s
12041 CONTINUE
12042 CONTINUE
      crndm = 362436
      cdrndm = 7654321
      cmrndm = 16777213
      twom24 = 1./16777216.
      ixx = 97
      jxx = 33
      rng_seed = 128 + 1
      return
      end
      subroutine ranmar_get
      implicit none
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      integer*4 i,iopt
      IF((rng_seed .EQ. 999999))call init_ranmar
      DO 12061 i=1,128
          iopt = urndm(ixx) - urndm(jxx)
          IF((iopt .LT. 0))iopt = iopt + 16777216
          urndm(ixx) = iopt
          ixx = ixx - 1
          jxx = jxx - 1
          IF ((ixx .EQ. 0)) THEN
              ixx = 97
          ELSE IF(( jxx .EQ. 0 )) THEN
              jxx = 97
          END IF
          crndm = crndm - cdrndm
          IF((crndm .LT. 0))crndm = crndm + cmrndm
          iopt = iopt - crndm
          IF((iopt .LT. 0))iopt = iopt + 16777216
          rng_array(i) = iopt
12061 CONTINUE
12062 CONTINUE
      rng_seed = 1
      return
      end
      SUBROUTINE WATCH(IARG,IWATCH)
      implicit none
      integer*4 iarg,iwatch,IP,ICOUNT,JHSTRY,J,N
      real*8 KE
      integer*4 graph_unit
      integer egs_open_file
      integer*4 ku,kr,ka
      COMMON/BOUNDS/ECUT,PCUT,VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      common/egs_vr/ e_max_rr,  prob_RR,  nbr_split,  i_play_RR,      i_
     *survived_RR,
     *  n_RR_warning,                                        i_do_rr
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      DATA ICOUNT/0/,JHSTRY/1/ graph_unit/-1/
      save ICOUNT,JHSTRY,graph_unit
      ku = 13
      kr = 0
      ka = 1
      IF ((IARG .EQ. -99)) THEN
          DO 12071 J=1,29
              IAUSFL(J)=1
12071     CONTINUE
12072     CONTINUE
          IAUSFL(22)=0
          IAUSFL(23)=0
          IAUSFL(24)=0
      END IF
      IF ((IARG .EQ. -1)) THEN
          IF ((IWATCH .EQ. 4)) THEN
              IF (( graph_unit .LT. 0 )) THEN
                  graph_unit = egs_open_file(ku,kr,ka,'.egsgph')
              END IF
              WRITE(graph_unit,12080) 0,0,0,0.0,0.0,0.0,0.0,JHSTRY
              JHSTRY=JHSTRY+1
          ELSE
              WRITE(6,12090)JHSTRY
12090         FORMAT(' END OF HISTORY',I8,3X,40('*')/)
              JHSTRY=JHSTRY+1
              ICOUNT=ICOUNT+2
              RETURN
          END IF
      END IF
      IF (( (IWATCH .NE. 4) .AND. ((ICOUNT .GE. 50) .OR. (ICOUNT .EQ. 0)
     * .OR. (IARG .EQ. -99)) )) THEN
          ICOUNT=1
          WRITE(6,12100)
12100     FORMAT(//T39,' NP',3X,'ENERGY  Q REGION    X',7X, 'Y',7X,'Z',6
     *X,'U',6X,'V',6X,'W',6X,'LATCH',2X,'WEIGHT'/)
      END IF
      IF (((IWATCH .EQ. 4) .AND. (IARG .GE. 0) .AND. (IARG .NE. 5))) THE
     *N
          IF((graph_unit .LT. 0))graph_unit = egs_open_file(ku,kr,ka,'.e
     *gsgph')
          WRITE(graph_unit,12080) NP,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),E(N
     *    P)
12080     FORMAT(2I4,1X,I6,4G15.8,I12)
      END IF
      IF((IARG .EQ. 5 .OR. IARG .LT. 0))RETURN
      IF((IWATCH .EQ. 4))RETURN
      KE=E(NP)
      IF ((IQ(NP).NE.0)) THEN
          KE=E(NP)-PRM
      END IF
      IF ((IARG .EQ. 0 .AND. IWATCH .EQ. 2)) THEN
          ICOUNT=ICOUNT+1
          WRITE(6,12110)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP
     *    ), W(NP),LATCH(NP),WT(NP)
12110     FORMAT(T11,'STEP ABOUT TO OCCUR', T36,':',I5,F9.3,2I4,3F8.3,3F
     *7.3,I10,1PE10.3)
      ELSE IF((IARG .EQ. 0)) THEN
          RETURN
      END IF
      IF (( IARG .EQ. 1)) THEN
          ICOUNT=ICOUNT+1
          WRITE(6,12120)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP
     *    ), W(NP),LATCH(NP),WT(NP)
12120     FORMAT(' Discard  AE,AP<E<ECUT',T36,':',I5,F9.3,2I4,3F8.3,3F7.
     *3,I10,1PE10.3)
      ELSE IF((IARG .EQ. 2)) THEN
          ICOUNT=ICOUNT+1
          WRITE(6,12130)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP
     *    ), W(NP),LATCH(NP),WT(NP)
12130     FORMAT(' Discard  E<AE,AP',T36,':',I5,F9.3,2I4,3F8.3,3F7.3,I10
     *,1PE10.3)
      ELSE IF((IARG .EQ. 3)) THEN
          ICOUNT=ICOUNT+1
          WRITE(6,12140)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP
     *    ), W(NP),LATCH(NP),WT(NP)
12140     FORMAT(' Discard -user request',T36,':',I5,F9.3,2I4,3F8.3,3F7.
     *3,I10,1PE10.3)
      ELSE IF((IARG .EQ. 4)) THEN
          WRITE(6,12150)EDEP,IR(NP)
12150     FORMAT(T10,'Local energy deposition',T36,':',F12.5,' MeV in re
     *gion ',I6)
      ELSE IF((IARG .EQ. 6)) THEN
          ICOUNT=ICOUNT+1
          WRITE(6,12160)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP
     *    ), W(NP),LATCH(NP),WT(NP)
12160     FORMAT(' bremsstrahlung  about to occur',T36,':',I5,F9.3,2I4,3
     *F8.3,3F7.3,I10,1PE10.3)
      ELSE IF((IARG .EQ. 7)) THEN
          IF ((nbr_split .EQ.1)) THEN
              DO 12171 IP=NPold,NP
                  IF ((IQ(IP).EQ.-1)) THEN
                      KE = E(IP) - RM
                      ICOUNT=ICOUNT+1
                      WRITE(6,12180)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP
     *                ),U(IP),V(IP), W(IP),LATCH(IP),WT(IP)
12180                 FORMAT(T10,'Resulting electron',T36,':',I5,F9.3,2I
     *4,3F8.3,3F7.3,I10,1PE10.3)
                  ELSE
                      KE = E(IP)
                      ICOUNT=ICOUNT+1
                      WRITE(6,12190)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP
     *                ),U(IP),V(IP), W(IP),LATCH(IP),WT(IP)
12190                 FORMAT(T10,'Resulting photon',T36,':',I5,F9.3,2I4,
     *3F8.3,3F7.3,I10,1PE10.3)
                  END IF
12171         CONTINUE
12172         CONTINUE
          ELSE
              KE = E(NPold) - RM
              ICOUNT=ICOUNT+1
              WRITE(6,12200)NPold,KE,IQ(NPold),IR(NPold),X(NPold),Y(NPol
     *        d),Z(NPold),U(NPold),V(NPold), W(NPold),LATCH(NPold),WT(NP
     *        old)
12200         FORMAT(T10,'Resulting electron',T36,':',I5,F9.3,2I4,3F8.3,
     *3F7.3,I10,1PE10.3)
              DO 12211 IP=NPold+1,NP
                  KE= E(IP)
                  IF ((IP .EQ. NPold+1)) THEN
                      ICOUNT=ICOUNT+1
                      WRITE(6,12220)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP
     *                ),U(IP),V(IP), W(IP),LATCH(IP),WT(IP)
12220                 FORMAT(T10,'Split photons',T36,':',I5,F9.3,2I4,3F8
     *.3,3F7.3,I10,1PE10.3)
                  ELSE
                      ICOUNT=ICOUNT+1
                      WRITE(6,12230)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP
     *                ),U(IP),V(IP), W(IP),LATCH(IP),WT(IP)
12230                 FORMAT(T36,':',I5,F9.3,2I4,3F8.3,3F7.3,I10,1PE10.3
     *)
                  END IF
12211         CONTINUE
12212         CONTINUE
          END IF
      ELSE IF((IARG .EQ. 8)) THEN
          ICOUNT=ICOUNT+1
          WRITE(6,12240)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP
     *    ), W(NP),LATCH(NP),WT(NP)
12240     FORMAT(' Moller   about to occur',T36,':',I5,F9.3,2I4,3F8.3,3F
     *7.3,I10,1PE10.3)
      ELSE IF((IARG .EQ. 9)) THEN
          IF ((NP.EQ.NPold)) THEN
              ICOUNT=ICOUNT+1
              WRITE(6,12250)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),
     *        V(NP), W(NP),LATCH(NP),WT(NP)
12250         FORMAT(T11,'Interaction rejected',T36,':',I5,F9.3,2I4,3F8.
     *3,3F7.3,I10,1PE10.3)
          ELSE
              DO 12261 IP=NPold,NP
                  KE = E(IP) - ABS(IQ(NP))*RM
                  IF ((IP.EQ.NPold)) THEN
                      ICOUNT=ICOUNT+1
                      WRITE(6,12270)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP
     *                ),U(IP),V(IP), W(IP),LATCH(IP),WT(IP)
12270                 FORMAT(T11,'Resulting electrons',T36,':',I5,F9.3,2
     *I4,3F8.3,3F7.3,I10,1PE10.3)
                  ELSE
                      ICOUNT=ICOUNT+1
                      WRITE(6,12280)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP
     *                ),U(IP),V(IP), W(IP),LATCH(IP),WT(IP)
12280                 FORMAT(T36,':',I5,F9.3,2I4,3F8.3,3F7.3,I10,1PE10.3
     *)
                  END IF
12261         CONTINUE
12262         CONTINUE
          END IF
      ELSE IF((IARG .EQ. 10)) THEN
          ICOUNT=ICOUNT+1
          WRITE(6,12290)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP
     *    ), W(NP),LATCH(NP),WT(NP)
12290     FORMAT(' Bhabba   about to occur',T36,':',I5,F9.3,2I4,3F8.3,3F
     *7.3,I10,1PE10.3)
      ELSE IF((IARG .EQ. 11)) THEN
          IF ((NP.EQ.NPold)) THEN
              ICOUNT=ICOUNT+1
              WRITE(6,12300)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),
     *        V(NP), W(NP),LATCH(NP),WT(NP)
12300         FORMAT(T11,'Interaction rejected',T36,':',I5,F9.3,2I4,3F8.
     *3,3F7.3,I10,1PE10.3)
          ELSE
              DO 12311 IP=NPold,NP
                  KE = E(IP) - ABS(IQ(IP))*RM
                  IF ((IP.EQ.NPold)) THEN
                      ICOUNT=ICOUNT+1
                      WRITE(6,12320)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP
     *                ),U(IP),V(IP), W(IP),LATCH(IP),WT(IP)
12320                 FORMAT(T11,'Resulting e- or e+',T36,':',I5,F9.3,2I
     *4,3F8.3,3F7.3,I10,1PE10.3)
                  ELSE
                      ICOUNT=ICOUNT+1
                      WRITE(6,12330)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP
     *                ),U(IP),V(IP), W(IP),LATCH(IP),WT(IP)
12330                 FORMAT(T36,':',I5,F9.3,2I4,3F8.3,3F7.3,I10,1PE10.3
     *)
                  END IF
12311         CONTINUE
12312         CONTINUE
          END IF
      ELSE IF((IARG .EQ. 12)) THEN
          ICOUNT=ICOUNT+1
          WRITE(6,12340)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP
     *    ), W(NP),LATCH(NP),WT(NP)
12340     FORMAT(' Positron about to decay in flight',T36,':',I5,F9.3,2I
     *4,3F8.3,3F7.3,I10,1PE10.3)
      ELSE IF((IARG .EQ. 13)) THEN
          IF ((NP.EQ.NPold)) THEN
              ICOUNT=ICOUNT+1
              WRITE(6,12350)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),
     *        V(NP), W(NP),LATCH(NP),WT(NP)
12350         FORMAT(T11,'Interaction rejected',T36,':',I5,F9.3,2I4,3F8.
     *3,3F7.3,I10,1PE10.3)
          ELSE
              DO 12361 IP=NPold,NP
                  KE = E(IP) - ABS(IQ(IP))*RM
                  IF ((IP.EQ.NPold)) THEN
                      ICOUNT=ICOUNT+1
                      WRITE(6,12370)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP
     *                ),U(IP),V(IP), W(IP),LATCH(IP),WT(IP)
12370                 FORMAT(T11,'Resulting photons',T36,':',I5,F9.3,2I4
     *,3F8.3,3F7.3,I10,1PE10.3)
                  ELSE
                      ICOUNT=ICOUNT+1
                      WRITE(6,12380)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP
     *                ),U(IP),V(IP), W(IP),LATCH(IP),WT(IP)
12380                 FORMAT(T36,':',I5,F9.3,2I4,3F8.3,3F7.3,I10,1PE10.3
     *)
                  END IF
12361         CONTINUE
12362         CONTINUE
          END IF
      ELSE IF((IARG .EQ. 28)) THEN
          ICOUNT=ICOUNT+1
          WRITE(6,12390)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP
     *    ), W(NP),LATCH(NP),WT(NP)
12390     FORMAT(' Positron will annihilate at rest',T36,':',I5,F9.3,2I4
     *,3F8.3,3F7.3,I10,1PE10.3)
      ELSE IF((IARG .EQ. 14)) THEN
          IF ((NP.EQ.NPold)) THEN
              ICOUNT=ICOUNT+1
              WRITE(6,12400)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),
     *        V(NP), W(NP),LATCH(NP),WT(NP)
12400         FORMAT(T11,'Interaction rejected',T36,':',I5,F9.3,2I4,3F8.
     *3,3F7.3,I10,1PE10.3)
          ELSE
              DO 12411 IP=NPold,NP
                  KE = E(IP) - ABS(IQ(IP))*RM
                  IF ((IP.EQ.NPold)) THEN
                      ICOUNT=ICOUNT+1
                      WRITE(6,12420)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP
     *                ),U(IP),V(IP), W(IP),LATCH(IP),WT(IP)
12420                 FORMAT(' Positron annihilates at rest',T36,':',I5,
     *F9.3,2I4,3F8.3,3F7.3,I10,1PE10.3)
                  ELSE
                      ICOUNT=ICOUNT+1
                      WRITE(6,12430)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP
     *                ),U(IP),V(IP), W(IP),LATCH(IP),WT(IP)
12430                 FORMAT(T36,':',I5,F9.3,2I4,3F8.3,3F7.3,I10,1PE10.3
     *)
                  END IF
12411         CONTINUE
12412         CONTINUE
          END IF
      ELSE IF((IARG .EQ. 15)) THEN
          ICOUNT=ICOUNT+1
          WRITE(6,12440)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP
     *    ), W(NP),LATCH(NP),WT(NP)
12440     FORMAT(' Pair production about to occur',T36,':',I5,F9.3,2I4,3
     *F8.3,3F7.3,I10,1PE10.3)
      ELSE IF((IARG .EQ. 16)) THEN
          IF ((NP.EQ.NPold .AND. i_survived_rr .EQ. 0)) THEN
              ICOUNT=ICOUNT+1
              WRITE(6,12450)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),
     *        V(NP), W(NP),LATCH(NP),WT(NP)
12450         FORMAT(T11,'Interaction rejected',T36,':',I5,F9.3,2I4,3F8.
     *3,3F7.3,I10,1PE10.3)
          ELSE IF((NP.EQ.NPold .AND. i_survived_rr .GT. 0)) THEN
              WRITE(6,12460)i_survived_rr,prob_rr
12460         FORMAT(T10,'Russian Roulette eliminated ',I2, ' particle(s
     *) with probability ',F8.5)
              ICOUNT=ICOUNT+1
              WRITE(6,12470)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),
     *        V(NP), W(NP),LATCH(NP),WT(NP)
12470         FORMAT(T10,'Now on top of stack',T36,':',I5,F9.3,2I4,3F8.3
     *,3F7.3,I10,1PE10.3)
          ELSE
              DO 12481 IP=NPold,NP
                  KE = E(IP) - ABS(IQ(IP))*RM
                  IF ((IP.EQ.NPold)) THEN
                      ICOUNT=ICOUNT+1
                      WRITE(6,12490)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP
     *                ),U(IP),V(IP), W(IP),LATCH(IP),WT(IP)
12490                 FORMAT(T11,'Resulting pair',T36,':',I5,F9.3,2I4,3F
     *8.3,3F7.3,I10,1PE10.3)
                  ELSE
                      ICOUNT=ICOUNT+1
                      WRITE(6,12500)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP
     *                ),U(IP),V(IP), W(IP),LATCH(IP),WT(IP)
12500                 FORMAT(T36,':',I5,F9.3,2I4,3F8.3,3F7.3,I10,1PE10.3
     *)
                  END IF
12481         CONTINUE
12482         CONTINUE
              IF ((i_survived_rr .GT. 0)) THEN
                  WRITE(6,12510)i_survived_rr,prob_rr
12510             FORMAT(T10,'Russian Roulette eliminated ',I2,'        
     *                              particle(s) with probability ',F8.5)
                  ICOUNT=ICOUNT+1
                  WRITE(6,12520)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(
     *            NP),V(NP), W(NP),LATCH(NP),WT(NP)
12520             FORMAT(T10,'Now on top of stack',T36,':',I5,F9.3,2I4,3
     *F8.3,3F7.3,I10,1PE10.3)
              END IF
          END IF
      ELSE IF((IARG .EQ. 17)) THEN
          ICOUNT=ICOUNT+1
          WRITE(6,12530)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP
     *    ), W(NP),LATCH(NP),WT(NP)
12530     FORMAT(' Compton  about to occur',T36,':',I5,F9.3,2I4,3F8.3,3F
     *7.3,I10,1PE10.3)
      ELSE IF((IARG .EQ. 18)) THEN
          IF ((NP .EQ. NPold .AND. i_survived_rr .EQ. 0)) THEN
              ICOUNT=ICOUNT+1
              WRITE(6,12540)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),
     *        V(NP), W(NP),LATCH(NP),WT(NP)
12540         FORMAT(T11,'Interaction rejected',T36,':',I5,F9.3,2I4,3F8.
     *3,3F7.3,I10,1PE10.3)
          ELSE IF((NP .GT. NPold)) THEN
              DO 12551 IP=NPold,NPold+1
                  KE = E(IP) - ABS(IQ(IP))*RM
                  IF ((IQ(IP).NE.0)) THEN
                      ICOUNT=ICOUNT+1
                      WRITE(6,12560)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP
     *                ),U(IP),V(IP), W(IP),LATCH(IP),WT(IP)
12560                 FORMAT(T11,'compton electron created',T36,':',I5,F
     *9.3,2I4,3F8.3,3F7.3,I10,1PE10.3)
                  ELSE
                      ICOUNT=ICOUNT+1
                      WRITE(6,12570)IP,KE,IQ(IP),IR(IP),X(IP),Y(IP),Z(IP
     *                ),U(IP),V(IP), W(IP),LATCH(IP),WT(IP)
12570                 FORMAT(T11,'compton scattered photon',T36,':',I5,F
     *9.3,2I4,3F8.3,3F7.3,I10,1PE10.3)
                  END IF
12551         CONTINUE
12552         CONTINUE
          END IF
          IF ((i_survived_rr .GT. 0)) THEN
              WRITE(6,12580)i_survived_rr,prob_rr
12580         FORMAT(T10,'Russian Roulette eliminated ',I2, ' particle(s
     *) with probability ',F8.5)
              ICOUNT=ICOUNT+1
              WRITE(6,12590)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),
     *        V(NP), W(NP),LATCH(NP),WT(NP)
12590         FORMAT(T10,'Now on top of stack',T36,':',I5,F9.3,2I4,3F8.3
     *,3F7.3,I10,1PE10.3)
          END IF
      ELSE IF((IARG .EQ. 19)) THEN
          ICOUNT=ICOUNT+1
          WRITE(6,12600)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP
     *    ), W(NP),LATCH(NP),WT(NP)
12600     FORMAT(' Photoelectric about to occur',T36,':',I5,F9.3,2I4,3F8
     *.3,3F7.3,I10,1PE10.3)
      ELSE IF((IARG .EQ. 20)) THEN
          IF ((NPold.EQ.NP .AND. IQ(NP).EQ.0 .AND. i_survived_rr .EQ. 0)
     *    ) THEN
              ICOUNT=ICOUNT+1
              WRITE(6,12610)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),
     *        V(NP), W(NP),LATCH(NP),WT(NP)
12610         FORMAT(T11,'Photon energy below N-shell',/, T11,'Photon di
     *scarded',T36,':',I5,F9.3,2I4,3F8.3,3F7.3,I10,1PE10.3)
          ELSE IF((IQ(NPold) .EQ. -1 .AND. i_survived_rr .EQ. 0)) THEN
              KE= E(NPold)-RM
              ICOUNT=ICOUNT+1
              WRITE(6,12620)NPold,KE,IQ(NPold),IR(NPold),X(NPold),Y(NPol
     *        d),Z(NPold),U(NPold),V(NPold), W(NPold),LATCH(NPold),WT(NP
     *        old)
12620         FORMAT(T10,'Resulting photoelectron',T36,':',I5,F9.3,2I4,3
     *F8.3,3F7.3,I10,1PE10.3)
          ELSE IF((i_survived_rr .GT. 0)) THEN
              IF ((NP.EQ.NPold-1 .OR. IQ(NPold) .NE. -1)) THEN
                  IF ((i_survived_rr .GT. 1)) THEN
                      WRITE(6,12630)i_survived_rr-1,prob_rr
12630                 FORMAT(T10,'Russian Roulette eliminated ',I4, ' pa
     *rticle(s) with probability ',F8.5,' plus')
                  END IF
                  WRITE(6,12640)prob_rr
12640             FORMAT(T10,'Russian Roulette eliminated resulting phot
     *oelectron', ' with probability ',F8.5)
              ELSE
                  KE = E(NPold) - RM
                  ICOUNT=ICOUNT+1
                  WRITE(6,12650)NPold,KE,IQ(NPold),IR(NPold),X(NPold),Y(
     *            NPold),Z(NPold),U(NPold),V(NPold), W(NPold),LATCH(NPol
     *            d),WT(NPold)
12650             FORMAT(T10,'Resulting photoelectron?',T36,':',I5,F9.3,
     *2I4,3F8.3,3F7.3,I10,1PE10.3)
                  WRITE(6,12660)i_survived_rr,prob_rr
12660             FORMAT(T10,'Russian Roulette eliminated ',I4, ' partic
     *le(s) with probability ',F8.5)
              END IF
              ICOUNT=ICOUNT+1
              WRITE(6,12670)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),
     *        V(NP), W(NP),LATCH(NP),WT(NP)
12670         FORMAT(T10,'Now on top of stack',T36,':',I5,F9.3,2I4,3F8.3
     *,3F7.3,I10,1PE10.3)
          END IF
      ELSE IF((IARG .EQ. 24)) THEN
          ICOUNT=ICOUNT+1
          WRITE(6,12680)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP
     *    ), W(NP),LATCH(NP),WT(NP)
12680     FORMAT(' Rayleigh scattering occured',T36,':',I5,F9.3,2I4,3F8.
     *3,3F7.3,I10,1PE10.3)
      ELSE IF((IARG .EQ. 25)) THEN
          ICOUNT=ICOUNT+1
          WRITE(6,12690)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP
     *    ), W(NP),LATCH(NP),WT(NP)
12690     FORMAT(T10,'Fluorescent X-ray created',T36,':',I5,F9.3,2I4,3F8
     *.3,3F7.3,I10,1PE10.3)
      ELSE IF((IARG .EQ. 26)) THEN
          ICOUNT=ICOUNT+1
          WRITE(6,12700)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP
     *    ), W(NP),LATCH(NP),WT(NP)
12700     FORMAT(T10,'Coster-Kronig e- created',T36,':',I5,F9.3,2I4,3F8.
     *3,3F7.3,I10,1PE10.3)
      ELSE IF((IARG .EQ. 27)) THEN
          ICOUNT=ICOUNT+1
          WRITE(6,12710)NP,KE,IQ(NP),IR(NP),X(NP),Y(NP),Z(NP),U(NP),V(NP
     *    ), W(NP),LATCH(NP),WT(NP)
12710     FORMAT(T10,'Auger electron created',T36,':',I5,F9.3,2I4,3F8.3,
     *3F7.3,I10,1PE10.3)
      END IF
      IF ((IARG .EQ. 0 .AND. IWATCH .EQ. 2)) THEN
          WRITE(6,12720)USTEP,TUSTEP,VSTEP,TVSTEP,EDEP
12720     FORMAT(T5,'USTEP,TUSTEP,VSTEP,TVSTEP,EDEP',T36,':    ',5(1PE13
     *.4))
          ICOUNT=ICOUNT+1
      END IF
      IF((NP .EQ. 1 .OR. IARG .EQ. 0))RETURN
      IF (( IARG .LE. 3)) THEN
          N=NP-1
          KE = E(N) - ABS(IQ(N))*RM
          ICOUNT=ICOUNT+1
          WRITE(6,12730)N,KE,IQ(N),IR(N),X(N),Y(N),Z(N),U(N),V(N), W(N),
     *    LATCH(N),WT(N)
12730     FORMAT(T10,'Now on top of stack',T36,':',I5,F9.3,2I4,3F8.3,3F7
     *.3,I10,1PE10.3)
      END IF
      RETURN
      END
      SUBROUTINE SIGMA(NDATA,ISTAT,MODE,IERR)
      implicit none
      integer*4 NDATA,ISTAT,MODE,IERR
      COMMON/ERROR/DATA(1,10)
      real*8 data
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer*4 n,non0,i
      real*8 stat,sdenom
      real*8 emax,avg,error,datum,argmnt
      DATA EMAX/99.9/
      IERR=0
      IF (((MODE .LT. 0) .OR. (MODE .GT. 2))) THEN
          MODE=2
          IERR=1
      END IF
      IF (((NDATA.LE.0).OR.(NDATA.GT.1).OR.(ISTAT.LE.0).OR.(ISTAT.GT.10)
     *)) THEN
          IERR=-1
          RETURN
      END IF
      IF ((ISTAT .EQ. 1)) THEN
          IERR=10
          DO 12741 N=1,NDATA
              DATA(N,2)=EMAX
12741     CONTINUE
12742     CONTINUE
          RETURN
      END IF
      IF ((MODE.NE.0)) THEN
          STAT=FLOAT(ISTAT)
          SDENOM=STAT*(STAT-1.)
      END IF
      DO 12751 N=1,NDATA
          NON0=0
          AVG=0.0
          ERROR=0.0
          DO 12761 I=1,ISTAT
              DATUM=DATA(N,I)
              IF ((DATUM.NE.0.0)) THEN
                  NON0=NON0+1
                  AVG=AVG+DATUM
                  ERROR=ERROR+DATUM**2
              END IF
12761     CONTINUE
12762     CONTINUE
          IF ((NON0 .EQ. 0)) THEN
              IERR=11
              ERROR=EMAX
              GOTO 12770
          ELSE IF(((NON0 .EQ. 1) .AND. (MODE .EQ. 0))) THEN
              ERROR=EMAX
              GOTO12770
          ELSE
              IF ((MODE .EQ. 0)) THEN
                  STAT=FLOAT(NON0)
                  SDENOM=STAT*(STAT-1.)
              END IF
          END IF
          AVG=AVG/STAT
          ARGMNT=ERROR-STAT*AVG**2
          IF ((ARGMNT.LT.0.0)) THEN
              WRITE(6,12780)ARGMNT,ERROR,STAT,AVG,SDENOM
12780         FORMAT(' ***** - SQ RT IN SIGMA. ARGMNT,ERROR,STAT,AVG,SDE
     *NOM='/' ',5E12.4)
              ARGMNT=0.0
          END IF
          ERROR=SQRT(ARGMNT/SDENOM)
          IF ((AVG .EQ. 0.)) THEN
              ERROR=EMAX
          ELSE
              ERROR=100.*ERROR/ABS(AVG)
          END IF
          IF((MODE .EQ. 2))AVG=AVG*STAT
12770     CONTINUE
          DATA(N,1)=AVG
          DATA(N,2)=MIN(EMAX,ERROR)
12751 CONTINUE
12752 CONTINUE
      RETURN
      END
      subroutine prepare_alias_sampling(nsbin,fs_array,ws_array,ibin_arr
     *ay)
      implicit none
      integer*4 nsbin,ibin_array(nsbin)
      real*8 fs_array(nsbin),ws_array(nsbin)
      integer*4 i,j_l,j_h
      real*8 sum,aux
      sum = 0
      DO 12791 i=1,nsbin
          IF((fs_array(i) .LT. 1e-30))fs_array(i) = 1e-30
          ws_array(i) = -fs_array(i)
          ibin_array(i) = 1
          sum = sum + fs_array(i)
12791 CONTINUE
12792 CONTINUE
      sum = sum/nsbin
      DO 12801 i=1,nsbin-1
          DO 12811 j_h=1,nsbin
              IF (( ws_array(j_h) .LT. 0 )) THEN
                  IF((abs(ws_array(j_h)) .GT. sum))GOTO 12820
              END IF
12811     CONTINUE
12812     CONTINUE
          j_h = nsbin
12820     CONTINUE
              DO 12821 j_l=1,nsbin
              IF (( ws_array(j_l) .LT. 0 )) THEN
                  IF((abs(ws_array(j_l)) .LT. sum))GOTO 12830
              END IF
12821     CONTINUE
12822     CONTINUE
          j_l = nsbin
12830     aux = sum - abs(ws_array(j_l))
          ws_array(j_h) = ws_array(j_h) + aux
          ws_array(j_l) = -ws_array(j_l)/sum
          ibin_array(j_l) = j_h
          IF((i .EQ. nsbin-1))ws_array(j_h) = 1
12801 CONTINUE
12802 CONTINUE
      return
      end
      real*8 function alias_sample(nsbin,xs_array,ws_array,ibin_array)
      implicit none
      integer*4 nsbin,ibin_array(nsbin)
      real*8 xs_array(0:nsbin),ws_array(nsbin)
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      real*8 v1,v2,aj
      integer*4 j
      IF((rng_seed .GT. 128))call ranmar_get
      v1 = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      IF((rng_seed .GT. 128))call ranmar_get
      v2 = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      aj = 1 + v1*nsbin
      j = aj
      IF((j .GT. nsbin))j = nsbin
      aj = aj - j
      IF (( aj .GT. ws_array(j) )) THEN
          j = ibin_array(j)
      END IF
      alias_sample = (1-v2)*xs_array(j-1) + v2*xs_array(j)
      return
      end
      subroutine egs_init
      implicit none
      common/my_times/ t_elapsed, t_cpu, t_first
      real*8 t_elapsed, t_cpu
      integer t_first(8)
      real egs_tot_time,egs_etime
      real*8 dum
      call egs_set_defaults
      call egs_check_arguments
      call egs_init1
      return
      end
      subroutine egs_init1
      implicit none
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR( 2097154),MED( 2097154),IRAYLR,
     *IPHOTONUCR( 2097154)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      common/my_times/ t_elapsed, t_cpu, t_first
      real*8 t_elapsed, t_cpu
      integer t_first(8)
      real egs_tot_time,egs_etime
      integer l, lnblnk1, l1, l2
      integer i
      character arg*256,tmp_string*512, tmp1_string*512, ucode_dir*512,
     *line*80, line1*80,dattim*24
      logical have_input,egs_isdir,egs_strip_extension,ex, on_egs_home,i
     *s_opened
      integer*4 mypid
      integer getpid
      integer istat, egs_system, u, pos1, pos2,egs_get_unit,itmp
      real*8 dum
      t_elapsed = 0
      t_cpu = egs_etime()
      dum = egs_tot_time(1)
      call egs_date_and_time(t_first)
      DO 12841 i=1,len(line)
        line(i:i) = '='
12841 CONTINUE
12842 CONTINUE
      DO 12851 i=1,len(line1)
        line1(i:i) = '.'
12851 CONTINUE
12852 CONTINUE
      IF ((.NOT.is_pegsless)) THEN
        on_egs_home = .false.
        inquire(file=pegs_file,exist=ex)
        IF (( ex )) THEN
          kmpi=egs_get_unit(kmpi)
          IF ((kmpi.LT.0)) THEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,*) 'failed to get a free Fortran I/O unit for pe
     *gs file'
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          open(kmpi,file=pegs_file,status='old',err=12860)
          goto 12870
        END IF
        arg = pegs_file(:lnblnk1(pegs_file))
        ex = egs_strip_extension(arg,'.pegs4dat')
        l = lnblnk1(egs_home)
        l1 = lnblnk1('pegs4data') + 2*lnblnk1('/')
        l2 = lnblnk1(arg) + lnblnk1('.pegs4dat')
        IF (( l + l1 + l2 .GT. 256 )) THEN
          write(i_log,'(/a)') '***************** Warning: '
          write(i_log,*) 'pegs4 data file name (including absolute path)
     *'
          write(i_log,'(a,i4,a)') 'is too long (',l+l1+l2,') characters'
        ELSE
          pegs_file = egs_home(:lnblnk1(egs_home)) // 'pegs4' // '/' //
     *    'data' // '/' // arg(:lnblnk1(arg)) // '.pegs4dat'
          inquire(file=pegs_file,exist=ex)
          IF (( ex )) THEN
            kmpi=egs_get_unit(kmpi)
            IF ((kmpi.LT.0)) THEN
              write(i_log,'(/a)') '***************** Error: '
              write(i_log,*) 'failed to get a free Fortran I/O unit for
     *pegs file'
              write(i_log,'(/a)') '***************** Quiting now.'
              call exit(1)
            END IF
            open(kmpi,file=pegs_file,status='old',err=12860)
            on_egs_home = .true.
            goto 12870
          END IF
        END IF
        l = lnblnk1(hen_house)
        IF (( l + l1 + l2 .GT. 256 )) THEN
          write(i_log,'(/a)') '***************** Warning: '
          write(i_log,*) 'pegs4 data file name (including absolute path)
     *'
          write(i_log,'(a,i4,a)') 'is too long (',l+l1+l2,') characters'
        ELSE
          pegs_file = hen_house(:lnblnk1(hen_house)) // 'pegs4' // '/' /
     *    / 'data' // '/' // arg(:lnblnk1(arg)) // '.pegs4dat'
          inquire(file=pegs_file,exist=ex)
          IF (( ex )) THEN
            kmpi=egs_get_unit(kmpi)
            IF ((kmpi.LT.0)) THEN
              write(i_log,'(/a)') '***************** Error: '
              write(i_log,*) 'failed to get a free Fortran I/O unit for
     *pegs file'
              write(i_log,'(/a)') '***************** Quiting now.'
              call exit(1)
            END IF
            open(kmpi,file=pegs_file,status='old',err=12860)
            goto 12870
          END IF
        END IF
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'could not find pegs4 file named ',arg(:lnblnk1(a
     *  rg))
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
12870 CONTINUE
      DO 12881 i=1,len(tmp_string)
        tmp_string(i:i) = ' '
12881 CONTINUE
12882 CONTINUE
      tmp_string = hen_house(:lnblnk1(hen_house)) // 'data' // '/'
      i_nist_data=76
      i_incoh=78
      i_photo_relax=77
      i_photo_cs=79
      i_mscat=11
      DO 12891 i=1,len(tmp1_string)
        tmp1_string(i:i) = ' '
12891 CONTINUE
12892 CONTINUE
      tmp1_string = tmp_string(:lnblnk1(tmp_string)) // 'photo_cs.data'
      inquire(file=tmp1_string,exist=ex,opened=is_opened,number=itmp)
      IF (( .NOT.ex )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'EGSnrc data file ','photo_cs.data',' does not ex
     *ist'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF (( .NOT.is_opened )) THEN
        i_photo_cs=egs_get_unit(i_photo_cs)
        IF ((i_photo_cs.LT.0)) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'failed to get a free Fortran I/O unit for data
     * file ', tmp1_string(:lnblnk1(tmp1_string))
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        open(i_photo_cs,file=tmp1_string,status='old',err=12900)
      ELSE
        i_photo_cs = itmp
      END IF
      DO 12911 i=1,len(tmp1_string)
        tmp1_string(i:i) = ' '
12911 CONTINUE
12912 CONTINUE
      tmp1_string = tmp_string(:lnblnk1(tmp_string)) // 'msnew.data'
      inquire(file=tmp1_string,exist=ex,opened=is_opened,number=itmp)
      IF (( .NOT.ex )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'EGSnrc data file ','msnew.data',' does not exist
     *'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF (( .NOT.is_opened )) THEN
        i_mscat=egs_get_unit(i_mscat)
        IF ((i_mscat.LT.0)) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'failed to get a free Fortran I/O unit for data
     * file ', tmp1_string(:lnblnk1(tmp1_string))
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        open(i_mscat,file=tmp1_string,status='old',err=12900)
      ELSE
        i_mscat = itmp
      END IF
      DO 12921 i=1,len(tmp1_string)
        tmp1_string(i:i) = ' '
12921 CONTINUE
12922 CONTINUE
      tmp1_string = tmp_string(:lnblnk1(tmp_string)) // 'incoh.data'
      inquire(file=tmp1_string,exist=ex,opened=is_opened,number=itmp)
      IF (( .NOT.ex )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'EGSnrc data file ','incoh.data',' does not exist
     *'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF (( .NOT.is_opened )) THEN
        i_incoh=egs_get_unit(i_incoh)
        IF ((i_incoh.LT.0)) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'failed to get a free Fortran I/O unit for data
     * file ', tmp1_string(:lnblnk1(tmp1_string))
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        open(i_incoh,file=tmp1_string,status='old',err=12900)
      ELSE
        i_incoh = itmp
      END IF
      DO 12931 i=1,len(tmp1_string)
        tmp1_string(i:i) = ' '
12931 CONTINUE
12932 CONTINUE
      tmp1_string = tmp_string(:lnblnk1(tmp_string)) // 'photo_relax.dat
     *a'
      inquire(file=tmp1_string,exist=ex,opened=is_opened,number=itmp)
      IF (( .NOT.ex )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'EGSnrc data file ','photo_relax.data',' does not
     * exist'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF (( .NOT.is_opened )) THEN
        i_photo_relax=egs_get_unit(i_photo_relax)
        IF ((i_photo_relax.LT.0)) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'failed to get a free Fortran I/O unit for data
     * file ', tmp1_string(:lnblnk1(tmp1_string))
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        open(i_photo_relax,file=tmp1_string,status='old',err=12900)
      ELSE
        i_photo_relax = itmp
      END IF
      DO 12941 i=1,len(ucode_dir)
        ucode_dir(i:i) = ' '
12941 CONTINUE
12942 CONTINUE
      ucode_dir = egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(use
     *r_code)) // '/'
      have_input = .false.
      i_input=5
      IF (( lnblnk1(input_file) .GT. 0 )) THEN
        have_input = .true.
        l = lnblnk1(egs_home)
        l1 = lnblnk1(user_code)+1
        l2 = lnblnk1(input_file) + lnblnk1('.egsinp')
        IF (( l + l1 + l2 .GT. 1024 )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'input file name (including path) is too long '
     *    ,l+l1+l2
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        ex = egs_strip_extension(input_file,'.egsinp')
        tmp_string = ucode_dir(:lnblnk1(ucode_dir)) // input_file(:lnbln
     *  k1(input_file)) // '.egsinp'
        inquire(file=tmp_string,exist=ex)
        IF (( .NOT.ex )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'Input file ',tmp_string(:lnblnk1(tmp_string)),
     *    ' does not exist.'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        open(i_input,file=tmp_string,status='old',err=12950)
      END IF
      DO 12961 i=1,len(work_dir)
        work_dir(i:i) = ' '
12961 CONTINUE
12962 CONTINUE
      work_dir = 'egsrun_'
      mypid = getpid()
      call egs_itostring(work_dir,mypid,.false.)
      call egs_get_hostnm(host_name)
      IF((lnblnk1(host_name) .LT. 1))host_name = 'unknown'
      IF (( have_input )) THEN
        work_dir = work_dir(:lnblnk1(work_dir)) // '_' // input_file(:ln
     *  blnk1(input_file)) // '_' // host_name(:lnblnk1(host_name)) // '
     */'
      ELSE
        work_dir = work_dir(:lnblnk1(work_dir)) // '_noinput_' // host_n
     *  ame(:lnblnk1(host_name)) // '/'
      END IF
      DO 12971 i=1,len(tmp_string)
        tmp_string(i:i) = ' '
12971 CONTINUE
12972 CONTINUE
      tmp_string = ucode_dir(:lnblnk1(ucode_dir)) // work_dir(:lnblnk1(w
     *ork_dir))
      DO 12981 i=1,lnblnk1(tmp_string)
        IF (( tmp_string(i:i) .EQ. '/' )) THEN
          tmp_string(i:i) = '/'
        END IF
12981 CONTINUE
12982 CONTINUE
      ex = egs_isdir(tmp_string)
      IF (( ex )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'a directory named ',tmp_string(:lnblnk1(tmp_stri
     *  ng)),' already exists?'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      tmp1_string = 'mkdir ' // tmp_string(:lnblnk1(tmp_string))
      l = lnblnk1(tmp1_string)
      tmp1_string(l+1:l+1) = char(0)
      istat = egs_system(tmp1_string)
      IF (( istat .NE. 0 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'failed to create working directory ',tmp1_string
     *  (:lnblnk1(tmp1_string))
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      call egs_open_units(.true.)
      write(i_log,'(a)') line
      write(i_log,'(a,a,t55,a,$)') 'EGSnrc version 4 for ','linux64',' '
      call egs_get_fdate(dattim)
      write(i_log,'(a,/,a)') dattim,line
      pos1 = lnblnk1('output file(s)')
      pos2 = 80 - lnblnk1('linux')
      pos2 = min(pos2,80-lnblnk1(user_code))
      DO 12991 i=1,len(tmp_string)
        tmp_string(i:i) = ' '
12991 CONTINUE
12992 CONTINUE
      tmp_string = pegs_file
      call egs_strip_path(tmp_string)
      ex = egs_strip_extension(tmp_string,'.pegs4dat')
      IF (( on_egs_home )) THEN
        tmp_string = tmp_string(:lnblnk1(tmp_string)) // ' on EGS_HOME'
      ELSE
        tmp_string = tmp_string(:lnblnk1(tmp_string)) // ' on HEN_HOUSE'
      END IF
      IF (( lnblnk1(tmp_string) .GT. lnblnk1(pegs_file) )) THEN
        DO 13001 i=1,len(tmp_string)
          tmp_string(i:i) = ' '
13001   CONTINUE
13002   CONTINUE
        tmp_string = pegs_file
      END IF
      pos2 = min(pos2,80-lnblnk1(tmp_string))
      pos2 = min(pos2,80-lnblnk1(host_name))
      IF((have_input))pos2 = min(pos2,80-lnblnk1(input_file))
      pos2 = min(pos2,80-lnblnk1(output_file))
      IF((pos2 .LT. pos1+2))pos2 = pos1 + 2
      write(i_log,'(a,$)') 'configuration'
      l = pos2 - lnblnk1('configuration')
      write(i_log,'(a,$)') line1(:l)
      write(i_log,'(a)') 'linux'
      write(i_log,'(a,$)') 'user code'
      l = pos2 - lnblnk1('user code')
      write(i_log,'(a,$)') line1(:l)
      write(i_log,'(a)') user_code(:lnblnk1(user_code))
      write(i_log,'(a,$)') 'pegs file'
      l = pos2 - lnblnk1('pegs file')
      write(i_log,'(a,$)') line1(:l)
      write(i_log,'(a)') tmp_string(:lnblnk1(tmp_string))
      write(i_log,'(a,$)') 'using host'
      l = pos2 - lnblnk1('using host')
      write(i_log,'(a,$)') line1(:l)
      write(i_log,'(a)') host_name(:lnblnk1(host_name))
      IF (( have_input )) THEN
        write(i_log,'(a,$)') 'input file'
        l = pos2 - lnblnk1('input file')
        write(i_log,'(a,$)') line1(:l)
        write(i_log,'(a)') input_file(:lnblnk1(input_file))
      END IF
      write(i_log,'(a,$)') 'output file(s)'
      l = pos2 - lnblnk1('output file(s)')
      write(i_log,'(a,$)') line1(:l)
      write(i_log,'(a)') output_file(:lnblnk1(output_file))
      IF (( n_parallel .GT. 0 )) THEN
        write(i_log,'(a,$)') 'number of parallel jobs'
        l = pos2 - lnblnk1('number of parallel jobs')
        write(i_log,'(a,$)') line1(:l)
        write(i_log,'(i2)') n_parallel
        write(i_log,'(a,$)') 'job number'
        l = pos2 - lnblnk1('job number')
        write(i_log,'(a,$)') line1(:l)
        write(i_log,'(i2)') i_parallel
      END IF
      write(i_log,'(a)') line
      return
12950 write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) 'failed to open input file ',tmp_string(:lnblnk1(tm
     *p_string))
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
12860 write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) 'failed to open existing pegs file ',pegs_file(:lnb
     *lnk1(pegs_file))
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
12900 write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) 'failed to open EGSnrc data file ',tmp1_string(:lnb
     *lnk1(tmp1_string))
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      return
      end
      subroutine egs_check_arguments
      implicit none
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      character arg*256,tmp_string*512, line1*80
      logical have_arg,egs_isdir,egs_strip_extension,ex, on_egs_home
      integer narg, iargc, i, lnblnk1, l, l2,i_help,egs_get_unit
      narg = iargc()
      IF((narg .LT. 1))return
      have_arg = .false.
      DO 13011 i=1,narg-1
        call getarg(i,arg)
        l = lnblnk1(arg)
        IF (( ( l .EQ. lnblnk1('-H') .AND. arg(:l) .EQ. '-H' ) .OR. ( l
     *  .EQ. lnblnk1('--hen-house') .AND. arg(:l) .EQ. '--hen-house' ) )
     *  ) THEN
          have_arg = .true.
          call getarg(i+1,arg)
          GO TO13012
        END IF
13011 CONTINUE
13012 CONTINUE
      IF (( have_arg )) THEN
        l = lnblnk1(arg)
        DO 13021 i=1,len(hen_house)
          hen_house(i:i) = ' '
13021   CONTINUE
13022   CONTINUE
        IF (( l .GT. 0 )) THEN
          IF (( l .GT. 254 )) THEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,'(a,i5)') ' HEN_HOUSE argument is too long',l
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          hen_house(:l) = arg(:lnblnk1(arg))
          IF((hen_house(l:l) .NE. '/'))hen_house(l+1:l+1) = '/'
        ELSE
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(a)') ' empty argument after -H'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        DO 13031 i=1,lnblnk1(hen_house)
          IF (( hen_house(i:i) .EQ. '/' )) THEN
            hen_house(i:i) = '/'
          END IF
13031   CONTINUE
13032   CONTINUE
      END IF
      IF (( .NOT.egs_isdir(hen_house) )) THEN
        write(i_log,'(/a)') '***************** Warning: '
        write(i_log,'(a,a)') ' HEN_HOUSE directory ',hen_house(:lnblnk1(
     *  hen_house))
        write(i_log,'(a)') 'does not exist. Hope you know what you are d
     *oing.'
      END IF
      have_arg = .false.
      DO 13041 i=1,narg
        call getarg(i,arg)
        l = lnblnk1(arg)
        IF (( ( l .EQ. lnblnk1('-h') .AND. arg(:l) .EQ. '-h' ) .OR. ( l
     *  .EQ. lnblnk1('--help') .AND. arg(:l) .EQ. '--help' ) )) THEN
          have_arg = .true.
          GO TO13042
        END IF
13041 CONTINUE
13042 CONTINUE
      IF (( have_arg )) THEN
        call getarg(0,arg)
        call egs_strip_path(arg)
        write(i_log,'(//,a,a,a,//)') 'Usage: ',arg(:lnblnk1(arg)),' [arg
     *s] '
        tmp_string = hen_house(:lnblnk1(hen_house)) // 'pieces/help_mess
     *age'
        i_help=98
        i_help=egs_get_unit(i_help)
        IF ((i_help.LT.0)) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'failed to get a free Fortran I/O unit for help
     * file'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        open(i_help,file=tmp_string,status='old',err=13050)
13061   CONTINUE
          read(i_help,'(a)',err=13070,end=13070) line1
          write(i_log,'(a)') line1
        GO TO 13061
13062   CONTINUE
13070   CONTINUE
        call exit(0)
13050   CONTINUE
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'Did not find the help_message file!'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      have_arg = .false.
      DO 13081 i=1,narg
        call getarg(i,arg)
        l = lnblnk1(arg)
        IF (( ( l .EQ. lnblnk1('-b') .AND. arg(:l) .EQ. '-b' ) .OR. ( l
     *  .EQ. lnblnk1('--batch') .AND. arg(:l) .EQ. '--batch' ) )) THEN
          have_arg = .true.
          GO TO13082
        END IF
13081 CONTINUE
13082 CONTINUE
      IF((have_arg))is_batch = .true.
      have_arg = .false.
      DO 13091 i=1,narg-1
        call getarg(i,arg)
        l = lnblnk1(arg)
        IF (( ( l .EQ. lnblnk1('-P') .AND. arg(:l) .EQ. '-P' ) .OR. ( l
     *  .EQ. lnblnk1('--parallel') .AND. arg(:l) .EQ. '--parallel' ) ))
     *  THEN
          have_arg = .true.
          call getarg(i+1,arg)
          GO TO13092
        END IF
13091 CONTINUE
13092 CONTINUE
      IF (( have_arg )) THEN
        read(arg,*,err=13100) n_parallel
        IF((n_parallel .LT. 0))goto 13100
        goto 13110
13100   CONTINUE
        write(i_log,'(/a)') '***************** Warning: '
        write(i_log,*) ' Wrong/missing parallel job number argument, -P
     *option ignored'
        n_parallel = 0
13110   CONTINUE
      END IF
      have_arg = .false.
      DO 13121 i=1,narg-1
        call getarg(i,arg)
        l = lnblnk1(arg)
        IF (( ( l .EQ. lnblnk1('-j') .AND. arg(:l) .EQ. '-j' ) .OR. ( l
     *  .EQ. lnblnk1('--job') .AND. arg(:l) .EQ. '--job' ) )) THEN
          have_arg = .true.
          call getarg(i+1,arg)
          GO TO13122
        END IF
13121 CONTINUE
13122 CONTINUE
      IF (( have_arg )) THEN
        read(arg,*,err=13130) i_parallel
        IF((i_parallel .LT. 0))goto 13130
        goto 13140
13130   CONTINUE
        write(i_log,'(/a)') '***************** Warning: '
        write(i_log,*) ' Wrong/missing job argument, -j option ognored'
        i_parallel = 0
13140   CONTINUE
      END IF
      have_arg = .false.
      DO 13151 i=1,narg-1
        call getarg(i,arg)
        l = lnblnk1(arg)
        IF (( ( l .EQ. lnblnk1('-f') .AND. arg(:l) .EQ. '-f' ) .OR. ( l
     *  .EQ. lnblnk1('--first-job') .AND. arg(:l) .EQ. '--first-job' ) )
     *  ) THEN
          have_arg = .true.
          call getarg(i+1,arg)
          GO TO13152
        END IF
13151 CONTINUE
13152 CONTINUE
      IF (( have_arg )) THEN
        read(arg,*,err=13160) first_parallel
        IF((first_parallel .LT. 1))goto 13160
        goto 13170
13160   CONTINUE
        write(i_log,'(/a)') '***************** Warning: '
        write(i_log,*) ' Wrong/missing first job argument, -f option ogn
     *ored'
        first_parallel = 1
13170   CONTINUE
      END IF
      IF (( n_parallel .GT. 0 .OR. i_parallel .GT. 0 )) THEN
        IF (( n_parallel*i_parallel .EQ. 0 )) THEN
          write(i_log,'(/a)') '***************** Warning: '
          write(i_log,*) 'You need to specify number of jobs AND job num
     *ber ', '=> will not use parallel run '
          n_parallel = 0
          i_parallel = 0
        END IF
        IF (( first_parallel .GT. i_parallel )) THEN
          write(i_log,'(/a)') '***************** Warning: '
          write(i_log,*) 'i_parallel (',i_parallel, ') can not be smalle
     *r than first_parallel (',first_parallel,')'
          first_parallel = i_parallel
        END IF
      END IF
      have_arg = .false.
      DO 13181 i=1,narg-1
        call getarg(i,arg)
        l = lnblnk1(arg)
        IF (( ( l .EQ. lnblnk1('-e') .AND. arg(:l) .EQ. '-e' ) .OR. ( l
     *  .EQ. lnblnk1('--egs-home') .AND. arg(:l) .EQ. '--egs-home' ) ))
     *  THEN
          have_arg = .true.
          call getarg(i+1,arg)
          GO TO13182
        END IF
13181 CONTINUE
13182 CONTINUE
      IF (( have_arg )) THEN
        l = lnblnk1(arg)
        DO 13191 i=1,len(egs_home)
          egs_home(i:i) = ' '
13191   CONTINUE
13192   CONTINUE
        IF (( l .EQ. 0 )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(a)') ' empty argument after -e'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        IF (( l .GT. 254 )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(a,i5)') ' EGS_HOME argument is too long ',l
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        egs_home(:l) = arg(:lnblnk1(arg))
        IF((egs_home(l:l) .NE. '/'))egs_home(l+1:l+1) = '/'
        DO 13201 i=1,lnblnk1(egs_home)
          IF (( egs_home(i:i) .EQ. '/' )) THEN
            egs_home(i:i) = '/'
          END IF
13201   CONTINUE
13202   CONTINUE
      END IF
      IF (( .NOT.egs_isdir(egs_home) )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) ' EGS_HOME directory ',egs_home(:lnblnk1(egs_home
     *  )),' does not exist.'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      on_egs_home = .false.
      is_pegsless=.false.
      have_arg = .false.
      DO 13211 i=1,narg-1
        call getarg(i,arg)
        l = lnblnk1(arg)
        IF (( ( l .EQ. lnblnk1('-p') .AND. arg(:l) .EQ. '-p' ) .OR. ( l
     *  .EQ. lnblnk1('--pegs-file') .AND. arg(:l) .EQ. '--pegs-file' ) )
     *  ) THEN
          have_arg = .true.
          call getarg(i+1,arg)
          GO TO13212
        END IF
13211 CONTINUE
13212 CONTINUE
      IF (( .NOT.have_arg )) THEN
        write(i_log,'(/a)') '***************** Warning: '
        write(i_log,*) 'No pegs4 file name supplied.  Will assume you ar
     *e running    in pegs-less mode with media details specified in inp
     *ut file.'
        is_pegsless=.true.
      ELSE
        pegs_file = arg(:lnblnk1(arg))
      END IF
      call egs_get_usercode(user_code)
      have_arg = .false.
      DO 13221 i=1,narg-1
        call getarg(i,arg)
        l = lnblnk1(arg)
        IF (( ( l .EQ. lnblnk1('-i') .AND. arg(:l) .EQ. '-i' ) .OR. ( l
     *  .EQ. lnblnk1('--input') .AND. arg(:l) .EQ. '--input' ) )) THEN
          have_arg = .true.
          call getarg(i+1,arg)
          GO TO13222
        END IF
13221 CONTINUE
13222 CONTINUE
      IF (( have_arg )) THEN
        ex = egs_strip_extension(arg,'.egsinp')
        l2 = lnblnk1(arg) + lnblnk1('.egsinp')
        IF (( l2 .GT. 256 )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'input file name is too long ',l2
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        input_file = arg(:lnblnk1(arg))
      END IF
      have_arg = .false.
      DO 13231 i=1,narg-1
        call getarg(i,arg)
        l = lnblnk1(arg)
        IF (( ( l .EQ. lnblnk1('-o') .AND. arg(:l) .EQ. '-o' ) .OR. ( l
     *  .EQ. lnblnk1('--output') .AND. arg(:l) .EQ. '--output' ) )) THEN
          have_arg = .true.
          call getarg(i+1,arg)
          GO TO13232
        END IF
13231 CONTINUE
13232 CONTINUE
      IF (( have_arg )) THEN
        l = lnblnk1(arg)
        IF (( l .GT. 256 )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'output file name is too long ',l
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        output_file(:l) = arg(:lnblnk1(arg))
      ELSE
        IF (( lnblnk1(input_file) .GT. 0 )) THEN
          output_file(:lnblnk1(input_file)) = input_file(:lnblnk1(input_
     *    file))
        ELSE
          output_file = 'test'
        END IF
      END IF
      return
      end
      subroutine egs_open_units(flag)
      implicit none
      logical flag
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      character tmp_string*1024, tmp1_string*1024, tmp2_string*1024, uco
     *de_dir*1024, input_line*100, arg*20
      integer i,lnblnk1,u,l,istart,egs_get_unit,i_iofile
      logical ex,is_open
      DO 13241 i=1,len(tmp_string)
        tmp_string(i:i) = ' '
13241 CONTINUE
13242 CONTINUE
      DO 13251 i=1,len(ucode_dir)
        ucode_dir(i:i) = ' '
13251 CONTINUE
13252 CONTINUE
      ucode_dir = egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(use
     *r_code)) // '/'
      IF (( flag )) THEN
        tmp_string = ucode_dir(:lnblnk1(ucode_dir)) // work_dir(:lnblnk1
     *  (work_dir))
      ELSE
        tmp_string = ucode_dir(:lnblnk1(ucode_dir))
      END IF
      tmp_string = tmp_string(:lnblnk1(tmp_string)) // output_file(:lnbl
     *nk1(output_file))
      IF (( i_parallel .GT. 0 )) THEN
        tmp_string = tmp_string(:lnblnk1(tmp_string)) // '_w'
        call egs_itostring(tmp_string,i_parallel,.false.)
      END IF
      DO 13261 i=1,len(tmp1_string)
        tmp1_string(i:i) = ' '
13261 CONTINUE
13262 CONTINUE
      i_log=6
      IF (( is_batch )) THEN
        tmp1_string = tmp_string(:lnblnk1(tmp_string)) // '.egslog'
        open(i_log,file=tmp1_string,status='unknown',err=13270)
      END IF
      DO 13281 i=1,len(tmp2_string)
        tmp2_string(i:i) = ' '
13281 CONTINUE
13282 CONTINUE
      tmp2_string = ucode_dir(:lnblnk1(ucode_dir)) // user_code(:lnblnk1
     *(user_code)) // '.io'
      inquire(file=tmp2_string,exist=ex)
      n_files = 0
      IF (( ex )) THEN
        i_iofile=99
        i_iofile=egs_get_unit(i_iofile)
        IF ((i_iofile.LT.1)) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'failed to get a free Fortran I/O unit for .io
     *file'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        open(i_iofile,file=tmp2_string,status='old',err=13290)
13301   CONTINUE
          read(i_iofile,'(a)',err=13310,end=13310) input_line
          IF((input_line(1:1) .EQ. '#'))GO TO13301
          read(input_line,*,err=13320,end=13320) u
          istart = 1
          DO 13331 i=lnblnk1(input_line),1,-1
            IF (( input_line(i:i) .EQ. ' ' )) THEN
              istart = i+1
              GO TO13332
            END IF
13331     CONTINUE
13332     CONTINUE
          DO 13341 i=1,len(arg)
            arg(i:i) = ' '
13341     CONTINUE
13342     CONTINUE
          DO 13351 i=istart,lnblnk1(input_line)
            arg(i+1-istart:i+1-istart) = input_line(i:i)
13351     CONTINUE
13352     CONTINUE
          inquire(unit=u,opened=is_open)
          IF (( is_open )) THEN
            write(i_log,'(/a)') '***************** Warning: '
            write(i_log,'(a,i3,a,a,a,/,a,/,a,/)') 'Unit ',u,' which you
     *want to connect to a ', arg(:lnblnk1(arg)),' file ', 'is already i
     *n use. Will assume this code is being used as', 'a shared library
     *source and this file will be opened explicitly.'
          ELSE
            n_files = n_files + 1
            IF (( n_files .GT. 20 )) THEN
              write(i_log,'(/a)') '***************** Error: '
              write(i_log,*) 'Too many units requested in .io.', ' Incre
     *as $mx_units and retry'
              write(i_log,'(/a)') '***************** Quiting now.'
              call exit(1)
            END IF
            file_units(n_files) = u
            DO 13361 i=1,len(file_extensions(n_files))
              file_extensions(n_files)(i:i) = ' '
13361       CONTINUE
13362       CONTINUE
            l = lnblnk1(arg)
            IF (( l .GT. 10 )) THEN
              write(i_log,'(/a)') '***************** Error: '
              write(i_log,*) 'extension ',arg(:lnblnk1(arg)),' is longer
     * than ', 10,' chars. ', 'Increase $max_extension_length and retry
     *'
              write(i_log,'(/a)') '***************** Quiting now.'
              call exit(1)
            END IF
            file_extensions(n_files) = arg(:lnblnk1(arg))
            tmp1_string = tmp_string(:lnblnk1(tmp_string)) // arg(:lnbln
     *      k1(arg))
            open(u,file=tmp1_string,status='unknown')
          END IF
13320     CONTINUE
        GO TO 13301
13302   CONTINUE
13310   close(i_iofile)
      END IF
      return
13270 write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) 'failed to open output file ',tmp1_string(:lnblnk1(
     *tmp1_string))
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
13290 write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) 'failed to open existing .io file',tmp2_string(:lnb
     *lnk1(tmp2_string))
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      return
      end
      subroutine egs_finish
      implicit none
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/my_times/ t_elapsed, t_cpu, t_first
      real*8 t_elapsed, t_cpu
      integer t_first(8)
      real egs_tot_time,egs_etime
      character line*80,base*512,base1*512,tmp_string*512,junk_file*128,
     *fname*512
      character dattim*24
      integer i,l,lnblnk1,istat,egs_system,n_open,unlink,i_junk,egs_get_
     *unit
      logical is_open,egs_isdir
      real*8 t1,t2,tt_cpu
      DO 13371 i=1,len(line)
        line(i:i) = '='
13371 CONTINUE
13372 CONTINUE
      IF (( n_parallel .EQ. 0 .OR. i_parallel .GT. 0 )) THEN
        t_elapsed = egs_tot_time(1)
        tt_cpu = egs_etime() - t_cpu
        t1 = t_elapsed
        t2 = t1/3600
        write(i_log,'(//a,/,a,/)') line,'Finished simulation'
        write(i_log,'(2x,a,t30,f9.1,a,f7.3,a)') 'Elapsed time: ',t1,' s
     *(',t2,' h)'
        t1 = tt_cpu
        t2 = t1/3600
        write(i_log,'(2x,a,t30,f9.1,a,f7.3,a)') 'CPU time:',t1,' s (',t2
     *  ,' h)'
        write(i_log,'(2x,a,t30,f10.3)') 'Ratio:',t_elapsed/tt_cpu
      END IF
      call egs_get_fdate(dattim)
      write(i_log,'(//a,t56,a,/,a)') 'End of run ',dattim,line
      n_open=0
      DO 13381 i=1,len(base)
        base(i:i) = ' '
13381 CONTINUE
13382 CONTINUE
      base = egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(user_cod
     *e))
      DO 13391 i=1,99
        IF (( is_batch .OR. i .NE. i_log )) THEN
          inquire(i,opened=is_open)
          IF (( is_open )) THEN
            inquire(i,name=fname)
            IF ((index(fname(:lnblnk1(fname)),base(:lnblnk1(base))).GT.0
     *      )) THEN
              close(i)
              n_open = n_open+1
            END IF
          END IF
        END IF
13391 CONTINUE
13392 CONTINUE
      IF (( lnblnk1(work_dir) .EQ. 0 )) THEN
        return
      END IF
      DO 13401 i=1,len(base)
        base(i:i) = ' '
13401 CONTINUE
13402 CONTINUE
      base = egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(user_cod
     *e)) // '/' // work_dir(:lnblnk1(work_dir))
      DO 13411 i=1,lnblnk1(base)
        IF (( base(i:i) .EQ. '/' )) THEN
          base(i:i) = '/'
        END IF
13411 CONTINUE
13412 CONTINUE
      IF (( egs_isdir(base) )) THEN
        DO 13421 i=1,len(tmp_string)
          tmp_string(i:i) = ' '
13421   CONTINUE
13422   CONTINUE
        DO 13431 i=1,len(junk_file)
          junk_file(i:i) = ' '
13431   CONTINUE
13432   CONTINUE
        junk_file = work_dir(:lnblnk1(work_dir))
        l = lnblnk1(junk_file)
        junk_file(l:l) = ' '
        junk_file = junk_file(:lnblnk1(junk_file)) // '_junk'
        tmp_string = base(:lnblnk1(base)) // junk_file(:lnblnk1(junk_fil
     *  e))
        i_junk=99
        i_junk=egs_get_unit(i_junk)
        IF ((i_junk.LT.0)) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'failed to get a free Fortran I/O unit for junk
     * file'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        open(i_junk,file=tmp_string,status='unknown')
        write(i_junk,*) 'junk'
        close(i_junk)
        DO 13441 i=1,len(base1)
          base1(i:i) = ' '
13441   CONTINUE
13442   CONTINUE
        base = egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(user_c
     *  ode)) // '/' // work_dir(:lnblnk1(work_dir))
        base1 = egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(user_
     *  code))
        DO 13451 i=1,len(tmp_string)
          tmp_string(i:i) = ' '
13451   CONTINUE
13452   CONTINUE
        tmp_string = 'mv -f ' // base(:lnblnk1(base)) // '*  ' // base1(
     *  :lnblnk1(base1))
        l = lnblnk1(tmp_string)+1
        tmp_string(l:l) = char(0)
        istat = egs_system(tmp_string)
        IF (( istat .NE. 0 )) THEN
          write(i_log,'(/a)') '***************** Warning: '
          write(i_log,*) 'Moving files from working directory failed ?'
          write(i_log,*) '=> will not remove working directory'
        ELSE
          DO 13461 i=1,len(tmp_string)
            tmp_string(i:i) = ' '
13461     CONTINUE
13462     CONTINUE
          tmp_string = 'rm -rf ' // base(:lnblnk1(base))
          l = lnblnk1(tmp_string)+1
          tmp_string(l:l) = char(0)
          istat = egs_system(tmp_string)
          IF (( istat .NE. 0 )) THEN
            write(i_log,'(/a)') '***************** Warning: '
            write(i_log,*) 'Failed to remove working directory ', work_d
     *      ir(:lnblnk1(work_dir))
          END IF
          DO 13471 i=1,len(tmp_string)
            tmp_string(i:i) = ' '
13471     CONTINUE
13472     CONTINUE
          tmp_string = base1(:lnblnk1(base1)) // '/' // junk_file(:lnbln
     *    k1(junk_file))
          l = lnblnk1(tmp_string)+1
          tmp_string(l:l) = char(0)
          istat = unlink(tmp_string)
        END IF
      END IF
      DO 13481 i=1,len(work_dir)
        work_dir(i:i) = ' '
13481 CONTINUE
13482 CONTINUE
      return
      end
      subroutine egs_set_defaults
      implicit none
      COMMON/BOUNDS/ECUT,PCUT,VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/BREMPR/ DL1(8,7),DL2(8,7),DL3(8,7),DL4(8,7),DL5(8,7),DL6(8,
     *7), ALPHI(2,7),BPAR(2,7),DELPOS(2,7), WA(7,50),PZ(7,50),ZELEM(7,50
     *),RHOZ(7,50), PWR2I(50), DELCM(7),ZBRANG(7),LZBRANG(7),NNE(7), IBR
     *DST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(7,50,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      common/compton_data/ iz_array(1538),  be_array(1538),  Jo_array(15
     *38),  erfJo_array(1538),   ne_array(1538),  shn_array(1538),
     *shell_array(200,7), eno_array(200,7), eno_atbin_array(200,7), n_sh
     *ell(7), radc_flag,  ibcmp
      integer*4 iz_array,ne_array,shn_array,eno_atbin_array, shell_array
     *,n_shell,radc_flag
      real*8 be_array,Jo_array,erfJo_array,eno_array
      integer*2 ibcmp
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L,IPHTER
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      COMMON/ELECIN/ esig_e(7),psig_e(7), esige_max, psige_max, range_ep
     *(0:1,500,7), E_array(500,7), etae_ms0(500,7),etae_ms1(500,7),etap_
     *ms0(500,7),etap_ms1(500,7),q1ce_ms0(500,7),q1ce_ms1(500,7),q1cp_ms
     *0(500,7),q1cp_ms1(500,7),q2ce_ms0(500,7),q2ce_ms1(500,7),q2cp_ms0(
     *500,7),q2cp_ms1(500,7),blcce0(500,7),blcce1(500,7), EKE0(7),EKE1(7
     *), XR0(7),TEFF0(7),BLCC(7),XCC(7), ESIG0(500,7),ESIG1(500,7),PSIG0
     *(500,7),PSIG1(500,7),EDEDX0(500,7),EDEDX1(500,7),PDEDX0(500,7),PDE
     *DX1(500,7),EBR10(500,7),EBR11(500,7),PBR10(500,7),PBR11(500,7),PBR
     *20(500,7),PBR21(500,7),TMXS0(500,7),TMXS1(500,7), expeke1(7), IUNR
     *ST(7),EPSTFL(7),IAPRIM(7), sig_ismonotone(0:1,7)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      common/CH_steps/ count_pII_steps,count_all_steps,is_ch_step
      real*8 count_pII_steps,count_all_steps
      logical is_ch_step
      common/ET_control/ SMAXIR,estepe,ximax,  skindepth_for_bca,transpo
     *rt_algorithm, bca_algorithm,exact_bca,spin_effects
      real*8 smaxir,  estepe,  ximax,      skindepth_for_bca
      integer*4 transport_algorithm, bca_algorithm
      logical exact_bca,  spin_effects
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR( 2097154),MED( 2097154),IRAYLR,
     *IPHOTONUCR( 2097154)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/PHOTIN/ EBINDA(7), GE0(7),GE1(7), GMFP0(2000,7),GMFP1(2000,
     *7),GBR10(2000,7),GBR11(2000,7),GBR20(2000,7),GBR21(2000,7), RCO0(7
     *),RCO1(7), RSCT0(100,7),RSCT1(100,7), COHE0(2000,7),COHE1(2000,7),
     *  PHOTONUC0(2000,7),PHOTONUC1(2000,7), DPMFP, MPGEM(1,7), NGR(7)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/THRESH/RMT2,RMSQ, AP(7),AE(7),UP(7),UE(7),TE(7),THMOLL(7)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIIN/SINC0,SINC1,SIN0(1002),SIN1(1002)
      real*8 SINC0,SINC1,SIN0,SIN1
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/egs_vr/ e_max_rr,  prob_RR,  nbr_split,  i_play_RR,      i_
     *survived_RR,
     *  n_RR_warning,                                        i_do_rr
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/spin_data/ spin_rej(7,0:1,0: 31,0:15,0:31), espin_min,espin
     *_max,espml,b2spin_min,b2spin_max, dbeta2,dbeta2i,dlener,dleneri,dq
     *q1,dqq1i, fool_intel_optimizer
      real*4 spin_rej,espin_min,espin_max,espml,b2spin_min,b2spin_max, d
     *beta2,dbeta2i,dlener,dleneri,dqq1,dqq1i
      logical fool_intel_optimizer
      common/eii_data/ eii_xsection_a( 10000),  eii_xsection_b( 10000),
     * eii_cons(7), eii_a(40),  eii_b(40),  eii_L_factor,  eii_z(40),  e
     *ii_sh(40),  eii_nshells(100),  eii_nsh(7),  eii_first(7,50),  eii_
     *no(7,50),  eii_flag
      real*8 eii_xsection_a,eii_xsection_b,eii_a,eii_b,eii_cons,eii_L_fa
     *ctor
      integer*4 eii_z,eii_sh,eii_nshells
      integer*4 eii_first,eii_no
      integer*4 eii_elements,eii_flag,eii_nsh
      COMMON/rayleigh_inputs/iray_ff_media(7),iray_ff_file(7)
      character*24 iray_ff_media
      character*128 iray_ff_file
      common/emf_inputs/ExIN,EyIN,EzIN,  EMLMTIN,  BxIN, ByIN, BzIN,  Bx
     *, By, Bz,  Bx_new, By_new, Bz_new,  emfield_on
      real*8 ExIN,EyIN,EzIN, EMLMTIN, BxIN,ByIN,BzIN, Bx,By,Bz, Bx_new,B
     *y_new,Bz_new
      logical emfield_on
      common/x_options/eadl_relax,  mcdf_pe_xsections
      logical eadl_relax, mcdf_pe_xsections
      integer i,j,lnblnk1
      CHARACTER*4 MEDIA1(24)
      EQUIVALENCE(MEDIA1(1),MEDIA(1,1))
      character fool_dec
      data MEDIA1/'N','A','I',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','
     *',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '/
      data fool_dec/'/'/
      data fool_intel_optimizer/.false./
      vacdst = 1e8
      DO 13491 i=1, 2097154
        ECUT = 0.
        PCUT = 0.
        ibcmp = 0
        IEDGFL = 0
        IPHTER = 0
        SMAXIR = 1e10
        i_do_rr = 0
        e_max_rr = 0
        med(i) = 1
        rhor(i) = 0
        IRAYLR = 0
        iphotonucr(i) = 0
13491 CONTINUE
13492 CONTINUE
      eii_flag = 0
      eii_xfile = 'Off'
      eii_L_factor = 1.0
      xsec_out = 0
      photon_xsections = 'xcom'
      comp_xsections = 'default'
      eadl_relax = .true.
      mcdf_pe_xsections = .false.
      photonuc_xsections = 'default'
      ExIN=0
      EyIN=0
      EzIN=0
      BxIN=0
      ByIN=0
      BzIN=0
      EMLMTIN=0.02
      Bx=BxIN
      By=ByIN
      Bz=BzIN
      Bx_new=Bx
      By_new=By
      Bz_new=Bz
      emfield_on=.false.
      IF (( ExIN**2+EyIN**2+EzIN**2 + BxIN**2+ByIN**2+BzIN**2 .GT. 0 ))
     *THEN
        emfield_on=.true.
      END IF
      DO 13501 i=1,7
        iraylm(i) = 0
        DO 13511 j=1,len(iray_ff_file(i))
          iray_ff_file(i)(j:j) = ' '
13511   CONTINUE
13512   CONTINUE
        DO 13521 j=1,len(iray_ff_media(i))
          iray_ff_media(i)(j:j) = ' '
13521   CONTINUE
13522   CONTINUE
        ae(i)=0
        ap(i)=0
        ue(i)=0
        up(i)=0
        te(i)=0
        thmoll(i)=0
13501 CONTINUE
13502 CONTINUE
      DO 13531 i=1,30
        DO 13541 j=1,100
          binding_energies(i,j) = 0
13541   CONTINUE
13542   CONTINUE
13531 CONTINUE
13532 CONTINUE
      ibrdst = 0
      ibr_nist = 0
      pair_nrc = 0
      itriplet = 0
      iprdst = 1
      rhof = 1
      DO 13551 i=1,5
        iausfl(i) = 1
13551 CONTINUE
13552 CONTINUE
      DO 13561 i=6,35
        iausfl(i) = 0
13561 CONTINUE
13562 CONTINUE
      ximax = 0.5
      estepe = 0.25
      skindepth_for_bca = 3
      transport_algorithm = 0
      bca_algorithm = 1
      exact_bca = .false.
      spin_effects = .true.
      count_pII_steps = 0
      count_all_steps = 0
      radc_flag = 0
      nmed = 1
      kmpi = 12
      kmpo = 8
      dunit = 1
      rng_seed = 999999
      latchi = 0
      rmt2 = 2*rm
      rmsq = rm*rm
      pi = 4*datan(1d0)
      twopi = 2*pi
      pi5d2 = 2.5*pi
      nbr_split = 1
      i_play_RR = 0
      i_survived_RR = 0
      prob_RR = -1
      n_RR_warning = 0
      DO 13571 i=1,len(hen_house)
        hen_house(i:i) = ' '
13571 CONTINUE
13572 CONTINUE
      i = lnblnk1('/home/miia/EGSnrc/HEN_HOUSE/')
      hen_house(:i) = '/home/miia/EGSnrc/HEN_HOUSE/'
      IF (( '/' .NE. fool_dec )) THEN
        DO 13581 j=1,i
          IF((hen_house(j:j) .EQ. '/'))hen_house(j:j) = '/'
13581   CONTINUE
13582   CONTINUE
      END IF
      IF((hen_house(i:i) .NE. '/'))hen_house(i+1:i+1) = '/'
      n_files = 0
      DO 13591 i=1,len(egs_home)
        egs_home(i:i) = ' '
13591 CONTINUE
13592 CONTINUE
      call getenv('EGS_HOME',egs_home)
      i = lnblnk1(egs_home)
      IF (( '/' .NE. fool_dec )) THEN
        DO 13601 j=1,i
          IF((egs_home(j:j) .EQ. '/'))egs_home(j:j) = '/'
13601   CONTINUE
13602   CONTINUE
      END IF
      IF((i .GT. 0 .AND. egs_home(i:i) .NE. '/'))egs_home(i+1:i+1) = '/'
      DO 13611 i=1,len(input_file)
        input_file(i:i) = ' '
13611 CONTINUE
13612 CONTINUE
      DO 13621 i=1,len(output_file)
        output_file(i:i) = ' '
13621 CONTINUE
13622 CONTINUE
      DO 13631 i=1,len(work_dir)
        work_dir(i:i) = ' '
13631 CONTINUE
13632 CONTINUE
      DO 13641 i=1,len(pegs_file)
        pegs_file(i:i) = ' '
13641 CONTINUE
13642 CONTINUE
      DO 13651 i=1,len(host_name)
        host_name(i:i) = ' '
13651 CONTINUE
13652 CONTINUE
      n_parallel = 0
      i_parallel = 0
      n_chunk = 0
      is_batch = .false.
      first_parallel = 1
      return
      end
      subroutine egs_combine_runs(combine_routine,extension)
      implicit none
      external combine_routine
      character*(*) extension
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      character*1024 tmp_string,base,command,outfile,parfile_name,base1,
     * text_string
      integer lnblnk1,istat,ipar,egs_system,egs_open_file
      integer*4 i,k,j,numparfiles,textindex
      logical ex,iwin
      iwin=.false.
      DO 13661 i=1,len(base)
        base(i:i) = ' '
13661 CONTINUE
13662 CONTINUE
      base = egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(user_cod
     *e)) // '/' // output_file(:lnblnk1(output_file)) // '_w'
      DO 13671 i=1,len(base1)
        base1(i:i) = ' '
13671 CONTINUE
13672 CONTINUE
      base1 = egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(user_co
     *de)) // '/' // output_file(:lnblnk1(output_file)) // '_w*' // exte
     *nsion(:lnblnk1(extension))
      DO 13681 i=1,len(outfile)
        outfile(i:i) = ' '
13681 CONTINUE
13682 CONTINUE
      outfile = egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(user_
     *code)) // '/' // 'parfiles_tmp'
      DO 13691 i=1,len(command)
        command(i:i) = ' '
13691 CONTINUE
13692 CONTINUE
      command = 'ls ' // base1(:lnblnk1(base1)) // ' | wc -l > ' // outf
     *ile(:lnblnk1(outfile))
      istat = egs_system(command(:lnblnk1(command)))
      IF ((istat.NE.0)) THEN
        command = 'dir ' // base1(:lnblnk1(base1)) // ' | find "File(s)"
     * > ' // outfile(:lnblnk1(outfile))
        istat = egs_system(command(:lnblnk1(command)))
        IF ((istat.NE.0)) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) ' Failed to write number of output files from p
     *arallel runs.'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        ELSE
          iwin=.true.
        END IF
      END IF
      ipar=1
      ipar=egs_open_file(ipar,0,1,outfile(:lnblnk1(outfile)))
      IF ((iwin)) THEN
        read(ipar,'(a)',err=13700,end=13700) text_string
        text_string = text_string(:lnblnk1(text_string))
        textindex = index(text_string,'File(s)')
        text_string = text_string(:textindex-1)
        read(text_string,'(i256)',err=13700) numparfiles
      ELSE
        read(ipar,'(i256)',err=13700,end=13700) numparfiles
      END IF
      close(ipar)
      DO 13711 i=1,len(command)
        command(i:i) = ' '
13711 CONTINUE
13712 CONTINUE
      IF ((iwin)) THEN
        command = 'del /Q ' // outfile(:lnblnk1(outfile))
      ELSE
        command = 'rm -f ' // outfile(:lnblnk1(outfile))
      END IF
      istat = egs_system(command(:lnblnk1(command)))
      IF ((istat.NE.0)) THEN
        write(i_log,'(/a)') '***************** Warning: '
        write(i_log,*) ' Failed to delete list of output files from para
     *llel runs.'
      END IF
      k=1
      j=1
13721 IF(j.GT.numparfiles)GO TO 13722
        DO 13731 i=1,len(tmp_string)
          tmp_string(i:i) = ' '
13731   CONTINUE
13732   CONTINUE
        tmp_string = base(:lnblnk1(base))
        call egs_itostring(tmp_string,k,.false.)
        tmp_string = tmp_string(:lnblnk1(tmp_string)) // extension(:lnbl
     *  nk1(extension))
        inquire(file=tmp_string,exist=ex)
        IF (( ex )) THEN
          call combine_routine(tmp_string)
          j=j+1
        END IF
        k=k+1
      GO TO 13721
13722 CONTINUE
      return
13700 write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) ' Failed to read number of output files from parall
     *el runs.'
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      end
      logical function egs_strip_extension(filen,fext)
      implicit none
      character*(*) filen,fext
      integer l1,l2,lnblnk1,i
      l1 = lnblnk1(filen)
      l2 = lnblnk1(fext)
      IF (( l1 .GE. l2 .AND. filen(l1-l2+1:l1) .EQ. fext(:l2) )) THEN
        egs_strip_extension = .true.
        DO 13741 i=l1-l2+1,len(filen)
          filen(i:i) = ' '
13741   CONTINUE
13742   CONTINUE
      ELSE
        egs_strip_extension = .false.
      END IF
      return
      end
      logical function egs_is_absolute_path(fn)
      implicit none
      character*(*) fn
      integer i,lnblnk1
      DO 13751 i=1,lnblnk1(fn)
        IF (( fn(i:i) .EQ. '/' )) THEN
          egs_is_absolute_path = .true.
          return
        END IF
13751 CONTINUE
13752 CONTINUE
      egs_is_absolute_path = .false.
      return
      end
      integer function egs_get_unit(iunit)
      implicit none
      integer*4 iunit, i
      logical is_open
      IF (( iunit .GT. 0 )) THEN
        inquire(iunit,opened=is_open)
        IF (( .NOT.is_open )) THEN
          egs_get_unit = iunit
          return
        END IF
      END IF
      DO 13761 i=1,99
        inquire(i,opened=is_open)
        IF (( .NOT.is_open )) THEN
          egs_get_unit = i
          return
        END IF
13761 CONTINUE
13762 CONTINUE
      egs_get_unit = -1
      return
      end
      integer function egs_open_file(iunit,rl,action,extension)
      implicit none
      integer*4 iunit, rl, action
      character*(*) extension
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      logical egs_is_absolute_path,is_open
      integer egs_get_unit
      integer i,lnblnk1
      character*1024 tmp_string,error_string
      integer*4 the_unit
      egs_open_file = -1
      the_unit = egs_get_unit(iunit)
      IF (( the_unit .LT. 0 )) THEN
        IF (( action .EQ. 0 )) THEN
          egs_open_file = -1
          return
        END IF
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'No free Fortran I/O units left'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF (( egs_is_absolute_path(extension) )) THEN
        inquire(file=extension,opened=is_open)
        IF ((is_open)) THEN
          inquire(file=extension,number=the_unit)
          write(i_log,'(/a)') '***************** Warning: '
          write(i_log,'(a,a,/,a,i3,/,a,/,a)') 'File ',extension(:lnblnk1
     *    (extension)), ' is already opened and connected to unit ',the_
     *    unit, ' Will not try to re-open this file, assuming it has bee
     *n opened', ' by the .io file.'
        ELSE IF(( rl .EQ. 0 )) THEN
          open(the_unit,file=extension,status='unknown')
        ELSE
          open(the_unit,file=extension,status='unknown',form='unformatte
     *d', access='direct', recl=rl)
        END IF
        egs_open_file = the_unit
        return
      END IF
      DO 13771 i=1,len(tmp_string)
        tmp_string(i:i) = ' '
13771 CONTINUE
13772 CONTINUE
      tmp_string = egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(us
     *er_code)) // '/' // work_dir(:lnblnk1(work_dir)) // output_file(:l
     *nblnk1(output_file))
      IF (( i_parallel .GT. 0 )) THEN
        tmp_string = tmp_string(:lnblnk1(tmp_string)) // '_w'
        call egs_itostring(tmp_string,i_parallel,.false.)
      END IF
      tmp_string = tmp_string(:lnblnk1(tmp_string)) // extension(:lnblnk
     *1(extension))
      inquire(file=tmp_string,opened=is_open)
      IF ((is_open)) THEN
        inquire(file=tmp_string,number=the_unit)
        write(i_log,'(/a)') '***************** Warning: '
        write(i_log,'(a,a,/,a,i3,/,a,/,a,/)') 'File ',tmp_string(:lnblnk
     *  1(tmp_string)), ' is already opened and connected to unit ',the_
     *  unit, ' Will not try to re-open this file, assuming it has been
     *opened', ' by specifying it in the .io file.'
      ELSE IF(( rl .EQ. 0 )) THEN
        open(the_unit,file=tmp_string,status='unknown',err=13780)
      ELSE
        open(the_unit,file=tmp_string,status='unknown',form='unformatted
     *', access='direct', recl=rl,err=13780)
      END IF
      egs_open_file = the_unit
      return
13780 error_string = 'In egs_open_file: failed to open file ' // tmp_str
     *ing(:lnblnk1(tmp_string)) // char(10) // 'iunit = '
      call egs_itostring(error_string,iunit,.false.)
      error_string = error_string(:lnblnk1(error_string)) // ' the_unit
     *= '
      call egs_itostring(error_string,the_unit,.false.)
      write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(a)') error_string(:lnblnk1(error_string))
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      end
      integer function egs_open_datfile(iunit,rl,action,extension)
      implicit none
      integer*4 iunit,rl,action
      character*(*) extension
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer i,the_unit,lnblnk1,egs_get_unit
      logical egs_is_absolute_path
      character base*1024, fn*1024
      egs_open_datfile = -1
      the_unit = egs_get_unit(iunit)
      IF (( the_unit .LT. 0 )) THEN
        IF (( action .EQ. 0 )) THEN
          egs_open_datfile = -1
          return
        END IF
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'No free Fortran I/O units left'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF (( egs_is_absolute_path(extension) )) THEN
        IF (( rl .EQ. 0 )) THEN
          open(the_unit,file=extension,status='old',err=13790)
        ELSE
          open(the_unit,file=extension,status='old',form='unformatted',
     *    access='direct',recl=rl,err=13790)
        END IF
        egs_open_datfile = the_unit
        return
13790   CONTINUE
        IF (( action .EQ. 0 )) THEN
          egs_open_datfile = -2
          return
        END IF
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'Failed to open file ',extension(:lnblnk1(extensi
     *  on))
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      DO 13801 i=1,len(base)
        base(i:i) = ' '
13801 CONTINUE
13802 CONTINUE
      DO 13811 i=1,len(fn)
        fn(i:i) = ' '
13811 CONTINUE
13812 CONTINUE
      base = egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(user_cod
     *e)) // '/'
      IF (( i_parallel .GT. 0 )) THEN
        fn = base(:lnblnk1(base)) // output_file(:lnblnk1(output_file))
     *  // '_w'
        call egs_itostring(fn,i_parallel,.false.)
        fn = fn(:lnblnk1(fn)) // extension(:lnblnk1(extension))
      ELSE
        fn = base(:lnblnk1(base)) // output_file(:lnblnk1(output_file))
     *  // extension(:lnblnk1(extension))
      END IF
      IF (( rl .EQ. 0 )) THEN
        open(the_unit,file=fn,status='old',err=13820)
      ELSE
        open(the_unit,file=fn,status='old',form='unformatted',access='di
     *rect', recl=rl,err=13820)
      END IF
      egs_open_datfile = the_unit
      return
13820 CONTINUE
      write(i_log,'(/a)') '***************** Warning: '
      write(i_log,'(a,a)') 'Failed to open ',fn(:lnblnk1(fn))
      DO 13831 i=1,len(fn)
        fn(i:i) = ' '
13831 CONTINUE
13832 CONTINUE
      IF (( i_parallel .GT. 0 )) THEN
        fn = base(:lnblnk1(base)) // input_file(:lnblnk1(input_file)) //
     *   '_w'
        call egs_itostring(fn,i_parallel,.false.)
        fn = fn(:lnblnk1(fn)) // extension(:lnblnk1(extension))
      ELSE
        fn = base(:lnblnk1(base)) // input_file(:lnblnk1(input_file)) //
     *   extension(:lnblnk1(extension))
      END IF
      IF (( rl .EQ. 0 )) THEN
        open(the_unit,file=fn,status='old',err=13840)
      ELSE
        open(the_unit,file=fn,status='old',form='unformatted',access='di
     *rect', recl=rl,err=13840)
      END IF
      egs_open_datfile = the_unit
      return
13840 CONTINUE
      write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) 'Failed to open data file'
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      end
      integer function egs_open_file_junk(iunit,do_it_anyway,filen)
      implicit none
      integer*4 iunit
      logical do_it_anyway
      character*(*) filen
      logical aux
      integer*4 the_unit,i
      inquire(file=filen,exist=aux)
      IF (( .NOT.aux )) THEN
        egs_open_file_junk = -2
        return
      END IF
      IF (( iunit .LT. 0 )) THEN
        the_unit = -iunit
      ELSE
        the_unit = iunit
      END IF
      IF (( the_unit .NE. 0 )) THEN
        inquire(unit=the_unit,opened=aux)
        IF (( aux )) THEN
          IF (( .NOT.do_it_anyway )) THEN
            egs_open_file_junk = -4
            return
          END IF
          IF((iunit .LT. 0))the_unit = 0
        END IF
      END IF
      IF (( the_unit .EQ. 0 )) THEN
        DO 13851 i=1,99
          inquire(unit=i,opened=aux)
          IF (( .NOT.aux )) THEN
            the_unit = i
            GO TO13852
          END IF
13851   CONTINUE
13852   CONTINUE
        IF (( the_unit .EQ. 0 )) THEN
          egs_open_file_junk = -1
          return
        END IF
      END IF
      open(the_unit,file=filen,status='old',err=13860)
      egs_open_file_junk = the_unit
      return
13860 egs_open_file_junk = -3
      return
      end
      subroutine egs_strip_path(fname)
      implicit none
      character*(*) fname
      integer i,l,l1,lnblnk1,j
      character slash
      slash = '/'
      l = lnblnk1(fname)
      DO 13871 i=1,l
        IF (( fname(i:i) .EQ. slash )) THEN
          fname(i:i) = '/'
        END IF
13871 CONTINUE
13872 CONTINUE
      DO 13881 i=l,1,-1
        IF (( fname(i:i) .EQ. '/' .OR. fname(i:i) .EQ. slash )) THEN
          l1 = l-i
          fname(:l1) = fname(i+1:l)
          DO 13891 j=l1+1,len(fname)
            fname(j:j) = ' '
13891     CONTINUE
13892     CONTINUE
          return
        END IF
13881 CONTINUE
13882 CONTINUE
      return
      end
      subroutine replace_env(fname)
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      character*(*) fname
      character*256 dirname
      integer indsep,ind1,ind2
      indsep = index(fname,'/')
      IF((indsep .LE. 0))return
      ind1=index(fname,'$')
      ind2=index(fname,'~')
      IF ((ind1.EQ.1)) THEN
        call getenv(fname(2:indsep-1),dirname)
        IF ((dirname.EQ.' ')) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(a,a/,a)') ' Error in file name: ',fname(:lnblnk1
     *    (fname)), ' First element in name does not specify a defined e
     *nvironment variable.'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        fname=dirname(:lnblnk1(dirname))//fname(indsep:)
        write(i_log,'(//a,a/)') ' Retrieving file: ',fname(:lnblnk1(fnam
     *  e))
      ELSE IF((ind2.EQ.1)) THEN
        call getenv('HOME',dirname)
        IF ((dirname.EQ.' ')) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(a,a/,a)') ' Error in file name: ',fname(:lnblnk1
     *    (fname)), ' HOME is undefined.'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        fname=dirname(:lnblnk1(dirname))//fname(indsep:)
        write(i_log,'(//a,a/)') ' Retrieving file: ',fname(:lnblnk1(fnam
     *  e))
      END IF
      return
      end
      subroutine egs_get_usercode(ucode)
      implicit none
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      character*(*) ucode
      character*512 arg
      integer l,l1,lnblnk1,i
      call getarg(0,arg)
      call egs_strip_path(arg)
      l = lnblnk1(arg)
      IF (( arg(l-3:l) .EQ. '.exe' )) THEN
        arg(l-3:l) = ' '
        l = l - 4
      END IF
      IF (( arg(l-5:l) .EQ. '_debug' )) THEN
        arg(l-5:l) = ' '
        l = l-5
      END IF
      IF (( arg(l-5:l) .EQ. '_noopt' )) THEN
        arg(l-5:l) = ' '
        l = l-5
      END IF
      l1 = len(ucode)
      IF (( l .GT. l1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) ' user code name is too long (',l,' chars)'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      DO 13901 i=1,len(ucode)
        ucode(i:i) = ' '
13901 CONTINUE
13902 CONTINUE
      ucode(:l) = arg(:l)
      return
      end
      subroutine egs_itostring(string,i,leave_space)
      implicit none
      character*(*) string
      integer*4 i
      integer l,lnblnk1,idiv,itmp,iaux
      logical first,leave_space
      l = lnblnk1(string)+1
      IF((l .GT. 1 .AND. leave_space))l=l+1
      idiv = 1000000000
      itmp = i
      first = .false.
      do while(idiv.gt.0)
      iaux = itmp/idiv
      IF (( (iaux .GT. 0 .OR. first ) .AND. l .LE. len(string) )) THEN
        string(l:l) = char(iaux+48)
        first = .true.
        l = l+1
      END IF
      itmp = itmp - iaux*idiv
      idiv = idiv/10
      end do
      return
      end
      real*8 function egs_rndm()
      implicit none
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      IF((rng_seed .GT. 128))call ranmar_get
      egs_rndm = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      return
      end
      integer function egs_add_medium(medname)
      implicit none
      character*(*) medname
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer*4 i,l,imed,medname_len
      character c
      logical same
      l = min(len(medname),24)
      medname_len = l
      DO 13911 i=1,l
        c = medname(i:i)
        IF (( ichar(c) .EQ. 0 )) THEN
          medname_len = i-1
          GO TO13912
        END IF
13911 CONTINUE
13912 CONTINUE
      DO 13921 imed=1,nmed
        l = 24
        DO 13931 i=1,24
          IF (( media(i,imed)(1:1) .EQ. ' ' )) THEN
            l = i-1
            GO TO13932
          END IF
13931   CONTINUE
13932   CONTINUE
        IF (( l .EQ. medname_len )) THEN
          same = .true.
          DO 13941 i=1,l
            c = medname(i:i)
            IF (( c .NE. media(i,imed)(1:1) )) THEN
              same = .false.
              GO TO13942
            END IF
13941     CONTINUE
13942     CONTINUE
          IF (( same )) THEN
            egs_add_medium = imed
            return
          END IF
        END IF
13921 CONTINUE
13922 CONTINUE
      nmed = nmed + 1
      IF (( nmed .GT. 7 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,'(a,/,a,i3,a)') 'In egs_add_medium: maximum number o
     *f media exceeded ', 'Increase the macro $MXMED (currently ',7,') a
     *nd retry'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      l = min(len(medname),24)
      DO 13951 i=1,l
        c = medname(i:i)
        IF (( ichar(c) .EQ. 0 )) THEN
          l = i-1
          GO TO13952
        END IF
        media(i,nmed) = ' '
        media(i,nmed)(1:1) = c
13951 CONTINUE
13952 CONTINUE
      IF (( l .LT. 24 )) THEN
        DO 13961 i=l+1,24
          media(i,nmed) = ' '
13961   CONTINUE
13962   CONTINUE
      END IF
      egs_add_medium = nmed
      return
      end
      subroutine egs_get_medium_name(imed,medname)
      implicit none
      character*(*) medname
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer*4 i,l,imed
      DO 13971 i=1,len(medname)
        medname(i:i) = ' '
13971 CONTINUE
13972 CONTINUE
      IF (( imed .LT. 1 .OR. imed .GT. nmed )) THEN
        return
      END IF
      l = 24
      DO 13981 l=24,1,-1
        IF((media(l,imed)(1:1) .NE. ' '))GO TO13982
13981 CONTINUE
13982 CONTINUE
      l = min(l,len(medname))
      DO 13991 i=1,l
        medname(i:i) = media(i,imed)(1:1)
13991 CONTINUE
13992 CONTINUE
      return
      end
      subroutine egs_get_electron_data(func,imed,which)
      implicit none
      integer*4 imed,which
      external func
      COMMON/ELECIN/ esig_e(7),psig_e(7), esige_max, psige_max, range_ep
     *(0:1,500,7), E_array(500,7), etae_ms0(500,7),etae_ms1(500,7),etap_
     *ms0(500,7),etap_ms1(500,7),q1ce_ms0(500,7),q1ce_ms1(500,7),q1cp_ms
     *0(500,7),q1cp_ms1(500,7),q2ce_ms0(500,7),q2ce_ms1(500,7),q2cp_ms0(
     *500,7),q2cp_ms1(500,7),blcce0(500,7),blcce1(500,7), EKE0(7),EKE1(7
     *), XR0(7),TEFF0(7),BLCC(7),XCC(7), ESIG0(500,7),ESIG1(500,7),PSIG0
     *(500,7),PSIG1(500,7),EDEDX0(500,7),EDEDX1(500,7),PDEDX0(500,7),PDE
     *DX1(500,7),EBR10(500,7),EBR11(500,7),PBR10(500,7),PBR11(500,7),PBR
     *20(500,7),PBR21(500,7),TMXS0(500,7),TMXS1(500,7), expeke1(7), IUNR
     *ST(7),EPSTFL(7),IAPRIM(7), sig_ismonotone(0:1,7)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 lemin,lemax
      lemin = (1 - eke0(imed))/eke1(imed)
      lemax = (meke(imed) - eke0(imed))/eke1(imed)
      IF (( which .EQ. 1 )) THEN
        call func(meke(imed),lemin,lemax,esig0(1,imed),esig1(1,imed))
      ELSE IF(( which .EQ. 2 )) THEN
        call func(meke(imed),lemin,lemax,psig0(1,imed),psig1(1,imed))
      ELSE IF(( which .EQ. 3 )) THEN
        call func(meke(imed),lemin,lemax,ededx0(1,imed),ededx1(1,imed))
      ELSE IF(( which .EQ. 4 )) THEN
        call func(meke(imed),lemin,lemax,pdedx0(1,imed),pdedx1(1,imed))
      ELSE IF(( which .EQ. 5 )) THEN
        call func(meke(imed),lemin,lemax,ebr10(1,imed),ebr11(1,imed))
      ELSE IF(( which .EQ. 6 )) THEN
        call func(meke(imed),lemin,lemax,pbr10(1,imed),pbr11(1,imed))
      ELSE IF(( which .EQ. 7 )) THEN
        call func(meke(imed),lemin,lemax,pbr20(1,imed),pbr21(1,imed))
      ELSE IF(( which .EQ. 8 )) THEN
        call func(meke(imed),lemin,lemax,tmxs0(1,imed),tmxs1(1,imed))
      ELSE IF(( which .EQ. 9 )) THEN
        call func(meke(imed),lemin,lemax,range_ep(0,1,imed),range_ep(1,1
     *  ,imed))
      ELSE
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'Unknown electron data type ',which
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      return
      end
      subroutine egs_get_photon_data(func,imed,which)
      implicit none
      integer*4 imed,which
      external func
      COMMON/PHOTIN/ EBINDA(7), GE0(7),GE1(7), GMFP0(2000,7),GMFP1(2000,
     *7),GBR10(2000,7),GBR11(2000,7),GBR20(2000,7),GBR21(2000,7), RCO0(7
     *),RCO1(7), RSCT0(100,7),RSCT1(100,7), COHE0(2000,7),COHE1(2000,7),
     *  PHOTONUC0(2000,7),PHOTONUC1(2000,7), DPMFP, MPGEM(1,7), NGR(7)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 lemin,lemax
      lemin = (1 - ge0(imed))/ge1(imed)
      lemax = (mge(imed) - ge0(imed))/ge1(imed)
      IF (( which .EQ. 1 )) THEN
        call func(mge(imed),lemin,lemax,gmfp0(1,imed),gmfp1(1,imed))
      ELSE IF(( which .EQ. 2 )) THEN
        call func(mge(imed),lemin,lemax,gbr10(1,imed),gbr11(1,imed))
      ELSE IF(( which .EQ. 3 )) THEN
        call func(mge(imed),lemin,lemax,gbr20(1,imed),gbr21(1,imed))
      ELSE IF(( which .EQ. 4 )) THEN
        call func(mge(imed),lemin,lemax,cohe0(1,imed),cohe1(1,imed))
      ELSE IF(( which .EQ. 5 )) THEN
        call func(mge(imed),lemin,lemax,PHOTONUC0(1,imed),PHOTONUC1(1,im
     *  ed))
      ELSE
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'Unknown photon data type ',which
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      return
      end
      subroutine egs_print_binding_energies
      implicit none
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L,IPHTER
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer*4 i,j
      integer*4 lnblnk1
      character*3 labels(16)
      data labels/'  K',' L1',' L2',' L3', ' M1',' M2',' M3',' M4',' M5'
     *, ' N1',' N2',' N3',' N4',' N5',' N6',' N7'/
      write(i_log,'(a,a,a)') 'Binding energies from ',photon_xsections(:
     *lnblnk1(photon_xsections)), ' photon cross section library'
      DO 14001 j=1,100
        DO 14011 i=1,16
          IF (( binding_energies(i,j) .GT. 0 )) THEN
            write(i_log,'(a,i3,a,a,a,1pe12.4,a)') ' Eb(',j,',',labels(i)
     *      ,') = ',binding_energies(i,j),' MeV'
          END IF
14011   CONTINUE
14012   CONTINUE
14001 CONTINUE
14002 CONTINUE
      return
      end
      subroutine egs_scale_xcc(imed,factor)
      implicit none
      integer*4 imed
      real*8 factor
      COMMON/ELECIN/ esig_e(7),psig_e(7), esige_max, psige_max, range_ep
     *(0:1,500,7), E_array(500,7), etae_ms0(500,7),etae_ms1(500,7),etap_
     *ms0(500,7),etap_ms1(500,7),q1ce_ms0(500,7),q1ce_ms1(500,7),q1cp_ms
     *0(500,7),q1cp_ms1(500,7),q2ce_ms0(500,7),q2ce_ms1(500,7),q2cp_ms0(
     *500,7),q2cp_ms1(500,7),blcce0(500,7),blcce1(500,7), EKE0(7),EKE1(7
     *), XR0(7),TEFF0(7),BLCC(7),XCC(7), ESIG0(500,7),ESIG1(500,7),PSIG0
     *(500,7),PSIG1(500,7),EDEDX0(500,7),EDEDX1(500,7),PDEDX0(500,7),PDE
     *DX1(500,7),EBR10(500,7),EBR11(500,7),PBR10(500,7),PBR11(500,7),PBR
     *20(500,7),PBR21(500,7),TMXS0(500,7),TMXS1(500,7), expeke1(7), IUNR
     *ST(7),EPSTFL(7),IAPRIM(7), sig_ismonotone(0:1,7)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      IF (( imed .GT. 0 .AND. imed .LE. nmed )) THEN
        xcc(imed) = xcc(imed)*factor
      END IF
      return
      end
      subroutine egs_write_string(ounit,string)
      implicit none
      integer*4 ounit
      character*(*) string
      write(ounit,'(a,$)') string
      call flush(ounit)
      return
      end
      subroutine egs_swap_2(c)
      character c(2),tmp
      tmp=c(2)
      c(2)=c(1)
      c(1)=tmp
      return
      end
      subroutine egs_swap_4(c)
      character c(4),tmp
      tmp=c(4)
      c(4)=c(1)
      c(1)=tmp
      tmp=c(3)
      c(3)=c(2)
      c(2)=tmp
      return
      end
      subroutine set_spline(x,f,a,b,c,d,n)
      implicit none
      integer*4 n
      real*8 x(n),f(n),a(n),b(n),c(n),d(n)
      integer*4 m1,m2,m,mr
      real*8 s,r
      m1 = 2
      m2 = n-1
      s = 0
      DO 14021 m=1,m2
        d(m) = x(m+1) - x(m)
        r = (f(m+1) - f(m))/d(m)
        c(m) = r - s
        s = r
14021 CONTINUE
14022 CONTINUE
      s=0
      r=0
      c(1)=0
      c(n)=0
      DO 14031 m=m1,m2
        c(m) = c(m) + r*c(m-1)
        b(m) = 2*(x(m-1) - x(m+1)) - r*s
        s = d(m)
        r = s/b(m)
14031 CONTINUE
14032 CONTINUE
      mr = m2
      DO 14041 m=m1,m2
        c(mr) = (d(mr)*c(mr+1) - c(mr))/b(mr)
        mr = mr - 1
14041 CONTINUE
14042 CONTINUE
      DO 14051 m=1,m2
        s = d(m)
        r = c(m+1) - c(m)
        d(m) = r/s
        c(m) = 3*c(m)
        b(m) = (f(m+1)-f(m))/s - (c(m)+r)*s
        a(m) = f(m)
14051 CONTINUE
14052 CONTINUE
      return
      end
      real*8 function spline(s,x,a,b,c,d,n)
      implicit none
      integer*4 n
      real*8 s,x(n),a(n),b(n),c(n),d(n)
      integer m_lower,m_upper,direction,m,ml,mu,mav
      real*8 q
      IF (( x(1) .GT. x(n) )) THEN
        direction = 1
        m_lower = n
        m_upper = 0
      ELSE
        direction = 0
        m_lower = 0
        m_upper = n
      END IF
      IF (( s .GE. x(m_upper + direction) )) THEN
        m = m_upper + 2*direction - 1
      ELSE IF(( s .LE. x(m_lower+1-direction) )) THEN
        m = m_lower - 2*direction + 1
      ELSE
        ml = m_lower
        mu = m_upper
14061   IF(iabs(mu-ml).LE.1)GO TO 14062
          mav = (ml+mu)/2
          IF (( s .LT. x(mav) )) THEN
            mu = mav
          ELSE
            ml = mav
          END IF
        GO TO 14061
14062   CONTINUE
        m = mu + direction - 1
      END IF
      q = s - x(m)
      spline = a(m) + q*(b(m) + q*(c(m) + q*d(m)))
      return
      end
      subroutine prepare_alias_table(nsbin,xs_array,fs_array,ws_array,ib
     *in_array)
      implicit none
      integer nsbin
      integer*4 ibin_array(nsbin)
      real*8 xs_array(0:nsbin),fs_array(0:nsbin),ws_array(nsbin)
      integer*4 i,j_l,j_h
      real*8 sum,aux
      sum = 0
      DO 14071 i=1,nsbin
        aux = 0.5*(fs_array(i)+fs_array(i-1))*(xs_array(i)-xs_array(i-1)
     *  )
        IF((aux .LT. 1e-30))aux = 1e-30
        ws_array(i) = -aux
        ibin_array(i) = 1
        sum = sum + aux
14071 CONTINUE
14072 CONTINUE
      sum = sum/nsbin
      DO 14081 i=1,nsbin-1
        DO 14091 j_h=1,nsbin
          IF (( ws_array(j_h) .LT. 0 )) THEN
            IF((abs(ws_array(j_h)) .GT. sum))GOTO 14100
          END IF
14091   CONTINUE
14092   CONTINUE
        j_h = nsbin
14100   CONTINUE
          DO 14101 j_l=1,nsbin
          IF (( ws_array(j_l) .LT. 0 )) THEN
            IF((abs(ws_array(j_l)) .LT. sum))GOTO 14110
          END IF
14101   CONTINUE
14102   CONTINUE
        j_l = nsbin
14110   aux = sum - abs(ws_array(j_l))
        ws_array(j_h) = ws_array(j_h) + aux
        ws_array(j_l) = -ws_array(j_l)/sum
        ibin_array(j_l) = j_h
        IF((i .EQ. nsbin-1))ws_array(j_h) = 1
14081 CONTINUE
14082 CONTINUE
      return
      end
      real*8 function alias_sample1(nsbin,xs_array,fs_array,ws_array,ibi
     *n_array)
      implicit none
      integer nsbin
      integer*4 ibin_array(nsbin)
      real*8 xs_array(0:nsbin),fs_array(0:nsbin),ws_array(nsbin)
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      integer*4 j
      real*8 r1,r2,aj,x,dx,a,rnno1
      IF((rng_seed .GT. 128))call ranmar_get
      r1 = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      IF((rng_seed .GT. 128))call ranmar_get
      r2 = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      aj = 1 + r1*nsbin
      j = aj
      aj = aj - j
      IF((aj .GT. ws_array(j)))j = ibin_array(j)
      x = xs_array(j-1)
      dx = xs_array(j)-x
      IF (( fs_array(j-1) .GT. 0 )) THEN
        a = fs_array(j)/fs_array(j-1)-1
        IF (( abs(a) .LT. 0.2 )) THEN
          rnno1 = 0.5*(1-r2)*a
          alias_sample1 = x + r2*dx*(1+rnno1*(1-r2*a))
        ELSE
          alias_sample1 = x - dx/a*(1-sqrt(1+r2*a*(2+a)))
        END IF
      ELSE
        alias_sample1 = x + dx*sqrt(r2)
      END IF
      return
      end
      subroutine prepare_alias_histogram(nsbin,ws_array,ibin_array)
      implicit none
      integer*4 nsbin,ibin_array(nsbin)
      real*8 ws_array(nsbin)
      integer*4 i,j_l,j_h
      real*8 sum,aux
      sum = 0
      DO 14121 i=1,nsbin
        sum = sum + ws_array(i)
        ibin_array(i) = -1
14121 CONTINUE
14122 CONTINUE
      sum = sum/nsbin
      DO 14131 i=1,nsbin-1
        DO 14141 j_h=1,nsbin
          IF((ibin_array(j_h) .LT. 0 .AND. ws_array(j_h) .GT. sum))GO TO
     *    14142
14141   CONTINUE
14142   CONTINUE
        DO 14151 j_l=1,nsbin
          IF((ibin_array(j_l) .LT. 0 .AND. ws_array(j_l) .LT. sum))GO TO
     *    14152
14151   CONTINUE
14152   CONTINUE
        aux = sum - ws_array(j_l)
        ws_array(j_h) = ws_array(j_h) - aux
        ws_array(j_l) = ws_array(j_l)/sum
        ibin_array(j_l) = j_h
14131 CONTINUE
14132 CONTINUE
      DO 14161 i=1,nsbin
        IF (( ibin_array(i) .LT. 0 )) THEN
          ibin_array(i) = i
          ws_array(i) = 1
        END IF
14161 CONTINUE
14162 CONTINUE
      return
      end
      integer*4 function sample_alias_histogram(nsbin,ws_array,ibin_arra
     *y)
      implicit none
      integer*4 nsbin,ibin_array(*)
      real*8 ws_array(*)
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      real*8 r1,r2
      integer*4 ibin
      IF((rng_seed .GT. 128))call ranmar_get
      r1 = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      IF((rng_seed .GT. 128))call ranmar_get
      r2 = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      ibin = 1 + nsbin*r1
      IF((r2 .GT. ws_array(ibin)))ibin = ibin_array(ibin)
      sample_alias_histogram = ibin
      return
      end
      subroutine gauss_legendre(x1,x2,x,w,n)
      implicit none
      integer*4 n
      real*8 x1,x2,x(n),w(n)
      real*8 eps,Pi
      parameter (eps = 3.D-14,Pi=3.141592654D0)
      integer*4 i,m,j
      real*8 xm,xl,z,z1,p1,p2,p3,pp
      m = (n + 1)/2
      xm=0.5d0*(x2+x1)
      xl=0.5d0*(x2-x1)
      DO 14171 i=1,m
        z=cos(Pi*(i-.25d0)/(n+.5d0))
14181   CONTINUE
          p1=1.d0
          p2=0.d0
          DO 14191 j=1,n
            p3 = p2
            p2 = p1
            p1=((2.d0*j-1.d0)*z*p2-(j-1.d0)*p3)/j
14191     CONTINUE
14192     CONTINUE
          pp=n*(z*p1-p2)/(z*z-1.d0)
          z1=z
          z=z1-p1/pp
          IF(((abs(z-z1) .LT. eps)))GO TO14182
        GO TO 14181
14182   CONTINUE
        x(i)=xm-xl*z
        x(n+1-i)=xm+xl*z
        w(i)=2.d0*xl/((1.d0-z*z)*pp*pp)
        w(n+1-i)=w(i)
14171 CONTINUE
14172 CONTINUE
      return
      end
      integer function lnblnk1(string)
      character*(*) string
      integer i
      DO 14201 i=len(string),1,-1
        j = ichar(string(i:i))
        IF (( j .EQ. 0 )) THEN
          lnblnk1 = i-1
          return
        END IF
        IF (( j .NE. 9 .AND. j .NE. 10 .AND. j .NE. 11 .AND. j .NE. 12 .
     *  AND. j .NE. 13 .AND. j .NE. 32 )) THEN
          lnblnk1 = i
          return
        END IF
14201 CONTINUE
14202 CONTINUE
      lnblnk1 = 0
      return
      end
      real*8 FUNCTION ERF1(X)
      implicit none
      real*8 x
      double precision A(0:22,2)
      double precision CONST,  BN,BN1,BN2,  Y,FAC
      integer*4 N,  K,  NLIM(2)
      DATA A/ 1.0954712997776232 , -0.2891754011269890 , 0.1104563986337
     *951 , -0.0412531882278565 , 0.0140828380706516 , -0.00432929544743
     *14 , 0.0011982719015923 , -0.0002999729623532 , 0.0000683258603789
     * , -0.0000142469884549 , 0.0000027354087728 , -0.0000004861912872
     *, 0.0000000803872762 , -0.0000000124184183 , 0.0000000017995326 ,
     *-0.0000000002454795 , 0.0000000000316251 , -0.0000000000038590 , 0
     *.0000000000004472 , -0.0000000000000493 , 0.0000000000000052 , -0.
     *0000000000000005 , 0.0000000000000001 , 0.9750834237085559 , -0.02
     *40493938504146 , 0.0008204522408804 , -0.0000434293081303 , 0.0000
     *030184470340 , -0.0000002544733193 , 0.0000000248583530 , -0.00000
     *00027317201 , 0.0000000003308472 , 0.0000000000001464 , -0.0000000
     *000000244 , 0.0000000000000042 , -0.0000000000000008 , 0.000000000
     *0000001 , 9*0.0 /
      DATA NLIM/ 22,16 /
      DATA CONST/ 1.128379167095513 /
      IF (( x .GT. 3 )) THEN
        y = 3/x
        k = 2
      ELSE
        y = x/3
        k = 1
      END IF
      FAC = 2.0 * ( 2.0 * Y*Y - 1.0 )
      BN1 = 0.0
      BN = 0.0
      DO 14211 n=NLIM(K),0,-1
        BN2 = BN1
        BN1 = BN
        BN = FAC * BN1 - BN2 + A(N,K)
14211 CONTINUE
14212 CONTINUE
      IF (( k .EQ. 1 )) THEN
        erf1 = CONST * Y * ( BN - BN1 )
      ELSE
        erf1 = 1 - CONST * EXP(-X**2) * ( BN - BN2 + A(0,K) )/(4.0 * X)
      END IF
      RETURN
      end
      real*8 FUNCTION ZERO()
      implicit none
      integer*4 i
      real*8 x, xtemp
      x = 1.E-20
      DO 14221 i=1,100
        IF ((x .EQ. 0.0)) THEN
          GO TO14222
        ELSE
          xtemp = x
        END IF
        x = x/1.E5
14221 CONTINUE
14222 CONTINUE
      x = xtemp
      DO 14231 i=1,5
        IF ((x .NE. 0.0)) THEN
          xtemp = x
        ELSE
          GO TO14232
        END IF
        x = x/10
14231 CONTINUE
14232 CONTINUE
      x = xtemp
      DO 14241 i=2,10
        IF ((x .NE. 0.0)) THEN
          xtemp = x
        ELSE
          GO TO14242
        END IF
        x = x/i
14241 CONTINUE
14242 CONTINUE
      zero = xtemp
      return
      end
      character*512 function toUpper(a_string)
      character*(*) a_string
      character*512 the_string
      integer*4 cursor, i, lnblnk1
      toUpper = a_string
      the_string = a_string
      DO 14251 i=1,lnblnk1(the_string)
        cursor=ICHAR(the_string(i:i))
        IF (((cursor.GE.97).AND.(cursor.LE.122))) THEN
          cursor=cursor-32
          toUpper(i:i)=CHAR(cursor)
        END IF
14251 CONTINUE
14252 CONTINUE
      return
      end
      integer*1 function egs_read_byte(iunit, jrec)
      implicit none
      integer iunit, jrec, i, j, ierr
      integer*1 i_1
      character c_1
      equivalence (i_1,c_1)
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      read(iunit,rec=jrec,IOSTAT=ierr) c_1
      IF ((ierr.ne.0)) THEN
        write(i_log,'(/a)') '***************** Warning: '
        write(i_log,*) ' *** egs_read_byte: ERROR READING A byte *** '
        write(i_log,*) ' From unit ',iunit,' position ',jrec,' bytes'
        egs_read_byte = -1
        return
      END IF
      jrec = jrec + 1
      egs_read_byte = i_1
      return
      end
      integer*2 function egs_read_short(iunit, jrec)
      implicit none
      integer iunit, jrec, i, j, ierr
      integer*2 i_2
      character c_2(2)
      equivalence (i_2,c_2)
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      j = 0
      DO 14261 i=jrec,jrec+1
        j = j + 1
        read(iunit,rec=i,IOSTAT=ierr) c_2(j)
        IF ((ierr.ne.0)) THEN
          write(i_log,'(/a)') '***************** Warning: '
          write(i_log,*) ' *** egs_read_short: ERROR READING short integ
     *er *** '
          write(i_log,*) ' From unit ',iunit,' position ',jrec,' bytes'
          egs_read_short = -1
          return
        END IF
14261 CONTINUE
14262 CONTINUE
      jrec = jrec + 2
      egs_read_short = i_2
      return
      end
      integer*4 function egs_read_int(iunit, jrec)
      implicit none
      integer iunit, jrec, i, j, ierr
      integer*4 i_4
      character c_4(4)
      equivalence (i_4,c_4)
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      j = 0
      DO 14271 i=jrec,jrec+3
        j = j + 1
        read(iunit,rec=i,IOSTAT=ierr) c_4(j)
        IF ((ierr.ne.0)) THEN
          write(i_log,'(/a)') '***************** Warning: '
          write(i_log,*) ' *** egs_read_int: ERROR READING integer *** '
          write(i_log,*) ' From unit ',iunit,' position ',jrec,' bytes'
          egs_read_int = -1
          return
        END IF
14271 CONTINUE
14272 CONTINUE
      jrec = jrec + 4
      egs_read_int = i_4
      return
      end
      real*4 function egs_read_real(iunit, jrec)
      implicit none
      integer iunit, jrec, i, j, ierr
      real*4 r_4
      character c_4(4)
      equivalence (r_4,c_4)
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      j = 0
      DO 14281 i=jrec,jrec+3
        j = j + 1
        read(iunit,rec=i,IOSTAT=ierr) c_4(j)
        IF ((ierr.ne.0)) THEN
          write(i_log,'(/a)') '***************** Warning: '
          write(i_log,*) ' *** egs_read_real: ERROR READING float *** '
          write(i_log,*) ' From unit ',iunit,' position ',jrec,' bytes'
          egs_read_real = -1
          return
        END IF
14281 CONTINUE
14282 CONTINUE
      jrec = jrec + 4
      egs_read_real = r_4
      return
      end
      integer*4 function ibsearch(a, nsh, b)
      implicit none
      real*8 a, b(*)
      integer*4 min,max,help,nsh
      real*8 x
      min = 1
      max = nsh
      x = a
14291 IF(min.GE.max-1)GO TO 14292
        help = (max+min)/2
        IF (( b(help).le.x)) THEN
          min = help
        ELSE
          max = help
        END IF
      GO TO 14291
14292 CONTINUE
      ibsearch = min
      return
      end
#ifdef HAVE_C_COMPILER
      integer*4 function egs_create_lockfile(flag)
      integer*4 flag
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      character*512 fname
      integer*4 i,lnblnk1,l,istat
      DO 14301 i=1,len(fname)
        fname(i:i) = ' '
14301 CONTINUE
14302 CONTINUE
      fname = egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(user_co
     *de)) // '/' // output_file(:lnblnk1(output_file)) // '.lock'
      l = lnblnk1(fname)+1
      fname(l:l) = char(0)
      call egs_create_control_file(fname,istat)
      IF (( istat .NE. 0 .AND. flag .EQ. 1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'Failed to create a lock file named ',fname(:lnbl
     *  nk1(fname))
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      egs_create_lockfile = istat
      return
      end
      integer*4 function egs_open_lockfile(flag)
      integer*4 flag
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      character*512 fname
      integer*4 i,lnblnk1,l,istat
      DO 14311 i=1,len(fname)
        fname(i:i) = ' '
14311 CONTINUE
14312 CONTINUE
      fname = egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(user_co
     *de)) // '/' // output_file(:lnblnk1(output_file)) // '.lock'
      l = lnblnk1(fname)+1
      fname(l:l) = char(0)
      call egs_open_control_file(fname,istat)
      IF (( istat .NE. 0 .AND. flag .EQ. 1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'Failed to open the lock file named ',fname(:lnbl
     *  nk1(fname))
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      egs_open_lockfile = istat
      return
      end
      subroutine egs_remove_lockfile(istat)
      integer*4 istat
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      character*512 fname
      integer*4 i,lnblnk1,l
      DO 14321 i=1,len(fname)
        fname(i:i) = ' '
14321 CONTINUE
14322 CONTINUE
      fname = egs_home(:lnblnk1(egs_home)) // user_code(:lnblnk1(user_co
     *de)) // '/' // output_file(:lnblnk1(output_file)) // '.lock'
      l = lnblnk1(fname)+1
      fname(l:l) = char(0)
      call egs_remove_file(fname,istat)
      return
      end
      subroutine egs_pjob_control(ncase,n_run,n_left,n_tot,sum,sum2,res,
     *dres)
      implicit none
      integer*8 ncase,n_run,n_tot
      real*8 sum,sum2,res,dres
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/my_times/ t_elapsed, t_cpu, t_first
      real*8 t_elapsed, t_cpu
      integer t_first(8)
      real egs_tot_time,egs_etime
      integer*8 n_last,n_left,nn_tot
      integer t_dum(8)
      integer*4 i,lnblnk1,n_write,n_read,istat,n_job
      integer*4 egs_create_lockfile, egs_open_lockfile
      real*8 tmp,tmp2
      logical first_time
      character control_string*256
      data first_time/.true./
      save first_time,n_last
      IF (( n_parallel .LE. 0 )) THEN
        n_run = ncase
        return
      END IF
      IF((first_time))n_last = 0
      DO 14331 i=1,len(control_string)
        control_string(i:i) = ' '
14331 CONTINUE
14332 CONTINUE
      n_run = ncase/n_parallel/10
      n_left = ncase
      IF (( first_time )) THEN
        IF((n_run .GT. n_left))n_run = n_left
        n_left = ncase - n_run
        IF (( i_parallel .EQ. first_parallel )) THEN
          istat = egs_create_lockfile(1)
          IF (( n_tot .GT. 1 )) THEN
            res = sum/n_tot
            dres = sum2/n_tot - res*res
            IF (( res .GT. 0 .AND. dres .GT. 0 )) THEN
              dres = sqrt(dres/(n_tot-1))/res*100
            ELSE
              dres = 99.9
            END IF
          ELSE
            res = 0
            dres = 99.9
          END IF
          write(control_string,'(2i15,i4,2(1pe16.8),1pe13.5,0pf7.2,2x,8i
     *5)') n_left,n_tot,1,sum,sum2,res,dres,(t_first(i),i=1,8)
          n_write = lnblnk1(control_string) + 1
          call egs_write_control_file(control_string,n_write,istat)
          IF (( istat .NE. n_write )) THEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,*) 'job 1: failed to write to lock file ',n_writ
     *      e,istat
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          call egs_unlock_control_file(istat)
          IF (( istat .NE. 0 )) THEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,*) 'job 1: failed to unlock the file ',istat
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          first_time = .false.
          n_max_parallel = 1
          n_last = n_run
          return
        END IF
        istat = egs_open_lockfile(1)
      END IF
      call egs_rewind_control_file(istat)
      IF (( istat .NE. 0 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'job ',i_parallel,': failed to rewind or lock the
     * control ', 'file', istat
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      n_read = len(control_string)
      call egs_read_control_file(control_string,n_read,istat)
      read(control_string,*,err=14340) n_left,nn_tot,n_job,tmp,tmp2, res
     *,dres,(t_dum(i),i=1,8)
      nn_tot = nn_tot + n_last
      tmp = tmp + sum
      tmp2 = tmp2 + sum2
      IF (( first_time )) THEN
        first_time = .false.
        n_job = n_job + 1
        nn_tot = nn_tot + n_tot
      END IF
      n_tot = nn_tot
      IF (( n_tot .GT. 1 )) THEN
        res = tmp/n_tot
        dres = tmp2/n_tot - res*res
        IF (( res .GT. 0 .AND. dres .GT. 0 )) THEN
          dres = sqrt(dres/(n_tot-1))/res*100
        ELSE
          dres = 99.9
        END IF
      ELSE
        res = 0
        dres = 99.9
      END IF
      IF (( n_run .GT. n_left )) THEN
        n_run = n_left
        n_left = 0
      ELSE
        n_left = n_left - n_run
      END IF
      n_last = n_run
      DO 14351 i=1,len(control_string)
        control_string(i:i) = ' '
14351 CONTINUE
14352 CONTINUE
      write(control_string,'(2i15,i4,2(1pe16.8),1pe13.5,0pf7.2,2x,8i5)')
     * n_left,n_tot,n_job,tmp,tmp2,res,dres,(t_dum(i),i=1,8)
      call egs_rewind_control_file(istat)
      IF (( istat .NE. 0 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'job ',i_parallel,': failed to rewind or lock the
     * control ', 'file', istat
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      n_write = lnblnk1(control_string) + 1
      call egs_write_control_file(control_string,n_write,istat)
      IF (( istat .NE. n_write )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'job ',i_parallel,': failed to write to lock file
     * ', n_write,istat
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      call egs_unlock_control_file(istat)
      IF (( istat .NE. 0 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'job ',i_parallel,': failed to unlock the file ',
     *  istat
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF((n_job .GT. n_max_parallel))n_max_parallel = n_job
      return
14340 write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(a,/a)') 'Failed to read from job control file: got '
     *, control_string(:lnblnk1(control_string))
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      return
      end
      subroutine egs_pjob_finish(n_job)
      implicit none
      integer*4 n_job
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/my_times/ t_elapsed, t_cpu, t_first
      real*8 t_elapsed, t_cpu
      integer t_first(8)
      real egs_tot_time,egs_etime
      integer*4 istat,i,lnblnk1,n_read,n_write
      integer*8 n_left,n_tot
      integer t_start(8),t_end(8)
      real*8 tmp,tmp2,res,dres,t_run
      real egs_time_diff
      character control_string*256
      call egs_rewind_control_file(istat)
      IF (( istat .NE. 0 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'job ',i_parallel,': failed to rewind or lock the
     * control ', 'file', istat
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      n_read = len(control_string)
      call egs_read_control_file(control_string,n_read,istat)
      read(control_string,*,end=14360,err=14360) n_left,n_tot,n_job,tmp,
     *tmp2,res,dres,(t_start(i),i=1,8)
      n_job = n_job - 1
      IF (( n_job .GT. 0 )) THEN
        DO 14371 i=1,len(control_string)
          control_string(i:i) = ' '
14371   CONTINUE
14372   CONTINUE
        write(control_string,'(2i15,i4,2(1pe16.8),1pe13.5,0pf7.2,2x,8i5)
     *') n_left,n_tot,n_job,tmp,tmp2,res,dres,(t_start(i),i=1,8)
        call egs_rewind_control_file(istat)
        IF (( istat .NE. 0 )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'job ',i_parallel,': failed to rewind or lock t
     *he ', 'control file, error was:', istat
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        n_write = lnblnk1(control_string) + 1
        call egs_write_control_file(control_string,n_write,istat)
        IF (( istat .NE. n_write )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'job ',i_parallel,': failed to write to lock fi
     *le ', n_write,istat
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        call egs_unlock_control_file(istat)
        call egs_close_control_file(istat)
        return
      END IF
      call egs_close_control_file(istat)
      call egs_remove_lockfile(istat)
      i_parallel = 0
      call egs_open_units(.false.)
      call egs_date_and_time(t_end)
      t_run = egs_time_diff(t_start,t_end)
      write(i_log,'(/a/,a,t55,i3/,a,t55,i3/,a,f9.1,a,f9.4,a/,a//)') '***
     ************** finished parallel execution ******************', ' n
     *umber of parallel jobs requested: ',n_parallel, ' max. number of j
     *obs executing simultaneously: ',n_max_parallel, ' elapsed time sin
     *ce first job started: ',t_run,' s (',t_run/3600,' h)', '**********
     ******************************************************'
      return
14360 CONTINUE
      write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(a,/a)') 'In egs_pjob_finish: failed to read from con
     *trol string ', control_string(:lnblnk1(control_string))
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      return
      end
#endif
      SUBROUTINE EFUNS(E,V)
      implicit none
      real*4 E,V(8)
      real*4 BREM,AMOLL,BHAB,ANNIH,ESIG,PSIG
      real*4 BREMTM,AMOLTM,BHABTM,ANIHTM,SPTOTE,SPTOTP,TMXS,THBREM
      COMMON/THRESHP/APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP,IUNRSTP
      real*4 APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP
      integer*4 IUNRSTP
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      THBREM=RMP+APP
      IF ((IUNRSTP.EQ.0 .OR. IUNRSTP.EQ.1 .OR. IUNRSTP.EQ.5)) THEN
        BREM=BREMTM(E)
        AMOLL=AMOLTM(E)
        BHAB=BHABTM(E)
        ANNIH=ANIHTM(E)
        ESIG=BREM+AMOLL
        V(1)=ESIG
        PSIG=BREM+BHAB+ANNIH
        V(2)=PSIG
        V(3)=SPTOTE(E,AEP,APP)
        V(4)=SPTOTP(E,AEP,APP)
        IF ((ESIG.GT.0.0)) THEN
          V(5)=BREM/ESIG
        ELSE
          IF ((THBREM.LE.THMOLLP)) THEN
            V(5)=1.0
          ELSE
            V(5)=0.0
          END IF
        END IF
        V(6)=BREM/PSIG
        V(7)=(BREM+BHAB)/PSIG
        V(8)=TMXS(E)
      ELSE IF((IUNRSTP.EQ.2)) THEN
        V(1)=0.0
        V(2)=0.0
        V(5)=0.0
        V(6)=0.0
        V(7)=0.0
        V(3) = SPTOTE(E,E,E)
        V(4) = SPTOTP(E,E,E)
        V(8) = TMXS(E)
      ELSE IF((IUNRSTP.EQ.3)) THEN
        BREM=BREMTM(E)
        ANNIH=ANIHTM(E)
        V(1)=BREM
        V(2)=BREM + ANNIH
        V(3)=SPTOTE(E,E,APP)
        V(4)=SPTOTP(E,E,APP)
        V(5)=1.0
        V(6)=BREM/V(2)
        V(7)=V(6)
        V(8)=TMXS(E)
      ELSE IF((IUNRSTP.EQ.4)) THEN
        V(1)=AMOLTM(E)
        V(2)=BHABTM(E)
        V(3)=SPTOTE(E,AEP,E)
        V(4)=SPTOTP(E,AEP,E)
        V(5)=0.0
        V(6)=0.0
        V(7)=1.0
        V(8)=TMXS(E)
      ELSE
        WRITE(6,14380)IUNRSTP
14380   FORMAT(//'*********IUNRST=',I4,' NOT ALLOWED BY EFUNS*****'/ ' I
     *UNRST=6 OR 7 ONLY ALLOWED WITH CALL OR PLTN OPTIONS'//)
        call exit(20)
      END IF
      RETURN
      END
      real*4 FUNCTION BREMTM(E0)
      implicit none
      real*4 E0,BREMRM
      COMMON/THRESHP/APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP,IUNRSTP
      real*4 APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP
      integer*4 IUNRSTP
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      IF ((E0.LE.APP+RMP)) THEN
        BREMTM=0.
      ELSE
        BREMTM=BREMRM(E0,APP,E0-RMP)
      END IF
      RETURN
      END
      real*4 FUNCTION BREMRM(E,K1,K2)
      implicit none
      real*4 E,K1,K2
      integer*4 I
      real*4 BREMRZ
      COMMON/MIXDAT/NEP,LMED,PZP(50),ZELEMP(50),WAP(50),RHOZP(50), GASPP
     *,EZ,TPZ,IDSTRN(24)
      integer*4 NEP,LMED
      real*4 PZP,ZELEMP,WAP,RHOZP,GASPP,EZ,TPZ
      CHARACTER*4 IDSTRN
      BREMRM=0.
      DO 14391 I=1,NEP
        BREMRM=BREMRM+PZP(I)*BREMRZ(ZELEMP(I),E,K1,K2)
14391 CONTINUE
14392 CONTINUE
      RETURN
      END
      real*4 FUNCTION BREMRZ(Z,E,K1,K2)
      implicit none
      real*4 Z,E,K1,K2
      EXTERNAL BREMFZ
      real*4 DUMMY,BREMDZ,QD,BREMFZ
      DUMMY=BREMDZ(Z,E,K1)
      BREMRZ=QD(BREMFZ,K1,K2,'BREMFZ')
      RETURN
      END
      real*4 FUNCTION BREMDZ(Z,E,K)
      implicit none
      real*4 Z,E,K,BRMSDZ
      BREMDZ=BRMSDZ(Z,E,K)/K
      RETURN
      END
      real*4 FUNCTION BREMFZ(K)
      implicit none
      real*4 K,BRMSFZ
      BREMFZ=BRMSFZ(K)/K
      RETURN
      END
      real*4 FUNCTION BRMSFZ(K)
      implicit none
      real*4 K
      real*4 EMKLOC,DELTA,SB1,SB2,EE
      COMMON/LBREMZ/CONST,DELC,EBREMZ,DELTAM,XLNZ
      real*4 CONST,DELC,EBREMZ,DELTAM,XLNZ
      EMKLOC=EBREMZ-K
      IF ((EMKLOC.EQ.0.0)) THEN
        EMKLOC=1.E-25
      END IF
      DELTA=DELC*K/EMKLOC
      IF ((DELTA.GE.DELTAM)) THEN
        BRMSFZ=0.0
      ELSE
        IF ((DELTA.LE.1.)) THEN
          SB1=20.867+DELTA*(-3.242+DELTA*0.625)-XLNZ
          SB2=20.209+DELTA*(-1.930+DELTA*(-0.086))-XLNZ
        ELSE
          SB1=21.12-4.184*LOG(DELTA+0.952)-XLNZ
          SB2=SB1
        END IF
        EE=EMKLOC/EBREMZ
        BRMSFZ=CONST*((1.+EE*EE)*SB1-0.666667*EE*SB2)
      END IF
      RETURN
      END
      real*4 FUNCTION AMOLTM(E0)
      implicit none
      real*4 E0
      real*4 T0,AMOLRM
      COMMON/THRESHP/APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP,IUNRSTP
      real*4 APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP
      integer*4 IUNRSTP
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      IF ((E0.LE.THMOLLP)) THEN
        AMOLTM=0.
      ELSE
        T0=E0-RMP
        AMOLTM=AMOLRM(E0,AEP,T0*0.5+RMP)
      END IF
      RETURN
      END
      real*4 FUNCTION AMOLRM(EN0,EN1,EN2)
      implicit none
      real*4 EN0,EN1,EN2
      real*4 T0,T1,T2,TM,EM,C1,C2,BETASQ,CMOLL2,EPS1,EPSP1,EPS2,EPSP2
      COMMON/PMCONS/PIP,C,RME,HBAR,ECGS,EMKS,AN
      real*4 PIP,C,RME,HBAR,ECGS,EMKS,AN
      COMMON/MOLVAR/WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU, RLCP,EDEN,RH
     *OP,XCCP,BLCCP,TEFF0P,XR0P
      real*4 WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU,RLCP,EDEN,RHOP, XCCP
     *,BLCCP,TEFF0P,XR0P
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      T0=EN0-RMP
      T1=EN1-RMP
      T2=EN2-RMP
      TM=T0/RMP
      EM=TM+1.
      C1=(TM/EM)**2
      C2=(2.*TM+1.)/EM**2
      BETASQ=1.-1./EM**2
      CMOLL2=RLCP*EDEN*2.*PIP*R0**2/(BETASQ*TM)
      EPS1=T1/T0
      EPSP1=1.-EPS1
      EPS2=T2/T0
      EPSP2=1.-EPS2
      AMOLRM=CMOLL2*(C1*(EPS2-EPS1)+1./EPS1-1./EPS2+1./EPSP2-1./EPSP1 -C
     *2*LOG(EPS2*EPSP1/(EPS1*EPSP2)))
      RETURN
      END
      real*4 FUNCTION BHABTM(E0)
      implicit none
      real*4 E0,BHABRM
      COMMON/THRESHP/APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP,IUNRSTP
      real*4 APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP
      integer*4 IUNRSTP
      IF ((E0.LE.AEP)) THEN
        BHABTM=0.
      ELSE
        BHABTM=BHABRM(E0,AEP,E0)
      END IF
      RETURN
      END
      real*4 FUNCTION BHABRM(EN0,EN1,EN2)
      implicit none
      real*4 EN0,EN1,EN2
      real*4 T0,T1,T2,TM,EM,Y,BETASI,CBHAB2,B1,B2,B3,B4,EPS1,EPS2
      COMMON/PMCONS/PIP,C,RME,HBAR,ECGS,EMKS,AN
      real*4 PIP,C,RME,HBAR,ECGS,EMKS,AN
      COMMON/MOLVAR/WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU, RLCP,EDEN,RH
     *OP,XCCP,BLCCP,TEFF0P,XR0P
      real*4 WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU,RLCP,EDEN,RHOP, XCCP
     *,BLCCP,TEFF0P,XR0P
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      T0=EN0-RMP
      T1=EN1-RMP
      T2=EN2-RMP
      TM=T0/RMP
      EM=TM+1.
      Y=1./(TM+2.)
      BETASI=1./(1.-1./EM**2)
      CBHAB2=RLCP*EDEN*2.*PIP*R0**2/TM
      B1=2.-Y**2
      B2=3.-Y*(6.-Y*(1.-Y*2.))
      B3=2.-Y*(10.-Y*(16.-Y*8.))
      B4=1.-Y*(6.-Y*(12.-Y*8.))
      EPS1=T1/T0
      EPS2=T2/T0
      BHABRM=CBHAB2*(BETASI*(1./EPS1-1./EPS2)-B1*LOG(EPS2/EPS1) +B2*(EPS
     *2-EPS1)+EPS2*EPS2*(EPS2*B4/3.-0.5*B3) - EPS1*EPS1*(EPS1*B4/3.-0.5*
     *B3))
      RETURN
      END
      real*4 FUNCTION ANIHTM(E0)
      implicit none
      real*4 E0
      real*4 GAM,P0P2,P0P,CANIH
      COMMON/PMCONS/PIP,C,RME,HBAR,ECGS,EMKS,AN
      real*4 PIP,C,RME,HBAR,ECGS,EMKS,AN
      COMMON/MOLVAR/WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU, RLCP,EDEN,RH
     *OP,XCCP,BLCCP,TEFF0P,XR0P
      real*4 WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU,RLCP,EDEN,RHOP, XCCP
     *,BLCCP,TEFF0P,XR0P
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      GAM=E0/RMP
      P0P2=GAM*GAM-1.0
      P0P=SQRT(P0P2)
      CANIH=RLCP*EDEN*PIP*R0**2/(GAM+1.)
      ANIHTM=CANIH*((GAM*GAM+4.*GAM+1.)/P0P2*LOG(GAM+P0P) -(GAM+3.)/P0P)
      RETURN
      END
      real*4 FUNCTION SPTOTP(E0,EE,EG)
      implicit none
      real*4 E0,EE,EG
      real*4 SPIONP,BRMSTM
      COMMON/THRESHP/APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP,IUNRSTP
      real*4 APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP
      integer*4 IUNRSTP
      IF ((IUNRSTP.EQ.0)) THEN
        SPTOTP=SPIONP(E0,EE)+BRMSTM(E0,EG)
      ELSE IF((IUNRSTP.EQ.1)) THEN
        SPTOTP=SPIONP(E0,E0)
      ELSE IF((IUNRSTP.EQ.2)) THEN
        SPTOTP=SPIONP(E0,E0)+BRMSTM(E0,E0)
      ELSE IF((IUNRSTP.EQ.3)) THEN
        SPTOTP=SPIONP(E0,E0)+BRMSTM(E0,EG)
      ELSE IF((IUNRSTP.EQ.4)) THEN
        SPTOTP=SPIONP(E0,EE)+BRMSTM(E0,E0)
      ELSE IF((IUNRSTP.EQ.5)) THEN
        SPTOTP=BRMSTM(E0,E0)
      ELSE IF((IUNRSTP.EQ.6)) THEN
        SPTOTP=BRMSTM(E0,EG)
      ELSE IF((IUNRSTP.EQ.7)) THEN
        SPTOTP=SPIONP(E0,EE)
      END IF
      RETURN
      END
      real*4 FUNCTION SPTOTE(E0,EE,EG)
      implicit none
      real*4 E0,EE,EG
      real*4 SPIONE,BRMSTM
      COMMON/THRESHP/APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP,IUNRSTP
      real*4 APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP
      integer*4 IUNRSTP
      IF ((IUNRSTP.EQ.0)) THEN
        SPTOTE=SPIONE(E0,EE)+BRMSTM(E0,EG)
      ELSE IF((IUNRSTP.EQ.1)) THEN
        SPTOTE=SPIONE(E0,E0)
      ELSE IF((IUNRSTP.EQ.2)) THEN
        SPTOTE=SPIONE(E0,E0)+BRMSTM(E0,E0)
      ELSE IF((IUNRSTP.EQ.3)) THEN
        SPTOTE=SPIONE(E0,E0)+BRMSTM(E0,EG)
      ELSE IF((IUNRSTP.EQ.4)) THEN
        SPTOTE=SPIONE(E0,EE)+BRMSTM(E0,E0)
      ELSE IF((IUNRSTP.EQ.5)) THEN
        SPTOTE=BRMSTM(E0,E0)
      ELSE IF((IUNRSTP.EQ.6)) THEN
        SPTOTE=BRMSTM(E0,EG)
      ELSE IF((IUNRSTP.EQ.7)) THEN
        SPTOTE=SPIONE(E0,EE)
      END IF
      RETURN
      END
      real*4 FUNCTION SPIONE(E0,EE)
      implicit none
      real*4 E0,EE,SPIONB
      SPIONE=SPIONB(E0,EE,.FALSE.)
      RETURN
      END
      real*4 FUNCTION SPIONB(E0,EE,POSITR)
      implicit none
      real*4 E0,EE
      LOGICAL POSITR
      real*4 G,EEM,T,ETA2,BETA2,ALETA2,X,D,FTERM,TP2,D2,D3,D4,DELTA
      integer*4 I
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      COMMON/LSPION/CBAR,X0,X1,SK,TOLN10,AFACT,SPC1,SPC2,IEV
      real*4 CBAR,X0,X1,SK,TOLN10,AFACT,SPC1,SPC2,IEV
      COMMON/EPSTAR/EPSTEN(150),EPSTD(150),WEPST(20), EPSTTL,NEPST,IEPST
     *,EPSTFLP, NELEPS,ZEPST(20),IAPRFL,IAPRIMP
      integer*4 ZEPST,NELEPS,IAPRFL,NEPST,IEPST,EPSTFLP,IAPRIMP
      CHARACTER EPSTTL*80
      real*4 EPSTEN,EPSTD,WEPST
      G=E0/RMP
      EEM=EE/RMP-1.
      T=G-1
      ETA2=T*(G+1.)
      BETA2=ETA2/G**2
      ALETA2=LOG(ETA2)
      X=0.21715*ALETA2
      IF ((.NOT.POSITR)) THEN
        D=AMIN1(EEM,0.5*T)
        FTERM=-1.-BETA2+LOG((T-D)*D)+T/(T-D) +(D*D/2.+(2.*T+1.)*LOG(1.-D
     *  /T))/(G*G)
      ELSE
        D=AMIN1(EEM,T)
        TP2=T+2.
        D2=D*D
        D3=D*D2
        D4=D*D3
        FTERM=LOG(T*D)-(BETA2/T)*( T + 2.*D - (3.*D2/2.)/TP2 -(D-D3/3.)/
     *  (TP2*TP2)-(D2/2.-T*D3/3.+D4/4.)/TP2**3)
      END IF
      IF ((EPSTFLP .EQ. 0)) THEN
        IF ((X.LE.X0)) THEN
          DELTA=0.0
        ELSE IF((X.LT.X1)) THEN
          DELTA=TOLN10*X - CBAR + AFACT*(X1 - X)**SK
        ELSE
          DELTA=TOLN10*X - CBAR
        END IF
      ELSE
        IF ((E0 .GE. EPSTEN(IEPST))) THEN
          IF ((E0 .EQ. EPSTEN(IEPST))) THEN
            GO TO 14400
          END IF
          DO 14411 I=IEPST,NEPST-1
            IF ((E0.LT.EPSTEN(I+1))) THEN
              IEPST = I
              GO TO 14400
            END IF
14411     CONTINUE
14412     CONTINUE
          IEPST = NEPST
          GO TO 14400
        ELSE
          DO 14421 I=IEPST,2,-1
            IF ((E0 .GE. EPSTEN(I-1))) THEN
              IEPST = I-1
              GO TO 14400
            END IF
14421     CONTINUE
14422     CONTINUE
          IEPST = 1
        END IF
14400   IF ((IEPST .LT. NEPST)) THEN
          DELTA = EPSTD(IEPST) + (E0 - EPSTEN(IEPST))/ (EPSTEN(IEPST+1)
     *    - EPSTEN(IEPST)) * (EPSTD(IEPST+1) - EPSTD(IEPST))
        ELSE
          DELTA = EPSTD(NEPST)
        END IF
      END IF
      SPIONB=(SPC1/BETA2)*(LOG(T + 2.) - SPC2 + FTERM - DELTA)
      RETURN
      END
      real*4 FUNCTION SPIONP(E0,EE)
      implicit none
      real*4 E0,EE,SPIONB
      SPIONP=SPIONB(E0,EE,.TRUE.)
      RETURN
      END
      real*4 FUNCTION BRMSTM(E0,EG)
      implicit none
      real*4 E0,EG,BRMSRM,AU,zero
      parameter (zero=0)
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      IF ((E0.LE.RMP)) THEN
        BRMSTM=0.
      ELSE
        AU=AMIN1(EG,E0-RMP)
        BRMSTM=BRMSRM(E0,zero,AU)
      END IF
      RETURN
      END
      real*4 FUNCTION BRMSRM(E,K1,K2)
      implicit none
      real*4 E,K1,K2,BRMSRZ
      integer*4 I
      COMMON/MIXDAT/NEP,LMED,PZP(50),ZELEMP(50),WAP(50),RHOZP(50), GASPP
     *,EZ,TPZ,IDSTRN(24)
      integer*4 NEP,LMED
      real*4 PZP,ZELEMP,WAP,RHOZP,GASPP,EZ,TPZ
      CHARACTER*4 IDSTRN
      BRMSRM=0.
      DO 14431 I=1,NEP
        BRMSRM=BRMSRM+PZP(I)*BRMSRZ(ZELEMP(I),E,K1,K2)
14431 CONTINUE
14432 CONTINUE
      RETURN
      END
      real*4 FUNCTION BRMSRZ(Z,E,K1,K2)
      implicit none
      real*4 Z,E,K1,K2
      EXTERNAL BRMSFZ
      real*4 DUMMY,BRMSDZ,QD,BRMSFZ
      DUMMY=BRMSDZ(Z,E,K1)
      BRMSRZ=QD(BRMSFZ,K1,K2,'BRMSFZ')
      RETURN
      END
      real*4 FUNCTION BRMSDZ(Z,EA,K)
      implicit none
      real*4 Z,EA,K
      real*4 APRIM,XSIFP,FCOULCP,BRMSFZ
      COMMON/PMCONS/PIP,C,RME,HBAR,ECGS,EMKS,AN
      real*4 PIP,C,RME,HBAR,ECGS,EMKS,AN
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      COMMON/MOLVAR/WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU, RLCP,EDEN,RH
     *OP,XCCP,BLCCP,TEFF0P,XR0P
      real*4 WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU,RLCP,EDEN,RHOP, XCCP
     *,BLCCP,TEFF0P,XR0P
      COMMON/LBREMZ/CONST,DELC,EBREMZ,DELTAM,XLNZ
      real*4 CONST,DELC,EBREMZ,DELTAM,XLNZ
      EBREMZ=EA
      DELC=136.*Z**(-1./3.)*RMP/EBREMZ
      CONST=APRIM(Z,EBREMZ)*(AN*RHOP/WM)*R0**2*FSC*Z*(Z+XSIFP(Z))*RLCP
      XLNZ=4./3.*LOG(Z)
      IF((EBREMZ.GE.50))XLNZ=XLNZ+4.*FCOULCP(Z)
      DELTAM=EXP((21.12-XLNZ)/4.184)-0.952
      BRMSDZ=BRMSFZ(K)
      RETURN
      END
      real*4 FUNCTION APRIM(Z,E)
      implicit none
      real*4 Z,E
      integer*4 napre,naprz,ie,iz,aprim_unit,egs_get_unit,lnblnk1
      real*4 EM,AINTP
      character aprim_file*256
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      COMMON/EPSTAR/EPSTEN(150),EPSTD(150),WEPST(20), EPSTTL,NEPST,IEPST
     *,EPSTFLP, NELEPS,ZEPST(20),IAPRFL,IAPRIMP
      integer*4 ZEPST,NELEPS,IAPRFL,NEPST,IEPST,EPSTFLP,IAPRIMP
      CHARACTER EPSTTL*80
      real*4 EPSTEN,EPSTD,WEPST
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*4 APRIMD(115,14),EPRIM(115),ZPRIM(14),APRIMZ(115)
      DATA APRIMD/ 1.32,1.26,1.18,1.13,1.09,1.07,1.05,1.04,1.03, 1.02,8*
     *1.0, 97*0.0, 1.34,1.27,1.19,1.13,1.09,1.07,1.05,1.04,1.03,1.02, 8*
     *1.0, 97*0.0, 1.39,1.30,1.21,1.14,1.10,1.07,1.05,1.04,1.03,1.02,0.9
     *94, 2*0.991,0.990,2*0.989,2*0.988, 97*0.0, 1.46,1.34,1.23,1.15,1.1
     *1,1.08, 1.06,1.05,1.03,1.02,0.989, 0.973,0.971,0.969,0.967,0.965,2
     **0.963, 97*0.0, 1.55,1.40,1.26,1.17,1.12,1.09,1.07,1.05,1.03,1.02,
     *0.955,0.935, 0.930,0.925,0.920,0.915,2*0.911, 97*0.0,  1035*0.0/,
     *EPRIM / 2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,21.,31.,41.,51.,61.,71.,81
     *.,91.,  97*0.0/, ZPRIM /6.,13.,29.,50.,79., 9*0.0/
      save APRIMD,EPRIM,ZPRIM,APRIMZ,napre,naprz
      IF ((IAPRIMP.EQ.0)) THEN
        IF ((IAPRFL .EQ. 0)) THEN
          IAPRFL=1
        END IF
        IF ((E.GE.50)) THEN
          APRIM=1.
        ELSE
          EM=E/RMP
          DO 14441 IE=1,18
            APRIMZ(IE)= AINTP(Z,ZPRIM,5,APRIMD(IE,1),115,.FALSE.,.FALSE.
     *      )
14441     CONTINUE
14442     CONTINUE
          APRIM=AINTP(EM,EPRIM,18,APRIMZ,1,.FALSE.,.FALSE.)
        END IF
      ELSE IF((IAPRIMP.EQ.1)) THEN
        IF ((IAPRFL.EQ.0)) THEN
          aprim_file = hen_house(:lnblnk1(hen_house)) // 'pegs4' // '/'
     *    // 'aprime.data'
          aprim_unit=22
          aprim_unit=egs_get_unit(aprim_unit)
          IF (( aprim_unit .LT. 1 )) THEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,*) 'APRIM: failed to get a free fortran unit'
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          open(aprim_unit,file=aprim_file,status='old',err=14450)
          READ(aprim_unit,*) NAPRZ, NAPRE
          IF ((NAPRZ.GT.14)) THEN
            WRITE(6,14460)
14460       FORMAT(//,' TOO MANY ELEMENTS FOR APRIME INTERPOLATION:', /,
     *'   CHANGE $NAPRZ AND RECOMPILE PEGS')
            call exit(24)
          END IF
          IF ((NAPRE.GT.115)) THEN
            WRITE(6,14470)
14470       FORMAT(//,' TOO MANY ENERGIES FOR APRIME INTERPOLATION:', /,
     *'   CHANGE $NAPRE AND RECOMPILE PEGS')
            call exit(24)
          END IF
          READ(aprim_unit,*) (EPRIM(IE),IE=1,NAPRE)
          DO 14481 IE=1,NAPRE
            EPRIM(IE)=1.+EPRIM(IE)/RMP
14481     CONTINUE
14482     CONTINUE
          DO 14491 IZ=1,NAPRZ
            READ(aprim_unit,*)ZPRIM(IZ),(APRIMD(IE,IZ),IE=1,NAPRE)
14491     CONTINUE
14492     CONTINUE
          IAPRFL=1
          close(aprim_unit)
        END IF
        EM=E/RMP
        DO 14501 IE=1,NAPRE
          APRIMZ(IE)= AINTP(Z,ZPRIM,NAPRZ,APRIMD(IE,1),115,.TRUE.,.FALSE
     *    .)
14501   CONTINUE
14502   CONTINUE
        APRIM=AINTP(EM,EPRIM,NAPRE,APRIMZ,1,.FALSE.,.FALSE.)
      ELSE IF((IAPRIMP.EQ.2)) THEN
        IF ((IAPRFL .EQ. 0)) THEN
          IAPRFL=1
        END IF
        APRIM=1.0
      ELSE
        WRITE(6,14510)IAPRIMP
14510   FORMAT(//,' ILLEGAL VALUE FOR IAPRIM: ',I4)
        call exit(24)
      END IF
      RETURN
14450 write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) 'Cannot open file $HEN_HOUSE/pegs4/aprime.data'
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      RETURN
      END
      real*4 FUNCTION AINTP(X,XA,NX,YA,ISK,XLOG,YLOG)
      implicit none
      integer*4 NX,ISK
      real*4 X
      real*4 XA(NX),YA(ISK,NX)
      LOGICAL XLOG,YLOG,XLOGL
      integer*4 I,J
      real*4 XI,XJ,XV,YI,YJ
      XLOGL=XLOG
      DO 14521 J=2,NX
        IF((X.LT.XA(J)))GO TO 14530
14521 CONTINUE
14522 CONTINUE
      J=NX
14530 I=J-1
      IF ((XA(I).LE.0.0)) THEN
        XLOGL=.FALSE.
      END IF
      IF ((.NOT.XLOGL)) THEN
        XI=XA(I)
        XJ=XA(J)
        XV=X
      ELSE
        XI=LOG(XA(I))
        XJ=LOG(XA(J))
        XV=LOG(X)
      END IF
      IF ((YLOG.AND.(YA(1,I).EQ.0.0.OR.YA(1,J).EQ.0.0))) THEN
        AINTP=0.0
      ELSE
        IF ((YLOG)) THEN
          YI=LOG(YA(1,I))
          YJ=LOG(YA(1,J))
          IF ((XJ.EQ.XI)) THEN
            AINTP=YI
          ELSE
            AINTP=(YI*(XJ-XV)+YJ*(XV-XI))/(XJ-XI)
          END IF
          AINTP=EXP(AINTP)
        ELSE
          YI=YA(1,I)
          YJ=YA(1,J)
          IF ((XJ.EQ.XI)) THEN
            AINTP=YI
          ELSE
            AINTP=(YI*(XJ-XV)+YJ*(XV-XI))/(XJ-XI)
          END IF
        END IF
      END IF
      RETURN
      END
      real*4 FUNCTION TMXS(E)
      implicit none
      real*4 E,TMXB
      real*4 SAFETY,TABSMX
      DATA SAFETY/0.8/,TABSMX/10.0/
      save SAFETY,TABSMX
      TMXS=AMIN1(TMXB(E)*SAFETY,TABSMX)
      RETURN
      END
      real*4 FUNCTION TMXB(E)
      implicit none
      real*4 E
      real*4 ESQ,BETA2,PX2
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      COMMON/MOLVAR/WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU, RLCP,EDEN,RH
     *OP,XCCP,BLCCP,TEFF0P,XR0P
      real*4 WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU,RLCP,EDEN,RHOP, XCCP
     *,BLCCP,TEFF0P,XR0P
      ESQ=E**2
      BETA2=1.0-RMPSQ/ESQ
      PX2=ESQ*BETA2/XCCP**2
      TMXB=PX2*BETA2/LOG(BLCCP*PX2)
      RETURN
      END
      real*4 FUNCTION ALKE(E)
      implicit none
      real*4 E
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      ALKE=LOG(E-RMP)
      RETURN
      END
      real*4 FUNCTION ALKEI(X)
      implicit none
      real*4 x
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      ALKEI=EXP(X) + RMP
      RETURN
      END
      SUBROUTINE PWLF1(NI,NIMX,XL,XU,XR,EP,ZTHR,ZEP,NIP,XFUN,XFI, AX,BX,
     *NALM,NFUN,AF,BF,VFUNS)
      implicit none
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer*4 NI,NIMX,NIP,NALM,NFUN
      real*4 XL,XU,XR,EP,AX,BX,XFUN,XFI
      EXTERNAL XFI,VFUNS,XFUN
      real*4 AF(NALM,NFUN),BF(NALM,NFUN),ZTHR(NFUN),ZEP(NFUN)
      LOGICAL QFIT
      integer*4 NL,NU,IPRN,NJ,NK
      real*4 REM
      NL=0
      NU=1
      IPRN=0
14541 CONTINUE
        NJ=MIN0(NU,NIMX)
        IF((QFIT(NJ,XL,XU,XR,EP,ZTHR,ZEP,REM,NIP,XFUN,XFI, AX,BX,NALM,NF
     *  UN,AF,BF,VFUNS,0)))GO TO14542
        IF ((NU.GE.NIMX)) THEN
          NI=NJ
          RETURN
        END IF
        NL=NU
        NU=NU*2
      GO TO 14541
14542 CONTINUE
      NU=NJ
14551 IF(NU.LE.NL+1)GO TO 14552
        NJ=(NL+NU)/2
        NK=NJ
        IF ((QFIT(NJ,XL,XU,XR,EP,ZTHR,ZEP,REM,NIP,XFUN,XFI, AX,BX,NALM,N
     *  FUN,AF,BF,VFUNS,0))) THEN
          NU=NJ
        ELSE
          NL=NK
        END IF
      GO TO 14551
14552 CONTINUE
      NI=NU
      IF((NI.EQ.NJ))RETURN
      IF((.NOT.QFIT(NI,XL,XU,XR,EP,ZTHR,ZEP,REM,NIP,XFUN,XFI, AX,BX,NALM
     *,NFUN,AF,BF,VFUNS,0)))WRITE(6,14560)NI
14560 FORMAT(' CATASTROPHE---DOES NOT FIT WHEN IT SHOULD,NI=',I5)
      RETURN
      END
      LOGICAL FUNCTION QFIT(NJ,XL,XH,XR,EP,ZTHR,ZEP,REM,NJP,XFUN,XFI, AX
     *,BX,NALM,NFUN,AF,BF,VFUNS,IPRN)
      implicit none
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      EXTERNAL VFUNS
      real*4 XFUN,XFI
      integer*4 NJ,NALM,NFUN,NJP,IPRN
      real*4 XL,XH,XR,AX,BX,REM,EP
      real*4 FSXL(10),FSXH(10),FIP(10),FFIP(10),AFIP(10),RE(10),AER(10)
      real*4 AF(NALM,NFUN),BF(NALM,NFUN),ZTHR(NFUN),ZEP(NFUN)
      real*4 XS,XFL,XFH,XFS,XM,DX,W,XLL,SXFL,XSXF,SXFH,DSXF,WIP, SXFIP,X
     *IP
      integer*4 NI,NIP,ISUB,IFUN,JSUB,IP
      integer*4 nkp
      DATA NKP/3/
      save nkp
      IF ((XH.LE.XL)) THEN
        WRITE(6,14570)XL,XH
14570   FORMAT(' QFIT ERROR:XL SHOULD BE < XH. XL,XH=',2G14.6)
        QFIT=.FALSE.
        RETURN
      END IF
      XS=AMAX1(XL,AMIN1(XH,XR))
      NI=NJ-2
      IF ((((XS.EQ.XL.OR.XS.EQ.XH).AND.NI.GE.1).OR.NI.GE.2)) THEN
        XFL=XFUN(XL)
      ELSE
        QFIT=.FALSE.
        RETURN
      END IF
      XFH=XFUN(XH)
      XFS=XFUN(XS)
      XM=AMAX1(XFH-XFS,XFS-XFL)
      DX=XFH-XFL
      W=XM/AMAX1(1.,AINT(NI*XM/DX))
      NI=NI-AINT(NI-DX/W)
      NIP=MAX0(NKP,(NJP+NI-1)/NI)
      NIP=(NIP/2)*2+1
      IF ((XFH-XFS.LE.XFS-XFL)) THEN
        XLL=XFL
      ELSE
        XLL=XFH-NI*W
      END IF
      AX=1./W
      BX=2.-XLL*AX
      REM=0.0
      QFIT=.TRUE.
      SXFL=AMAX1(XLL,XFL)
      ISUB=0
      XSXF=XFI(SXFL)
      CALL VFUNS(XSXF,FSXL)
      IF((IPRN.NE.0))WRITE(6,5410) ISUB,SXFL,XSXF,(FSXL(IFUN),IFUN=1,NFU
     *N)
5410  FORMAT(' QFIT:ISUB,SXF,XSXF,FSX()=',I4,1P,9G11.4/(1X,12G11.4))
      DO 14581 ISUB=1,NI
        JSUB=ISUB+1
        SXFH=AMIN1(XLL+W*ISUB,XH)
        XSXF=XFI(SXFH)
        CALL VFUNS(XSXF,FSXH)
        IF((IPRN.NE.0))WRITE(6,5410)ISUB,SXFH,XSXF,(FSXH(IFUN),IFUN=1,NF
     *  UN)
        DSXF=SXFH-SXFL
        DO 14591 IFUN=1,NFUN
          AF(JSUB,IFUN)=(FSXH(IFUN)-FSXL(IFUN))/DSXF
          BF(JSUB,IFUN)=(FSXL(IFUN)*SXFH-FSXH(IFUN)*SXFL)/DSXF
14591   CONTINUE
14592   CONTINUE
        WIP=DSXF/(NIP+1)
        DO 14601 IP=1,NIP
          SXFIP=SXFL+IP*WIP
          XIP=XFI(SXFIP)
          CALL VFUNS(XIP,FIP)
          DO 14611 IFUN=1,NFUN
            FFIP(IFUN)=AF(JSUB,IFUN)*SXFIP+BF(JSUB,IFUN)
            AFIP(IFUN)=ABS(FIP(IFUN))
            AER(IFUN)=ABS(FFIP(IFUN)-FIP(IFUN))
            RE(IFUN)=0.0
            IF ((FIP(IFUN).NE.0.0)) THEN
              RE(IFUN)=AER(IFUN)/AFIP(IFUN)
            END IF
            IF ((AFIP(IFUN).GE.ZTHR(IFUN))) THEN
              REM=AMAX1(REM,RE(IFUN))
            ELSE IF((AER(IFUN).GT.ZEP(IFUN))) THEN
              QFIT=.FALSE.
            END IF
14611     CONTINUE
14612     CONTINUE
          IF ((IPRN.NE.0)) THEN
            WRITE(6,14620)ISUB,IP,SXFIP,XIP,REM,QFIT,(FIP(IFUN),FFIP(IFU
     *      N), RE(IFUN),AER(IFUN),IFUN=1,NFUN)
14620       FORMAT(1X,2I4,1P,2G12.5,6P,F12.0,L2,1P,2G11.4,6P,F11.0,1P,G1
     *1.4/ (1X,3(1P,2G11.4,6P,F11.0,1P,G11.4)))
          END IF
14601   CONTINUE
14602   CONTINUE
        SXFL=SXFH
        DO 14631 IFUN=1,NFUN
          FSXL(IFUN)=FSXH(IFUN)
14631   CONTINUE
14632   CONTINUE
14581 CONTINUE
14582 CONTINUE
      DO 14641 IFUN=1,NFUN
        AF(1,IFUN)=AF(2,IFUN)
        BF(1,IFUN)=BF(2,IFUN)
        AF(NI+2,IFUN)=AF(NI+1,IFUN)
        BF(NI+2,IFUN)=BF(NI+1,IFUN)
14641 CONTINUE
14642 CONTINUE
      QFIT=QFIT.AND.REM.LE.EP
      NJ=NI+2
      RETURN
      END
      real*4 FUNCTION QD(F,A,B,MSG)
      implicit none
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*4 A,B,F
      EXTERNAL F
      CHARACTER*6 MSG
      logical first_time
      data first_time/.true./
      save first_time
      real*4 DCADRE,ADUM,BDUM,ERRDUM
      integer*4 IER
      ADUM=A
      BDUM=B
      QD=DCADRE(F,ADUM,BDUM,1.E-16,1.E-5,ERRDUM,IER)
      IF ((IER.GT.66)) THEN
        WRITE(6,14650)IER,MSG,A,B,QD,ERRDUM
14650   FORMAT(' DCADRE CODE=',I4,' FOR INTEGRAL ',A6,' FROM ',1P,G14.6,
     *' TO ',G14.6, ',QD=',G14.6,'+-',G14.6)
      END IF
      RETURN
      END
      real*4 FUNCTION DCADRE(F,A,B,AERR,RERR,ERROR,IER)
      implicit none
      DIMENSION T(10,10),R(10),AIT(10),DIF(10),RN(4),TS(2049)
      DIMENSION IBEGS(30),BEGIN(30),FINIS(30),EST(30)
      DIMENSION REGLSV(30)
      LOGICAL H2CONV,AITKEN,RIGHT,REGLAR,REGLSV
      real*4 T,R,AIT,DIF,RN,TS,BEGIN,FINIS,EST,AITLOW
      real*4 H2TOL,AITTOL,LENGTH,JUMPTL,ZERO,P1,HALF,ONE
      real*4 TWO,FOUR,FOURP5,TEN,HUN,CADRE,ERROR,A,B
      real*4 AERR,RERR,STEPMN,STEPNM,STAGE,CUREST,FNSIZE
      real*4 PREVER,BEG,FBEG,END,FEND,STEP,ASTEP,TABS,HOVN
      real*4 FN,SUM,SUMABS,ABSI,VINT,TABTLM,ERGL,ERGOAL
      real*4 ERRA,ERRR,FEXTRP,ERRER,DIFF,SING,FEXTM1,ALG4O2
      real*4 H2NXT,SINGNX,SLOPE,FBEG2,ALPHA
      real*4 ERRET,H2TFEX,FI
      real*4 RVAL,F
      integer*4 IBEGS,IER,ISTAGE,IBEG,IEND,L,N,LM1,N2,ISTEP,II,III,I,IST
     *EP2,IT,NNLEFT
      integer*4 MAXTS,MAXTBL,MXSTGE
      DATA AITLOW,H2TOL,AITTOL,JUMPTL,MAXTS,MAXTBL,MXSTGE/1.1D0,.15D0, .
     *1D0,.01D0,2049,10,30/
      DATA RN(1),RN(2),RN(3),RN(4)/.7142005D0,.3466282D0,.843751D0, .126
     *3305D0/
      DATA ZERO,P1,HALF,ONE,TWO,FOUR,FOURP5,TEN,HUN/0.0D0,0.1D0,0.5D0, 1
     *.0D0,2.0D0,4.0D0,4.5D0,10.0D0,100.0D0/
      save MAXTS,MAXTBL,MXSTGE
      ALG4O2=LOG10(TWO)
      CADRE=ZERO
      ERROR=ZERO
      CUREST=ZERO
      VINT=ZERO
      IER=0
      LENGTH=ABS(B-A)
      IF((LENGTH.EQ.ZERO))GO TO 215
      IF((RERR.GT.P1.OR.RERR.LT.ZERO))GO TO 210
      IF((AERR.EQ.ZERO.AND.(RERR+HUN).LE.HUN))GO TO 210
      ERRR=RERR
      ERRA=ABS(AERR)
      STEPMN=(LENGTH/FLOAT(2**MXSTGE))
      STEPNM=DMAX1(LENGTH,ABS(A),ABS(B))*TEN
      STAGE=HALF
      ISTAGE=1
      FNSIZE=ZERO
      PREVER=ZERO
      REGLAR=.FALSE.
      BEG=A
      RVAL=BEG
      FBEG=F(RVAL)*HALF
      TS(1)=FBEG
      IBEG=1
      END=B
      RVAL=END
      FEND=F(RVAL)*HALF
      TS(2)=FEND
      IEND=2
5     RIGHT=.FALSE.
10    STEP=END - BEG
      ASTEP=ABS(STEP)
      IF((ASTEP.LT.STEPMN))GO TO 205
      IF((STEPNM+ASTEP.EQ.STEPNM))GO TO 205
      T(1,1)=FBEG + FEND
      TABS=ABS(FBEG) + ABS(FEND)
      L=1
      N=1
      H2CONV=.FALSE.
      AITKEN=.FALSE.
15    LM1=L
      L=L + 1
      N2=N + N
      FN=N2
      ISTEP=(IEND - IBEG)/N
      IF((ISTEP.GT.1))GO TO 25
      II=IEND
      IEND=IEND + N
      IF((IEND.GT.MAXTS))GO TO 200
      HOVN=STEP/FN
      III=IEND
      FI=ONE
      DO 14661 I=1,N2,2
        TS(III)=TS(II)
        RVAL=END-FI*HOVN
        TS(III-1)=F(RVAL)
        FI=FI+TWO
        III=III-2
        II=II-1
14661 CONTINUE
14662 CONTINUE
      ISTEP=2
25    ISTEP2=IBEG + ISTEP/2
      SUM=ZERO
      SUMABS=ZERO
      DO 14671 I=ISTEP2,IEND,ISTEP
        SUM=SUM + TS(I)
        SUMABS=SUMABS + ABS(TS(I))
14671 CONTINUE
14672 CONTINUE
      T(L,1)=T(L-1,1)*HALF+SUM/FN
      TABS=TABS*HALF+SUMABS/FN
      ABSI=ASTEP*TABS
      N=N2
      IT=1
      VINT=STEP*T(L,1)
      TABTLM=TABS*TEN
      FNSIZE=DMAX1(FNSIZE,ABS(T(L,1)))
      ERGL=ASTEP*FNSIZE*TEN
      ERGOAL=STAGE*DMAX1(ERRA,ERRR*ABS(CUREST+VINT))
      FEXTRP=ONE
      DO 14681 I=1,LM1
        FEXTRP=FEXTRP*FOUR
        T(I,L)=T(L,I) - T(L-1,I)
        T(L,I+1)=T(L,I) + T(I,L)/(FEXTRP-ONE)
14681 CONTINUE
14682 CONTINUE
      ERRER=ASTEP*ABS(T(1,L))
      IF((L.GT.2))GO TO 40
      IF((TABS+P1*ABS(T(1,2)).EQ.TABS))GO TO 135
      GO TO 15
40    DO 45 I=2,LM1
      DIFF=ZERO
      IF((TABTLM+ABS(T(I-1,L)).NE.TABTLM))DIFF=T(I-1,LM1)/T(I-1,L)
      T(I-1,LM1)=DIFF
45    CONTINUE
      IF((ABS(FOUR-T(1,LM1)).LE.H2TOL))GO TO 60
      IF((T(1,LM1).EQ.ZERO))GO TO 55
      IF((ABS(TWO-ABS(T(1,LM1))).LT.JUMPTL))GO TO 130
      IF((L.EQ.3))GO TO 15
      H2CONV=.FALSE.
      IF((ABS((T(1,LM1)-T(1,L-2))/T(1,LM1)).LE.AITTOL))GO TO 75
50    IF(REGLAR) GO TO 55
      IF((L.EQ.4))GO TO 15
55    IF(ERRER.GT.ERGOAL.AND.(ERGL+ERRER).NE.ERGL) GO TO 175
      GO TO 145
60    IF(H2CONV) GO TO 65
      AITKEN=.FALSE.
      H2CONV=.TRUE.
65    FEXTRP=FOUR
70    IT=IT + 1
      VINT=STEP*T(L,IT)
      ERRER=ABS(STEP/(FEXTRP-ONE)*T(IT-1,L))
      IF((ERRER.LE.ERGOAL))GO TO 160
      IF((ERGL+ERRER.EQ.ERGL))GO TO 160
      IF((IT.EQ.LM1))GO TO 125
      IF((T(IT,LM1).EQ.ZERO))GO TO 70
      IF((T(IT,LM1).LE.FEXTRP))GO TO 125
      IF((ABS(T(IT,LM1)/FOUR-FEXTRP)/FEXTRP.LT.AITTOL))FEXTRP=FEXTRP*FOU
     *R
      GO TO 70
75    IF(T(1,LM1).LT.AITLOW) GO TO 175
      IF((AITKEN))GO TO 80
      H2CONV=.FALSE.
      AITKEN=.TRUE.
80    FEXTRP=T(L-2,LM1)
      IF((FEXTRP.GT.FOURP5))GO TO 65
      IF((FEXTRP.LT.AITLOW))GO TO 175
      IF((ABS(FEXTRP-T(L-3,LM1))/T(1,LM1).GT.H2TOL))GO TO 175
      SING=FEXTRP
      FEXTM1=ONE/(FEXTRP - ONE)
      AIT(1)=ZERO
      DO 85 I=2,L
      AIT(I)=T(I,1) + (T(I,1)-T(I-1,1))*FEXTM1
      R(I)=T(1,I-1)
      DIF(I)=AIT(I) - AIT(I-1)
85    CONTINUE
      IT=2
90    VINT=STEP*AIT(L)
      ERRER=ERRER*FEXTM1
      IF((ERRER.GT.ERGOAL.AND.(ERGL+ERRER).NE.ERGL))GO TO 95
      ALPHA=LOG10(SING)/ALG4O2 - ONE
      IER=MAX0(IER,65)
      GO TO 160
95    IT=IT + 1
      IF((IT.EQ.LM1))GO TO 125
      IF((IT.GT.3))GO TO 100
      H2NXT=FOUR
      SINGNX=SING+SING
100   IF(H2NXT.LT.SINGNX) GO TO 105
      FEXTRP=SINGNX
      SINGNX=SINGNX+SINGNX
      GO TO 110
105   FEXTRP=H2NXT
      H2NXT=FOUR*H2NXT
110   DO 115 I=IT,LM1
      R(I+1)=ZERO
      IF((TABTLM+ABS(DIF(I+1)).NE.TABTLM))R(I+1)=DIF(I)/DIF(I+1)
115   CONTINUE
      H2TFEX=-H2TOL*FEXTRP
      IF((R(L)-FEXTRP.LT.H2TFEX))GO TO 125
      IF((R(L-1)-FEXTRP.LT.H2TFEX))GO TO 125
      ERRER=ASTEP*ABS(DIF(L))
      FEXTM1=ONE/(FEXTRP - ONE)
      DO 120 I=IT,L
      AIT(I)=AIT(I) + DIF(I)*FEXTM1
      DIF(I)=AIT(I) - AIT(I-1)
120   CONTINUE
      GO TO 90
125   FEXTRP=DMAX1(PREVER/ERRER,AITLOW)
      PREVER=ERRER
      IF((L.LT.5))GO TO 15
      IF((L-IT.GT.2.AND.ISTAGE.LT.MXSTGE))GO TO 170
      ERRET=ERRER/(FEXTRP**(MAXTBL-L))
      IF((ERRET.GT.ERGOAL.AND.(ERGL+ERRET).NE.ERGL))GO TO 170
      GO TO 15
130   IF(ERRER.GT.ERGOAL.AND.(ERGL+ERRER).NE.ERGL) GO TO 170
      DIFF=ABS(T(1,L))*(FN+FN)
      GO TO 160
135   SLOPE=(FEND-FBEG)*TWO
      FBEG2=FBEG+FBEG
      DO 140 I=1,4
      RVAL=BEG+RN(I)*STEP
      DIFF=ABS(F(RVAL) - FBEG2-RN(I)*SLOPE)
      IF((TABTLM+DIFF.NE.TABTLM))GO TO 155
140   CONTINUE
      GO TO 160
145   SLOPE=(FEND-FBEG)*TWO
      FBEG2=FBEG+FBEG
      I=1
150   RVAL=BEG+RN(I)*STEP
      DIFF=ABS(F(RVAL) - FBEG2-RN(I)*SLOPE)
155   ERRER=DMAX1(ERRER,ASTEP*DIFF)
      IF((ERRER.GT.ERGOAL.AND.(ERGL+ERRER).NE.ERGL))GO TO 175
      I=I+1
      IF((I.LE.4))GO TO 150
      IER=66
160   CADRE=CADRE + VINT
      ERROR=ERROR + ERRER
      IF((RIGHT))GO TO 165
      ISTAGE=ISTAGE - 1
      IF((ISTAGE.EQ.0))GO TO 220
      REGLAR=REGLSV(ISTAGE)
      BEG=BEGIN(ISTAGE)
      END=FINIS(ISTAGE)
      CUREST=CUREST - EST(ISTAGE+1) + VINT
      IEND=IBEG - 1
      FEND=TS(IEND)
      IBEG=IBEGS(ISTAGE)
      GO TO 180
165   CUREST=CUREST + VINT
      STAGE=STAGE+STAGE
      IEND=IBEG
      IBEG=IBEGS(ISTAGE)
      END=BEG
      BEG=BEGIN(ISTAGE)
      FEND=FBEG
      FBEG=TS(IBEG)
      GO TO 5
170   REGLAR=.TRUE.
175   IF(ISTAGE.EQ.MXSTGE) GO TO 205
      IF((RIGHT))GO TO 185
      REGLSV(ISTAGE+1)=REGLAR
      BEGIN(ISTAGE)=BEG
      IBEGS(ISTAGE)=IBEG
      STAGE=STAGE*HALF
180   RIGHT=.TRUE.
      BEG=(BEG+END)*HALF
      IBEG=(IBEG+IEND)/2
      TS(IBEG)=TS(IBEG)*HALF
      FBEG=TS(IBEG)
      GO TO 10
185   NNLEFT=IBEG - IBEGS(ISTAGE)
      IF((IEND+NNLEFT.GE.MAXTS))GO TO 200
      III=IBEGS(ISTAGE)
      II=IEND
      DO 190 I=III,IBEG
      II=II + 1
      TS(II)=TS(I)
190   CONTINUE
      DO 195 I=IBEG,II
      TS(III)=TS(I)
      III=III + 1
195   CONTINUE
      IEND=IEND + 1
      IBEG=IEND - NNLEFT
      FEND=FBEG
      FBEG=TS(IBEG)
      FINIS(ISTAGE)=END
      END=BEG
      BEG=BEGIN(ISTAGE)
      BEGIN(ISTAGE)=END
      REGLSV(ISTAGE)=REGLAR
      ISTAGE=ISTAGE + 1
      REGLAR=REGLSV(ISTAGE)
      EST(ISTAGE)=VINT
      CUREST=CUREST + EST(ISTAGE)
      GO TO 5
200   IER=131
      GO TO 215
205   IER=132
      GO TO 215
210   IER=133
215   CADRE=CUREST + VINT
220   DCADRE=CADRE
9000  CONTINUE
9005  RETURN
      END
      SUBROUTINE SPINIT(density_file)
      implicit none
      COMMON/PMCONS/PIP,C,RME,HBAR,ECGS,EMKS,AN
      real*4 PIP,C,RME,HBAR,ECGS,EMKS,AN
      COMMON/SPCOMM/MEDTBL(24,73), NUMSTMED,STDATA(6,73)
      CHARACTER*4 MEDTBL
      integer*4 NUMSTMED
      real*4 STDATA
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      COMMON/MOLVAR/WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU, RLCP,EDEN,RH
     *OP,XCCP,BLCCP,TEFF0P,XR0P
      real*4 WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU,RLCP,EDEN,RHOP, XCCP
     *,BLCCP,TEFF0P,XR0P
      COMMON/BREMPRP/DLP1(6),DLP2(6),DLP3(6),DLP4(6),DLP5(6),DLP6(6), DE
     *LCMP,ALPHIP(2),BPARP(2),DELPOSP(2)
      real*4 dlP1,dlP2,dlP3,dlP4,dlP5,dlP6,delcmP,alphiP,bparP,delposP
      COMMON/ELEMTB/NET,ITBL(100),WATBL(100),RHOTBL(100),ASYMT(100)
      integer*4 NET
      real*4 ITBL,WATBL,RHOTBL
      CHARACTER*4 ASYMT
      COMMON/LSPION/CBAR,X0,X1,SK,TOLN10,AFACT,SPC1,SPC2,IEV
      real*4 CBAR,X0,X1,SK,TOLN10,AFACT,SPC1,SPC2,IEV
      COMMON/EPSTAR/EPSTEN(150),EPSTD(150),WEPST(20), EPSTTL,NEPST,IEPST
     *,EPSTFLP, NELEPS,ZEPST(20),IAPRFL,IAPRIMP
      integer*4 ZEPST,NELEPS,IAPRFL,NEPST,IEPST,EPSTFLP,IAPRIMP
      CHARACTER EPSTTL*80
      real*4 EPSTEN,EPSTD,WEPST
      COMMON/THRESHP/APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP,IUNRSTP
      real*4 APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP
      integer*4 IUNRSTP
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/MIXDAT/NEP,LMED,PZP(50),ZELEMP(50),WAP(50),RHOZP(50), GASPP
     *,EZ,TPZ,IDSTRN(24)
      integer*4 NEP,LMED
      real*4 PZP,ZELEMP,WAP,RHOZP,GASPP,EZ,TPZ
      CHARACTER*4 IDSTRN
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR( 2097154),MED( 2097154),IRAYLR,
     *IPHOTONUCR( 2097154)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      real*4 IMEV
      integer*4 IM,J,IZ,IE,I,ICHECK,IESPEL,IPEGEL,density_unit,lnblnk1,e
     *gs_get_unit
      real*4 VPLASM,ALIADG,EDENL,ALGASP,EPSTRH, TLRNCE,EPSTWT
      CHARACTER*256 density_file
      TOLN10=2.0*LOG(10.0)
      IM=-100
      IF ((EPSTFLP .LT. 0 .OR. EPSTFLP .GT. 1)) THEN
        EPSTFLP = 0
      END IF
      IF ((EPSTFLP.EQ.0)) THEN
14690   CONTINUE
          DO 14691 IM=1,NUMSTMED
          DO 14701 J=1,LMED
            IF((IDSTRN(J).NE.MEDTBL(J,IM)))GO TO 14691
14701     CONTINUE
14702     CONTINUE
          AFACT=STDATA(1,IM)
          SK=STDATA(2,IM)
          X0=STDATA(3,IM)
          X1=STDATA(4,IM)
          IEV=STDATA(5,IM)
          CBAR=STDATA(6,IM)
          IMEV=IEV*1.0E-6
          VPLASM=SQRT(EDEN*R0*C**2/PIP)
          GO TO 14710
14691   CONTINUE
14692   CONTINUE
        IM=0
        IF ((NEP.EQ.1)) THEN
          IZ=ZELEMP(1)
          IF ((IZ.EQ.1.OR.IZ.EQ.7.OR.IZ.EQ.8)) THEN
            WRITE(6,14720)
14720       FORMAT(' STOPPED IN SUBROUTINE SPINIT BECAUSE THIS',/, ' ELE
     *MENT (H, N, OR O) CAN ONLY EXIST AS A DIATOMIC MOLECULE.',/, ' REM
     *EDY:  USE COMP OPTION FOR H2, N2, OR O2 WITH NE=2,PZ=1,1'/, '     
     *AND, IN THE CASE OF A GAS, DEFINE STERNHEIMER ID',/, '   (I.E., ID
     *STRN) LIKE H2-GAS')
            call exit(21)
          END IF
          IEV=ITBL(IZ)
        ELSE
          ALIADG=0.0
          DO 14731 IE=1,NEP
            IZ=ZELEMP(IE)
            IF ((IZ.EQ.1)) THEN
              IEV=19.2
            ELSE IF((IZ.EQ.6)) THEN
              IF ((GASPP.EQ.0.0)) THEN
                IEV=81.0
              ELSE
                IEV=70.0
              END IF
            ELSE IF((IZ.EQ.7)) THEN
              IEV=82.0
            ELSE IF((IZ.EQ.8)) THEN
              IF ((GASPP.EQ.0.0)) THEN
                IEV=106.0
              ELSE
                IEV=97.0
              END IF
            ELSE IF((IZ.EQ.9)) THEN
              IEV=112.0
            ELSE IF((IZ.EQ.17)) THEN
              IEV=180.0
            ELSE
              IEV=1.13*ITBL(IZ)
            END IF
            ALIADG=ALIADG + PZP(IE)*ZELEMP(IE)*LOG(IEV)
14731     CONTINUE
14732     CONTINUE
          ALIADG=ALIADG/ZC
          IEV=EXP(ALIADG)
        END IF
        IMEV=IEV*1.0E-6
        IF ((GASPP.EQ.0.0)) THEN
          EDENL=EDEN
        ELSE
          EDENL=EDEN/GASPP
        END IF
        VPLASM = SQRT(EDENL*R0*C**2/PIP)
        CBAR=1. + 2.*LOG(IMEV/(HBAR*2*PIP*VPLASM/ERGMEV))
        IF ((NEP.EQ.1.AND.INT(ZELEMP(1)).EQ.2.AND.GASPP.NE.0.0)) THEN
          X0=2.191
          X1=3.0
          SK=3.297
        ELSE IF((NEP.EQ.2.AND.INT(ZELEMP(1)).EQ.1 .AND.INT(ZELEMP(2)).EQ
     *  .1)) THEN
          IF ((GASPP.EQ.0.0)) THEN
            X0=0.425
            X1=2.0
            SK=5.949
          ELSE
            X0=1.837
            X1=3.0
            SK=4.754
          END IF
        ELSE
          SK=3.0
          IF ((GASPP.EQ.0.0)) THEN
            IF ((IEV.LT.100.0)) THEN
              IF ((CBAR.LT.3.681)) THEN
                X0=0.2
                X1=2.0
              ELSE
                X0=0.326*CBAR - 1.0
                X1=2.0
              END IF
            ELSE
              IF ((CBAR.LT.5.215)) THEN
                X0=0.2
                X1=3.0
              ELSE
                X0=0.326*CBAR - 1.5
                X1=3.0
              END IF
            END IF
            IF ((X0.GE.X1)) THEN
              WRITE(6,14740)X0,X1,CBAR
14740         FORMAT(' STOPPED IN SPINIT DUE TO X0.GE.X1 , X0,X1,CBAR=',
     *3G15.5,/ ,' IF THIS IS GAS, YOU MUST DEFINE GASP(ATM)')
              call exit(21)
            END IF
          ELSE
            IF ((CBAR.LT.10.0)) THEN
              X0=1.6
              X1=4.0
            ELSE IF((CBAR.LT.10.5)) THEN
              X0=1.7
              X1=4.0
            ELSE IF((CBAR.LT.11.0)) THEN
              X0=1.8
              X1=4.0
            ELSE IF((CBAR.LT.11.5)) THEN
              X0=1.9
              X1=4.0
            ELSE IF((CBAR.LT.12.25)) THEN
              X0=2.0
              X1=4.0
            ELSE IF((CBAR.LT.13.804)) THEN
              X0=2.0
              X1=5.0
            ELSE
              X0=0.326*CBAR - 2.5
              X1=5.0
            END IF
          END IF
        END IF
14710   IF ((GASPP.NE.0.0)) THEN
          ALGASP=LOG(GASPP)
          CBAR=CBAR - ALGASP
          X0=X0 - ALGASP/TOLN10
          X1=X1 - ALGASP/TOLN10
        END IF
        IF ((IM.EQ.0)) THEN
          AFACT=(CBAR - TOLN10*X0)/(X1 - X0)**SK
        END IF
      ELSE
        density_file=density_file(:lnblnk1(density_file))
        density_unit=20
        density_unit=egs_get_unit(density_unit)
        IF (( density_unit .LT. 1 )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'SPINIT: failed to get a free fortran unit'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        open(density_unit,file=density_file,status='old',err=6430)
        READ(density_unit,14750)EPSTTL
14750   FORMAT(A)
        READ(density_unit,*) NEPST,IEV,EPSTRH,NELEPS
        READ(density_unit,*) (ZEPST(I),WEPST(I),I=1,NELEPS)
        READ(density_unit,*) (EPSTEN(I),EPSTD(I),I=1,NEPST)
        close(density_unit)
        IF ((NEPST.GT.150)) THEN
          WRITE(6,14760)NEPST
14760     FORMAT(//' *****NEPST=',I4,' IS GREATER THAN THE 150 ALLOWED')
          call exit(22)
        END IF
        DO 14771 I=1,NEPST
          EPSTEN(I) = EPSTEN(I) + RMP
14771   CONTINUE
14772   CONTINUE
        IMEV = IEV*1.E-06
        IF (( AEP .LT. EPSTEN(1))) THEN
          WRITE(6,14780)EPSTEN(1),AEP
14780     FORMAT(//' ****LOWEST ENERGY INPUT FOR DENSITY EFFECT IS',1P,E
     *10.3/ T20,'WHICH IS HIGHER THAN THE VALUE OF AE=',1P,E10.3,' MEV'/
     * ' ***IT HAS BEEN SET TO AE***'//)
          EPSTEN(1) = AEP
        END IF
        IF (( UEP .GT. EPSTEN(NEPST))) THEN
          WRITE(6,14790)EPSTEN(NEPST),UEP
14790     FORMAT(//' ****HIGHEST ENERGY INPUT FOR DENSITY EFFECT IS',1P,
     *E10.3/ T20,'WHICH IS LOWER THAN THE VALUE OF UE=',1P,E10.3,' MEV'/
     * ' ***IT HAS BEEN SET TO UE***'//)
          EPSTEN(NEPST) = UEP
        END IF
        ICHECK=0
        TLRNCE=0.01
        IF((NELEPS.NE.NEP))ICHECK=1
        IF(((ICHECK.EQ.0) .AND. ( (EPSTRH.LT.((1.0-TLRNCE)*RHOP)) .OR. (
     *  EPSTRH.GT.((1.0+TLRNCE)*RHOP)) )))ICHECK=1
        EPSTWT = 0.0
        DO 14801 I=1,NEP
          EPSTWT = EPSTWT + RHOZP(I)
14801   CONTINUE
14802   CONTINUE
        IF ((EPSTWT.EQ.0.0)) THEN
          WRITE(6,14810)
14810     FORMAT(//' *****IN SPINIT***SOMETHING WRONG, MOLECULAR WEIGHTO
     *F', 'MOLECULE IS ZERO (I.E. SUM OF RHOZ)***'//)
        END IF
        IF ((ICHECK.EQ.0)) THEN
          IESPEL=0
          ICHECK=1
14821     CONTINUE
            IESPEL=IESPEL+1
            IPEGEL=0
14831       CONTINUE
              IPEGEL=IPEGEL+1
              IF ((INT(ZELEMP(IPEGEL)).EQ.ZEPST(IESPEL))) THEN
                ICHECK=0
                GO TO14832
              END IF
              IF(IPEGEL.GE.NEP)GO TO14832
            GO TO 14831
14832       CONTINUE
            IF(((ICHECK.EQ.0)  .AND. ( (WEPST(IESPEL).LT.((1.0-TLRNCE)*R
     *      HOZP(IPEGEL)/EPSTWT)) .OR. (WEPST(IESPEL).GT.((1.0+TLRNCE)*R
     *      HOZP(IPEGEL)/EPSTWT)) )))ICHECK=1
            IF(IESPEL.GE.NELEPS)GO TO14822
          GO TO 14821
14822     CONTINUE
        END IF
        IF ((ICHECK.EQ.1)) THEN
          WRITE(6,14840)
14840     FORMAT(////'0*** COMPOSITION IN INPUT DENSITY FILE DOES NOT MA
     *TCH ', ' THAT BEING USED BY PEGS'//' ***** QUITTING EARLY***'////)
          call exit(23)
        END IF
      END IF
      SPC1=2.*PIP*R0**2*RMP*EDEN*RLCP
      SPC2=LOG((IMEV/RMP)**2/2.0)
      RETURN
6430  write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) ' Failed to open density file ',density_file
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      RETURN
      END
      SUBROUTINE MIX
      implicit none
      integer*4 I,IZZ
      real*4 AL183,ZAB,V2000
      real*4 FCOULCP,XSIFP
      COMMON/MIMSD/BMIN
      real*4 BMIN
      COMMON/MIXDAT/NEP,LMED,PZP(50),ZELEMP(50),WAP(50),RHOZP(50), GASPP
     *,EZ,TPZ,IDSTRN(24)
      integer*4 NEP,LMED
      real*4 PZP,ZELEMP,WAP,RHOZP,GASPP,EZ,TPZ
      CHARACTER*4 IDSTRN
      COMMON/MOLVAR/WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU, RLCP,EDEN,RH
     *OP,XCCP,BLCCP,TEFF0P,XR0P
      real*4 WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU,RLCP,EDEN,RHOP, XCCP
     *,BLCCP,TEFF0P,XR0P
      COMMON/PMCONS/PIP,C,RME,HBAR,ECGS,EMKS,AN
      real*4 PIP,C,RME,HBAR,ECGS,EMKS,AN
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      COMMON/ADLEN/ALRAD(4),ALRADP(4),A1440,A183
      real*4 ALRAD,ALRADP,A1440,A183
      COMMON/BREMPRP/DLP1(6),DLP2(6),DLP3(6),DLP4(6),DLP5(6),DLP6(6), DE
     *LCMP,ALPHIP(2),BPARP(2),DELPOSP(2)
      real*4 dlP1,dlP2,dlP3,dlP4,dlP5,dlP6,delcmP,alphiP,bparP,delposP
      real*4 XSI(20),ZZX(20),FZC(20),FCOUL(20),ZZ(20)
      IF ((GASPP.NE.0.0)) THEN
        RHOP=GASPP*RHOP
      END IF
      AL183 = LOG(A183)
      TPZ=0.0
      WM=0.0
      ZC=0.0
      ZT=0.0
      ZB=0.0
      ZF=0.0
      ZS=0.0
      ZE=0.0
      ZX=0.0
      ZAB=0.0
      DO 14851 I=1,NEP
        TPZ = TPZ + PZP(I)
        WM = WM + PZP(I)*WAP(I)
        ZC = ZC + PZP(I)*ZELEMP(I)
        FZC(I) =(FSC*ZELEMP(I))**2
        FCOUL(I) = FCOULCP(ZELEMP(I))
        XSI(I) = XSIFP (ZELEMP(I))
        ZZX(I) = PZP(I)*ZELEMP(I)*(ZELEMP(I)+XSI(I))
        IF ((ZELEMP(I).LE.4.0)) THEN
          IZZ=ZELEMP(I)
          ZAB=ZAB+ZZX(I)*ALRAD(IZZ)
        ELSE
          ZAB=ZAB+ZZX(I)*(AL183+LOG(ZELEMP(I)**(-1./3.)))
        END IF
        ZT = ZT + ZZX(I)
        ZB = ZB + ZZX(I)*LOG(ZELEMP(I)**(-1./3.))
        ZF = ZF + ZZX(I)*FCOUL(I)
        ZZ(I) = PZP(I)*ZELEMP(I)*(ZELEMP(I)+1.0)
        ZS = ZS + ZZ(I)
        ZE = ZE + ZZ(I)*((-2./3.)*LOG(ZELEMP(I)))
        ZX = ZX + ZZ(I)*LOG(1.+3.34*FZC(I))
14851 CONTINUE
14852 CONTINUE
      EZ = ZC/TPZ
      ZA = AL183*ZT
      ZG = ZB/ZT
      ZP = ZB/ZA
      ZV = (ZB-ZF)/ZT
      ZU = (ZB-ZF)/ZA
      EDEN=AN*RHOP/WM*ZC
      RLCP = 1./( (AN*RHOP/WM)*4.0*FSC*R0**2*(ZAB-ZF) )
      BLCCP= A6680*RHOP*ZS*EXP(ZE/ZS)*RLCP/(WM*EXP(ZX/ZS))
      TEFF0P = ( EXP(BMIN)/BMIN )/BLCCP
      XCCP= (A22P9/RADDEG) * SQRT( ZS*RHOP*RLCP/WM )
      XR0P = XCCP*SQRT(TEFF0P*BMIN)
      RETURN
      END
      SUBROUTINE DIFFER
      implicit none
      real*4 AL183,F10,F20,A1DEN,A2DEN,B1DEN,B2DEN,C1DEN,C2DEN
      INTEGER I
      COMMON/MOLVAR/WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU, RLCP,EDEN,RH
     *OP,XCCP,BLCCP,TEFF0P,XR0P
      real*4 WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU,RLCP,EDEN,RHOP, XCCP
     *,BLCCP,TEFF0P,XR0P
      COMMON/BREMPRP/DLP1(6),DLP2(6),DLP3(6),DLP4(6),DLP5(6),DLP6(6), DE
     *LCMP,ALPHIP(2),BPARP(2),DELPOSP(2)
      real*4 dlP1,dlP2,dlP3,dlP4,dlP5,dlP6,delcmP,alphiP,bparP,delposP
      COMMON/DBRPR/ALFP1(2),ALFP2(2),AL2
      real*4 ALFP1,ALFP2,al2
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      COMMON/ADLEN/ALRAD(4),ALRADP(4),A1440,A183
      real*4 ALRAD,ALRADP,A1440,A183
      AL2 = LOG(2.)
      AL183= LOG(A183)
      ALPHIP(1)= AL2*(4./3. + 1./(9.*AL183*(1.+ZP)))
      ALPHIP(2)= AL2*(4./3. + 1./(9.*AL183*(1.+ZU)))
      ALFP1(1)= 2./3. - 1./(36.*AL183*(1.+ZP))
      ALFP1(2)= 2./3. - 1./(36.*AL183*(1.+ZU))
      ALFP2(1)= (1./12.)*(4./3. + 1./(9.*AL183*(1+ZP)))
      ALFP2(2)= (1./12.)*(4./3. + 1./(9.*AL183*(1+ZU)))
      BPARP(1)= ALFP1(1)/(ALFP1(1)+ALFP2(1))
      BPARP(2)= ALFP1(2)/(ALFP1(2)+ALFP2(2))
      DELCMP= 136.0*EXP(ZG)*RMP
      DELPOSP(1)= (EXP((21.12+4.*ZG)/4.184)-0.952)/DELCMP
      DELPOSP(2)= (EXP((21.12+4.*ZV)/4.184)-0.952)/DELCMP
      F10=4.*AL183
      F20=F10 - 2./3.
      A1DEN =3.0*F10- F20 + 8.0*ZG
      A2DEN =3.0*F10- F20 + 8.0*ZV
      B1DEN = F10 + 4.0*ZG
      B2DEN = F10 + 4.0*ZV
      C1DEN = 3.0*F10+ F20 + 16.0*ZG
      C2DEN = 3.0*F10+ F20 + 16.0*ZV
      DLP1(1)= (3.0*20.867-20.209+8.0*ZG)/A1DEN
      DLP2(1)= (3.0*(-3.242)-(-1.930))/A1DEN
      DLP3(1)= (3.0*(0.625)-(0.086))/A1DEN
      DLP4(1)= (2.0*21.12+8.0*ZG)/A1DEN
      DLP5(1)= 2.0*(-4.184)/A1DEN
      DLP6(1)= 0.952
      DLP1(4)= (3.0*20.867-20.209+8.0*ZV)/A2DEN
      DLP2(4)= (3.0*(-3.242)-(-1.930))/A2DEN
      DLP3(4)= (3.0*(0.625)-(0.086))/A2DEN
      DLP4(4)= (2.0*21.12+8.0*ZV)/A2DEN
      DLP5(4)= 2.0*(-4.184)/A2DEN
      DLP6(4)= 0.952
      DLP1(2)= (20.867+4.0*ZG)/B1DEN
      DLP2(2)= -3.242/B1DEN
      DLP3(2)= 0.625/B1DEN
      DLP4(2)= (21.12+4.0*ZG)/B1DEN
      DLP5(2)= -4.184/B1DEN
      DLP6(2)= 0.952
      DLP1(5)= (20.867+4.0*ZV)/B2DEN
      DLP2(5)= -3.242/B2DEN
      DLP3(5)= 0.625/B2DEN
      DLP4(5)= (21.12+4.0*ZV)/B2DEN
      DLP5(5)= -4.184/B2DEN
      DLP6(5)= 0.952
      DLP1(3)= (3.0*20.867+20.209+16.0*ZG)/C1DEN
      DLP2(3)= (3.0*(-3.242)+(-1.930))/C1DEN
      DLP3(3)= (3.0*0.625+(-0.086))/C1DEN
      DLP4(3)= (4.0*21.12+16.0*ZG)/C1DEN
      DLP5(3)= 4.0*(-4.184)/C1DEN
      DLP6(3)= 0.952
      DLP1(6)= (3.0*20.867+20.209+16.0*ZV)/C2DEN
      DLP2(6)= (3.0*(-3.242)+(-1.930))/C2DEN
      DLP3(6)= (3.0*0.625+(-0.086))/C2DEN
      DLP4(6)= (4.0*21.12+16.0*ZV)/C2DEN
      DLP5(6)= 4.0*(-4.184)/C2DEN
      DLP6(6)= 0.952
      RETURN
      END
      real*4 function FCOULCP(Z)
      implicit none
      real*4 Z,ASQ
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      ASQ=(FSC*Z)**2
      FCOULCP = ASQ*(1.0/(1.0+ASQ)+0.20206+ASQ*(-0.0369+ ASQ*(0.0083+ASQ
     **(-0.002))))
      RETURN
      END
      real*4 function XSIFP(Z)
      implicit none
      real*4 Z,FCOULCP
      integer*4 IZ
      COMMON/ADLEN/ALRAD(4),ALRADP(4),A1440,A183
      real*4 ALRAD,ALRADP,A1440,A183
      IF ((Z.LE.4.0)) THEN
        IZ=Z
        XSIFP=ALRADP(IZ)/(ALRAD(IZ)-FCOULCP(Z))
      ELSE
        XSIFP=ALOG(A1440*Z**(-2./3.))/(ALOG(A183*Z**(-1./3.))-FCOULCP(Z)
     *  )
      END IF
      RETURN
      END
      real*4 FUNCTION ZTBL(IASYM)
      implicit none
      COMMON/ELEMTB/NET,ITBL(100),WATBL(100),RHOTBL(100),ASYMT(100)
      integer*4 NET
      real*4 ITBL,WATBL,RHOTBL
      CHARACTER*4 ASYMT
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      CHARACTER*4 IASYM,IA
      integer*4 ie
      DATA IA/'A'/
      save ia
      IF ((IASYM.EQ.IA)) THEN
        ZTBL=18.0
        RETURN
      END IF
      DO 14861 IE=1,NET
        IF ((IASYM.EQ.ASYMT(IE))) THEN
          ZTBL=IE
          RETURN
        END IF
14861 CONTINUE
14862 CONTINUE
      WRITE(6,14870)IASYM,NET
14870 FORMAT(1X,A2,' NOT AN ATOMIC SYMBOL FOR AN ELEMENT WITH Z LE ',I3)
      ZTBL=0.0
      RETURN
      END
      SUBROUTINE ANNIH
      implicit none
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common/egs_vr/ e_max_rr,  prob_RR,  nbr_split,  i_play_RR,      i_
     *survived_RR,
     *  n_RR_warning,                                        i_do_rr
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      DOUBLE PRECISION PAVIP,  PESG1,  PESG2
      real*8 AVIP,  A,                  G,T,P,                      POT,
     *
     *     EP0,                                                 WSAMP,
     *                       RNNO01,
     *                     RNNO02,
     *                                   EP,
     * REJF,                                                       ESG1,
     *                                      ESG2,
     *               aa,bb,cc,sinpsi,sindel,cosdel,us,vs,cphi,sphi
      integer*4
     *                     ibr
      real*8 xphi,xphi2,yphi,yphi2,rhophi2
      integer*4 ip
      NPold = NP
      IF (( nbr_split .LE. 0 )) THEN
        return
      END IF
      PAVIP=E(NP)+PRM
      AVIP=PAVIP
      A=AVIP/RM
      G=A-1.0
      T=G-1.0
      P=SQRT(A*T)
      POT=P/T
      EP0=1.0/(A+P)
      WSAMP=LOG((1.0-EP0)/EP0)
      aa = u(np)
      bb = v(np)
      cc = w(np)
      sinpsi = aa*aa + bb*bb
      IF (( sinpsi .GT. 1e-20 )) THEN
        sinpsi = sqrt(sinpsi)
        sindel = bb/sinpsi
        cosdel = aa/sinpsi
      END IF
      IF (( nbr_split .GT. 1 )) THEN
        wt(np) = wt(np)/nbr_split
      END IF
      DO 14881 ibr=1,nbr_split
        IF (( np+1 .GT. 10000 )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(//a,i6,a//)') ' Stack overflow in ANNIH! np = ',
     *    np+1, ' Increase $MXSTACK and try again'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
14891   CONTINUE
          IF((rng_seed .GT. 128))call ranmar_get
          RNNO01 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          EP=EP0*EXP(RNNO01*WSAMP)
          IF((rng_seed .GT. 128))call ranmar_get
          RNNO02 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          REJF = 1 - (EP*A-1)**2/(EP*(A*A-2))
          IF(((RNNO02 .LE. REJF)))GO TO14892
        GO TO 14891
14892   CONTINUE
        ESG1=AVIP*EP
        PESG1=ESG1
        E(NP)=PESG1
        IQ(NP)=0
        IF (( ibr .EQ. 1 )) THEN
          ip = npold
        ELSE
          ip = np-1
        END IF
        X(np)=X(ip)
        Y(np)=Y(ip)
        Z(np)=Z(ip)
        IR(np)=IR(ip)
        WT(np)=WT(ip)
        DNEAR(np)=DNEAR(ip)
        LATCH(np)=LATCH(ip)
        COSTHE=MIN(1.0,(ESG1-RM)*POT/ESG1)
        SINTHE=SQRT(1.0-COSTHE*COSTHE)
14901   CONTINUE
          IF((rng_seed .GT. 128))call ranmar_get
          xphi = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          xphi = 2*xphi - 1
          xphi2 = xphi*xphi
          IF((rng_seed .GT. 128))call ranmar_get
          yphi = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          yphi2 = yphi*yphi
          rhophi2 = xphi2 + yphi2
          IF(rhophi2.LE.1)GO TO14902
        GO TO 14901
14902   CONTINUE
        rhophi2 = 1/rhophi2
        cphi = (xphi2 - yphi2)*rhophi2
        sphi = 2*xphi*yphi*rhophi2
        IF (( sinpsi .GE. 1e-10 )) THEN
          us = sinthe*cphi
          vs = sinthe*sphi
          u(np) = cc*cosdel*us - sindel*vs + aa*costhe
          v(np) = cc*sindel*us + cosdel*vs + bb*costhe
          w(np) = cc*costhe - sinpsi*us
        ELSE
          u(np) = sinthe*cphi
          v(np) = sinthe*sphi
          w(np) = cc*costhe
        END IF
        np = np + 1
        PESG2=PAVIP-PESG1
        esg2 = pesg2
        e(np) = pesg2
        iq(np) = 0
        X(np)=X(np-1)
        Y(np)=Y(np-1)
        Z(np)=Z(np-1)
        IR(np)=IR(np-1)
        WT(np)=WT(np-1)
        DNEAR(np)=DNEAR(np-1)
        LATCH(np)=LATCH(np-1)
        COSTHE=MIN(1.0,(ESG2-RM)*POT/ESG2)
        SINTHE=-SQRT(1.0-COSTHE*COSTHE)
        IF (( sinpsi .GE. 1e-10 )) THEN
          us = sinthe*cphi
          vs = sinthe*sphi
          u(np) = cc*cosdel*us - sindel*vs + aa*costhe
          v(np) = cc*sindel*us + cosdel*vs + bb*costhe
          w(np) = cc*costhe - sinpsi*us
        ELSE
          u(np) = sinthe*cphi
          v(np) = sinthe*sphi
          w(np) = cc*costhe
        END IF
        np = np + 1
14881 CONTINUE
14882 CONTINUE
      np = np-1
      RETURN
      END
      SUBROUTINE ANNIH_AT_REST
      implicit none
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/egs_vr/ e_max_rr,  prob_RR,  nbr_split,  i_play_RR,      i_
     *survived_RR,
     *  n_RR_warning,                                        i_do_rr
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 costhe,sinthe,cphi,sphi
      integer*4 ibr,ip
      real*8 xphi,xphi2,yphi,yphi2,rhophi2
      NPold = NP
      IF (( np+2*nbr_split-1 .GT. 10000 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','ANNIH_AT_RES
     *T', ' stack size exceeded! ',' $MAXSTACK = ',10000,' np = ',np+2*n
     *  br_split-1
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF (( nbr_split .GT. 1 )) THEN
        wt(np) = wt(np)/nbr_split
      END IF
      DO 14911 ibr=1,nbr_split
        IF((rng_seed .GT. 128))call ranmar_get
        costhe = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        costhe = 2*costhe-1
        sinthe = sqrt(max(0.0,(1-costhe)*(1+costhe)))
14921   CONTINUE
          IF((rng_seed .GT. 128))call ranmar_get
          xphi = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          xphi = 2*xphi - 1
          xphi2 = xphi*xphi
          IF((rng_seed .GT. 128))call ranmar_get
          yphi = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          yphi2 = yphi*yphi
          rhophi2 = xphi2 + yphi2
          IF(rhophi2.LE.1)GO TO14922
        GO TO 14921
14922   CONTINUE
        rhophi2 = 1/rhophi2
        cphi = (xphi2 - yphi2)*rhophi2
        sphi = 2*xphi*yphi*rhophi2
        e(np) = prm
        iq(np) = 0
        IF (( ibr .EQ. 1 )) THEN
          ip = npold
        ELSE
          ip = np-1
        END IF
        X(np)=X(ip)
        Y(np)=Y(ip)
        Z(np)=Z(ip)
        IR(np)=IR(ip)
        WT(np)=WT(ip)
        DNEAR(np)=DNEAR(ip)
        LATCH(np)=LATCH(ip)
        u(np) = sinthe*cphi
        v(np) = sinthe*sphi
        w(np) = costhe
        np = np+1
        e(np) = prm
        iq(np) = 0
        X(np)=X(np-1)
        Y(np)=Y(np-1)
        Z(np)=Z(np-1)
        IR(np)=IR(np-1)
        WT(np)=WT(np-1)
        DNEAR(np)=DNEAR(np-1)
        LATCH(np)=LATCH(np-1)
        u(np) = -u(np-1)
        v(np) = -v(np-1)
        w(np) = -w(np-1)
        np = np+1
14911 CONTINUE
14912 CONTINUE
      np = np-1
      return
      end
      SUBROUTINE BHABHA
      implicit none
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/THRESH/RMT2,RMSQ, AP(7),AE(7),UP(7),UE(7),TE(7),THMOLL(7)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common/egs_vr/ e_max_rr,  prob_RR,  nbr_split,  i_play_RR,      i_
     *survived_RR,
     *  n_RR_warning,                                        i_do_rr
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      DOUBLE PRECISION PEIP,  PEKIN,  PEKSE2,  PESE1,  PESE2,  H1,  DCOS
     *TH
      real*8 EIP,  EKIN,  T0,  E0,  E02,  YY,  Y2,YP,YP2, BETA2,  EP0,
     *EP0C,  B1,B2,B3,B4,  RNNO03,RNNO04, BR,  REJF2,  ESE1,  ESE2
      NPold = NP
      PEIP=E(NP)
      EIP=PEIP
      PEKIN=PEIP-PRM
      EKIN=PEKIN
      T0=EKIN/RM
      E0=T0+1.
      YY=1./(T0+2.)
      E02=E0*E0
      BETA2=(E02-1.)/E02
      EP0=TE(MEDIUM)/EKIN
      EP0C=1.-EP0
      Y2=YY*YY
      YP=1.-2.*YY
      YP2=YP*YP
      B4=YP2*YP
      B3=B4+YP2
      B2=YP*(3.+Y2)
      B1=2.-Y2
14931 CONTINUE
        IF((rng_seed .GT. 128))call ranmar_get
        RNNO03 = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        BR=EP0/(1.-EP0C*RNNO03)
        IF((rng_seed .GT. 128))call ranmar_get
        RNNO04 = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        REJF2=(1.0-BETA2*BR*(B1-BR*(B2-BR*(B3-BR*B4))))
        IF((RNNO04.LE.REJF2))GO TO14932
      GO TO 14931
14932 CONTINUE
      IF (( np+1 .GT. 10000 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','BHABHA', ' s
     *tack size exceeded! ',' $MAXSTACK = ',10000,' np = ',np+1
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF ((BR.LT.0.5)) THEN
        IQ(NP+1)=-1
      ELSE
        IQ(NP)=-1
        IQ(NP+1)=1
        BR=1.-BR
      END IF
      BR=max(BR,0.0)
      PEKSE2=BR*EKIN
      PESE1=PEIP-PEKSE2
      PESE2=PEKSE2+PRM
      ESE1=PESE1
      ESE2=PESE2
      E(NP)=PESE1
      E(NP+1)=PESE2
      H1=(PEIP+PRM)/PEKIN
      DCOSTH=MIN(1.0D0,H1*(PESE1-PRM)/(PESE1+PRM))
      SINTHE=DSQRT(1.D0-DCOSTH)
      COSTHE=DSQRT(DCOSTH)
      CALL UPHI(2,1)
      NP=NP+1
      DCOSTH=H1*(PESE2-PRM)/(PESE2+PRM)
      SINTHE=-DSQRT(1.D0-DCOSTH)
      COSTHE=DSQRT(DCOSTH)
      CALL UPHI(3,2)
      RETURN
      END
      SUBROUTINE BREMS
      implicit none
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/BREMPR/ DL1(8,7),DL2(8,7),DL3(8,7),DL4(8,7),DL5(8,7),DL6(8,
     *7), ALPHI(2,7),BPAR(2,7),DELPOS(2,7), WA(7,50),PZ(7,50),ZELEM(7,50
     *),RHOZ(7,50), PWR2I(50), DELCM(7),ZBRANG(7),LZBRANG(7),NNE(7), IBR
     *DST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(7,50,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      common/nist_brems/ nb_fdata(0:50,100,7), nb_xdata(0:50,100,7), nb_
     *wdata(50,100,7), nb_idata(50,100,7), nb_emin(7),nb_emax(7), nb_lem
     *in(7),nb_lemax(7), nb_dle(7),nb_dlei(7), log_ap(7)
      real*8 nb_fdata,nb_xdata,nb_wdata,nb_emin,nb_emax,nb_lemin,nb_lema
     *x, nb_dle,nb_dlei,log_ap
      integer*4 nb_idata
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/THRESH/RMT2,RMSQ, AP(7),AE(7),UP(7),UE(7),TE(7),THMOLL(7)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common/egs_vr/ e_max_rr,  prob_RR,  nbr_split,  i_play_RR,      i_
     *survived_RR,
     *  n_RR_warning,                                        i_do_rr
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      DOUBLE PRECISION PEIE,  PESG,  PESE
      real*8 EIE,  EKIN,  brmin,  waux,  aux,  r1,  ajj,  alias_sample1,
     * RNNO06,  RNNO07,  BR,  ESG,  ESE,  DELTA,  phi1,  phi2,  REJF
      real*8 a,b,c,                               sinpsi, sindel, cosdel
     *, us, vs,
     *                                                ztarg,
     *             tteie,                                    beta,
     *                       y2max,
     *      y2maxi,                                                   tt
     *ese,                                      rjarg1,rjarg2,rjarg3,rej
     *min,rejmid,rejmax,rejtop,rejtst,
     *                 esedei,                                 y2tst,
     *                             y2tst1,
     *                                           rtest,
     *                            xphi,yphi,xphi2,yphi2,rhophi2,cphi,sph
     *i
      integer*4
     *                 L,L1,ibr,jj,j
      real*8 z2max,z2maxi,aux1,aux3,aux4,aux5,aux2,weight
      IF((nbr_split .LT. 1))return
      NPold = NP
      PEIE=E(NP)
      EIE=PEIE
      weight = wt(np)/nbr_split
      IF ((EIE.LT.50.0)) THEN
        L=1
      ELSE
        L=3
      END IF
      L1 = L+1
      ekin = peie-prm
      brmin = ap(medium)/ekin
      waux = elke - log_ap(medium)
      IF (( ibrdst .GE. 0 )) THEN
        a = u(np)
        b = v(np)
        c = w(np)
        sinpsi = a*a + b*b
        IF (( sinpsi .GT. 1e-20 )) THEN
          sinpsi = sqrt(sinpsi)
          sindel = b/sinpsi
          cosdel = a/sinpsi
        END IF
        ztarg = zbrang(medium)
        tteie = eie/rm
        beta = sqrt((tteie-1)*(tteie+1))/tteie
        y2max = 2*beta*(1+beta)*tteie*tteie
        y2maxi = 1/y2max
        IF (( ibrdst .EQ. 1 )) THEN
          z2max = y2max+1
          z2maxi = sqrt(z2max)
        END IF
      END IF
      IF (( ibr_nist .GE. 1 )) THEN
        ajj = 1 + (waux + log_ap(medium) - nb_lemin(medium))*nb_dlei(med
     *  ium)
        jj = ajj
        ajj = ajj - jj
        IF (( jj .GT. 100 )) THEN
          jj = 100
          ajj = -1
        END IF
      END IF
      DO 14941 ibr=1,nbr_split
        IF (( ibr_nist .GE. 1 )) THEN
          IF (( ekin .GT. nb_emin(medium) )) THEN
            IF((rng_seed .GT. 128))call ranmar_get
            r1 = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            IF (( r1 .LT. ajj )) THEN
              j = jj+1
            ELSE
              j = jj
            END IF
            br = alias_sample1(50,nb_xdata(0,j,medium), nb_fdata(0,j,med
     *      ium), nb_wdata(1,j,medium),nb_idata(1,j,medium))
          ELSE
            IF((rng_seed .GT. 128))call ranmar_get
            br = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
          END IF
          esg = ap(medium)*exp(br*waux)
          pesg = esg
          pese = peie - pesg
          ese = pese
        ELSE
14951     CONTINUE
            IF((rng_seed .GT. 128))call ranmar_get
            rnno06 = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            IF((rng_seed .GT. 128))call ranmar_get
            rnno07 = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            br = brmin*exp(rnno06*waux)
            esg = ekin*br
            pesg = esg
            pese = peie - pesg
            ese = pese
            delta = esg/eie/ese*delcm(medium)
            aux = ese/eie
            IF (( delta .LT. 1 )) THEN
              phi1 = dl1(l,medium)+delta*(dl2(l,medium)+delta*dl3(l,medi
     *        um))
              phi2 = dl1(l1,medium)+delta*(dl2(l1,medium)+ delta*dl3(l1,
     *        medium))
            ELSE
              phi1 = dl4(l,medium)+dl5(l,medium)*log(delta+dl6(l,medium)
     *        )
              phi2 = phi1
            END IF
            rejf = (1+aux*aux)*phi1 - 2*aux*phi2/3
            IF(((rnno07 .LT. rejf)))GO TO14952
          GO TO 14951
14952     CONTINUE
        END IF
        np=np+1
        IF (( np .GT. 10000 )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(//a,i6,a//)') ' Stack overflow in BREMS! np = ',
     *    np+1, ' Increase $MXSTACK and try again'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        e(np) = pesg
        iq(np) = 0
        X(np)=X(np-1)
        Y(np)=Y(np-1)
        Z(np)=Z(np-1)
        IR(np)=IR(np-1)
        WT(np)=WT(np-1)
        DNEAR(np)=DNEAR(np-1)
        LATCH(np)=LATCH(np-1)
        wt(np) = weight
        IF (( ibrdst .LT. 0 )) THEN
          u(np) = u(npold)
          v(np) = v(npold)
          w(np) = w(npold)
        ELSE
          IF (( ibrdst .EQ. 1 )) THEN
            ttese = ese/rm
            esedei = ttese/tteie
            rjarg1 = 1+esedei*esedei
            rjarg2 = rjarg1 + 2*esedei
            aux = 2*ese*tteie/esg
            aux = aux*aux
            aux1 = aux*ztarg
            IF (( aux1 .GT. 10 )) THEN
              rjarg3 = lzbrang(medium) + (1-aux1)/aux1**2
            ELSE
              rjarg3 = log(aux/(1+aux1))
            END IF
            rejmax = rjarg1*rjarg3-rjarg2
14961       CONTINUE
              IF((rng_seed .GT. 128))call ranmar_get
              y2tst = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF((rng_seed .GT. 128))call ranmar_get
              rtest = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              aux3 = z2maxi/(y2tst+(1-y2tst)*z2maxi)
              rtest = rtest*aux3*rejmax
              y2tst = aux3**2-1
              y2tst1 = esedei*y2tst/aux3**4
              aux4 = 16*y2tst1-rjarg2
              aux5 = rjarg1-4*y2tst1
              IF((rtest .LT. aux4 + aux5*rjarg3))GO TO14962
              aux2 = log(aux/(1+aux1/aux3**4))
              rejtst = aux4+aux5*aux2
              IF(((rtest .LT. rejtst )))GO TO14962
            GO TO 14961
14962       CONTINUE
          ELSE
            IF((rng_seed .GT. 128))call ranmar_get
            y2tst = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            y2tst = y2tst/(1-y2tst+y2maxi)
          END IF
          costhe = 1 - 2*y2tst*y2maxi
          sinthe = sqrt(max((1-costhe)*(1+costhe),0.0))
14971     CONTINUE
            IF((rng_seed .GT. 128))call ranmar_get
            xphi = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            xphi = 2*xphi - 1
            xphi2 = xphi*xphi
            IF((rng_seed .GT. 128))call ranmar_get
            yphi = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            yphi2 = yphi*yphi
            rhophi2 = xphi2 + yphi2
            IF(rhophi2.LE.1)GO TO14972
          GO TO 14971
14972     CONTINUE
          rhophi2 = 1/rhophi2
          cphi = (xphi2 - yphi2)*rhophi2
          sphi = 2*xphi*yphi*rhophi2
          IF (( sinpsi .GE. 1e-10 )) THEN
            us = sinthe*cphi
            vs = sinthe*sphi
            u(np) = c*cosdel*us - sindel*vs + a*costhe
            v(np) = c*sindel*us + cosdel*vs + b*costhe
            w(np) = c*costhe - sinpsi*us
          ELSE
            u(np) = sinthe*cphi
            v(np) = sinthe*sphi
            w(np) = c*costhe
          END IF
        END IF
14941 CONTINUE
14942 CONTINUE
      e(npold) = pese
      RETURN
      END
      SUBROUTINE COMPT
      implicit none
      common/compton_data/ iz_array(1538),  be_array(1538),  Jo_array(15
     *38),  erfJo_array(1538),   ne_array(1538),  shn_array(1538),
     *shell_array(200,7), eno_array(200,7), eno_atbin_array(200,7), n_sh
     *ell(7), radc_flag,  ibcmp
      integer*4 iz_array,ne_array,shn_array,eno_atbin_array, shell_array
     *,n_shell,radc_flag
      real*8 be_array,Jo_array,erfJo_array,eno_array
      integer*2 ibcmp
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/THRESH/RMT2,RMSQ, AP(7),AE(7),UP(7),UE(7),TE(7),THMOLL(7)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common/egs_vr/ e_max_rr,  prob_RR,  nbr_split,  i_play_RR,      i_
     *survived_RR,
     *  n_RR_warning,                                        i_do_rr
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/relax_data/ relax_first(3000),  relax_ntran(3000),  relax_s
     *tate(10000),  relax_prob(10000),  relax_atbin(10000),  relax_ntot
      real*8 relax_prob
      integer*4 relax_first, relax_ntran, relax_state, relax_atbin, rela
     *x_ntot
      DOUBLE PRECISION PEIG,  PESG,  PESE
      real*8 ko,  broi,  broi2,  bro,  bro1,  alph1,  alph2,  alpha,  rn
     *no15,rnno16,rnno17,rnno18,rnno19,  br,  temp,  rejf3,  rejmax,  Uj
     *,  Jo,  br2,  fpz,fpz1, qc,  qc2,  af,  Fmax,  frej,  eta_incoh, e
     *ta,  aux,aux1,aux2,aux3,aux4,  pzmax,  pz,  pz2,  rnno_RR
      integer*4 irl,  i,  j,  iarg,  ip
      logical first_time
      integer*4 ibcmpl
      NPold = NP
      peig=E(NP)
      ko = peig/rm
      broi = 1 + 2*ko
      irl = ir(np)
      first_time = .true.
      ibcmpl = ibcmp
14980 CONTINUE
      IF (( ibcmpl .GT. 0 )) THEN
        IF((rng_seed .GT. 128))call ranmar_get
        rnno17 = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        rnno17 = 1 + rnno17*n_shell(medium)
        i = int(rnno17)
        IF((rnno17 .GT. eno_array(i,medium)))i = eno_atbin_array(i,mediu
     *  m)
        j = shell_array(i,medium)
        Uj = be_array(j)
        IF (( ko .LE. Uj )) THEN
          IF (( ibcmpl .EQ. 1 )) THEN
            goto 14990
          ELSE
            goto 14980
          END IF
        END IF
        Jo = Jo_array(j)
      END IF
15000 CONTINUE
      IF (( ko .GT. 2 )) THEN
        IF (( first_time )) THEN
          broi2 = broi*broi
          alph1 = Log(broi)
          bro = 1/broi
          alph2 = ko*(broi+1)*bro*bro
          alpha = alph1+alph2
        END IF
15011   CONTINUE
          IF((rng_seed .GT. 128))call ranmar_get
          rnno15 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF((rng_seed .GT. 128))call ranmar_get
          rnno16 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF (( rnno15*alpha .LT. alph1 )) THEN
            br = Exp(alph1*rnno16)*bro
          ELSE
            br = Sqrt(rnno16*broi2 + (1-rnno16))*bro
          END IF
          temp = (1-br)/(ko*br)
          sinthe = Max(0.,temp*(2-temp))
          aux = 1+br*br
          rejf3 = aux - br*sinthe
          IF((rng_seed .GT. 128))call ranmar_get
          rnno19 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF((rnno19*aux.le.rejf3))GO TO15012
        GO TO 15011
15012   CONTINUE
      ELSE
        IF (( first_time )) THEN
          bro = 1./broi
          bro1 = 1 - bro
          rejmax = broi + bro
        END IF
15021   CONTINUE
          IF((rng_seed .GT. 128))call ranmar_get
          rnno15 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF((rng_seed .GT. 128))call ranmar_get
          rnno16 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          br = bro + bro1*rnno15
          temp = (1-br)/(ko*br)
          sinthe = Max(0.,temp*(2-temp))
          rejf3 = 1 + br*br - br*sinthe
          IF((rnno16*br*rejmax.le.rejf3))GO TO15022
        GO TO 15021
15022   CONTINUE
      END IF
      first_time = .false.
      IF ((br .LT. bro .OR. br .GT. 1)) THEN
        IF (( br .LT. 0.99999/broi .OR. br .GT. 1.00001 )) THEN
          write(i_log,'(/a)') '***************** Warning: '
          write(i_log,*) ' sampled br outside of allowed range! ',ko,1./
     *    broi,br
        END IF
        goto 15000
      END IF
      costhe = 1 - temp
      IF (( ibcmp .EQ. 0 )) THEN
        Uj = 0
        goto 15030
      END IF
      br2 = br*br
      aux = ko*(ko-Uj)*temp
      aux1 = 2*aux + Uj*Uj
      pzmax = aux - Uj
      IF (( pzmax .LT. 0 .AND. pzmax*pzmax .GE. aux1 )) THEN
        IF (( ibcmpl .EQ. 1 )) THEN
          goto 14990
        ELSE
          goto 14980
        END IF
      END IF
      pzmax = pzmax/sqrt(aux1)
      qc2 = 1 + br*br - 2*br*costhe
      qc = sqrt(qc2)
      IF (( pzmax .GT. 1 )) THEN
        pzmax = 1
        af = 0
        Fmax = 1
        fpz = 1
        goto 15040
      END IF
      aux3 = 1 + 2*Jo*abs(pzmax)
      aux4 = 0.5*(1-aux3*aux3)
      fpz = 0.5*exp(aux4)
      af = qc*(1+br*(br-costhe)/qc2)
      IF (( af .LT. 0 )) THEN
        IF((pzmax .GT. 0))fpz = 1 - fpz
        IF((rng_seed .GT. 128))call ranmar_get
        eta_incoh = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        IF (( eta_incoh .GT. fpz )) THEN
          IF (( ibcmpl .EQ. 1 )) THEN
            goto 14990
          ELSE
            goto 14980
          END IF
        END IF
        af = 0
        Fmax = 1
        goto 15040
      END IF
      IF (( pzmax .LT. -0.15 )) THEN
        Fmax = 1-af*0.15
        fpz1 = fpz*Fmax*Jo
      ELSE IF(( pzmax .LT. 0.15 )) THEN
        Fmax = 1 + af*pzmax
        aux3 = 1/(1+0.33267252734*aux3)
        aux4 = fpz*aux3*(0.3480242+aux3*(-0.0958798+aux3*0.7478556)) + e
     *  rfJo_array(j)
        IF (( pzmax .GT. 0 )) THEN
          fpz1 = (1 - Fmax*fpz)*Jo - 0.62665706866*af*aux4
          fpz = 1 - fpz
        ELSE
          fpz1 = Fmax*fpz*Jo - 0.62665706866*af*aux4
        END IF
      ELSE
        Fmax = 1 + af*0.15
        fpz1 = (1 - Fmax*fpz)*Jo
        fpz = 1 - fpz
      END IF
      IF((rng_seed .GT. 128))call ranmar_get
      eta_incoh = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      IF ((eta_incoh*Jo .GT. fpz1 )) THEN
        IF (( ibcmpl .EQ. 1 )) THEN
          goto 14990
        ELSE
          goto 14980
        END IF
      END IF
15040 CONTINUE
      IF (( ibcmpl .NE. 2 )) THEN
        IF((rng_seed .GT. 128))call ranmar_get
        rnno18 = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        rnno18 = rnno18*fpz
        IF (( rnno18 .LT. 0.5 )) THEN
          rnno18 = Max(1e-30,2*rnno18)
          pz = 0.5*(1-Sqrt(1-2*Log(rnno18)))/Jo
        ELSE
          rnno18 = 2*(1-rnno18)
          pz = 0.5*(Sqrt(1-2*Log(rnno18))-1)/Jo
        END IF
        IF((abs(pz) .GT. 1))goto 15040
        IF (( pz .LT. 0.15 )) THEN
          IF (( pz .LT. -0.15 )) THEN
            frej = 1 - af*0.15
          ELSE
            frej = 1 + af*pz
          END IF
          IF((rng_seed .GT. 128))call ranmar_get
          eta = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF((eta*Fmax .GT. frej))goto 15040
        END IF
      ELSE
        pz = 0
        Uj = 0
      END IF
      pz2 = pz*pz
      IF (( abs(pz) .LT. 0.01 )) THEN
        br = br*(1 + pz*(qc + (br2-costhe)*pz))
      ELSE
        aux = 1 - pz2*br*costhe
        aux1 = 1 - pz2*br2
        aux2 = qc2 - br2*pz2*sinthe
        IF (( aux2 .GT. 1e-10 )) THEN
          br = br/aux1*(aux+pz*Sqrt(aux2))
        END IF
      END IF
      Uj = Uj*prm
15030 pesg = br*peig
      pese = peig - pesg - Uj + prm
      sinthe = Sqrt(sinthe)
      call uphi(2,1)
      e(np) = pesg
      aux = 1 + br*br - 2*br*costhe
      IF (( aux .GT. 1e-8 )) THEN
        costhe = (1-br*costhe)/Sqrt(aux)
        sinthe = (1-costhe)*(1+costhe)
        IF (( sinthe .GT. 0 )) THEN
          sinthe = -Sqrt(sinthe)
        ELSE
          sinthe = 0
        END IF
      ELSE
        costhe = 0
        sinthe = -1
      END IF
      np = np + 1
      IF (( np .GT. 10000 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','COMPT', ' st
     *ack size exceeded! ',' $MAXSTACK = ',10000,' np = ',np
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      call uphi(3,2)
      e(np) = pese
      iq(np) = -1
      IF (( ibcmpl .EQ. 1 .OR. ibcmpl .EQ. 3 )) THEN
        IF (( Uj .GT. 1e-3 )) THEN
          edep = pzero
          call relax(Uj,shn_array(j),iz_array(j))
        ELSE
          edep = Uj
          edep_local = edep
          IARG=33
          IF ((IAUSFL(IARG+1).NE.0)) THEN
            CALL AUSGAB(IARG)
          END IF
          IF((IARG.LT.0))RETURN
        END IF
        IF (( edep .GT. 0 )) THEN
          IARG=4
          IF ((IAUSFL(IARG+1).NE.0)) THEN
            CALL AUSGAB(IARG)
          END IF
          IF((IARG.LT.0))RETURN
        END IF
      END IF
      i_survived_RR = 0
      IF (( i_play_RR .EQ. 1 )) THEN
        IF (( prob_RR .LE. 0 )) THEN
          IF (( n_RR_warning .LT. 50 )) THEN
            n_RR_warning = n_RR_warning + 1
            WRITE(6,15050)prob_RR
15050       FORMAT('**** Warning, attempt to play Roussian Roulette with
     * prob_RR<=0! ',g14.6)
          END IF
        ELSE
          ip = NPold+1
15061     CONTINUE
            IF (( iq(ip) .NE. 0 )) THEN
              IF((rng_seed .GT. 128))call ranmar_get
              rnno_RR = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF (( rnno_RR .LT. prob_RR )) THEN
                wt(ip) = wt(ip)/prob_RR
                ip = ip + 1
              ELSE
                i_survived_RR = i_survived_RR + 1
                IF ((ip .LT. np)) THEN
                  e(ip) = e(np)
                  iq(ip) = iq(np)
                  wt(ip) = wt(np)
                  u(ip) = u(np)
                  v(ip) = v(np)
                  w(ip) = w(np)
                END IF
                np = np-1
              END IF
            ELSE
              ip = ip+1
            END IF
            IF(((ip .GT. np)))GO TO15062
          GO TO 15061
15062     CONTINUE
          IF (( np .EQ. 0 )) THEN
            np = 1
            e(np) = 0
            iq(np) = 0
            wt(np) = 0
          END IF
        END IF
      END IF
      return
14990 return
      end
      SUBROUTINE old_COMPT
      implicit none
      common/compton_data/ iz_array(1538),  be_array(1538),  Jo_array(15
     *38),  erfJo_array(1538),   ne_array(1538),  shn_array(1538),
     *shell_array(200,7), eno_array(200,7), eno_atbin_array(200,7), n_sh
     *ell(7), radc_flag,  ibcmp
      integer*4 iz_array,ne_array,shn_array,eno_atbin_array, shell_array
     *,n_shell,radc_flag
      real*8 be_array,Jo_array,erfJo_array,eno_array
      integer*2 ibcmp
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/THRESH/RMT2,RMSQ, AP(7),AE(7),UP(7),UE(7),TE(7),THMOLL(7)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common/egs_vr/ e_max_rr,  prob_RR,  nbr_split,  i_play_RR,      i_
     *survived_RR,
     *  n_RR_warning,                                        i_do_rr
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/relax_data/ relax_first(3000),  relax_ntran(3000),  relax_s
     *tate(10000),  relax_prob(10000),  relax_atbin(10000),  relax_ntot
      real*8 relax_prob
      integer*4 relax_first, relax_ntran, relax_state, relax_atbin, rela
     *x_ntot
      DOUBLE PRECISION PEIG,  PESG,  PESE
      real*8 ko,  broi,  broi2,  bro,  bro1,  alph1,  alph2,  alpha,  rn
     *no15,rnno16,rnno17,rnno18,rnno19,  br,  temp,  rejf3,  rejmax,  Uj
     *,  br2,  aux,aux1,aux2, pzmax2,  pz,  pz2,  rnno_RR
      integer*4 irl,  i,  j,  iarg,  ip
      i_survived_RR = 0
      NPold = NP
      peig=E(NP)
      ko = peig/rm
      broi = 1 + 2*ko
      irl = ir(np)
      IF (( ibcmp .EQ. 1 )) THEN
        IF((rng_seed .GT. 128))call ranmar_get
        rnno17 = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        DO 15071 i=1,n_shell(medium)
          rnno17 = rnno17 - eno_array(i,medium)
          IF((rnno17 .LE. 0))GO TO15072
15071   CONTINUE
15072   CONTINUE
        j = shell_array(i,medium)
        Uj = be_array(j)
        IF (( ko .LE. Uj )) THEN
          goto 15080
        END IF
      END IF
15090 CONTINUE
      IF (( ko .GT. 2 )) THEN
        broi2 = broi*broi
        alph1 = Log(broi)
        alph2 = ko*(broi+1)/broi2
        alpha = alph1/(alph1+alph2)
15101   CONTINUE
          IF((rng_seed .GT. 128))call ranmar_get
          rnno15 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF((rng_seed .GT. 128))call ranmar_get
          rnno16 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF (( rnno15 .LT. alpha )) THEN
            br = Exp(alph1*rnno16)/broi
          ELSE
            br = Sqrt(rnno16 + (1-rnno16)/broi2)
          END IF
          temp = (1-br)/ko/br
          sinthe = Max(0.,temp*(2-temp))
          rejf3 = 1 - br*sinthe/(1+br*br)
          IF((rng_seed .GT. 128))call ranmar_get
          rnno19 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF((rnno19.le.rejf3))GO TO15102
        GO TO 15101
15102   CONTINUE
      ELSE
        bro = 1./broi
        bro1 = 1 - bro
        rejmax = broi + bro
15111   CONTINUE
          IF((rng_seed .GT. 128))call ranmar_get
          rnno15 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF((rng_seed .GT. 128))call ranmar_get
          rnno16 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          br = bro + bro1*rnno15
          temp = (1-br)/ko/br
          sinthe = Max(0.,temp*(2-temp))
          rejf3 = (br + 1./br - sinthe)/rejmax
          IF((rnno16.le.rejf3))GO TO15112
        GO TO 15111
15112   CONTINUE
      END IF
      IF ((br .LT. 1./broi .OR. br .GT. 1)) THEN
        IF (( br .LT. 0.99999/broi .OR. br .GT. 1.00001 )) THEN
          write(i_log,'(/a)') '***************** Warning: '
          write(i_log,*) ' sampled br outside of allowed range! ',ko,1./
     *    broi,br
        END IF
        goto 15090
      END IF
      IF (( ibcmp .EQ. 0 )) THEN
        Uj = 0
        costhe = 1 - temp
        goto 15120
      END IF
      br2 = br*br
      costhe = 1 - temp
      aux = ko*(ko-Uj)*temp
      aux1 = aux-Uj
      pzmax2 = aux1*aux1/(2*aux+Uj*Uj)
15130 CONTINUE
      IF((rng_seed .GT. 128))call ranmar_get
      rnno18 = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      IF (( rnno18 .LT. 0.5 )) THEN
        rnno18 = Max(1e-30,2*rnno18)
        pz = 0.5*(1-Sqrt(1-2*Log(rnno18)))/Jo_array(j)
        pz2 = pz*pz
        IF (( (pz2 .LE. pzmax2) .AND. (aux1 .LT. 0) )) THEN
          goto 15080
        END IF
      ELSE
        IF (( aux1 .LT. 0 )) THEN
          goto 15080
        END IF
        rnno18 = 2*(1-rnno18)
        pz = 0.5*(Sqrt(1-2*Log(rnno18))-1)/Jo_array(j)
        pz2 = pz*pz
        IF (( pz2 .GE. pzmax2 )) THEN
          goto 15080
        END IF
      END IF
      IF((abs(pz) .GT. 1))goto 15130
      aux = 1 - pz2*br*costhe
      aux1 = 1 - pz2*br2
      aux2 = 1-2*br*costhe+br2*(1-pz2*sinthe)
      IF (( aux2 .GT. 1e-10 )) THEN
        br = br/aux1*(aux+pz*Sqrt(aux2))
      END IF
      Uj = Uj*prm
15120 pesg = br*peig
      pese = peig - pesg - Uj + prm
      sinthe = Sqrt(sinthe)
      call uphi(2,1)
      e(np) = pesg
      aux = 1 + br*br - 2*br*costhe
      IF (( aux .GT. 1e-8 )) THEN
        costhe = (1-br*costhe)/Sqrt(aux)
        sinthe = (1-costhe)*(1+costhe)
        IF (( sinthe .GT. 0 )) THEN
          sinthe = -Sqrt(sinthe)
        ELSE
          sinthe = 0
        END IF
      ELSE
        costhe = 0
        sinthe = -1
      END IF
      np = np + 1
      IF (( np .GT. 10000 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','COMPT', ' st
     *ack size exceeded! ',' $MAXSTACK = ',10000,' np = ',np
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      call uphi(3,2)
      e(np) = pese
      iq(np) = -1
      IF (( ibcmp .EQ. 1 )) THEN
        IF (( Uj .GT. 1e-3 )) THEN
          edep = 0
          call relax(Uj,shn_array(j),iz_array(j))
        ELSE
          edep = Uj
        END IF
        IF (( edep .GT. 0 )) THEN
          IARG=4
          IF ((IAUSFL(IARG+1).NE.0)) THEN
            CALL AUSGAB(IARG)
          END IF
          IF((IARG.LT.0))RETURN
        END IF
      END IF
      i_survived_RR = 0
      IF (( i_play_RR .EQ. 1 )) THEN
        IF (( prob_RR .LE. 0 )) THEN
          IF (( n_RR_warning .LT. 50 )) THEN
            n_RR_warning = n_RR_warning + 1
            WRITE(6,15140)prob_RR
15140       FORMAT('**** Warning, attempt to play Roussian Roulette with
     * prob_RR<=0! ',g14.6)
          END IF
        ELSE
          ip = NPold+1
15151     CONTINUE
            IF (( iq(ip) .NE. 0 )) THEN
              IF((rng_seed .GT. 128))call ranmar_get
              rnno_RR = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF (( rnno_RR .LT. prob_RR )) THEN
                wt(ip) = wt(ip)/prob_RR
                ip = ip + 1
              ELSE
                i_survived_RR = i_survived_RR + 1
                IF ((ip .LT. np)) THEN
                  e(ip) = e(np)
                  iq(ip) = iq(np)
                  wt(ip) = wt(np)
                  u(ip) = u(np)
                  v(ip) = v(np)
                  w(ip) = w(np)
                END IF
                np = np-1
              END IF
            ELSE
              ip = ip+1
            END IF
            IF(((ip .GT. np)))GO TO15152
          GO TO 15151
15152     CONTINUE
          IF (( np .EQ. 0 )) THEN
            np = 1
            e(np) = 0
            iq(np) = 0
            wt(np) = 0
          END IF
        END IF
      END IF
      return
15080 return
      end
      SUBROUTINE ELECTR(IRCODE)
      implicit none
      integer*4 IRCODE
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/BOUNDS/ECUT,PCUT,VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/ELECIN/ esig_e(7),psig_e(7), esige_max, psige_max, range_ep
     *(0:1,500,7), E_array(500,7), etae_ms0(500,7),etae_ms1(500,7),etap_
     *ms0(500,7),etap_ms1(500,7),q1ce_ms0(500,7),q1ce_ms1(500,7),q1cp_ms
     *0(500,7),q1cp_ms1(500,7),q2ce_ms0(500,7),q2ce_ms1(500,7),q2cp_ms0(
     *500,7),q2cp_ms1(500,7),blcce0(500,7),blcce1(500,7), EKE0(7),EKE1(7
     *), XR0(7),TEFF0(7),BLCC(7),XCC(7), ESIG0(500,7),ESIG1(500,7),PSIG0
     *(500,7),PSIG1(500,7),EDEDX0(500,7),EDEDX1(500,7),PDEDX0(500,7),PDE
     *DX1(500,7),EBR10(500,7),EBR11(500,7),PBR10(500,7),PBR11(500,7),PBR
     *20(500,7),PBR21(500,7),TMXS0(500,7),TMXS1(500,7), expeke1(7), IUNR
     *ST(7),EPSTFL(7),IAPRIM(7), sig_ismonotone(0:1,7)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR( 2097154),MED( 2097154),IRAYLR,
     *IPHOTONUCR( 2097154)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/THRESH/RMT2,RMSQ, AP(7),AE(7),UP(7),UE(7),TE(7),THMOLL(7)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIIN/SINC0,SINC1,SIN0(1002),SIN1(1002)
      real*8 SINC0,SINC1,SIN0,SIN1
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      COMMON/USERPS/n_split
      integer*4 n_split
      COMMON/USERRR/ESAVE_GLOBAL,RANGE_ECUTRR(7),IREJECT
      real*8 ESAVE_GLOBAL,RANGE_ECUTRR
      integer*4 IREJECT
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common/ET_control/ SMAXIR,estepe,ximax,  skindepth_for_bca,transpo
     *rt_algorithm, bca_algorithm,exact_bca,spin_effects
      real*8 smaxir,  estepe,  ximax,      skindepth_for_bca
      integer*4 transport_algorithm, bca_algorithm
      logical exact_bca,  spin_effects
      common/CH_steps/ count_pII_steps,count_all_steps,is_ch_step
      real*8 count_pII_steps,count_all_steps
      logical is_ch_step
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/egs_vr/ e_max_rr,  prob_RR,  nbr_split,  i_play_RR,      i_
     *survived_RR,
     *  n_RR_warning,                                        i_do_rr
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common/emf_inputs/ExIN,EyIN,EzIN,  EMLMTIN,  BxIN, ByIN, BzIN,  Bx
     *, By, Bz,  Bx_new, By_new, Bz_new,  emfield_on
      real*8 ExIN,EyIN,EzIN, EMLMTIN, BxIN,ByIN,BzIN, Bx,By,Bz, Bx_new,B
     *y_new,Bz_new
      logical emfield_on
      common/geom/ xbound(128+1),  ybound(128+1),  zbound(128+1),  xboun
     *d_min,  xbound_max,  ybound_min,  ybound_max,  zbound_min,  zbound
     *_max,  medsur,  dsurround(4),  IMAX,  JMAX,  KMAX,  ijmax,  irmax,
     *  howfarless
      real*4 xbound, ybound, zbound, xbound_min, xbound_max, ybound_min,
     * ybound_max, zbound_min, zbound_max,dsurround
      integer medsur,IMAX, JMAX, KMAX, ijmax,irmax
      logical howfarless
      common/eii_data/ eii_xsection_a( 10000),  eii_xsection_b( 10000),
     * eii_cons(7), eii_a(40),  eii_b(40),  eii_L_factor,  eii_z(40),  e
     *ii_sh(40),  eii_nshells(100),  eii_nsh(7),  eii_first(7,50),  eii_
     *no(7,50),  eii_flag
      real*8 eii_xsection_a,eii_xsection_b,eii_a,eii_b,eii_cons,eii_L_fa
     *ctor
      integer*4 eii_z,eii_sh,eii_nshells
      integer*4 eii_first,eii_no
      integer*4 eii_elements,eii_flag,eii_nsh
      real*8 lambda_max, sigratio, u_tmp, v_tmp, w_tmp
      LOGICAL random_tustep
      DOUBLE PRECISION  demfp,  peie,  total_tstep,  total_de
      real*8 ekems,  elkems,  chia2,  etap,  lambda,  blccl,  xccl,  xi,
     *  xi_corr,  ms_corr, p2,  beta2,  de,  save_de,  dedx,  dedx0,  de
     *dxmid,  ekei,  elkei,  aux,  ebr1,  eie,  ekef,  elkef,  ekeold,
     *eketmp,  elktmp,  fedep,  tuss,  pbr1,  pbr2,  range,  rfict,  rnn
     *e1,  rnno24,  rnno25,  rnnotu,  rnnoss,  sig,  sig0,  sigf,  skind
     *epth,  ssmfp,  tmxs,  tperp,  ustep0,  uscat,  vscat,  wscat,  xtr
     *ans,  ytrans,  ztrans,  cphi,sphi
      real*8 xphi,xphi2,yphi,yphi2,rhophi2
      integer*4 iarg,  idr,  ierust,  irl,  lelec,  qel,  lelke,  lelkem
     *s,  lelkef,  lelktmp,  ibr
      logical  callhowfar,   domultiple,  dosingle,   callmsdist,
     *                findindex,
     *              spin_index,                                   comput
     *e_tstep
     *
      data ierust/0/
      save ierust
      ircode = 1
      irold = ir(np)
      irl = irold
      medium = med(irl)
15160 CONTINUE
15161   CONTINUE
        lelec = iq(np)
        qel = (1+lelec)/2
        peie = e(np)
        eie = peie
        IF ((eie .LE. ECUT)) THEN
          go to 15170
        END IF
        IF ((WT(NP) .EQ. 0.0)) THEN
          go to 15180
        END IF
15190   CONTINUE
15191     CONTINUE
          compute_tstep = .true.
          eke = eie - rm
          IF ((medium .NE. 0)) THEN
            IF((rng_seed .GT. 128))call ranmar_get
            RNNE1 = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            IF ((RNNE1.EQ.0.0)) THEN
              RNNE1=1.E-30
            END IF
            DEMFP=MAX(-LOG(RNNE1),1.E-5)
            elke = log(eke)
            Lelke=eke1(MEDIUM)*elke+eke0(MEDIUM)
            IF (( sig_ismonotone(qel,medium) )) THEN
              IF ((lelec .LT. 0)) THEN
                sigf=esig1(Lelke,MEDIUM)*elke+esig0(Lelke,MEDIUM)
                dedx0=ededx1(Lelke,MEDIUM)*elke+ededx0(Lelke,MEDIUM)
                sigf = sigf/dedx0
              ELSE
                sigf=psig1(Lelke,MEDIUM)*elke+psig0(Lelke,MEDIUM)
                dedx0=pdedx1(Lelke,MEDIUM)*elke+pdedx0(Lelke,MEDIUM)
                sigf = sigf/dedx0
              END IF
              sig0 = sigf
            ELSE
              IF (( lelec .LT. 0 )) THEN
                sig0 = esig_e(medium)
              ELSE
                sig0 = psig_e(medium)
              END IF
            END IF
          END IF
15200     CONTINUE
15201       CONTINUE
            IF ((medium .EQ. 0)) THEN
              tstep = vacdst
              ustep = tstep
              tustep = ustep
              callhowfar = .true.
              ustep = tustep
            ELSE
              RHOF=RHOR(IRL)/RHO(MEDIUM)
              sig = sig0
              IF ((sig .LE. 0)) THEN
                tstep = vacdst
                sig0 = 1.E-15
              ELSE
                IF (( compute_tstep )) THEN
                  total_de = demfp/sig
                  fedep = total_de
                  ekef = eke - fedep
                  IF (( ekef .LE. E_array(1,medium) )) THEN
                    tstep = vacdst
                  ELSE
                    elkef = Log(ekef)
                    Lelkef=eke1(MEDIUM)*elkef+eke0(MEDIUM)
                    IF (( lelkef .EQ. lelke )) THEN
                      fedep = 1 - ekef/eke
                      elktmp = 0.5*(elke+elkef+0.25*fedep*fedep*(1+fedep
     *                *(1+0.875*fedep)))
                      lelktmp = lelke
                      IF ((lelec .LT. 0)) THEN
                        dedxmid=ededx1(Lelktmp,MEDIUM)*elktmp+ededx0(Lel
     *                  ktmp,MEDIUM)
                        dedxmid = 1/dedxmid
                        aux = ededx1(lelktmp,medium)*dedxmid
                      ELSE
                        dedxmid=pdedx1(Lelktmp,MEDIUM)*elktmp+pdedx0(Lel
     *                  ktmp,MEDIUM)
                        dedxmid = 1/dedxmid
                        aux = pdedx1(lelktmp,medium)*dedxmid
                      END IF
                      aux = aux*(1+2*aux)*(fedep/(2-fedep))**2/6
                      tstep = fedep*eke*dedxmid*(1+aux)
                    ELSE
                      ekei = E_array(lelke,medium)
                      elkei = (lelke - eke0(medium))/eke1(medium)
                      fedep = 1 - ekei/eke
                      elktmp = 0.5*(elke+elkei+0.25*fedep*fedep*(1+fedep
     *                *(1+0.875*fedep)))
                      lelktmp = lelke
                      IF ((lelec .LT. 0)) THEN
                        dedxmid=ededx1(Lelktmp,MEDIUM)*elktmp+ededx0(Lel
     *                  ktmp,MEDIUM)
                        dedxmid = 1/dedxmid
                        aux = ededx1(lelktmp,medium)*dedxmid
                      ELSE
                        dedxmid=pdedx1(Lelktmp,MEDIUM)*elktmp+pdedx0(Lel
     *                  ktmp,MEDIUM)
                        dedxmid = 1/dedxmid
                        aux = pdedx1(lelktmp,medium)*dedxmid
                      END IF
                      aux = aux*(1+2*aux)*(fedep/(2-fedep))**2/6
                      tuss = fedep*eke*dedxmid*(1+aux)
                      ekei = E_array(lelkef+1,medium)
                      elkei = (lelkef + 1 - eke0(medium))/eke1(medium)
                      fedep = 1 - ekef/ekei
                      elktmp = 0.5*(elkei+elkef+0.25*fedep*fedep*(1+fede
     *                p*(1+0.875*fedep)))
                      lelktmp = lelkef
                      IF ((lelec .LT. 0)) THEN
                        dedxmid=ededx1(Lelktmp,MEDIUM)*elktmp+ededx0(Lel
     *                  ktmp,MEDIUM)
                        dedxmid = 1/dedxmid
                        aux = ededx1(lelktmp,medium)*dedxmid
                      ELSE
                        dedxmid=pdedx1(Lelktmp,MEDIUM)*elktmp+pdedx0(Lel
     *                  ktmp,MEDIUM)
                        dedxmid = 1/dedxmid
                        aux = pdedx1(lelktmp,medium)*dedxmid
                      END IF
                      aux = aux*(1+2*aux)*(fedep/(2-fedep))**2/6
                      tstep = fedep*ekei*dedxmid*(1+aux)
                      tstep=tstep+tuss+ range_ep(qel,lelke,medium)-range
     *                _ep(qel,lelkef+1,medium)
                    END IF
                  END IF
                  total_tstep = tstep
                  compute_tstep = .false.
                END IF
                tstep = total_tstep/rhof
              END IF
              IF ((lelec .LT. 0)) THEN
                dedx0=ededx1(Lelke,MEDIUM)*elke+ededx0(Lelke,MEDIUM)
              ELSE
                dedx0=pdedx1(Lelke,MEDIUM)*elke+pdedx0(Lelke,MEDIUM)
              END IF
              dedx = rhof*dedx0
              tmxs=tmxs1(Lelke,MEDIUM)*elke+tmxs0(Lelke,MEDIUM)
              tmxs = tmxs/rhof
              ekei = E_array(lelke,medium)
              elkei = (lelke - eke0(medium))/eke1(medium)
              fedep = 1 - ekei/eke
              elktmp = 0.5*(elke+elkei+0.25*fedep*fedep*(1+fedep*(1+0.87
     *        5*fedep)))
              lelktmp = lelke
              IF ((lelec .LT. 0)) THEN
                dedxmid=ededx1(Lelktmp,MEDIUM)*elktmp+ededx0(Lelktmp,MED
     *          IUM)
                dedxmid = 1/dedxmid
                aux = ededx1(lelktmp,medium)*dedxmid
              ELSE
                dedxmid=pdedx1(Lelktmp,MEDIUM)*elktmp+pdedx0(Lelktmp,MED
     *          IUM)
                dedxmid = 1/dedxmid
                aux = pdedx1(lelktmp,medium)*dedxmid
              END IF
              aux = aux*(1+2*aux)*(fedep/(2-fedep))**2/6
              range = fedep*eke*dedxmid*(1+aux)
              range = (range + range_ep(qel,lelke,medium))/rhof
              random_tustep = .false.
              IF ((random_tustep)) THEN
                IF((rng_seed .GT. 128))call ranmar_get
                rnnotu = rng_array(rng_seed)*twom24
                rng_seed = rng_seed + 1
                tmxs = rnnotu*min(tmxs,SMAXIR)
              ELSE
                tmxs = min(tmxs,SMAXIR)
              END IF
              tustep = min(tstep,tmxs,range)
              CALL HOWNEAR(tperp,X(NP),Y(NP),Z(NP),IR(NP))
              dnear(np) = tperp
              IF (( i_do_rr .EQ. 1 .AND. e(np) .LT. e_max_rr .AND. (irl.
     *        EQ.irmax+1.OR..NOT.howfarless))) THEN
                IF ((tperp .GE. range)) THEN
                  idisc = 50 + 49*iq(np)
                  go to 15180
                END IF
              END IF
              IF (( IREJECT .EQ. 1 .AND. MED(IR(NP)) .NE. 0 .AND. E(NP)
     *        .LT. ESAVE_GLOBAL .AND. DNEAR(NP) .GE. range-RANGE_ECUTRR(
     *        MED(IR(NP)))*(RHO(MED(IR(NP)))/RHOR(IR(NP))) .AND. (IR(NP)
     *        .EQ.irmax+1 .OR. .NOT.howfarless) )) THEN
                IF ((LELEC .EQ. -1)) THEN
                  IDISC=1
                ELSE
                  IDISC=99
                END IF
                GOTO 15180
              END IF
              blccl = rhof*blcc(medium)
              xccl = rhof*xcc(medium)
              p2 = eke*(eke+rmt2)
              beta2 = p2/(p2 + rmsq)
              IF (( spin_effects )) THEN
                IF ((lelec .LT. 0)) THEN
                  etap=etae_ms1(Lelke,MEDIUM)*elke+etae_ms0(Lelke,MEDIUM
     *            )
                ELSE
                  etap=etap_ms1(Lelke,MEDIUM)*elke+etap_ms0(Lelke,MEDIUM
     *            )
                END IF
                ms_corr=blcce1(Lelke,MEDIUM)*elke+blcce0(Lelke,MEDIUM)
                blccl = blccl/etap/(1+0.25*etap*xccl/blccl/p2)*ms_corr
              END IF
              ssmfp=beta2/blccl
              skindepth = skindepth_for_bca*ssmfp
              tustep = min(tustep,max(tperp,skindepth))
              count_all_steps = count_all_steps + 1
              is_ch_step = .false.
              IF (((tustep .LE. tperp) .AND. ((.NOT.exact_bca) .OR. (tus
     *        tep .GT. skindepth)))) THEN
                callhowfar = .false.
                domultiple = .false.
                dosingle = .false.
                callmsdist = .true.
                tuss = range - range_ep(qel,lelke,medium)/rhof
                IF (( tuss .GE. tustep )) THEN
                  IF (( lelec .LT. 0 )) THEN
                    dedxmid=ededx1(Lelke,MEDIUM)*elke+ededx0(Lelke,MEDIU
     *              M)
                    aux = ededx1(lelke,medium)/dedxmid
                  ELSE
                    dedxmid=pdedx1(Lelke,MEDIUM)*elke+pdedx0(Lelke,MEDIU
     *              M)
                    aux = pdedx1(lelke,medium)/dedxmid
                  END IF
                  de = dedxmid*tustep*rhof
                  fedep = de/eke
                  de = de*(1-0.5*fedep*aux*(1-0.333333*fedep*(aux-1- 0.2
     *            5*fedep*(2-aux*(4-aux)))))
                ELSE
                  lelktmp = lelke
                  tuss = (range - tustep)*rhof
                  IF (( tuss .LE. 0 )) THEN
                    de = eke - TE(medium)*0.99
                  ELSE
15211               IF(tuss.GE.range_ep(qel,lelktmp,medium))GO TO 15212
                      lelktmp = lelktmp - 1
                    GO TO 15211
15212               CONTINUE
                    elktmp = (lelktmp+1-eke0(medium))/eke1(medium)
                    eketmp = E_array(lelktmp+1,medium)
                    tuss = (range_ep(qel,lelktmp+1,medium) - tuss)/rhof
                    IF (( lelec .LT. 0 )) THEN
                      dedxmid=ededx1(Lelktmp,MEDIUM)*elktmp+ededx0(Lelkt
     *                mp,MEDIUM)
                      aux = ededx1(lelktmp,medium)/dedxmid
                    ELSE
                      dedxmid=pdedx1(Lelktmp,MEDIUM)*elktmp+pdedx0(Lelkt
     *                mp,MEDIUM)
                      aux = pdedx1(lelktmp,medium)/dedxmid
                    END IF
                    de = dedxmid*tuss*rhof
                    fedep = de/eketmp
                    de = de*(1-0.5*fedep*aux*(1-0.333333*fedep*(aux-1- 0
     *              .25*fedep*(2-aux*(4-aux)))))
                    de = de + eke - eketmp
                  END IF
                END IF
                tvstep = tustep
                is_ch_step = .true.
                IF ((transport_algorithm .EQ. 0)) THEN
                  call msdist_pII (  eke,de,tustep,rhof,medium,qel,spin_
     *            effects, u(np),v(np),w(np),x(np),y(np),z(np),  uscat,v
     *            scat,wscat,xtrans,ytrans,ztrans,ustep )
                ELSE
                  call msdist_pI (  eke,de,tustep,rhof,medium,qel,spin_e
     *            ffects, u(np),v(np),w(np),x(np),y(np),z(np),  uscat,vs
     *            cat,wscat,xtrans,ytrans,ztrans,ustep )
                END IF
              ELSE
                callmsdist = .false.
                IF ((exact_bca)) THEN
                  domultiple = .false.
                  IF((rng_seed .GT. 128))call ranmar_get
                  rnnoss = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  IF (( rnnoss .LT. 1.e-30 )) THEN
                    rnnoss = 1.e-30
                  END IF
                  lambda = - Log(1 - rnnoss)
                  lambda_max = 0.5*blccl*rm/dedx*(eke/rm+1)**3
                  IF (( lambda .GE. 0 .AND. lambda_max .GT. 0 )) THEN
                    IF (( lambda .LT. lambda_max )) THEN
                      tuss=lambda*ssmfp*(1-0.5*lambda/lambda_max)
                    ELSE
                      tuss = 0.5 * lambda * ssmfp
                    END IF
                    IF ((tuss .LT. tustep)) THEN
                      tustep = tuss
                      dosingle = .true.
                    ELSE
                      dosingle = .false.
                    END IF
                  ELSE
                    write(i_log,'(/a)') '***************** Warning: '
                    write(i_log,*) ' lambda > lambda_max: ', lambda,lamb
     *              da_max,' eke dedx: ',eke,dedx, ' ir medium blcc: ',i
     *              r(np),medium,blcc(medium), ' position = ',x(np),y(np
     *              ),z(np)
                    dosingle = .false.
                    np=np-1
                    return
                  END IF
                  ustep = tustep
                ELSE
                  dosingle = .false.
                  domultiple = .true.
                  ekems = eke - 0.5*tustep*dedx
                  p2 = ekems*(ekems+rmt2)
                  beta2 = p2/(p2 + rmsq)
                  chia2 = xccl/(4*blccl*p2)
                  xi = 0.5*xccl/p2/beta2*tustep
                  IF (( spin_effects )) THEN
                    elkems = Log(ekems)
                    Lelkems=eke1(MEDIUM)*elkems+eke0(MEDIUM)
                    IF ((lelec .LT. 0)) THEN
                      etap=etae_ms1(Lelkems,MEDIUM)*elkems+etae_ms0(Lelk
     *                ems,MEDIUM)
                      xi_corr=q1ce_ms1(Lelkems,MEDIUM)*elkems+q1ce_ms0(L
     *                elkems,MEDIUM)
                    ELSE
                      etap=etap_ms1(Lelkems,MEDIUM)*elkems+etap_ms0(Lelk
     *                ems,MEDIUM)
                      xi_corr=q1cp_ms1(Lelkems,MEDIUM)*elkems+q1cp_ms0(L
     *                elkems,MEDIUM)
                    END IF
                    chia2 = chia2*etap
                    xi = xi*xi_corr
                    ms_corr=blcce1(Lelkems,MEDIUM)*elkems+blcce0(Lelkems
     *              ,MEDIUM)
                    blccl = blccl*ms_corr
                  ELSE
                    xi_corr = 1
                    etap = 1
                  END IF
                  xi = xi*(Log(1+1./chia2)-1/(1+chia2))
                  IF (( xi .LT. 0.1 )) THEN
                    ustep = tustep*(1 - xi*(0.5 - xi*0.166667))
                  ELSE
                    ustep = tustep*(1 - Exp(-xi))/xi
                  END IF
                END IF
                IF ((ustep .LT. tperp)) THEN
                  callhowfar = .false.
                ELSE
                  callhowfar = .true.
                END IF
              END IF
            END IF
            irold = ir(np)
            irnew = ir(np)
            idisc = 0
            ustep0 = ustep
            IF ((callhowfar .OR. wt(np) .LE. 0)) THEN
              call howfar
            END IF
            IF ((idisc .GT. 0)) THEN
              go to 15180
            END IF
            IF ((ustep .LE. 0)) THEN
              IF ((ustep .LT. -1e-4)) THEN
                ierust = ierust + 1
                WRITE(6,15220)ierust,ustep,dedx,e(np)-prm, ir(np),irnew,
     *          irold,x(np),y(np),z(np)
15220           FORMAT(i4,' Negative ustep = ',e12.5,' dedx=',F8.4,' ke=
     *',F8.4, ' ir,irnew,irold =',3i4,' x,y,z =',4e10.3)
                IF ((ierust .GT. 1000)) THEN
                  WRITE(6,15230)
15230             FORMAT(////' Called exit---too many ustep errors'///)
                  call exit(1)
                END IF
              END IF
              ustep = 0
            END IF
            IF ((ustep .EQ. 0 .OR. medium .EQ. 0)) THEN
              IF ((ustep .NE. 0)) THEN
                IF (.false.) THEN
                  edep = pzero
                ELSE
                  vstep = ustep
                  tvstep = vstep
                  edep = pzero
                  e_range = vacdst
                  IARG=0
                  IF ((IAUSFL(IARG+1).NE.0)) THEN
                    CALL AUSGAB(IARG)
                  END IF
                  IF((IARG.LT.0))RETURN
                  x(np) = x(np) + u(np)*vstep
                  y(np) = y(np) + v(np)*vstep
                  z(np) = z(np) + w(np)*vstep
                  dnear(np) = dnear(np) - vstep
                END IF
              END IF
              IF ((irnew .NE. irold)) THEN
                ir(np) = irnew
                irl = irnew
                medium = med(irl)
              END IF
              IF ((ustep .NE. 0)) THEN
                IARG=5
                IF ((IAUSFL(IARG+1).NE.0)) THEN
                  CALL AUSGAB(IARG)
                END IF
                IF((IARG.LT.0))RETURN
              END IF
              IF ((eie .LE. ECUT)) THEN
                go to 15170
              END IF
              IF ((ustep .NE. 0 .AND. idisc .LT. 0)) THEN
                go to 15180
              END IF
              GO TO 15191
            END IF
            vstep = ustep
            IF ((callhowfar)) THEN
              IF ((exact_bca)) THEN
                tvstep = vstep
                IF ((tvstep .NE. tustep)) THEN
                  dosingle = .false.
                END IF
              ELSE
                IF (( vstep .LT. ustep0 )) THEN
                  ekems = eke - 0.5*tustep*vstep/ustep0*dedx
                  p2 = ekems*(ekems+rmt2)
                  beta2 = p2/(p2 + rmsq)
                  chia2 = xccl/(4*blccl*p2)
                  xi = 0.5*xccl/p2/beta2*vstep
                  IF (( spin_effects )) THEN
                    elkems = Log(ekems)
                    Lelkems=eke1(MEDIUM)*elkems+eke0(MEDIUM)
                    IF ((lelec .LT. 0)) THEN
                      etap=etae_ms1(Lelkems,MEDIUM)*elkems+etae_ms0(Lelk
     *                ems,MEDIUM)
                      xi_corr=q1ce_ms1(Lelkems,MEDIUM)*elkems+q1ce_ms0(L
     *                elkems,MEDIUM)
                    ELSE
                      etap=etap_ms1(Lelkems,MEDIUM)*elkems+etap_ms0(Lelk
     *                ems,MEDIUM)
                      xi_corr=q1cp_ms1(Lelkems,MEDIUM)*elkems+q1cp_ms0(L
     *                elkems,MEDIUM)
                    END IF
                    chia2 = chia2*etap
                    xi = xi*xi_corr
                    ms_corr=blcce1(Lelkems,MEDIUM)*elkems+blcce0(Lelkems
     *              ,MEDIUM)
                    blccl = blccl*ms_corr
                  ELSE
                    xi_corr = 1
                    etap = 1
                  END IF
                  xi = xi*(Log(1+1./chia2)-1/(1+chia2))
                  IF (( xi .LT. 0.1 )) THEN
                    tvstep = vstep*(1 + xi*(0.5 + xi*0.333333))
                  ELSE
                    IF (( xi .LT. 0.999999 )) THEN
                      tvstep = -vstep*Log(1 - xi)/xi
                    ELSE
                      write(i_log,*) ' Stoped in SET-TVSTEP because xi >
     * 1! '
                      write(i_log,*) ' Medium: ',medium
                      write(i_log,*) ' Initial energy: ',eke
                      write(i_log,*) ' Average step energy: ',ekems
                      write(i_log,*) ' tustep: ',tustep
                      write(i_log,*) ' ustep0: ',ustep0
                      write(i_log,*) ' vstep:  ',vstep
                      write(i_log,*) ' ==> xi = ',xi
                      write(i_log,'(/a)') '***************** Error: '
                      write(i_log,*) 'This is a fatal error condition'
                      write(i_log,'(/a)') '***************** Quiting now
     *.'
                      call exit(1)
                    END IF
                  END IF
                ELSE
                  tvstep = tustep
                END IF
              END IF
              tuss = range - range_ep(qel,lelke,medium)/rhof
              IF (( tuss .GE. tvstep )) THEN
                IF (( lelec .LT. 0 )) THEN
                  dedxmid=ededx1(Lelke,MEDIUM)*elke+ededx0(Lelke,MEDIUM)
                  aux = ededx1(lelke,medium)/dedxmid
                ELSE
                  dedxmid=pdedx1(Lelke,MEDIUM)*elke+pdedx0(Lelke,MEDIUM)
                  aux = pdedx1(lelke,medium)/dedxmid
                END IF
                de = dedxmid*tvstep*rhof
                fedep = de/eke
                de = de*(1-0.5*fedep*aux*(1-0.333333*fedep*(aux-1- 0.25*
     *          fedep*(2-aux*(4-aux)))))
              ELSE
                lelktmp = lelke
                tuss = (range - tvstep)*rhof
                IF (( tuss .LE. 0 )) THEN
                  de = eke - TE(medium)*0.99
                ELSE
15241             IF(tuss.GE.range_ep(qel,lelktmp,medium))GO TO 15242
                    lelktmp = lelktmp - 1
                  GO TO 15241
15242             CONTINUE
                  elktmp = (lelktmp+1-eke0(medium))/eke1(medium)
                  eketmp = E_array(lelktmp+1,medium)
                  tuss = (range_ep(qel,lelktmp+1,medium) - tuss)/rhof
                  IF (( lelec .LT. 0 )) THEN
                    dedxmid=ededx1(Lelktmp,MEDIUM)*elktmp+ededx0(Lelktmp
     *              ,MEDIUM)
                    aux = ededx1(lelktmp,medium)/dedxmid
                  ELSE
                    dedxmid=pdedx1(Lelktmp,MEDIUM)*elktmp+pdedx0(Lelktmp
     *              ,MEDIUM)
                    aux = pdedx1(lelktmp,medium)/dedxmid
                  END IF
                  de = dedxmid*tuss*rhof
                  fedep = de/eketmp
                  de = de*(1-0.5*fedep*aux*(1-0.333333*fedep*(aux-1- 0.2
     *            5*fedep*(2-aux*(4-aux)))))
                  de = de + eke - eketmp
                END IF
              END IF
            ELSE
              tvstep = tustep
              IF (( .NOT.callmsdist )) THEN
                tuss = range - range_ep(qel,lelke,medium)/rhof
                IF (( tuss .GE. tvstep )) THEN
                  IF (( lelec .LT. 0 )) THEN
                    dedxmid=ededx1(Lelke,MEDIUM)*elke+ededx0(Lelke,MEDIU
     *              M)
                    aux = ededx1(lelke,medium)/dedxmid
                  ELSE
                    dedxmid=pdedx1(Lelke,MEDIUM)*elke+pdedx0(Lelke,MEDIU
     *              M)
                    aux = pdedx1(lelke,medium)/dedxmid
                  END IF
                  de = dedxmid*tvstep*rhof
                  fedep = de/eke
                  de = de*(1-0.5*fedep*aux*(1-0.333333*fedep*(aux-1- 0.2
     *            5*fedep*(2-aux*(4-aux)))))
                ELSE
                  lelktmp = lelke
                  tuss = (range - tvstep)*rhof
                  IF (( tuss .LE. 0 )) THEN
                    de = eke - TE(medium)*0.99
                  ELSE
15251               IF(tuss.GE.range_ep(qel,lelktmp,medium))GO TO 15252
                      lelktmp = lelktmp - 1
                    GO TO 15251
15252               CONTINUE
                    elktmp = (lelktmp+1-eke0(medium))/eke1(medium)
                    eketmp = E_array(lelktmp+1,medium)
                    tuss = (range_ep(qel,lelktmp+1,medium) - tuss)/rhof
                    IF (( lelec .LT. 0 )) THEN
                      dedxmid=ededx1(Lelktmp,MEDIUM)*elktmp+ededx0(Lelkt
     *                mp,MEDIUM)
                      aux = ededx1(lelktmp,medium)/dedxmid
                    ELSE
                      dedxmid=pdedx1(Lelktmp,MEDIUM)*elktmp+pdedx0(Lelkt
     *                mp,MEDIUM)
                      aux = pdedx1(lelktmp,medium)/dedxmid
                    END IF
                    de = dedxmid*tuss*rhof
                    fedep = de/eketmp
                    de = de*(1-0.5*fedep*aux*(1-0.333333*fedep*(aux-1- 0
     *              .25*fedep*(2-aux*(4-aux)))))
                    de = de + eke - eketmp
                  END IF
                END IF
              END IF
            END IF
            save_de = de
            edep = de
            ekef = eke - de
            eold = eie
            enew = eold - de
            IF (( .NOT.callmsdist )) THEN
              IF (( domultiple )) THEN
                lambda = blccl*tvstep/beta2/etap/(1+chia2)
                xi = xi/xi_corr
                findindex = .true.
                spin_index = .true.
                call mscat(lambda,chia2,xi,elkems,beta2,qel,medium, spin
     *          _effects,findindex,spin_index, costhe,sinthe)
              ELSE
                IF ((dosingle)) THEN
                  ekems = Max(ekef,ECUT-rm)
                  p2 = ekems*(ekems + rmt2)
                  beta2 = p2/(p2 + rmsq)
                  chia2 = xcc(medium)/(4*blcc(medium)*p2)
                  IF (( spin_effects )) THEN
                    elkems = Log(ekems)
                    Lelkems=eke1(MEDIUM)*elkems+eke0(MEDIUM)
                    IF ((lelec .LT. 0)) THEN
                      etap=etae_ms1(Lelkems,MEDIUM)*elkems+etae_ms0(Lelk
     *                ems,MEDIUM)
                    ELSE
                      etap=etap_ms1(Lelkems,MEDIUM)*elkems+etap_ms0(Lelk
     *                ems,MEDIUM)
                    END IF
                    chia2 = chia2*etap
                  END IF
                  call sscat(chia2,elkems,beta2,qel,medium, spin_effects
     *            ,costhe,sinthe)
                ELSE
                  theta = 0
                  sinthe = 0
                  costhe = 1
                END IF
              END IF
            END IF
            e_range = range
            IF (( callmsdist )) THEN
              u_final = uscat
              v_final = vscat
              w_final = wscat
              x_final = xtrans
              y_final = ytrans
              z_final = ztrans
            ELSE
              IF (.NOT.(.false.)) THEN
                x_final = x(np) + u(np)*vstep
                y_final = y(np) + v(np)*vstep
                z_final = z(np) + w(np)*vstep
              END IF
              IF (( domultiple .OR. dosingle )) THEN
                u_tmp = u(np)
                v_tmp = v(np)
                w_tmp = w(np)
                call uphi(2,1)
                u_final = u(np)
                v_final = v(np)
                w_final = w(np)
                u(np) = u_tmp
                v(np) = v_tmp
                w(np) = w_tmp
              ELSE
                u_final = u(np)
                v_final = v(np)
                w_final = w(np)
              END IF
            END IF
            IARG=0
            IF ((IAUSFL(IARG+1).NE.0)) THEN
              CALL AUSGAB(IARG)
            END IF
            IF((IARG.LT.0))RETURN
            x(np) = x_final
            y(np) = y_final
            z(np) = z_final
            u(np) = u_final
            v(np) = v_final
            w(np) = w_final
            dnear(np) = dnear(np) - vstep
            irold = ir(np)
            peie = peie - edep
            eie = peie
            e(np) = peie
            IF (( irnew .EQ. irl .AND. eie .LE. ECUT)) THEN
              go to 15170
            END IF
            medold = medium
            IF ((medium .NE. 0)) THEN
              ekeold = eke
              eke = eie - rm
              elke = log(eke)
              Lelke=eke1(MEDIUM)*elke+eke0(MEDIUM)
            END IF
            IF ((irnew .NE. irold)) THEN
              ir(np) = irnew
              irl = irnew
              medium = med(irl)
            END IF
            IARG=5
            IF ((IAUSFL(IARG+1).NE.0)) THEN
              CALL AUSGAB(IARG)
            END IF
            IF((IARG.LT.0))RETURN
            IF ((eie .LE. ECUT)) THEN
              go to 15170
            END IF
            IF ((idisc .LT. 0)) THEN
              go to 15180
            END IF
            IF((medium .NE. medold))GO TO 15191
            demfp = demfp - save_de*sig
            total_de = total_de - save_de
            total_tstep = total_tstep - tvstep*rhof
            IF (( total_tstep .LT. 1e-9 )) THEN
              demfp = 0
            END IF
            IF(((demfp .LT. 1.E-5)))GO TO15202
          GO TO 15201
15202     CONTINUE
          IF ((lelec .LT. 0)) THEN
            sigf=esig1(Lelke,MEDIUM)*elke+esig0(Lelke,MEDIUM)
            dedx0=ededx1(Lelke,MEDIUM)*elke+ededx0(Lelke,MEDIUM)
            sigf = sigf/dedx0
          ELSE
            sigf=psig1(Lelke,MEDIUM)*elke+psig0(Lelke,MEDIUM)
            dedx0=pdedx1(Lelke,MEDIUM)*elke+pdedx0(Lelke,MEDIUM)
            sigf = sigf/dedx0
          END IF
          sigratio = sigf/sig0
          IF((rng_seed .GT. 128))call ranmar_get
          rfict = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF(((rfict .LE. sigratio)))GO TO15192
        GO TO 15191
15192   CONTINUE
        IF ((lelec .LT. 0)) THEN
          ebr1=ebr11(Lelke,MEDIUM)*elke+ebr10(Lelke,MEDIUM)
          IF((rng_seed .GT. 128))call ranmar_get
          rnno24 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF ((rnno24 .LE. ebr1)) THEN
            go to 15260
          ELSE
            IF ((e(np) .LE. thmoll(medium) .AND. eii_flag .EQ. 0)) THEN
              IF ((ebr1 .LE. 0)) THEN
                go to 15160
              END IF
              go to 15260
            END IF
            IARG=8
            IF ((IAUSFL(IARG+1).NE.0)) THEN
              CALL AUSGAB(IARG)
            END IF
            IF((IARG.LT.0))RETURN
            call moller
            IARG=9
            IF ((IAUSFL(IARG+1).NE.0)) THEN
              CALL AUSGAB(IARG)
            END IF
            IF((IARG.LT.0))RETURN
            IF((iq(np) .EQ. 0))return
          END IF
          go to 15160
        END IF
        pbr1=pbr11(Lelke,MEDIUM)*elke+pbr10(Lelke,MEDIUM)
        IF((rng_seed .GT. 128))call ranmar_get
        rnno25 = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        IF ((rnno25 .LT. pbr1)) THEN
          go to 15260
        END IF
        pbr2=pbr21(Lelke,MEDIUM)*elke+pbr20(Lelke,MEDIUM)
        IF ((rnno25 .LT. pbr2)) THEN
          IARG=10
          IF ((IAUSFL(IARG+1).NE.0)) THEN
            CALL AUSGAB(IARG)
          END IF
          IF((IARG.LT.0))RETURN
          call bhabha
          IARG=11
          IF ((IAUSFL(IARG+1).NE.0)) THEN
            CALL AUSGAB(IARG)
          END IF
          IF((IARG.LT.0))RETURN
          IF((iq(np) .EQ. 0))return
        ELSE
          IARG=12
          IF ((IAUSFL(IARG+1).NE.0)) THEN
            CALL AUSGAB(IARG)
          END IF
          IF((IARG.LT.0))RETURN
          call annih
          IARG=13
          IF ((IAUSFL(IARG+1).NE.0)) THEN
            CALL AUSGAB(IARG)
          END IF
          IF((IARG.LT.0))RETURN
          GO TO 15162
        END IF
      GO TO 15161
15162 CONTINUE
      return
15260 IARG=6
      IF ((IAUSFL(IARG+1).NE.0)) THEN
        CALL AUSGAB(IARG)
      END IF
      IF((IARG.LT.0))RETURN
      call brems
      IARG=7
      IF ((IAUSFL(IARG+1).NE.0)) THEN
        CALL AUSGAB(IARG)
      END IF
      IF((IARG.LT.0))RETURN
      IF ((iq(np) .EQ. 0)) THEN
        return
      ELSE
        go to 15160
      END IF
15170 IF (( medium .GT. 0 )) THEN
        IF ((eie .GT. ae(medium))) THEN
          idr = 1
          IF ((lelec .LT. 0)) THEN
            edep = e(np) - prm
          ELSE
            EDEP=PEIE-PRM
          END IF
        ELSE
          idr = 2
          edep = e(np) - prm
        END IF
      ELSE
        idr = 1
        edep = e(np) - prm
      END IF
      IARG=idr
      IF ((IAUSFL(IARG+1).NE.0)) THEN
        CALL AUSGAB(IARG)
      END IF
      IF((IARG.LT.0))RETURN
15270 CONTINUE
      IF ((lelec .GT. 0)) THEN
        IF ((edep .LT. peie)) THEN
          IARG=28
          IF ((IAUSFL(IARG+1).NE.0)) THEN
            CALL AUSGAB(IARG)
          END IF
          IF((IARG.LT.0))RETURN
          call annih_at_rest
          IARG=14
          IF ((IAUSFL(IARG+1).NE.0)) THEN
            CALL AUSGAB(IARG)
          END IF
          IF((IARG.LT.0))RETURN
          return
        END IF
      END IF
      np = np - 1
      ircode = 2
      return
15180 idisc = abs(idisc)
      IF (((lelec .LT. 0) .OR. (idisc .EQ. 99))) THEN
        edep = e(np) - prm
      ELSE
        edep = e(np) + prm
      END IF
      IARG=3
      IF ((IAUSFL(IARG+1).NE.0)) THEN
        CALL AUSGAB(IARG)
      END IF
      IF((IARG.LT.0))RETURN
      IF((idisc .EQ. 99))goto 15270
      np = np - 1
      ircode = 2
      return
      end
      SUBROUTINE HATCH
      implicit none
      character*512 toUpper
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/BOUNDS/ECUT,PCUT,VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/BREMPR/ DL1(8,7),DL2(8,7),DL3(8,7),DL4(8,7),DL5(8,7),DL6(8,
     *7), ALPHI(2,7),BPAR(2,7),DELPOS(2,7), WA(7,50),PZ(7,50),ZELEM(7,50
     *),RHOZ(7,50), PWR2I(50), DELCM(7),ZBRANG(7),LZBRANG(7),NNE(7), IBR
     *DST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(7,50,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/ELECIN/ esig_e(7),psig_e(7), esige_max, psige_max, range_ep
     *(0:1,500,7), E_array(500,7), etae_ms0(500,7),etae_ms1(500,7),etap_
     *ms0(500,7),etap_ms1(500,7),q1ce_ms0(500,7),q1ce_ms1(500,7),q1cp_ms
     *0(500,7),q1cp_ms1(500,7),q2ce_ms0(500,7),q2ce_ms1(500,7),q2cp_ms0(
     *500,7),q2cp_ms1(500,7),blcce0(500,7),blcce1(500,7), EKE0(7),EKE1(7
     *), XR0(7),TEFF0(7),BLCC(7),XCC(7), ESIG0(500,7),ESIG1(500,7),PSIG0
     *(500,7),PSIG1(500,7),EDEDX0(500,7),EDEDX1(500,7),PDEDX0(500,7),PDE
     *DX1(500,7),EBR10(500,7),EBR11(500,7),PBR10(500,7),PBR11(500,7),PBR
     *20(500,7),PBR21(500,7),TMXS0(500,7),TMXS1(500,7), expeke1(7), IUNR
     *ST(7),EPSTFL(7),IAPRIM(7), sig_ismonotone(0:1,7)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR( 2097154),MED( 2097154),IRAYLR,
     *IPHOTONUCR( 2097154)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/PHOTIN/ EBINDA(7), GE0(7),GE1(7), GMFP0(2000,7),GMFP1(2000,
     *7),GBR10(2000,7),GBR11(2000,7),GBR20(2000,7),GBR21(2000,7), RCO0(7
     *),RCO1(7), RSCT0(100,7),RSCT1(100,7), COHE0(2000,7),COHE1(2000,7),
     *  PHOTONUC0(2000,7),PHOTONUC1(2000,7), DPMFP, MPGEM(1,7), NGR(7)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/THRESH/RMT2,RMSQ, AP(7),AE(7),UP(7),UE(7),TE(7),THMOLL(7)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIIN/SINC0,SINC1,SIN0(1002),SIN1(1002)
      real*8 SINC0,SINC1,SIN0,SIN1
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      COMMON/USERPS/n_split
      integer*4 n_split
      COMMON/USERRR/ESAVE_GLOBAL,RANGE_ECUTRR(7),IREJECT
      real*8 ESAVE_GLOBAL,RANGE_ECUTRR
      integer*4 IREJECT
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common/ET_control/ SMAXIR,estepe,ximax,  skindepth_for_bca,transpo
     *rt_algorithm, bca_algorithm,exact_bca,spin_effects
      real*8 smaxir,  estepe,  ximax,      skindepth_for_bca
      integer*4 transport_algorithm, bca_algorithm
      logical exact_bca,  spin_effects
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/x_options/eadl_relax,  mcdf_pe_xsections
      logical eadl_relax, mcdf_pe_xsections
      common/egs_vr/ e_max_rr,  prob_RR,  nbr_split,  i_play_RR,      i_
     *survived_RR,
     *  n_RR_warning,                                        i_do_rr
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      COMMON/LBREMZ/CONST,DELC,EBREMZ,DELTAM,XLNZ
      real*4 CONST,DELC,EBREMZ,DELTAM,XLNZ
      COMMON/PMCONS/PIP,C,RME,HBAR,ECGS,EMKS,AN
      real*4 PIP,C,RME,HBAR,ECGS,EMKS,AN
      COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      real*4 RADDEG,FSC,ERGMEV,R0,RMP,RMPT2,RMPSQ,A22P9,A6680
      COMMON/EPSTAR/EPSTEN(150),EPSTD(150),WEPST(20), EPSTTL,NEPST,IEPST
     *,EPSTFLP, NELEPS,ZEPST(20),IAPRFL,IAPRIMP
      integer*4 ZEPST,NELEPS,IAPRFL,NEPST,IEPST,EPSTFLP,IAPRIMP
      CHARACTER EPSTTL*80
      real*4 EPSTEN,EPSTD,WEPST
      COMMON/MOLVAR/WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU, RLCP,EDEN,RH
     *OP,XCCP,BLCCP,TEFF0P,XR0P
      real*4 WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU,RLCP,EDEN,RHOP, XCCP
     *,BLCCP,TEFF0P,XR0P
      COMMON/LSPION/CBAR,X0,X1,SK,TOLN10,AFACT,SPC1,SPC2,IEV
      real*4 CBAR,X0,X1,SK,TOLN10,AFACT,SPC1,SPC2,IEV
      COMMON/PWLFIN/EPE,ZTHRE(8),ZEPE(8),NIPE,NALE
      real*4 EPE,ZTHRE,ZEPE
      integer*4 NIPE,NALE
      COMMON/RSLTS/NEL,AXE,BXE,AFE(500,8),BFE(500,8)
      real*4 AXE,BXE,AFE,BFE
      integer*4 NEL
      COMMON/SPCOMM/MEDTBL(24,73), NUMSTMED,STDATA(6,73)
      CHARACTER*4 MEDTBL
      integer*4 NUMSTMED
      real*4 STDATA
      COMMON/MIXDAT/NEP,LMED,PZP(50),ZELEMP(50),WAP(50),RHOZP(50), GASPP
     *,EZ,TPZ,IDSTRN(24)
      integer*4 NEP,LMED
      real*4 PZP,ZELEMP,WAP,RHOZP,GASPP,EZ,TPZ
      CHARACTER*4 IDSTRN
      COMMON/ADLEN/ALRAD(4),ALRADP(4),A1440,A183
      real*4 ALRAD,ALRADP,A1440,A183
      COMMON/MIMSD/BMIN
      real*4 BMIN
      COMMON/THRESHP/APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP,IUNRSTP
      real*4 APP,AEP,UPP,UEP,THBREMP,THMOLLP,TEP
      integer*4 IUNRSTP
      COMMON/BREMPRP/DLP1(6),DLP2(6),DLP3(6),DLP4(6),DLP5(6),DLP6(6), DE
     *LCMP,ALPHIP(2),BPARP(2),DELPOSP(2)
      real*4 dlP1,dlP2,dlP3,dlP4,dlP5,dlP6,delcmP,alphiP,bparP,delposP
      COMMON/ELEMTB/NET,ITBL(100),WATBL(100),RHOTBL(100),ASYMT(100)
      integer*4 NET
      real*4 ITBL,WATBL,RHOTBL
      CHARACTER*4 ASYMT
      COMMON/MEDINP/inpdensity_file(7),inpasym(7,50), inpstrn(24,7),pz4(
     *7,50), rhoz4(7,50),wa4(7,50),inpgasp(7)
      character*256 inpdensity_file
      CHARACTER*4 inpasym,inpstrn
      real*4 pz4,rhoz4,wa4,inpgasp
      real*4 XSIFP,WADUM,PZDUM,RHOZDUM,RLCDUM,ALKE,ALKEI
      integer*4 I01
      EXTERNAL ALKE,ALKEI,EFUNS
      CHARACTER*4 MEDTB1(24,20),MEDTB2(24,20),MEDTB3(24,20),MEDTB4(24,13
     *)
      EQUIVALENCE (MEDTBL(1,1),MEDTB1(1,1))
      EQUIVALENCE (MEDTBL(1,21),MEDTB2(1,1))
      EQUIVALENCE (MEDTBL(1,41),MEDTB3(1,1))
      EQUIVALENCE (MEDTBL(1,61),MEDTB4(1,1))
      real*4 STDAT1(6,20),STDAT2(6,20),STDAT3(6,20),STDAT4(6,13)
      EQUIVALENCE (STDATA(1,1),STDAT1(1,1))
      EQUIVALENCE (STDATA(1,21),STDAT2(1,1))
      EQUIVALENCE (STDATA(1,41),STDAT3(1,1))
      EQUIVALENCE (STDATA(1,61),STDAT4(1,1))
      CHARACTER*4 MBUF(72),MDLABL(8)
      real*8 ACD ,  ADEV ,  ASD ,  COST ,  CTHET ,  DEL ,  DFACT ,  DFAC
     *TI,  DUNITO,  DUNITR,  FNSSS ,  P ,  PZNORM,  RDEV ,  S2C2 ,  S2C2
     *MN,  S2C2MX,  SINT ,  SX ,  SXX ,  SXY ,   SY ,   WID ,  XS ,  XS0
     * ,  XS1 ,  XSI ,  WSS ,  YS ,  ZEROS(3)
      integer*4 I ,  I1ST ,  IB ,  ID ,  IE ,  IL ,  IM ,  IRAYL ,  IRN
     *,  ISTEST,  ISUB ,  ISS ,  IZ ,   IZZ ,  J ,  JR ,  LCTHET,  LMDL
     *,  LMDN ,  LTHETA,  MD ,  MXSINC,  NCMFP ,   NEKE ,   NGE ,   NGRI
     *M ,  NISUB ,  NLEKE ,    NM ,  NRANGE,    NRNA ,  NSEKE ,   NSGE ,
     *   NSINSS,  LOK(7)
      character*256 tmp_string
      integer*4 lnblnk1
      DATA MDLABL/' ','M','E','D','I','U','M','='/,LMDL/8/,LMDN/24/,DUNI
     *TO/1./
      DATA I1ST/1/,NSINSS/37/,MXSINC/1002/,ISTEST/0/,NRNA/1000/
      PIP=3.1415926536
      C=2.997925E+10
      HBAR=1.05450E-27
      ECGS=4.80298E-10
      EMKS=1.60210E-19
      AN=6.02252E+23
      RADDEG=180./PIP
      FSC = ECGS**2/(HBAR*C)
      ERGMEV = (1.E+6)*(EMKS*1.E+7)
      RME = PRM/C**2*ERGMEV
      RMP = PRM
      R0 = (ECGS**2)/(RME*C**2)
      RMPSQ = RMP*RMP
      A22P9 = RADDEG*SQRT(4.*PIP*AN)*ECGS**2/ERGMEV
      A6680 = 4.0*PIP*AN*(HBAR/(RME*C))**2*(0.885**2/(1.167*1.13))
      DATA AFACT/0.0/,SK/0.0/,X0/0.0/,X1/0.0/,CBAR/0.0/,IEV/0.0/
      DATA LMED/24/,NUMSTMED/73/
      DATA EPE/.01/,ZTHRE,ZEPE/16*0.0/,NIPE/20/,NALE/500/
      DATA BMIN/4.5/
      DATA ALRAD/5.31,4.79,4.74,4.71/,ALRADP/6.144,5.621,5.805,5.924/, A
     *1440/1194.0/,A183/184.15/
      DATA MEDTB1/ 'H','2','-','G','A','S',18*' ','H','2','-','L','I','Q
     *','U','I','D',15*' ','H','E','-','G','A','S',18*' ','L','I',22*' '
     *, 'B','E',22*' ','C','-','2','.','2','6','5',' ','G','/','C','M','
     **','*','3',9*' ','C','-','1','.','7','0',' ','G','/','C','M','*','
     **','3',10*' ', 'N','2','-','G','A','S',18*' ','O','2','-','G','A',
     *'S',18*' ','N','E','-','G','A','S',18*' ','N','A',22*' ', 'M','G',
     *22*' ','A','L',22*' ','S','I',22*' ','A','R','-','G','A','S',18*'
     *', 'K',23*' ','C','A',22*' ','T','I',22*' ','V',23*' ','M','N',22*
     *' ' /
      DATA MEDTB2/ 'F','E',22*' ','C','O',22*' ','N','I',22*' ','C','U',
     *22*' ','Z','N',22*' ', 'G','E',22*' ','S','E',22*' ','K','R','-','
     *G','A','S',18*' ','R','B',22*' ', 'M','O',22*' ','A','G',22*' ','C
     *','D',22*' ','I','N',22*' ','S','N',22*' ', 'X','E','-','G','A','S
     *',18*' ','C','S',22*' ','G','D',22*' ','T','A',22*' ', 'W',23*' ',
     *'P','T',22*' ' /
      DATA MEDTB3/ 'A','U',22*' ','H','G',22*' ','P','B',22*' ','R','N',
     *'-','G','A','S',18*' ', 'U',23*' ', 'A','I','R','-','G','A','S',17
     **' ','C','O','2','-','G','A','S',17*' ','P','O','L','Y','E','T','H
     *','Y','L','E','N','E',12*' ', 'P','O','L','Y','P','R','O','P','Y',
     *'L','E','N','E',11*' ','X','Y','L','E','N','E',18*' ','T','O','L',
     *'U','E','N','E',17*' ', 'N','Y','L','O','N',19*' ','V','I','N','Y'
     *,'L','T','O','L','U','E','N','E',12*' ','A','1','5','0','-','P','L
     *','A','S','T','I','C',12*' ', 'S','T','I','L','B','E','N','E',16*'
     * ','P','O','L','Y','S','T','Y','R','E','N','E',13*' ','A','N','T',
     *'H','R','A','C','E','N','E',14*' ', 'L','E','X','A','N',19*' ','L'
     *,'U','C','I','T','E',18*' ','H','2','O',21*' ' /
      DATA MEDTB4/ 'M','Y','L','A','R',19*' ', 'K','A','P','T','O','N',1
     *8*' ','L','I','F',21*' ','P','O','L','Y','V','I','N','Y','L','-','
     *C','L',12*' ', 'P','Y','R','E','X','-','G','L','A','S','S',13*' ',
     *'S','I','O','2',20*' ','C','A','F','2',20*' ', 'P','H','O','T','O'
     *,'E','M','U','L','S','I','O','N',11*' ','A','G','C','L',20*' ','N'
     *,'A','I',21*' ', 'L','I','I',21*' ','A','G','B','R',20*' ','C','S'
     *,'I',21*' ' /
      DATA STDAT1/ 0.03535,6.790,1.864,3.5,19.2,9.584, 0.09179,5.831,0.4
     *76,2.0,21.8,3.263, 0.0114,7.625,2.202,4.0,41.8,11.139, 0.3492,3.23
     *3,0.0966,2.0,40.0,3.122, 0.3518,3.034,-0.0089,2.0,63.7,2.785, 0.58
     *48,2.360,-0.0089,2.0,78.0,2.868, 0.7154,2.191,-0.0089,2.0,78.0,3.1
     *55, 0.2120,3.041,1.738,4.0,82.0,10.540, 0.2666,2.825,1.754,4.0,95.
     *0,10.700, 0.1202,3.357,2.073,4.5,137.0,11.904, 0.2204,3.103,0.4515
     *,2.8,149.0,5.053, 0.1714,3.223,0.2386,2.8,156.0,4.530, 0.3346,2.79
     *5,0.0966,2.5,166.0,4.239, 0.3755,2.720,0.0966,2.5,173.0,4.435, 0.1
     *902,2.982,1.764,4.5,188.0,11.948, 0.3041,2.674,0.2386,3.0,190.0,5.
     *642, 0.2177,2.874,0.1751,3.0,191.0,5.040, 0.1782,2.946,0.0485,3.0,
     *233.0,4.445, 0.1737,2.935,-0.0089,3.0,245.0,4.266, 0.1996,2.812,-0
     *.0089,3.0,272.0,4.270 /
      DATA STDAT2/ 0.2101,2.771,-0.0089,3.0,286.0,4.291, 0.2229,2.713,-0
     *.0089,3.0,297.0,4.260, 0.2504,2.619,-0.0089,3.0,311.0,4.312, 0.255
     *7,2.613,-0.0089,3.0,322.0,4.419, 0.3163,2.468,0.0485,3.0,330.0,4.6
     *91, 0.2809,2.647,0.2386,3.0,350.0,5.141, 0.2979,2.635,0.2386,3.0,3
     *48.0,5.321, 0.1519,3.030,1.716,4.8,352.0,12.512, 0.1450,3.078,0.45
     *15,3.5,363.0,6.478, 0.2228,2.824,0.1751,3.0,424.0,4.879, 0.3091,2.
     *563,-0.0089,3.0,470.0,5.063, 0.1853,2.819,0.0485,3.3,469.0,5.273,
     *0.2004,2.790,0.1751,3.3,487.0,5.517, 0.1898,2.839,0.2386,3.3,488.0
     *,5.534, 0.1329,3.020,1.563,5.0,482.0,12.728, 0.2214,2.784,0.4515,3
     *.5,488.0,6.914, 0.2068,2.686,0.0485,3.5,591.0,5.874, 0.1663,2.805,
     *0.1751,3.5,718.0,5.526, 0.1499,2.870,0.1751,3.5,727.0,5.406, 0.146
     *5,2.903,0.0966,3.5,790.0,5.473 /
      DATA STDAT3/ 0.1533,2.881,0.0966,3.5,790.0,5.575, 0.1824,2.798,0.2
     *386,3.5,800.0,5.961, 0.1861,2.814,0.2386,3.5,823.0,6.202, 0.1130,3
     *.023,1.537,5.3,794.0,13.284, 0.1362,3.034,0.2386,3.5,890.0,5.869,
     *0.2466,2.879,1.742,4.0,85.7,10.595, 0.1999,3.022,1.648,4.0,88.7,10
     *.239, 0.4875,2.544,0.1379,2.0,57.4,3.002, 0.2493,2.975,0.1537,2.3,
     *59.2,3.126, 0.2755,2.911,0.1695,2.3,61.8,3.270, 0.2830,2.890,0.172
     *2,2.3,62.5,3.303, 0.5345,2.439,0.1336,2.0,63.9,3.063, 0.3495,2.749
     *,0.1467,2.2,64.7,3.201, 0.5462,2.435,0.1329,2.0,65.1,3.110, 0.2989
     *,2.851,0.1731,2.3,67.7,3.367, 0.3670,2.724,0.1647,2.2,68.7,3.300,
     *0.5858,2.364,0.1146,2.0,69.5,3.151, 0.3865,2.664,0.1608,2.2,73.1,3
     *.321, 0.3996,2.606,0.1824,2.2,74.0,3.330, 0.2065,3.007,0.2400,2.5,
     *75.0,3.502 /
      DATA STDAT4/ 0.3124,2.782,0.1561,2.3,78.7,3.326, 0.4061,2.614,0.14
     *92,2.2,79.3,3.342, 0.1308,3.476,0.0171,2.5,94.0,3.167, 0.1873,2.96
     *2,0.1558,2.8,108.2,4.053, 0.2988,2.805,0.1479,2.5,134.0,3.971, 0.1
     *440,3.220,0.1385,2.8,139.2,4.003, 0.3750,2.592,0.0676,2.5,166.0,4.
     *065, 0.3416,2.496,0.1009,3.0,331.0,5.332, 0.1243,3.002,-0.0138,3.5
     *,398.4,5.344, 0.1560,2.926,0.1203,3.5,452.0,6.057, 0.1785,2.845,0.
     *0892,3.5,485.1,6.267, 0.1351,2.976,0.0358,3.5,487.2,5.616, 0.1796,
     *2.840,0.0395,3.5,553.1,6.281 /
      DATA NET/100/
      DATA ITBL/19.2,41.8,40.,63.7,76.0,78.0,82.0,95.0,115.,137., 149.,1
     *56.,166.,173.,173.,180.,174.,188.,190.,191.,216.,233.,245., 257.,2
     *72.,286.,297.,311.,322.,330.,334.,350.,347.,348.,357.,352., 363.,3
     *66.,379.,393.,417.,424.,428.,441.,449.,470.,470.,469.,488., 488.,4
     *87.,485.,491.,482.,488.,491.,501.,523.,535.,546.,560.,574., 580.,5
     *91.,614.,628.,650.,658.,674.,684.,694.,705.,718.,727.,736., 746.,7
     *57.,790.,790.,800.,810.,823.,823.,830.,825.,794.,827.,826., 841.,8
     *47.,878.,890.,902.,921.,934.,939.,952.,966.,980.,994./
      DATA WATBL/1.00797,4.0026,6.939,9.0122,10.811,12.01115,14.0067, 15
     *.9994,18.9984,20.183,22.9898,24.312,26.9815,28.088,30.9738, 32.064
     *,35.453,39.948,39.102,40.08,44.956,47.90,50.942,51.998, 54.9380,55
     *.847,58.9332,58.71,63.54,65.37,69.72,72.59,74.9216, 78.96,79.808,8
     *3.80,85.47,87.62,88.905,91.22,92.906,95.94,99.0, 101.07,102.905,10
     *6.4,107.87,112.4,114.82,118.69,121.75,127.60, 126.9044,131.30,132.
     *905,137.34,138.91, 140.12,140.907,144.24,147.,150.35,151.98,157.25
     *,158.924,162.50, 164.930,167.26,168.934,173.04,174.97,178.49,180.9
     *48,183.85, 186.2,190.2,192.2,195.08,196.987,200.59,204.37,207.19,2
     *08.980, 210.,210.,222.,223.,226.,227.,232.036,231.,238.03,237.,242
     *., 243.,247.,247.,248.,254.,253./
      DATA RHOTBL/0.0808,0.19,0.534,1.85,2.5,2.26,1.14,1.568,1.5,1.0, 0.
     *9712,1.74,2.702,2.4,1.82,2.07,2.2,1.65,0.86,1.55,3.02,4.54, 5.87,7
     *.14,7.3,7.86,8.71,8.90,8.9333,7.140,5.91,5.36,5.73,4.80, 4.2,3.4,1
     *.53,2.6,4.47,6.4,8.57,9.01,11.50,12.20,12.50,12.,10.5, 8.65,7.30,7
     *.31,6.684,6.24,4.93,2.7,1.873,3.5,6.15,6.90,6.769, 7.007, 1. ,7.54
     *,5.17,7.87,8.25,8.56,8.80,9.06,9.32,6.96,9.85, 11.40,16.60,19.30,2
     *0.53,22.48,22.42,21.45,19.30,14.19,11.85, 11.34,9.78,9.30, 1. ,4.,
     * 1. ,5., 1. ,11.0,15.37,18.90, 20.5,19.737,11.7,7.,1. , 1. , 1. ,
     *1. /
      DATA ASYMT/'H','HE','LI','BE','B','C','N','O','F','NE', 'NA','MG',
     *'AL','SI','P','S','CL','AR','K','CA','SC','TI', 'V','CR','MN','FE'
     *,'CO','NI','CU','ZN','GA','GE','AS','SE','BR', 'KR','RB','SR','Y',
     *'ZR','NB','MO','TC','RU','RH','PD','AG','CD', 'IN','SN','SB','TE',
     *'I','XE','CS','BA','LA','CE','PR','ND', 'PM','SM','EU','GD','TB','
     *DY','HO','ER','TM','YB','LU','HF','TA', 'W','RE','OS','IR','PT','A
     *U','HG','TL','PB','BI','PO','AT','RN', 'FR','RA','AC','TH','PA','U
     *','NP','PU','AM','CM','BK','CF','ES', 'FM'/
      DATA EPSTFLP/0/,IEPST/1/,IAPRIMP/1/,IAPRFL/0/
15280 FORMAT(1X,14I5)
15290 FORMAT(1X,1PE14.5,4E14.5)
15300 FORMAT(72A1)
      IF ((I1ST.NE.0)) THEN
        I1ST=0
        DO 15311 J=1, 2097154
          IF ((SMAXIR.LE.0.0)) THEN
            SMAXIR=1E10
          END IF
15311   CONTINUE
15312   CONTINUE
        NISUB=MXSINC-2
        FNSSS=NSINSS
        WID=PI5D2/FLOAT(NISUB)
        WSS=WID/(FNSSS-1.0)
        ZEROS(1)=0.
        ZEROS(2)=PI
        ZEROS(3)=TWOPI
        DO 15321 ISUB=1,MXSINC
          SX=0.
          SY=0.
          SXX=0.
          SXY=0.
          XS0=WID*FLOAT(ISUB-2)
          XS1=XS0+WID
          IZ=0
          DO 15331 IZZ=1,3
            IF (((XS0.LE.ZEROS(IZZ)).AND.(ZEROS(IZZ).LE.XS1))) THEN
              IZ=IZZ
              GO TO15332
            END IF
15331     CONTINUE
15332     CONTINUE
          IF ((IZ.EQ.0)) THEN
            XSI=XS0
          ELSE
            XSI=ZEROS(IZ)
          END IF
          DO 15341 ISS=1,NSINSS
            XS=WID*FLOAT(ISUB-2)+WSS*FLOAT(ISS-1)-XSI
            YS=SIN(XS+XSI)
            SX=SX+XS
            SY=SY+YS
            SXX=SXX+XS*XS
            SXY=SXY+XS*YS
15341     CONTINUE
15342     CONTINUE
          IF ((IZ.NE.0)) THEN
            SIN1(ISUB)=SXY/SXX
            SIN0(ISUB)=-SIN1(ISUB)*XSI
          ELSE
            DEL=FNSSS*SXX-SX*SX
            SIN1(ISUB)=(FNSSS*SXY-SY*SX)/DEL
            SIN0(ISUB)=(SY*SXX-SX*SXY)/DEL - SIN1(ISUB)*XSI
          END IF
15321   CONTINUE
15322   CONTINUE
        SINC0=2.0
        SINC1=1.0/WID
        IF ((ISTEST.NE.0)) THEN
          ADEV=0.
          RDEV=0.
          S2C2MN=10.
          S2C2MX=0.
          DO 15351 ISUB=1,NISUB
            DO 15361 ISS=1,NSINSS
              THETA=WID*FLOAT(ISUB-1)+WSS*FLOAT(ISS-1)
              CTHET=PI5D2-THETA
              SINTHE=sin(THETA)
              COSTHE=sin(CTHET)
              SINT=SIN(THETA)
              COST=COS(THETA)
              ASD=ABS(SINTHE-SINT)
              ACD=ABS(COSTHE-COST)
              ADEV=max(ADEV,ASD,ACD)
              IF((SINT.NE.0.0))RDEV=max(RDEV,ASD/ABS(SINT))
              IF((COST.NE.0.0))RDEV=max(RDEV,ACD/ABS(COST))
              S2C2=SINTHE**2+COSTHE**2
              S2C2MN=min(S2C2MN,S2C2)
              S2C2MX=max(S2C2MX,S2C2)
              IF ((ISUB.LT.11)) THEN
                write(i_log,'(1PE20.7,4E20.7)') THETA,SINTHE,SINT,COSTHE
     *          ,COST
              END IF
15361       CONTINUE
15362       CONTINUE
15351     CONTINUE
15352     CONTINUE
          write(i_log,'(a,2i5)') ' SINE TESTS,MXSINC,NSINSS=',MXSINC,NSI
     *    NSS
          write(i_log,'(a,1PE16.8,3e16.8)') ' ADEV,RDEV,S2C2(MN,MX) =',
     *    ADEV,RDEV,S2C2MN,S2C2MX
          ADEV=0.
          RDEV=0.
          S2C2MN=10.
          S2C2MX=0.
          DO 15371 IRN=1,NRNA
            IF((rng_seed .GT. 128))call ranmar_get
            THETA = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            THETA=THETA*PI5D2
            CTHET=PI5D2-THETA
            SINTHE=sin(THETA)
            COSTHE=sin(CTHET)
            SINT=SIN(THETA)
            COST=COS(THETA)
            ASD=ABS(SINTHE-SINT)
            ACD=ABS(COSTHE-COST)
            ADEV=max(ADEV,ASD,ACD)
            IF((SINT.NE.0.0))RDEV=max(RDEV,ASD/ABS(SINT))
            IF((COST.NE.0.0))RDEV=max(RDEV,ACD/ABS(COST))
            S2C2=SINTHE**2+COSTHE**2
            S2C2MN=min(S2C2MN,S2C2)
            S2C2MX=max(S2C2MX,S2C2)
15371     CONTINUE
15372     CONTINUE
          write(i_log,'(a,i7,a)') ' TEST AT ',NRNA,' RANDOM ANGLES IN (0
     *,5*PI/2)'
          write(i_log,'(1PE16.8,3E16.8)') ' ADEV,RDEV,S2C2(MN,MX) =', AD
     *    EV,RDEV,S2C2MN,S2C2MX
        END IF
        P=1.
        DO 15381 I=1,50
          PWR2I(I)=P
          P=P/2.
15381   CONTINUE
15382   CONTINUE
      END IF
      DO 15391 J=1,NMED
15400   CONTINUE
          DO 15401 I=1, 2097154
          IF ((IRAYLR.EQ.1.AND.MED(I).EQ.J)) THEN
            IRAYLM(J)=1
            GO TO 15402
          END IF
15401   CONTINUE
15402   CONTINUE
15391 CONTINUE
15392 CONTINUE
      IPHOTONUC=0
      DO 15411 J=1,NMED
15420   CONTINUE
          DO 15421 I=1, 2097154
          IF ((IPHOTONUCR(I).EQ.1.AND.MED(I).EQ.J)) THEN
            IPHOTONUCM(J)=1
            IPHOTONUC=1
            GO TO 15422
          END IF
15421   CONTINUE
15422   CONTINUE
15411 CONTINUE
15412 CONTINUE
      write(i_log,'(a,i3)') ' ===> Photonuclear flag: ', iphotonuc
      IF((.NOT.is_pegsless))REWIND KMPI
      NM=0
      DO 15431 IM=1,NMED
        LOK(IM)=0
        IF ((IRAYLM(IM).EQ.1)) THEN
          write(i_log,'(a,i3/)') ' RAYLEIGH OPTION REQUESTED FOR MEDIUM
     *NUMBER',IM
        END IF
15431 CONTINUE
15432 CONTINUE
      DO 15441 IM=1,NMED
        IF ((IPHOTONUCM(IM).EQ.1)) THEN
          write(i_log,'(a,i3/)') ' PHOTONUCLEAR REQUESTED FOR MEDIUM NUM
     *BER',IM
        END IF
15441 CONTINUE
15442 CONTINUE
      IF ((.NOT.is_pegsless)) THEN
15450   CONTINUE
15451     CONTINUE
15460     CONTINUE
15461       CONTINUE
            READ(KMPI,15300,END=15470)MBUF
            DO 15481 IB=1,LMDL
              IF((MBUF(IB).NE.MDLABL(IB)))GO TO 15461
15481       CONTINUE
15482       CONTINUE
15490       CONTINUE
              DO 15491 IM=1,NMED
              DO 15501 IB=1,LMDN
                IL=LMDL+IB
                IF((MBUF(IL).NE.MEDIA(IB,IM)))GO TO 15491
                IF((IB.EQ.LMDN))GO TO 15462
15501         CONTINUE
15502         CONTINUE
15491       CONTINUE
15492       CONTINUE
          GO TO 15461
15462     CONTINUE
          IF((LOK(IM).NE.0))GO TO 15460
          LOK(IM)=1
          NM=NM+1
          read(kmpi,'(a)',err=15510) tmp_string
          goto 15520
15510     write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'Error while reading pegs4 file'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
15520     CONTINUE
          read(tmp_string,1,ERR=15530)  (MBUF(I),I=1,5),RHO(IM),NNE(IM),
     *    IUNRST(IM),EPSTFL(IM),IAPRIM(IM)
1         FORMAT(5A1,5X,F11.0,4X,I2,9X,I1,9X,I1,9X,I1)
          GO TO 15540
15530     CONTINUE
          write(i_log,*) 'Found medium with gas pressure'
          read(tmp_string,2) (MBUF(I),I=1,5),RHO(IM),NNE(IM),IUNRST(IM),
     *    EPSTFL(IM), IAPRIM(IM)
2         FORMAT(5A1,5X,F11.0,4X,I2,26X,I1,9X,I1,9X,I1)
15540     CONTINUE
            DO 15541 IE=1,NNE(IM)
            READ(KMPI,15550)(MBUF(I),I=1,6),(ASYM(IM,IE,I),I=1,2), ZELEM
     *      (IM,IE),WA(IM,IE),PZ(IM,IE),RHOZ(IM,IE)
15550       FORMAT (6A1,2A1,3X,F3.0,3X,F9.0,4X,F12.0,6X,F12.0)
15541     CONTINUE
15542     CONTINUE
          READ(KMPI,15290) RLC(IM),AE(IM),AP(IM),UE(IM),UP(IM)
          TE(IM)=AE(IM)-RM
          THMOLL(IM)=TE(IM)*2. + RM
          READ(KMPI,15280) MSGE(IM),MGE(IM),MSEKE(IM),MEKE(IM),MLEKE(IM)
     *    ,MCMFP(IM),MRANGE(IM),IRAYL
          NSGE=MSGE(IM)
          NGE=MGE(IM)
          NSEKE=MSEKE(IM)
          NEKE=MEKE(IM)
          NLEKE=MLEKE(IM)
          NCMFP=MCMFP(IM)
          NRANGE=MRANGE(IM)
          READ(KMPI,15290)(DL1(I,IM),DL2(I,IM),DL3(I,IM),DL4(I,IM),DL5(I
     *    ,IM),DL6(I,IM),I=1,6)
          READ(KMPI,15290)DELCM(IM),(ALPHI(I,IM),BPAR(I,IM),DELPOS(I,IM)
     *    ,I=1,2)
          READ(KMPI,15290)XR0(IM),TEFF0(IM),BLCC(IM),XCC(IM)
          READ(KMPI,15290)EKE0(IM),EKE1(IM)
          READ(KMPI,15290) (ESIG0(I,IM),ESIG1(I,IM),PSIG0(I,IM),PSIG1(I,
     *    IM),EDEDX0(I,IM),EDEDX1(I,IM),PDEDX0(I,IM),PDEDX1(I,IM),EBR10(
     *    I,IM),EBR11(I,IM),PBR10(I,IM),PBR11(I,IM),PBR20(I,IM),PBR21(I,
     *    IM),TMXS0(I,IM),TMXS1(I,IM),I=1,NEKE)
          READ(KMPI,15290)EBINDA(IM),GE0(IM),GE1(IM)
          READ(KMPI,15290)(GMFP0(I,IM),GMFP1(I,IM),GBR10(I,IM),GBR11(I,I
     *    M),GBR20(I,IM),GBR21(I,IM),I=1,NGE)
          IF ((IRAYL.EQ.1)) THEN
            READ(KMPI,15280) NGR(IM)
            NGRIM=NGR(IM)
            READ(KMPI,15290)RCO0(IM),RCO1(IM)
            READ(KMPI,15290)(RSCT0(I,IM),RSCT1(I,IM),I=1,NGRIM)
            READ(KMPI,15290)(COHE0(I,IM),COHE1(I,IM),I=1,NGE)
            write(i_log,'(a,i3,a)') ' Rayleigh data available for medium
     *', IM, ' in PEGS4 data set.'
          END IF
          IF ((IRAYLM(IM).EQ.1)) THEN
            IF ((IRAYL.NE.1)) THEN
              IF ((toUpper(photon_xsections(:lnblnk1(photon_xsections)))
     *        .EQ.'PEGS4')) THEN
                write(i_log,'(/a)') '***************** Error: '
                write(i_log,'(a,i3 /,a /,a)') ' IN HATCH: REQUESTED RAYL
     *EIGH OPTION FOR MEDIUM', IM,' BUT RAYLEIGH DATA NOT INCLUDED IN PE
     *GS4 FILE.', ' YOU WILL NOT BE ABLE TO USE THE PEGS4 DATA WITH RAYL
     *EIGH ON!'
                write(i_log,'(/a)') '***************** Quiting now.'
                call exit(1)
              ELSE
                write(i_log,'(/a)') '***************** Warning: '
                write(i_log,'(a,i3 /,a)') ' IN HATCH: REQUESTED RAYLEIGH
     * OPTION FOR MEDIUM', IM,' BUT RAYLEIGH DATA NOT INCLUDED IN PEGS4
     *FILE.'
              END IF
            ELSE
              IF ((toUpper(photon_xsections(:lnblnk1(photon_xsections)))
     *        .EQ.'PEGS4')) THEN
                call egs_init_rayleigh_sampling(IM)
              END IF
            END IF
          END IF
          IF((NM.GE.NMED))GO TO15452
        GO TO 15451
15452   CONTINUE
        CLOSE (UNIT=KMPI)
        DUNITR=DUNIT
        IF ((DUNIT.LT.0.0)) THEN
          ID=MAX0(1,MIN0(7,int(-DUNIT)))
          DUNIT=RLC(ID)
        END IF
        IF ((DUNIT.NE.1.0)) THEN
          write(i_log,'(a,1PE14.5,E14.5,a)') ' DUNIT REQUESTED&USED ARE:
     * ', DUNITR,DUNIT,'(CM.)'
        END IF
        DO 15561 IM=1,NMED
          DFACT=RLC(IM)/DUNIT
          DFACTI=1.0/DFACT
          I=1
            GO TO 15573
15571       I=I+1
15573       IF(I-(MEKE(IM)).GT.0)GO TO 15572
            ESIG0(I,IM)=ESIG0(I,IM)*DFACTI
            ESIG1(I,IM)=ESIG1(I,IM)*DFACTI
            PSIG0(I,IM)=PSIG0(I,IM)*DFACTI
            PSIG1(I,IM)=PSIG1(I,IM)*DFACTI
            EDEDX0(I,IM)=EDEDX0(I,IM)*DFACTI
            EDEDX1(I,IM)=EDEDX1(I,IM)*DFACTI
            PDEDX0(I,IM)=PDEDX0(I,IM)*DFACTI
            PDEDX1(I,IM)=PDEDX1(I,IM)*DFACTI
            TMXS0(I,IM)=TMXS0(I,IM)*DFACT
            TMXS1(I,IM)=TMXS1(I,IM)*DFACT
          GO TO 15571
15572     CONTINUE
          TEFF0(IM)=TEFF0(IM)*DFACT
          BLCC(IM)=BLCC(IM)*DFACTI
          XCC(IM)=XCC(IM)*SQRT(DFACTI)
          RLDU(IM)=RLC(IM)/DUNIT
          I=1
            GO TO 15583
15581       I=I+1
15583       IF(I-(MGE(IM)).GT.0)GO TO 15582
            GMFP0(I,IM)=GMFP0(I,IM)*DFACT
            GMFP1(I,IM)=GMFP1(I,IM)*DFACT
          GO TO 15581
15582     CONTINUE
15561   CONTINUE
15562   CONTINUE
        VACDST=VACDST*DUNITO/DUNIT
        DUNITO=DUNIT
      ELSE
        write(i_log,*) ' PEGSLESS INPUT.  CALCULATING ELECTRON CROSS-SEC
     *TIONS.'
        call get_media_inputs(-1)
        DO 15591 IM=1,NMED
          AEP=AE(IM)
          UEP=UE(IM)
          APP=AP(IM)
          UPP=UP(IM)
          NEP=NNE(IM)
          IUNRSTP=IUNRST(IM)
          IAPRIMP=IAPRIM(IM)
          EPSTFLP=EPSTFL(IM)
          GASPP=INPGASP(IM)
          RHOP=RHO(IM)
          DO 15601 J=1,NEP
            ZELEMP(J)=ZELEM(IM,J)
            PZP(J)=PZ4(IM,J)
            RHOZP(J)=RHOZ4(IM,J)
            WAP(J)=WA4(IM,J)
15601     CONTINUE
15602     CONTINUE
          DO 15611 IB=1,LMDN
            IDSTRN(IB)=INPSTRN(IB,IM)
15611     CONTINUE
15612     CONTINUE
          TEP=AEP-RMP
          THMOLLP=AEP+TEP
          IF ((UEP.LE.AEP)) THEN
            write(i_log,'(a,24a1)')'  Error: Material not defined: ', (m
     *      edia(j,IM),j=1,24)
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,*) 'Material used in the geometry was not define
     *d in the' ,' material data.'
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          CALL MIX
          CALL SPINIT(inpdensity_file(IM))
          CALL DIFFER
          CALL PWLF1(NEL,NALE,AEP,UEP,THMOLLP,EPE,ZTHRE,ZEPE,NIPE,ALKE,
     *    ALKEI,AXE,BXE,500,8,AFE,BFE,EFUNS)
          TE(IM)=AE(IM)-RM
          THMOLL(IM)=TE(IM)*2. + RM
          RLC(IM)=RLCP
          XCC(IM)=XCCP
          BLCC(IM)=BLCCP
          XR0(IM)=XR0P
          TEFF0(IM)=TEFF0P
          DELCM(IM)=DELCMP
          DO 15621 I=1,2
            ALPHI(I,IM)=ALPHIP(I)
            BPAR(I,IM)=BPARP(I)
            DELPOS(I,IM)=DELPOSP(I)
15621     CONTINUE
15622     CONTINUE
          DO 15631 I=1,6
            DL1(I,IM)=DLP1(I)
            DL2(I,IM)=DLP2(I)
            DL3(I,IM)=DLP3(I)
            DL4(I,IM)=DLP4(I)
            DL5(I,IM)=DLP5(I)
            DL6(I,IM)=DLP6(I)
15631     CONTINUE
15632     CONTINUE
          MSGE(IM)=0
          MSEKE(IM)=0
          MLEKE(IM)=0
          MCMFP(IM)=0
          MRANGE(IM)=0
          MGE(IM)=2000
          MEKE(IM)=NEL
          NSGE=MSGE(IM)
          NGE=MGE(IM)
          NSEKE=MSEKE(IM)
          NEKE=MEKE(IM)
          NLEKE=MLEKE(IM)
          NCMFP=MCMFP(IM)
          NRANGE=MRANGE(IM)
          EKE0(IM)=BXE
          EKE1(IM)=AXE
          DO 15641 I=1,NEKE
            ESIG0(I,IM)=BFE(I,1)
            ESIG1(I,IM)=AFE(I,1)
            PSIG0(I,IM)=BFE(I,2)
            PSIG1(I,IM)=AFE(I,2)
            EDEDX0(I,IM)=BFE(I,3)
            EDEDX1(I,IM)=AFE(I,3)
            PDEDX0(I,IM)=BFE(I,4)
            PDEDX1(I,IM)=AFE(I,4)
            EBR10(I,IM)=BFE(I,5)
            EBR11(I,IM)=AFE(I,5)
            PBR10(I,IM)=BFE(I,6)
            PBR11(I,IM)=AFE(I,6)
            PBR20(I,IM)=BFE(I,7)
            PBR21(I,IM)=AFE(I,7)
            TMXS0(I,IM)=BFE(I,8)
            TMXS1(I,IM)=AFE(I,8)
15641     CONTINUE
15642     CONTINUE
15591   CONTINUE
15592   CONTINUE
        DUNITR=DUNIT
        IF ((DUNIT.LT.0.0)) THEN
          ID=MAX0(1,MIN0(7,int(-DUNIT)))
          DUNIT=RLC(ID)
        END IF
        IF ((DUNIT.NE.1.0)) THEN
          write(i_log,'(a,1PE14.5,E14.5,a)') ' DUNIT REQUESTED&USED ARE:
     * ', DUNITR,DUNIT,'(CM.)'
        END IF
        DO 15651 IM=1,NMED
          DFACT=RLC(IM)/DUNIT
          DFACTI=1.0/DFACT
          I=1
            GO TO 15663
15661       I=I+1
15663       IF(I-(MEKE(IM)).GT.0)GO TO 15662
            ESIG0(I,IM)=ESIG0(I,IM)*DFACTI
            ESIG1(I,IM)=ESIG1(I,IM)*DFACTI
            PSIG0(I,IM)=PSIG0(I,IM)*DFACTI
            PSIG1(I,IM)=PSIG1(I,IM)*DFACTI
            EDEDX0(I,IM)=EDEDX0(I,IM)*DFACTI
            EDEDX1(I,IM)=EDEDX1(I,IM)*DFACTI
            PDEDX0(I,IM)=PDEDX0(I,IM)*DFACTI
            PDEDX1(I,IM)=PDEDX1(I,IM)*DFACTI
            TMXS0(I,IM)=TMXS0(I,IM)*DFACT
            TMXS1(I,IM)=TMXS1(I,IM)*DFACT
          GO TO 15661
15662     CONTINUE
          TEFF0(IM)=TEFF0(IM)*DFACT
          BLCC(IM)=BLCC(IM)*DFACTI
          XCC(IM)=XCC(IM)*SQRT(DFACTI)
          RLDU(IM)=RLC(IM)/DUNIT
          I=1
            GO TO 15673
15671       I=I+1
15673       IF(I-(MGE(IM)).GT.0)GO TO 15672
            GMFP0(I,IM)=GMFP0(I,IM)*DFACT
            GMFP1(I,IM)=GMFP1(I,IM)*DFACT
          GO TO 15671
15672     CONTINUE
15651   CONTINUE
15652   CONTINUE
        VACDST=VACDST*DUNITO/DUNIT
        DUNITO=DUNIT
        call show_media_parameters(i_log)
      END IF
      DO 15681 JR=1, 2097154
        MD=MED(JR)
        IF (((MD.GE.1).AND.(MD.LE.NMED))) THEN
          ECUT=max(ECUT,AE(MD))
          PCUT=max(PCUT,AP(MD))
          IF ((RHOR(JR).EQ.0.0)) THEN
            RHOR(JR)=RHO(MD)
          END IF
        END IF
15681 CONTINUE
15682 CONTINUE
      IF ((IBRDST.EQ.1)) THEN
        DO 15691 IM=1,NMED
          ZBRANG(IM)=0.0
          PZNORM=0.0
          DO 15701 IE=1,NNE(IM)
            ZBRANG(IM)= ZBRANG(IM)+PZ(IM,IE)*ZELEM(IM,IE)*(ZELEM(IM,IE)+
     *      1.0)
            PZNORM=PZNORM+PZ(IM,IE)
15701     CONTINUE
15702     CONTINUE
          ZBRANG(IM)=(8.116224E-05)*(ZBRANG(IM)/PZNORM)**(1./3.)
          LZBRANG(IM)=-log(ZBRANG(IM))
15691   CONTINUE
15692   CONTINUE
      END IF
      IF ((IPRDST.GT.0)) THEN
        DO 15711 IM=1,NMED
          ZBRANG(IM)=0.0
          PZNORM=0.0
          DO 15721 IE=1,NNE(IM)
            ZBRANG(IM)= ZBRANG(IM)+PZ(IM,IE)*ZELEM(IM,IE)*(ZELEM(IM,IE)+
     *      1.0)
            PZNORM=PZNORM+PZ(IM,IE)
15721     CONTINUE
15722     CONTINUE
          ZBRANG(IM)=(8.116224E-05)*(ZBRANG(IM)/PZNORM)**(1./3.)
15711   CONTINUE
15712   CONTINUE
      END IF
      IF ((toUpper(photon_xsections(:lnblnk1(photon_xsections))) .EQ. 'P
     *EGS4')) THEN
        write(i_log,'(/a)') '***************** Warning: '
        write(i_log,'(6(a/))') 'Using photon data from PEGS4 file!!!', '
     *However, the new Rayleigh angular sampling will be used.', 'The or
     *iginal EGS4 angular sampling undersamples large scattering ', 'ang
     *les. This may have little impact as Rayleigh scattering ', 'is for
     *ward peaked.', '**************************************************
     ********'
      ELSE
        call egs_init_user_photon(photon_xsections,comp_xsections, photo
     *  nuc_xsections,xsec_out)
      END IF
      call mscati
      IF (( eadl_relax .AND. photon_xsections .EQ. 'xcom' )) THEN
        call init_compton
        call EDGSET(1,1)
      ELSE
        call EDGSET(1,1)
        call init_compton
      END IF
      IF (( xsec_out .EQ. 1 .AND. eadl_relax)) THEN
        call egs_print_binding_energies
      END IF
      call fix_brems
      IF (( ibr_nist .GE. 1 )) THEN
        call init_nist_brems
      END IF
      IF (( pair_nrc .EQ. 1 )) THEN
        call init_nrc_pair
      END IF
      call eii_init
      call init_triplet
      IF ((NMED.EQ.1)) THEN
        write(i_log,*) 'EGSnrc SUCCESSFULLY ''HATCHED'' FOR ONE MEDIUM.'
      ELSE
        write(i_log,'(a,i5,a)') 'EGSnrc SUCCESSFULLY ''HATCHED'' FOR ',N
     *  MED,' MEDIA.'
      END IF
      RETURN
15470 write(i_log,'(a,i2//,a/,a/)') ' END OF FILE ON UNIT ',KMPI, ' PROG
     *RAM STOPPED IN HATCH BECAUSE THE', ' FOLLOWING NAMES WERE NOT RECO
     *GNIZED:'
      DO 15731 IM=1,NMED
        IF ((LOK(IM).NE.1)) THEN
          write(i_log,'(40x,a,24a1,a)') '''',(MEDIA(I,IM),I=1,LMDN),''''
        END IF
15731 CONTINUE
15732 CONTINUE
      STOP
      END
      subroutine fix_brems
      implicit none
      COMMON/BREMPR/ DL1(8,7),DL2(8,7),DL3(8,7),DL4(8,7),DL5(8,7),DL6(8,
     *7), ALPHI(2,7),BPAR(2,7),DELPOS(2,7), WA(7,50),PZ(7,50),ZELEM(7,50
     *),RHOZ(7,50), PWR2I(50), DELCM(7),ZBRANG(7),LZBRANG(7),NNE(7), IBR
     *DST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(7,50,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      common/nist_brems/ nb_fdata(0:50,100,7), nb_xdata(0:50,100,7), nb_
     *wdata(50,100,7), nb_idata(50,100,7), nb_emin(7),nb_emax(7), nb_lem
     *in(7),nb_lemax(7), nb_dle(7),nb_dlei(7), log_ap(7)
      real*8 nb_fdata,nb_xdata,nb_wdata,nb_emin,nb_emax,nb_lemin,nb_lema
     *x, nb_dle,nb_dlei,log_ap
      integer*4 nb_idata
      COMMON/THRESH/RMT2,RMSQ, AP(7),AE(7),UP(7),UE(7),TE(7),THMOLL(7)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      integer*4 medium,i
      real*8 Zt,Zb,Zf,Zg,Zv,fmax1,fmax2,Zi,pi,fc,xi,aux, XSIF,FCOULC
      DO 15741 medium=1,nmed
        log_ap(medium) = log(ap(medium))
        Zt = 0
        Zb = 0
        Zf = 0
        DO 15751 i=1,NNE(medium)
          Zi = ZELEM(medium,i)
          pi = PZ(medium,i)
          fc = FCOULC(Zi)
          xi = XSIF(Zi)
          aux = pi*Zi*(Zi + xi)
          Zt = Zt + aux
          Zb = Zb - aux*Log(Zi)/3
          Zf = Zf + aux*fc
15751   CONTINUE
15752   CONTINUE
        Zv = (Zb - Zf)/Zt
        Zg = Zb/Zt
        fmax1 = 2*(20.863 + 4*Zg) - 2*(20.029 + 4*Zg)/3
        fmax2 = 2*(20.863 + 4*Zv) - 2*(20.029 + 4*Zv)/3
        dl1(1,medium) = (20.863 + 4*Zg)/fmax1
        dl2(1,medium) = -3.242/fmax1
        dl3(1,medium) = 0.625/fmax1
        dl4(1,medium) = (21.12+4*Zg)/fmax1
        dl5(1,medium) = -4.184/fmax1
        dl6(1,medium) = 0.952
        dl1(2,medium) = (20.029+4*Zg)/fmax1
        dl2(2,medium) = -1.93/fmax1
        dl3(2,medium) = -0.086/fmax1
        dl4(2,medium) = (21.12+4*Zg)/fmax1
        dl5(2,medium) = -4.184/fmax1
        dl6(2,medium) = 0.952
        dl1(3,medium) = (20.863 + 4*Zv)/fmax2
        dl2(3,medium) = -3.242/fmax2
        dl3(3,medium) = 0.625/fmax2
        dl4(3,medium) = (21.12+4*Zv)/fmax2
        dl5(3,medium) = -4.184/fmax2
        dl6(3,medium) = 0.952
        dl1(4,medium) = (20.029+4*Zv)/fmax2
        dl2(4,medium) = -1.93/fmax2
        dl3(4,medium) = -0.086/fmax2
        dl4(4,medium) = (21.12+4*Zv)/fmax2
        dl5(4,medium) = -4.184/fmax2
        dl6(4,medium) = 0.952
        dl1(5,medium) = (3*(20.863 + 4*Zg) - (20.029 + 4*Zg))
        dl2(5,medium) = (3*(-3.242) - (-1.930))
        dl3(5,medium) = (3*(0.625)-(-0.086))
        dl4(5,medium) = (2*21.12+8*Zg)
        dl5(5,medium) = (2*(-4.184))
        dl6(5,medium) = 0.952
        dl1(6,medium) = (3*(20.863 + 4*Zg) + (20.029 + 4*Zg))
        dl2(6,medium) = (3*(-3.242) + (-1.930))
        dl3(6,medium) = (3*0.625+(-0.086))
        dl4(6,medium) = (4*21.12+16*Zg)
        dl5(6,medium) = (4*(-4.184))
        dl6(6,medium) = 0.952
        dl1(7,medium) = (3*(20.863 + 4*Zv) - (20.029 + 4*Zv))
        dl2(7,medium) = (3*(-3.242) - (-1.930))
        dl3(7,medium) = (3*(0.625)-(-0.086))
        dl4(7,medium) = (2*21.12+8*Zv)
        dl5(7,medium) = (2*(-4.184))
        dl6(7,medium) = 0.952
        dl1(8,medium) = (3*(20.863 + 4*Zv) + (20.029 + 4*Zv))
        dl2(8,medium) = (3*(-3.242) + (-1.930))
        dl3(8,medium) = (3*0.625+(-0.086))
        dl4(8,medium) = (4*21.12+16*Zv)
        dl5(8,medium) = (4*(-4.184))
        dl6(8,medium) = 0.952
        bpar(2,medium) = dl1(7,medium)/(3*dl1(8,medium) + dl1(7,medium))
        bpar(1,medium) = 12*dl1(8,medium)/(3*dl1(8,medium) + dl1(7,mediu
     *  m))
15741 CONTINUE
15742 CONTINUE
      return
      end
      real*8 function FCOULC(Z)
      implicit none
      real*8 Z
      real*8 fine,asq
      data fine/137.03604/
      asq = Z/fine
      asq = asq*asq
      FCOULC = asq*(1.0/(1.0+ASQ)+0.20206+ASQ*(-0.0369+ASQ*(0.0083+ASQ*(
     *-0.002))))
      return
      end
      real*8 function XSIF(Z)
      implicit none
      real*8 Z
      integer*4 iZ
      real*8 alrad(4),alradp(4),a1440,a183,FCOULC
      data alrad/5.31,4.79,4.74,4.71/
      data alradp/6.144,5.621,5.805,5.924/
      data a1440/1194.0/,A183/184.15/
      IF (( Z .LE. 4 )) THEN
        iZ = Z
        xsif = alradp(iZ)/(alrad(iZ) - FCOULC(Z))
      ELSE
        xsif = Log(A1440*Z**(-0.666667))/(Log(A183*Z**(-0.33333))-FCOULC
     *  (Z))
      END IF
      return
      end
      subroutine init_compton
      implicit none
      common/compton_data/ iz_array(1538),  be_array(1538),  Jo_array(15
     *38),  erfJo_array(1538),   ne_array(1538),  shn_array(1538),
     *shell_array(200,7), eno_array(200,7), eno_atbin_array(200,7), n_sh
     *ell(7), radc_flag,  ibcmp
      integer*4 iz_array,ne_array,shn_array,eno_atbin_array, shell_array
     *,n_shell,radc_flag
      real*8 be_array,Jo_array,erfJo_array,eno_array
      integer*2 ibcmp
      COMMON/BREMPR/ DL1(8,7),DL2(8,7),DL3(8,7),DL4(8,7),DL5(8,7),DL6(8,
     *7), ALPHI(2,7),BPAR(2,7),DELPOS(2,7), WA(7,50),PZ(7,50),ZELEM(7,50
     *),RHOZ(7,50), PWR2I(50), DELCM(7),ZBRANG(7),LZBRANG(7),NNE(7), IBR
     *DST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(7,50,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L,IPHTER
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR( 2097154),MED( 2097154),IRAYLR,
     *IPHOTONUCR( 2097154)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/x_options/eadl_relax,  mcdf_pe_xsections
      logical eadl_relax, mcdf_pe_xsections
      integer*4 i,j,iz,nsh,j_l,j_h
      real*8 aux,pztot,atav
      real*8 aux_erf,erf1
      logical getd
      IF (( radc_flag .EQ. 1 )) THEN
        write(i_log,'(/a)') '***************** Warning: '
        write(i_log,*) 'You are trying to use radiative Compton correcti
     *ons'
        write(i_log,*) 'without having included rad_compton1.mortran'
        write(i_log,'(a//)') 'Turning radiative Compton corrections OFF
     *...'
        radc_flag = 0
      END IF
      getd = .false.
      DO 15761 j=1, 2097154
        medium = med(j)
        IF (( medium .GT. 0 .AND. medium .LE. nmed)) THEN
          IF (( ibcmp .GT. 0 )) THEN
            getd = .true.
            GO TO15762
          END IF
        END IF
15761 CONTINUE
15762 CONTINUE
      IF (( .NOT.getd )) THEN
        IF (( eadl_relax .AND. photon_xsections .EQ. 'xcom' )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(a,/a,/a)') 'You must turn ON Compton binding cor
     *rections when using', 'a detailed atomic relaxation (eadl_relax=tr
     *ue) since ', 'binding energies taken from incoh.data below 1 keV!'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        write(i_log,'(a/)') ' Bound Compton scattering not requested! '
        return
      END IF
      write(i_log,'(/a$)') 'Bound Compton scattering requested, reading
     *data ......'
      rewind(i_incoh)
      DO 15771 j=1,18
        read(i_incoh,*)
15771 CONTINUE
15772 CONTINUE
      iz = 0
      DO 15781 j=1,1538
        read(i_incoh,*) iz_array(j),shn_array(j),ne_array(j), Jo_array(j
     *  ),be_array(j)
        Jo_array(j) = Jo_array(j)*137.
        be_array(j) = be_array(j)*1e-6/PRM
        aux_erf = 0.70710678119*(1+0.3*Jo_array(j))
        erfJo_array(j) = 0.82436063535*(erf1(aux_erf)-1)
        IF ((eadl_relax)) THEN
          IF ((iz_array(j) .NE. iz)) THEN
            shn_array(j) = 1
            iz = iz_array(j)
          ELSE
            shn_array(j) = shn_array(j-1)+1
          END IF
          IF ((binding_energies(shn_array(j),iz_array(j)) .GT. 0)) THEN
            be_array(j) = binding_energies(shn_array(j),iz_array(j))/PRM
          ELSE IF((photon_xsections .EQ. 'xcom')) THEN
            binding_energies(shn_array(j),iz_array(j)) = be_array(j)*PRM
          END IF
        END IF
15781 CONTINUE
15782 CONTINUE
      write(i_log,*) ' Done'
      write(i_log,'(/a)') ' Initializing Bound Compton scattering ......
     *'
      DO 15791 medium=1,nmed
        pztot = 0
        nsh = 0
        DO 15801 i=1,nne(medium)
          iz = int(zelem(medium,i))
          DO 15811 j=1,1538
            IF (( iz .EQ. iz_array(j) )) THEN
              nsh = nsh + 1
              IF (( nsh .GT. 200 )) THEN
                write(i_log,'(/a)') '***************** Error: '
                write(i_log,'(/a,i3,a,i4,a/,a)') ' For medium ',medium,
     *          ' the number of shells is > ',200,'!', ' Increase the pa
     *rameter $MXMDSH! '
                write(i_log,'(/a)') '***************** Quiting now.'
                call exit(1)
              END IF
              shell_array(nsh,medium) = j
              aux = pz(medium,i)*ne_array(j)
              eno_array(nsh,medium) = aux
              pztot = pztot + aux
            END IF
15811     CONTINUE
15812     CONTINUE
15801   CONTINUE
15802   CONTINUE
        IF (( nsh .EQ. 0 )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(a,i3,a)') ' Medium ',medium,' has zero shells! '
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        n_shell(medium) = nsh
        write(i_log,'(a,i3,a,i3,a)') ' Medium ',medium,' has ',nsh,' she
     *lls: '
        DO 15821 i=1,nsh
          j = shell_array(i,medium)
          eno_array(i,medium) = eno_array(i,medium)/pztot
          write(i_log,'(i4,i5,i4,f9.5,e10.3,f10.3)') i,j,shn_array(j),en
     *    o_array(i,medium), Jo_array(j),be_array(j)*PRM*1000.
          eno_array(i,medium) = -eno_array(i,medium)
          eno_atbin_array(i,medium) = i
15821   CONTINUE
15822   CONTINUE
        atav = 1./nsh
        DO 15831 i=1,nsh-1
          DO 15841 j_h=1,nsh-1
            IF (( eno_array(j_h,medium) .LT. 0 )) THEN
              IF((abs(eno_array(j_h,medium)) .GT. atav))GO TO15842
            END IF
15841     CONTINUE
15842     CONTINUE
          DO 15851 j_l=1,nsh-1
            IF (( eno_array(j_l,medium) .LT. 0 )) THEN
              IF((abs(eno_array(j_l,medium)) .LT. atav))GO TO15852
            END IF
15851     CONTINUE
15852     CONTINUE
          aux = atav - abs(eno_array(j_l,medium))
          eno_array(j_h,medium) = eno_array(j_h,medium) + aux
          eno_array(j_l,medium) = -eno_array(j_l,medium)/atav + j_l
          eno_atbin_array(j_l,medium) = j_h
          IF((i .EQ. nsh-1))eno_array(j_h,medium) = 1 + j_h
15831   CONTINUE
15832   CONTINUE
        DO 15861 i=1,nsh
          IF (( eno_array(i,medium) .LT. 0 )) THEN
            eno_array(i,medium) = 1 + i
          END IF
15861   CONTINUE
15862   CONTINUE
15791 CONTINUE
15792 CONTINUE
      write(i_log,'(a/)') ' ...... Done.'
      getd = .false.
      DO 15871 j=1, 2097154
        IF (( IEDGFL .GT. 0 .AND. IEDGFL .LE. 100 )) THEN
          getd = .true.
          GO TO15872
        END IF
15871 CONTINUE
15872 CONTINUE
      IF((getd))return
      write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(/a,/a,/a,/a)') ' In subroutine init_compton: ', '
     *Scattering off bound electrons creates atomic vacancies,', '   pot
     *entially starting an atomic relaxation cascade. ', '   Please turn
     * ON atomic relaxations.'
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      return
      end
      SUBROUTINE MOLLER
      implicit none
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/THRESH/RMT2,RMSQ, AP(7),AE(7),UP(7),UE(7),TE(7),THMOLL(7)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/egs_vr/ e_max_rr,  prob_RR,  nbr_split,  i_play_RR,      i_
     *survived_RR,
     *  n_RR_warning,                                        i_do_rr
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common/eii_data/ eii_xsection_a( 10000),  eii_xsection_b( 10000),
     * eii_cons(7), eii_a(40),  eii_b(40),  eii_L_factor,  eii_z(40),  e
     *ii_sh(40),  eii_nshells(100),  eii_nsh(7),  eii_first(7,50),  eii_
     *no(7,50),  eii_flag
      real*8 eii_xsection_a,eii_xsection_b,eii_a,eii_b,eii_cons,eii_L_fa
     *ctor
      integer*4 eii_z,eii_sh,eii_nshells
      integer*4 eii_first,eii_no
      integer*4 eii_elements,eii_flag,eii_nsh
      COMMON/ELECIN/ esig_e(7),psig_e(7), esige_max, psige_max, range_ep
     *(0:1,500,7), E_array(500,7), etae_ms0(500,7),etae_ms1(500,7),etap_
     *ms0(500,7),etap_ms1(500,7),q1ce_ms0(500,7),q1ce_ms1(500,7),q1cp_ms
     *0(500,7),q1cp_ms1(500,7),q2ce_ms0(500,7),q2ce_ms1(500,7),q2cp_ms0(
     *500,7),q2cp_ms1(500,7),blcce0(500,7),blcce1(500,7), EKE0(7),EKE1(7
     *), XR0(7),TEFF0(7),BLCC(7),XCC(7), ESIG0(500,7),ESIG1(500,7),PSIG0
     *(500,7),PSIG1(500,7),EDEDX0(500,7),EDEDX1(500,7),PDEDX0(500,7),PDE
     *DX1(500,7),EBR10(500,7),EBR11(500,7),PBR10(500,7),PBR11(500,7),PBR
     *20(500,7),PBR21(500,7),TMXS0(500,7),TMXS1(500,7), expeke1(7), IUNR
     *ST(7),EPSTFL(7),IAPRIM(7), sig_ismonotone(0:1,7)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L,IPHTER
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      COMMON/BREMPR/ DL1(8,7),DL2(8,7),DL3(8,7),DL4(8,7),DL5(8,7),DL6(8,
     *7), ALPHI(2,7),BPAR(2,7),DELPOS(2,7), WA(7,50),PZ(7,50),ZELEM(7,50
     *),RHOZ(7,50), PWR2I(50), DELCM(7),ZBRANG(7),LZBRANG(7),NNE(7), IBR
     *DST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(7,50,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      DOUBLE PRECISION PEIE,  PEKSE2,  PESE1,  PESE2,  PEKIN,  H1,  DCOS
     *TH
      real*8 EIE,  EKIN,  T0,  E0,  EXTRAE,  E02,  EP0,  G2,G3,  GMAX,
     *BR,  R,  REJF4,  RNNO27,  RNNO28,  ESE1,  ESE2
      real*8 sigm,pbrem,rsh,Uj,sig_j
      integer*4 lelke,iele,ish,nsh,ifirst,i,jj,iZ,iarg
      NPold = NP
      PEIE=E(NP)
      EIE=PEIE
      PEKIN=PEIE-PRM
      EKIN=PEKIN
      IF (( eii_flag .GT. 0 .AND. eii_nsh(medium) .GT. 0 )) THEN
        Lelke=eke1(MEDIUM)*elke+eke0(MEDIUM)
        sigm=esig1(Lelke,MEDIUM)*elke+esig0(Lelke,MEDIUM)
        pbrem=ebr11(Lelke,MEDIUM)*elke+ebr10(Lelke,MEDIUM)
        sigm = sigm*(1 - pbrem)
        IF((rng_seed .GT. 128))call ranmar_get
        rsh = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        rsh = sigm*rsh
        DO 15881 iele=1,nne(medium)
          iZ = int(zelem(medium,iele)+0.5)
          nsh = eii_no(medium,iele)
          IF (( nsh .GT. 0 )) THEN
            ifirst = eii_first(medium,iele)
            DO 15891 ish=1,nsh
              Uj = binding_energies(ish,iZ)
              IF (( ekin .GT. Uj .AND. (Uj .GT. te(medium) .OR. Uj .GT.
     *        ap(medium)) )) THEN
                jj = ifirst + ish - 1
                i = eii_a(jj)*elke + eii_b(jj) + (jj-1)*250
                sig_j = eii_xsection_a(i)*elke + eii_xsection_b(i)
                sig_j = sig_j*pz(medium,iele)*eii_cons(medium)
                rsh = rsh - sig_j
                IF (( rsh .LT. 0 )) THEN
                  IARG=31
                  IF ((IAUSFL(IARG+1).NE.0)) THEN
                    CALL AUSGAB(IARG)
                  END IF
                  IF((IARG.LT.0))RETURN
                  call eii_sample(ish,iZ,Uj)
                  IARG=32
                  IF ((IAUSFL(IARG+1).NE.0)) THEN
                    CALL AUSGAB(IARG)
                  END IF
                  IF((IARG.LT.0))RETURN
                  return
                END IF
              END IF
15891       CONTINUE
15892       CONTINUE
          END IF
15881   CONTINUE
15882   CONTINUE
      END IF
      IF((ekin .LE. 2*te(medium)))return
      T0=EKIN/RM
      E0=T0+1.0
      EXTRAE = EIE - THMOLL(MEDIUM)
      E02=E0*E0
      EP0=TE(MEDIUM)/EKIN
      G2=T0*T0/E02
      G3=(2.*T0+1.)/E02
      GMAX=(1.+1.25*G2)
15901 CONTINUE
        IF((rng_seed .GT. 128))call ranmar_get
        RNNO27 = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        BR = TE(MEDIUM)/(EKIN-EXTRAE*RNNO27)
        R=BR/(1.-BR)
        IF((rng_seed .GT. 128))call ranmar_get
        RNNO28 = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        REJF4=(1.+G2*BR*BR+R*(R-G3))
        RNNO28=GMAX*RNNO28
        IF((RNNO28.LE.REJF4))GO TO15902
      GO TO 15901
15902 CONTINUE
      PEKSE2=BR*EKIN
      PESE1=PEIE-PEKSE2
      PESE2=PEKSE2+PRM
      ESE1=PESE1
      ESE2=PESE2
      E(NP)=PESE1
      IF (( np+1 .GT. 10000 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','MOLLER', ' s
     *tack size exceeded! ',' $MAXSTACK = ',10000,' np = ',np+1
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      E(NP+1)=PESE2
      H1=(PEIE+PRM)/PEKIN
      DCOSTH=H1*(PESE1-PRM)/(PESE1+PRM)
      SINTHE=DSQRT(1.D0-DCOSTH)
      COSTHE=DSQRT(DCOSTH)
      CALL UPHI(2,1)
      NP=NP+1
      IQ(NP)=-1
      DCOSTH=H1*(PESE2-PRM)/(PESE2+PRM)
      SINTHE=-DSQRT(1.D0-DCOSTH)
      COSTHE=DSQRT(DCOSTH)
      CALL UPHI(3,2)
      RETURN
      END
      subroutine mscati
      implicit none
      real*8 ededx,ei,eil,eip1,eip1l,si,sip1,eke,elke,aux,ecutmn,tstbm,t
     *stbmn
      real*8 p2,beta2,dedx0,ekef,elkef,estepx,ektmp,elktmp,chi_a2
      integer*4 i,leil,leip1l,neke,lelke,lelkef,lelktmp
      logical ise_monoton, isp_monoton
      real*8 sigee,sigep,sig,sige_old,sigp_old
      COMMON/BOUNDS/ECUT,PCUT,VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/ELECIN/ esig_e(7),psig_e(7), esige_max, psige_max, range_ep
     *(0:1,500,7), E_array(500,7), etae_ms0(500,7),etae_ms1(500,7),etap_
     *ms0(500,7),etap_ms1(500,7),q1ce_ms0(500,7),q1ce_ms1(500,7),q1cp_ms
     *0(500,7),q1cp_ms1(500,7),q2ce_ms0(500,7),q2ce_ms1(500,7),q2cp_ms0(
     *500,7),q2cp_ms1(500,7),blcce0(500,7),blcce1(500,7), EKE0(7),EKE1(7
     *), XR0(7),TEFF0(7),BLCC(7),XCC(7), ESIG0(500,7),ESIG1(500,7),PSIG0
     *(500,7),PSIG1(500,7),EDEDX0(500,7),EDEDX1(500,7),PDEDX0(500,7),PDE
     *DX1(500,7),EBR10(500,7),EBR11(500,7),PBR10(500,7),PBR11(500,7),PBR
     *20(500,7),PBR21(500,7),TMXS0(500,7),TMXS1(500,7), expeke1(7), IUNR
     *ST(7),EPSTFL(7),IAPRIM(7), sig_ismonotone(0:1,7)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR( 2097154),MED( 2097154),IRAYLR,
     *IPHOTONUCR( 2097154)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common/ET_control/ SMAXIR,estepe,ximax,  skindepth_for_bca,transpo
     *rt_algorithm, bca_algorithm,exact_bca,spin_effects
      real*8 smaxir,  estepe,  ximax,      skindepth_for_bca
      integer*4 transport_algorithm, bca_algorithm
      logical exact_bca,  spin_effects
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      IF (( bca_algorithm .EQ. 0 )) THEN
        exact_bca = .true.
      ELSE
        exact_bca = .false.
      END IF
      IF (( estepe .LE. 0 .OR. estepe .GE. 1)) THEN
        estepe = 0.25
      END IF
      IF (( ximax .LE. 0 .OR. ximax .GE. 1 )) THEN
        IF (( exact_bca )) THEN
          ximax = 0.5
        ELSE
          ximax = 0.5
        END IF
      END IF
      IF ((transport_algorithm .NE. 0 .AND. transport_algorithm .NE. 1 .
     *AND. transport_algorithm .NE. 2 )) THEN
        transport_algorithm = 0
      END IF
      IF (( skindepth_for_bca .LE. 1e-4 )) THEN
        IF (( .NOT.exact_bca )) THEN
          write(i_log,*) ' old PRESTA calculates default min. step-size
     *for BCA: '
          ecutmn = 1e30
          DO 15911 i=1, 2097154
            IF (( med(i) .GT. 0 .AND. med(i) .LE. nmed )) THEN
              ecutmn = Min(ecutmn,ECUT)
            END IF
15911     CONTINUE
15912     CONTINUE
          write(i_log,*) '     minimum ECUT found: ',ecutmn
          tstbmn = 1e30
          DO 15921 medium=1,nmed
            tstbm = (ecutmn-prm)*(ecutmn+prm)/ecutmn**2
            tstbm = blcc(medium)*tstbm*(ecutmn/xcc(medium))**2
            aux = Log(tstbm)
            IF((aux .GT. 300))write(i_log,*) 'aux > 300 ? ',aux
            tstbm = Log(tstbm/aux)
            tstbmn = Min(tstbmn,tstbm)
15921     CONTINUE
15922     CONTINUE
          write(i_log,*) '     default BLCMIN is: ',tstbmn
          skindepth_for_bca = Exp(tstbmn)
          write(i_log,*) '     this corresponds to ',skindepth_for_bca,
     *    ' elastic MFPs '
        ELSE
          skindepth_for_bca = 3
        END IF
      END IF
      call init_ms_SR
      DO 15931 medium=1,nmed
        blcc(medium) = 1.16699413758864573*blcc(medium)
        xcc(medium) = xcc(medium)**2
15931 CONTINUE
15932 CONTINUE
      IF (( spin_effects )) THEN
        call init_spin
      END IF
      write(i_log,*) ' '
      esige_max = 0
      psige_max = 0
      DO 15941 medium=1,nmed
        sigee = 1E-15
        sigep = 1E-15
        neke = meke(medium)
        ise_monoton = .true.
        isp_monoton = .true.
        sige_old = -1
        sigp_old = -1
        DO 15951 i=1,neke
          ei = exp((float(i) - eke0(medium))/eke1(medium))
          eil = log(ei)
          leil = i
          ededx=ededx1(Leil,MEDIUM)*eil+ededx0(Leil,MEDIUM)
          sig=esig1(Leil,MEDIUM)*eil+esig0(Leil,MEDIUM)
          sig = sig/ededx
          IF((sig .GT. sigee))sigee = sig
          IF((sig .LT. sige_old))ise_monoton = .false.
          sige_old = sig
          ededx=pdedx1(Leil,MEDIUM)*eil+pdedx0(Leil,MEDIUM)
          sig=psig1(Leil,MEDIUM)*eil+psig0(Leil,MEDIUM)
          sig = sig/ededx
          IF((sig .GT. sigep))sigep = sig
          IF((sig .LT. sigp_old))isp_monoton = .false.
          sigp_old = sig
15951   CONTINUE
15952   CONTINUE
        write(i_log,*) ' Medium ',medium,' sige = ',sigee,sigep,' monoto
     *ne = ', ise_monoton,isp_monoton
        sig_ismonotone(0,medium) = ise_monoton
        sig_ismonotone(1,medium) = isp_monoton
        esig_e(medium) = sigee
        psig_e(medium) = sigep
        IF((sigee .GT. esige_max))esige_max = sigee
        IF((sigep .GT. psige_max))psige_max = sigep
15941 CONTINUE
15942 CONTINUE
      write(i_log,*) ' '
      write(i_log,*) ' Initializing tmxs for estepe = ',estepe,' and xim
     *ax = ',ximax
      write(i_log,*) ' '
      DO 15961 medium=1,nmed
        ei = exp((1 - eke0(medium))/eke1(medium))
        eil = log(ei)
        leil = 1
        E_array(1,medium) = ei
        expeke1(medium) = Exp(1./eke1(medium))-1
        range_ep(0,1,medium) = 0
        range_ep(1,1,medium) = 0
        neke = meke(medium)
        DO 15971 i=1,neke - 1
          eip1 = exp((float(i + 1) - eke0(medium))/eke1(medium))
          E_array(i+1,medium) = eip1
          eke = 0.5*(eip1+ei)
          elke = Log(eke)
          Lelke=eke1(MEDIUM)*elke+eke0(MEDIUM)
          ededx=pdedx1(Lelke,MEDIUM)*elke+pdedx0(Lelke,MEDIUM)
          aux = pdedx1(i,medium)/ededx
          range_ep(1,i+1,medium) = range_ep(1,i,medium) + (eip1-ei)/eded
     *    x*(1+aux*(1+2*aux)*((eip1-ei)/eke)**2/24)
          ededx=ededx1(Lelke,MEDIUM)*elke+ededx0(Lelke,MEDIUM)
          aux = ededx1(i,medium)/ededx
          range_ep(0,i+1,medium) = range_ep(0,i,medium) + (eip1-ei)/eded
     *    x*(1+aux*(1+2*aux)*((eip1-ei)/eke)**2/24)
          ei = eip1
15971   CONTINUE
15972   CONTINUE
        eil = (1 - eke0(medium))/eke1(medium)
        ei = Exp(eil)
        leil = 1
        p2 = ei*(ei+2*rm)
        beta2 = p2/(p2+rm*rm)
        chi_a2 = Xcc(medium)/(4*p2*blcc(medium))
        dedx0=ededx1(Leil,MEDIUM)*eil+ededx0(Leil,MEDIUM)
        estepx = 2*p2*beta2*dedx0/ei/Xcc(medium)/(Log(1+1./chi_a2)*(1+ch
     *  i_a2)-1)
        estepx = estepx*ximax
        IF (( estepx .GT. estepe )) THEN
          estepx = estepe
        END IF
        si = estepx*ei/dedx0
        DO 15981 i=1,neke - 1
          elke = (i + 1 - eke0(medium))/eke1(medium)
          eke = Exp(elke)
          lelke = i+1
          p2 = eke*(eke+2*rm)
          beta2 = p2/(p2+rm*rm)
          chi_a2 = Xcc(medium)/(4*p2*blcc(medium))
          ededx=ededx1(Lelke,MEDIUM)*elke+ededx0(Lelke,MEDIUM)
          estepx = 2*p2*beta2*ededx/eke/ Xcc(medium)/(Log(1+1./chi_a2)*(
     *    1+chi_a2)-1)
          estepx = estepx*ximax
          IF (( estepx .GT. estepe )) THEN
            estepx = estepe
          END IF
          ekef = (1-estepx)*eke
          IF (( ekef .LE. E_array(1,medium) )) THEN
            sip1 = (E_array(1,medium) - ekef)/dedx0
            ekef = E_array(1,medium)
            elkef = (1 - eke0(medium))/eke1(medium)
            lelkef = 1
          ELSE
            elkef = Log(ekef)
            Lelkef=eke1(MEDIUM)*elkef+eke0(MEDIUM)
            leip1l = lelkef + 1
            eip1l = (leip1l - eke0(medium))/eke1(medium)
            eip1 = E_array(leip1l,medium)
            aux = (eip1 - ekef)/eip1
            elktmp = 0.5*(elkef+eip1l+0.25*aux*aux*(1+aux*(1+0.875*aux))
     *      )
            ektmp = 0.5*(ekef+eip1)
            lelktmp = lelkef
            ededx=ededx1(Lelktmp,MEDIUM)*elktmp+ededx0(Lelktmp,MEDIUM)
            aux = ededx1(lelktmp,medium)/ededx
            sip1 = (eip1 - ekef)/ededx*( 1+aux*(1+2*aux)*((eip1-ekef)/ek
     *      tmp)**2/24)
          END IF
          sip1 = sip1 + range_ep(0,lelke,medium) - range_ep(0,lelkef+1,m
     *    edium)
          tmxs1(i,medium) = (sip1 - si)*eke1(medium)
          tmxs0(i,medium) = sip1 - tmxs1(i,medium)*elke
          si = sip1
15981   CONTINUE
15982   CONTINUE
        tmxs0(neke,medium) = tmxs0(neke - 1,medium)
        tmxs1(neke,medium) = tmxs1(neke - 1,medium)
15961 CONTINUE
15962 CONTINUE
      return
      end
      subroutine mscat(lambda,chia2,q1,elke,beta2,qel,medium, spin_effec
     *ts,find_index,spin_index, cost,sint)
      implicit none
      real*8 lambda, chia2,q1,elke,beta2,cost,sint
      integer*4 qel,medium
      logical spin_effects,find_index,spin_index
      common/ms_data/ ums_array(0:63,0:7,0:31), fms_array(0:63,0:7,0:31)
     *, wms_array(0:63,0:7,0:31), ims_array(0:63,0:7,0:31), llammin,llam
     *max,dllamb,dllambi,dqms,dqmsi
      real*4 ums_array,fms_array,wms_array, llammin,llammax,dllamb,dllam
     *bi,dqms,dqmsi
      integer*2 ims_array
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 sprob,explambda,wsum,wprob,xi,rejf,spin_rejection, cosz,sin
     *z,phi,omega2,llmbda,ai,aj,ak,a,u,du,x1,rnno
      integer*4 icount,i,j,k
      save i,j,omega2
      IF ((lambda .LE. 13.8)) THEN
        IF((rng_seed .GT. 128))call ranmar_get
        sprob = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        explambda = Exp(-lambda)
        IF ((sprob .LT. explambda)) THEN
          cost = 1
          sint = 0
          return
        END IF
        wsum = (1+lambda)*explambda
        IF (( sprob .LT. wsum )) THEN
15990     CONTINUE
          IF((rng_seed .GT. 128))call ranmar_get
          xi = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          xi = 2*chia2*xi/(1 - xi + chia2)
          cost = 1 - xi
          IF (( spin_effects )) THEN
            rejf = spin_rejection(qel,medium,elke,beta2,q1,cost, spin_in
     *      dex,.false.)
            IF((rng_seed .GT. 128))call ranmar_get
            rnno = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            IF (( rnno .GT. rejf )) THEN
              GOTO 15990
            END IF
          END IF
          sint = sqrt(xi*(2 - xi))
          return
        END IF
        IF (( lambda .LE. 1 )) THEN
          wprob = explambda
          wsum = explambda
          cost = 1
          sint = 0
          icount = 0
16001     CONTINUE
            icount = icount + 1
            IF((icount .GT. 20))GO TO16002
            wprob = wprob*lambda/icount
            wsum = wsum + wprob
16010       CONTINUE
            IF((rng_seed .GT. 128))call ranmar_get
            xi = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            xi = 2*chia2*xi/(1 - xi + chia2)
            cosz = 1 - xi
            IF (( spin_effects )) THEN
              rejf = spin_rejection(qel,medium,elke,beta2,q1,cosz, spin_
     *        index,.false.)
              IF((rng_seed .GT. 128))call ranmar_get
              rnno = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF (( rnno .GT. rejf )) THEN
                GOTO 16010
              END IF
            END IF
            sinz = xi*(2 - xi)
            IF (( sinz .GT. 1.e-20 )) THEN
              sinz = Sqrt(sinz)
              IF((rng_seed .GT. 128))call ranmar_get
              xi = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              phi = xi*6.2831853
              cost = cost*cosz - sint*sinz*Cos(phi)
              sint = Sqrt(Max(0.0,(1-cost)*(1+cost)))
            END IF
            IF((( wsum .GT. sprob)))GO TO16002
          GO TO 16001
16002     CONTINUE
          return
        END IF
      END IF
      IF ((lambda .LE. 1e5 )) THEN
        IF ((find_index)) THEN
          llmbda = log(lambda)
          ai = llmbda*dllambi
          i = ai
          ai = ai - i
          IF((rng_seed .GT. 128))call ranmar_get
          xi = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF((xi .LT. ai))i = i + 1
          IF (( q1 .LT. 1e-3 )) THEN
            j = 0
          ELSE IF(( q1 .LT. 0.5 )) THEN
            aj = q1*dqmsi
            j = aj
            aj = aj - j
            IF((rng_seed .GT. 128))call ranmar_get
            xi = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            IF((xi .LT. aj))j = j + 1
          ELSE
            j = 7
          END IF
          IF ((llmbda .LT. 2.2299)) THEN
            omega2 = chia2*(lambda + 4)*(1.347006 + llmbda*( 0.209364 -
     *      llmbda*(0.45525 - llmbda*(0.50142 - 0.081234*llmbda))))
          ELSE
            omega2 = chia2*(lambda + 4)*(-2.77164 + llmbda*(2.94874 - ll
     *      mbda*(0.1535754 - llmbda*0.00552888)))
          END IF
          find_index = .false.
        END IF
16020   CONTINUE
        IF((rng_seed .GT. 128))call ranmar_get
        xi = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        ak = xi*31
        k = ak
        ak = ak - k
        IF((ak .GT. wms_array(i,j,k)))k = ims_array(i,j,k)
        a = fms_array(i,j,k)
        u = ums_array(i,j,k)
        du = ums_array(i,j,k+1) - u
        IF((rng_seed .GT. 128))call ranmar_get
        xi = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        IF (( abs(a) .LT. 0.2 )) THEN
          x1 = 0.5*(1-xi)*a
          u = u + xi*du*(1+x1*(1-xi*a))
        ELSE
          u = u - du/a*(1-Sqrt(1+xi*a*(2+a)))
        END IF
        xi = omega2*u/(1 + 0.5*omega2 - u)
        IF (( xi .GT. 1.99999 )) THEN
          xi = 1.99999
        END IF
        cost = 1 - xi
        IF (( spin_effects )) THEN
          rejf=spin_rejection(qel,medium,elke,beta2,q1,cost,spin_index,.
     *    false.)
          IF((rng_seed .GT. 128))call ranmar_get
          rnno = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF (( rnno .GT. rejf )) THEN
            GOTO 16020
          END IF
        END IF
        sint = sqrt(xi*(2-xi))
        return
      END IF
      write(i_log,*) ' '
      write(i_log,*) ' *************************************'
      write(i_log,*) ' Maximum step size in mscat exceeded! '
      write(i_log,*) ' Maximum step size initialized: 100000'
      write(i_log,*) ' Present lambda: ',lambda
      write(i_log,*) ' chia2: ',chia2
      write(i_log,*) ' q1 elke beta2: ',q1,elke,beta2
      write(i_log,*) ' medium: ',medium
      write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) ' Stopping execution'
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      end
      real*8 function spin_rejection(qel,medium,elke,beta2,q1,cost, spin
     *_index,is_single)
      implicit none
      real*8 elke,beta2,q1,cost
      integer*4 qel,medium
      logical spin_index,is_single
      common/spin_data/ spin_rej(7,0:1,0: 31,0:15,0:31), espin_min,espin
     *_max,espml,b2spin_min,b2spin_max, dbeta2,dbeta2i,dlener,dleneri,dq
     *q1,dqq1i, fool_intel_optimizer
      real*4 spin_rej,espin_min,espin_max,espml,b2spin_min,b2spin_max, d
     *beta2,dbeta2i,dlener,dleneri,dqq1,dqq1i
      logical fool_intel_optimizer
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      real*8 rnno,ai,qq1,aj,xi,ak
      integer*4 i,j,k
      save i,j
      IF (( spin_index )) THEN
        spin_index = .false.
        IF (( beta2 .GE. b2spin_min )) THEN
          ai = (beta2 - b2spin_min)*dbeta2i
          i = ai
          ai = ai - i
          i = i + 15 + 1
        ELSE IF(( elke .GT. espml )) THEN
          ai = (elke - espml)*dleneri
          i = ai
          ai = ai - i
        ELSE
          i = 0
          ai = -1
        END IF
        IF((rng_seed .GT. 128))call ranmar_get
        rnno = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        IF((rnno .LT. ai))i = i + 1
        IF (( is_single )) THEN
          j = 0
        ELSE
          qq1 = 2*q1
          qq1 = qq1/(1 + qq1)
          aj = qq1*dqq1i
          j = aj
          IF (( j .GE. 15 )) THEN
            j = 15
          ELSE
            aj = aj - j
            IF((rng_seed .GT. 128))call ranmar_get
            rnno = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            IF((rnno .LT. aj))j = j + 1
          END IF
        END IF
      END IF
      xi = Sqrt(0.5*(1-cost))
      ak = xi*31
      k = ak
      ak = ak - k
      spin_rejection = (1-ak)*spin_rej(medium,qel,i,j,k) + ak*spin_rej(m
     *edium,qel,i,j,k+1)
      return
      end
      subroutine sscat(chia2,elke,beta2,qel,medium,spin_effects,cost,sin
     *t)
      implicit none
      real*8 chia2,elke,beta2,cost,sint
      integer*4 qel,medium
      logical spin_effects
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      real*8 xi,rnno,rejf,spin_rejection,qzero
      logical spin_index
      spin_index = .true.
16030 CONTINUE
      IF((rng_seed .GT. 128))call ranmar_get
      xi = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      xi = 2*chia2*xi/(1 - xi + chia2)
      cost = 1 - xi
      IF (( spin_effects )) THEN
        qzero=0
        rejf = spin_rejection(qel,medium,elke,beta2,qzero,cost,spin_inde
     *  x,.true.)
        IF((rng_seed .GT. 128))call ranmar_get
        rnno = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        IF((rnno .GT. rejf))goto 16030
      END IF
      sint = sqrt(xi*(2 - xi))
      return
      end
      subroutine init_ms_SR
      implicit none
      common/ms_data/ ums_array(0:63,0:7,0:31), fms_array(0:63,0:7,0:31)
     *, wms_array(0:63,0:7,0:31), ims_array(0:63,0:7,0:31), llammin,llam
     *max,dllamb,dllambi,dqms,dqmsi
      real*4 ums_array,fms_array,wms_array, llammin,llammax,dllamb,dllam
     *bi,dqms,dqmsi
      integer*2 ims_array
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer*4 i,j,k
      write(i_log,'(/a,$)') 'Reading screened Rutherford MS data .......
     *........ '
      rewind(i_mscat)
      DO 16041 i=0,63
        DO 16051 j=0,7
          read(i_mscat,*) (ums_array(i,j,k),k=0,31)
          read(i_mscat,*) (fms_array(i,j,k),k=0,31)
          read(i_mscat,*) (wms_array(i,j,k),k=0,31-1)
          read(i_mscat,*) (ims_array(i,j,k),k=0,31-1)
          DO 16061 k=0,31-1
            fms_array(i,j,k) = fms_array(i,j,k+1)/fms_array(i,j,k)-1
            ims_array(i,j,k) = ims_array(i,j,k)-1
16061     CONTINUE
16062     CONTINUE
          fms_array(i,j,31)=fms_array(i,j,31-1)
16051   CONTINUE
16052   CONTINUE
16041 CONTINUE
16042 CONTINUE
      write(i_log,'(a)') ' done '
      llammin = Log(1.)
      llammax = Log(1e5)
      dllamb = (llammax-llammin)/63
      dllambi = 1./dllamb
      dqms = 0.5/7
      dqmsi = 1./dqms
      return
      end
      subroutine init_spin
      implicit none
      common/spin_data/ spin_rej(7,0:1,0: 31,0:15,0:31), espin_min,espin
     *_max,espml,b2spin_min,b2spin_max, dbeta2,dbeta2i,dlener,dleneri,dq
     *q1,dqq1i, fool_intel_optimizer
      real*4 spin_rej,espin_min,espin_max,espml,b2spin_min,b2spin_max, d
     *beta2,dbeta2i,dlener,dleneri,dqq1,dqq1i
      logical fool_intel_optimizer
      COMMON/ELECIN/ esig_e(7),psig_e(7), esige_max, psige_max, range_ep
     *(0:1,500,7), E_array(500,7), etae_ms0(500,7),etae_ms1(500,7),etap_
     *ms0(500,7),etap_ms1(500,7),q1ce_ms0(500,7),q1ce_ms1(500,7),q1cp_ms
     *0(500,7),q1cp_ms1(500,7),q2ce_ms0(500,7),q2ce_ms1(500,7),q2cp_ms0(
     *500,7),q2cp_ms1(500,7),blcce0(500,7),blcce1(500,7), EKE0(7),EKE1(7
     *), XR0(7),TEFF0(7),BLCC(7),XCC(7), ESIG0(500,7),ESIG1(500,7),PSIG0
     *(500,7),PSIG1(500,7),EDEDX0(500,7),EDEDX1(500,7),PDEDX0(500,7),PDE
     *DX1(500,7),EBR10(500,7),EBR11(500,7),PBR10(500,7),PBR11(500,7),PBR
     *20(500,7),PBR21(500,7),TMXS0(500,7),TMXS1(500,7), expeke1(7), IUNR
     *ST(7),EPSTFL(7),IAPRIM(7), sig_ismonotone(0:1,7)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/BREMPR/ DL1(8,7),DL2(8,7),DL3(8,7),DL4(8,7),DL5(8,7),DL6(8,
     *7), ALPHI(2,7),BPAR(2,7),DELPOS(2,7), WA(7,50),PZ(7,50),ZELEM(7,50
     *),RHOZ(7,50), PWR2I(50), DELCM(7),ZBRANG(7),LZBRANG(7),NNE(7), IBR
     *DST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(7,50,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/THRESH/RMT2,RMSQ, AP(7),AE(7),UP(7),UE(7),TE(7),THMOLL(7)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 eta_array(0:1,0: 31), c_array(0:1,0: 31),g_array(0:1,0: 31)
     *, earray(0: 31),tmp_array(0: 31), sum_Z2,sum_Z,sum_A,sum_pz,Z,tmp,
     *Z23,g_m,g_r,sig,dedx, tau,tauc,beta2,eta,gamma,fmax, eil,e,si1e,si
     *2e,si1p,si2p,aae,etap, elarray(0: 31),farray(0: 31), af(0: 31),bf(
     *0: 31),cf(0: 31), df(0: 31),spline,dloge,eloge
      real*4 dum1,dum2,dum3,aux_o
      real*4 fmax_array(0:15)
      integer*2 i2_array(512),ii2
      integer*4 iq,i,j,k,i_ele,iii,iZ,iiZ,n_ener,n_q,n_point,je,neke, nd
     *ata,leil,length,ii4,irec
      character spin_file*256
      character*6 string
      integer*4 lnblnk1
      integer*4 spin_unit, rec_length, want_spin_unit
      integer egs_get_unit
      character data_version*32,endianess*4
      logical swap
      real*8 fine,TF_constant
      parameter (fine=137.03604,TF_constant=0.88534138)
      real*4 tmp_4
      character c_2(2), c_4(4)
      equivalence (ii2,c_2), (tmp_4,c_4)
      DO 16071 i=1,len(spin_file)
        spin_file(i:i) = ' '
16071 CONTINUE
16072 CONTINUE
      spin_file = hen_house(:lnblnk1(hen_house)) // 'data' // '/' // 'sp
     *inms.data'
      want_spin_unit = 61
      spin_unit = egs_get_unit(want_spin_unit)
      IF (( spin_unit .LT. 1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'init_spin: failed to get a free fortran unit'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      rec_length = 276*4
      open(spin_unit,file=spin_file,form='unformatted',access='direct',
     *status='old',recl=rec_length,err=16080)
      read(spin_unit,rec=1,err=16090) data_version,endianess, espin_min,
     *espin_max,b2spin_min,b2spin_max
      swap = endianess.ne.'1234'
      IF (( swap )) THEN
        tmp_4 = espin_min
        call egs_swap_4(c_4)
        espin_min = tmp_4
        tmp_4 = espin_max
        call egs_swap_4(c_4)
        espin_max = tmp_4
        tmp_4 = b2spin_min
        call egs_swap_4(c_4)
        b2spin_min = tmp_4
        tmp_4 = b2spin_max
        call egs_swap_4(c_4)
        b2spin_max = tmp_4
      END IF
      write(i_log,'(//a,a)') 'Reading spin data base from ',spin_file(:l
     *nblnk1(spin_file))
      write(i_log,'(a)') data_version
      write(i_log,'(a,a,a)') 'Data generated on a machine with ',endiane
     *ss, ' endianess'
      write(i_log,'(a,a)') 'The endianess of this CPU is ','1234'
      IF((swap))write(i_log,'(a)') '=> will need to do byte swaping'
      write(i_log,'(a,2f9.2,2f9.5,//)') 'Ranges: ',espin_min,espin_max,
     *b2spin_min,b2spin_max
      n_ener = 15
      n_q = 15
      n_point = 31
      dloge = log(espin_max/espin_min)/n_ener
      eloge = log(espin_min)
      earray(0) = espin_min
      IF (( fool_intel_optimizer )) THEN
        write(25,*) 'Energy grid:'
      END IF
      DO 16101 i=1,n_ener
        eloge = eloge + dloge
        earray(i) = exp(eloge)
        IF (( fool_intel_optimizer )) THEN
          write(25,*) i,earray(i)
        END IF
16101 CONTINUE
16102 CONTINUE
      dbeta2 = (b2spin_max - b2spin_min)/n_ener
      beta2 = b2spin_min
      earray(n_ener+1) = espin_max
      DO 16111 i=n_ener+2,2*n_ener+1
        beta2 = beta2 + dbeta2
        IF (( beta2 .LT. 0.999 )) THEN
          earray(i) = prm*1000.0*(1/sqrt(1-beta2)-1)
        ELSE
          earray(i) = 50585.1
        END IF
        IF (( fool_intel_optimizer )) THEN
          write(25,*) i,earray(i)
        END IF
16111 CONTINUE
16112 CONTINUE
      espin_min = espin_min/1000
      espin_max = espin_max/1000
      dlener = Log(espin_max/espin_min)/15
      dleneri = 1/dlener
      espml = Log(espin_min)
      dbeta2 = (b2spin_max-b2spin_min)/15
      dbeta2i = 1/dbeta2
      dqq1 = 0.5/15
      dqq1i = 1/dqq1
      DO 16121 medium=1,NMED
        write(i_log,'(a,i4,a,$)') '  medium ',medium,' .................
     *.... '
        DO 16131 iq=0,1
          DO 16141 i=0, 31
            eta_array(iq,i)=0
            c_array(iq,i)=0
            g_array(iq,i)=0
            DO 16151 j=0,15
              DO 16161 k=0,31
                spin_rej(medium,iq,i,j,k) = 0
16161         CONTINUE
16162         CONTINUE
16151       CONTINUE
16152       CONTINUE
16141     CONTINUE
16142     CONTINUE
16131   CONTINUE
16132   CONTINUE
        sum_Z2=0
        sum_A=0
        sum_pz=0
        sum_Z=0
        DO 16171 i_ele=1,NNE(medium)
          Z = ZELEM(medium,i_ele)
          iZ = int(Z+0.5)
          IF (( fool_intel_optimizer )) THEN
            write(25,*) ' Z = ',iZ
          END IF
          tmp = PZ(medium,i_ele)*Z*(Z+1)
          sum_Z2 = sum_Z2 + tmp
          sum_Z = sum_Z + PZ(medium,i_ele)*Z
          sum_A = sum_A + PZ(medium,i_ele)*WA(medium,i_ele)
          sum_pz = sum_pz + PZ(medium,i_ele)
          Z23 = Z**0.6666667
          DO 16181 iq=0,1
            DO 16191 i=0, 31
              irec = 1 + (iz-1)*4*(n_ener+1) + 2*iq*(n_ener+1) + i+1
              IF (( fool_intel_optimizer )) THEN
                write(25,*) '**** energy ',i,earray(i),irec
              END IF
              read(spin_unit,rec=irec,err=16090) dum1,dum2,dum3,aux_o,fm
     *        ax_array,i2_array
              IF (( swap )) THEN
                tmp_4 = dum1
                call egs_swap_4(c_4)
                dum1 = tmp_4
                tmp_4 = dum2
                call egs_swap_4(c_4)
                dum2 = tmp_4
                tmp_4 = dum3
                call egs_swap_4(c_4)
                dum3 = tmp_4
                tmp_4 = aux_o
                call egs_swap_4(c_4)
                aux_o = tmp_4
              END IF
              eta_array(iq,i)=eta_array(iq,i)+tmp*Log(Z23*aux_o)
              tau = earray(i)/prm*0.001
              beta2 = tau*(tau+2)/(tau+1)**2
              eta = Z23/(fine*TF_constant)**2*aux_o/4/tau/(tau+2)
              c_array(iq,i)=c_array(iq,i)+ tmp*(Log(1+1/eta)-1/(1+eta))*
     *        dum1*dum3
              g_array(iq,i)=g_array(iq,i)+tmp*dum2
              DO 16201 j=0,15
                tmp_4 = fmax_array(j)
                IF((swap))call egs_swap_4(c_4)
                DO 16211 k=0,31
                  ii2 = i2_array((n_point+1)*j + k+1)
                  IF((swap))call egs_swap_2(c_2)
                  ii4 = ii2
                  IF((ii4 .LT. 0))ii4 = ii4 + 65536
                  dum1 = ii4
                  dum1 = dum1*tmp_4/65535
                  spin_rej(medium,iq,i,j,k) = spin_rej(medium,iq,i,j,k)
     *            + tmp*dum1
16211           CONTINUE
16212           CONTINUE
16201         CONTINUE
16202         CONTINUE
16191       CONTINUE
16192       CONTINUE
16181     CONTINUE
16182     CONTINUE
16171   CONTINUE
16172   CONTINUE
        DO 16221 iq=0,1
          DO 16231 i=0, 31
            DO 16241 j=0,15
              fmax = 0
              DO 16251 k=0,31
                IF (( spin_rej(medium,iq,i,j,k) .GT. fmax )) THEN
                  fmax = spin_rej(medium,iq,i,j,k)
                END IF
16251         CONTINUE
16252         CONTINUE
              DO 16261 k=0,31
                spin_rej(medium,iq,i,j,k) = spin_rej(medium,iq,i,j,k)/fm
     *          ax
16261         CONTINUE
16262         CONTINUE
16241       CONTINUE
16242       CONTINUE
16231     CONTINUE
16232     CONTINUE
16221   CONTINUE
16222   CONTINUE
        IF (( fool_intel_optimizer )) THEN
          write(25,*) 'Spin corrections as read in from file'
        END IF
        DO 16271 i=0, 31
          tau = earray(i)/prm*0.001
          beta2 = tau*(tau+2)/(tau+1)**2
          DO 16281 iq=0,1
            aux_o = Exp(eta_array(iq,i)/sum_Z2)/(fine*TF_constant)**2
            eta_array(iq,i) = 0.26112447*aux_o*blcc(medium)/xcc(medium)
            eta = aux_o/4/tau/(tau+2)
            gamma = 3*(1+eta)*(Log(1+1/eta)*(1+2*eta)-2)/ (Log(1+1/eta)*
     *      (1+eta)-1)
            g_array(iq,i) = g_array(iq,i)/sum_Z2/gamma
            c_array(iq,i) = c_array(iq,i)/sum_Z2/(Log(1+1/eta)-1/(1+eta)
     *      )
16281     CONTINUE
16282     CONTINUE
          IF (( fool_intel_optimizer )) THEN
            write(25,*) i,earray(i),eta_array(0,i),eta_array(1,i), c_arr
     *      ay(0,i),c_array(1,i),g_array(0,i),g_array(1,i)
          END IF
16271   CONTINUE
16272   CONTINUE
        eil = (1 - eke0(medium))/eke1(medium)
        e = Exp(eil)
        IF (( e .LE. espin_min )) THEN
          si1e = eta_array(0,0)
          si1p = eta_array(1,0)
        ELSE
          IF (( e .LE. espin_max )) THEN
            aae = (eil-espml)*dleneri
            je = aae
            aae = aae - je
          ELSE
            tau = e/prm
            beta2 = tau*(tau+2)/(tau+1)**2
            aae = (beta2 - b2spin_min)*dbeta2i
            je = aae
            aae = aae - je
            je = je + 15 + 1
          END IF
          si1e = (1-aae)*eta_array(0,je) + aae*eta_array(0,je+1)
          si1p = (1-aae)*eta_array(1,je) + aae*eta_array(1,je+1)
        END IF
        neke = meke(medium)
        IF (( fool_intel_optimizer )) THEN
          write(25,*) 'Interpolation table for eta correction'
        END IF
        DO 16291 i=1,neke - 1
          eil = (i+1 - eke0(medium))/eke1(medium)
          e = Exp(eil)
          IF (( e .LE. espin_min )) THEN
            si2e = eta_array(0,0)
            si2p = eta_array(1,0)
          ELSE
            IF (( e .LE. espin_max )) THEN
              aae = (eil-espml)*dleneri
              je = aae
              aae = aae - je
            ELSE
              tau = e/prm
              beta2 = tau*(tau+2)/(tau+1)**2
              aae = (beta2 - b2spin_min)*dbeta2i
              je = aae
              aae = aae - je
              je = je + 15 + 1
            END IF
            si2e = (1-aae)*eta_array(0,je) + aae*eta_array(0,je+1)
            si2p = (1-aae)*eta_array(1,je) + aae*eta_array(1,je+1)
          END IF
          etae_ms1(i,medium) = (si2e - si1e)*eke1(medium)
          etae_ms0(i,medium) = si2e - etae_ms1(i,medium)*eil
          etap_ms1(i,medium) = (si2p - si1p)*eke1(medium)
          etap_ms0(i,medium) = si2p - etap_ms1(i,medium)*eil
          IF (( fool_intel_optimizer )) THEN
            write(25,*) i,e,si2e,si2p,etae_ms1(i,medium), etae_ms0(i,med
     *      ium),etap_ms1(i,medium),etap_ms0(i,medium)
          END IF
          si1e = si2e
          si1p = si2p
16291   CONTINUE
16292   CONTINUE
        etae_ms1(neke,medium) = etae_ms1(neke-1,medium)
        etae_ms0(neke,medium) = etae_ms0(neke-1,medium)
        etap_ms1(neke,medium) = etap_ms1(neke-1,medium)
        etap_ms0(neke,medium) = etap_ms0(neke-1,medium)
        IF (( fool_intel_optimizer )) THEN
          write(25,*) 'elarray:'
        END IF
        DO 16301 i=0,15
          elarray(i) = Log(earray(i)/1000)
          farray(i) = c_array(0,i)
          IF (( fool_intel_optimizer )) THEN
            write(25,*) elarray(i),earray(i)
          END IF
16301   CONTINUE
16302   CONTINUE
        DO 16311 i=15+1, 31-1
          elarray(i) = Log(earray(i+1)/1000)
          farray(i) = c_array(0,i+1)
          IF (( fool_intel_optimizer )) THEN
            write(25,*) elarray(i),earray(i+1)
          END IF
16311   CONTINUE
16312   CONTINUE
        ndata =  31+1
        IF (( ue(medium) .GT. 1e5 )) THEN
          elarray(ndata-1) = Log(ue(medium))
        ELSE
          elarray(ndata-1) = Log(1e5)
        END IF
        farray(ndata-1) = 1
        call set_spline(elarray,farray,af,bf,cf,df,ndata)
        eil = (1 - eke0(medium))/eke1(medium)
        si1e = spline(eil,elarray,af,bf,cf,df,ndata)
        IF (( fool_intel_optimizer )) THEN
          write(25,*) 'Interpolation table for q1 correction (e-)'
        END IF
        DO 16321 i=1,neke-1
          eil = (i+1 - eke0(medium))/eke1(medium)
          si2e = spline(eil,elarray,af,bf,cf,df,ndata)
          q1ce_ms1(i,medium) = (si2e - si1e)*eke1(medium)
          q1ce_ms0(i,medium) = si2e - q1ce_ms1(i,medium)*eil
          IF (( fool_intel_optimizer )) THEN
            write(25,*) Exp(eil),si2e,q1ce_ms1(i,medium), q1ce_ms0(i,med
     *      ium)
          END IF
          si1e = si2e
16321   CONTINUE
16322   CONTINUE
        q1ce_ms1(neke,medium) = q1ce_ms1(neke-1,medium)
        q1ce_ms0(neke,medium) = q1ce_ms0(neke-1,medium)
        IF (( fool_intel_optimizer )) THEN
          write(25,*) 'Postrons:'
        END IF
        DO 16331 i=0,15
          farray(i) = c_array(1,i)
16331   CONTINUE
16332   CONTINUE
        DO 16341 i=15+1, 31-1
          farray(i) = c_array(1,i+1)
16341   CONTINUE
16342   CONTINUE
        call set_spline(elarray,farray,af,bf,cf,df,ndata)
        eil = (1 - eke0(medium))/eke1(medium)
        si1e = spline(eil,elarray,af,bf,cf,df,ndata)
        IF (( fool_intel_optimizer )) THEN
          write(25,*) 'Interpolation table for q1 correction (e+)'
        END IF
        DO 16351 i=1,neke-1
          eil = (i+1 - eke0(medium))/eke1(medium)
          si2e = spline(eil,elarray,af,bf,cf,df,ndata)
          q1cp_ms1(i,medium) = (si2e - si1e)*eke1(medium)
          q1cp_ms0(i,medium) = si2e - q1cp_ms1(i,medium)*eil
          IF (( fool_intel_optimizer )) THEN
            write(25,*) Exp(eil),si2e,q1cp_ms1(i,medium), q1cp_ms0(i,med
     *      ium)
          END IF
          si1e = si2e
16351   CONTINUE
16352   CONTINUE
        q1cp_ms1(neke,medium) = q1cp_ms1(neke-1,medium)
        q1cp_ms0(neke,medium) = q1cp_ms0(neke-1,medium)
        DO 16361 i=0,15
          farray(i) = g_array(0,i)
16361   CONTINUE
16362   CONTINUE
        DO 16371 i=15+1, 31-1
          farray(i) = g_array(0,i+1)
16371   CONTINUE
16372   CONTINUE
        call set_spline(elarray,farray,af,bf,cf,df,ndata)
        eil = (1 - eke0(medium))/eke1(medium)
        si1e = spline(eil,elarray,af,bf,cf,df,ndata)
        IF (( fool_intel_optimizer )) THEN
          write(25,*) 'Interpolation table for q2 correction (e-)'
        END IF
        DO 16381 i=1,neke-1
          eil = (i+1 - eke0(medium))/eke1(medium)
          si2e = spline(eil,elarray,af,bf,cf,df,ndata)
          q2ce_ms1(i,medium) = (si2e - si1e)*eke1(medium)
          q2ce_ms0(i,medium) = si2e - q2ce_ms1(i,medium)*eil
          IF (( fool_intel_optimizer )) THEN
            write(25,*) Exp(eil),si2e,q2ce_ms1(i,medium), q2ce_ms0(i,med
     *      ium)
          END IF
          si1e = si2e
16381   CONTINUE
16382   CONTINUE
        q2ce_ms1(neke,medium) = q2ce_ms1(neke-1,medium)
        q2ce_ms0(neke,medium) = q2ce_ms0(neke-1,medium)
        DO 16391 i=0,15
          farray(i) = g_array(1,i)
16391   CONTINUE
16392   CONTINUE
        DO 16401 i=15+1, 31-1
          farray(i) = g_array(1,i+1)
16401   CONTINUE
16402   CONTINUE
        call set_spline(elarray,farray,af,bf,cf,df,ndata)
        eil = (1 - eke0(medium))/eke1(medium)
        si1e = spline(eil,elarray,af,bf,cf,df,ndata)
        IF (( fool_intel_optimizer )) THEN
          write(25,*) 'Interpolation table for q2 correction (e+)'
        END IF
        DO 16411 i=1,neke-1
          eil = (i+1 - eke0(medium))/eke1(medium)
          si2e = spline(eil,elarray,af,bf,cf,df,ndata)
          q2cp_ms1(i,medium) = (si2e - si1e)*eke1(medium)
          q2cp_ms0(i,medium) = si2e - q2cp_ms1(i,medium)*eil
          IF (( fool_intel_optimizer )) THEN
            write(25,*) Exp(eil),si2e,q2cp_ms1(i,medium), q2cp_ms0(i,med
     *      ium)
          END IF
          si1e = si2e
16411   CONTINUE
16412   CONTINUE
        q2cp_ms1(neke,medium) = q2cp_ms1(neke-1,medium)
        q2cp_ms0(neke,medium) = q2cp_ms0(neke-1,medium)
        tauc = te(medium)/prm
        si1e = 1
        DO 16421 i=1,neke-1
          eil = (i+1 - eke0(medium))/eke1(medium)
          e = Exp(eil)
          leil=i+1
          tau=e/prm
          IF (( tau .GT. 2*tauc )) THEN
            sig=esig1(Leil,MEDIUM)*eil+esig0(Leil,MEDIUM)
            dedx=ededx1(Leil,MEDIUM)*eil+ededx0(Leil,MEDIUM)
            sig = sig/dedx
            IF (( sig .GT. 1e-6 )) THEN
              etap=etae_ms1(Leil,MEDIUM)*eil+etae_ms0(Leil,MEDIUM)
              eta = 0.25*etap*xcc(medium)/blcc(medium)/tau/(tau+2)
              g_r = (1+2*eta)*Log(1+1/eta)-2
              g_m = Log(0.5*tau/tauc)+ (1+((tau+2)/(tau+1))**2)*Log(2*(t
     *        au-tauc+2)/(tau+4))- 0.25*(tau+2)*(tau+2+2*(2*tau+1)/(tau+
     *        1)**2)* Log((tau+4)*(tau-tauc)/tau/(tau-tauc+2))+ 0.5*(tau
     *        -2*tauc)*(tau+2)*(1/(tau-tauc)-1/(tau+1)**2)
              IF (( g_m .LT. g_r )) THEN
                g_m = g_m/g_r
              ELSE
                g_m = 1
              END IF
              si2e = 1 - g_m*sum_Z/sum_Z2
            ELSE
              si2e = 1
            END IF
          ELSE
            si2e = 1
          END IF
          blcce1(i,medium) = (si2e - si1e)*eke1(medium)
          blcce0(i,medium) = si2e - blcce1(i,medium)*eil
          si1e = si2e
16421   CONTINUE
16422   CONTINUE
        blcce1(neke,medium) = blcce1(neke-1,medium)
        blcce0(neke,medium) = blcce0(neke-1,medium)
        write(i_log,'(a)') ' done'
16121 CONTINUE
16122 CONTINUE
      close(spin_unit)
      return
16080 write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(a,a)') 'Failed to open spin data file ',spin_file(:l
     *nblnk1(spin_file))
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
16090 write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) 'Error while reading spin data file for element',iZ
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      return
      end
      subroutine init_spin_old
      implicit none
      common/spin_data/ spin_rej(7,0:1,0: 31,0:15,0:31), espin_min,espin
     *_max,espml,b2spin_min,b2spin_max, dbeta2,dbeta2i,dlener,dleneri,dq
     *q1,dqq1i, fool_intel_optimizer
      real*4 spin_rej,espin_min,espin_max,espml,b2spin_min,b2spin_max, d
     *beta2,dbeta2i,dlener,dleneri,dqq1,dqq1i
      logical fool_intel_optimizer
      COMMON/ELECIN/ esig_e(7),psig_e(7), esige_max, psige_max, range_ep
     *(0:1,500,7), E_array(500,7), etae_ms0(500,7),etae_ms1(500,7),etap_
     *ms0(500,7),etap_ms1(500,7),q1ce_ms0(500,7),q1ce_ms1(500,7),q1cp_ms
     *0(500,7),q1cp_ms1(500,7),q2ce_ms0(500,7),q2ce_ms1(500,7),q2cp_ms0(
     *500,7),q2cp_ms1(500,7),blcce0(500,7),blcce1(500,7), EKE0(7),EKE1(7
     *), XR0(7),TEFF0(7),BLCC(7),XCC(7), ESIG0(500,7),ESIG1(500,7),PSIG0
     *(500,7),PSIG1(500,7),EDEDX0(500,7),EDEDX1(500,7),PDEDX0(500,7),PDE
     *DX1(500,7),EBR10(500,7),EBR11(500,7),PBR10(500,7),PBR11(500,7),PBR
     *20(500,7),PBR21(500,7),TMXS0(500,7),TMXS1(500,7), expeke1(7), IUNR
     *ST(7),EPSTFL(7),IAPRIM(7), sig_ismonotone(0:1,7)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/BREMPR/ DL1(8,7),DL2(8,7),DL3(8,7),DL4(8,7),DL5(8,7),DL6(8,
     *7), ALPHI(2,7),BPAR(2,7),DELPOS(2,7), WA(7,50),PZ(7,50),ZELEM(7,50
     *),RHOZ(7,50), PWR2I(50), DELCM(7),ZBRANG(7),LZBRANG(7),NNE(7), IBR
     *DST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(7,50,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/THRESH/RMT2,RMSQ, AP(7),AE(7),UP(7),UE(7),TE(7),THMOLL(7)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 eta_array(0:1,0: 31), c_array(0:1,0: 31),g_array(0:1,0: 31)
     *, earray(0: 31),tmp_array(0: 31), sum_Z2,sum_Z,sum_A,sum_pz,Z,tmp,
     *Z23,g_m,g_r,sig,dedx, dum1,dum2,dum3,aux_o,tau,tauc,beta2,eta,gamm
     *a,fmax, eil,e,si1e,si2e,si1p,si2p,aae,etap, elarray(0: 31),farray(
     *0: 31), af(0: 31),bf(0: 31),cf(0: 31), df(0: 31),spline
      integer*4 iq,i,j,k,i_ele,iii,iZ,iiZ,n_ener,n_q,n_point,je,neke, nd
     *ata,leil,length,want_spin_unit,spin_unit,egs_get_unit
      character spin_file*256
      character*6 string
      integer*4 lnblnk1
      real*8 fine,TF_constant
      parameter (fine=137.03604,TF_constant=0.88534138)
      DO 16431 i=1,len(spin_file)
        spin_file(i:i) = ' '
16431 CONTINUE
16432 CONTINUE
      spin_file = hen_house(:lnblnk1(hen_house)) // 'data' // '/' // 'sp
     *inms' // '/' // 'z000'
      length = lnblnk1(spin_file)
      DO 16441 medium=1,NMED
        write(i_log,'(a,i4,a,$)') '  Initializing spin data for medium '
     *  ,medium, ' ..................... '
        DO 16451 iq=0,1
          DO 16461 i=0, 31
            eta_array(iq,i)=0
            c_array(iq,i)=0
            g_array(iq,i)=0
            DO 16471 j=0,15
              DO 16481 k=0,31
                spin_rej(medium,iq,i,j,k) = 0
16481         CONTINUE
16482         CONTINUE
16471       CONTINUE
16472       CONTINUE
16461     CONTINUE
16462     CONTINUE
16451   CONTINUE
16452   CONTINUE
        sum_Z2=0
        sum_A=0
        sum_pz=0
        sum_Z=0
        DO 16491 i_ele=1,NNE(medium)
          Z = ZELEM(medium,i_ele)
          iZ = int(Z+0.5)
          tmp = PZ(medium,i_ele)*Z*(Z+1)
          iii = iZ/100
          spin_file(length-2:length-2) = char(iii+48)
          iiZ = iZ - iii*100
          iii = iiZ/10
          spin_file(length-1:length-1) = char(iii+48)
          iiZ = iiZ - 10*iii
          spin_file(length:length) = char(iiZ+48)
          want_spin_unit = 61
          spin_unit = egs_get_unit(want_spin_unit)
          IF (( spin_unit .LT. 1 )) THEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,*) 'init_spin: failed to get a free fortran unit
     *'
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          open(spin_unit,file=spin_file,status='old',err=16500)
          read(spin_unit,*) espin_min,espin_max,b2spin_min,b2spin_max
          read(spin_unit,*) n_ener,n_q,n_point
          IF (( n_ener .NE. 15 .OR. n_q .NE. 15 .OR. n_point .NE. 31)) T
     *    HEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,*) ' Wrong spin file for Z = ',iZ
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          sum_Z2 = sum_Z2 + tmp
          sum_Z = sum_Z + PZ(medium,i_ele)*Z
          sum_A = sum_A + PZ(medium,i_ele)*WA(medium,i_ele)
          sum_pz = sum_pz + PZ(medium,i_ele)
          Z23 = Z**0.6666667
          DO 16511 iq=0,1
            read(spin_unit,*)
            read(spin_unit,*)
            DO 16521 i=0, 31
              read(spin_unit,'(a,g14.6)') string,earray(i)
              read(spin_unit,*) dum1,dum2,dum3,aux_o
              eta_array(iq,i)=eta_array(iq,i)+tmp*Log(Z23*aux_o)
              tau = earray(i)/prm*0.001
              beta2 = tau*(tau+2)/(tau+1)**2
              eta = Z23/(fine*TF_constant)**2*aux_o/4/tau/(tau+2)
              c_array(iq,i)=c_array(iq,i)+ tmp*(Log(1+1/eta)-1/(1+eta))*
     *        dum1*dum3
              g_array(iq,i)=g_array(iq,i)+tmp*dum2
              DO 16531 j=0,15
                read(spin_unit,*) tmp_array
                DO 16541 k=0,31
                  spin_rej(medium,iq,i,j,k) = spin_rej(medium,iq,i,j,k)
     *            + tmp*tmp_array(k)
16541           CONTINUE
16542           CONTINUE
16531         CONTINUE
16532         CONTINUE
16521       CONTINUE
16522       CONTINUE
16511     CONTINUE
16512     CONTINUE
          close(spin_unit)
16491   CONTINUE
16492   CONTINUE
        DO 16551 iq=0,1
          DO 16561 i=0, 31
            DO 16571 j=0,15
              fmax = 0
              DO 16581 k=0,31
                IF (( spin_rej(medium,iq,i,j,k) .GT. fmax )) THEN
                  fmax = spin_rej(medium,iq,i,j,k)
                END IF
16581         CONTINUE
16582         CONTINUE
              DO 16591 k=0,31
                spin_rej(medium,iq,i,j,k) = spin_rej(medium,iq,i,j,k)/fm
     *          ax
16591         CONTINUE
16592         CONTINUE
16571       CONTINUE
16572       CONTINUE
16561     CONTINUE
16562     CONTINUE
16551   CONTINUE
16552   CONTINUE
        DO 16601 i=0, 31
          tau = earray(i)/prm*0.001
          beta2 = tau*(tau+2)/(tau+1)**2
          DO 16611 iq=0,1
            aux_o = Exp(eta_array(iq,i)/sum_Z2)/(fine*TF_constant)**2
            eta_array(iq,i) = 0.26112447*aux_o*blcc(medium)/xcc(medium)
            eta = aux_o/4/tau/(tau+2)
            gamma = 3*(1+eta)*(Log(1+1/eta)*(1+2*eta)-2)/ (Log(1+1/eta)*
     *      (1+eta)-1)
            g_array(iq,i) = g_array(iq,i)/sum_Z2/gamma
            c_array(iq,i) = c_array(iq,i)/sum_Z2/(Log(1+1/eta)-1/(1+eta)
     *      )
16611     CONTINUE
16612     CONTINUE
16601   CONTINUE
16602   CONTINUE
        espin_min = espin_min/1000
        espin_max = espin_max/1000
        dlener = Log(espin_max/espin_min)/15
        dleneri = 1/dlener
        espml = Log(espin_min)
        dbeta2 = (b2spin_max-b2spin_min)/15
        dbeta2i = 1/dbeta2
        dqq1 = 0.5/15
        dqq1i = 1/dqq1
        eil = (1 - eke0(medium))/eke1(medium)
        e = Exp(eil)
        IF (( e .LE. espin_min )) THEN
          si1e = eta_array(0,0)
          si1p = eta_array(1,0)
        ELSE
          IF (( e .LE. espin_max )) THEN
            aae = (eil-espml)*dleneri
            je = aae
            aae = aae - je
          ELSE
            tau = e/prm
            beta2 = tau*(tau+2)/(tau+1)**2
            aae = (beta2 - b2spin_min)*dbeta2i
            je = aae
            aae = aae - je
            je = je + 15 + 1
          END IF
          si1e = (1-aae)*eta_array(0,je) + aae*eta_array(0,je+1)
          si1p = (1-aae)*eta_array(1,je) + aae*eta_array(1,je+1)
        END IF
        neke = meke(medium)
        DO 16621 i=1,neke - 1
          eil = (i+1 - eke0(medium))/eke1(medium)
          e = Exp(eil)
          IF (( e .LE. espin_min )) THEN
            si2e = eta_array(0,0)
            si2p = eta_array(1,0)
          ELSE
            IF (( e .LE. espin_max )) THEN
              aae = (eil-espml)*dleneri
              je = aae
              aae = aae - je
            ELSE
              tau = e/prm
              beta2 = tau*(tau+2)/(tau+1)**2
              aae = (beta2 - b2spin_min)*dbeta2i
              je = aae
              aae = aae - je
              je = je + 15 + 1
            END IF
            si2e = (1-aae)*eta_array(0,je) + aae*eta_array(0,je+1)
            si2p = (1-aae)*eta_array(1,je) + aae*eta_array(1,je+1)
          END IF
          etae_ms1(i,medium) = (si2e - si1e)*eke1(medium)
          etae_ms0(i,medium) = si2e - etae_ms1(i,medium)*eil
          etap_ms1(i,medium) = (si2p - si1p)*eke1(medium)
          etap_ms0(i,medium) = si2p - etap_ms1(i,medium)*eil
          si1e = si2e
          si1p = si2p
16621   CONTINUE
16622   CONTINUE
        etae_ms1(neke,medium) = etae_ms1(neke-1,medium)
        etae_ms0(neke,medium) = etae_ms0(neke-1,medium)
        etap_ms1(neke,medium) = etap_ms1(neke-1,medium)
        etap_ms0(neke,medium) = etap_ms0(neke-1,medium)
        DO 16631 i=0,15
          elarray(i) = Log(earray(i)/1000)
          farray(i) = c_array(0,i)
16631   CONTINUE
16632   CONTINUE
        DO 16641 i=15+1, 31-1
          elarray(i) = Log(earray(i+1)/1000)
          farray(i) = c_array(0,i+1)
16641   CONTINUE
16642   CONTINUE
        ndata =  31+1
        IF (( ue(medium) .GT. 1e5 )) THEN
          elarray(ndata-1) = Log(ue(medium))
        ELSE
          elarray(ndata-1) = Log(1e5)
        END IF
        farray(ndata-1) = 1
        call set_spline(elarray,farray,af,bf,cf,df,ndata)
        eil = (1 - eke0(medium))/eke1(medium)
        si1e = spline(eil,elarray,af,bf,cf,df,ndata)
        DO 16651 i=1,neke-1
          eil = (i+1 - eke0(medium))/eke1(medium)
          si2e = spline(eil,elarray,af,bf,cf,df,ndata)
          q1ce_ms1(i,medium) = (si2e - si1e)*eke1(medium)
          q1ce_ms0(i,medium) = si2e - q1ce_ms1(i,medium)*eil
          si1e = si2e
16651   CONTINUE
16652   CONTINUE
        q1ce_ms1(neke,medium) = q1ce_ms1(neke-1,medium)
        q1ce_ms0(neke,medium) = q1ce_ms0(neke-1,medium)
        DO 16661 i=0,15
          farray(i) = c_array(1,i)
16661   CONTINUE
16662   CONTINUE
        DO 16671 i=15+1, 31-1
          farray(i) = c_array(1,i+1)
16671   CONTINUE
16672   CONTINUE
        call set_spline(elarray,farray,af,bf,cf,df,ndata)
        eil = (1 - eke0(medium))/eke1(medium)
        si1e = spline(eil,elarray,af,bf,cf,df,ndata)
        DO 16681 i=1,neke-1
          eil = (i+1 - eke0(medium))/eke1(medium)
          si2e = spline(eil,elarray,af,bf,cf,df,ndata)
          q1cp_ms1(i,medium) = (si2e - si1e)*eke1(medium)
          q1cp_ms0(i,medium) = si2e - q1cp_ms1(i,medium)*eil
          si1e = si2e
16681   CONTINUE
16682   CONTINUE
        q1cp_ms1(neke,medium) = q1cp_ms1(neke-1,medium)
        q1cp_ms0(neke,medium) = q1cp_ms0(neke-1,medium)
        DO 16691 i=0,15
          farray(i) = g_array(0,i)
16691   CONTINUE
16692   CONTINUE
        DO 16701 i=15+1, 31-1
          farray(i) = g_array(0,i+1)
16701   CONTINUE
16702   CONTINUE
        call set_spline(elarray,farray,af,bf,cf,df,ndata)
        eil = (1 - eke0(medium))/eke1(medium)
        si1e = spline(eil,elarray,af,bf,cf,df,ndata)
        DO 16711 i=1,neke-1
          eil = (i+1 - eke0(medium))/eke1(medium)
          si2e = spline(eil,elarray,af,bf,cf,df,ndata)
          q2ce_ms1(i,medium) = (si2e - si1e)*eke1(medium)
          q2ce_ms0(i,medium) = si2e - q2ce_ms1(i,medium)*eil
          si1e = si2e
16711   CONTINUE
16712   CONTINUE
        q2ce_ms1(neke,medium) = q2ce_ms1(neke-1,medium)
        q2ce_ms0(neke,medium) = q2ce_ms0(neke-1,medium)
        DO 16721 i=0,15
          farray(i) = g_array(1,i)
16721   CONTINUE
16722   CONTINUE
        DO 16731 i=15+1, 31-1
          farray(i) = g_array(1,i+1)
16731   CONTINUE
16732   CONTINUE
        call set_spline(elarray,farray,af,bf,cf,df,ndata)
        eil = (1 - eke0(medium))/eke1(medium)
        si1e = spline(eil,elarray,af,bf,cf,df,ndata)
        DO 16741 i=1,neke-1
          eil = (i+1 - eke0(medium))/eke1(medium)
          si2e = spline(eil,elarray,af,bf,cf,df,ndata)
          q2cp_ms1(i,medium) = (si2e - si1e)*eke1(medium)
          q2cp_ms0(i,medium) = si2e - q2cp_ms1(i,medium)*eil
16741   CONTINUE
16742   CONTINUE
        q2cp_ms1(neke,medium) = q2cp_ms1(neke-1,medium)
        q2cp_ms0(neke,medium) = q2cp_ms0(neke-1,medium)
        tauc = te(medium)/prm
        si1e = 1
        DO 16751 i=1,neke-1
          eil = (i+1 - eke0(medium))/eke1(medium)
          e = Exp(eil)
          leil=i+1
          tau=e/prm
          IF (( tau .GT. 2*tauc )) THEN
            sig=esig1(Leil,MEDIUM)*eil+esig0(Leil,MEDIUM)
            dedx=ededx1(Leil,MEDIUM)*eil+ededx0(Leil,MEDIUM)
            sig = sig/dedx
            IF (( sig .GT. 1e-6 )) THEN
              etap=etae_ms1(Leil,MEDIUM)*eil+etae_ms0(Leil,MEDIUM)
              eta = 0.25*etap*xcc(medium)/blcc(medium)/tau/(tau+2)
              g_r = (1+2*eta)*Log(1+1/eta)-2
              g_m = Log(0.5*tau/tauc)+ (1+((tau+2)/(tau+1))**2)*Log(2*(t
     *        au-tauc+2)/(tau+4))- 0.25*(tau+2)*(tau+2+2*(2*tau+1)/(tau+
     *        1)**2)* Log((tau+4)*(tau-tauc)/tau/(tau-tauc+2))+ 0.5*(tau
     *        -2*tauc)*(tau+2)*(1/(tau-tauc)-1/(tau+1)**2)
              IF (( g_m .LT. g_r )) THEN
                g_m = g_m/g_r
              ELSE
                g_m = 1
              END IF
              si2e = 1 - g_m*sum_Z/sum_Z2
            ELSE
              si2e = 1
            END IF
          ELSE
            si2e = 1
          END IF
          blcce1(i,medium) = (si2e - si1e)*eke1(medium)
          blcce0(i,medium) = si2e - blcce1(i,medium)*eil
          si1e = si2e
16751   CONTINUE
16752   CONTINUE
        blcce1(neke,medium) = blcce1(neke-1,medium)
        blcce0(neke,medium) = blcce0(neke-1,medium)
        write(i_log,'(a)') ' done'
16441 CONTINUE
16442 CONTINUE
      return
16500 write(i_log,*) ' ******************** Error in init_spin *********
     *********** '
      write(i_log,'(a,a)') '  could not open file ',spin_file
      write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) ' terminating execution '
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      end
      subroutine msdist_pII ( e0,eloss,tustep,rhof,med,qel,spin_effects,
     *u0,v0,w0,x0,y0,z0,  us,vs,ws,xf,yf,zf,ustep )
      implicit none
      real*8 e0,  eloss,  rhof,  tustep,  u0,  v0,  w0,  x0,  y0,  z0
      integer*4 med, qel
      logical spin_effects
      real*8 us,  vs,  ws,  xf,  yf,  zf,  ustep
      real*8 b,  blccc,  xcccc,  c,  eta,eta1,  chia2,  chilog,  cphi0,
     *  cphi1,  cphi2,  w1,  w2,  w1v2,  delta,  e,  elke,  beta2,  etap
     *,  xi_corr,  ms_corr, tau,  tau2,  epsilon,  epsilonp,  temp,temp1
     *, temp2,  factor,  gamma,  lambda,   p2,  p2i,  q1,  rhophi2,  sin
     *t0,  sint02,  sint0i,  sint1,  sint2,  sphi0,   sphi1,  sphi2,  u2
     *p,  u2,  v2,  ut,  vt,  wt,  xi,  xphi,  xphi2,  yphi,  yphi2
      logical find_index,  spin_index
      integer*4 lelke
      COMMON/ELECIN/ esig_e(7),psig_e(7), esige_max, psige_max, range_ep
     *(0:1,500,7), E_array(500,7), etae_ms0(500,7),etae_ms1(500,7),etap_
     *ms0(500,7),etap_ms1(500,7),q1ce_ms0(500,7),q1ce_ms1(500,7),q1cp_ms
     *0(500,7),q1cp_ms1(500,7),q2ce_ms0(500,7),q2ce_ms1(500,7),q2cp_ms0(
     *500,7),q2cp_ms1(500,7),blcce0(500,7),blcce1(500,7), EKE0(7),EKE1(7
     *), XR0(7),TEFF0(7),BLCC(7),XCC(7), ESIG0(500,7),ESIG1(500,7),PSIG0
     *(500,7),PSIG1(500,7),EDEDX0(500,7),EDEDX1(500,7),PDEDX0(500,7),PDE
     *DX1(500,7),EBR10(500,7),EBR11(500,7),PBR10(500,7),PBR11(500,7),PBR
     *20(500,7),PBR21(500,7),TMXS0(500,7),TMXS1(500,7), expeke1(7), IUNR
     *ST(7),EPSTFL(7),IAPRIM(7), sig_ismonotone(0:1,7)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/THRESH/RMT2,RMSQ, AP(7),AE(7),UP(7),UE(7),TE(7),THMOLL(7)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common/CH_steps/ count_pII_steps,count_all_steps,is_ch_step
      real*8 count_pII_steps,count_all_steps
      logical is_ch_step
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/emf_inputs/ExIN,EyIN,EzIN,  EMLMTIN,  BxIN, ByIN, BzIN,  Bx
     *, By, Bz,  Bx_new, By_new, Bz_new,  emfield_on
      real*8 ExIN,EyIN,EzIN, EMLMTIN, BxIN,ByIN,BzIN, Bx,By,Bz, Bx_new,B
     *y_new,Bz_new
      logical emfield_on
      medium = med
      count_pII_steps = count_pII_steps + 1
      blccc = blcc(medium)
      xcccc = xcc(medium)
      e = e0 - 0.5*eloss
      tau = e/prm
      tau2 = tau*tau
      epsilon = eloss/e0
      epsilonp= eloss/e
      e = e * (1 - epsilonp*epsilonp*(6+10*tau+5*tau2)/(24*tau2+72*tau+4
     *8))
      p2 = e*(e + rmt2)
      beta2 = p2/(p2 + rmsq)
      chia2 = xcccc/(4*p2*blccc)
      lambda = 0.5*tustep*rhof*blccc/beta2
      temp2 = 0.166666*(4+tau*(6+tau*(7+tau*(4+tau))))* (epsilonp/((tau+
     *1)*(tau+2)))**2
      lambda = lambda*(1 - temp2)
      IF (( spin_effects )) THEN
        elke = Log(e)
        Lelke=eke1(MEDIUM)*elke+eke0(MEDIUM)
        IF (( lelke .LT. 1 )) THEN
          lelke = 1
          elke = (1 - eke0(medium))/eke1(medium)
        END IF
        IF (( qel .EQ. 0 )) THEN
          etap=etae_ms1(Lelke,MEDIUM)*elke+etae_ms0(Lelke,MEDIUM)
          xi_corr=q1ce_ms1(Lelke,MEDIUM)*elke+q1ce_ms0(Lelke,MEDIUM)
          gamma=q2ce_ms1(Lelke,MEDIUM)*elke+q2ce_ms0(Lelke,MEDIUM)
        ELSE
          etap=etap_ms1(Lelke,MEDIUM)*elke+etap_ms0(Lelke,MEDIUM)
          xi_corr=q1cp_ms1(Lelke,MEDIUM)*elke+q1cp_ms0(Lelke,MEDIUM)
          gamma=q2cp_ms1(Lelke,MEDIUM)*elke+q2cp_ms0(Lelke,MEDIUM)
        END IF
        ms_corr=blcce1(Lelke,MEDIUM)*elke+blcce0(Lelke,MEDIUM)
      ELSE
        etap = 1
        xi_corr = 1
        gamma = 1
        ms_corr = 1
      END IF
      chia2 = chia2*etap
      lambda = lambda/(etap*(1+chia2))*ms_corr
      chilog = Log(1 + 1/chia2)
      q1 = 2*chia2*(chilog*(1 + chia2) - 1)
      gamma = 6*chia2*(1 + chia2)*(chilog*(1 + 2*chia2) - 2)/q1*gamma
      xi = q1*lambda
      find_index = .true.
      spin_index = .true.
      call mscat(lambda,chia2,xi,elke,beta2,qel,medium, spin_effects,fin
     *d_index,spin_index, w1,sint1)
16761 CONTINUE
        IF((rng_seed .GT. 128))call ranmar_get
        xphi = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        xphi = 2*xphi - 1
        xphi2 = xphi*xphi
        IF((rng_seed .GT. 128))call ranmar_get
        yphi = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        yphi2 = yphi*yphi
        rhophi2 = xphi2 + yphi2
        IF(rhophi2.LE.1)GO TO16762
      GO TO 16761
16762 CONTINUE
      rhophi2 = 1/rhophi2
      cphi1 = (xphi2 - yphi2)*rhophi2
      sphi1 = 2*xphi*yphi*rhophi2
      call mscat(lambda,chia2,xi,elke,beta2,qel,medium, spin_effects,fin
     *d_index,spin_index, w2,sint2)
16771 CONTINUE
        IF((rng_seed .GT. 128))call ranmar_get
        xphi = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        xphi = 2*xphi - 1
        xphi2 = xphi*xphi
        IF((rng_seed .GT. 128))call ranmar_get
        yphi = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        yphi2 = yphi*yphi
        rhophi2 = xphi2 + yphi2
        IF(rhophi2.LE.1)GO TO16772
      GO TO 16771
16772 CONTINUE
      rhophi2 = 1/rhophi2
      cphi2 = (xphi2 - yphi2)*rhophi2
      sphi2 = 2*xphi*yphi*rhophi2
      u2 = sint2*cphi2
      v2 = sint2*sphi2
      u2p = w1*u2 + sint1*w2
      us = u2p*cphi1 - v2*sphi1
      vs = u2p*sphi1 + v2*cphi1
      ws = w1*w2 - sint1*u2
      xi = 2*xi*xi_corr
      IF((rng_seed .GT. 128))call ranmar_get
      eta = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      eta = Sqrt(eta)
      eta1 = 0.5*(1 - eta)
      delta = 0.9082483-(0.1020621-0.0263747*gamma)*xi
      temp1 = 2 + tau
      temp = (2+tau*temp1)/((tau+1)*temp1)
      temp = temp - (tau+1)/((tau+2)*(chilog*(1+chia2)-1))
      temp = temp * epsilonp
      temp1 = 1 - temp
      delta = delta + 0.40824829*(epsilon*(tau+1)/((tau+2)* (chilog*(1+c
     *hia2)-1)*(chilog*(1+2*chia2)-2)) - 0.25*temp*temp)
      b = eta*delta
      c = eta*(1-delta)
      w1v2 = w1*v2
      ut = b*sint1*cphi1 + c*(cphi1*u2 - sphi1*w1v2) + eta1*us*temp1
      vt = b*sint1*sphi1 + c*(sphi1*u2 + cphi1*w1v2) + eta1*vs*temp1
      wt = eta1*(1+temp) + b*w1 + c*w2 + eta1*ws*temp1
      ustep = tustep*sqrt(ut*ut + vt*vt + wt*wt)
      sint02 = u0**2 + v0**2
      IF ((sint02 .GT. 1e-20)) THEN
        sint0 = sqrt(sint02)
        sint0i = 1/sint0
        cphi0 = sint0i*u0
        sphi0 = sint0i*v0
        u2p = w0*us + sint0*ws
        ws = w0*ws - sint0*us
        us = u2p*cphi0 - vs*sphi0
        vs = u2p*sphi0 + vs*cphi0
        u2p = w0*ut + sint0*wt
        wt = w0*wt - sint0*ut
        ut = u2p*cphi0 - vt*sphi0
        vt = u2p*sphi0 + vt*cphi0
      ELSE
        wt = w0*wt
        ws = w0*ws
      END IF
      xf = x0 + tustep*ut
      yf = y0 + tustep*vt
      zf = z0 + tustep*wt
      return
      end
      subroutine msdist_pI ( e0,eloss,tustep,rhof,medium,qel,spin_effect
     *s,u0,v0,w0,x0,y0,z0,  us,vs,ws,xf,yf,zf,ustep )
      implicit none
      real*8 e0,  eloss,  rhof,  tustep,  u0,  v0,  w0,  x0,  y0,  z0
      integer*4 medium, qel
      logical spin_effects
      real*8 us,  vs,  ws,  xf,  yf,  zf,  ustep
      real*8 blccc,  xcccc,  z,r,z2,r2,  r2max, chia2,  chilog,  cphi0,
     *  cphi,  sphi,  e,  elke,  beta2,  etap,  xi_corr,  ms_corr, epsil
     *on,  temp,  factor,  lambda,  p2,  p2i,  q1,  rhophi2,  sint,  sin
     *t0,  sint02,  sint0i,  sphi0,   u2p,  ut,  vt,  wt,  xi,  xphi,  x
     *phi2,  yphi,  yphi2
      logical find_index,  spin_index
      integer*4 lelke
      COMMON/ELECIN/ esig_e(7),psig_e(7), esige_max, psige_max, range_ep
     *(0:1,500,7), E_array(500,7), etae_ms0(500,7),etae_ms1(500,7),etap_
     *ms0(500,7),etap_ms1(500,7),q1ce_ms0(500,7),q1ce_ms1(500,7),q1cp_ms
     *0(500,7),q1cp_ms1(500,7),q2ce_ms0(500,7),q2ce_ms1(500,7),q2cp_ms0(
     *500,7),q2cp_ms1(500,7),blcce0(500,7),blcce1(500,7), EKE0(7),EKE1(7
     *), XR0(7),TEFF0(7),BLCC(7),XCC(7), ESIG0(500,7),ESIG1(500,7),PSIG0
     *(500,7),PSIG1(500,7),EDEDX0(500,7),EDEDX1(500,7),PDEDX0(500,7),PDE
     *DX1(500,7),EBR10(500,7),EBR11(500,7),PBR10(500,7),PBR11(500,7),PBR
     *20(500,7),PBR21(500,7),TMXS0(500,7),TMXS1(500,7), expeke1(7), IUNR
     *ST(7),EPSTFL(7),IAPRIM(7), sig_ismonotone(0:1,7)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/THRESH/RMT2,RMSQ, AP(7),AE(7),UP(7),UE(7),TE(7),THMOLL(7)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common/emf_inputs/ExIN,EyIN,EzIN,  EMLMTIN,  BxIN, ByIN, BzIN,  Bx
     *, By, Bz,  Bx_new, By_new, Bz_new,  emfield_on
      real*8 ExIN,EyIN,EzIN, EMLMTIN, BxIN,ByIN,BzIN, Bx,By,Bz, Bx_new,B
     *y_new,Bz_new
      logical emfield_on
      blccc = blcc(medium)
      xcccc = xcc(medium)
      e = e0 - 0.5*eloss
      p2 = e*(e + rmt2)
      p2i = 1/p2
      chia2 = xcccc*p2i/(4*blccc)
      beta2 = p2/(p2 + rmsq)
      lambda = tustep*rhof*blccc/beta2
      factor = 1/(1 + 0.9784671*e)
      epsilon= eloss/e0
      epsilon= epsilon/(1-0.5*epsilon)
      temp = 0.25*(1 - factor*(1 - 0.333333*factor))*epsilon**2
      lambda = lambda*(1 + temp)
      IF (( spin_effects )) THEN
        elke = Log(e)
        Lelke=eke1(MEDIUM)*elke+eke0(MEDIUM)
        IF (( lelke .LT. 1 )) THEN
          lelke = 1
          elke = (1 - eke0(medium))/eke1(medium)
        END IF
        IF (( qel .EQ. 0 )) THEN
          etap=etae_ms1(Lelke,MEDIUM)*elke+etae_ms0(Lelke,MEDIUM)
          xi_corr=q1ce_ms1(Lelke,MEDIUM)*elke+q1ce_ms0(Lelke,MEDIUM)
        ELSE
          etap=etap_ms1(Lelke,MEDIUM)*elke+etap_ms0(Lelke,MEDIUM)
          xi_corr=q1cp_ms1(Lelke,MEDIUM)*elke+q1cp_ms0(Lelke,MEDIUM)
        END IF
        ms_corr=blcce1(Lelke,MEDIUM)*elke+blcce0(Lelke,MEDIUM)
      ELSE
        etap = 1
        xi_corr = 1
        ms_corr = 1
      END IF
      chia2 = xcccc*p2i/(4*blccc)*etap
      lambda = lambda/etap/(1+chia2)*ms_corr
      chilog = Log(1 + 1/chia2)
      q1 = 2*chia2*(chilog*(1 + chia2) - 1)
      xi = q1*lambda
      find_index = .true.
      spin_index = .true.
      call mscat(lambda,chia2,xi,elke,beta2,qel,medium, spin_effects,fin
     *d_index,spin_index, ws,sint)
16781 CONTINUE
        IF((rng_seed .GT. 128))call ranmar_get
        xphi = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        xphi = 2*xphi - 1
        xphi2 = xphi*xphi
        IF((rng_seed .GT. 128))call ranmar_get
        yphi = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        yphi2 = yphi*yphi
        rhophi2 = xphi2 + yphi2
        IF(rhophi2.LE.1)GO TO16782
      GO TO 16781
16782 CONTINUE
      rhophi2 = 1/rhophi2
      cphi = (xphi2 - yphi2)*rhophi2
      sphi = 2*xphi*yphi*rhophi2
      us = sint*cphi
      vs = sint*sphi
      xi = xi*xi_corr
      IF (( xi .LT. 0.1 )) THEN
        z = 1 - xi*(0.5 - xi*(0.166666667 - 0.041666667*xi))
      ELSE
        z = (1 - Exp(-xi))/xi
      END IF
      r = 0.5*sint
      r2 = r*r
      z2 = z*z
      r2max = 1 - z2
      IF (( r2max .LT. r2 )) THEN
        r2 = r2max
        r = Sqrt(r2)
      END IF
      ut = r*cphi
      vt = r*sphi
      wt = z
      ustep = Sqrt(z2 + r2)*tustep
      sint02 = u0**2 + v0**2
      IF ((sint02 .GT. 1e-20)) THEN
        sint0 = sqrt(sint02)
        sint0i = 1/sint0
        cphi0 = sint0i*u0
        sphi0 = sint0i*v0
        u2p = w0*us + sint0*ws
        ws = w0*ws - sint0*us
        us = u2p*cphi0 - vs*sphi0
        vs = u2p*sphi0 + vs*cphi0
        u2p = w0*ut + sint0*wt
        wt = w0*wt - sint0*ut
        ut = u2p*cphi0 - vt*sphi0
        vt = u2p*sphi0 + vt*cphi0
      ELSE
        wt = w0*wt
        ws = w0*ws
      END IF
      xf = x0 + tustep*ut
      yf = y0 + tustep*vt
      zf = z0 + tustep*wt
      return
      end
      SUBROUTINE PAIR
      implicit none
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/BREMPR/ DL1(8,7),DL2(8,7),DL3(8,7),DL4(8,7),DL5(8,7),DL6(8,
     *7), ALPHI(2,7),BPAR(2,7),DELPOS(2,7), WA(7,50),PZ(7,50),ZELEM(7,50
     *),RHOZ(7,50), PWR2I(50), DELCM(7),ZBRANG(7),LZBRANG(7),NNE(7), IBR
     *DST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(7,50,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      common/nrc_pair/ nrcp_fdata(65,84,7), nrcp_wdata(65,84,7), nrcp_id
     *ata(65,84,7), nrcp_xdata(65), nrcp_emin, nrcp_emax, nrcp_dle, nrcp
     *_dlei
      real*8 nrcp_fdata,nrcp_wdata,nrcp_xdata, nrcp_emin, nrcp_emax, nrc
     *p_dle, nrcp_dlei
      integer*4 nrcp_idata
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/THRESH/RMT2,RMSQ, AP(7),AE(7),UP(7),UE(7),TE(7),THMOLL(7)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      common/triplet_data/ a_triplet(250,7), b_triplet(250,7), dl_triple
     *t, dli_triplet, bli_triplet, log_4rm
      real*8 a_triplet,b_triplet,dl_triplet, dli_triplet, bli_triplet, l
     *og_4rm
      common/egs_vr/ e_max_rr,  prob_RR,  nbr_split,  i_play_RR,      i_
     *survived_RR,
     *  n_RR_warning,                                        i_do_rr
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      DOUBLE PRECISION PEIG,  PESE1,  PESE2
      real*8 EIG,  ESE2,  RNNO30,RNNO31,rnno32,rnno33,rnno34,  DELTA,  R
     *EJF,  rejmax,  aux1,aux2,  Amax,  Bmax,  del0,  br,
     *                               Eminus,Eplus,Eavail,rnno_RR
      integer*4
     *                     L,L1
      real*8 ESE,  PSE,  ZTARG,  TTEIG,  TTESE,  TTPSE,  ESEDEI, ESEDER,
     * XIMIN,  XIMID,  REJMIN, REJMID, REJTOP, YA,XITRY,GALPHA,GBETA,  X
     *ITST,  REJTST_on_REJTOP ,  REJTST, RTEST
      integer*4 ICHRG
      real*8 k,xx,abin,rbin,alias_sample1
      integer*4 ibin, iq1, iq2, iprdst_use
      logical do_nrc_pair
      integer*4 itrip
      real*8 ftrip
      NPold = NP
      IF (( i_play_RR .EQ. 1 )) THEN
        i_survived_RR = 0
        IF (( prob_RR .LE. 0 )) THEN
          IF (( n_RR_warning .LT. 50 )) THEN
            n_RR_warning = n_RR_warning + 1
            write(i_log,'(/a)') '***************** Warning: '
            write(i_log,'(a,g14.6)') 'Attempt to play Russian Roulette w
     *ith prob_RR<0! '
          END IF
        ELSE
          IF((rng_seed .GT. 128))call ranmar_get
          rnno_RR = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF (( rnno_RR .GT. prob_RR )) THEN
            i_survived_RR =2
            IF (( np .GT. 1 )) THEN
              np = np-1
            ELSE
              wt(np) = 0
              e(np) = 0
            END IF
            return
          ELSE
            wt(np) = wt(np)/prob_RR
          END IF
        END IF
      END IF
      IF (( np+1 .GT. 10000 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','PAIR', ' sta
     *ck size exceeded! ',' $MAXSTACK = ',10000,' np = ',np+1
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      PEIG=E(NP)
      EIG=PEIG
      do_nrc_pair = .false.
      IF (( itriplet .GT. 0 .AND. eig .GT. 4*rm )) THEN
        itrip = dli_triplet*gle + bli_triplet
        ftrip = a_triplet(itrip,medium)*gle + b_triplet(itrip,medium)
        IF((rng_seed .GT. 128))call ranmar_get
        rnno34 = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        IF (( rnno34 .LT. ftrip )) THEN
          call sample_triplet
          return
        END IF
      END IF
      IF (( pair_nrc .EQ. 1 )) THEN
        k = eig/rm
        IF (( k .LT. nrcp_emax )) THEN
          do_nrc_pair = .true.
          IF (( k .LE. nrcp_emin )) THEN
            ibin = 1
          ELSE
            abin = 1 + log((k-2)/(nrcp_emin-2))*nrcp_dlei
            ibin = abin
            abin = abin - ibin
            IF((rng_seed .GT. 128))call ranmar_get
            rbin = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            IF((rbin .LT. abin))ibin = ibin + 1
          END IF
          xx = alias_sample1(64,nrcp_xdata, nrcp_fdata(1,ibin,medium),nr
     *    cp_wdata(1,ibin,medium), nrcp_idata(1,ibin,medium))
          IF (( xx .GT. 0.5 )) THEN
            pese1 = prm*(1 + xx*(k-2))
            iq1 = 1
            pese2 = peig - pese1
            iq2 = -1
          ELSE
            pese2 = prm*(1 + xx*(k-2))
            iq2 = 1
            pese1 = peig - pese2
            iq1 = -1
          END IF
        END IF
      END IF
      IF (( .NOT.do_nrc_pair )) THEN
        IF ((EIG.LE.2.1)) THEN
          IF((rng_seed .GT. 128))call ranmar_get
          RNNO30 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF((rng_seed .GT. 128))call ranmar_get
          rnno34 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          PESE2 = PRM + 0.5*RNNO30*(PEIG-2*PRM)
          PESE1 = PEIG - PESE2
          IF (( rnno34 .LT. 0.5 )) THEN
            iq1 = -1
            iq2 = 1
          ELSE
            iq1 = 1
            iq2 = -1
          END IF
        ELSE
          IF ((EIG.LT.50.)) THEN
            L = 5
            L1 = L + 1
            delta = 4*delcm(medium)/eig
            IF (( delta .LT. 1 )) THEN
              Amax = dl1(l,medium)+delta*(dl2(l,medium)+delta*dl3(l,medi
     *        um))
              Bmax = dl1(l1,medium)+delta*(dl2(l1,medium)+delta*dl3(l1,m
     *        edium))
            ELSE
              aux2 = log(delta+dl6(l,medium))
              Amax = dl4(l,medium)+dl5(l,medium)*aux2
              Bmax = dl4(l1,medium)+dl5(l1,medium)*aux2
            END IF
            aux1 = 1 - rmt2/eig
            aux1 = aux1*aux1
            aux1 = aux1*Amax/3
            aux1 = aux1/(Bmax+aux1)
          ELSE
            L = 7
            Amax = dl1(l,medium)
            Bmax = dl1(l+1,medium)
            aux1 = bpar(2,medium)*(1-bpar(1,medium)*rm/eig)
          END IF
          del0 = eig*delcm(medium)
          Eavail = eig - rmt2
16791     CONTINUE
            IF((rng_seed .GT. 128))call ranmar_get
            RNNO30 = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            IF((rng_seed .GT. 128))call ranmar_get
            RNNO31 = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            IF((rng_seed .GT. 128))call ranmar_get
            RNNO34 = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            IF (( rnno30 .GT. aux1 )) THEN
              br = 0.5*rnno31
              rejmax = Bmax
              l1 = l+1
            ELSE
              IF((rng_seed .GT. 128))call ranmar_get
              rnno32 = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF((rng_seed .GT. 128))call ranmar_get
              rnno33 = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              br = 0.5*(1-max(rnno31,rnno32,rnno33))
              rejmax = Amax
              l1 = l
            END IF
            Eminus = br*Eavail + rm
            Eplus = eig - Eminus
            delta = del0/(Eminus*Eplus)
            IF (( delta .LT. 1 )) THEN
              rejf = dl1(l1,medium)+delta*(dl2(l1,medium)+delta*dl3(l1,m
     *        edium))
            ELSE
              rejf = dl4(l1,medium)+dl5(l1,medium)*log(delta+dl6(l1,medi
     *        um))
            END IF
            IF((( rnno34*rejmax .LE. rejf )))GO TO16792
          GO TO 16791
16792     CONTINUE
          pese2 = Eminus
          pese1 = peig - pese2
          IF((rng_seed .GT. 128))call ranmar_get
          RNNO34 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF (( rnno34 .LT. 0.5 )) THEN
            iq1 = -1
            iq2 = 1
          ELSE
            iq1 = 1
            iq2 = -1
          END IF
        END IF
      END IF
      ESE2=PESE2
      E(NP)=PESE1
      E(NP+1)=PESE2
      IF (( iprdst .GT. 0 )) THEN
        IF (( iprdst .EQ. 4 )) THEN
          IF((rng_seed .GT. 128))call ranmar_get
          rtest = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          gbeta = PESE1/(PESE1+10)
          IF (( rtest .LT. gbeta )) THEN
            iprdst_use = 1
          ELSE
            iprdst_use = 4
          END IF
        ELSE IF(( iprdst .EQ. 2 .AND. eig .LT. 4.14 )) THEN
          iprdst_use = 1
        ELSE
          iprdst_use = iprdst
        END IF
        DO 16801 ichrg=1,2
          IF ((ICHRG.EQ.1)) THEN
            ESE=PESE1
          ELSE
            ESE=ESE2
            IF (( iprdst .EQ. 4 )) THEN
              gbeta = ESE/(ESE+10)
              IF((rng_seed .GT. 128))call ranmar_get
              rtest = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF (( rtest .LT. gbeta )) THEN
                iprdst_use = 1
              ELSE
                iprdst_use = 4
              END IF
            END IF
          END IF
          IF (( iprdst_use .EQ. 1 )) THEN
            PSE=SQRT(MAX(0.0,(ESE-RM)*(ESE+RM)))
            IF((rng_seed .GT. 128))call ranmar_get
            COSTHE = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            COSTHE=1.0-2.0*COSTHE
            SINTHE=RM*SQRT((1.0-COSTHE)*(1.0+COSTHE))/(PSE*COSTHE+ESE)
            COSTHE=(ESE*COSTHE+PSE)/(PSE*COSTHE+ESE)
          ELSE IF(( iprdst_use .EQ. 2 )) THEN
            ZTARG=ZBRANG(MEDIUM)
            TTEIG=EIG/RM
            TTESE=ESE/RM
            TTPSE=SQRT((TTESE-1.0)*(TTESE+1.0))
            ESEDEI=TTESE/(TTEIG-TTESE)
            ESEDER=1.0/ESEDEI
            XIMIN=1.0/(1.0+(3.141593*TTESE)**2)
            REJMIN = 2.0+3.0*(ESEDEI+ESEDER) - 4.00*(ESEDEI+ESEDER+1.0-4
     *      .0*(XIMIN-0.5)**2)*( 1.0+0.25*LOG( ((1.0+ESEDER)*(1.0+ESEDEI
     *      )/(2.*TTEIG))**2+ZTARG*XIMIN**2 ) )
            YA=(2.0/TTEIG)**2
            XITRY=MAX(0.01,MAX(XIMIN,MIN(0.5,SQRT(YA/ZTARG))))
            GALPHA=1.0+0.25*LOG(YA+ZTARG*XITRY**2)
            GBETA=0.5*ZTARG*XITRY/(YA+ZTARG*XITRY**2)
            GALPHA=GALPHA-GBETA*(XITRY-0.5)
            XIMID=GALPHA/(3.0*GBETA)
            IF ((GALPHA.GE.0.0)) THEN
              XIMID=0.5-XIMID+SQRT(XIMID**2+0.25)
            ELSE
              XIMID=0.5-XIMID-SQRT(XIMID**2+0.25)
            END IF
            XIMID=MAX(0.01,MAX(XIMIN,MIN(0.5,XIMID)))
            REJMID = 2.0+3.0*(ESEDEI+ESEDER) - 4.00*(ESEDEI+ESEDER+1.0-4
     *      .0*(XIMID-0.5)**2)*( 1.0+0.25*LOG( ((1.0+ESEDER)*(1.0+ESEDEI
     *      )/(2.*TTEIG))**2+ZTARG*XIMID**2 ) )
            REJTOP=1.02*MAX(REJMIN,REJMID)
16811       CONTINUE
              IF((rng_seed .GT. 128))call ranmar_get
              XITST = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              REJTST = 2.0+3.0*(ESEDEI+ESEDER) - 4.00*(ESEDEI+ESEDER+1.0
     *        -4.0*(XITST-0.5)**2)*( 1.0+0.25*LOG( ((1.0+ESEDER)*(1.0+ES
     *        EDEI)/(2.*TTEIG))**2+ZTARG*XITST**2 ) )
              IF((rng_seed .GT. 128))call ranmar_get
              RTEST = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              THETA=SQRT(1.0/XITST-1.0)/TTESE
              REJTST_on_REJTOP = REJTST/REJTOP
              IF((((RTEST .LE. REJTST_on_REJTOP) .AND. (THETA .LT. PI) )
     *        ))GO TO16812
            GO TO 16811
16812       CONTINUE
            SINTHE=SIN(THETA)
            COSTHE=COS(THETA)
          ELSE IF(( iprdst_use .EQ. 3 )) THEN
            IF((rng_seed .GT. 128))call ranmar_get
            COSTHE = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            COSTHE=1.0-2.0*COSTHE
            sinthe=(1-costhe)*(1+costhe)
            IF (( sinthe .GT. 0 )) THEN
              sinthe = sqrt(sinthe)
            ELSE
              sinthe = 0
            END IF
          ELSE
            IF((rng_seed .GT. 128))call ranmar_get
            costhe = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            costhe=1-2*sqrt(costhe)
            sinthe=(1-costhe)*(1+costhe)
            IF (( sinthe .GT. 0 )) THEN
              sinthe=sqrt(sinthe)
            ELSE
              sinthe=0
            END IF
          END IF
          IF (( ichrg .EQ. 1 )) THEN
            CALL UPHI(2,1)
          ELSE
            sinthe=-sinthe
            NP=NP+1
            CALL UPHI(3,2)
          END IF
16801   CONTINUE
16802   CONTINUE
        iq(np) = iq2
        iq(np-1) = iq1
        return
      ELSE
        THETA=0
      END IF
      CALL UPHI(1,1)
      NP=NP+1
      SINTHE=-SINTHE
      CALL UPHI(3,2)
      IQ(NP)=iq2
      IQ(NP-1)=iq1
      RETURN
      END
      subroutine sample_triplet
      implicit none
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/THRESH/RMT2,RMSQ, AP(7),AE(7),UP(7),UE(7),TE(7),THMOLL(7)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/USERPS/n_split
      integer*4 n_split
      COMMON/USERRR/ESAVE_GLOBAL,RANGE_ECUTRR(7),IREJECT
      real*8 ESAVE_GLOBAL,RANGE_ECUTRR
      integer*4 IREJECT
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 fmax_array(250), eta_p_array(250), eta_Ep_array(250), eta_c
     *ostp_array(250), eta_costm_array(250), ebin_array(250), wp_array(2
     *50), qmin_array(250)
      real*8 kmin, kmax, dlogki, alogkm, prmi, tiny_eta
      real*8 ai,rnno,k,qmin,qmax,aux,a1,a2,a3,D,px1,px2,pp_min,pp_max, E
     *p_min,Ep_max,k2p2,k2p2x,peig,b,aux1,aux12,D1,aux3,xmin,xmax, aux6,
     *aux7,uu,cphi,sphi,cphi_factor,aux5,phi,tmp
      real*8 Er,pr,pr2,eta_pr
      real*8 Ep,pp,pp2,wEp,cost_p,sint_p,eta_Ep,mup_min,wmup, eta_costp,
     *Epp,pp_sintp,pp_sntp2
      real*8 Em,pm,pm2,cost_m,sint_m,Emm,wmum,pm_sintm, eta_costm
      real*8 k2,k3,s2,s3,k2k3i,k22,k32,q2,aux4,S_1,S_2,sigma
      real*8 ppx, ppy, ppz, pmx, pmy, pmz, prx, pry, prz, a,c,sindel,cos
     *del,sinpsi
      integer*4 i
      logical use_it
      integer*4 iscore
      logical is_initialized
      data is_initialized/.false./
      save is_initialized,fmax_array,eta_p_array,eta_Ep_array,eta_costp_
     *array, eta_costm_array,ebin_array,wp_array,qmin_array, kmin,kmax,d
     *logki,alogkm,prmi,tiny_eta
      IF (( .NOT.is_initialized )) THEN
        is_initialized = .true.
        tiny_eta = 1e-6
        DO 16821 i=1,250
          fmax_array(i) = -1
16821   CONTINUE
16822   CONTINUE
        kmax = 0
        kmin = 4.1*prm
        DO 16831 i=1,nmed
          IF((up(i) .GT. kmax))kmax = UP(i)
16831   CONTINUE
16832   CONTINUE
        IF((kmax .LE. kmin))return
        dlogki = 250 - 1
        dlogki = dlogki/log(kmax/kmin)
        alogkm = 1 - dlogki*log(kmin)
        prmi = 1/prm
        DO 16841 i=1,250
          k = 4.1*exp((i-1.)/dlogki)
          ebin_array(i) = k
          qmin = 4*k/(k*(k-1)+(k+1)*sqrt(k*(k-4)))
          qmax = (k*(k-1) + (k+1)*sqrt(k*(k-4)))/(2*k+1)
          qmin_array(i) = qmin
          wp_array(i) = log(qmax/qmin)
16841   CONTINUE
16842   CONTINUE
      END IF
      peig = e(np)
      IF((peig .LE. 4*prm))return
      IF (( np+2 .GT. 10000 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','sample_tripl
     *et', ' stack size exceeded! ',' $MAXSTACK = ',10000,' np = ',np+2
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF (( peig .LE. kmin )) THEN
        i = 1
      ELSE IF(( peig .GE. kmax )) THEN
        i = 250
      ELSE
        ai = alogkm + dlogki*gle
        i = ai
        ai = ai - i
        IF((rng_seed .GT. 128))call ranmar_get
        rnno = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        IF (( rnno .LT. ai )) THEN
          i = i+1
        END IF
      END IF
      k = ebin_array(i)
16850 CONTINUE
      IF((rng_seed .GT. 128))call ranmar_get
      eta_pr = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      IF((eta_pr .LT. tiny_eta))eta_pr = tiny_eta
      pr = qmin_array(i)*exp(eta_pr*wp_array(i))
      pr2 = pr*pr
      Er = sqrt(1+pr2)
      aux = Er-pr-1
      a1=(k-pr)*(1-Er-k*aux)
      a2=1+k-Er
      a3=1/(aux*(pr+Er-2*k-1))
      D = a2*sqrt(aux*(2*k*Er+k*k*aux-pr*(Er+pr+1)/2))
      px1 = (a1 + D)*a3
      px2 = (a1 - D)*a3
      IF (( px1 .LT. px2 )) THEN
        pp_min = px1
        pp_max = px2
      ELSE
        pp_min = px2
        pp_max = px1
      END IF
      Ep_min = sqrt(1 + pp_min*pp_min)
      Ep_max = sqrt(1 + pp_max*pp_max)
      IF((rng_seed .GT. 128))call ranmar_get
      eta_Ep = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      IF((eta_Ep .LT. tiny_eta))eta_Ep = tiny_eta
      wEp = Ep_max - Ep_min
      Ep = Ep_min + eta_Ep*wEp
      pp2 = Ep*Ep - 1
      pp = sqrt(pp2)
      k2p2 = k*k + pp2
      Em = k + 1 - Er - Ep
      pm2 = Em*Em-1
      pm = sqrt(pm2)
      mup_min = (k2p2 - (pr + pm)*(pr + pm))/(2*k*pp)
      IF((rng_seed .GT. 128))call ranmar_get
      eta_costp = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      IF((eta_costp .LT. tiny_eta))eta_costp = tiny_eta
      Epp = Ep/pp
      wmup = log((Epp-1)/(Epp-mup_min))
      cost_p = Epp - (Epp - mup_min)*exp(wmup*eta_costp)
      wmup = wmup*(cost_p - Epp)
      sint_p = 1-cost_p*cost_p
      IF (( sint_p .GT. 1e-20 )) THEN
        sint_p = sqrt(sint_p)
      ELSE
        sint_p = 1e-10
      END IF
      k2p2x = k2p2 - 2*k*pp*cost_p
      b = pr2-k2p2x-pm2
      aux1 = k - pp*cost_p
      aux12 = aux1*aux1
      pp_sintp = pp*sint_p
      pp_sntp2 = pp_sintp*pp_sintp
      D1 = pm2*(aux12+pp_sntp2)-b*b/4
      IF (( D1 .LE. 0 )) THEN
        goto 16850
      END IF
      D = 2*pp_sintp*sqrt(D1)
      aux3 = 0.5/(aux12+pp_sntp2)
      xmin = (-b*aux1-D)*aux3
      xmax = (-b*aux1+D)*aux3
      IF((rng_seed .GT. 128))call ranmar_get
      eta_costm = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      IF((eta_costm .LT. tiny_eta))eta_costm = tiny_eta
      aux6 = sqrt((Em-xmin)/(Em-xmax))
      aux7 = aux6*tan(1.570796326794897*eta_costm)
      uu = (aux7-1)/(aux7+1)
      cost_m = 0.5*(xmax + xmin + 2*uu*(xmax-xmin)/(1+uu*uu))
      wmum = sqrt((xmax-cost_m)*(cost_m-xmin))
      wmum = wmum*aux6*(Em-cost_m)/(Em-xmin)
      cost_m = cost_m/pm
      sint_m = sqrt(1-cost_m*cost_m)
      pm_sintm = pm*sint_m
      cphi = (b + 2*pm*cost_m*aux1)/(2*pp_sintp*pm_sintm)
      IF (( abs(cphi) .GE. 1 )) THEN
        goto 16850
      END IF
      sphi = sqrt(1-cphi*cphi)
      k3 = k*(pp*cost_p - Ep)
      k2 = k*(pm*cost_m - Em)
      k22 = k2*k2
      k32 = k3*k3
      k2k3i = 1/(k2*k3)
      s2 = pp*pm*(cost_p*cost_m + sint_p*sint_m*cphi) - Ep*Em
      s3 = k2 - Em + 1 - s2
      q2 = 2*(Er-1)
      S_1 = k32+k22+(q2-2)*s2-(1-q2/2)*(k32+k22)*k2k3i
      aux4 = k3*Ep-k2*Em
      S_2 = -q2*(Ep*Ep+Em*Em) + 2*s2 - (2*aux4*aux4 - k22 - k32)*k2k3i
      sigma = abs(pp*pm2*pm*k2k3i/(q2*q2*(Em*s3+Er))*(S_1*(1-q2/4)+S_2*(
     *1+q2/4)))
      cphi_factor = abs(2*Er*pm2-Em*(k2p2x-pr2-pm2))/(2*pp_sintp*pm_sint
     *m*pm2*sphi)
      sigma = sigma*cphi_factor*wEp*wmup*wmum*wp_array(i)*pr2/Er
      IF (( sigma .LT. 0 )) THEN
        write(i_log,'(/a)') '***************** Warning: '
        write(i_log,*) 'In triplet sigma < 0 ? ',sigma
      END IF
      use_it = .true.
      IF (( sigma .LT. fmax_array(i) )) THEN
        IF((rng_seed .GT. 128))call ranmar_get
        rnno = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        IF (( sigma .LT. fmax_array(i)*rnno )) THEN
          use_it = .false.
        END IF
      END IF
      IF (( use_it )) THEN
        fmax_array(i) = sigma
        eta_p_array(i) = eta_pr
        eta_Ep_array(i) = eta_Ep
        eta_costp_array(i) = eta_costp
        eta_costm_array(i) = eta_costm
      ELSE
        eta_pr = eta_p_array(i)
        eta_Ep = eta_Ep_array(i)
        eta_costp = eta_costp_array(i)
        eta_costm = eta_costm_array(i)
      END IF
      k = peig*prmi
      aux5 = k*(k-1)+(k+1)*sqrt(k*(k-4))
      qmin = 4*k/aux5
      qmax = aux5/(2*k+1)
      pr = qmin*exp(eta_pr*log(qmax/qmin))
      pr2 = pr*pr
      Er = sqrt(1+pr2)
      aux = Er-pr-1
      a1=(k-pr)*(1-Er-k*aux)
      a2=1+k-Er
      a3=1/(aux*(pr+Er-2*k-1))
      D = a2*sqrt(aux*(2*k*Er+k*k*aux-pr*(Er+pr+1)/2))
      px1 = (a1 + D)*a3
      px2 = (a1 - D)*a3
      IF (( px1 .LT. px2 )) THEN
        pp_min = px1
        pp_max = px2
      ELSE
        pp_min = px2
        pp_max = px1
      END IF
      Ep_min = sqrt(1 + pp_min*pp_min)
      Ep_max = sqrt(1 + pp_max*pp_max)
      wEp = Ep_max - Ep_min
      Ep = Ep_min + eta_Ep*wEp
      pp2 = Ep*Ep - 1
      pp = sqrt(pp2)
      k2p2 = k*k + pp2
      Em = k + 1 - Er - Ep
      pm2 = Em*Em-1
      pm = sqrt(pm2)
      mup_min = (k2p2 - (pr + pm)*(pr + pm))/(2*k*pp)
      Epp = Ep/pp
      wmup = log((Epp-1)/(Epp-mup_min))
      cost_p = Epp - (Epp - mup_min)*exp(wmup*eta_costp)
      sint_p = sqrt(1-cost_p*cost_p)
      k2p2x = k2p2 - 2*k*pp*cost_p
      b = pr2-k2p2x-pm2
      aux1 = k - pp*cost_p
      aux12 = aux1*aux1
      pp_sintp = pp*sint_p
      pp_sntp2 = pp_sintp*pp_sintp
      D1 = pm2*(aux12+pp_sntp2)-b*b/4
      IF (( D1 .LE. 0 )) THEN
        goto 16850
      END IF
      D = 2*pp_sintp*sqrt(D1)
      aux3 = 0.5/(aux12+pp_sntp2)
      xmin = (-b*aux1-D)*aux3
      xmax = (-b*aux1+D)*aux3
      aux6 = sqrt((Em-xmin)/(Em-xmax))
      aux7 = aux6*tan(1.570796326794897*eta_costm)
      uu = (aux7-1)/(aux7+1)
      cost_m = 0.5*(xmax + xmin + 2*uu*(xmax-xmin)/(1+uu*uu))/pm
      sint_m = sqrt(1-cost_m*cost_m)
      pm_sintm = pm*sint_m
      cphi = (b + 2*pm*cost_m*aux1)/(2*pp_sintp*pm_sintm)
      IF (( abs(cphi) .GE. 1 )) THEN
        goto 16850
      END IF
      sphi = sqrt(1-cphi*cphi)
      IF((rng_seed .GT. 128))call ranmar_get
      phi = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      phi = phi*6.283185307179586
      ppx = pp*sint_p
      ppy = 0
      pmx = pm*sint_m*cphi
      pmy = pm*sint_m*sphi
      cphi = cos(phi)
      sphi = sin(phi)
      tmp = ppx*sphi
      ppx = ppx*cphi - ppy*sphi
      ppy = tmp + ppy*cphi
      tmp = pmx*sphi
      pmx = pmx*cphi - pmy*sphi
      pmy = tmp + pmy*cphi
      ppz = pp*cost_p
      pmz = pm*cost_m
      prx = -ppx-pmx
      pry = -ppy-pmy
      prz = k - ppz - pmz
      NPold = np
      X(np)=X(np)
      Y(np)=Y(np)
      Z(np)=Z(np)
      IR(np)=IR(np)
      WT(np)=WT(np)
      DNEAR(np)=DNEAR(np)
      LATCH(np)=LATCH(np)
      X(np+1)=X(np)
      Y(np+1)=Y(np)
      Z(np+1)=Z(np)
      IR(np+1)=IR(np)
      WT(np+1)=WT(np)
      DNEAR(np+1)=DNEAR(np)
      LATCH(np+1)=LATCH(np)
      X(np+2)=X(np+1)
      Y(np+2)=Y(np+1)
      Z(np+2)=Z(np+1)
      IR(np+2)=IR(np+1)
      WT(np+2)=WT(np+1)
      DNEAR(np+2)=DNEAR(np+1)
      LATCH(np+2)=LATCH(np+1)
      pp = 1/pp
      pm = 1/pm
      pr = 1/pr
      a = u(np)
      b = v(np)
      c = w(np)
      sinpsi = a*a + b*b
      IF (( sinpsi .GT. 1e-20 )) THEN
        sinpsi = sqrt(sinpsi)
        sindel = b/sinpsi
        cosdel = a/sinpsi
        IF (( Ep .GT. Em )) THEN
          u(np) = pp*(c*cosdel*ppx - sindel*ppy + a*ppz)
          v(np) = pp*(c*sindel*ppx + cosdel*ppy + b*ppz)
          w(np) = pp*(c*ppz - sinpsi*ppx)
          iq(np) = 1
          E(np) = Ep*prm
          u(np+1) = pm*(c*cosdel*pmx - sindel*pmy + a*pmz)
          v(np+1) = pm*(c*sindel*pmx + cosdel*pmy + b*pmz)
          w(np+1) = pm*(c*pmz - sinpsi*pmx)
          iq(np+1) = -1
          E(np+1) = Em*prm
        ELSE
          u(np+1) = pp*(c*cosdel*ppx - sindel*ppy + a*ppz)
          v(np+1) = pp*(c*sindel*ppx + cosdel*ppy + b*ppz)
          w(np+1) = pp*(c*ppz - sinpsi*ppx)
          iq(np+1) = 1
          E(np+1) = Ep*prm
          u(np) = pm*(c*cosdel*pmx - sindel*pmy + a*pmz)
          v(np) = pm*(c*sindel*pmx + cosdel*pmy + b*pmz)
          w(np) = pm*(c*pmz - sinpsi*pmx)
          iq(np) = -1
          E(np) = Em*prm
        END IF
        np = np + 2
        u(np) = pr*(c*cosdel*prx - sindel*pry + a*prz)
        v(np) = pr*(c*sindel*prx + cosdel*pry + b*prz)
        w(np) = pr*(c*prz - sinpsi*prx)
        iq(np) = -1
        E(np) = Er*prm
      ELSE
        IF (( Ep .GT. Em )) THEN
          u(np) = pp*ppx
          v(np) = pp*ppy
          w(np) = c*pp*ppz
          iq(np) = 1
          E(np) = Ep*prm
          u(np+1) = pm*pmx
          v(np+1) = pm*pmy
          w(np+1) = c*pm*pmz
          iq(np+1) = -1
          E(np+1) = Em*prm
        ELSE
          u(np+1) = pp*ppx
          v(np+1) = pp*ppy
          w(np+1) = c*pp*ppz
          iq(np+1) = 1
          E(np+1) = Ep*prm
          u(np) = pm*pmx
          v(np) = pm*pmy
          w(np) = c*pm*pmz
          iq(np) = -1
          E(np) = Em*prm
        END IF
        np = np + 2
        u(np) = pr*prx
        v(np) = pr*pry
        w(np) = c*pr*prz
        iq(np) = -1
        E(np) = Er*prm
      END IF
      return
      end
      SUBROUTINE PHOTO
      implicit none
      COMMON/BOUNDS/ECUT,PCUT,VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/BREMPR/ DL1(8,7),DL2(8,7),DL3(8,7),DL4(8,7),DL5(8,7),DL6(8,
     *7), ALPHI(2,7),BPAR(2,7),DELPOS(2,7), WA(7,50),PZ(7,50),ZELEM(7,50
     *),RHOZ(7,50), PWR2I(50), DELCM(7),ZBRANG(7),LZBRANG(7),NNE(7), IBR
     *DST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(7,50,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L,IPHTER
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/PHOTIN/ EBINDA(7), GE0(7),GE1(7), GMFP0(2000,7),GMFP1(2000,
     *7),GBR10(2000,7),GBR11(2000,7),GBR20(2000,7),GBR21(2000,7), RCO0(7
     *),RCO1(7), RSCT0(100,7),RSCT1(100,7), COHE0(2000,7),COHE1(2000,7),
     *  PHOTONUC0(2000,7),PHOTONUC1(2000,7), DPMFP, MPGEM(1,7), NGR(7)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/x_options/eadl_relax,  mcdf_pe_xsections
      logical eadl_relax, mcdf_pe_xsections
      common/egs_vr/ e_max_rr,  prob_RR,  nbr_split,  i_play_RR,      i_
     *survived_RR,
     *  n_RR_warning,                                        i_do_rr
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common/relax_data/ relax_first(3000),  relax_ntran(3000),  relax_s
     *tate(10000),  relax_prob(10000),  relax_atbin(10000),  relax_ntot
      real*8 relax_prob
      integer*4 relax_first, relax_ntran, relax_state, relax_atbin, rela
     *x_ntot
      real*8 EELEC,  BETA,  GAMMA,  ALPHA,  RATIO,  RNPHT,  FKAPPA, XI,
     * SINTH2, RNPHT2
      DOUBLE PRECISION PEIG
      real*8 BR,  sigma,  aux,aux1,  probs(50),  sigtot,  e_vac,  rnno_R
     *R
      integer*4 IARG,  iZ,   irl,  ints(50),  j,ip,  n_warning,  k
      logical do_relax
      save n_warning
      data n_warning/0/
      IF (( mcdf_pe_xsections )) THEN
        call egs_shellwise_photo()
        return
      END IF
      NPold = NP
      PEIG=E(NP)
      irl = ir(np)
      IF (( peig .LT. edge_energies(2,1) )) THEN
        IF (( n_warning .LT. 100 )) THEN
          n_warning = n_warning + 1
          write(i_log,*) ' Subroutine PHOTO called with E = ',peig, ' wh
     *ich is below the current min. energy of 1 keV! '
          write(i_log,*) ' Converting now this photon to an electron, '
          write(i_log,*) ' but you should check your code! '
        END IF
        iq(np) = -1
        e(np) = peig + prm
        return
      END IF
      iZ = IEDGFL
      do_relax = .false.
      edep = pzero
      IF (( IEDGFL .NE. 0 )) THEN
        IF (( nne(medium) .EQ. 1 )) THEN
          iZ = int( zelem(medium,1) + 0.5 )
          DO 16861 j=1,edge_number(iZ)
            IF((peig .GE. edge_energies(j,iZ)))GO TO16862
16861     CONTINUE
16862     CONTINUE
        ELSE
          aux = peig*peig
          aux1 = aux*peig
          aux = aux*Sqrt(peig)
          sigtot = 0
          DO 16871 k=1,nne(medium)
            iZ = int( zelem(medium,k) + 0.5 )
            IF (( iZ .LT. 1 .OR. iZ .GT. 100 )) THEN
              write(i_log,*) ' Error in PHOTO: '
              write(i_log,'(/a)') '***************** Error: '
              write(i_log,*) '   Atomic number of element ',k, ' in medi
     *um ',medium,' is not between 1 and ',100
              write(i_log,'(/a)') '***************** Quiting now.'
              call exit(1)
            END IF
            IF (( peig .GT. edge_energies(1,iZ) )) THEN
              j = 1
              sigma = (edge_a(1,iZ) + edge_b(1,iZ)/peig + edge_c(1,iZ)/a
     *        ux + edge_d(1,iZ)/aux1)/peig
            ELSE
              DO 16881 j=2,edge_number(iZ)
                IF((peig .GE. edge_energies(j,iZ)))GO TO16882
16881         CONTINUE
16882         CONTINUE
              sigma = edge_a(j,iZ) + gle*(edge_b(j,iZ) + gle*(edge_c(j,i
     *        Z) + gle*edge_d(j,iZ) ))
              sigma = Exp(sigma)
            END IF
            sigma = sigma * pz(medium,k)
            sigtot = sigtot + sigma
            probs(k) = sigma
            ints(k) = j
16871     CONTINUE
16872     CONTINUE
          IF((rng_seed .GT. 128))call ranmar_get
          br = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          br = br*sigtot
          DO 16891 k=1,nne(medium)
            br = br - probs(k)
            IF((br .LE. 0))GO TO16892
16891     CONTINUE
16892     CONTINUE
          iZ = int( zelem(medium,k) + 0.5 )
          j = ints(k)
        END IF
        IF (( peig .LE. binding_energies(6,iZ) )) THEN
          iq(np) = -1
          e(np) = peig + prm
        ELSE
          IF((rng_seed .GT. 128))call ranmar_get
          br = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          DO 16901 k=1,5
            IF (( peig .GT. binding_energies(k,iZ) )) THEN
              IF((br .LT. interaction_prob(k,iZ)))GO TO16902
              br = (br - interaction_prob(k,iZ))/(1-interaction_prob(k,i
     *        Z))
            END IF
16901     CONTINUE
16902     CONTINUE
          IF ((eadl_relax .AND. k .GT. 4)) THEN
            iq(np) = -1
            e(np) = peig + prm
          ELSE
            e_vac = binding_energies(k,iZ)
            e(np) = peig - e_vac + prm
            do_relax = .true.
            iq(np) = -1
          END IF
        END IF
      ELSE
        e(np) = peig + prm
        iq(np) = -1
      END IF
      IF (( iq(np) .EQ. -1 )) THEN
        IF ((IPHTER.EQ.1)) THEN
          EELEC=E(NP)
          IF ((EELEC.GT.ECUT)) THEN
            BETA=SQRT((EELEC-RM)*(EELEC+RM))/EELEC
            GAMMA=EELEC/RM
            ALPHA=0.5*GAMMA-0.5+1./GAMMA
            RATIO=BETA/ALPHA
16911       CONTINUE
              IF((rng_seed .GT. 128))call ranmar_get
              RNPHT = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              RNPHT=2.*RNPHT-1.
              IF ((RATIO.LE.0.2)) THEN
                FKAPPA=RNPHT+0.5*RATIO*(1.-RNPHT)*(1.+RNPHT)
                IF (( gamma .LT. 100 )) THEN
                  COSTHE=(BETA+FKAPPA)/(1.+BETA*FKAPPA)
                ELSE
                  IF (( fkappa .GT. 0 )) THEN
                    costhe = 1 - (1-fkappa)*(gamma-3)/(2*(1+fkappa)*(gam
     *              ma-1)**3)
                  ELSE
                    COSTHE=(BETA+FKAPPA)/(1.+BETA*FKAPPA)
                  END IF
                END IF
                xi = (1+beta*fkappa)*gamma*gamma
              ELSE
                XI=GAMMA*GAMMA*(1.+ALPHA*(SQRT(1.+RATIO*(2.*RNPHT+RATIO)
     *          )-1.))
                COSTHE=(1.-1./XI)/BETA
              END IF
              SINTH2=MAX(0.,(1.-COSTHE)*(1.+COSTHE))
              IF((rng_seed .GT. 128))call ranmar_get
              RNPHT2 = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF(RNPHT2.LE.0.5*(1.+GAMMA)*SINTH2*XI/GAMMA)GO TO16912
            GO TO 16911
16912       CONTINUE
            SINTHE=SQRT(SINTH2)
            CALL UPHI(2,1)
          END IF
        END IF
      END IF
      IF (( do_relax )) THEN
        call relax(e_vac,k,iZ)
      END IF
      IF (( EDEP .GT. 0 )) THEN
        IARG=4
        IF ((IAUSFL(IARG+1).NE.0)) THEN
          CALL AUSGAB(IARG)
        END IF
        IF((IARG.LT.0))RETURN
      END IF
      i_survived_RR = 0
      IF (( i_play_RR .EQ. 1 )) THEN
        IF (( prob_RR .LE. 0 )) THEN
          IF (( n_RR_warning .LT. 50 )) THEN
            n_RR_warning = n_RR_warning + 1
            WRITE(6,16920)prob_RR
16920       FORMAT('**** Warning, attempt to play Roussian Roulette with
     * prob_RR<=0! ',g14.6)
          END IF
        ELSE
          ip = NPold
16931     CONTINUE
            IF (( iq(ip) .NE. 0 )) THEN
              IF((rng_seed .GT. 128))call ranmar_get
              rnno_RR = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF (( rnno_RR .LT. prob_RR )) THEN
                wt(ip) = wt(ip)/prob_RR
                ip = ip + 1
              ELSE
                i_survived_RR = i_survived_RR + 1
                IF ((ip .LT. np)) THEN
                  e(ip) = e(np)
                  iq(ip) = iq(np)
                  wt(ip) = wt(np)
                  u(ip) = u(np)
                  v(ip) = v(np)
                  w(ip) = w(np)
                END IF
                np = np-1
              END IF
            ELSE
              ip = ip+1
            END IF
            IF(((ip .GT. np)))GO TO16932
          GO TO 16931
16932     CONTINUE
          IF (( np .EQ. 0 )) THEN
            np = 1
            e(np) = 0
            iq(np) = 0
            wt(np) = 0
          END IF
        END IF
      END IF
      return
      end
      subroutine egs_shellwise_photo
      implicit none
      COMMON/BOUNDS/ECUT,PCUT,VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/BREMPR/ DL1(8,7),DL2(8,7),DL3(8,7),DL4(8,7),DL5(8,7),DL6(8,
     *7), ALPHI(2,7),BPAR(2,7),DELPOS(2,7), WA(7,50),PZ(7,50),ZELEM(7,50
     *),RHOZ(7,50), PWR2I(50), DELCM(7),ZBRANG(7),LZBRANG(7),NNE(7), IBR
     *DST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(7,50,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L,IPHTER
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/PHOTIN/ EBINDA(7), GE0(7),GE1(7), GMFP0(2000,7),GMFP1(2000,
     *7),GBR10(2000,7),GBR11(2000,7),GBR20(2000,7),GBR21(2000,7), RCO0(7
     *),RCO1(7), RSCT0(100,7),RSCT1(100,7), COHE0(2000,7),COHE1(2000,7),
     *  PHOTONUC0(2000,7),PHOTONUC1(2000,7), DPMFP, MPGEM(1,7), NGR(7)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/x_options/eadl_relax,  mcdf_pe_xsections
      logical eadl_relax, mcdf_pe_xsections
      common/egs_vr/ e_max_rr,  prob_RR,  nbr_split,  i_play_RR,      i_
     *survived_RR,
     *  n_RR_warning,                                        i_do_rr
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common/relax_data/ relax_first(3000),  relax_ntran(3000),  relax_s
     *tate(10000),  relax_prob(10000),  relax_atbin(10000),  relax_ntot
      real*8 relax_prob
      integer*4 relax_first, relax_ntran, relax_state, relax_atbin, rela
     *x_ntot
      common/pe_shell_data/ pe_xsection(500,100,0:16),  pe_elem_prob(500
     *,100,7),   pe_energy(500,100),  pe_zsorted(100,7), pe_be(100,16),
     * pe_nshell(100),  pe_zpos(100),  pe_nge(100),  pe_ne
      real*8 pe_be, pe_energy, pe_xsection, pe_elem_prob
      integer*4 pe_zsorted, pe_nshell, pe_zpos, pe_nge, pe_ne
      real*8 EELEC,  BETA,  GAMMA,  ALPHA,  RATIO,  RNPHT,  FKAPPA, XI,
     * SINTH2, RNPHT2
      DOUBLE PRECISION PEIG
      real*8 BR,  sigma,  aux,aux1,  probs(50),  sigtot,  e_vac,  rnno_R
     *R
      integer*4 IARG,  iZ,   irl,  ints(50),  j,ip,  n_warning,  k
      logical do_relax
      save n_warning
      real*8 slope, logE, int_prob
      integer*4 zpos, ibsearch
      data n_warning/0/
      NPold = NP
      PEIG=E(NP)
      irl = ir(np)
      do_relax = .false.
      IF (( peig .LT. 0.001 )) THEN
        IF (( n_warning .LT. 100 )) THEN
          n_warning = n_warning + 1
          write(i_log,*) ' Subroutine egs_shellwise_photo called with E
     *= ', peig,' which is below the current min. energy of ', 0.001,' k
     *eV! '
          write(i_log,*) ' Converting now this photon to an electron, '
          write(i_log,*) ' but you should check your code! '
        END IF
        iq(np) = -1
        e(np) = peig + prm
        return
      END IF
      edep = pzero
      IF (( IEDGFL .NE. 0 )) THEN
        j = -1
        IF (( nne(medium) .EQ. 1 )) THEN
          iZ = int( zelem(medium,1) + 0.5 )
          zpos = pe_zpos(iZ)
          IF (( pe_nshell(zpos) .GT. 0)) THEN
            logE = log(peig)
            j = ibsearch(logE,pe_nge(zpos),pe_energy(1,zpos))
          END IF
        ELSE
          IF((rng_seed .GT. 128))call ranmar_get
          br = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          logE = log(peig)
          DO 16941 k=nne(medium),1,-1
            iZ = int( zelem(medium,k) + 0.5 )
            zpos = pe_zpos(iZ)
            IF (( iZ .LT. 1 .OR. iZ .GT. 100 )) THEN
              write(i_log,*) ' Error in egs_shellwise_photo: '
              write(i_log,'(/a)') '***************** Error: '
              write(i_log,*) '   Atomic number of element ',k, ' in medi
     *um ',medium,' is not between 1 and ',100
              write(i_log,'(/a)') '***************** Quiting now.'
              call exit(1)
            END IF
            j = ibsearch(logE,pe_nge(zpos),pe_energy(1,zpos))
            slope = pe_elem_prob(j+1,k,medium) - pe_elem_prob(j,k,medium
     *      )
            slope = slope/(pe_energy(j+1,zpos)-pe_energy(j,zpos))
            int_prob = pe_elem_prob(j,k,medium)+slope*(logE-pe_energy(j,
     *      zpos))
            br = br - exp(int_prob)
            IF((br .LE. 0))GO TO16942
16941     CONTINUE
16942     CONTINUE
        END IF
        IF (( peig .LT. pe_be(zpos,pe_nshell(zpos)) .OR. pe_nshell(zpos)
     *   .EQ. 0 )) THEN
          iq(np) = -1
          e(np) = peig + prm
        ELSE
          IF((rng_seed .GT. 128))call ranmar_get
          br = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          sigtot = 0
          DO 16951 k=1,pe_nshell(zpos)
            IF (( peig .GT. pe_be(zpos,k) )) THEN
              slope = pe_xsection(j+1,zpos,k) - pe_xsection(j,zpos,k)
              slope = slope/(pe_energy(j+1,zpos)-pe_energy(j,zpos))
              int_prob=pe_xsection(j,zpos,k)+slope*(logE-pe_energy(j,zpo
     *        s))
              br = br - exp(int_prob)
              sigtot = sigtot + exp(int_prob)
              IF((br .LE. 0))GO TO16952
            END IF
16951     CONTINUE
16952     CONTINUE
          IF ((k .GT. pe_nshell(zpos))) THEN
            iq(np) = -1
            e(np) = peig + prm
          ELSE
            e_vac = pe_be(zpos,k)
            e(np) = peig - e_vac + prm
            do_relax = .true.
            iq(np) = -1
          END IF
        END IF
      ELSE
        e(np) = peig + prm
        iq(np) = -1
      END IF
      IF (( iq(np) .EQ. -1 )) THEN
        IF ((IPHTER.EQ.1)) THEN
          EELEC=E(NP)
          IF ((EELEC.GT.ECUT)) THEN
            BETA=SQRT((EELEC-RM)*(EELEC+RM))/EELEC
            GAMMA=EELEC/RM
            ALPHA=0.5*GAMMA-0.5+1./GAMMA
            RATIO=BETA/ALPHA
16961       CONTINUE
              IF((rng_seed .GT. 128))call ranmar_get
              RNPHT = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              RNPHT=2.*RNPHT-1.
              IF ((RATIO.LE.0.2)) THEN
                FKAPPA=RNPHT+0.5*RATIO*(1.-RNPHT)*(1.+RNPHT)
                IF (( gamma .LT. 100 )) THEN
                  COSTHE=(BETA+FKAPPA)/(1.+BETA*FKAPPA)
                ELSE
                  IF (( fkappa .GT. 0 )) THEN
                    costhe = 1 - (1-fkappa)*(gamma-3)/(2*(1+fkappa)*(gam
     *              ma-1)**3)
                  ELSE
                    COSTHE=(BETA+FKAPPA)/(1.+BETA*FKAPPA)
                  END IF
                END IF
                xi = (1+beta*fkappa)*gamma*gamma
              ELSE
                XI=GAMMA*GAMMA*(1.+ALPHA*(SQRT(1.+RATIO*(2.*RNPHT+RATIO)
     *          )-1.))
                COSTHE=(1.-1./XI)/BETA
              END IF
              SINTH2=MAX(0.,(1.-COSTHE)*(1.+COSTHE))
              IF((rng_seed .GT. 128))call ranmar_get
              RNPHT2 = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF(RNPHT2.LE.0.5*(1.+GAMMA)*SINTH2*XI/GAMMA)GO TO16962
            GO TO 16961
16962       CONTINUE
            SINTHE=SQRT(SINTH2)
            CALL UPHI(2,1)
          END IF
        END IF
      END IF
      IF (( do_relax )) THEN
        call egs_eadl_relax(iZ,k)
      END IF
      IF (( EDEP .GT. 0 )) THEN
        IARG=4
        IF ((IAUSFL(IARG+1).NE.0)) THEN
          CALL AUSGAB(IARG)
        END IF
        IF((IARG.LT.0))RETURN
      END IF
      i_survived_RR = 0
      IF (( i_play_RR .EQ. 1 )) THEN
        IF (( prob_RR .LE. 0 )) THEN
          IF (( n_RR_warning .LT. 50 )) THEN
            n_RR_warning = n_RR_warning + 1
            WRITE(6,16970)prob_RR
16970       FORMAT('**** Warning, attempt to play Roussian Roulette with
     * prob_RR<=0! ',g14.6)
          END IF
        ELSE
          ip = NPold
16981     CONTINUE
            IF (( iq(ip) .NE. 0 )) THEN
              IF((rng_seed .GT. 128))call ranmar_get
              rnno_RR = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF (( rnno_RR .LT. prob_RR )) THEN
                wt(ip) = wt(ip)/prob_RR
                ip = ip + 1
              ELSE
                i_survived_RR = i_survived_RR + 1
                IF ((ip .LT. np)) THEN
                  e(ip) = e(np)
                  iq(ip) = iq(np)
                  wt(ip) = wt(np)
                  u(ip) = u(np)
                  v(ip) = v(np)
                  w(ip) = w(np)
                END IF
                np = np-1
              END IF
            ELSE
              ip = ip+1
            END IF
            IF(((ip .GT. np)))GO TO16982
          GO TO 16981
16982     CONTINUE
          IF (( np .EQ. 0 )) THEN
            np = 1
            e(np) = 0
            iq(np) = 0
            wt(np) = 0
          END IF
        END IF
      END IF
      return
      end
      subroutine egs_read_shellwise_pe
      implicit none
      COMMON/BREMPR/ DL1(8,7),DL2(8,7),DL3(8,7),DL4(8,7),DL5(8,7),DL6(8,
     *7), ALPHI(2,7),BPAR(2,7),DELPOS(2,7), WA(7,50),PZ(7,50),ZELEM(7,50
     *),RHOZ(7,50), PWR2I(50), DELCM(7),ZBRANG(7),LZBRANG(7),NNE(7), IBR
     *DST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(7,50,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L,IPHTER
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/PHOTIN/ EBINDA(7), GE0(7),GE1(7), GMFP0(2000,7),GMFP1(2000,
     *7),GBR10(2000,7),GBR11(2000,7),GBR20(2000,7),GBR21(2000,7), RCO0(7
     *),RCO1(7), RSCT0(100,7),RSCT1(100,7), COHE0(2000,7),COHE1(2000,7),
     *  PHOTONUC0(2000,7),PHOTONUC1(2000,7), DPMFP, MPGEM(1,7), NGR(7)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      COMMON/THRESH/RMT2,RMSQ, AP(7),AE(7),UP(7),UE(7),TE(7),THMOLL(7)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      common/x_options/eadl_relax,  mcdf_pe_xsections
      logical eadl_relax, mcdf_pe_xsections
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/pe_shell_data/ pe_xsection(500,100,0:16),  pe_elem_prob(500
     *,100,7),   pe_energy(500,100),  pe_zsorted(100,7), pe_be(100,16),
     * pe_nshell(100),  pe_zpos(100),  pe_nge(100),  pe_ne
      real*8 pe_be, pe_energy, pe_xsection, pe_elem_prob
      integer*4 pe_zsorted, pe_nshell, pe_zpos, pe_nge, pe_ne
      integer*4 lnblnk1,egs_get_unit,pe_sw_unit,ounit,egs_open_file
      integer*4 sorted(100),i,j,k,l,m
      real*8 z_sorted(100),pz_sorted(100)
      real*8 rest_xs(500,100)
      real*8 tmp_e(500,16), tmp_xs(500,16)
      real*8 new_e(500),deltaEb,slope
      integer*4 zread(100),ib(16),ibsearch
      character data_dir*128,pe_sw_file*144
      integer*4 medio,iZ,iZpos,egs_read_int,pos,curr_rec
      real*4 egs_read_real,e_r, e_old,sigma_r
      integer*2 nz, egs_read_short,ish, i_nshell,i_nge
      logical is_open, is_there, shift_required
      character*3 labels(16)
      data labels/'  K',' L1',' L2',' L3', ' M1',' M2',' M3',' M4',' M5'
     *, ' N1',' N2',' N3',' N4',' N5',' N6',' N7'/
      write(i_log,'(/a$)') ' Reading renormalized photoelectric cross se
     *ctions ......'
      data_dir = hen_house(:lnblnk1(hen_house)) // 'data' // '/'
      pe_sw_file = data_dir(:lnblnk1(data_dir)) // 'photo_shellwise.data
     *'
      pe_sw_unit = egs_get_unit(0)
      IF (( pe_sw_unit .LT. 1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'egs_init_shellwise_pe: failed to get a free Fort
     *ran I/O unit'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      open(pe_sw_unit,file=pe_sw_file,status='old', form='UNFORMATTED',A
     *CCESS='direct',recl=1, err=16990)
      GOTO 17000
16990 write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(2a)') 'egs_init_shellwise_pe: failed to open ', pe_s
     *w_file
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
17000 is_open = .true.
      DO 17011 medio=1,nmed
        DO 17021 i=1,nne(medio)
          pe_nshell(i*medio) = 0
          pe_nge(i*medio) = 0
          pe_zsorted(i,medio) = 0
17021   CONTINUE
17022   CONTINUE
17011 CONTINUE
17012 CONTINUE
      DO 17031 l=1,100
        pe_zpos(l) = -1
        DO 17041 k=1,500
          pe_energy(k,l) = 0.0
          DO 17051 m=1,16
            pe_xsection(k,l,m) = 0.0
17051     CONTINUE
17052     CONTINUE
17041   CONTINUE
17042   CONTINUE
        DO 17061 k=1,16
          pe_be(l,k) = -99
17061   CONTINUE
17062   CONTINUE
17031 CONTINUE
17032 CONTINUE
      curr_rec = 1
      iZpos = 0
      nz = egs_read_short(pe_sw_unit,curr_rec)
      DO 17071 medio=1,nmed
        DO 17081 i=1,nne(medio)
          z_sorted(i) = zelem(medio,i)
17081   CONTINUE
17082   CONTINUE
        call egs_heap_sort(nne(medio),z_sorted,sorted)
        DO 17091 i=1,nne(medio)
          pe_zsorted(i,medio) = z_sorted(i)
17091   CONTINUE
17092   CONTINUE
        DO 17101 i=1,nne(medio)
          iZ = z_sorted(i)
          is_there = .false.
          DO 17111 j=1,medio-1
            DO 17121 k=1,nne(j)
              IF (( iZ .EQ. pe_zsorted(k,j) )) THEN
                is_there = .true.
                GO TO17122
              END IF
17121       CONTINUE
17122       CONTINUE
17111     CONTINUE
17112     CONTINUE
          IF((is_there))GO TO17101
          iZpos = iZpos + 1
          zread(iZpos) = iZ
          pe_zpos(iZ) = iZpos
          pos = 3 + (iZ-1)*4
          curr_rec = egs_read_int(pe_sw_unit,pos) + 1
          i_nge = egs_read_short(pe_sw_unit,curr_rec)
          i_nshell = egs_read_short(pe_sw_unit,curr_rec)
          pe_nge(iZpos) = i_nge
          pe_nshell(iZpos) = i_nshell
          e_old = -1.0
          ish = 0
          DO 17131 j=1,i_nge
            e_r = egs_read_real(pe_sw_unit,curr_rec)
            sigma_r = egs_read_real(pe_sw_unit,curr_rec)
            pe_energy(j,iZpos) = e_r
            pe_xsection(j,iZpos,0) = sigma_r
            rest_xs(j,iZpos) = sigma_r
            DO 17141 k=1,i_nshell
              sigma_r = egs_read_real(pe_sw_unit,curr_rec)
              pe_xsection(j,iZpos,k) = sigma_r
              rest_xs(j,iZpos) = rest_xs(j,iZpos) - sigma_r
17141       CONTINUE
17142       CONTINUE
            IF ((e_r - e_old .LT. 1e-15)) THEN
              pe_be(iZpos,i_nshell-ish) = e_r
              ish = ish + 1
            END IF
            e_old = e_r
17131     CONTINUE
17132     CONTINUE
17101   CONTINUE
17102   CONTINUE
17071 CONTINUE
17072 CONTINUE
      pe_ne = iZpos
      DO 17151 i=1,pe_ne
        iZ = zread(i)
        IF ((pe_nshell(i) .EQ. 0)) THEN
          DO 17161 j=1,pe_nge(i)
            pe_energy(j,i) = log(pe_energy(j,i))
17161     CONTINUE
17162     CONTINUE
          GO TO17151
        END IF
        DO 17171 l=1,pe_nshell(i)
          IF (( pe_be(i,l) .NE. binding_energies(l,iZ))) THEN
            shift_required = .true.
            deltaEb = binding_energies(l,iZ)-pe_be(i,l)
          ELSE
            shift_required =.false.
          END IF
          is_there = .false.
          DO 17181 j=1,pe_nge(i)
            tmp_e(j,l) = pe_energy(j,i)
            tmp_xs(j,l) = pe_xsection(j,i,l)
            IF (( shift_required .AND. pe_energy(j,i) .GE. pe_be(i,l) ))
     *       THEN
              tmp_e(j,l) = tmp_e(j,l) + deltaEb
              IF ((pe_energy(j,i) .EQ. pe_be(i,l) .AND. .NOT.is_there))
     *        THEN
                ib(l) = j
                is_there = .true.
              END IF
              IF ((l .EQ. 1)) THEN
                new_e(j) = tmp_e(j,l)
              ELSE IF((j .LT. ib(l-1))) THEN
                new_e(j) = tmp_e(j,l)
              END IF
            END IF
17181     CONTINUE
17182     CONTINUE
          pe_be(i,l) = binding_energies(l,iZ)
17171   CONTINUE
17172   CONTINUE
        DO 17191 l=2,pe_nshell(i)
          DO 17201 j=1,pe_nge(i)
            IF (( new_e(j) .GE. pe_be(i,l-1) )) THEN
              m = ibsearch(new_e(j),pe_nge(i),tmp_e(1,l))
              slope = log(tmp_xs(m+1,l)/tmp_xs(m,l))
              slope = slope/log(tmp_e(m+1,l)/tmp_e(m,l))
              pe_xsection(j,i,l) = log(tmp_xs(m,l))
              pe_xsection(j,i,l) = pe_xsection(j,i,l) + slope*log(new_e(
     *        j)/tmp_e(m,l))
              pe_xsection(j,i,l) = exp(pe_xsection(j,i,l))
            END IF
17201     CONTINUE
17202     CONTINUE
17191   CONTINUE
17192   CONTINUE
        DO 17211 j=1,pe_nge(i)
          IF (( j .LT. ib(pe_nshell(i)))) THEN
            new_e(j) = pe_energy(j,i)
          END IF
          m = ibsearch(new_e(j),pe_nge(i),pe_energy(1,i))
          slope = log(rest_xs(m+1,i)/rest_xs(m,i))
          slope = slope/log(pe_energy(m+1,i)/pe_energy(m,i))
          pe_xsection(j,i,0) = log(rest_xs(m,i))
          pe_xsection(j,i,0) = pe_xsection(j,i,0) + slope*log(new_e(j)/p
     *    e_energy(m,i))
          pe_xsection(j,i,0) = exp(pe_xsection(j,i,0))
          DO 17221 l=1,pe_nshell(i)
            pe_xsection(j,i,0) = pe_xsection(j,i,0) + pe_xsection(j,i,l)
17221     CONTINUE
17222     CONTINUE
17211   CONTINUE
17212   CONTINUE
        DO 17231 j=1,pe_nge(i)
          pe_energy(j,i) = log(new_e(j))
          DO 17241 l=1,pe_nshell(i)
            pe_xsection(j,i,l) = log(pe_xsection(j,i,l)/pe_xsection(j,i,
     *      0))
17241     CONTINUE
17242     CONTINUE
17231   CONTINUE
17232   CONTINUE
17151 CONTINUE
17152 CONTINUE
      write(i_log,'(a/)') ' done'
      IF((is_open))close(pe_sw_unit)
      return
      end
      SUBROUTINE RELAX(energy,n,iZ)
      implicit none
      integer*4 n,iZ
      real*8 energy
      integer*4 vac_array(50),  n_vac,  shell
      integer*4 final,finala,  final1,final2,   iql,  irl
      integer*4 first_transition(5), last_transition(5)
      integer*4 final_state(39)
      integer*4 k, np_old, ip, iarg
      real*8 e_array(50),  Ei,Ef,  Ex,  eta,  e_check,  min_E,ekcut,pkcu
     *t,elcut
      real*8 xphi,yphi,xphi2,yphi2,rhophi2, cphi,sphi
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/BOUNDS/ECUT,PCUT,VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L,IPHTER
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/relax_data/ relax_first(3000),  relax_ntran(3000),  relax_s
     *tate(10000),  relax_prob(10000),  relax_atbin(10000),  relax_ntot
      real*8 relax_prob
      integer*4 relax_first, relax_ntran, relax_state, relax_atbin, rela
     *x_ntot
      common/x_options/eadl_relax,  mcdf_pe_xsections
      logical eadl_relax, mcdf_pe_xsections
      common/user_relax/ u_relax,ish_relax,iZ_relax
      real*8 u_relax
      integer*4 ish_relax, iZ_relax
      data first_transition/1,20,27,33,38/
      data last_transition/19,26,32,37,39/
      data final_state/  4,3,5,6,  202,302,402,404,403,303,  502,503,504
     *,602,603,604,  505,605,606,  13,14,  5,6,  505,605,606,  14,  5,6,
     *  505,605,606,  5,6,  505,605,606,  6,  606/
      save first_transition,last_transition,final_state
      IF ((eadl_relax)) THEN
        call egs_eadl_relax(iZ,n)
        return
      END IF
      IF (( n .LT. 1 .OR. n .GT. 6 )) THEN
        return
      END IF
      iz_relax = iZ
      irl = ir(np)
      ekcut = ECUT-rm
      pkcut = PCUT
      min_E = 0.001
      IF (( energy .LE. min_E )) THEN
        edep = edep + energy
        edep_local = energy
        IARG=34
        IF ((IAUSFL(IARG+1).NE.0)) THEN
          CALL AUSGAB(IARG)
        END IF
        IF((IARG.LT.0))RETURN
        return
      END IF
      n_vac = 1
      vac_array(n_vac) = n
      np_old = np
      e_check = 0
      e_array(n_vac) = energy
17250 CONTINUE
17251   CONTINUE
        shell = vac_array(n_vac)
        Ei = e_array(n_vac)
        n_vac = n_vac - 1
        IF (( Ei .LE. min_E )) THEN
          edep = edep + Ei
          edep_local = Ei
          IARG=34
          IF ((IAUSFL(IARG+1).NE.0)) THEN
            CALL AUSGAB(IARG)
          END IF
          IF((IARG.LT.0))RETURN
          IF((n_vac .GT. 0))goto 17250
          GO TO17252
        END IF
        ish_relax = shell
        u_relax = Ei
        IF (( shell .EQ. 6 )) THEN
          IF (( Ei .GT. ekcut )) THEN
            np = np + 1
            IF (( np .GT. 10000 )) THEN
              write(i_log,'(/a)') '***************** Error: '
              write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','RELAX'
     *        , ' stack size exceeded! ',' $MAXSTACK = ',10000,' np = ',
     *        np
              write(i_log,'(/a)') '***************** Quiting now.'
              call exit(1)
            END IF
            e(np) = Ei + prm
            iq(np) = -1
            X(np)=X(np-1)
            Y(np)=Y(np-1)
            Z(np)=Z(np-1)
            IR(np)=IR(np-1)
            WT(np)=WT(np-1)
            DNEAR(np)=DNEAR(np-1)
            LATCH(np)=LATCH(np-1)
            IF((rng_seed .GT. 128))call ranmar_get
            eta = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            eta = 2*eta - 1
            w(np) = eta
            eta = (1-eta)*(1+eta)
            IF (( eta .GT. 1e-20 )) THEN
              eta = Sqrt(eta)
17261         CONTINUE
                IF((rng_seed .GT. 128))call ranmar_get
                xphi = rng_array(rng_seed)*twom24
                rng_seed = rng_seed + 1
                xphi = 2*xphi - 1
                xphi2 = xphi*xphi
                IF((rng_seed .GT. 128))call ranmar_get
                yphi = rng_array(rng_seed)*twom24
                rng_seed = rng_seed + 1
                yphi2 = yphi*yphi
                rhophi2 = xphi2 + yphi2
                IF(rhophi2.LE.1)GO TO17262
              GO TO 17261
17262         CONTINUE
              rhophi2 = 1/rhophi2
              cphi = (xphi2 - yphi2)*rhophi2
              sphi = 2*xphi*yphi*rhophi2
              u(np) = eta*cphi
              v(np) = eta*sphi
            ELSE
              u(np) = 0
              v(np) = 0
              w(np) = 1
            END IF
            IARG=27
            IF ((IAUSFL(IARG+1).NE.0)) THEN
              CALL AUSGAB(IARG)
            END IF
            IF((IARG.LT.0))RETURN
          ELSE
            edep = edep + Ei
            edep_local = Ei
            IARG=34
            IF ((IAUSFL(IARG+1).NE.0)) THEN
              CALL AUSGAB(IARG)
            END IF
            IF((IARG.LT.0))RETURN
          END IF
          IF((n_vac .GT. 0))goto 17250
          GO TO17252
        END IF
        IF((rng_seed .GT. 128))call ranmar_get
        eta = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        DO 17271 k=first_transition(shell),last_transition(shell)-1
          eta = eta - relaxation_prob(k,iZ)
          IF((eta .LE. 0))GO TO17272
17271   CONTINUE
17272   CONTINUE
        final = final_state(k)
        finala = final
        IF (( final .LT. 100 )) THEN
          IF (( final .LT. 10 )) THEN
            iql = 0
            elcut = pkcut
          ELSE
            final = final - 10
            iql = -1
            elcut = ekcut
          END IF
          Ef = binding_energies(final,iZ)
          Ex = Ei - Ef
          n_vac = n_vac + 1
          vac_array(n_vac) = final
          e_array(n_vac) = Ef
        ELSE
          final1 = final/100
          final2 = final - final1*100
          n_vac = n_vac + 1
          vac_array(n_vac) = final1
          e_array(n_vac) = binding_energies(final1,iZ)
          n_vac = n_vac + 1
          vac_array(n_vac) = final2
          e_array(n_vac) = binding_energies(final2,iZ)
          iql = -1
          Ex = Ei - e_array(n_vac) - e_array(n_vac-1)
          elcut = ekcut
        END IF
        IF (( Ex .LE. elcut )) THEN
          edep = edep + Ex
          IF (( finala .LT. 10 )) THEN
            edep_local = Ex
            IARG=33
            IF ((IAUSFL(IARG+1).NE.0)) THEN
              CALL AUSGAB(IARG)
            END IF
            IF((IARG.LT.0))RETURN
          ELSE
            edep_local = Ex
            IARG=34
            IF ((IAUSFL(IARG+1).NE.0)) THEN
              CALL AUSGAB(IARG)
            END IF
            IF((IARG.LT.0))RETURN
          END IF
        ELSE
          np = np + 1
          IF (( np .GT. 10000 )) THEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','RELAX',
     *      ' stack size exceeded! ',' $MAXSTACK = ',10000,' np = ',np
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          iq(np) = iql
          IF (( iql .EQ. 0 )) THEN
            e(np) = Ex
          ELSE
            e(np) = Ex + rm
          END IF
          X(np)=X(np-1)
          Y(np)=Y(np-1)
          Z(np)=Z(np-1)
          IR(np)=IR(np-1)
          WT(np)=WT(np-1)
          DNEAR(np)=DNEAR(np-1)
          LATCH(np)=LATCH(np-1)
          IF((rng_seed .GT. 128))call ranmar_get
          eta = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          eta = 2*eta - 1
          w(np) = eta
          eta = (1-eta)*(1+eta)
          IF (( eta .GT. 1e-20 )) THEN
            eta = Sqrt(eta)
17281       CONTINUE
              IF((rng_seed .GT. 128))call ranmar_get
              xphi = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              xphi = 2*xphi - 1
              xphi2 = xphi*xphi
              IF((rng_seed .GT. 128))call ranmar_get
              yphi = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              yphi2 = yphi*yphi
              rhophi2 = xphi2 + yphi2
              IF(rhophi2.LE.1)GO TO17282
            GO TO 17281
17282       CONTINUE
            rhophi2 = 1/rhophi2
            cphi = (xphi2 - yphi2)*rhophi2
            sphi = 2*xphi*yphi*rhophi2
            u(np) = eta*cphi
            v(np) = eta*sphi
          ELSE
            u(np) = 0
            v(np) = 0
            w(np) = 1
          END IF
          IF (( finala .LT. 10 )) THEN
            IARG=25
            IF ((IAUSFL(IARG+1).NE.0)) THEN
              CALL AUSGAB(IARG)
            END IF
            IF((IARG.LT.0))RETURN
          ELSE IF(( finala .LT. 100 )) THEN
            IARG=26
            IF ((IAUSFL(IARG+1).NE.0)) THEN
              CALL AUSGAB(IARG)
            END IF
            IF((IARG.LT.0))RETURN
          ELSE
            IARG=27
            IF ((IAUSFL(IARG+1).NE.0)) THEN
              CALL AUSGAB(IARG)
            END IF
            IF((IARG.LT.0))RETURN
          END IF
        END IF
      GO TO 17251
17252 CONTINUE
      return
      end
      subroutine egs_init_relax
      implicit none
      COMMON/BREMPR/ DL1(8,7),DL2(8,7),DL3(8,7),DL4(8,7),DL5(8,7),DL6(8,
     *7), ALPHI(2,7),BPAR(2,7),DELPOS(2,7), WA(7,50),PZ(7,50),ZELEM(7,50
     *),RHOZ(7,50), PWR2I(50), DELCM(7),ZBRANG(7),LZBRANG(7),NNE(7), IBR
     *DST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(7,50,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L,IPHTER
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/PHOTIN/ EBINDA(7), GE0(7),GE1(7), GMFP0(2000,7),GMFP1(2000,
     *7),GBR10(2000,7),GBR11(2000,7),GBR20(2000,7),GBR21(2000,7), RCO0(7
     *),RCO1(7), RSCT0(100,7),RSCT1(100,7), COHE0(2000,7),COHE1(2000,7),
     *  PHOTONUC0(2000,7),PHOTONUC1(2000,7), DPMFP, MPGEM(1,7), NGR(7)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      COMMON/THRESH/RMT2,RMSQ, AP(7),AE(7),UP(7),UE(7),TE(7),THMOLL(7)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      common/x_options/eadl_relax,  mcdf_pe_xsections
      logical eadl_relax, mcdf_pe_xsections
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/relax_data/ relax_first(3000),  relax_ntran(3000),  relax_s
     *tate(10000),  relax_prob(10000),  relax_atbin(10000),  relax_ntot
      real*8 relax_prob
      integer*4 relax_first, relax_ntran, relax_state, relax_atbin, rela
     *x_ntot
      common/shell_data/ shell_be(3000),  shell_type(3000),  shell_num(3
     *000),  shell_Z(3000),  shell_eadl(100,30),  shell_ntot
      real*8 shell_be
      integer*4 shell_type,shell_Z,shell_ntot,shell_num,shell_eadl
      integer*4 lnblnk1,egs_get_unit,relax_unit,ounit,egs_open_file
      integer*4 sorted(100),i,j,k,k1,k2,m
      real*8 z_sorted(100),pz_sorted(100)
      character data_dir*128,relax_file*144
      integer*4 ish,medio,iZ,ntran
      real*8 Ec, Pc, tmp, min_be, sumw,Ex
      logical is_open, is_there
      real*8 wtmp(300)
      integer*4 itmp(300)
      integer*4 pos, curr_rec, sh_eadl
      integer*4 nz, nshell, tr_type
      integer*4 ttype
      real*4 be_r, prob_r
      DO 17291 iZ=1,100
        DO 17301 k=1,30
          shell_eadl(iZ,k) = -1
17301   CONTINUE
17302   CONTINUE
17291 CONTINUE
17292 CONTINUE
      min_be = 0.001
      write(i_log,'(/a)') ' Reading EADL relaxation data ......'
      data_dir = hen_house(:lnblnk1(hen_house)) // 'data' // '/'
      relax_file = data_dir(:lnblnk1(data_dir)) // 'relax.data'
      relax_unit = egs_get_unit(0)
      IF (( relax_unit .LT. 1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'egs_init_relax: failed to get a free Fortran I/O
     * unit'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      open(relax_unit,file=relax_file,status='old', form='UNFORMATTED',A
     *CCESS='direct',recl=4, err=17310)
      GOTO 17320
17310 write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(2a)') 'egs_init_relax: failed to open ', relax_file
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
17320 is_open = .true.
      curr_rec = 1
      read(relax_unit,rec=curr_rec) nz
      shell_ntot = 0
      relax_ntot = 0
      DO 17331 medio=1,nmed
        DO 17341 i=1,nne(medio)
          z_sorted(i) = zelem(medio,i)
17341   CONTINUE
17342   CONTINUE
        call egs_heap_sort(nne(medio),z_sorted,sorted)
        DO 17351 i=1,nne(medio)
          iZ = z_sorted(i)
          is_there = .false.
          DO 17361 j=1,shell_ntot
            IF (( iZ .EQ. shell_Z(j) )) THEN
              is_there = .true.
              GO TO17362
            END IF
17361     CONTINUE
17362     CONTINUE
          IF((is_there))GO TO17351
          pos = iZ + 1
          read(relax_unit,rec=pos) curr_rec
          read(relax_unit,rec=curr_rec) nshell
          IF (( shell_ntot + nshell .GT. 3000 )) THEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,'(a,i5,a/,a//)') ' Too many shells to fit in the
     * list: ', shell_ntot + nshell,' (at least).', ' Increase the param
     *eter $MAXSHELL and retry '
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          write(i_log,'(a,i3,a,i2,a)') '  Z = ',iZ,' has ',nshell,' shel
     *ls'
          DO 17371 ish=shell_ntot+1,shell_ntot+nshell
            curr_rec = curr_rec+1
            read(relax_unit,rec=curr_rec) shell_type(ish)
            curr_rec = curr_rec+1
            read(relax_unit,rec=curr_rec) ntran
            curr_rec = curr_rec+1
            read(relax_unit,rec=curr_rec) be_r
            shell_be(ish) = be_r
            shell_Z(ish) = iZ
            shell_num(ish) = ish - shell_ntot
            shell_eadl(iZ,shell_num(ish)) = ish
            IF ((binding_energies(shell_num(ish),iZ) .GT. 0)) THEN
              shell_be(ish) = binding_energies(shell_num(ish),iZ)
            ELSE IF(( photon_xsections .EQ. 'epdl' )) THEN
              binding_energies(shell_num(ish),iZ) = shell_be(ish)
            END IF
            DO 17381 k=1,ntran
              curr_rec = curr_rec+1
              read(relax_unit,rec=curr_rec) itmp(k)
              curr_rec = curr_rec+1
              read(relax_unit,rec=curr_rec) prob_r
              wtmp(k)=prob_r
              IF ((itmp(k).LT.64)) THEN
                itmp(k) = itmp(k) + 1
              ELSE
                itmp(k) = itmp(k) + 65
              END IF
17381       CONTINUE
17382       CONTINUE
            IF (( shell_be(ish) .LT. min_be )) THEN
              relax_first(ish) = -1
              relax_ntran(ish) = -1
            ELSE
              sumw = 0
              DO 17391 k=1,ntran
                sumw = sumw + wtmp(k)
17391         CONTINUE
17392         CONTINUE
              IF (( sumw .GT. 1 )) THEN
                DO 17401 k=1,ntran
                  wtmp(k) = wtmp(k)/sumw
17401           CONTINUE
17402           CONTINUE
              ELSE IF(( sumw .LT. 1 )) THEN
                ntran = ntran + 1
                itmp(ntran) = -1
                wtmp(ntran) = 1-sumw
              END IF
              IF (( relax_ntot + ntran .GT. 10000 )) THEN
                write(i_log,'(/a)') '***************** Error: '
                write(i_log,'(a,i5,a/,a/)') ' Too many relaxation transi
     *tions: ', relax_ntot + ntran,' (at least).', ' Increase $MAXRELAX
     *and retry '
                write(i_log,'(/a)') '***************** Quiting now.'
                call exit(1)
              END IF
              relax_first(ish) = relax_ntot+1
              relax_ntran(ish) = ntran
              call prepare_alias_histogram(ntran,wtmp, relax_atbin(relax
     *        _ntot+1))
              DO 17411 k=1,ntran
                j = relax_ntot + k
                relax_state(j) = itmp(k)
                relax_prob(j) = wtmp(k)
17411         CONTINUE
17412         CONTINUE
              relax_ntot = relax_ntot + ntran
            END IF
17371     CONTINUE
17372     CONTINUE
          shell_ntot = shell_ntot + nshell
17351   CONTINUE
17352   CONTINUE
17331 CONTINUE
17332 CONTINUE
      write(i_log,'(a/)') ' ...... Done.'
      IF((is_open))close(relax_unit)
      return
      stop
      end
      subroutine egs_eadl_relax(iZ, shell_egs)
      implicit none
      common/relax_data/ relax_first(3000),  relax_ntran(3000),  relax_s
     *tate(10000),  relax_prob(10000),  relax_atbin(10000),  relax_ntot
      real*8 relax_prob
      integer*4 relax_first, relax_ntran, relax_state, relax_atbin, rela
     *x_ntot
      common/relax_for_user/ rfu_E0,  rfu_E,  rfu_Z,  rfu_j0,  rfu_n0,
     *rfu_t0,  rfu_j,  rfu_n,  rfu_t
      integer*4 rfu_Z,rfu_j0,rfu_n0,rfu_t0,rfu_j,rfu_n,rfu_t
      real*8 rfu_E0,rfu_E
      common/shell_data/ shell_be(3000),  shell_type(3000),  shell_num(3
     *000),  shell_Z(3000),  shell_eadl(100,30),  shell_ntot
      real*8 shell_be
      integer*4 shell_type,shell_Z,shell_ntot,shell_num,shell_eadl
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/THRESH/RMT2,RMSQ, AP(7),AE(7),UP(7),UE(7),TE(7),THMOLL(7)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/BOUNDS/ECUT,PCUT,VACDST
      real*8 ECUT,  PCUT,  VACDST
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR( 2097154),MED( 2097154),IRAYLR,
     *IPHOTONUCR( 2097154)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      common/x_options/eadl_relax,  mcdf_pe_xsections
      logical eadl_relax, mcdf_pe_xsections
      common/user_relax/ u_relax,ish_relax,iZ_relax
      real*8 u_relax
      integer*4 ish_relax, iZ_relax
      real*8 Ec,Pc,min_E,rnno,Evac,Ef,Ef1,Ef2,Ex,Ecc, cost,sint,cphi,sph
     *i
      integer*4 shell, shell_egs, iZ, iarg
      integer*4 irl,vacs(100),nvac,vac,new_state,iqf,np_save,new1,new2
      integer*4 sample_alias_histogram
      real*8 xphi,xphi2,yphi,yphi2,rhophi2
      shell = shell_eadl(iZ,shell_egs)
      IF (( shell .LT. 1 .OR. shell .GT. 3000 )) THEN
        return
      END IF
      irl = ir(np)
      Ec = ECUT - rm
      Pc = PCUT
      min_E = 0.001
      Evac = shell_be(shell)
      rfu_Z = shell_Z(shell)
      rfu_j0 = shell
      rfu_n0 = shell_num(shell)
      rfu_t0 = shell_type(shell)
      rfu_E0 = Evac
      IF ((shell_egs .GT. 4 .AND. .NOT.mcdf_pe_xsections)) THEN
        edep = Evac
        edep_local = Evac
        IARG=34
        IF ((IAUSFL(IARG+1).NE.0)) THEN
          CALL AUSGAB(IARG)
        END IF
        IF((IARG.LT.0))RETURN
        return
      END IF
      vac = shell
      Nvac = 0
      np_save = np
17421 CONTINUE
        IF (( Evac .LT. min_E .OR. relax_ntran(vac) .LT. 1 )) THEN
          edep = edep + Evac
          edep_local = Evac
          IARG=34
          IF ((IAUSFL(IARG+1).NE.0)) THEN
            CALL AUSGAB(IARG)
          END IF
          IF((IARG.LT.0))RETURN
          go to 17430
        END IF
        new_state = sample_alias_histogram(relax_ntran(vac), relax_prob(
     *  relax_first(vac)), relax_atbin(relax_first(vac)))
        IF (( new_state .LT. 0 )) THEN
          Ef = 0
          iqf = -1
          Ecc = Ec
        ELSE
          new_state = relax_state(relax_first(vac)+new_state-1)
          IF (( new_state .LE. 64 )) THEN
            iqf = 0
            new_state = new_state + vac - shell_num(vac)
            Ef = shell_be(new_state)
            Nvac = Nvac + 1
            vacs(Nvac) = new_state
            Ecc = Pc
          ELSE
            iqf = -1
            new1 = new_state/64
            new2 = new_state - 64*new1
            new1 = new1 + vac - shell_num(vac)
            new2 = new2 + vac - shell_num(vac)
            Ef1 = shell_be(new1)
            Ef2 = shell_be(new2)
            Nvac = Nvac + 1
            vacs(Nvac) = new1
            Nvac = Nvac + 1
            vacs(Nvac) = new2
            Ef = Ef1 + Ef2
            Ecc = Ec
          END IF
        END IF
        Ex = Evac - Ef
        edep_local = 0
        IF (( Ex .GT. Ecc )) THEN
          np = np + 1
          IF (( np .GT. 10000 )) THEN
            write(i_log,'(/a)') '***************** Warning: '
            write(i_log,'(3(a,f10.6),a,i2)') 'Evac = ',Evac, ' Ef = ',Ef
     *      ,  ' min_E = ', min_E,' iq = ',iqf
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,'(//,3a,/,2(a,i9),/,a)') ' In subroutine ','new_
     *relax', ' stack size exceeded! ',' $MXSTACK = ',10000,' np = ',np,
     *       ' Increase $MXSTACK and try again '
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          iq(np) = iqf
          X(np)=X(np_save)
          Y(np)=Y(np_save)
          Z(np)=Z(np_save)
          IR(np)=IR(np_save)
          WT(np)=WT(np_save)
          DNEAR(np)=DNEAR(np_save)
          LATCH(np)=LATCH(np_save)
          IF((rng_seed .GT. 128))call ranmar_get
          rnno = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          cost = 2*rnno-1
          sint = 1-cost*cost
          IF (( sint .GT. 0 )) THEN
            sint = sqrt(sint)
17441       CONTINUE
              IF((rng_seed .GT. 128))call ranmar_get
              xphi = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              xphi = 2*xphi - 1
              xphi2 = xphi*xphi
              IF((rng_seed .GT. 128))call ranmar_get
              yphi = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              yphi2 = yphi*yphi
              rhophi2 = xphi2 + yphi2
              IF(rhophi2.LE.1)GO TO17442
            GO TO 17441
17442       CONTINUE
            rhophi2 = 1/rhophi2
            cphi = (xphi2 - yphi2)*rhophi2
            sphi = 2*xphi*yphi*rhophi2
            u(np) = sint*cphi
            v(np) = sint*sphi
            w(np) = cost
          ELSE
            u(np) = 0
            v(np) = 0
            w(np) = cost
          END IF
          rfu_j = vac
          rfu_n = shell_num(vac)
          rfu_t = shell_type(vac)
          rfu_E = shell_be(vac)
          IF (( iqf .EQ. 0 )) THEN
            e(np) = Ex
            IARG=25
            IF ((IAUSFL(IARG+1).NE.0)) THEN
              CALL AUSGAB(IARG)
            END IF
            IF((IARG.LT.0))RETURN
          ELSE
            e(np) = Ex + rm
            IARG=27
            IF ((IAUSFL(IARG+1).NE.0)) THEN
              CALL AUSGAB(IARG)
            END IF
            IF((IARG.LT.0))RETURN
          END IF
        ELSE
          edep = edep + Ex
          IF (( iqf .EQ. 0 )) THEN
            edep_local = Ex
            IARG=33
            IF ((IAUSFL(IARG+1).NE.0)) THEN
              CALL AUSGAB(IARG)
            END IF
            IF((IARG.LT.0))RETURN
          ELSE
            edep_local = Ex
            IARG=34
            IF ((IAUSFL(IARG+1).NE.0)) THEN
              CALL AUSGAB(IARG)
            END IF
            IF((IARG.LT.0))RETURN
          END IF
        END IF
17430   CONTINUE
        IF((Nvac .EQ. 0))GO TO17422
        vac = vacs(Nvac)
        Evac = shell_be(vac)
        Nvac = Nvac - 1
      GO TO 17421
17422 CONTINUE
      return
      end
      subroutine init_triplet
      implicit none
      COMMON/BREMPR/ DL1(8,7),DL2(8,7),DL3(8,7),DL4(8,7),DL5(8,7),DL6(8,
     *7), ALPHI(2,7),BPAR(2,7),DELPOS(2,7), WA(7,50),PZ(7,50),ZELEM(7,50
     *),RHOZ(7,50), PWR2I(50), DELCM(7),ZBRANG(7),LZBRANG(7),NNE(7), IBR
     *DST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(7,50,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      common/triplet_data/ a_triplet(250,7), b_triplet(250,7), dl_triple
     *t, dli_triplet, bli_triplet, log_4rm
      real*8 a_triplet,b_triplet,dl_triplet, dli_triplet, bli_triplet, l
     *og_4rm
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      real*8 energies(55), sig_pair(100,55), sig_triplet(100,55), f_trip
     *let(55), sigp(55), sigt(55), as(55), bs(55), cs(55), ds(55)
      character*128 triplet_data_file
      integer*4 want_triplet_unit, triplet_unit, triplet_out
      integer*4 i, iel, imed, lnblnk1, egs_get_unit, ntrip, iz1, izi, if
     *irst
      real*8 logE, f_new, f_old, spline
      IF((itriplet .EQ. 0))return
      DO 17451 i=1,len(triplet_data_file)
        triplet_data_file(i:i) = ' '
17451 CONTINUE
17452 CONTINUE
      triplet_data_file = hen_house(:lnblnk1(hen_house)) // 'data' // '/
     *' // 'triplet.data'
      want_triplet_unit = 63
      triplet_unit = egs_get_unit(want_triplet_unit)
      IF (( triplet_unit .LT. 1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'init_triplet: failed to get a free Fortran I/O u
     *nit'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      open(triplet_unit,file=triplet_data_file,err=17460)
      write(i_log,'(a,$)') ' init_triplet: reading triplet data ... '
      read(triplet_unit,*) ntrip
      IF (( ntrip .GT. 55 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'Max. number of data points per element is ',55
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      read(triplet_unit,*,err=17470) (energies(i),i=1,ntrip)
      DO 17481 iel=1,100
        read(triplet_unit,*)
        read(triplet_unit,*,err=17470) (sig_pair(iel,i),i=1,ntrip)
        read(triplet_unit,*,err=17470) (sig_triplet(iel,i),i=1,ntrip)
17481 CONTINUE
17482 CONTINUE
      write(i_log,*) 'OK'
      ifirst = 0
      DO 17491 i=1,ntrip
        IF((ifirst .EQ. 0 .AND. energies(i) .GT. 4.01*rm))ifirst = i
        energies(i) = log(energies(i))
17491 CONTINUE
17492 CONTINUE
      log_4rm = log(4*rm)
      energies(ifirst-1) = log_4rm
      dl_triplet = (energies(ntrip) - log_4rm)/250
      dli_triplet = 1/dl_triplet
      bli_triplet = 1 - log_4rm/dl_triplet
      DO 17501 imed=1,nmed
        write(i_log,'(a,i3,a,$)') '   Preparing triplet fraction data fo
     *r medium ',imed,' ... '
        iz1 = zelem(imed,1) + 0.1
        DO 17511 i=1,ntrip
          sigp(i) = pz(imed,1)*sig_pair(iz1,i)
          sigt(i) = pz(imed,1)*sig_triplet(iz1,i)
          DO 17521 iel=2,nne(imed)
            izi = zelem(imed,iel) + 0.1
            sigp(i) = sigp(i) + pz(imed,iel)*sig_pair(izi,i)
            sigt(i) = sigt(i) + pz(imed,iel)*sig_triplet(izi,i)
17521     CONTINUE
17522     CONTINUE
17511   CONTINUE
17512   CONTINUE
        DO 17531 i=ifirst,ntrip
          f_triplet(i-ifirst+2) = sigt(i)/(sigp(i) + sigt(i))
17531   CONTINUE
17532   CONTINUE
        f_triplet(1) = 0
        call set_spline(energies(ifirst-1),f_triplet,as,bs,cs,ds,ntrip-i
     *  first+2)
        logE = log_4rm
        f_old = 0
        DO 17541 i=1,250-1
          logE = logE + dl_triplet
          f_new = spline(logE,energies(ifirst-1),as,bs,cs,ds,ntrip-ifirs
     *    t+2)
          a_triplet(i,imed) = (f_new - f_old)*dli_triplet
          b_triplet(i,imed) = f_new - a_triplet(i,imed)*logE
          f_old = f_new
17541   CONTINUE
17542   CONTINUE
        write(i_log,*) 'OK'
17501 CONTINUE
17502 CONTINUE
      close(triplet_unit)
      return
17460 CONTINUE
      write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(a,a)') ' init_triplet: failed to open the data file
     *', triplet_data_file(:lnblnk1(triplet_data_file))
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
17470 CONTINUE
      write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) ' init_triplet: error while reading triplet data '
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      return
      end
      SUBROUTINE EDGSET(NREGLO,NREGHI)
      implicit none
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L,IPHTER
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      common/x_options/eadl_relax,  mcdf_pe_xsections
      logical eadl_relax, mcdf_pe_xsections
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer NREGLO,NREGHI
      integer*4 i,j,k,jj,iz
      logical do_relax
      logical got_data
      save got_data
      data got_data/.false./
      IF((got_data))return
      write(i_log,'(a/,a)') 'Output from subroutine EDGSET:', '=========
     *====================='
      do_relax = .false.
      DO 17551 j=1, 2097154
        IF (( IEDGFL .GT. 0 .AND. IEDGFL .LE. 100 )) THEN
          do_relax = .true.
          GO TO17552
        END IF
17551 CONTINUE
17552 CONTINUE
      IF (( .NOT.do_relax )) THEN
        IF ((eadl_relax)) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(a,/a)') 'You must turn ON atomic relaxations whe
     *n requesting', 'detailed atomic relaxation (eadl_relax=true)!'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        write(i_log,'(a/)') ' Atomic relaxations not requested! '
        return
      END IF
      write(i_log,'(a/)') ' Atomic relaxations requested! '
      write(i_log,'(a$)') ' Reading simplified photo-absorption data ...
     *..'
      got_data = .true.
      rewind(i_photo_relax)
      DO 17561 i=1,100
        IF ((eadl_relax)) THEN
          read(i_photo_relax,*)
        ELSE
          read(i_photo_relax,*) j,(binding_energies(k,i),k=1,6)
          DO 17571 k=1,6
            binding_energies(k,i) = binding_energies(k,i)*1e-6
17571     CONTINUE
17572     CONTINUE
        END IF
17561 CONTINUE
17562 CONTINUE
      read(i_photo_relax,*)
      DO 17581 i=1,100
        read(i_photo_relax,*) j,(interaction_prob(k,i),k=1,5)
        interaction_prob(6,i)=1.01
17581 CONTINUE
17582 CONTINUE
      write(i_log,'(a)') ' Done'
      write(i_log,'(/a$)') ' Reading simplified relaxation data .....'
      read(i_photo_relax,*)
      DO 17591 i=1,100
        read(i_photo_relax,*) j,(relaxation_prob(k,i),k=1,19)
17591 CONTINUE
17592 CONTINUE
      read(i_photo_relax,*)
      DO 17601 i=1,100
        read(i_photo_relax,*) j,(relaxation_prob(k,i),k=20,26)
17601 CONTINUE
17602 CONTINUE
      read(i_photo_relax,*)
      DO 17611 i=1,100
        read(i_photo_relax,*) j,(relaxation_prob(k,i),k=27,32)
17611 CONTINUE
17612 CONTINUE
      read(i_photo_relax,*)
      DO 17621 i=1,100
        read(i_photo_relax,*) j,(relaxation_prob(k,i),k=33,37)
17621 CONTINUE
17622 CONTINUE
      read(i_photo_relax,*)
      DO 17631 i=1,100
        read(i_photo_relax,*) j,relaxation_prob(38,i)
17631 CONTINUE
17632 CONTINUE
      write(i_log,'(a)') ' Done'
      write(i_log,'(/a$)') ' Reading parametrized XCOM photo cross secti
     *on data .....'
      rewind(i_photo_cs)
      DO 17641 i=1,100
        read(i_photo_cs,*) j,edge_number(i)
        DO 17651 j=1,edge_number(i)
          read(i_photo_cs,*) edge_a(j,i),edge_b(j,i),edge_c(j,i), edge_d
     *    (j,i),edge_energies(j,i)
17651   CONTINUE
17652   CONTINUE
17641 CONTINUE
17642 CONTINUE
      write(i_log,'(a)') ' Done'
      IF ((eadl_relax)) THEN
        call egs_init_relax
      END IF
      RETURN
      END
      SUBROUTINE PHOTON(IRCODE)
      implicit none
      integer*4 IRCODE
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/BOUNDS/ECUT,PCUT,VACDST
      real*8 ECUT,  PCUT,  VACDST
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR( 2097154),MED( 2097154),IRAYLR,
     *IPHOTONUCR( 2097154)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/PHOTIN/ EBINDA(7), GE0(7),GE1(7), GMFP0(2000,7),GMFP1(2000,
     *7),GBR10(2000,7),GBR11(2000,7),GBR20(2000,7),GBR21(2000,7), RCO0(7
     *),RCO1(7), RSCT0(100,7),RSCT1(100,7), COHE0(2000,7),COHE1(2000,7),
     *  PHOTONUC0(2000,7),PHOTONUC1(2000,7), DPMFP, MPGEM(1,7), NGR(7)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/THRESH/RMT2,RMSQ, AP(7),AE(7),UP(7),UE(7),TE(7),THMOLL(7)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      COMMON/USERPS/n_split
      integer*4 n_split
      COMMON/USERRR/ESAVE_GLOBAL,RANGE_ECUTRR(7),IREJECT
      real*8 ESAVE_GLOBAL,RANGE_ECUTRR
      integer*4 IREJECT
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common/egs_vr/ e_max_rr,  prob_RR,  nbr_split,  i_play_RR,      i_
     *survived_RR,
     *  n_RR_warning,                                        i_do_rr
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/score/endep( 2097153), endep2( 2097153), temp2, planarefe,
     *planarefp,planarfe,planarfp, nestep, endep_tmp( 2097153), i_phsp_o
     *ut,i_muidx_out,i_unit_out,IWATCH,mxnp, endep_last( 2097153)
      REAL*8 endep, endep2, temp2,planarefe, planarefp, planarfe, planar
     *fp
      integer*8 nestep
      real endep_tmp
      integer i_phsp_out,   i_muidx_out,    i_unit_out,  IWATCH,mxnp
      integer*2 endep_last
      DOUBLE PRECISION PEIG
      real*8 EIG,  RNNO35,  GMFPR0,  GMFP,  COHFAC,  RNNO37,  XXX,  X2,
     * Q2,  CSQTHE,  REJF,  RNNORJ,  RNNO36,  GBR1,  GBR2,  T,   PHOTONU
     *CFAC,  RNNO39
      integer*4 IARG,  IDR,  IRL,  LGLE,  LXXX
      real*8 d_eta,eta_prime,dpmfp_old, x_save,y_save,z_save,u_save,v_sa
     *ve,w_save, e_save,wt_save,a_survive
      integer*4 ir_save,ip,i_split,latch_save,i_survive_s
      IRCODE=1
      PEIG=E(NP)
      EIG=PEIG
      IRL=IR(NP)
      medium = med(irl)
      IF ((EIG .LE. PCUT)) THEN
        GO TO 17660
      END IF
17670 CONTINUE
17671   CONTINUE
        IF ((WT(NP) .EQ. 0.0)) THEN
          go to 17680
        END IF
        GLE=LOG(EIG)
        IF (( n_split .GT. 1 )) THEN
17690     CONTINUE
          IF((rng_seed .GT. 128))call ranmar_get
          RNNO35 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          rnno35 = rnno35/n_split
          d_eta = 1./n_split
          x_save = x(np)
          y_save = y(np)
          z_save = z(np)
          u_save = u(np)
          v_save = v(np)
          w_save = w(np)
          e_save = e(np)
          wt_save = wt(np)/n_split
          ir_save = ir(np)
          latch_save = latch(np)
          np = np-1
          IF((rng_seed .GT. 128))call ranmar_get
          xxx = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          a_survive = xxx*n_split
          i_survive_s = 1 + a_survive
          dpmfp_old = 0
          eta_prime = 1 - rnno35 + d_eta
          IF ((IWATCH .NE.0 .AND. IWATCH.NE.4)) THEN
            WRITE(6,17700)n_split,wt_save
17700       FORMAT(' Splitting photon into ',I4,' photons with weight ',
     *1PE10.3)
          END IF
          DO 17711 i_split=1,n_split
            eta_prime = eta_prime - d_eta
            IF((eta_prime .LE. 0))goto 17720
            dpmfp = -log(eta_prime) - dpmfp_old
            dpmfp_old = dpmfp_old + dpmfp
            np = np+1
            IF (( np .GT. 10000 )) THEN
              write(6,*) ' Stack overflow in $SELECT-PHOTON-MFP '
              stop
            END IF
            x(np) = x_save
            y(np) = y_save
            z(np) = z_save
            u(np) = u_save
            v(np) = v_save
            w(np) = w_save
            wt(np) = wt_save
            e(np) = e_save
            iq(np) = 0
            ir(np) = ir_save
            latch(np) = latch_save
            irl = ir(np)
            irold = irl
            medium = med(irl)
17731       CONTINUE
              IF (( medium .NE. 0 )) THEN
                LGLE=GE1(MEDIUM)*GLE+GE0(MEDIUM)
                GMFPR0=GMFP1(LGLE,MEDIUM)*GLE+GMFP0(LGLE,MEDIUM)
                RHOF=RHOR(IRL)/RHO(MEDIUM)
                GMFP=GMFPR0/RHOF
                IF ((IRAYLR.EQ.1)) THEN
                  COHFAC=COHE1(LGLE,MEDIUM)*GLE+COHE0(LGLE,MEDIUM)
                  GMFP=GMFP*COHFAC
                END IF
                TSTEP=GMFP*DPMFP
              ELSE
                TSTEP=VACDST
              END IF
              irnew = irl
              idisc = 0
              ustep = tstep
              tustep = ustep
              call howfar
              VSTEP=USTEP
              TVSTEP=VSTEP
              EDEP=PZERO
              IF((IWATCH.GT.0))CALL WATCH(0,IWATCH)
              x(np) = x(np) + u(np)*ustep
              y(np) = y(np) + v(np)*ustep
              z(np) = z(np) + w(np)*ustep
              IF (( idisc .GT. 0 )) THEN
                IF((IWATCH.GT.0))CALL WATCH(3,IWATCH)
                np = np-1
                IF (( np .EQ. 0 )) THEN
                  ircode = 2
                  return
                END IF
                goto 17720
              END IF
              IF((medium .NE. 0))dpmfp = dpmfp - ustep/gmfp
              IF (( irnew .NE. irold )) THEN
                ir(np) = irnew
                irl = irnew
                irold = irnew
                medium = med(irl)
              END IF
              IF((IWATCH.GT.0))CALL WATCH(5,IWATCH)
              IF(((medium .NE. 0 .AND. dpmfp .LT. 1.E-5)))GO TO17732
            GO TO 17731
17732       CONTINUE
            x_save = x(np)
            y_save = y(np)
            z_save = z(np)
            ir_save = ir(np)
            IF ((IRAYLR.EQ.1)) THEN
              IF((rng_seed .GT. 128))call ranmar_get
              RNNO37 = rng_array(rng_seed)*twom24
              rng_seed = rng_seed + 1
              IF ((RNNO37.LE.(1.0-COHFAC))) THEN
                IF (( i_split .NE. i_survive_s )) THEN
                  np = np-1
                  goto 17740
                END IF
                IF((IWATCH.GT.0))CALL WATCH(23,IWATCH)
                IARG=23
                IF ((IAUSFL(IARG+1).NE.0)) THEN
                  CALL AUSGAB(IARG)
                END IF
                IF((IARG.LT.0))RETURN
                wt(np) = wt(np)*n_split
17750           CONTINUE
17751             CONTINUE
                  IF((rng_seed .GT. 128))call ranmar_get
                  XXX = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  LXXX=RCO1(MEDIUM)*XXX+RCO0(MEDIUM)
                  X2=RSCT1(LXXX,MEDIUM)*XXX+RSCT0(LXXX,MEDIUM)
                  Q2=X2*RMSQ/(20.60744*20.60744)
                  COSTHE=1.-Q2/(2.*E(NP)*E(NP))
                  IF((ABS(COSTHE).GT.1.0))GO TO 17750
                  CSQTHE=COSTHE*COSTHE
                  REJF=(1.0+CSQTHE)/2.0
                  IF((rng_seed .GT. 128))call ranmar_get
                  RNNORJ = rng_array(rng_seed)*twom24
                  rng_seed = rng_seed + 1
                  IF(((RNNORJ .LE. REJF)))GO TO17752
                GO TO 17751
17752           CONTINUE
                SINTHE=SQRT(1.0-CSQTHE)
                CALL UPHI(2,1)
                IF((IWATCH.GT.0))CALL WATCH(24,IWATCH)
                goto 17740
              END IF
            END IF
            IF((rng_seed .GT. 128))call ranmar_get
            RNNO36 = rng_array(rng_seed)*twom24
            rng_seed = rng_seed + 1
            GBR1=GBR11(LGLE,MEDIUM)*GLE+GBR10(LGLE,MEDIUM)
            IF (((RNNO36.LE.GBR1).AND.(E(NP).GT.RMT2) )) THEN
              IF((IWATCH.GT.0))CALL WATCH(15,IWATCH)
              IARG=15
              IF ((IAUSFL(IARG+1).NE.0)) THEN
                CALL AUSGAB(IARG)
              END IF
              IF((IARG.LT.0))RETURN
              call pair
              IF((IWATCH.GT.0))CALL WATCH(16,IWATCH)
            ELSE
              GBR2=GBR21(LGLE,MEDIUM)*GLE+GBR20(LGLE,MEDIUM)
              IF ((RNNO36.LT.GBR2)) THEN
                IF((IWATCH.GT.0))CALL WATCH(17,IWATCH)
                IARG=17
                IF ((IAUSFL(IARG+1).NE.0)) THEN
                  CALL AUSGAB(IARG)
                END IF
                IF((IARG.LT.0))RETURN
                call compt
                IF((IWATCH.GT.0))CALL WATCH(18,IWATCH)
              ELSE
                IF((IWATCH.GT.0))CALL WATCH(19,IWATCH)
                IARG=19
                IF ((IAUSFL(IARG+1).NE.0)) THEN
                  CALL AUSGAB(IARG)
                END IF
                IF((IARG.LT.0))RETURN
                call photo
                IF((IWATCH.GT.0))CALL WATCH(20,IWATCH)
              END IF
            END IF
            ip = NPold
17761       CONTINUE
              IF (( iq(ip) .EQ. 0 )) THEN
                IF (( i_split .NE. i_survive_s )) THEN
                  IF (( ip .LT. np )) THEN
                    IF ((IWATCH.NE.0 .AND. IWATCH.NE.4)) THEN
                      WRITE(6,17770)ip,e(ip),iq(ip),ir(ip),x(ip),y(ip),
     *                z(ip),u(ip),v(ip),w(ip),latch(ip),wt(ip)
17770                 FORMAT(' Eliminating scattered photon',T36,':', I5
     *,F9.3,2I4,3F8.3,3F7.3,I10,1PE10.3)
                    END IF
                    e(ip) = e(np)
                    iq(ip) = iq(np)
                    u(ip) = u(np)
                    v(ip) = v(np)
                    w(ip) = w(np)
                    wt(ip) = wt(np)
                    latch(ip) = latch(np)
                  END IF
                  np = np-1
                ELSE
                  wt(ip) = wt(ip)*n_split
                  ip = ip+1
                END IF
              ELSE
                ip = ip+1
              END IF
              IF(((ip .GT. np)))GO TO17762
            GO TO 17761
17762       CONTINUE
17740       CONTINUE
17711     CONTINUE
17712     CONTINUE
17720     CONTINUE
          IF (( np .LE. 0 )) THEN
            ircode = 2
            return
          END IF
          IF (( iq(np) .EQ. 0 )) THEN
            peig = e(np)
            eig = peig
            irl = ir(np)
            medium = med(irl)
            IF ((EIG.LE.PCUT)) THEN
              GO TO 17660
            END IF
            gle = log(eig)
            goto 17690
          END IF
          return
        ELSE
          IF((rng_seed .GT. 128))call ranmar_get
          RNNO35 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF ((RNNO35 .EQ. 0.0)) THEN
            RNNO35=1.E-30
          END IF
          DPMFP=-LOG(RNNO35)
        END IF
        IROLD=IR(NP)
17780   CONTINUE
17781     CONTINUE
          IF ((MEDIUM.NE.0)) THEN
            LGLE=GE1(MEDIUM)*GLE+GE0(MEDIUM)
            GMFPR0=GMFP1(LGLE,MEDIUM)*GLE+GMFP0(LGLE,MEDIUM)
          END IF
17790     CONTINUE
17791       CONTINUE
            IF ((MEDIUM.EQ.0)) THEN
              TSTEP=VACDST
            ELSE
              RHOF=RHOR(IRL)/RHO(MEDIUM)
              GMFP=GMFPR0/RHOF
              IF ((IRAYLR.EQ.1)) THEN
                COHFAC=COHE1(LGLE,MEDIUM)*GLE+COHE0(LGLE,MEDIUM)
                GMFP=GMFP*COHFAC
              END IF
              IF ((IPHOTONUCR(IRL).EQ.1)) THEN
                PHOTONUCFAC=PHOTONUC1(LGLE,MEDIUM)*GLE+PHOTONUC0(LGLE,ME
     *          DIUM)
                GMFP=GMFP*PHOTONUCFAC
              END IF
              TSTEP=GMFP*DPMFP
            END IF
            IRNEW=IR(NP)
            IDISC=0
            USTEP=TSTEP
            TUSTEP=USTEP
            IF (( ustep .GT. dnear(np) .OR. wt(np) .LE. 0 )) THEN
              call howfar
            END IF
            IF ((IDISC.GT.0)) THEN
              GO TO 17680
            END IF
            VSTEP=USTEP
            TVSTEP=VSTEP
            EDEP=PZERO
            x_final = x(np) + u(np)*vstep
            y_final = y(np) + v(np)*vstep
            z_final = z(np) + w(np)*vstep
            IARG=0
            IF ((IAUSFL(IARG+1).NE.0)) THEN
              CALL AUSGAB(IARG)
            END IF
            IF((IARG.LT.0))RETURN
            x(np) = x_final
            y(np) = y_final
            z(np) = z_final
            DNEAR(NP)=DNEAR(NP)-USTEP
            IF ((MEDIUM.NE.0)) THEN
              DPMFP=MAX(0.,DPMFP-USTEP/GMFP)
            END IF
            IROLD=IR(NP)
            MEDOLD=MEDIUM
            IF ((IRNEW.NE.IROLD)) THEN
              ir(np) = irnew
              irl = irnew
              medium = med(irl)
            END IF
            IARG=5
            IF ((IAUSFL(IARG+1).NE.0)) THEN
              CALL AUSGAB(IARG)
            END IF
            IF((IARG.LT.0))RETURN
            IF ((EIG.LE.PCUT)) THEN
              GO TO 17660
            END IF
            IF((IDISC.LT.0))GO TO 17680
            IF((MEDIUM.NE.MEDOLD))GO TO 17792
            IF ((MEDIUM.NE.0.AND.DPMFP.LE.1.E-5)) THEN
              GO TO 17782
            END IF
          GO TO 17791
17792     CONTINUE
        GO TO 17781
17782   CONTINUE
        IF ((IRAYLR.EQ.1)) THEN
          IF((rng_seed .GT. 128))call ranmar_get
          RNNO37 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF ((RNNO37.LE.(1.0-COHFAC))) THEN
            IARG=23
            IF ((IAUSFL(IARG+1).NE.0)) THEN
              CALL AUSGAB(IARG)
            END IF
            IF((IARG.LT.0))RETURN
            NPold = NP
            call egs_rayleigh_sampling(MEDIUM,E(NP),GLE,LGLE,COSTHE,SINT
     *      HE)
            CALL UPHI(2,1)
            IARG=24
            IF ((IAUSFL(IARG+1).NE.0)) THEN
              CALL AUSGAB(IARG)
            END IF
            IF((IARG.LT.0))RETURN
            GOTO 17670
          END IF
        END IF
        IF ((IPHOTONUCR(IRL).EQ.1)) THEN
          IF((rng_seed .GT. 128))call ranmar_get
          RNNO39 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          IF ((RNNO39.LE.(1.0-PHOTONUCFAC))) THEN
            IARG=29
            IF ((IAUSFL(IARG+1).NE.0)) THEN
              CALL AUSGAB(IARG)
            END IF
            IF((IARG.LT.0))RETURN
            call PHOTONUC
            IARG=30
            IF ((IAUSFL(IARG+1).NE.0)) THEN
              CALL AUSGAB(IARG)
            END IF
            IF((IARG.LT.0))RETURN
            GOTO 17670
          END IF
        END IF
        IF((rng_seed .GT. 128))call ranmar_get
        RNNO36 = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        GBR1=GBR11(LGLE,MEDIUM)*GLE+GBR10(LGLE,MEDIUM)
        IF (((RNNO36.LE.GBR1).AND.(E(NP).GT.RMT2) )) THEN
          IARG=15
          IF ((IAUSFL(IARG+1).NE.0)) THEN
            CALL AUSGAB(IARG)
          END IF
          IF((IARG.LT.0))RETURN
          CALL PAIR
          IARG=16
          IF ((IAUSFL(IARG+1).NE.0)) THEN
            CALL AUSGAB(IARG)
          END IF
          IF((IARG.LT.0))RETURN
          IF (( iq(np) .NE. 0 )) THEN
            GO TO 17672
          ELSE
            goto 17800
          END IF
        END IF
        GBR2=GBR21(LGLE,MEDIUM)*GLE+GBR20(LGLE,MEDIUM)
        IF ((RNNO36.LT.GBR2)) THEN
          IARG=17
          IF ((IAUSFL(IARG+1).NE.0)) THEN
            CALL AUSGAB(IARG)
          END IF
          IF((IARG.LT.0))RETURN
          CALL COMPT
          IARG=18
          IF ((IAUSFL(IARG+1).NE.0)) THEN
            CALL AUSGAB(IARG)
          END IF
          IF((IARG.LT.0))RETURN
          IF((IQ(NP).NE.0))GO TO 17672
        ELSE
          IARG=19
          IF ((IAUSFL(IARG+1).NE.0)) THEN
            CALL AUSGAB(IARG)
          END IF
          IF((IARG.LT.0))RETURN
          CALL PHOTO
          IF ((NP .EQ. 0 .OR. NP .LT. NPOLD )) THEN
            RETURN
          END IF
          IARG=20
          IF ((IAUSFL(IARG+1).NE.0)) THEN
            CALL AUSGAB(IARG)
          END IF
          IF((IARG.LT.0))RETURN
          IF((IQ(NP) .NE. 0))GO TO 17672
        END IF
17800   PEIG=E(NP)
        EIG=PEIG
        IF((EIG.LT.PCUT))GO TO 17660
      GO TO 17671
17672 CONTINUE
      RETURN
17660 IF (( medium .GT. 0 )) THEN
        IF ((EIG.GT.AP(MEDIUM))) THEN
          IDR=1
        ELSE
          IDR=2
        END IF
      ELSE
        IDR=1
      END IF
      EDEP=PEIG
      IARG=IDR
      IF ((IAUSFL(IARG+1).NE.0)) THEN
        CALL AUSGAB(IARG)
      END IF
      IF((IARG.LT.0))RETURN
      IRCODE=2
      NP=NP-1
      RETURN
17680 EDEP=PEIG
      IARG=3
      IF ((IAUSFL(IARG+1).NE.0)) THEN
        CALL AUSGAB(IARG)
      END IF
      IF((IARG.LT.0))RETURN
      IRCODE=2
      NP=NP-1
      RETURN
      END
      SUBROUTINE SHOWER(IQI,EI,XI,YI,ZI,UI,VI,WI,IRI,WTI)
      implicit none
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 EI,  XI,YI,ZI, UI,VI,WI, WTI
      integer*4 IQI,  IRI
      DOUBLE PRECISION DEG,  DPGL,  DEI,  DPI,  DCSTH,  DCOSTH,  PI0MSQ
      real*8 DNEARI,  CSTH
      integer*4 IRCODE
      DATA PI0MSQ/1.8215416D4/
      NP=1
      NPold = NP
      DNEARI=0.0
      IQ(1)=IQI
      E(1)=EI
      U(1)=UI
      V(1)=VI
      W(1)=WI
      X(1)=XI
      Y(1)=YI
      Z(1)=ZI
      IR(1)=IRI
      WT(1)=WTI
      DNEAR(1)=DNEARI
      LATCH(1)=LATCHI
      IF ((IQI .EQ. 2)) THEN
        IF ((EI**2 .LE. PI0MSQ)) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(//a/,a,g15.5,a)') ' Stopped in subroutine SHOWER
     *---PI-ZERO option invoked', ' but the total energy was too small (
     *EI=',EI,' MeV)'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        IF((rng_seed .GT. 128))call ranmar_get
        CSTH = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        DCSTH=CSTH
        DEI=EI
        DPI=DSQRT(DEI*DEI-PI0MSQ)
        DEG=DEI+DPI*DCSTH
        DPGL=DPI+DEI*DCSTH
        DCOSTH=DPGL/DEG
        COSTHE=DCOSTH
        SINTHE=DSQRT(1.D0-DCOSTH*DCOSTH)
        IQ(1)=0
        E(1)=DEG/2.
        CALL UPHI(2,1)
        NP=2
        DEG=DEI-DPI*DCSTH
        DPGL=DPI-DEI*DCSTH
        DCOSTH=DPGL/DEG
        COSTHE=DCOSTH
        SINTHE=-DSQRT(1.D0-DCOSTH*DCOSTH)
        IQ(2)=0
        E(2)=DEG/2.
        CALL UPHI(3,2)
      END IF
17811 CONTINUE
        IF((np .LE. 0))GO TO17812
        IF (( iq(np) .EQ. 0 )) THEN
          call photon(ircode)
        ELSE
          call electr(ircode)
        END IF
      GO TO 17811
17812 CONTINUE
      RETURN
      END
      SUBROUTINE UPHI(IENTRY,LVL)
      implicit none
      COMMON/QDEBUG/QDEBUG
      LOGICAL QDEBUG
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/UPHIIN/SINC0,SINC1,SIN0(1002),SIN1(1002)
      real*8 SINC0,SINC1,SIN0,SIN1
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer IENTRY,LVL
      real*8 CTHET,  RNNO38,  PHI,  CPHI,  A,B,C,  SINPS2,  SINPSI,  US,
     *VS,  SINDEL,COSDEL
      integer*4 IARG,  LPHI,LTHETA,LCTHET,LCPHI
      real*8 xphi,xphi2,yphi,yphi2,rhophi2
      save CTHET,PHI,CPHI,A,B,C,SINPS2,SINPSI,US,VS,SINDEL,COSDEL
      IARG=21
      IF ((IAUSFL(IARG+1).NE.0)) THEN
        CALL AUSGAB(IARG)
      END IF
      IF((IARG.LT.0))RETURN
      GO TO (17820,17830,17840),IENTRY
      GO TO 17850
17820 CONTINUE
      SINTHE=sin(THETA)
      CTHET=PI5D2-THETA
      COSTHE=sin(CTHET)
17830 CONTINUE
17861 CONTINUE
        IF((rng_seed .GT. 128))call ranmar_get
        xphi = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        xphi = 2*xphi - 1
        xphi2 = xphi*xphi
        IF((rng_seed .GT. 128))call ranmar_get
        yphi = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        yphi2 = yphi*yphi
        rhophi2 = xphi2 + yphi2
        IF(rhophi2.LE.1)GO TO17862
      GO TO 17861
17862 CONTINUE
      rhophi2 = 1/rhophi2
      cosphi = (xphi2 - yphi2)*rhophi2
      sinphi = 2*xphi*yphi*rhophi2
17840 GO TO (17870,17880,17890),LVL
      GO TO 17850
17870 A=U(NP)
      B=V(NP)
      C=W(NP)
      GO TO 17900
17890 A=U(NP-1)
      B=V(NP-1)
      C=W(NP-1)
17880 X(NP)=X(NP-1)
      Y(NP)=Y(NP-1)
      Z(NP)=Z(NP-1)
      IR(NP)=IR(NP-1)
      WT(NP)=WT(NP-1)
      DNEAR(NP)=DNEAR(NP-1)
      LATCH(NP)=LATCH(NP-1)
17900 SINPS2=A*A+B*B
      IF ((SINPS2.LT.1.0E-20)) THEN
        U(NP)=SINTHE*COSPHI
        V(NP)=SINTHE*SINPHI
        W(NP)=C*COSTHE
      ELSE
        SINPSI=SQRT(SINPS2)
        US=SINTHE*COSPHI
        VS=SINTHE*SINPHI
        SINDEL=B/SINPSI
        COSDEL=A/SINPSI
        U(NP)=C*COSDEL*US-SINDEL*VS+A*COSTHE
        V(NP)=C*SINDEL*US+COSDEL*VS+B*COSTHE
        W(NP)=-SINPSI*US+C*COSTHE
      END IF
      IARG=22
      IF ((IAUSFL(IARG+1).NE.0)) THEN
        CALL AUSGAB(IARG)
      END IF
      IF((IARG.LT.0))RETURN
      RETURN
17850 write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(a,2i6)') ' STOPPED IN UPHI WITH IENTRY,LVL=',IENTRY,
     *LVL
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      END
      subroutine init_nist_brems
      implicit none
      real*8 energy_array(57),x_array(54), cs_array(57,54,100)
      real*8 xi_array(54)
      real*8 x_gauss(64),w_gauss(64)
      integer*4 nmix,kmix,i,n,k,j,ii
      integer*4 ngauss,i_gauss
      integer*4 lnblnk1,egs_get_unit
      integer*4 ifirst,ilast,nener,neke,leil
      real*8 cs(57,54),ee(57),ele(57)
      real*8 csx(54),afx(54),bfx(54),cfx(54),dfx(54)
      real*8 cse(57),afe(57),bfe(57),cfe(57),dfe(57)
      real*8 Z,sumA
      real*8 emin,xi,res,spline,eil,ei,beta2,aux,sigb,sigt,ebr1,ebr2
      real*8 sigee,sigep,sige,si_esig,si1_esig,si_ebr1,si1_ebr1,ededx, s
     *ig_bhabha,si_psig,si1_psig,si_pbr1,si1_pbr1,si_pbr2,si1_pbr2
      integer*4 iz
      real*8 ple,qle,x,f,error,max_error,x_max_error,f_max_error
      integer*4 ndat,k_max_error
      character tmp_string*512, tmp1_string*512
      integer itmp
      real*8 amu
      parameter (amu = 1660.5655)
      logical ex,is_opened
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/BREMPR/ DL1(8,7),DL2(8,7),DL3(8,7),DL4(8,7),DL5(8,7),DL6(8,
     *7), ALPHI(2,7),BPAR(2,7),DELPOS(2,7), WA(7,50),PZ(7,50),ZELEM(7,50
     *),RHOZ(7,50), PWR2I(50), DELCM(7),ZBRANG(7),LZBRANG(7),NNE(7), IBR
     *DST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(7,50,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/ELECIN/ esig_e(7),psig_e(7), esige_max, psige_max, range_ep
     *(0:1,500,7), E_array(500,7), etae_ms0(500,7),etae_ms1(500,7),etap_
     *ms0(500,7),etap_ms1(500,7),q1ce_ms0(500,7),q1ce_ms1(500,7),q1cp_ms
     *0(500,7),q1cp_ms1(500,7),q2ce_ms0(500,7),q2ce_ms1(500,7),q2cp_ms0(
     *500,7),q2cp_ms1(500,7),blcce0(500,7),blcce1(500,7), EKE0(7),EKE1(7
     *), XR0(7),TEFF0(7),BLCC(7),XCC(7), ESIG0(500,7),ESIG1(500,7),PSIG0
     *(500,7),PSIG1(500,7),EDEDX0(500,7),EDEDX1(500,7),PDEDX0(500,7),PDE
     *DX1(500,7),EBR10(500,7),EBR11(500,7),PBR10(500,7),PBR11(500,7),PBR
     *20(500,7),PBR21(500,7),TMXS0(500,7),TMXS1(500,7), expeke1(7), IUNR
     *ST(7),EPSTFL(7),IAPRIM(7), sig_ismonotone(0:1,7)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/THRESH/RMT2,RMSQ, AP(7),AE(7),UP(7),UE(7),TE(7),THMOLL(7)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common/nist_brems/ nb_fdata(0:50,100,7), nb_xdata(0:50,100,7), nb_
     *wdata(50,100,7), nb_idata(50,100,7), nb_emin(7),nb_emax(7), nb_lem
     *in(7),nb_lemax(7), nb_dle(7),nb_dlei(7), log_ap(7)
      real*8 nb_fdata,nb_xdata,nb_wdata,nb_emin,nb_emax,nb_lemin,nb_lema
     *x, nb_dle,nb_dlei,log_ap
      integer*4 nb_idata
      common/spin_data/ spin_rej(7,0:1,0: 31,0:15,0:31), espin_min,espin
     *_max,espml,b2spin_min,b2spin_max, dbeta2,dbeta2i,dlener,dleneri,dq
     *q1,dqq1i, fool_intel_optimizer
      real*4 spin_rej,espin_min,espin_max,espml,b2spin_min,b2spin_max, d
     *beta2,dbeta2i,dlener,dleneri,dqq1,dqq1i
      logical fool_intel_optimizer
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      DO 17911 i=1,len(tmp_string)
        tmp_string(i:i) = ' '
17911 CONTINUE
17912 CONTINUE
      tmp_string = hen_house(:lnblnk1(hen_house)) // 'data' // '/'
      IF (( ibr_nist .EQ. 1 )) THEN
        DO 17921 i=1,len(tmp1_string)
          tmp1_string(i:i) = ' '
17921   CONTINUE
17922   CONTINUE
        tmp1_string = tmp_string(:lnblnk1(tmp_string)) // 'nist_brems.da
     *ta'
        inquire(file=tmp1_string,exist=ex,opened=is_opened,number=itmp)
        IF (( .NOT.ex )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'EGSnrc data file ','nist_brems.data',' does no
     *t exist'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        IF (( .NOT.is_opened )) THEN
          i_nist_data=egs_get_unit(i_nist_data)
          IF ((i_nist_data.LT.0)) THEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,*) 'failed to get a free Fortran I/O unit for da
     *ta file ', tmp1_string(:lnblnk1(tmp1_string))
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          open(i_nist_data,file=tmp1_string,status='old',err=12900)
        ELSE
          i_nist_data = itmp
        END IF
      ELSE IF((ibr_nist .EQ. 2)) THEN
        DO 17931 i=1,len(tmp1_string)
          tmp1_string(i:i) = ' '
17931   CONTINUE
17932   CONTINUE
        tmp1_string = tmp_string(:lnblnk1(tmp_string)) // 'nrc_brems.dat
     *a'
        inquire(file=tmp1_string,exist=ex,opened=is_opened,number=itmp)
        IF (( .NOT.ex )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'EGSnrc data file ','nrc_brems.data',' does not
     * exist'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        IF (( .NOT.is_opened )) THEN
          i_nist_data=egs_get_unit(i_nist_data)
          IF ((i_nist_data.LT.0)) THEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,*) 'failed to get a free Fortran I/O unit for da
     *ta file ', tmp1_string(:lnblnk1(tmp1_string))
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          open(i_nist_data,file=tmp1_string,status='old',err=12900)
        ELSE
          i_nist_data = itmp
        END IF
      ELSE
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) ' init_nist_brems: unknown value of ibr_nist!
     *                  ibr_nist = ', ibr_nist
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      rewind(i_nist_data)
      read(i_nist_data,*)
      read(i_nist_data,*) nmix,kmix
      IF ((kmix .GT. 54)) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) ' init_nist_brems: to many k values in data file!
     *'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF ((nmix .GT. 57)) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) ' init_nist_brems: to many T values in data file!
     *'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      read(i_nist_data,*) (energy_array(n),n=1,nmix)
      DO 17941 n=1,nmix
        energy_array(n) = 1.0*energy_array(n)
17941 CONTINUE
17942 CONTINUE
      read(i_nist_data,*) (x_array(k),k=1,kmix)
      read(i_nist_data,*)
      DO 17951 i=1,100
        read(i_nist_data,*) ((cs_array(n,k,i),n=1,nmix),k=1,kmix)
17951 CONTINUE
17952 CONTINUE
      close(i_nist_data)
      DO 17961 k=1,kmix
        xi_array(k)=Log(1-x_array(k)+1e-6)
        IF (( fool_intel_optimizer )) THEN
          write(i_log,*) 'xi_array(k): ',xi_array(k)
        END IF
17961 CONTINUE
17962 CONTINUE
      ngauss = 64
      call gauss_legendre(0d0,1d0,x_gauss,w_gauss,ngauss)
      write(i_log,*) ' '
      IF ((ibr_nist .EQ. 1)) THEN
        write(i_log,*) 'Using NIST brems cross sections! '
      ELSE IF((ibr_nist .EQ. 2)) THEN
        write(i_log,*) 'Using NRC brems cross sections! '
      END IF
      write(i_log,*) ' '
      DO 17971 medium=1,nmed
        log_ap(medium) = log(ap(medium))
        write(i_log,*) ' Initializing brems data for medium ',medium,'..
     *.'
        emin = max(ae(medium) - rm, ap(medium))
        DO 17981 i=1,nmix
          IF((energy_array(i) .GE. emin))GO TO17982
17981   CONTINUE
17982   CONTINUE
        ifirst = i
        DO 17991 i=nmix,1,-1
          IF((energy_array(i) .LT. ue(medium) - rm))GO TO17992
17991   CONTINUE
17992   CONTINUE
        ilast = i+1
        IF (( ifirst .LT. 1 .OR. ilast .GT. nmix )) THEN
          write(i_log,*) ' init_nist_brems: data available only for '
          write(i_log,*) energy_array(1),' <= E <= ',energy_array(nmix)
          write(i_log,*) ' will use spline interpolations to get cross '
          write(i_log,*) ' sections beyond the available data but this m
     *ay'
          write(i_log,*) ' produce nonsense!'
          IF((ifirst .LT. 1))ifirst=1
          IF((ilast .GT. nmix))ilast = nmix
        END IF
        DO 18001 i=ifirst,ilast
          ii = i+1 - ifirst
          ee(ii) = energy_array(i)
          ele(ii) = log(ee(ii))
          sumA = 0
          DO 18011 j=1,NNE(medium)
            sumA = sumA + pz(medium,j)*wa(medium,j)
18011     CONTINUE
18012     CONTINUE
          sumA = sumA*amu
          DO 18021 k=1,kmix
            cs(ii,k) = 0
            DO 18031 j=1,NNE(medium)
              Z = zelem(medium,j)
              iz = int(Z+0.1)
              Z = Z*Z/sumA
              cs(ii,k) = cs(ii,k) + pz(medium,j)*Z*cs_array(i,k,iz)
18031       CONTINUE
18032       CONTINUE
            csx(k) = Log(cs(ii,k))
18021     CONTINUE
18022     CONTINUE
          call set_spline(xi_array,csx,afx,bfx,cfx,dfx,kmix)
          cse(ii) = 0
          aux = Log(ee(ii)/ap(medium))
          DO 18041 i_gauss=1,ngauss
            xi = log(1 - ap(medium)/ee(ii)*exp(x_gauss(i_gauss)*aux)+1e-
     *      6)
            res = spline(xi,xi_array,afx,bfx,cfx,dfx,kmix)
            cse(ii) = cse(ii) + w_gauss(i_gauss)*exp(res)
18041     CONTINUE
18042     CONTINUE
18001   CONTINUE
18002   CONTINUE
        nener = ilast - ifirst + 1
        call set_spline(ele,cse,afe,bfe,cfe,dfe,nener)
        neke = meke(medium)
        sigee = 1E-15
        sigep = 1E-15
        DO 18051 i=1,neke
          eil = (float(i) - eke0(medium))/eke1(medium)
          ei = exp(eil)
          leil = i
          beta2 = ei*(ei+2*rm)/(ei+rm)**2
          IF (( ei .LE. ap(medium) )) THEN
            sigb = 1e-30
          ELSE
            sigb = spline(eil,ele,afe,bfe,cfe,dfe,nener)
            sigb = sigb*log(ei/ap(medium))/beta2*rho(medium)
          END IF
          sigt=esig1(Leil,MEDIUM)*eil+esig0(Leil,MEDIUM)
          ebr1=ebr11(Leil,MEDIUM)*eil+ebr10(Leil,MEDIUM)
          IF((sigt .LT. 0))sigt = 0
          IF((ebr1 .GT. 1))ebr1 = 1
          IF((ebr1 .LT. 0))ebr1 = 0
          IF (( i .GT. 1 )) THEN
            si_esig = si1_esig
            si_ebr1 = si1_ebr1
            si1_esig = sigt*(1 - ebr1) + sigb
            si1_ebr1 = sigb/si1_esig
            esig1(i-1,medium) = (si1_esig - si_esig)*eke1(medium)
            esig0(i-1,medium) = si1_esig - esig1(i-1,medium)*eil
            ebr11(i-1,medium) = (si1_ebr1 - si_ebr1)*eke1(medium)
            ebr10(i-1,medium) = si1_ebr1 - ebr11(i-1,medium)*eil
          ELSE
            si1_esig = sigt*(1 - ebr1) + sigb
            si1_ebr1 = sigb/si1_esig
          END IF
          sigt=psig1(Leil,MEDIUM)*eil+psig0(Leil,MEDIUM)
          ebr1=pbr11(Leil,MEDIUM)*eil+pbr10(Leil,MEDIUM)
          ebr2=pbr21(Leil,MEDIUM)*eil+pbr20(Leil,MEDIUM)
          IF((sigt .LT. 0))sigt = 0
          IF((ebr1 .GT. 1))ebr1 = 1
          IF((ebr1 .LT. 0))ebr1 = 0
          IF((ebr2 .GT. 1))ebr2 = 1
          IF((ebr2 .LT. 0))ebr2 = 0
          sig_bhabha = sigt*(ebr2 - ebr1)
          IF((sig_bhabha .LT. 0))sig_bhabha = 0
          IF (( i .GT. 1 )) THEN
            si_psig = si1_psig
            si_pbr1 = si1_pbr1
            si_pbr2 = si1_pbr2
            si1_psig = sigt*(1 - ebr1) + sigb
            si1_pbr1 = sigb/si1_psig
            si1_pbr2 = (sigb + sig_bhabha)/si1_psig
            psig1(i-1,medium) = (si1_psig - si_psig)*eke1(medium)
            psig0(i-1,medium) = si1_psig - psig1(i-1,medium)*eil
            pbr11(i-1,medium) = (si1_pbr1 - si_pbr1)*eke1(medium)
            pbr10(i-1,medium) = si1_pbr1 - pbr11(i-1,medium)*eil
            pbr21(i-1,medium) = (si1_pbr2 - si_pbr2)*eke1(medium)
            pbr20(i-1,medium) = si1_pbr2 - pbr21(i-1,medium)*eil
          ELSE
            si1_psig = sigt*(1 - ebr1) + sigb
            si1_pbr1 = sigb/si1_psig
            si1_pbr2 = (sigb + sig_bhabha)/si1_psig
          END IF
          ededx=ededx1(Leil,MEDIUM)*eil+ededx0(Leil,MEDIUM)
          sige = si1_esig/ededx
          IF((sige .GT. sigee))sigee = sige
          ededx=pdedx1(Leil,MEDIUM)*eil+pdedx0(Leil,MEDIUM)
          sige = si1_psig/ededx
          IF((sige .GT. sigep))sigep = sige
18051   CONTINUE
18052   CONTINUE
        esig1(neke,medium) = esig1(neke-1,medium)
        esig0(neke,medium) = esig0(neke-1,medium)
        ebr11(neke,medium) = ebr11(neke-1,medium)
        ebr10(neke,medium) = ebr10(neke-1,medium)
        psig1(neke,medium) = psig1(neke-1,medium)
        psig0(neke,medium) = psig0(neke-1,medium)
        pbr11(neke,medium) = pbr11(neke-1,medium)
        pbr10(neke,medium) = pbr10(neke-1,medium)
        pbr21(neke,medium) = pbr21(neke-1,medium)
        pbr20(neke,medium) = pbr20(neke-1,medium)
        write(i_log,*) ' Max. new cross sections per energy loss: ',sige
     *  e,sigep
        esig_e(medium) = sigee
        psig_e(medium) = sigep
        IF((sigee .GT. esige_max))esige_max = sigee
        IF((sigep .GT. psige_max))psige_max = sigep
        nb_emin(medium) = energy_array(ifirst)
        IF (( nb_emin(medium) .LE. ap(medium) )) THEN
          nb_emin(medium) = energy_array(ifirst+1)
        END IF
        nb_emax(medium) = energy_array(ilast)
        nb_lemin(medium) = log(nb_emin(medium))
        nb_lemax(medium) = log(nb_emax(medium))
        nb_dle(medium) = (nb_lemax(medium) - nb_lemin(medium))/(100-1)
        nb_dlei(medium) = 1/nb_dle(medium)
        eil = nb_lemin(medium) - nb_dle(medium)
        DO 18061 i=1,100
          eil = eil + nb_dle(medium)
          ei = exp(eil)
          DO 18071 ii=1,nener
            IF((ei .LT. ee(ii)))GO TO18072
18071     CONTINUE
18072     CONTINUE
          ii = ii-1
          IF((ii .LT. 1))ii = 1
          IF((ii .GT. nener-1))ii = nener-1
          ple = (eil - ele(ii))/(ele(ii+1)-ele(ii))
          qle = 1 - ple
          DO 18081 k=1,kmix
            csx(k) = log(qle*cs(ii,k) + ple*cs(ii+1,k))
18081     CONTINUE
18082     CONTINUE
          call set_spline(xi_array,csx,afx,bfx,cfx,dfx,kmix)
          x = ap(medium)/ei
          aux = -log(x)
          xi = log(1 - x+1e-6)
          res = spline(xi,xi_array,afx,bfx,cfx,dfx,kmix)
          nb_xdata(0,i,medium) = 0
          nb_fdata(0,i,medium) = exp(res)
          DO 18091 k=1,kmix
            IF((x_array(k) .GT. x))GO TO18092
18091     CONTINUE
18092     CONTINUE
          IF((k .GT. kmix))k = kmix
          ndat = 0
          DO 18101 j=k+1,kmix-1
            ndat = ndat+1
            nb_xdata(ndat,i,medium) = log(x_array(j)/x)/aux
            nb_fdata(ndat,i,medium) = exp(csx(j))
            IF (( fool_intel_optimizer )) THEN
              write(i_log,*) 'nb_xdata(ndat,i,medium): ', nb_xdata(ndat,
     *        i,medium)
            END IF
18101     CONTINUE
18102     CONTINUE
          ndat = ndat+1
          nb_xdata(ndat,i,medium) = 1
          nb_fdata(ndat,i,medium) = exp(csx(kmix))
          IF((ndat .GE. 50))goto 18110
18121     CONTINUE
            x_max_error = 0
            f_max_error = 0
            k_max_error = 0
            max_error = 0
            DO 18131 k=0,ndat-1
              x = 0.5*(nb_xdata(k,i,medium) + nb_xdata(k+1,i,medium))
              f = 0.5*(nb_fdata(k,i,medium) + nb_fdata(k+1,i,medium))
              xi = log(1 - ap(medium)/ei*exp(x*aux)+1e-6)
              res = spline(xi,xi_array,afx,bfx,cfx,dfx,kmix)
              res = exp(res)
              error = abs(1-f/res)
              IF (( error .GT. max_error )) THEN
                x_max_error = x
                f_max_error = res
                max_error = error
                k_max_error = k
              END IF
18131       CONTINUE
18132       CONTINUE
            ndat = ndat+1
            DO 18141 k=ndat,k_max_error+2,-1
              nb_xdata(k,i,medium) = nb_xdata(k-1,i,medium)
              nb_fdata(k,i,medium) = nb_fdata(k-1,i,medium)
18141       CONTINUE
18142       CONTINUE
            nb_xdata(k_max_error+1,i,medium) = x_max_error
            nb_fdata(k_max_error+1,i,medium) = f_max_error
            IF(((ndat .EQ. 50)))GO TO18122
          GO TO 18121
18122     CONTINUE
18110     call prepare_alias_table(50,nb_xdata(0,i,medium), nb_fdata(0,i
     *    ,medium),nb_wdata(1,i,medium),nb_idata(1,i,medium))
18061   CONTINUE
18062   CONTINUE
17971 CONTINUE
17972 CONTINUE
      write(i_log,*) ' '
      write(i_log,*) ' '
      return
12900 write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) 'failed to open EGSnrc data file ',tmp1_string(:lnb
     *lnk1(tmp1_string))
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      return
      end
      subroutine init_nrc_pair
      implicit none
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/BREMPR/ DL1(8,7),DL2(8,7),DL3(8,7),DL4(8,7),DL5(8,7),DL6(8,
     *7), ALPHI(2,7),BPAR(2,7),DELPOS(2,7), WA(7,50),PZ(7,50),ZELEM(7,50
     *),RHOZ(7,50), PWR2I(50), DELCM(7),ZBRANG(7),LZBRANG(7),NNE(7), IBR
     *DST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(7,50,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/ELECIN/ esig_e(7),psig_e(7), esige_max, psige_max, range_ep
     *(0:1,500,7), E_array(500,7), etae_ms0(500,7),etae_ms1(500,7),etap_
     *ms0(500,7),etap_ms1(500,7),q1ce_ms0(500,7),q1ce_ms1(500,7),q1cp_ms
     *0(500,7),q1cp_ms1(500,7),q2ce_ms0(500,7),q2ce_ms1(500,7),q2cp_ms0(
     *500,7),q2cp_ms1(500,7),blcce0(500,7),blcce1(500,7), EKE0(7),EKE1(7
     *), XR0(7),TEFF0(7),BLCC(7),XCC(7), ESIG0(500,7),ESIG1(500,7),PSIG0
     *(500,7),PSIG1(500,7),EDEDX0(500,7),EDEDX1(500,7),PDEDX0(500,7),PDE
     *DX1(500,7),EBR10(500,7),EBR11(500,7),PBR10(500,7),PBR11(500,7),PBR
     *20(500,7),PBR21(500,7),TMXS0(500,7),TMXS1(500,7), expeke1(7), IUNR
     *ST(7),EPSTFL(7),IAPRIM(7), sig_ismonotone(0:1,7)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      common/nrc_pair/ nrcp_fdata(65,84,7), nrcp_wdata(65,84,7), nrcp_id
     *ata(65,84,7), nrcp_xdata(65), nrcp_emin, nrcp_emax, nrcp_dle, nrcp
     *_dlei
      real*8 nrcp_fdata,nrcp_wdata,nrcp_xdata, nrcp_emin, nrcp_emax, nrc
     *p_dle, nrcp_dlei
      integer*4 nrcp_idata
      COMMON/THRESH/RMT2,RMSQ, AP(7),AE(7),UP(7),UE(7),TE(7),THMOLL(7)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      character nrcp_file*256, endianess*4
      integer egs_get_unit
      integer*4 nrcp_unit, want_nrcp_unit, rec_length
      integer*4 i, lnblnk1
      real*8 tmp, ddx, xx, Z
      real*4 emin, emax
      integer*4 ne, nb, ix, ie, irec, i_ele, nbb, iz
      character endian, cdum( 243)
      logical swap
      real*4 tmp_4, tarray(65)
      integer*4 itmp_4
      character c_4(4), ic_4(4)
      equivalence (tmp_4,c_4), (itmp_4, ic_4)
      DO 18151 i=1,len(nrcp_file)
        nrcp_file(i:i) = ' '
18151 CONTINUE
18152 CONTINUE
      nrcp_file = hen_house(:lnblnk1(hen_house)) // 'data' // '/' // 'pa
     *ir_nrc1.data'
      want_nrcp_unit = 62
      nrcp_unit = egs_get_unit(want_nrcp_unit)
      IF (( nrcp_unit .LT. 1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'init_nrc_pair: failed to get a free fortran unit
     *'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      rec_length = 65*4
      open(nrcp_unit,file=nrcp_file,form='unformatted',access='direct',
     *status='old',recl=rec_length,err=18160)
      read(nrcp_unit,rec=1,err=18170) emin, emax, ne, nb, endian, cdum
      IF (( ichar(endian) .EQ. 0 )) THEN
        endianess = '1234'
      ELSE
        endianess = '4321'
      END IF
      swap = endianess.ne.'1234'
      IF (( swap )) THEN
        tmp_4 = emin
        call egs_swap_4(c_4)
        emin = tmp_4
        tmp_4 = emax
        call egs_swap_4(c_4)
        emax = tmp_4
        itmp_4 = ne
        call egs_swap_4(ic_4)
        ne = itmp_4
        itmp_4 = nb
        call egs_swap_4(ic_4)
        nb = itmp_4
      END IF
      write(i_log,'(//a,a)') 'Reading NRC pair data base from ',nrcp_fil
     *e(:lnblnk1(nrcp_file))
      write(i_log,'(a,a,a)') 'Data generated on a machine with ',endiane
     *ss,' endianess'
      write(i_log,'(a,a)') 'The endianess of this CPU is ','1234'
      IF (( swap )) THEN
        write(i_log,'(a)') '=> will need to do byte swaping'
      END IF
      write(i_log,'(a,2f9.3)') 'Energy range of the data: ',emin,emax
      IF (( nb .NE. 65 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'Inconsistent x-grid size'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF (( ne .NE. 84 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'Inconsistent energy grid size'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      nrcp_emin = emin
      nrcp_emax = emax
      nrcp_dle = log((emax-2)/(emin-2))/(ne-1)
      nrcp_dlei = 1/nrcp_dle
      nbb = nb/2
      ddx = sqrt(0.5)/nbb
      DO 18181 ix=0,nbb
        xx = ddx*ix
        nrcp_xdata(ix+1) = xx*xx
18181 CONTINUE
18182 CONTINUE
      do ix=nbb-1,0,-1
        xx = ddx*ix
        nrcp_xdata(nb-ix) = 1 - xx*xx
      end do
      DO 18201 medium=1,NMED
        write(i_log,'(a,i4,a,$)') '  medium ',medium,' .................
     *.... '
        DO 18211 ie=1,84
          DO 18221 ix=1,65
            nrcp_fdata(ix,ie,medium) = 0
18221     CONTINUE
18222     CONTINUE
18211   CONTINUE
18212   CONTINUE
        DO 18231 i_ele=1,NNE(medium)
          Z = ZELEM(medium,i_ele)
          iz = int(Z+0.5)
          tmp = PZ(medium,i_ele)*Z*Z
          irec = (iz-1)*ne + 2
          DO 18241 ie=1,84
            read(nrcp_unit,rec=irec,err=18170) tarray
            DO 18251 ix=1,65
              tmp_4 = tarray(ix)
              IF (( swap )) THEN
                call egs_swap_4(c_4)
              END IF
              nrcp_fdata(ix,ie,medium)=nrcp_fdata(ix,ie,medium)+tmp*tmp_
     *        4
18251       CONTINUE
18252       CONTINUE
            irec = irec + 1
18241     CONTINUE
18242     CONTINUE
18231   CONTINUE
18232   CONTINUE
        DO 18261 ie=1,84
          call prepare_alias_table(nb-1,nrcp_xdata,nrcp_fdata(1,ie,mediu
     *    m), nrcp_wdata(1,ie,medium),nrcp_idata(1,ie,medium))
18261   CONTINUE
18262   CONTINUE
        write(i_log,'(a)') ' done'
18201 CONTINUE
18202 CONTINUE
      write(i_log,*) ' '
      close(nrcp_unit)
      return
18160 CONTINUE
      write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) 'Failed to open NRC pair data file'
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
18170 CONTINUE
      write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) 'I/O error while reading NRC pair data file'
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      end
      subroutine vmc_electron(ircode)
      implicit none
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer*4 ircode
      write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(//a//)') ' ********* VMC Transport option not in thi
     *s distribution ****** '
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      end
      subroutine egs_init_default_rng
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      ixx=0
      jxx=0
      call init_ranmar
      return
      end
      subroutine egs_init_rng(arg1,arg2)
      integer*4 arg1,arg2
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      ixx = arg1
      jxx = arg2
      call init_ranmar
      return
      end
      subroutine egs_get_rndm(ran)
      real*8 ran
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      IF((rng_seed .GT. 128))call ranmar_get
      ran = rng_array(rng_seed)*twom24
      rng_seed = rng_seed + 1
      return
      end
      subroutine egs_get_rndm_array(n,rarray)
      integer*4 n
      real*8 rarray(*)
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      real*8 rtmp
      integer*4 i
      IF((n .LT. 1))return
      DO 18271 i=1,n
        IF((rng_seed .GT. 128))call ranmar_get
        rtmp = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        rarray(i) = rtmp
18271 CONTINUE
18272 CONTINUE
      return
      end
      subroutine eii_init
      implicit none
      COMMON/BREMPR/ DL1(8,7),DL2(8,7),DL3(8,7),DL4(8,7),DL5(8,7),DL6(8,
     *7), ALPHI(2,7),BPAR(2,7),DELPOS(2,7), WA(7,50),PZ(7,50),ZELEM(7,50
     *),RHOZ(7,50), PWR2I(50), DELCM(7),ZBRANG(7),LZBRANG(7),NNE(7), IBR
     *DST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(7,50,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L,IPHTER
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/eii_data/ eii_xsection_a( 10000),  eii_xsection_b( 10000),
     * eii_cons(7), eii_a(40),  eii_b(40),  eii_L_factor,  eii_z(40),  e
     *ii_sh(40),  eii_nshells(100),  eii_nsh(7),  eii_first(7,50),  eii_
     *no(7,50),  eii_flag
      real*8 eii_xsection_a,eii_xsection_b,eii_a,eii_b,eii_cons,eii_L_fa
     *ctor
      integer*4 eii_z,eii_sh,eii_nshells
      integer*4 eii_first,eii_no
      integer*4 eii_elements,eii_flag,eii_nsh
      COMMON/ELECIN/ esig_e(7),psig_e(7), esige_max, psige_max, range_ep
     *(0:1,500,7), E_array(500,7), etae_ms0(500,7),etae_ms1(500,7),etap_
     *ms0(500,7),etap_ms1(500,7),q1ce_ms0(500,7),q1ce_ms1(500,7),q1cp_ms
     *0(500,7),q1cp_ms1(500,7),q2ce_ms0(500,7),q2ce_ms1(500,7),q2cp_ms0(
     *500,7),q2cp_ms1(500,7),blcce0(500,7),blcce1(500,7), EKE0(7),EKE1(7
     *), XR0(7),TEFF0(7),BLCC(7),XCC(7), ESIG0(500,7),ESIG1(500,7),PSIG0
     *(500,7),PSIG1(500,7),EDEDX0(500,7),EDEDX1(500,7),PDEDX0(500,7),PDE
     *DX1(500,7),EBR10(500,7),EBR11(500,7),PBR10(500,7),PBR11(500,7),PBR
     *20(500,7),PBR21(500,7),TMXS0(500,7),TMXS1(500,7), expeke1(7), IUNR
     *ST(7),EPSTFL(7),IAPRIM(7), sig_ismonotone(0:1,7)
      real*8 esig_e,   psig_e,   esige_max,  psige_max,  range_ep,  E_ar
     *ray,  etae_ms0,etae_ms1,  etap_ms0,etap_ms1,  q1ce_ms0,q1ce_ms1,
     *q1cp_ms0,q1cp_ms1,  q2ce_ms0,q2ce_ms1,  q2cp_ms0,q2cp_ms1,  blcce0
     *,blcce1,   expeke1,  EKE0,EKE1, XR0,  TEFF0,  BLCC,  XCC,  ESIG0,E
     *SIG1,  PSIG0,PSIG1,  EDEDX0,EDEDX1,  PDEDX0,PDEDX1,  EBR10,EBR11,
     * PBR10,PBR11,  PBR20,PBR21,  TMXS0,TMXS1
      integer*4 IUNRST,  EPSTFL,  IAPRIM
      logical sig_ismonotone
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/THRESH/RMT2,RMSQ, AP(7),AE(7),UP(7),UE(7),TE(7),THMOLL(7)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      integer*4 imed,iele,ish,nsh,iZ,j,i,itmp,nskip,nbin,ii,nsh_tot,iii,
     *k
      integer*4 jj,jjj
      integer*4 lnblnk1
      integer*4 tmp_array(100)
      integer*4 want_eii_unit,eii_unit,eii_out,egs_open_file
      integer egs_get_unit
      real*8 e_eii_min,emax,fmax,aux_array(250)
      real*8 sigo,loge,tau,beta2,p2,uwm,Wmax
      real*8 ss_0, ss_1, sh_0, sh_1, aux, av_e, con_med, dedx_old, sigm_
     *old
      real*8 dedx,e,sig,sigm,wbrem,sum_a,sum_z,sum_pz,sum_wa,Ec,Ecc
      real*8 sum_sh,sum_occn,U,sum_sigma,sum_dedx
      real*8 sigma,sigma_old,wbrem_old,sig_j,de
      integer*4 lloge
      logical check_it,is_monotone,getd
      real*8 sigma_max
      character eii_file*128
      character*512 toUpper
      integer*4 occn_numbers(4)
      real*8 cons
      parameter (cons = 0.153536)
      data occn_numbers/2,2,2,4/
      DO 18281 j=1,100
        eii_nshells(j) = 0
18281 CONTINUE
18282 CONTINUE
      DO 18291 j=1,7
        eii_nsh(j) = 0
18291 CONTINUE
18292 CONTINUE
      IF (( eii_flag .EQ. 0 )) THEN
        return
      END IF
      getd = .false.
      DO 18301 j=1, 2097154
        IF (( IEDGFL .GT. 0 .AND. IEDGFL .LE. 100 )) THEN
          getd = .true.
          GO TO18302
        END IF
18301 CONTINUE
18302 CONTINUE
      IF (( .NOT.getd )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,'(/a,/a,/a,/a)') ' In subroutine eii_init: ', '   Sc
     *attering off bound electrons creates atomic vacancies,', '   poten
     *tially starting an atomic relaxation cascade. ', '   Please turn O
     *N atomic relaxations.'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      e_eii_min = 1e30
      DO 18311 imed=1,nmed
        IF((ae(imed)-rm .LT. e_eii_min))e_eii_min = ae(imed) - rm
        IF((ap(imed) .LT. e_eii_min))e_eii_min = ap(imed)
18311 CONTINUE
18312 CONTINUE
      write(i_log,*) ' '
      write(i_log,*) 'eii_init: minimum threshold energy found: ',e_eii_
     *min
      DO 18321 imed=1,nmed
        DO 18331 iele=1,nne(imed)
          iZ = int(zelem(imed,iele)+0.5)
          IF (( eii_nshells(iZ) .EQ. 0 )) THEN
            nsh = 0
            DO 18341 ish=1,4
              IF((binding_energies(ish,iZ) .GT. e_eii_min))nsh = nsh+1
18341       CONTINUE
18342       CONTINUE
            eii_nshells(iZ) = nsh
          END IF
18331   CONTINUE
18332   CONTINUE
18321 CONTINUE
18322 CONTINUE
      nsh = 0
      DO 18351 iZ=1,100
        nsh = nsh + eii_nshells(iZ)
18351 CONTINUE
18352 CONTINUE
      IF (( nsh .EQ. 0 )) THEN
        write(i_log,*) '*** EII requested but no shells with binding ene
     *rgies '
        write(i_log,*) '    above the specified threshold found'
        write(i_log,*) '    => turning off EII'
        eii_flag = 0
      END IF
      IF (( nsh .GT. 40 )) THEN
        write(i_log,*) '*** Number of shells with binding energies great
     *er than '
        write(i_log,*) '    the specified thresholds is ',nsh
        write(i_log,*) '    This is more than the allocated arrays can h
     *old'
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) '    Increase the macro $MAX_EII_SHELLS and retry
     *'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      write(i_log,*) 'eii_init: number of shells to simulate EII: ',nsh
      nsh_tot = nsh
      tmp_array(1) = 0
      DO 18361 j=2,100
        tmp_array(j) = tmp_array(j-1) + eii_nshells(j-1)
18361 CONTINUE
18362 CONTINUE
      DO 18371 imed=1,nmed
        nsh = 0
        DO 18381 iele=1,nne(imed)
          iZ = int(zelem(imed,iele)+0.5)
          eii_no(imed,iele) = eii_nshells(iZ)
          nsh = nsh + eii_nshells(iZ)
          IF (( eii_nshells(iZ) .GT. 0 )) THEN
            eii_first(imed,iele) = tmp_array(iZ) + 1
          ELSE
            eii_first(imed,iele) = 0
          END IF
18381   CONTINUE
18382   CONTINUE
        eii_nsh(imed) = nsh
18371 CONTINUE
18372 CONTINUE
      DO 18391 i=1,len(eii_file)
        eii_file(i:i) = ' '
18391 CONTINUE
18392 CONTINUE
      eii_file = hen_house(:lnblnk1(hen_house)) // 'data' // '/' // 'eii
     *_'// eii_xfile(:lnblnk1(eii_xfile)) //'.data'
      want_eii_unit = 62
      eii_unit = egs_get_unit(want_eii_unit)
      IF (( eii_unit .LT. 1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'eii_init: failed to get a free Fortran I/O unit'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      open(eii_unit,file=eii_file(:lnblnk1(eii_file)),status='old',err=1
     *8400)
      write(i_log,'(//a,a)') 'Opened EII data file ',eii_file(:lnblnk1(e
     *ii_file))
      write(i_log,'(a,$)') ' eii_init: reading EII data ... '
      read(eii_unit,*,err=18410,end=18410) nskip
      DO 18421 j=1,nskip
        read(eii_unit,*,err=18410,end=18410)
18421 CONTINUE
18422 CONTINUE
      read(eii_unit,*,err=18410,end=18410) emax,nbin
      IF (( nbin .NE. 250 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'Inconsistent EII data file'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF ((xsec_out .EQ. 1)) THEN
        eii_out = egs_open_file(93,0,1,'.eiixsec')
      END IF
      ii = 0
      DO 18431 j=1,100
        read(eii_unit,*,err=18410,end=18410) iZ,nsh
        IF ((xsec_out .EQ. 1 .AND. eii_nshells(iZ) .GT. 0)) THEN
          write(eii_out,*) '================================='
          write(eii_out,'(a,i3)') 'EII xsections for element Z = ',iZ
          write(eii_out,*) '================================='
        END IF
        IF (( nsh .LT. eii_nshells(iZ) )) THEN
          write(i_log,*) 'EII data file has data for ',nsh,' shells for
     *element '
          write(i_log,*) iZ,' but according'
          write(i_log,*) 'to binding energies and thresholds ',eii_nshel
     *    ls(iZ)
          write(i_log,*) 'shells are required'
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'This is a fatal error.'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        DO 18441 ish=1,nsh
          read(eii_unit,*,err=18410,end=18410) fmax
          read(eii_unit,*,err=18410,end=18410) aux_array
          IF ((ish.GT.1 .AND. ish .LT. 5)) THEN
            fmax = fmax*eii_L_factor
          END IF
          IF (( ish .LE. eii_nshells(iZ) )) THEN
            IF ((xsec_out .EQ. 1)) THEN
              IF ((ish .EQ. 1)) THEN
                write(eii_out,'(a,f10.2,a)') 'K-shell sigma_max = ',fmax
     *          ,' b/atom'
              ELSE IF((ish .EQ. 2)) THEN
                write(eii_out,'(a,f9.2,a)') '=> LI-shell sigma_max = ',f
     *          max,' b/atom'
              ELSE IF((ish .EQ. 3)) THEN
                write(eii_out,'(a,f8.2,a)') '=> LII-shell sigma_max = ',
     *          fmax,' b/atom'
              ELSE IF((ish .EQ. 4)) THEN
                write(eii_out,'(a,f8.2,a)') '=> LIII-shell sigma_max = '
     *          ,fmax,' b/atom'
              ELSE
                write(eii_out,*) '=> Wrong number of shells!'
              END IF
              write(eii_out,*) '   E/keV     sigma/(b/atom)'
              write(eii_out,*) '---------------------------'
            END IF
            ii = ii+1
            eii_z(ii) = iZ
            eii_sh(ii) = ish
            eii_a(ii) = nbin
            eii_a(ii) = eii_a(ii)/log(emax/binding_energies(ish,iZ))
            eii_b(ii) = 1 - eii_a(ii)*log(binding_energies(ish,iZ))
            DO 18451 k=1,nbin
              IF (( k .GT. 1 )) THEN
                sigo = fmax*aux_array(k-1)
              ELSE
                sigo = 0
              END IF
              loge = (k - eii_b(ii))/eii_a(ii)
              iii = nbin*(ii-1)+k
              eii_xsection_a(iii) = (fmax*aux_array(k)-sigo)*eii_a(ii)
              eii_xsection_b(iii) = sigo - eii_xsection_a(iii)*loge
              IF ((xsec_out .EQ. 1)) THEN
                write(eii_out,'(f12.2,2X,10f9.2)') Exp((k+1-eii_b(ii))/e
     *          ii_a(ii))*1000.0,fmax*aux_array(k)
              END IF
18451       CONTINUE
18452       CONTINUE
          END IF
18441   CONTINUE
18442   CONTINUE
        IF (( ii .EQ. nsh_tot )) THEN
          GO TO18432
        END IF
18431 CONTINUE
18432 CONTINUE
      close(eii_unit)
      IF ((xsec_out .EQ. 1)) THEN
        close(eii_out)
      END IF
      write(i_log,*) ' OK '
      write(i_log,*) ' '
      DO 18461 imed=1,nmed
        Ec = ae(imed) - rm
        Ecc = min(Ec,ap(imed))
        sum_z=0
        sum_pz=0
        sum_a=0
        sum_wa=0
        DO 18471 iele=1,nne(imed)
          sum_z = sum_z + pz(imed,iele)*zelem(imed,iele)
          sum_pz = sum_pz + pz(imed,iele)
          sum_wa = sum_wa + rhoz(imed,iele)
          sum_a = sum_a + pz(imed,iele)*wa(imed,iele)
18471   CONTINUE
18472   CONTINUE
        con_med = rho(imed)/1.6605655/sum_a
        eii_cons(imed) = con_med
        IF (( eii_nsh(imed) .GT. 0 )) THEN
          is_monotone = .true.
          sigma_max = 0
          DO 18481 j=1,meke(imed)
            loge = (j - eke0(imed))/eke1(imed)
            e = Exp(loge)
            tau = e/rm
            beta2 = tau*(tau+2)/(tau+1)**2
            p2 = 2*rm*tau*(tau+2)
            lloge = j
            medium = imed
            dedx=ededx1(Lloge,MEDIUM)*loge+ededx0(Lloge,MEDIUM)
            IF (( e .GT. ap(medium) .OR. e .GT. 2*Ec )) THEN
              sig=esig1(Lloge,MEDIUM)*loge+esig0(Lloge,MEDIUM)
            ELSE
              sig = 0
            END IF
            IF (( e .GT. 2*Ec )) THEN
              wbrem=ebr11(Lloge,MEDIUM)*loge+ebr10(Lloge,MEDIUM)
              sigm = sig*(1-wbrem)
            ELSE
              sigm = 0
              wbrem = 1
            END IF
            sum_occn=0
            sum_sigma=0
            sum_dedx=0
            DO 18491 iele=1,nne(imed)
              iZ = int(zelem(imed,iele)+0.5)
              sum_sh = 0
              DO 18501 ish=1,eii_no(imed,iele)
                jj = eii_first(imed,iele) + ish - 1
                jjj = eii_sh(jj)
                U = binding_energies(jjj,iZ)
                Wmax = (e+U)/2
                uwm = U/Wmax
                IF (( U .LT. e .AND. U .GT. Ecc )) THEN
                  sum_sh = sum_sh + occn_numbers(jjj)
                  ss_0 = 2*(log(p2/U)-uwm**3*log(p2/Wmax)- (beta2+0.8333
     *            33)*(1-uwm**3))/3/U
                  sh_0 = ((1-uwm)*(1+uwm/(2-uwm))+U*(Wmax-U)/(e+rm)**2 -
     *             (2*tau+1)/(tau+1)**2*uwm/2*log((2-uwm)/uwm))/U
                  ss_1 = log(p2/U)-uwm**2*log(p2/Wmax)- (beta2+1)*(1-uwm
     *            **2)
                  sh_1 = log(Wmax/U/(2-uwm))+2*(Wmax-U)/(2*Wmax-U) +(Wma
     *            x**2-U**2)/(e+rm)**2/2 -(2*tau+1)/(tau+1)**2*log((2*Wm
     *            ax-U)/Wmax)
                  av_E = (ss_1 + sh_1)/(ss_0 + sh_0)
                  i = eii_a(jjj)*loge + eii_b(jjj)
                  i = (jj-1)*250 + i
                  sig_j = eii_xsection_a(i)*loge + eii_xsection_b(i)
                  sig_j = sig_j*pz(imed,iele)*con_med
                  sum_sigma = sum_sigma + sig_j
                  sum_dedx = sum_dedx + sig_j*av_E
                END IF
18501         CONTINUE
18502         CONTINUE
              sum_occn = sum_occn + sum_sh*pz(imed,iele)
18491       CONTINUE
18492       CONTINUE
            sigm = sigm + sum_sigma
            dedx = dedx - sum_dedx
            aux = Ec/e
            IF (( e .GT. 2*Ec )) THEN
              sigo = cons*sum_occn*rho(imed)/(beta2*Ec)*( (1-2*aux)*(1+a
     *        ux/(1-aux)+(tau/(tau+1))**2*aux/2)- (2*tau+1)/(tau+1)**2*a
     *        ux*log((1-aux)/aux))/sum_a
              de = cons*sum_occn*rho(imed)/beta2*( log(0.25/aux/(1-aux))
     *        +(1-2*aux)/(1-aux)+ (tau/(tau+1))**2*(1-4*aux*aux)/8- (2*t
     *        au+1)/(tau+1)**2*log(2*(1-aux)))/sum_a
              sigm = sigm - sigo
              dedx = dedx + de
            END IF
            sigma = sigm + wbrem*sig
            IF((sigma/dedx .GT. sigma_max))sigma_max = sigma/dedx
            IF (( sigma .GT. 0 )) THEN
              wbrem = wbrem*sig/sigma
            ELSE
              wbrem = 1
            END IF
            IF (( j .GT. 1 )) THEN
              ededx1(j-1,imed) = (dedx - dedx_old)*eke1(imed)
              ededx0(j-1,imed) = dedx - ededx1(j-1,imed)*loge
              esig1(j-1,imed) = (sigma - sigma_old)*eke1(imed)
              esig0(j-1,imed) = sigma - esig1(j-1,imed)*loge
              ebr11(j-1,imed) = (wbrem - wbrem_old)*eke1(imed)
              ebr10(j-1,imed) = wbrem - ebr11(j-1,imed)*loge
              IF((sigma/dedx .LT. sigma_old/dedx_old))is_monotone = .fal
     *        se.
            END IF
            dedx_old = dedx
            sigm_old = sigm
            sigma_old = sigma
            wbrem_old = wbrem
18481     CONTINUE
18482     CONTINUE
          ededx1(meke(imed),imed) = ededx1(meke(imed)-1,imed)
          ededx0(meke(imed),imed) = ededx0(meke(imed)-1,imed)
          esig1(meke(imed),imed) = esig1(meke(imed)-1,imed)
          esig0(meke(imed),imed) = esig0(meke(imed)-1,imed)
          ebr11(meke(imed),imed) = ebr11(meke(imed)-1,imed)
          ebr10(meke(imed),imed) = ebr10(meke(imed)-1,imed)
          write(i_log,*) 'eii_init: for medium ',imed,' adjusted sige =
     *', sigma_max,' monotone = ',is_monotone
          sig_ismonotone(0,imed) = is_monotone
          esig_e(imed) = sigma_max
        END IF
18461 CONTINUE
18462 CONTINUE
      return
18410 write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) 'I/O error while reading EII data'
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
18400 write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(//a,a,/a,/a/)') 'Failed to open EII data file ',eii_
     *file(:lnblnk1(eii_file)), 'Make sure file exists in your $HEN_HOUS
     *E/data directory!', '****BEWARE of case sensitive file names!!!'
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      return
      end
      subroutine eii_sample(ish,iZ,Uj)
      implicit none
      integer*4 ish,iZ
      real*8 Uj
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      common/eii_data/ eii_xsection_a( 10000),  eii_xsection_b( 10000),
     * eii_cons(7), eii_a(40),  eii_b(40),  eii_L_factor,  eii_z(40),  e
     *ii_sh(40),  eii_nshells(100),  eii_nsh(7),  eii_first(7,50),  eii_
     *no(7,50),  eii_flag
      real*8 eii_xsection_a,eii_xsection_b,eii_a,eii_b,eii_cons,eii_L_fa
     *ctor
      integer*4 eii_z,eii_sh,eii_nshells
      integer*4 eii_first,eii_no
      integer*4 eii_elements,eii_flag,eii_nsh
      common/egs_vr/ e_max_rr,  prob_RR,  nbr_split,  i_play_RR,      i_
     *survived_RR,
     *  n_RR_warning,                                        i_do_rr
      real*8          e_max_rr,prob_RR
      integer*4       nbr_split,i_play_RR,i_survived_RR,n_RR_warning
      integer*2     i_do_rr
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/THRESH/RMT2,RMSQ, AP(7),AE(7),UP(7),UE(7),TE(7),THMOLL(7)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      COMMON/UPHIOT/THETA,SINTHE,COSTHE,SINPHI, COSPHI,PI,TWOPI,PI5D2
      real*8 THETA,  SINTHE,  COSTHE,  SINPHI,  COSPHI,  PI,TWOPI,PI5D2
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      common/relax_data/ relax_first(3000),  relax_ntran(3000),  relax_s
     *tate(10000),  relax_prob(10000),  relax_atbin(10000),  relax_ntot
      real*8 relax_prob
      integer*4 relax_first, relax_ntran, relax_state, relax_atbin, rela
     *x_ntot
      real*8 T,tau,tau1,tau12,tau2,p2,beta2,c1,c2,Wmax,xmax,fm_s,fm_h,pr
     *ob_s,prob
      real*8 r1,r2,r3,wx,wxx,aux,frej
      real*8 peie,pese1,pese2,dcosth,h1
      integer*4 iarg
      real*8 eta,cphi,sphi
      integer*4 np_save,ip,j
      real*8 xphi,xphi2,yphi,yphi2,rhophi2
      peie = e(np)
      T = peie - rm
      tau = T/rm
      tau1 = tau+1
      tau12 = tau1*tau1
      tau2 = tau*tau
      p2 = tau2 + 2*tau
      beta2 = p2/tau12
      Wmax = 0.5*(T+Uj)
      xmax = Uj/Wmax
      c1 = (Wmax/peie)**2
      c2 = (2*tau+1)/tau12
      fm_s = log(rmt2*p2/Uj) - beta2 - 0.5
      prob_s = 0.66666667*fm_s*(1+xmax+xmax*xmax)
      fm_h = 2 + c1 - c2
      IF((fm_h .LT. 1))fm_h = 1
      prob = fm_h + prob_s
18511 CONTINUE
        IF((rng_seed .GT. 128))call ranmar_get
        r1 = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        IF((rng_seed .GT. 128))call ranmar_get
        r2 = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        IF((rng_seed .GT. 128))call ranmar_get
        r3 = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
        IF (( r1*prob .LT. fm_h )) THEN
          wx = 1/(r2*xmax+1-r2)
          wxx = wx*xmax
          aux = wxx/(2-wxx)
          frej = (1 + aux*(aux-c2)+c1*wxx*wxx)/fm_h
        ELSE
          wx = 1/(r2*xmax**3+1-r2)**0.333333333
          frej = 1 - log(wx)/fm_s
        END IF
        IF((( r3 .LT. frej )))GO TO18512
      GO TO 18511
18512 CONTINUE
      wx = wx*Uj
      h1 = (peie + prm)/T
      pese1 = peie - wx
      e(np) = pese1
      dcosth = h1*(pese1-prm)/(pese1+prm)
      sinthe = dsqrt(1-dcosth)
      costhe = dsqrt(dcosth)
      call uphi(2,1)
      pese2 = wx - Uj + prm
      edep_local = 0
      IF (( pese2 .GT. ae(medium) )) THEN
        IF (( np+1 .GT. 10000 )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(//,3a,/,2(a,i9))') ' In subroutine ','eii_sample
     *', ' stack size exceeded! ',' $MAXSTACK = ',10000,' np = ',np+1
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        np = np+1
        e(np) = pese2
        dcosth = h1*(pese2-prm)/(pese2+prm)
        sinthe = -dsqrt(1-dcosth)
        costhe = dsqrt(dcosth)
        iq(np) = -1
        call uphi(3,2)
        edep = 0
      ELSE
        edep = wx - Uj
        edep_local = edep
        IARG=34
        IF ((IAUSFL(IARG+1).NE.0)) THEN
          CALL AUSGAB(IARG)
        END IF
        IF((IARG.LT.0))RETURN
      END IF
      call relax(Uj,ish,iZ)
      IF (( edep .GT. 0 )) THEN
        IARG=4
        IF ((IAUSFL(IARG+1).NE.0)) THEN
          CALL AUSGAB(IARG)
        END IF
        IF((IARG.LT.0))RETURN
      END IF
      return
      end
      subroutine egs_scale_photon_xsection(imed,fac,which)
      implicit none
      integer*4 imed,which
      real*8 fac
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/PHOTIN/ EBINDA(7), GE0(7),GE1(7), GMFP0(2000,7),GMFP1(2000,
     *7),GBR10(2000,7),GBR11(2000,7),GBR20(2000,7),GBR21(2000,7), RCO0(7
     *),RCO1(7), RSCT0(100,7),RSCT1(100,7), COHE0(2000,7),COHE1(2000,7),
     *  PHOTONUC0(2000,7),PHOTONUC1(2000,7), DPMFP, MPGEM(1,7), NGR(7)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      integer*4 ifirst,ilast,medium,j
      logical has_r
      real*8 gle,gmfp,gbr1,gbr2,cohfac,aux,gmfp_old,gbr1_old,gbr2_old,co
     *hfac_old
      character*8 strings(5)
      data strings/'photon','Rayleigh','Compton','pair','photo'/
      IF (( which .LT. 0 .OR. which .GT. 4 )) THEN
        return
      END IF
      IF (( imed .GT. 0 .AND. imed .LE. nmed )) THEN
        ifirst = imed
        ilast = imed
      ELSE
        ifirst = 1
        ilast = nmed
      END IF
      IF (( which .EQ. 1 )) THEN
        has_r = .false.
        DO 18521 medium=ifirst,ilast
          IF (( iraylm(medium) .EQ. 1 )) THEN
            has_r = .true.
          END IF
18521   CONTINUE
18522   CONTINUE
        IF((.NOT.has_r))return
      END IF
      write(i_log,*) ' '
      DO 18531 medium=ifirst,ilast
        write(i_log,'(a,a,a,i3,a,f9.5)') 'Scaling ',strings(which+1),' x
     *-section data for medium', medium,' with ',fac
        DO 18541 j=1,mge(medium)
          gle = (j - ge0(medium))/ge1(medium)
          gmfp = gmfp0(j,medium) + gmfp1(j,medium)*gle
          gbr1 = gbr10(j,medium) + gbr11(j,medium)*gle
          gbr2 = gbr20(j,medium) + gbr21(j,medium)*gle
          IF (( iraylm(medium) .EQ. 1 )) THEN
            cohfac = cohe0(j,medium) + cohe1(j,medium)*gle
          ELSE
            cohfac = 1
          END IF
          IF (( which .EQ. 0 )) THEN
            gmfp = gmfp/fac
          ELSE IF(( which .EQ. 1 )) THEN
            cohfac = cohfac/(fac*(1-cohfac)+cohfac)
          ELSE
            IF (( which .EQ. 2 )) THEN
              aux = fac*(gbr2-gbr1) + gbr1 + 1 - gbr2
              gbr2 = (gbr1 + fac*(gbr2-gbr1))/aux
              gbr1 = gbr1/aux
            ELSE IF(( which .EQ. 3 )) THEN
              aux = fac*gbr1 + 1 - gbr1
              gbr2 = (fac*gbr1 + gbr2-gbr1)/aux
              gbr1 = fac*gbr1/aux
            ELSE
              aux = gbr2 + fac*(1-gbr2)
              gbr1 = gbr1/aux
              gbr2 = gbr2/aux
            END IF
            gmfp = gmfp/aux
            cohfac = cohfac*aux/(aux*cohfac + 1 - cohfac)
          END IF
          IF (( j .GT. 1 )) THEN
            gmfp1(j-1,medium) = (gmfp - gmfp_old)*ge1(medium)
            gmfp0(j-1,medium) = gmfp - gmfp1(j-1,medium)*gle
            gbr11(j-1,medium) = (gbr1 - gbr1_old)*ge1(medium)
            gbr10(j-1,medium) = gbr1 - gbr11(j-1,medium)*gle
            gbr21(j-1,medium) = (gbr2 - gbr2_old)*ge1(medium)
            gbr20(j-1,medium) = gbr2 - gbr21(j-1,medium)*gle
            cohe1(j-1,medium) = (cohfac - cohfac_old)*ge1(medium)
            cohe0(j-1,medium) = cohfac - cohe1(j-1,medium)*gle
          END IF
          gmfp_old = gmfp
          gbr1_old = gbr1
          gbr2_old = gbr2
          cohfac_old = cohfac
18541   CONTINUE
18542   CONTINUE
        gmfp1(mge(medium),medium) = gmfp1(mge(medium)-1,medium)
        gmfp0(mge(medium),medium) = gmfp0(mge(medium)-1,medium)
        gbr11(mge(medium),medium) = gbr11(mge(medium)-1,medium)
        gbr10(mge(medium),medium) = gbr10(mge(medium)-1,medium)
        gbr21(mge(medium),medium) = gbr21(mge(medium)-1,medium)
        gbr20(mge(medium),medium) = gbr20(mge(medium)-1,medium)
        cohe1(mge(medium),medium) = cohe1(mge(medium)-1,medium)
        cohe0(mge(medium),medium) = cohe0(mge(medium)-1,medium)
18531 CONTINUE
18532 CONTINUE
      return
      end
      subroutine egs_init_user_photon(prefix,comp_prefix,photonuc_prefix
     *,out)
      implicit none
      character*(*) prefix, comp_prefix,  photonuc_prefix
      integer*4 out
      COMMON/BREMPR/ DL1(8,7),DL2(8,7),DL3(8,7),DL4(8,7),DL5(8,7),DL6(8,
     *7), ALPHI(2,7),BPAR(2,7),DELPOS(2,7), WA(7,50),PZ(7,50),ZELEM(7,50
     *),RHOZ(7,50), PWR2I(50), DELCM(7),ZBRANG(7),LZBRANG(7),NNE(7), IBR
     *DST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(7,50,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/EDGE/binding_energies(30,100), interaction_prob(6,100), rel
     *axation_prob(39,100), edge_energies(16,100), edge_number(100), edg
     *e_a(16,100), edge_b(16,100), edge_c(16,100), edge_d(16,100), IEDGF
     *L,IPHTER
      real*8 binding_energies,  interaction_prob,    relaxation_prob,  e
     *dge_energies,  edge_a,edge_b,edge_c,edge_d
      integer*2 IEDGFL,  IPHTER
      integer*4 edge_number
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/PHOTIN/ EBINDA(7), GE0(7),GE1(7), GMFP0(2000,7),GMFP1(2000,
     *7),GBR10(2000,7),GBR11(2000,7),GBR20(2000,7),GBR21(2000,7), RCO0(7
     *),RCO1(7), RSCT0(100,7),RSCT1(100,7), COHE0(2000,7),COHE1(2000,7),
     *  PHOTONUC0(2000,7),PHOTONUC1(2000,7), DPMFP, MPGEM(1,7), NGR(7)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      COMMON/THRESH/RMT2,RMSQ, AP(7),AE(7),UP(7),UE(7),TE(7),THMOLL(7)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      common/compton_data/ iz_array(1538),  be_array(1538),  Jo_array(15
     *38),  erfJo_array(1538),   ne_array(1538),  shn_array(1538),
     *shell_array(200,7), eno_array(200,7), eno_atbin_array(200,7), n_sh
     *ell(7), radc_flag,  ibcmp
      integer*4 iz_array,ne_array,shn_array,eno_atbin_array, shell_array
     *,n_shell,radc_flag
      real*8 be_array,Jo_array,erfJo_array,eno_array
      integer*2 ibcmp
      common/x_options/eadl_relax,  mcdf_pe_xsections
      logical eadl_relax, mcdf_pe_xsections
      integer*4 lnblnk1,egs_get_unit,medium, photo_unit,pair_unit,raylei
     *gh_unit,triplet_unit, ounit,egs_open_file,compton_unit,  photonuc_
     *unit
      integer*4 nge,sorted(50),i,j,k,iz,iz_old,ndat
      real*8 z_sorted(50),pz_sorted(50)
      real*8 sig_photo(2000),sig_pair(2000),sig_triplet(2000), sig_rayle
     *igh(2000),sig_compton(2000)
      real*8 sigma,cohe,gmfp,gbr1,gbr2,sig_KN,gle,e,sig_p
      real*8 cohe_old,gmfp_old,gbr1_old,gbr2_old,  sig_photonuc(2000), p
     *hotonuc, photonuc_old
      real*8 etmp(2000),ftmp(2000)
      real*8 sumZ,sumA,con1,con2,egs_KN_sigma0
      real*8 bc_emin,bc_emax,bc_dle,bc_data(183),bc_tmp(183),bcf,aj
      integer*4 bc_ne
      logical input_compton_data,  input_photonuc_data
      character data_dir*128,photo_file*140,pair_file*140,rayleigh_file*
     *144, triplet_file*142,tmp_string*144,compton_file*144,  photonuc_f
     *ile*144
      write(i_log,'(/a$)') '(Re)-initializing photon cross sections'
      write(i_log,'(a,a/)') ' with files from the series: ', prefix(:lnb
     *lnk1(prefix))
      write(i_log,'(a,a)') ' Compton cross sections: ',comp_prefix(:lnbl
     *nk1(comp_prefix))
      IF ((iphotonuc .EQ. 1)) THEN
        write(i_log,'(a,a)') ' Photonuclear cross sections: ', photonuc_
     *  prefix(:lnblnk1(photonuc_prefix))
        input_photonuc_data = .false.
        IF ((lnblnk1(photonuc_prefix) .GT. 0 .AND. photonuc_prefix(1:7)
     *  .NE. 'default')) THEN
          input_photonuc_data = .true.
        END IF
      END IF
      input_compton_data = .false.
      IF (( ibcmp .GT. 1 .AND. lnblnk1(comp_prefix) .GT. 0 )) THEN
        IF((comp_prefix(1:7) .NE. 'default'))input_compton_data = .true.
      END IF
      data_dir = hen_house(:lnblnk1(hen_house)) // 'data' // '/'
      photo_file = data_dir(:lnblnk1(data_dir)) // prefix(:lnblnk1(prefi
     *x)) // '_photo.data'
      pair_file = data_dir(:lnblnk1(data_dir)) // prefix(:lnblnk1(prefix
     *)) // '_pair.data'
      triplet_file = data_dir(:lnblnk1(data_dir)) // prefix(:lnblnk1(pre
     *fix)) // '_triplet.data'
      rayleigh_file = data_dir(:lnblnk1(data_dir)) // prefix(:lnblnk1(pr
     *efix)) // '_rayleigh.data'
      IF (( input_compton_data )) THEN
        compton_file = data_dir(:lnblnk1(data_dir)) // comp_prefix(:lnbl
     *  nk1(comp_prefix)) // '_compton.data'
      ELSE
        compton_file = data_dir(:lnblnk1(data_dir)) // 'compton_sigma.da
     *ta'
      END IF
      write(i_log,'(a,a)') ' Using Compton cross sections from ', compto
     *n_file(:lnblnk1(compton_file))
      IF ((iphotonuc .EQ. 1)) THEN
        IF (( input_photonuc_data )) THEN
          photonuc_file = data_dir(:lnblnk1(data_dir)) // photonuc_prefi
     *    x(:lnblnk1(photonuc_prefix)) // '_photonuc.data'
        ELSE
          photonuc_file = data_dir(:lnblnk1(data_dir)) // 'iaea_photonuc
     *.data'
        END IF
        write(i_log,'(a,a)') ' Using photonuclear cross sections from ',
     *   photonuc_file(:lnblnk1(photonuc_file))
      END IF
      photo_unit = 83
      photo_unit = egs_get_unit(photo_unit)
      IF (( photo_unit .LT. 1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'egs_init_user_photon: failed to get a free Fortr
     *an I/O unit'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      tmp_string = photo_file
      open(photo_unit,file=photo_file,status='old',err=18550)
      pair_unit = 84
      pair_unit = egs_get_unit(pair_unit)
      IF (( pair_unit .LT. 1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'egs_init_user_photon: failed to get a free Fortr
     *an I/O unit'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      tmp_string = pair_file
      open(pair_unit,file=pair_file,status='old',err=18550)
      triplet_unit = 85
      triplet_unit = egs_get_unit(triplet_unit)
      IF (( triplet_unit .LT. 1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'egs_init_user_photon: failed to get a free Fortr
     *an I/O unit'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      tmp_string = triplet_file
      open(triplet_unit,file=triplet_file,status='old',err=18550)
      rayleigh_unit = 86
      rayleigh_unit = egs_get_unit(rayleigh_unit)
      IF (( rayleigh_unit .LT. 1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'egs_init_user_photon: failed to get a free Fortr
     *an I/O unit'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      tmp_string = rayleigh_file
      open(rayleigh_unit,file=rayleigh_file,status='old',err=18550)
      IF (( ibcmp .GT. 1 )) THEN
        compton_unit = 88
        compton_unit = egs_get_unit(compton_unit)
        IF (( compton_unit .LT. 1 )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'egs_init_user_photon: failed to get a free For
     *tran I/O unit'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        tmp_string = compton_file
        open(compton_unit,file=compton_file,status='old',err=18550)
      END IF
      IF (( iphotonuc .EQ. 1 )) THEN
        photonuc_unit = 89
        photonuc_unit = egs_get_unit(photonuc_unit)
        IF (( photonuc_unit .LT. 1 )) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,*) 'egs_init_user_photon: failed to get a free For
     *tran I/O unit'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        tmp_string = photonuc_file
        open(photonuc_unit,file=photonuc_file,status='old',err=18550)
      END IF
      IF (( out .EQ. 1 )) THEN
        ounit = egs_open_file(87,0,1,'.xsections')
        write(ounit,'(/a,a,a)') 'Photon cross sections initialized from
     *', prefix(:lnblnk1(prefix)),' data files'
        write(ounit,'(a,/)') '==========================================
     *=================================='
        write(ounit,'(a,/)') 'Grid energies and cross sections are outpu
     *t'
        IF ((iphotonuc .EQ. 1)) THEN
          write(ounit,'(5x,a,t19,a,t34,a,t49,a,t64,a,t79,a)') 'Energy','
     * GMFP(cm) ',' Pair ','Compton',' GMFP(cm) ', ' GMFP(cm) '
          write(ounit,'(5x,a,t19,a,t34,a,t49,a,t64,a,t79,a/)') '(MeV)','
     *no Rayleigh','(fraction)','(fraction)','with Rayleigh', 'w/ Ray +
     *photnuc'
        ELSE
          write(ounit,'(5x,a,t19,a,t34,a,t49,a,t64,a)') 'Energy',' GMFP(
     *cm) ',' Pair ','Compton',' GMFP(cm) '
          write(ounit,'(5x,a,t19,a,t34,a,t49,a,t64,a/)') '(MeV)','no Ray
     *leigh','(fraction)','(fraction)','with Rayleigh'
        END IF
      END IF
      DO 18561 iz=1,100
        read(photo_unit,*) ndat
        read(photo_unit,*) (etmp(k),ftmp(k),k=1,ndat)
        k = 0
        DO 18571 j=ndat,2,-1
          IF (( etmp(j)-etmp(j-1) .LT. 1e-5 )) THEN
            k = k+1
            IF (( k .LE. 30 )) THEN
              binding_energies(k,iz) = exp(etmp(j))
            ELSE
              write(i_log,'(/a)') '***************** Error: '
              write(i_log,'(i3,a,i3,//a)') k,' binding energies read exc
     *eeding array size of', 30,'Increase $MXSHXSEC in egsnrc.macros!'
              write(i_log,'(/a)') '***************** Quiting now.'
              call exit(1)
            END IF
            IF((.NOT.eadl_relax .AND. k .GE. 4))GO TO18572
          END IF
18571   CONTINUE
18572   CONTINUE
18561 CONTINUE
18562 CONTINUE
      IF ((mcdf_pe_xsections)) THEN
        call egs_read_shellwise_pe()
      END IF
      DO 18581 medium=1,nmed
        mge(medium) = 2000
        nge = 2000
        ge1(medium) = nge-1
        ge1(medium) = ge1(medium)/log(up(medium)/ap(medium))
        ge0(medium) = 1 - ge1(medium)*log(ap(medium))
        write(i_log,'(a,i3,a,$)') ' Working on medium ',medium,' ... '
        IF (( out .EQ. 1 )) THEN
          write(ounit,'(/,2x,a,i3,a,24a1/)') 'Medium ',medium,': ', (med
     *    ia(k,medium),k=1,24)
        END IF
        sumZ=0
        sumA=0
        DO 18591 i=1,nne(medium)
          z_sorted(i) = zelem(medium,i)
          sumZ = sumZ + pz(medium,i)*zelem(medium,i)
          sumA = sumA + pz(medium,i)*wa(medium,i)
18591   CONTINUE
18592   CONTINUE
        con1 = sumZ*rho(medium)/(sumA*1.6605655)
        con2 = rho(medium)/(sumA*1.6605655)
        call egs_heap_sort(nne(medium),z_sorted,sorted)
        DO 18601 i=1,nne(medium)
          pz_sorted(i) = pz(medium,sorted(i))
18601   CONTINUE
18602   CONTINUE
        IF ((mcdf_pe_xsections)) THEN
          call egsi_get_shell_data(medium,nge,nne(medium),z_sorted,pz_so
     *    rted, ge1(medium),ge0(medium),sig_photo)
        ELSE
          call egsi_get_data(0,photo_unit,nge,nne(medium),z_sorted,pz_so
     *    rted, ge1(medium),ge0(medium),sig_photo)
        END IF
        call egsi_get_data(0,rayleigh_unit,nge,nne(medium),z_sorted,pz_s
     *  orted, ge1(medium),ge0(medium),sig_rayleigh)
        call egsi_get_data(1,pair_unit,nge,nne(medium),z_sorted,pz_sorte
     *  d, ge1(medium),ge0(medium),sig_pair)
        call egsi_get_data(2,triplet_unit,nge,nne(medium),z_sorted,pz_so
     *  rted, ge1(medium),ge0(medium),sig_triplet)
        IF (( iphotonuc .EQ. 1 )) THEN
          call egsi_get_data(3,photonuc_unit,nge,nne(medium),z_sorted,pz
     *    _sorted, ge1(medium),ge0(medium),sig_photonuc)
        END IF
        IF (( ibcmp .GT. 1 )) THEN
          IF (( input_compton_data )) THEN
            call egsi_get_data(0,compton_unit,nge,nne(medium), z_sorted,
     *      pz_sorted,ge1(medium),ge0(medium), sig_compton)
          ELSE
            rewind(compton_unit)
            read(compton_unit,*) bc_emin,bc_emax,bc_ne
            IF (( bc_ne .GT. 183 )) THEN
              write(i_log,'(/a)') '***************** Error: '
              write(i_log,*) 'Number of input Compton data exceeds array
     * size'
              write(i_log,'(/a)') '***************** Quiting now.'
              call exit(1)
            END IF
            bc_dle = log(bc_emax/bc_emin)/(bc_ne-1)
            DO 18611 j=1,bc_ne
              bc_data(j) = 0
18611       CONTINUE
18612       CONTINUE
            iz_old = 1
            DO 18621 i=1,nne(medium)
              iz = int(z_sorted(i)+0.5)
              DO 18631 j=iz_old,iz
                read(compton_unit,*) (bc_tmp(k),k=1,bc_ne)
18631         CONTINUE
18632         CONTINUE
              DO 18641 j=1,bc_ne
                bc_data(j)=bc_data(j)+pz_sorted(i)*z_sorted(i)*bc_tmp(j)
18641         CONTINUE
18642         CONTINUE
              iz_old = iz+1
18621       CONTINUE
18622       CONTINUE
            DO 18651 j=1,bc_ne
              bc_data(j)=log(bc_data(j)/sumZ)
18651       CONTINUE
18652       CONTINUE
          END IF
        END IF
        call egs_init_rayleigh(medium,sig_rayleigh)
        DO 18661 i=1,nge
          gle = (i - ge0(medium))/ge1(medium)
          e = exp(gle)
          sig_KN = sumZ*egs_KN_sigma0(e)
          IF (( ibcmp .GT. 1 )) THEN
            IF (( input_compton_data )) THEN
              sig_KN = sig_compton(i)
            ELSE
              IF (( e .LE. bc_emin )) THEN
                bcf = exp(bc_data(1))
              ELSE IF(( e .LT. bc_emax )) THEN
                aj = 1 + log(e/bc_emin)/bc_dle
                j = int(aj)
                aj = aj - j
                bcf = exp(bc_data(j)*(1-aj) + bc_data(j+1)*aj)
              ELSE
                bcf = 1
              END IF
              sig_KN = sig_KN*bcf
            END IF
          END IF
          sig_p = sig_pair(i) + sig_triplet(i)
          sigma = sig_KN + sig_p + sig_photo(i)
          gmfp = 1/(sigma*con2)
          gbr1 = sig_p/sigma
          gbr2 = gbr1 + sig_KN/sigma
          cohe = sigma/(sig_rayleigh(i) + sigma)
          photonuc = sigma/(sig_photonuc(i) + sigma)
          IF (( out .EQ. 1 )) THEN
            IF ((iphotonucm(medium) .EQ. 1)) THEN
              write(ounit,'(6(1pe15.6))') e,gmfp,gbr1,gbr2-gbr1, gmfp*co
     *        he,gmfp*cohe*photonuc
            ELSE
              write(ounit,'(5(1pe15.6))') e,gmfp,gbr1,gbr2-gbr1,gmfp*coh
     *        e
            END IF
          END IF
          IF (( i .GT. 1 )) THEN
            gmfp1(i-1,medium) = (gmfp - gmfp_old)*ge1(medium)
            gmfp0(i-1,medium) = gmfp - gmfp1(i-1,medium)*gle
            gbr11(i-1,medium) = (gbr1 - gbr1_old)*ge1(medium)
            gbr10(i-1,medium) = gbr1 - gbr11(i-1,medium)*gle
            gbr21(i-1,medium) = (gbr2 - gbr2_old)*ge1(medium)
            gbr20(i-1,medium) = gbr2 - gbr21(i-1,medium)*gle
            cohe1(i-1,medium) = (cohe - cohe_old)*ge1(medium)
            cohe0(i-1,medium) = cohe - cohe1(i-1,medium)*gle
            photonuc1(i-1,medium) = (photonuc - photonuc_old)*ge1(medium
     *      )
            photonuc0(i-1,medium) = photonuc - photonuc1(i-1,medium)*gle
          END IF
          gmfp_old = gmfp
          gbr1_old = gbr1
          gbr2_old = gbr2
          cohe_old = cohe
          photonuc_old = photonuc
18661   CONTINUE
18662   CONTINUE
        gmfp1(nge,medium) = gmfp1(nge-1,medium)
        gmfp0(nge,medium) = gmfp - gmfp1(nge,medium)*gle
        gbr11(nge,medium) = gbr11(nge-1,medium)
        gbr10(nge,medium) = gbr1 - gbr11(nge,medium)*gle
        gbr21(nge,medium) = gbr21(nge-1,medium)
        gbr20(nge,medium) = gbr2 - gbr21(nge,medium)*gle
        cohe1(nge,medium) = cohe1(nge-1,medium)
        cohe0(nge,medium) = cohe - cohe1(nge,medium)*gle
        photonuc1(nge,medium) = photonuc1(nge-1,medium)
        photonuc0(nge,medium) = photonuc - photonuc1(nge,medium)*gle
        write(i_log,'(a)') 'OK'
18581 CONTINUE
18582 CONTINUE
      close(photo_unit)
      close(pair_unit)
      close(triplet_unit)
      close(rayleigh_unit)
      IF (( iphotonuc .EQ. 1 )) THEN
        close(photonuc_unit)
      END IF
      IF (( ibcmp .GT. 1 )) THEN
        close(compton_unit)
      END IF
      IF (( out .EQ. 1 )) THEN
        close(ounit)
      END IF
      return
18550 CONTINUE
      write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(//a,a)') 'Failed to open data file ',tmp_string(:lnb
     *lnk1(tmp_string))
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      return
      end
      subroutine egs_init_rayleigh(medium,sig_rayleigh)
      implicit none
      COMMON/THRESH/RMT2,RMSQ, AP(7),AE(7),UP(7),UE(7),TE(7),THMOLL(7)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR( 2097154),MED( 2097154),IRAYLR,
     *IPHOTONUCR( 2097154)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/PHOTIN/ EBINDA(7), GE0(7),GE1(7), GMFP0(2000,7),GMFP1(2000,
     *7),GBR10(2000,7),GBR11(2000,7),GBR20(2000,7),GBR21(2000,7), RCO0(7
     *),RCO1(7), RSCT0(100,7),RSCT1(100,7), COHE0(2000,7),COHE1(2000,7),
     *  PHOTONUC0(2000,7),PHOTONUC1(2000,7), DPMFP, MPGEM(1,7), NGR(7)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      COMMON/BREMPR/ DL1(8,7),DL2(8,7),DL3(8,7),DL4(8,7),DL5(8,7),DL6(8,
     *7), ALPHI(2,7),BPAR(2,7),DELPOS(2,7), WA(7,50),PZ(7,50),ZELEM(7,50
     *),RHOZ(7,50), PWR2I(50), DELCM(7),ZBRANG(7),LZBRANG(7),NNE(7), IBR
     *DST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(7,50,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/rayleigh_inputs/iray_ff_media(7),iray_ff_file(7)
      character*24 iray_ff_media
      character*128 iray_ff_file
      COMMON/rayleigh_sampling/xgrid(100,7), fcum(100,7), b_array(100,7)
     *, c_array(100,7), i_array(100,7), pmax0(2000,7),pmax1(2000,7)
      real*8 xgrid, fcum, b_array, c_array,pmax0, pmax1
      integer*4 i_array
      real*8 xval(100),aff(100,100),ff(100,7)
      real*8 xsc, fsc
      real*8 sig_rayleigh(2000), pe_array(2000,7)
      real*8 e,egs_rayleigh_sigma,gmfp,gle,conv,dle,dlei,sumA
      real*8 totRayleigh2,pzmin
      real*8 emin, emax
      integer*4 i,j,k,ff_unit, egs_get_unit, ne
      integer*4 lnblnk1, EOF, nff, medium, ncustom
      character dummy*24, afac_file*128, ff_file*128
      IF ((iraylm(medium).EQ.0)) THEN
        return
      END IF
      ncustom=0
      write(dummy,'(24a1)')(media(j,medium),j=1,24)
      ff_file=' '
      DO 18671 i=1,7
        IF ((lnblnk1(iray_ff_file(i)).NE.0)) THEN
          ncustom = ncustom + 1
        END IF
18671 CONTINUE
18672 CONTINUE
      DO 18681 i=1,ncustom
        IF ((dummy(:lnblnk1(dummy)) .EQ. iray_ff_media(i))) THEN
          ff_file = iray_ff_file(i)
        END IF
18681 CONTINUE
18682 CONTINUE
      ff_unit = egs_get_unit(0)
      IF (( ff_unit .LT. 1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'egs_init_rayleigh: failed to get a free Fortran
     *I/O unit'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      IF (( lnblnk1(ff_file) .GT. 0)) THEN
        open(ff_unit,file=ff_file(:lnblnk1(ff_file)), status='old',err=1
     *  8690)
        GOTO 18700
18690   write(i_log,'(/a)') '***************** Error: '
        write(i_log,'(2a)') 'egs_init_rayleigh: failed to open custom ff
     * file ', ff_file(:lnblnk1(ff_file))
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
18700   write(i_log,'(/2a)') 'Opened custom ff file ',ff_file(:lnblnk1(f
     *  f_file))
        j = 0
18711   CONTINUE
          j = j + 1
          read(ff_unit,*,IOSTAT=EOF) xsc, fsc
          IF((EOF .LT. 0))GO TO18712
          IF ((j .LE. 100)) THEN
            xgrid(j,medium)=xsc
            ff(j,medium)=fsc
          END IF
        GO TO 18711
18712   CONTINUE
        nff = j-1
        IF ((nff .GT. 100)) THEN
          write(i_log,'(/a)') '***************** Error: '
          write(i_log,'(a,/,a,i5,a,i5,/,a)') 'subroutine egs_init_raylei
     *gh: form factors size too small!!', '$XRAYFF =  ', 100,', and need
     * to be ',nff, ' and try again!!!'
          write(i_log,'(/a)') '***************** Quiting now.'
          call exit(1)
        END IF
        IF((xgrid(1,medium) .LT. 1e-6))xgrid(1,medium) = 1e-4
        write(*,*) '\n  -> ', nff, ' values of mol. ff read!'
        sumA = 0.0
        DO 18721 j=1,nne(medium)
          sumA=sumA+PZ(medium,j)*WA(medium,j)
18721   CONTINUE
18722   CONTINUE
        DO 18731 j=1,MGE(medium)
          gle=(j-GE0(medium))/GE1(medium)
          e=exp(gle)
          sig_rayleigh(j)=egs_rayleigh_sigma(medium,e,nff, xgrid(1,mediu
     *    m),ff(1,medium))*sumA
18731   CONTINUE
18732   CONTINUE
      ELSE
        DO 18741 i=1,len(afac_file)
          afac_file(i:i) = ' '
18741   CONTINUE
18742   CONTINUE
        afac_file = hen_house(:lnblnk1(hen_house))//'pegs4'//'/'//'pgs4f
     *orm.dat'
        open(ff_unit,file=afac_file(:lnblnk1(afac_file)), status='old',e
     *  rr=18750)
        GOTO 18760
18750   write(i_log,'(/a)') '***************** Error: '
        write(i_log,'(2a)') 'egs_init_rayleigh: failed to open atomic ff
     * file', afac_file(:lnblnk1(afac_file))
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
18760   read(ff_unit,*) xval, aff
        DO 18771 i=1,100
          ff(i,medium) = 0.0
          xgrid(i,medium)=xval(i)
          DO 18781 j=1,nne(medium)
            ff(i,medium)=ff(i,medium)+PZ(medium,j)*aff(i,int(zelem(mediu
     *      m,j)))**2
18781     CONTINUE
18782     CONTINUE
          ff(i,medium) = sqrt(ff(i,medium))
18771   CONTINUE
18772   CONTINUE
        nff = 100
        IF((xgrid(1,medium) .LT. 1e-6))xgrid(1,medium) = 1e-4
        write(i_log,'(/a,i4,a)') '  -> ', nff, ' atomic ff values comput
     *ed!'
      END IF
      close(ff_unit)
      emin = exp((1 - ge0(medium))/ge1(medium))
      emax = exp((mge(medium) - ge0(medium))/ge1(medium))
      call prepare_rayleigh_data(nff,xgrid(1,medium),ff(1,medium), mge(m
     *edium),emin,emax, pe_array(1,medium),100, fcum(1,medium),i_array(1
     *,medium), b_array(1,medium),c_array(1,medium))
      ne=MGE(medium)
      dle=log(up(medium)/ap(medium))/(ne-1)
      dlei=1/dle
      DO 18791 i=1,ne-1
        gle = (i - ge0(medium))/ge1(medium)
        pmax1(i,medium)=(pe_array(i+1,medium)-pe_array(i,medium))*ge1(me
     *  dium)
        pmax0(i,medium)=pe_array(i,medium)-pmax1(i,medium)*gle
18791 CONTINUE
18792 CONTINUE
      pmax0(ne,medium)=pmax0(ne-1,medium)
      pmax1(ne,medium)=pmax1(ne-1,medium)
      return
      end
      subroutine egs_init_rayleigh_sampling(medium)
      implicit none
      COMMON/THRESH/RMT2,RMSQ, AP(7),AE(7),UP(7),UE(7),TE(7),THMOLL(7)
      real*8 RMT2,  RMSQ,  AP,  AE,  UP,  UE,  TE,  THMOLL
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      COMMON/MISC/  DUNIT,KMPI,KMPO,RHOR( 2097154),MED( 2097154),IRAYLR,
     *IPHOTONUCR( 2097154)
      real*8 DUNIT,  RHOR
      integer*4 KMPI,  KMPO
      integer*2 MED,  IRAYLR,  IPHOTONUCR
      COMMON/PHOTIN/ EBINDA(7), GE0(7),GE1(7), GMFP0(2000,7),GMFP1(2000,
     *7),GBR10(2000,7),GBR11(2000,7),GBR20(2000,7),GBR21(2000,7), RCO0(7
     *),RCO1(7), RSCT0(100,7),RSCT1(100,7), COHE0(2000,7),COHE1(2000,7),
     *  PHOTONUC0(2000,7),PHOTONUC1(2000,7), DPMFP, MPGEM(1,7), NGR(7)
      real*8 EBINDA,  GE0,GE1,  GMFP0,GMFP1,  GBR10,GBR11,  GBR20,GBR21,
     *  RCO0,RCO1,  RSCT0,RSCT1,  COHE0,COHE1,   PHOTONUC0,PHOTONUC1,  D
     *PMFP
      integer*4
     *                  MPGEM,
     *                          NGR
      COMMON/BREMPR/ DL1(8,7),DL2(8,7),DL3(8,7),DL4(8,7),DL5(8,7),DL6(8,
     *7), ALPHI(2,7),BPAR(2,7),DELPOS(2,7), WA(7,50),PZ(7,50),ZELEM(7,50
     *),RHOZ(7,50), PWR2I(50), DELCM(7),ZBRANG(7),LZBRANG(7),NNE(7), IBR
     *DST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(7,50,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/rayleigh_inputs/iray_ff_media(7),iray_ff_file(7)
      character*24 iray_ff_media
      character*128 iray_ff_file
      COMMON/rayleigh_sampling/xgrid(100,7), fcum(100,7), b_array(100,7)
     *, c_array(100,7), i_array(100,7), pmax0(2000,7),pmax1(2000,7)
      real*8 xgrid, fcum, b_array, c_array,pmax0, pmax1
      integer*4 i_array
      real*8 xval(100),aff(100,100),ff(100,7)
      real*8 xsc, fsc
      real*8 sig_rayleigh(2000), pe_array(2000,7)
      real*8 e,egs_rayleigh_sigma,gmfp,gle,conv,dle,dlei,sumA
      real*8 totRayleigh2,pzmin
      real*8 emin, emax
      integer*4 i,j,k,ff_unit, egs_get_unit, ne
      integer*4 lnblnk1, EOF, nff, medium, ncustom
      character dummy*24, afac_file*128, ff_file*128
      IF ((iraylm(medium).EQ.0)) THEN
        return
      END IF
      ff_unit = egs_get_unit(0)
      IF (( ff_unit .LT. 1 )) THEN
        write(i_log,'(/a)') '***************** Error: '
        write(i_log,*) 'egs_init_rayleigh: failed to get a free Fortran
     *I/O unit'
        write(i_log,'(/a)') '***************** Quiting now.'
        call exit(1)
      END IF
      DO 18801 i=1,len(afac_file)
        afac_file(i:i) = ' '
18801 CONTINUE
18802 CONTINUE
      afac_file = hen_house(:lnblnk1(hen_house))//'pegs4'//'/'//'pgs4for
     *m.dat'
      open(ff_unit,file=afac_file(:lnblnk1(afac_file)),status='old',err=
     *18750)
      GOTO 18760
18750 write(i_log,'(/a)') '***************** Error: '
      write(i_log,'(2a)') 'egs_init_rayleigh_sampling: failed to open at
     *omic ff file ', afac_file(:lnblnk1(afac_file))
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
18760 read(ff_unit,*) xval, aff
      DO 18811 i=1,100
        ff(i,medium) = 0.0
        xgrid(i,medium)=xval(i)
        DO 18821 j=1,nne(medium)
          ff(i,medium)=ff(i,medium)+PZ(medium,j)*aff(i,int(zelem(medium,
     *    j)))**2
18821   CONTINUE
18822   CONTINUE
        ff(i,medium) = sqrt(ff(i,medium))
18811 CONTINUE
18812 CONTINUE
      nff = 100
      IF((xgrid(1,medium) .LT. 1e-6))xgrid(1,medium) = 1e-4
      write(i_log,'(/a,i4,a)') '  -> ', nff, ' atomic ff values computed
     *!'
      close(ff_unit)
      emin = exp((1 - ge0(medium))/ge1(medium))
      emax = exp((mge(medium) - ge0(medium))/ge1(medium))
      call prepare_rayleigh_data(nff,xgrid(1,medium),ff(1,medium), mge(m
     *edium),emin,emax, pe_array(1,medium),100, fcum(1,medium),i_array(1
     *,medium), b_array(1,medium),c_array(1,medium))
      ne=MGE(medium)
      DO 18831 i=1,ne-1
        gle = (i - ge0(medium))/ge1(medium)
        pmax1(i,medium)=(pe_array(i+1,medium)-pe_array(i,medium))*ge1(me
     *  dium)
        pmax0(i,medium)=pe_array(i,medium)-pmax1(i,medium)*gle
18831 CONTINUE
18832 CONTINUE
      pmax0(ne,medium)=pmax0(ne-1,medium)
      pmax1(ne,medium)=pmax1(ne-1,medium)
      return
      end
      real*8 function egs_rayleigh_sigma(imed,E,ndat,x,f)
      implicit none
      integer*4 i, j, k,imed, ndat
      real*8 hc2,conv,b,hc
      parameter (hc = 0.0123984768438,hc2=0.0001537222280)
      real*8 x(100), f(100), zero, E, xmax
      real*8 x1,x2,pow_x1,pow_x2,raysig,C,C2,f1,f2
      C=2.*hc2/(E*E)
      C2=C*C
      xmax=E/hc
      egs_rayleigh_sigma = 0.0
      DO 18841 i=1,ndat-1
        IF((x(i) .EQ. 0.0))x(i) = zero()
        IF((x(i+1) .EQ. 0.0))x(i+1) = zero()
        IF((f(i) .EQ. 0.0))f(i) = zero()
        IF((f(i+1) .EQ. 0.0))f(i+1) = zero()
        b = log(f(i+1)/f(i))/log(x(i+1)/x(i))
        x1=x(i)
        x2=x(i+1)
        IF ((x2 .GT. xmax)) THEN
          x2=xmax
        END IF
        pow_x1=x1**(2*b)
        pow_x2=x2**(2*b)
        raysig = pow_x2*(x2**2/(b+1)-(C*x2**4)/(b+2)+(C2*x2**6)/(2*b+6))
        raysig = raysig - pow_x1*(x1**2/(b+1)-(C*x1**4)/(b+2)+(C2*x1**6)
     *  /(2*b+6))
        raysig = raysig*f(i)*f(i)/pow_x1
        egs_rayleigh_sigma = egs_rayleigh_sigma + raysig
        IF ((x(i+1).GT.xmax)) THEN
          GO TO18842
        END IF
18841 CONTINUE
18842 CONTINUE
      egs_rayleigh_sigma = 0.49893439187842413747*C*egs_rayleigh_sigma
      return
      end
      subroutine egs_rayleigh_sampling(medium,e,gle,lgle,costhe,sinthe)
      implicit none
      real*8 e
      real*8 gle,costhe,sinthe,pmax,xv,xmax,csqthe
      real*8 rnnray1,rnnray0,hc_i,twice_hc2,dwi
      parameter(hc_i=80.65506856998,twice_hc2=0.000307444456)
      integer*4 lgle,ib,ibin,medium, trials
      common/randomm/ rng_array(128), urndm(97), crndm, cdrndm, cmrndm,
     *i4opt, ixx, jxx, fool_optimizer, twom24, rng_seed
      integer*4 urndm, crndm, cdrndm, cmrndm, i4opt, ixx, jxx, fool_opti
     *mizer,rng_seed,rng_array
      real*4 twom24
      COMMON/rayleigh_sampling/xgrid(100,7), fcum(100,7), b_array(100,7)
     *, c_array(100,7), i_array(100,7), pmax0(2000,7),pmax1(2000,7)
      real*8 xgrid, fcum, b_array, c_array,pmax0, pmax1
      integer*4 i_array
      dwi = 100-1
      pmax=pmax1(Lgle,MEDIUM)*gle+pmax0(Lgle,MEDIUM)
      xmax = hc_i*e
18851 CONTINUE
        IF((rng_seed .GT. 128))call ranmar_get
        rnnray1 = rng_array(rng_seed)*twom24
        rng_seed = rng_seed + 1
18861   CONTINUE
          IF((rng_seed .GT. 128))call ranmar_get
          rnnray0 = rng_array(rng_seed)*twom24
          rng_seed = rng_seed + 1
          rnnray0 = rnnray0*pmax
          ibin = 1 + rnnray0*dwi
          ib = i_array(ibin,medium)
          IF (( i_array(ibin+1,medium) .GT. ib )) THEN
18871       CONTINUE
              IF((rnnray0.LT.fcum(ib+1,medium)))GO TO18872
              ib=ib+1
            GO TO 18871
18872       CONTINUE
          END IF
          rnnray0 = (rnnray0 - fcum(ib,medium))*c_array(ib,medium)
          xv = xgrid(ib,medium)*exp(log(1+rnnray0)*b_array(ib,medium))
          IF(((xv .LT. xmax)))GO TO18862
        GO TO 18861
18862   CONTINUE
        xv = xv/e
        costhe = 1 - twice_hc2*xv*xv
        csqthe=costhe*costhe
        IF((( 2*rnnray1 .LT. 1 + csqthe )))GO TO18852
      GO TO 18851
18852 CONTINUE
      sinthe=sqrt(1.0-csqthe)
      return
      end
      subroutine prepare_rayleigh_data(ndat,x,f, ne,emin,emax,pe_array,
     *ncbin,fcum,i_array, b_array,c_array)
      implicit none
      integer*4 ndat
      real*8 x(ndat),  f(ndat)
      integer*4 ne
      real*8 emin,  emax,  pe_array(ne)
      integer*4 ncbin
      real*8 fcum(ndat)
      integer*4 i_array(ncbin)
      real*8 b_array(ndat),  c_array(ndat)
      real*8 zero
      real*8 sum0,a,b,x1,x2,pow_x1,pow_x2,dle,e,xmax, anorm,anorm1,anorm
     *2,w,dw,xold,t,aux
      integer*4 i,j,k,ibin
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      write(*,'(a$)') '      preparing data for Rayleigh sampling ... '
      DO 18881 i=1,ndat
        IF((f(i) .EQ. 0.0))f(i) = zero()
18881 CONTINUE
18882 CONTINUE
      sum0=0
      fcum(1)=0
      DO 18891 i=1,ndat-1
        b = log(f(i+1)/f(i))/log(x(i+1)/x(i))
        b_array(i) = b
        x1 = x(i)
        x2 = x(i+1)
        pow_x1 = x1**(2*b)
        pow_x2 = x2**(2*b)
        sum0=sum0+f(i)*f(i)*(x2*x2*pow_x2-x1*x1*pow_x1)/((1+b)*pow_x1)
        fcum(i+1) = sum0
18891 CONTINUE
18892 CONTINUE
      dle = log(emax/emin)/(ne-1)
      i = 1
      DO 18901 j=1,ne
        e = emin*exp(dle*(j-1))
        xmax = 20.607544d0*2*e/prm
        DO 18911 k=i,ndat-1
          IF((xmax .GE. x(k) .AND. xmax .LT. x(k+1)))GO TO18912
18911   CONTINUE
18912   CONTINUE
        i = k
        b = b_array(i)
        x1 = x(i)
        x2 = xmax
        pow_x1 = x1**(2*b)
        pow_x2 = x2**(2*b)
        pe_array(j) = fcum(i) + f(i)*f(i)*(x2*x2*pow_x2-x1*x1*pow_x1)/((
     *  1+b)*pow_x1)
18901 CONTINUE
18902 CONTINUE
      i_array(ncbin) = i
      anorm = 1d0/sqrt(pe_array(ne))
      anorm1 = 1.005d0/pe_array(ne)
      anorm2 = 1d0/pe_array(ne)
      DO 18921 j=1,ne
        pe_array(j) = pe_array(j)*anorm1
        IF((pe_array(j) .GT. 1))pe_array(j) = 1
18921 CONTINUE
18922 CONTINUE
      DO 18931 j=1,ndat
        f(j) = f(j)*anorm
        fcum(j) = fcum(j)*anorm2
        c_array(j) = (1+b_array(j))/(x(j)*f(j))**2
18931 CONTINUE
18932 CONTINUE
      dw = 1d0/(ncbin-1)
      xold = x(1)
      ibin = 1
      b = b_array(1)
      pow_x1 = x(1)**(2*b)
      i_array(1) = 1
      DO 18941 i=2,ncbin-1
        w = dw
18951   CONTINUE
          x1 = xold
          x2 = x(ibin+1)
          t = x1*x1*x1**(2*b)
          pow_x2 = x2**(2*b)
          aux=f(ibin)*f(ibin)*(x2*x2*pow_x2-t)/((1+b)*pow_x1)
          IF (( aux .GT. w )) THEN
            xold = exp(log(t+w*(1+b)*pow_x1/f(ibin)/f(ibin))/(2+2*b))
            i_array(i) = ibin
            GO TO18952
          END IF
          w = w - aux
          xold = x2
          ibin = ibin+1
          b = b_array(ibin)
          pow_x1 = xold**(2*b)
        GO TO 18951
18952   CONTINUE
18941 CONTINUE
18942 CONTINUE
      DO 18961 j=1,ndat
        b_array(j) = 0.5/(1 + b_array(j))
18961 CONTINUE
18962 CONTINUE
      write(*,'(a /)') 'done'
      return
      end
      real*8 function egs_KN_sigma0(e)
      implicit none
      real*8 e
      real*8 con,ko,c1,c2,c3,eps1,eps2
      data con/0.1274783851/
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      ko = e/prm
      IF (( ko .LT. 0.01 )) THEN
        egs_KN_sigma0 = 8.*con/3.*(1-ko*(2-ko*(5.2-13.3*ko)))/prm
        return
      END IF
      c1 = 1./(ko*ko)
      c2 = 1. - 2*(1+ko)*c1
      c3 = (1+2*ko)*c1
      eps2 = 1
      eps1 = 1./(1+2*ko)
      egs_KN_sigma0 = (c1*(1./eps1-1./eps2)+c2*log(eps2/eps1)+eps2*(c3+0
     *.5*eps2)- eps1*(c3+0.5*eps1))/e*con
      return
      end
      real*8 function egs_KN_sigma1(e)
      implicit none
      real*8 e
      real*8 con,ko,c1,c2,c3,eps1,eps2
      data con/0.1274783851/
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      ko = e/prm
      c1 = 1./(ko*ko)
      c2 = 1. - 2*(1+ko)*c1
      c3 = (1+2*ko)*c1
      eps2 = 1
      eps1 = 1./(1+2*ko)
      egs_KN_sigma1 = c1*(1./eps1-1./eps2)
      egs_KN_sigma1 = egs_KN_sigma1 + log(eps2/eps1)*(c2 - c1) - c2*(eps
     *2-eps1)
      egs_KN_sigma1 = egs_KN_sigma1 + c3*(eps2-eps1)*(1-0.5*(eps1+eps2))
      egs_KN_sigma1 = egs_KN_sigma1 + (eps2-eps1)*(0.5*(eps1+eps2)-(eps1
     **eps1+eps2*eps2+eps1*eps2)/3)
      egs_KN_sigma1 = egs_KN_sigma1*con
      return
      end
      subroutine egsi_get_data(flag,iunit,n,ne,zsorted,pz_sorted,ge1,ge0
     *,data)
      implicit none
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      real*8 eth
      integer*4 flag,iunit,n,ne
      real*8 ge1,ge0,zsorted(*),pz_sorted(*),data(*)
      real*8 etmp(2000),ftmp(2000)
      real*8 gle,sig,p,e
      integer*4 i,j,k,kk,iz,iz_old,ndat,iiz
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      rewind(iunit)
      iz_old = 0
      DO 18971 k=1,n
        data(k) = 0
18971 CONTINUE
18972 CONTINUE
      DO 18981 i=1,ne
        iiz = int(zsorted(i)+0.5)
        DO 18991 iz=iz_old+1,iiz
          read(iunit,*,err=19000) ndat
          IF (( ndat .GT. 2000 )) THEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,*) 'Too many input data points. Max. is ',2000
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          END IF
          IF (( flag .EQ. 0 .OR. flag .EQ. 3)) THEN
            read(iunit,*,err=19000) (etmp(k),ftmp(k),k=1,ndat)
          ELSE
            read(iunit,*,err=19000) (etmp(k+1),ftmp(k+1), k=1,ndat)
            IF (( flag .EQ. 1 )) THEN
              eth = 2*rm
            ELSE
              eth = 4*rm
            END IF
            ndat = ndat + 1
            DO 19011 k=2,ndat
              ftmp(k) = ftmp(k) - 3*log(1-eth/exp(etmp(k)))
19011       CONTINUE
19012       CONTINUE
            ftmp(1) = ftmp(2)
            etmp(1) = log(eth)
          END IF
18991   CONTINUE
18992   CONTINUE
        iz_old = iiz
        DO 19021 k=1,n
          gle = (k - ge0)/ge1
          e = exp(gle)
          IF (( gle .LT. etmp(1) .OR. gle .GE. etmp(ndat) )) THEN
            IF (( flag .EQ. 0 )) THEN
              write(i_log,'(/a)') '***************** Error: '
              write(i_log,*) 'Energy ',exp(gle), ' is outside the availa
     *ble data range of ', exp(etmp(1)),exp(etmp(ndat))
              write(i_log,'(/a)') '***************** Quiting now.'
              call exit(1)
            ELSE IF((flag .EQ. 1 .OR. flag .EQ. 2)) THEN
              IF (( gle .LT. etmp(1) )) THEN
                sig = 0
              ELSE
                sig = exp(ftmp(ndat))
              END IF
            ELSE
              sig = 0
            END IF
          ELSE
            DO 19031 kk=1,ndat-1
              IF((gle .GE. etmp(kk) .AND. gle .LT. etmp(kk+1)))GO TO1903
     *        2
19031       CONTINUE
19032       CONTINUE
            IF (( flag .NE. 3)) THEN
              p = (gle - etmp(kk))/(etmp(kk+1) - etmp(kk))
              sig = exp(p*ftmp(kk+1) + (1-p)*ftmp(kk))
            ELSE
              p = (e - exp(etmp(kk)))/(exp(etmp(kk+1)) - exp(etmp(kk)))
              sig = p*exp(ftmp(kk+1)) + (1-p)*exp(ftmp(kk))
            END IF
          END IF
          IF(((flag .EQ. 1 .OR. flag .EQ. 2) .AND. e .GT. eth))sig = sig
     *    *(1-eth/e)**3
          data(k) = data(k) + pz_sorted(i)*sig
19021   CONTINUE
19022   CONTINUE
18981 CONTINUE
18982 CONTINUE
      return
19000 CONTINUE
      write(i_log,'(/a)') '***************** Error: '
      write(i_log,*) 'Error while reading user photon cross sections fro
     *m unit ', iunit
      write(i_log,'(/a)') '***************** Quiting now.'
      call exit(1)
      return
      end
      subroutine egsi_get_shell_data(imed,n,ne,zsorted,pz_sorted,ge1,ge0
     *,data)
      implicit none
      common /egs_io/ file_extensions(20), file_units(20), user_code,  i
     *nput_file,  output_file, pegs_file,  hen_house,  egs_home,  work_d
     *ir,  host_name,  n_parallel,  i_parallel,  first_parallel, n_max_p
     *arallel, n_chunk,  n_files, i_input,  i_log,  i_incoh,  i_nist_dat
     *a,  i_mscat,  i_photo_cs,  i_photo_relax,  xsec_out,  is_batch,  i
     *s_pegsless
      character input_file*256, output_file*256, pegs_file*256, file_ext
     *ensions*10, hen_house*128, egs_home*128, work_dir*128, user_code*6
     *4, host_name*64
      integer*4 n_parallel, i_parallel, first_parallel,n_max_parallel, n
     *_chunk, file_units, n_files,i_input,i_log,i_incoh, i_nist_data,i_m
     *scat,i_photo_cs,i_photo_relax, xsec_out
      logical is_batch,is_pegsless
      COMMON/BREMPR/ DL1(8,7),DL2(8,7),DL3(8,7),DL4(8,7),DL5(8,7),DL6(8,
     *7), ALPHI(2,7),BPAR(2,7),DELPOS(2,7), WA(7,50),PZ(7,50),ZELEM(7,50
     *),RHOZ(7,50), PWR2I(50), DELCM(7),ZBRANG(7),LZBRANG(7),NNE(7), IBR
     *DST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(7,50,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      COMMON/MEDIA/  RLC(7),RLDU(7),RHO(7),MSGE(7),MGE(7),MSEKE(7),MEKE(
     *7),MLEKE(7),MCMFP(7),MRANGE(7),IRAYLM(7),IPHOTONUCM(7), MEDIA(24,7
     *), photon_xsections, comp_xsections, photonuc_xsections,eii_xfile,
     *IPHOTONUC,NMED
      CHARACTER*4 MEDIA
      real*8 RLC,  RLDU,  RHO,  apx, upx
      integer*4 MSGE,  MGE,  MSEKE, MEKE,  MLEKE, MCMFP, MRANGE, IRAYLM,
     *  IPHOTONUCM, IPHOTONUC, NMED
      character*16 eii_xfile
      character*16 photon_xsections
      character*16 comp_xsections
      character*16 photonuc_xsections
      common/pe_shell_data/ pe_xsection(500,100,0:16),  pe_elem_prob(500
     *,100,7),   pe_energy(500,100),  pe_zsorted(100,7), pe_be(100,16),
     * pe_nshell(100),  pe_zpos(100),  pe_nge(100),  pe_ne
      real*8 pe_be, pe_energy, pe_xsection, pe_elem_prob
      integer*4 pe_zsorted, pe_nshell, pe_zpos, pe_nge, pe_ne
      integer*4 n,  ne,  ndat
      real*8 ge1,ge0,zsorted(*),pz_sorted(*),data(*)
      real*8 sigma(500),sigmaMedium
      real*4 etmp(2000),ftmp(2000)
      real*4 gle,sig,p
      integer*4 i,j,k,kk,iz,zpos,imed
      DO 19041 k=1,n
        data(k) = 0
19041 CONTINUE
19042 CONTINUE
      DO 19051 k=1,ne
        sigma(k) = 0
19051 CONTINUE
19052 CONTINUE
      DO 19061 i=1,ne
        iz = int(zsorted(i)+0.5)
        zpos = pe_zpos(iz)
        ndat = pe_nge(zpos)
        DO 19071 k=1,ndat
          pe_elem_prob(k,i,imed) = pz_sorted(i)*pe_xsection(k,zpos,0)
          etmp(k) = pe_energy(k,zpos)
          ftmp(k) = log(pe_xsection(k,zpos,0))
19071   CONTINUE
19072   CONTINUE
        DO 19081 k=1,n
          gle = (k - ge0)/ge1
          IF (( gle .LT. etmp(1) .OR. gle .GE. etmp(ndat) )) THEN
            write(i_log,'(/a)') '***************** Error: '
            write(i_log,*) 'egsi_get_shell_data: Energy ',exp(gle), ' is
     * outside the available data range of ', exp(etmp(1)),exp(etmp(ndat
     *      ))
            write(i_log,'(/a)') '***************** Quiting now.'
            call exit(1)
          ELSE
            DO 19091 kk=1,ndat-1
              IF((gle .GE. etmp(kk) .AND. gle .LT. etmp(kk+1)))GO TO1909
     *        2
19091       CONTINUE
19092       CONTINUE
            p = (gle - etmp(kk))/(etmp(kk+1) - etmp(kk))
            sig = exp(p*ftmp(kk+1) + (1-p)*ftmp(kk))
          END IF
          data(k) = data(k) + pz_sorted(i)*sig
19081   CONTINUE
19082   CONTINUE
19061 CONTINUE
19062 CONTINUE
      DO 19101 i=1,ne
        iz = int(zsorted(i)+0.5)
        zpos = pe_zpos(iz)
        ndat = pe_nge(zpos)
        DO 19111 k=1,ndat
          sig = sigmaMedium(imed,pe_energy(k,zpos))
          pe_elem_prob(k,i,imed) = log(pe_elem_prob(k,i,imed)/sig)
19111   CONTINUE
19112   CONTINUE
19101 CONTINUE
19102 CONTINUE
      return
      end
      real*8 function sigmaMedium(imed, logE)
      implicit none
      COMMON/BREMPR/ DL1(8,7),DL2(8,7),DL3(8,7),DL4(8,7),DL5(8,7),DL6(8,
     *7), ALPHI(2,7),BPAR(2,7),DELPOS(2,7), WA(7,50),PZ(7,50),ZELEM(7,50
     *),RHOZ(7,50), PWR2I(50), DELCM(7),ZBRANG(7),LZBRANG(7),NNE(7), IBR
     *DST,IPRDST,ibr_nist,pair_nrc,itriplet, ASYM(7,50,2)
      CHARACTER*4 ASYM
      real*8 DL1,DL2,DL3,DL4,DL5,DL6,   ALPHI,  BPAR,  DELPOS,  WA,  PZ,
     *  ZELEM,  RHOZ,  PWR2I,  DELCM,  ZBRANG,  LZBRANG
      integer*4 NNE,  IBRDST,  IPRDST,  ibr_nist,  itriplet,  pair_nrc
      common/pe_shell_data/ pe_xsection(500,100,0:16),  pe_elem_prob(500
     *,100,7),   pe_energy(500,100),  pe_zsorted(100,7), pe_be(100,16),
     * pe_nshell(100),  pe_zpos(100),  pe_nge(100),  pe_ne
      real*8 pe_be, pe_energy, pe_xsection, pe_elem_prob
      integer*4 pe_zsorted, pe_nshell, pe_zpos, pe_nge, pe_ne
      real*8 logE, slope, sigma
      integer*4 k,imed,Z,zpos,m,ibsearch
      sigmaMedium = 0
      DO 19121 k=1,nne(imed)
        Z = int( zelem(imed,k) + 0.5 )
        zpos = pe_zpos(Z)
        m = ibsearch(logE,pe_nge(zpos),pe_energy(1,zpos))
        slope = log(pe_xsection(m+1,zpos,0)/pe_xsection(m,zpos,0))
        slope = slope/(pe_energy(m+1,zpos)-pe_energy(m,zpos))
        sigma = log(pe_xsection(m,zpos,0))
        sigma = sigma + slope*(logE - pe_energy(m,zpos))
        sigma = exp(sigma)
        sigmaMedium = sigmaMedium + pz(imed,k)*sigma
19121 CONTINUE
19122 CONTINUE
      return
      end
      subroutine egs_heap_sort(n,rarray,jarray)
      implicit none
      integer*4 n,jarray(*)
      real*8 rarray(*)
      integer*4 i,ir,j,l,ira
      real*8 rra
      DO 19131 i=1,n
        jarray(i)=i
19131 CONTINUE
19132 CONTINUE
      IF((n .LT. 2))return
      l=n/2+1
      ir=n
19141 CONTINUE
        IF ((l .GT. 1)) THEN
          l=l-1
          rra=rarray(l)
          ira=l
        ELSE
          rra=rarray(ir)
          ira=jarray(ir)
          rarray(ir)=rarray(1)
          jarray(ir)=jarray(1)
          ir=ir-1
          IF ((ir .EQ. 1)) THEN
            rarray(1)=rra
            jarray(1)=ira
            return
          END IF
        END IF
        i=l
        j=l+l
19151   CONTINUE
          IF((j .GT. ir))GO TO19152
          IF ((j .LT. ir)) THEN
            IF((rarray(j) .LT. rarray(j+1)))j=j+1
          END IF
          IF ((rra .LT. rarray(j))) THEN
            rarray(i)=rarray(j)
            jarray(i)=jarray(j)
            i=j
            j=j+j
          ELSE
            j=ir+1
          END IF
        GO TO 19151
19152   CONTINUE
        rarray(i)=rra
        jarray(i)=ira
      GO TO 19141
19142 CONTINUE
      return
      end
      SUBROUTINE PHOTONUC
      implicit none
      COMMON/STACK/ E(10000),X(10000),Y(10000),Z(10000),U(10000),V(10000
     *),W(10000),DNEAR(10000),WT(10000),IQ(10000),IR(10000),LATCH(10000)
     *, LATCHI,NP,NPold
      DOUBLE PRECISION E
      real*8 X,Y,Z,  U,V,W,  DNEAR,  WT
      integer*4 IQ,  IR,  LATCH,  LATCHI, NP,  NPold
      COMMON/EPCONT/EDEP,EDEP_LOCAL,TSTEP,TUSTEP,USTEP,TVSTEP,VSTEP, RHO
     *F,EOLD,ENEW,EKE,ELKE,GLE,E_RANGE, x_final,y_final,z_final, u_final
     *,v_final,w_final, IDISC,IROLD,IRNEW,IAUSFL(35)
      DOUBLE PRECISION EDEP,  EDEP_LOCAL
      real*8 TSTEP,  TUSTEP,  USTEP,  VSTEP,  TVSTEP,  RHOF,  EOLD,  ENE
     *W,  EKE,  ELKE,  GLE,  E_RANGE, x_final,y_final,z_final,  u_final,
     *v_final,w_final
      integer*4 IDISC,  IROLD,  IRNEW,  IAUSFL
      COMMON/USEFUL/PZERO,PRM,PRMT2,RM,MEDIUM,MEDOLD
      DOUBLE PRECISION PZERO,  PRM,  PRMT2
      real*8 RM
      integer*4 MEDIUM,  MEDOLD
      DATA RM,PRM,PRMT2,PZERO/0.5109989461,0.5109989461,1.0219978922,0.D
     *0/
      npold = np
      edep = pzero
      e(np) = pzero
      wt(np) = 0
      return
      end
